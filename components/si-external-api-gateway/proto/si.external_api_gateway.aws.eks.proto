syntax = "proto3";

package si.external_api_gateway.aws.eks;

import "si-external-api-gateway/proto/si.external_api_gateway.proto";

// [API reference](https://docs.aws.amazon.com/eks/latest/APIReference/Welcome.html)
service EKS {
  // Creates an Amazon EKS control plane.
  //
  // The Amazon EKS control plane consists of control plane instances that run
  // the Kubernetes software, such as etcd and the API server. The control
  // plane runs in an account managed by AWS, and the Kubernetes API is exposed
  // via the Amazon EKS API server endpoint. Each Amazon EKS cluster control
  // plane is single-tenant and unique and runs on its own set of Amazon EC2
  // instances.
  //
  // The cluster control plane is provisioned across multiple Availability
  // Zones and fronted by an Elastic Load Balancing Network Load Balancer.
  // Amazon EKS also provisions elastic network interfaces in your VPC subnets
  // to provide connectivity from the control plane instances to the worker
  // nodes (for example, to support kubectl exec, logs, and proxy data flows).
  //
  // Amazon EKS worker nodes run in your AWS account and connect to your
  // cluster's control plane via the Kubernetes API server endpoint and a
  // certificate file that is created for your cluster.
  //
  // You can use the endpointPublicAccess and endpointPrivateAccess parameters
  // to enable or disable public and private access to your cluster's
  // Kubernetes API server endpoint. By default, public access is enabled, and
  // private access is disabled. For more information, see Amazon EKS Cluster
  // Endpoint Access Control in the Amazon EKS User Guide .
  //
  // You can use the logging parameter to enable or disable exporting the
  // Kubernetes control plane logs for your cluster to CloudWatch Logs. By
  // default, cluster control plane logs aren't exported to CloudWatch Logs.
  // For more information, see Amazon EKS Cluster Control Plane Logs in the
  // Amazon EKS User Guide.
  //
  // Note: CloudWatch Logs ingestion, archive storage, and data scanning rates
  // apply to exported control plane logs. For more information, see Amazon
  // CloudWatch Pricing.
  //
  // Cluster creation typically takes between 10 and 15 minutes. After you
  // create an Amazon EKS cluster, you must configure your Kubernetes tooling
  // to communicate with the API server and launch worker nodes into your
  // cluster.  For more information, see Managing Cluster Authentication and
  // Launching Amazon EKS Worker Nodes in the Amazon EKS User Guide.
  //
  // [API Reference](https://docs.aws.amazon.com/eks/latest/APIReference/API_CreateCluster.html)
  rpc CreateCluster(CreateClusterRequest) returns (CreateClusterReply);
  // Creates a managed worker node group for an Amazon EKS cluster. You can
  // only create a node group for your cluster that is equal to the current
  // Kubernetes version for the cluster. All node groups are created with the
  // latest AMI release version for the respective minor Kubernetes version of
  // the cluster.
  //
  // An Amazon EKS managed node group is an Amazon EC2 Auto Scaling group and
  // associated Amazon EC2 instances that are managed by AWS for an Amazon EKS
  // cluster. Each node group uses a version of the Amazon EKS-optimized Amazon
  // Linux 2 AMI. For more information, see Managed Node Groups in the Amazon
  // EKS User Guide.
  //
  // [API Reference](https://docs.aws.amazon.com/eks/latest/APIReference/API_CreateNodegroup.html)
  rpc CreateNodegroup(CreateNodegroupRequest) returns (CreateNodegroupReply);
  // Returns descriptive information about an Amazon EKS cluster.
  //
  // The API server endpoint and certificate authority data returned by this
  // operation are required for kubelet and kubectl to communicate with your
  // Kubernetes API server. For more information, see Create a kubeconfig for
  // Amazon EKS.
  //
  // Note: The API server endpoint and certificate authority data aren't
  // available until the cluster reaches the `ACTIVE` state.
  //
  // [API Reference](https://docs.aws.amazon.com/eks/latest/APIReference/API_DescribeCluster.html)
  rpc DescribeCluster(DescribeClusterRequest) returns (DescribeClusterReply);
  // Returns descriptive information about an Amazon EKS node group.
  //
  // [API Reference](https://docs.aws.amazon.com/eks/latest/APIReference/API_DescribeNodegroup.html)
  rpc DescribeNodegroup(DescribeNodegroupRequest) returns (DescribeNodegroupReply);
}

// [API Reference](https://docs.aws.amazon.com/eks/latest/APIReference/API_CreateCluster.html#API_CreateCluster_RequestSyntax)
message CreateClusterRequest {
  si.external_api_gateway.Context context = 1;
  // Unique, case-sensitive identifier that you provide to ensure the
  // idempotency of the request.
  //
  // Required: No
  string client_request_token = 2;
  // Enable or disable exporting the Kubernetes control plane logs for your
  // cluster to CloudWatch Logs. By default, cluster control plane logs aren't
  // exported to CloudWatch Logs. For more information, see Amazon EKS Cluster
  // Control Plane Logs in the Amazon EKS User Guide .
  //
  // Required: No
  Logging logging = 3;
  // The unique name to give to your cluster.
  //
  // Required: No
  string name = 4;
  // The VPC configuration used by the cluster control plane. Amazon EKS VPC
  // resources have specific requirements to work properly with Kubernetes. For
  // more information, see Cluster VPC Considerations and Cluster Security
  // Group Considerations in the Amazon EKS User Guide. You must specify at
  // least two subnets. You can specify up to five security groups, but we
  // recommend that you use a dedicated security group for your cluster control
  // plane.
  //
  // Required: Yes
  VpcConfigRequest resources_vpc_config = 5;
  // The Amazon Resource Name (ARN) of the IAM role that provides permissions
  // for Amazon EKS to make calls to other AWS API operations on your behalf.
  // For more information, see Amazon EKS Service IAM Role in the Amazon EKS
  // User Guide.
  //
  // Required: Yes
  string role_arn = 6;
  //  metadata to apply to the cluster to assist with categorization and
  //  organization. Each tag consists of a key and an optional value, both of
  //  which you define.
  //
  // Required: No
  repeated Tag tags = 7;
  //  desired Kubernetes version for your cluster. If you don't specify a value
  //  here, the latest version available in Amazon EKS is used.
  //
  // Required: No
  string version = 8;
}

// [API Reference](https://docs.aws.amazon.com/eks/latest/APIReference/API_CreateCluster.html#API_CreateCluster_ResponseSyntax)
message CreateClusterReply {
  // The full description of your new cluster.
  Cluster cluster = 1;
  Error error = 2;
}

// [API Reference](https://docs.aws.amazon.com/eks/latest/APIReference/API_CreateNodegroup.html#API_CreateNodegroup_RequestSyntax)
message CreateNodegroupRequest {
  si.external_api_gateway.Context context = 1;
  // The name of the cluster to create the node group in.
  //
  // Required: Yes
  string cluster_name = 2;
  // The AMI type for your node group. GPU instance types should use the
  // AL2_x86_64_GPU AMI type, which uses the Amazon EKS-optimized Linux AMI
  // with GPU support. Non-GPU instances should use the AL2_x86_64 AMI type,
  // which uses the Amazon EKS-optimized Linux AMI.
  //
  // Value Values: `AL2_x86_64 | AL2_x86_64_GPU`
  //
  // Required: No
  string ami_type = 3;
  // Unique, case-sensitive identifier that you provide to ensure the
  // idempotency of the request.
  //
  // Required: No
  string client_request_token = 4;
  // The root device disk size (in GiB) for your node group instances. The
  // default disk size is 20 GiB.
  //
  // Required: No
  uint32 disk_size = 5;
  // The instance type to use for your node group. Currently, you can specify a
  // single instance type for a node group. The default value for this
  // parameter is t3.medium. If you choose a GPU instance type, be sure to
  // specify the AL2_x86_64_GPU with the amiType parameter.
  //
  // Required: No
  repeated string instance_types = 6;
  // The Kubernetes labels to be applied to the nodes in the node group when
  // they are created.
  //
  // Key Length Constraints: Minimum length of 1. Maximum length of 63.
  //
  // Value Length Constraints: Minimum length of 1. Maximum length of 253.
  //
  // Required: No
  repeated Label labels = 7;
  // The unique name to give your node group.
  //
  // Required: Yes
  string nodegroup_name = 8;
  // The IAM role associated with your node group. The Amazon EKS worker node
  // kubelet daemon makes calls to AWS APIs on your behalf. Worker nodes
  // receive permissions for these API calls through an IAM instance profile
  // and associated policies. Before you can launch worker nodes and register
  // them into a cluster, you must create an IAM role for those worker nodes to
  // use when they are launched. For more information, see Amazon EKS Worker
  // Node IAM Role in the Amazon EKS User Guide .
  //
  // Required: Yes
  string node_role = 9;
  // The AMI version of the Amazon EKS-optimized AMI to use with your node
  // group. By default, the latest available AMI version for the node group's
  // current Kubernetes version is used. For more information, see Amazon
  // EKS-Optimized Linux AMI Versions in the Amazon EKS User Guide.
  //
  // Required: No
  string release_version = 10;
  // The remote access (SSH) configuration to use with your node group.
  //
  // Required: No
  RemoteAccessConfig remote_access = 11;
  // The scaling configuration details for the Auto Scaling group that is
  // created for your node group.
  NodegroupScalingConfig scaling_config = 12;
  // The subnets to use for the Auto Scaling group that is created for your
  // node group. These subnets must have the tag key
  // kubernetes.io/cluster/CLUSTER_NAME with a value of shared, where
  // CLUSTER_NAME is replaced with the name of your cluster.
  //
  // Required: No
  repeated string subnets = 13;
  // The metadata to apply to the node group to assist with categorization and
  // organization. Each tag consists of a key and an optional value, both of
  // which you define. Node group tags do not propagate to any other resources
  // associated with the node group, such as the Amazon EC2 instances or
  // subnets.
  //
  // Required: No
  repeated Tag tags = 14;
  // The Kubernetes version to use for your managed nodes. By default, the
  // Kubernetes version of the cluster is used, and this is the only accepted
  // specified value.
  //
  // Required: No
  string version = 15;
}

// [API Reference](https://docs.aws.amazon.com/eks/latest/APIReference/API_CreateNodegroup.html#API_CreateNodegroup_ResponseSyntax)
message CreateNodegroupReply {
  // The full description of your new node group.
  Nodegroup nodegroup = 1;
  Error error = 2;
}

// [API Reference](https://docs.aws.amazon.com/eks/latest/APIReference/API_DescribeCluster.html#API_DescribeCluster_RequestSyntax)
message DescribeClusterRequest {
  si.external_api_gateway.Context context = 1;
  // The name of the cluster to describe.
  string name = 2;
}

// [API Reference](https://docs.aws.amazon.com/eks/latest/APIReference/API_DescribeCluster.html#API_DescribeCluster_ResponseSyntax)
message DescribeClusterReply {
  // The full description of your specified cluster.
  Cluster cluster = 1;
  Error error = 2;
}

// [API Reference](https://docs.aws.amazon.com/eks/latest/APIReference/API_DescribeNodegroup.html#API_DescribeNodegroup_RequestSyntax)
message DescribeNodegroupRequest {
  si.external_api_gateway.Context context = 1;
  // The name of the Amazon EKS cluster associated with the node group.
  //
  // Required: Yes
  string cluster_name = 2;
  // The name of the node group to describe.
  //
  // Required: Yes
  string nodegroup_name = 3;
}

// [API Reference](https://docs.aws.amazon.com/eks/latest/APIReference/API_DescribeNodegroup.html#API_DescribeNodegroup_ResponseSyntax)
message DescribeNodegroupReply {
  // The full description of your node group.
  Nodegroup nodegroup = 1;
  Error error = 2;
}

// An object representing the certificate-authority-data for your cluster.
//
// [API Reference](https://docs.aws.amazon.com/eks/latest/APIReference/API_Certificate.html)
message Certificate {
  // Base64-encoded certificate data required to communicate with your cluster.
  // Add this to the certificate-authority-data section of the kubeconfig file
  // for your cluster.
  //
  // Required: No
  string data = 1;
}

// An object representing an Amazon EKS cluster.
//
// [API Reference](https://docs.aws.amazon.com/eks/latest/APIReference/API_Cluster.html)
message Cluster {
  // The Amazon Resource Name (ARN) of the cluster.
  //
  // Required: No
  string arn = 1;
  // The certificate-authority-data for your cluster.
  //
  // Required: No
  Certificate certificate_authority = 2;
  // Unique, case-sensitive identifier that you provide to ensure the
  // idempotency of the request.
  //
  // Required: No
  string client_request_token = 3;
  // The Unix epoch timestamp in seconds for when the cluster was created.
  //
  // Required: No
  string created_at = 4;
  // The endpoint for your Kubernetes API server.
  //
  // Required: No
  string endpoint = 5;
  // The identity provider information for the cluster.
  //
  // Required: No
  Identity identity = 6;
  // An object representing an identity provider for authentication
  // credentials
  //
  // [API Reference](https://docs.aws.amazon.com/eks/latest/APIReference/API_Identity.html)
  message Identity {
    // The OpenID Connect identity provider information for the cluster.
    //
    // Required: No
    Oidc oidc = 1;
    // An object representing the OpenID Connect identity provider
    // information for the cluster.
    //
    // [API Reference](https://docs.aws.amazon.com/eks/latest/APIReference/API_OIDC.html)
    message Oidc {
      // The issuer URL for the OpenID Connect identity provider.
      //
      // Required: No
      string issuer = 1;
    }
  }
  // The logging configuration for your cluster.
  //
  // Required: No
  Logging logging = 7;
  // The name of the cluster.
  //
  // Required: No
  string name = 8;
  // The platform version of your Amazon EKS cluster. For more information,
  // see Platform Versions in the Amazon EKS User Guide.
  //
  // Required: No
  string platform_version = 9;
  // VPC configuration used by the cluster control plane. Amazon EKS VPC
  // resources have specific requirements to work properly with Kubernetes.
  // For more information, see Cluster VPC Considerations and Cluster
  // Security Group Considerations in the Amazon EKS User Guide.
  //
  // Required: No
  VpcConfigResponse resources_vpc_config = 10;
  // The Amazon Resource Name (ARN) of the IAM role that provides permissions
  // for the Kubernetes control plane to make calls to AWS API operations on
  // your behalf.
  //
  // Required: No
  string role_arn = 11;
  // The current status of the cluster.
  //
  // Valid Values: `CREATING | ACTIVE | DELETING | FAILED | UPDATING`
  //
  // Required: No
  string status = 12;
  // The metadata that you apply to the cluster to assist with categorization
  // and organization. Each tag consists of a key and an optional value, both
  // of which you define. Cluster tags do not propagate to any other
  // resources associated with the cluster.
  //
  // Required: No
  repeated Tag tags = 13;
  // The Kubernetes server version for the cluster.
  //
  // Required: No
  string version = 14;
}

message Label {
  // Label key name.
  //
  // Length Constraints: Minimum length of 1. Maximum length of 63.
  //
  // Required: Yes
  string key = 1;
  // Label value.
  //
  // Length Constraints: Minimum length of 1. Maximum length of 253.
  //
  // Required: No
  string value = 2;
}

// An object representing the logging configuration for resources in your
// cluster.
//
// [API Reference](https://docs.aws.amazon.com/eks/latest/APIReference/API_Logging.html)
message Logging {
  // The cluster control plane logging configuration for your cluster.
  //
  // Required: No
  repeated LogSetup cluster_logging = 1;
  // An object representing the enabled or disabled Kubernetes control plane
  // logs for your cluster.
  //
  // [API Reference](https://docs.aws.amazon.com/eks/latest/APIReference/API_LogSetup.html)
  message LogSetup {
    // If a log type is enabled, that log type exports its control plane logs
    // to CloudWatch Logs. If a log type isn't enabled, that log type doesn't
    // export its control plane logs. Each individual log type can be enabled
    // or disabled independently.
    //
    // Required: No
    bool enabled = 1;
    // The available cluster control plane log types.
    //
    // Valid Values: `api | audit | authenticator | controllerManager |
    // scheduler`
    //
    // Required: No
    repeated string types = 2;
  }
}

// An object representing an Amazon EKS managed node group.
//
// [API Reference](https://docs.aws.amazon.com/eks/latest/APIReference/API_Nodegroup.html)
message Nodegroup {
  // The AMI type associated with your node group. GPU instance types should
  // use the AL2_x86_64_GPU AMI type, which uses the Amazon EKS-optimized Linux
  // AMI with GPU support. Non-GPU instances should use the AL2_x86_64 AMI
  // type, which uses the Amazon EKS-optimized Linux AMI.
  //
  // Valid Values: `AL2_x86_64 | AL2_x86_64_GPU`
  //
  // Required: No
  string ami_type = 1;
  // The name of the cluster that the managed node group resides in.
  //
  // Required: No
  string cluster_name = 2;
  // The Unix epoch timestamp in seconds for when the managed node group was
  // created.
  //
  // Required: No
  string created_at = 3;
  // The root device disk size (in GiB) for your node group instances. The
  // default disk size is 20 GiB.
  //
  // Required: No
  uint32 disk_size = 4;
  // The health status of the node group. If there are issues with your node
  // group's health, they are listed here.
  //
  // Required: No
  NodegroupHealth health = 5;
  // The instance types associated with your node group.
  //
  // Required: No
  repeated string instance_types = 6;
  // The Kubernetes labels applied to the nodes in the node group.
  //
  // Note: Only labels that are applied with the Amazon EKS API are shown here.
  // There may be other Kubernetes labels applied to the nodes in this group
  //
  // Key Length Constraints: Minimum length of 1. Maximum length of 63.
  //
  // Value Length Constraints: Minimum length of 1. Maximum length of 253.
  //
  // Required: No
  repeated Label Labels = 7;
  // The Unix epoch timestamp in seconds for when the managed node group was
  // last modified.
  //
  // Required: No
  string modified_at = 8;
  // The Amazon Resource Name (ARN) associated with the managed node group.
  //
  // Required: No
  string nodegroup_arn = 9;
  // The name associated with an Amazon EKS managed node group.
  //
  // Required: No
  string nodegroup_name = 10;
  // The IAM role associated with your node group. The Amazon EKS worker node
  // kubelet daemon makes calls to AWS APIs on your behalf. Worker nodes
  // receive permissions for these API calls through an IAM instance profile
  // and associated policies. Before you can launch worker nodes and register
  // them into a cluster, you must create an IAM role for those worker nodes to
  // use when they are launched. For more information, see Amazon EKS Worker
  // Node IAM Role in the Amazon EKS User Guide.
  //
  // Required: No
  string node_role = 11;
  // The AMI version of the managed node group. For more information, see
  // Amazon EKS-Optimized Linux AMI Versions in the Amazon EKS User Guide.
  //
  // Required: No
  string release_version = 12;
  // The remote access (SSH) configuration that is associated with the node
  // group.
  //
  // Required: No
  RemoteAccessConfig remote_access = 13;
  // The resources associated with the node group, such as Auto Scaling groups
  // and security groups for remote access.
  //
  // Required: No
  NodegroupResources resources = 14;
  // The scaling configuration details for the Auto Scaling group that is
  // associated with your node group.
  //
  // Required: No
  NodegroupScalingConfig scaling_config = 15;
  // The current status of the managed node group.
  //
  // Value Values: `CREATING | ACTIVE | UPDATING | DELETING | CREATE_FAILED |
  // DELETE_FAILED | DEGRADED`
  //
  // Required: No
  string status = 16;
  // The subnets allowed for the Auto Scaling group that is associated with
  // your node group. These subnets must have the following tag:
  // kubernetes.io/cluster/CLUSTER_NAME, where CLUSTER_NAME is replaced with
  // the name of your cluster.
  //
  // Required: No
  repeated string subnets = 17;
  // The metadata applied to the node group to assist with categorization and
  // organization. Each tag consists of a key and an optional value, both of
  // which you define. Node group tags do not propagate to any other resources
  // associated with the node group, such as the Amazon EC2 instances or
  // subnets.
  //
  // Required: No
  repeated Tag tags = 18;
  // The Kubernetes version of the managed node group.
  //
  // Required: No
  string version = 19;
}

// An object representing the health status of the node group.
//
// [API Reference](https://docs.aws.amazon.com/eks/latest/APIReference/API_NodegroupHealth.html)
message NodegroupHealth {
  // Any issues that are associated with the node group.
  //
  // Required: No
  repeated Issue issues = 1;
  // An object representing an issue with an Amazon EKS resource.
  //
  // [API Reference](https://docs.aws.amazon.com/eks/latest/APIReference/API_Issue.html)
  message Issue {
    // A brief description of the error.
    //
    // - **AutoScalingGroupNotFound**: We couldn't find the Auto Scaling group
    // associated with the managed node group. You may be able to recreate an
    // Auto Scaling group with the same settings to recover.
    // - **Ec2SecurityGroupNotFound**: We couldn't find the cluster security
    // group for the cluster. You must recreate your cluster.
    // - **Ec2SecurityGroupDeletionFailure**: We could not delete the remote
    // access security group for your managed node group. Remove any
    // dependencies from the security group.
    // - **Ec2LaunchTemplateNotFound**: We couldn't find the Amazon EC2 launch
    // template for your managed node group. You may be able to recreate a
    // launch template with the same settings to recover.
    // - **Ec2LaunchTemplateVersionMismatch**: The Amazon EC2 launch template
    // version for your managed node group does not match the version that
    // Amazon EKS created. You may be able to revert to the version that Amazon
    // EKS created to recover.
    // - **IamInstanceProfileNotFound**: We couldn't find the IAM instance
    // profile for your managed node group. You may be able to recreate an
    // instance profile with the same settings to recover.
    // - **IamNodeRoleNotFound**: We couldn't find the IAM role for your
    // managed node group. You may be able to recreate an IAM role with the
    // same settings to recover.
    // - **AsgInstanceLaunchFailures**: Your Auto Scaling group is experiencing
    // failures while attempting to launch instances.
    // - **NodeCreationFailure**: Your launched instances are unable to
    // register with your Amazon EKS cluster. Common causes of this failure are
    // insufficient worker node IAM role permissions or lack of outbound
    // internet access for the nodes.
    // - **InstanceLimitExceeded**: Your AWS account is unable to launch any
    // more instances of the specified instance type. You may be able to
    // request an Amazon EC2 instance limit increase to recover.
    // - **InsufficientFreeAddresses**: One or more of the subnets associated
    // with your managed node group does not have enough available IP addresses
    // for new nodes.
    // - **AccessDenied**: Amazon EKS or one or more of your managed nodes is
    // unable to communicate with your cluster API server.
    // - **InternalFailure**: These errors are usually caused by an Amazon EKS
    // server-side issue.
    //
    // Value Values: `AutoScalingGroupNotFound | Ec2SecurityGroupNotFound |
    // Ec2SecurityGroupDeletionFailure | Ec2LaunchTemplateNotFound |
    // Ec2LaunchTemplateVersionMismatch | IamInstanceProfileNotFound |
    // IamNodeRoleNotFound | AsgInstanceLaunchFailures | InstanceLimitExceeded
    // | InsufficientFreeAddresses | AccessDenied | InternalFailure`
    //
    // Required: No
    string code = 1;
    // The error message associated with the issue.
    //
    // Required: No
    string message = 2;
    // The AWS resources that are afflicted by this issue.
    //
    // Required: No
    repeated string resource_ids = 3;
  }
}

// An object representing the resources associated with the node group, such as
// Auto Scaling groups and security groups for remote access.
//
// [API Reference](https://docs.aws.amazon.com/eks/latest/APIReference/API_NodegroupResources.html)
message NodegroupResources {
  // The Auto Scaling groups associated with the node group.
  //
  // Required: No
  repeated AutoScalingGroup auto_scaling_groups = 1;
  // An Auto Scaling group that is associated with an Amazon EKS managed node
  // group.
  //
  // [API Reference](https://docs.aws.amazon.com/eks/latest/APIReference/API_AutoScalingGroup.html)
  message AutoScalingGroup {
    // The name of the Auto Scaling group associated with an Amazon EKS managed
    // node group.
    //
    // Required: No
    string name = 1;
  }
  // The remote access security group associated with the node group. This
  // security group controls SSH access to the worker nodes.
  //
  // Required: No
  string remote_access_security_group = 2;
}

// An object representing the scaling configuration details for the Auto
// Scaling group that is associated with your node group.
//
// [API Reference](https://docs.aws.amazon.com/eks/latest/APIReference/API_NodegroupScalingConfig.html)
message NodegroupScalingConfig {
  // The current number of worker nodes that the managed node group should
  // maintain.
  //
  // Valid Range: Minimum value of 1.
  //
  // Required: No
  uint32 desired_size = 1;
  // The maximum number of worker nodes that the managed node group can scale
  // out to. Managed node groups can support up to 100 nodes by default.  Valid
  // Range: Minimum value of 1.
  //
  // Valid Range: Minimum value of 1.
  //
  // Required: No
  uint32 max_size = 2;
  // The minimum number of worker nodes that the managed node group can scale
  // in to. This number must be greater than zero.
  //
  // Valid Range: Minimum value of 1.
  //
  // Required: No
  uint32 min_size = 3;
}

// An object representing the remote access configuration for the managed node
// group.
//
// [API Reference](https://docs.aws.amazon.com/eks/latest/APIReference/API_RemoteAccessConfig.html)
message RemoteAccessConfig {
  // The Amazon EC2 SSH key that provides access for SSH communication with the
  // worker nodes in the managed node group. For more information, see Amazon
  // EC2 Key Pairs in the Amazon Elastic Compute Cloud User Guide for Linux
  // Instances.
  //
  // Required: No
  string ec2_ssh_key = 1;
  // The security groups that are allowed SSH access (port 22) to the worker
  // nodes. If you specify an Amazon EC2 SSH key but do not specify a source
  // security group when you create a managed node group, then port 22 on the
  // worker nodes is opened to the internet (0.0.0.0/0). For more information,
  // see Security Groups for Your VPC in the Amazon Virtual Private Cloud User
  // Guide.
  //
  // Required: No
  repeated string sourceSecurityGroups = 2;
}

message Tag {
  // Tag key name.
  //
  // Length Constraints: Minimum length of 1. Maximum length of 128.
  //
  // Required: Yes
  string key = 1;
  // Tag value.
  //
  // Value Length Constraints: Maximum length of 256.
  //
  // Required: No
  string value = 2;
}

// An object representing the VPC configuration to use for an Amazon EKS
// cluster.
//
// [API Reference](https://docs.aws.amazon.com/eks/latest/APIReference/API_VpcConfigRequest.html)
message VpcConfigRequest {
  // Set this value to true to enable private access for your cluster's
  // Kubernetes API server endpoint. If you enable private access, Kubernetes
  // API requests from within your cluster's VPC use the private VPC endpoint.
  // The default value for this parameter is false, which disables private
  // access for your Kubernetes API server. If you disable private access and
  // you have worker nodes or AWS Fargate pods in the cluster, then ensure that
  // publicAccessCidrs includes the necessary CIDR blocks for communication
  // with the worker nodes or Fargate pods. For more information, see Amazon
  // EKS Cluster Endpoint Access Control in the Amazon EKS User Guide.
  //
  // Required: No
  Bool endpoint_private_access = 1;
  // Set this value to false to disable public access to your cluster's
  // Kubernetes API server endpoint. If you disable public access, your
  // cluster's Kubernetes API server can only receive requests from within the
  // cluster VPC. The default value for this parameter is true, which enables
  // public access for your Kubernetes API server. For more information, see
  // Amazon EKS Cluster Endpoint Access Control in the Amazon EKS User Guide.
  //
  // Required: No
  Bool endpoint_public_access = 2;
  // The CIDR blocks that are allowed access to your cluster's public
  // Kubernetes API server endpoint. Communication to the endpoint from
  // addresses outside of the CIDR blocks that you specify is denied. The
  // default value is 0.0.0.0/0. If you've disabled private endpoint access and
  // you have worker nodes or AWS Fargate pods in the cluster, then ensure that
  // you specify the necessary CIDR blocks. For more information, see Amazon
  // EKS Cluster Endpoint Access Control in the Amazon EKS User Guide.
  //
  // Required: No
  repeated string public_access_cidrs = 3;
  // Specify one or more security groups for the cross-account elastic network
  // interfaces that Amazon EKS creates to use to allow communication between
  // your worker nodes and the Kubernetes control plane. If you don't specify a
  // security group, the default security group for your VPC is used.
  //
  // Required: No
  repeated string security_group_ids = 4;
  // Specify subnets for your Amazon EKS worker nodes. Amazon EKS creates
  // cross-account elastic network interfaces in these subnets to allow
  // communication between your worker nodes and the Kubernetes control plane.
  //
  // Required: No
  repeated string subnet_ids = 5;
}

// An object representing an Amazon EKS cluster VPC configuration response.
//
//[API Reference](https://docs.aws.amazon.com/eks/latest/APIReference/API_VpcConfigResponse.html)
message VpcConfigResponse {
  // The cluster security group that was created by Amazon EKS for the cluster.
  // Managed node groups use this security group for
  // control-plane-to-data-plane communication.
  //
  // Required: No
  string cluster_security_group_id = 1;
  // This parameter indicates whether the Amazon EKS private API server
  // endpoint is enabled. If the Amazon EKS private API server endpoint is
  // enabled, Kubernetes API requests that originate from within your cluster's
  // VPC use the private VPC endpoint instead of traversing the internet. If
  // this value is disabled and you have worker nodes or AWS Fargate pods in
  // the cluster, then ensure that publicAccessCidrs includes the necessary
  // CIDR blocks for communication with the worker nodes or Fargate pods. For
  // more information, see Amazon EKS Cluster Endpoint Access Control in the
  // Amazon EKS User Guide.
  //
  // Required: No
  Bool endpoint_private_access = 2;
  // This parameter indicates whether the Amazon EKS public API server endpoint
  // is enabled. If the Amazon EKS public API server endpoint is disabled, your
  // cluster's Kubernetes API server can only receive requests that originate
  // from within the cluster VPC.
  //
  // Required: No
  Bool endpoint_public_access = 3;
  // CIDR blocks that are allowed access to your cluster's public Kubernetes
  // API server endpoint. Communication to the endpoint from addresses outside
  // of the listed CIDR blocks is denied. The default value is 0.0.0.0/0. If
  // you've disabled private endpoint access and you have worker nodes or AWS
  // Fargate pods in the cluster, then ensure that the necessary CIDR blocks
  // are listed. For more information, see Amazon EKS Cluster Endpoint Access
  // Control in the Amazon EKS User Guide.
  //
  // Required: No
  repeated string public_access_cidrs = 4;
  // The security groups associated with the cross-account elastic network
  // interfaces that are used to allow communication between your worker nodes
  // and the Kubernetes control plane.
  //
  // Required: No
  repeated string security_group_ids = 5;
  // The subnets associated with your cluster.
  //
  // Required: No
  repeated string subnet_ids = 6;
  // The VPC associated with your cluster.
  //
  // Required: No
  string vpc_id = 7;
}

enum Bool {
  BOOL_UNKNOWN = 0;
  TRUE = 1;
  FALSE = 2;
}

message Error {
  string code = 1;
  string message = 2;
  string request_id = 3;
}
