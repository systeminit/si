import auth0 from "auth0-js";
import { EventEmitter } from "events";

const webAuth = new auth0.WebAuth({
  domain: "systeminit.auth0.com",
  redirectUri: `${window.location.origin}/callback`,
  clientID: "yNmQvjvedarnyxr7LtCvPTmzhwHX0aPJ",
  responseType: "id_token",
  scope: "openid profile email",
});

const localStorageKey = "loggedIn";
const loginEvent = "loginEvent";

const defaultProfile = {
  email_verified: true,
  email: "adam+bobo@systeminit.com",
  updated_at: "2019-07-13T01:17:03.072Z",
  user_id: "auth0|5d292928ba4a7e0d2be7d640",
  name: "adam+bobo@systeminit.com",
  picture: "http://localhost:8080/ad.png",
  nickname: "adam+bobo",
  identities: [
    {
      connection: "Username-Password-Authentication",
      provider: "auth0",
      user_id: "5d292928ba4a7e0d2be7d640",
      isSocial: false,
    },
  ],
  created_at: "2019-07-13T00:43:20.958Z",
  last_ip: "67.169.93.183",
  last_login: "2019-07-13T00:45:04.928Z",
  logins_count: 2,
  blocked_for: [],
  guardian_authenticators: [],
};

class AuthService extends EventEmitter {
  idToken = null;
  profile = null;
  tokenExpiry = null;

  login(customState: any) {
    webAuth.authorize({
      // @ts-ignore: This property is used by their boilerplate
      appState: customState,
    });
  }

  logOut() {
    localStorage.removeItem(localStorageKey);

    this.idToken = null;
    this.tokenExpiry = null;
    this.profile = null;

    webAuth.logout({
      returnTo: `${window.location.origin}`,
    });

    this.emit(loginEvent, { loggedIn: false });
  }

  handleAuthentication() {
    return new Promise((resolve, reject) => {
      webAuth.parseHash((err, authResult) => {
        if (err) {
          this.emit(loginEvent, {
            loggedIn: false,
            error: err,
            errorMsg: err.statusText,
          });
          reject(err);
        } else {
          this.localLogin(authResult);
          // @ts-ignore: Generated by the boilerplate
          resolve(authResult.idToken);
        }
      });
    });
  }

  isAuthenticated() {
    if (process.env.VUE_APP_AUTHENTICATION === "true") {
      return (
        // @ts-ignore: Generated by the boilerplate
        Date.now() < this.tokenExpiry &&
        localStorage.getItem(localStorageKey) === "true"
      );
    } else {
      // @ts-ignore: Not super interested in typing that structure
      this.profile = defaultProfile;
      return true;
    }
  }

  isIdTokenValid() {
    // @ts-ignore: Apparently null is fine
    return this.idToken && this.tokenExpiry && Date.now() < this.tokenExpiry;
  }

  getIdToken() {
    return new Promise((resolve, reject) => {
      if (this.isIdTokenValid()) {
        resolve(this.idToken);
      } else if (this.isAuthenticated()) {
        this.renewTokens().then(authResult => {
          // @ts-ignore: clearly coming from the javascripts, I see
          resolve(authResult.idToken);
        }, reject);
      } else {
        resolve();
      }
    });
  }

  localLogin(authResult: any) {
    this.idToken = authResult.idToken;
    this.profile = authResult.idTokenPayload;

    // Convert the expiry time from seconds to milliseconds,
    // required by the Date constructor
    // @ts-ignore: It *can* be assignable to null, you just dont want it to be.
    this.tokenExpiry = new Date(this.profile.exp * 1000);

    localStorage.setItem(localStorageKey, "true");
    localStorage.setItem("authIdToken", authResult.idToken);

    this.emit(loginEvent, {
      loggedIn: true,
      profile: authResult.idTokenPayload,
      state: authResult.appState || {},
    });
  }

  renewTokens() {
    return new Promise((resolve, reject) => {
      if (localStorage.getItem(localStorageKey) !== "true") {
        return reject("Not logged in");
      }

      webAuth.checkSession({}, (err, authResult) => {
        if (err) {
          reject(err);
        } else {
          this.localLogin(authResult);
          resolve(authResult);
        }
      });
    });
  }
}

const service = new AuthService();

service.setMaxListeners(5);

export default service;
