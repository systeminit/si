"use strict";

var _registry = require("../../registry");

_registry.registry.system({
  typeName: "changeSetEntry",
  displayTypeName: "An entry inside of a change set",
  siPathName: "si-account",
  serviceName: "account",
  options: function options(c) {
    c.associations.belongsTo({
      fromFieldPath: ["siProperties", "billingAccountId"],
      typeName: "billingAccount"
    });
    c.associations.belongsTo({
      fromFieldPath: ["siProperties", "organizationId"],
      typeName: "organization"
    });
    c.associations.belongsTo({
      fromFieldPath: ["siProperties", "workspaceId"],
      typeName: "workspace"
    });
    c.associations.belongsTo({
      fromFieldPath: ["siProperties", "changeSetId"],
      typeName: "changeSet"
    });
    c.fields.addObject({
      name: "siProperties",
      label: "SI Internal Properties",
      options: function options(p) {
        p.required = true;
        p.properties.addText({
          name: "billingAccountId",
          label: "Billing Account ID",
          options: function options(p) {
            p.required = true;
          }
        });
        p.properties.addText({
          name: "organizationId",
          label: "Organization ID",
          options: function options(p) {
            p.required = true;
          }
        });
        p.properties.addText({
          name: "workspaceId",
          label: "Organization ID",
          options: function options(p) {
            p.required = true;
          }
        });
        p.properties.addText({
          name: "changeSetId",
          label: "Change Set ID",
          options: function options(p) {
            p.required = true;
          }
        });
      }
    });
    c.fields.addText({
      name: "createdByUserId",
      label: "User ID who created this Change Set Entry",
      options: function options(p) {
        p.required = true;
      }
    });
    c.fields.addText({
      name: "itemId",
      label: "The ID of the item this Change Set Entry points at",
      options: function options(p) {
        p.required = true;
      }
    });
    c.fields.addEnum({
      name: "status",
      label: "The status of this Change Set Entry",
      options: function options(p) {
        p.variants = ["open", "closed", "abandoned"];
        p.baseDefaultValue = "open";
      }
    });
    c.addListMethod();
    c.addGetMethod();
    c.methods.addMethod({
      name: "create",
      label: "Create a Change Set Entry",
      options: function options(p) {
        p.mutation = true;
        p.hidden = true;
        p.skip = true;
        p.isPrivate = true;
        p.request.properties.addText({
          name: "name",
          label: "Name of the changeset entry",
          options: function options(p) {
            p.required = true;
          }
        });
        p.request.properties.addText({
          name: "displayName",
          label: "Change Set entry display name",
          options: function options(p) {
            p.required = true;
          }
        });
        p.request.properties.addLink({
          name: "siProperties",
          label: "The SI Properties for this Change Set Entry",
          options: function options(p) {
            p.required = true;
            p.lookup = {
              typeName: "changeSetEntry",
              names: ["siProperties"]
            };
          }
        });
        p.request.properties.addText({
          name: "createdByUserId",
          label: "User ID who created this Change Set Entry",
          options: function options(p) {
            p.required = true;
          }
        });
        p.reply.properties.addLink({
          name: "item",
          label: "".concat(c.displayTypeName, " Item"),
          options: function options(p) {
            p.lookup = {
              typeName: "changeSetEntry"
            };
          }
        });
      }
    });
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,