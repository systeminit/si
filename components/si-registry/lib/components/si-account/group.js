"use strict";

var _registry = require("../../registry");

_registry.registry.system({
  typeName: "group",
  displayTypeName: "A System Initiative User Group",
  siPathName: "si-account",
  serviceName: "account",
  options: function options(c) {
    // The magical add list association lives here! Yay! Progress
    c.fields.addText({
      name: "userIds",
      label: "User IDs of our groups members",
      options: function options(p) {
        p.repeated = true;
        p.required = true;
      }
    });
    c.fields.addObject({
      name: "siProperties",
      label: "SI Internal Properties",
      options: function options(p) {
        p.required = true;
        p.properties.addText({
          name: "billingAccountId",
          label: "Billing Account ID",
          options: function options(p) {
            p.required = true;
          }
        });
      }
    });
    c.fields.addLink({
      name: "capabilities",
      label: "Authorized capabilities for this user",
      options: function options(p) {
        p.hidden = true;
        p.repeated = true;
        p.lookup = {
          typeName: "capability"
        };
      }
    });
    c.addListMethod();
    c.addGetMethod();
    c.methods.addMethod({
      name: "create",
      label: "Create a Group",
      options: function options(p) {
        p.mutation = true;
        p.request.properties.addText({
          name: "name",
          label: "Group Name",
          options: function options(p) {
            p.required = true;
          }
        });
        p.request.properties.addText({
          name: "displayName",
          label: "Group Display Name",
          options: function options(p) {
            p.required = true;
          }
        });
        p.request.properties.addText({
          name: "userIds",
          label: "Group user IDs",
          options: function options(p) {
            p.repeated = true;
          }
        });
        p.request.properties.addLink({
          name: "siProperties",
          label: "The SI Properties for this User",
          options: function options(p) {
            p.required = true;
            p.lookup = {
              typeName: "group",
              names: ["siProperties"]
            };
          }
        });
        p.request.properties.addLink({
          name: "capabilities",
          label: "Authorized capabilities for this user",
          options: function options(p) {
            p.hidden = true;
            p.repeated = true;
            p.lookup = {
              typeName: "capability"
            };
          }
        });
        p.reply.properties.addLink({
          name: "item",
          label: "".concat(c.displayTypeName, " Item"),
          options: function options(p) {
            p.lookup = {
              typeName: "group"
            };
          }
        });
      }
    });
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,