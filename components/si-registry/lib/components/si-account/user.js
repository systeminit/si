"use strict";

var _registry = require("../../registry");

_registry.registry.system({
  typeName: "user",
  displayTypeName: "A System Initiative User",
  siPathName: "si-account",
  serviceName: "account",
  options: function options(c) {
    c.naturalKey = "email";
    c.associations.belongsTo({
      fromFieldPath: ["siProperties", "billingAccountId"],
      typeName: "billingAccount"
    });
    c.fields.addText({
      name: "email",
      label: "A valid email address",
      options: function options(p) {
        p.universal = true;
        p.required = true;
      }
    });
    c.fields.addPassword({
      name: "password",
      label: "The users password hash",
      options: function options(p) {
        p.universal = true;
        p.required = true;
        p.hidden = true;
        p.skip = true;
      }
    });
    c.fields.addObject({
      name: "siProperties",
      label: "SI Internal Properties",
      options: function options(p) {
        p.required = true;
        p.properties.addText({
          name: "billingAccountId",
          label: "Billing Account ID",
          options: function options(p) {
            p.required = true;
          }
        });
        p.properties.addNumber({
          name: "currentTxn",
          label: "The users current transaction id (128 bit integer)",
          options: function options(p) {
            p.numberKind = "u128";
          }
        });
      }
    });
    c.fields.addLink({
      name: "capabilities",
      label: "Authorized capabilities for this user",
      options: function options(p) {
        p.hidden = true;
        p.lookup = {
          typeName: "capability"
        };
      }
    });
    c.addListMethod();
    c.addGetMethod();
    c.methods.addMethod({
      name: "loginInternal",
      label: "Login",
      options: function options(p) {
        p.isPrivate = true;
        p.skipAuth = true;
        p.request.properties.addText({
          name: "email",
          label: "Email",
          options: function options(p) {
            p.required = true;
          }
        });
        p.request.properties.addPassword({
          name: "password",
          label: "Password",
          options: function options(p) {
            p.required = true;
          }
        });
        p.request.properties.addText({
          name: "billingAccountName",
          label: "Billing Account",
          options: function options(p) {
            p.required = true;
          }
        });
        p.reply.properties.addBool({
          name: "authenticated",
          label: "Authenticated",
          options: function options(p) {
            p.required = true;
          }
        });
        p.reply.properties.addText({
          name: "userId",
          label: "User Id",
          options: function options(p) {
            p.required = true;
          }
        });
        p.reply.properties.addText({
          name: "billingAccountId",
          label: "Billing Account Id",
          options: function options(p) {
            p.required = true;
          }
        });
      }
    });
    c.methods.addMethod({
      name: "create",
      label: "Create a User",
      options: function options(p) {
        p.mutation = true;
        p.request.properties.addText({
          name: "name",
          label: "User Name",
          options: function options(p) {
            p.required = true;
          }
        });
        p.request.properties.addText({
          name: "displayName",
          label: "User Display Name",
          options: function options(p) {
            p.required = true;
          }
        });
        p.request.properties.addText({
          name: "email",
          label: "Users email address",
          options: function options(p) {
            p.required = true;
          }
        });
        p.request.properties.addPassword({
          name: "password",
          label: "Users password",
          options: function options(p) {
            p.required = true;
          }
        });
        p.request.properties.addLink({
          name: "siProperties",
          label: "The SI Properties for this User",
          options: function options(p) {
            p.required = true;
            p.lookup = {
              typeName: "user",
              names: ["siProperties"]
            };
          }
        });
        p.reply.properties.addLink({
          name: "item",
          label: "".concat(c.displayTypeName, " Item"),
          options: function options(p) {
            p.lookup = {
              typeName: "user"
            };
          }
        });
      }
    });
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,