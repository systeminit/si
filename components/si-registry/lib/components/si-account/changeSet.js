"use strict";

var _registry = require("../../registry");

_registry.registry.system({
  typeName: "changeSet",
  displayTypeName: "A change set for your system",
  siPathName: "si-account",
  serviceName: "account",
  options: function options(c) {
    c.associations.belongsTo({
      fromFieldPath: ["siProperties", "billingAccountId"],
      typeName: "billingAccount"
    });
    c.associations.belongsTo({
      fromFieldPath: ["siProperties", "organizationId"],
      typeName: "organization"
    });
    c.associations.belongsTo({
      fromFieldPath: ["siProperties", "workspaceId"],
      typeName: "workspace"
    });
    c.associations.hasMany({
      fieldName: "changeSetEntries",
      typeName: "item",
      queryField: "siStorable.changeSetId"
    });
    c.fields.addObject({
      name: "siProperties",
      label: "SI Internal Properties",
      options: function options(p) {
        p.required = true;
        p.properties.addText({
          name: "billingAccountId",
          label: "Billing Account ID",
          options: function options(p) {
            p.required = true;
          }
        });
        p.properties.addText({
          name: "organizationId",
          label: "Organization ID",
          options: function options(p) {
            p.required = true;
          }
        });
        p.properties.addText({
          name: "workspaceId",
          label: "Organization ID",
          options: function options(p) {
            p.required = true;
          }
        });
      }
    });
    c.fields.addText({
      name: "createdByUserId",
      label: "User ID who created this Change Set",
      options: function options(p) {
        p.required = true;
      }
    });
    c.fields.addNumber({
      name: "entryCount",
      label: "Entry Count",
      options: function options(p) {
        p.numberKind = "uint64";
        p.baseDefaultValue = "0";
      }
    });
    c.fields.addEnum({
      name: "status",
      label: "The status of this Change Set",
      options: function options(p) {
        p.variants = ["open", "closed", "abandoned"];
        p.baseDefaultValue = "open";
      }
    });
    c.fields.addText({
      name: "note",
      label: "Note"
    });
    c.addListMethod();
    c.addGetMethod();
    c.methods.addMethod({
      name: "create",
      label: "Create a Change Set",
      options: function options(p) {
        p.mutation = true;
        p.request.properties.addText({
          name: "name",
          label: "Name",
          options: function options(p) {
            p.required = true;
          }
        });
        p.request.properties.addText({
          name: "displayName",
          label: "Display Name"
        });
        p.request.properties.addText({
          name: "note",
          label: "Note"
        });
        p.request.properties.addText({
          name: "workspaceId",
          label: "Workspace ID",
          options: function options(p) {
            p.required = true;
            p.hidden = true;
          }
        });
        p.request.properties.addText({
          name: "createdByUserId",
          label: "User ID who created this Change Set",
          options: function options(p) {
            p.required = true;
          }
        });
        p.reply.properties.addLink({
          name: "item",
          label: "".concat(c.displayTypeName, " Item"),
          options: function options(p) {
            p.lookup = {
              typeName: "changeSet"
            };
          }
        });
      }
    });
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,