"use strict";

var _registry = require("../../registry");

_registry.registry.system({
  typeName: "organization",
  displayTypeName: "A System Initiative Organization",
  siPathName: "si-account",
  serviceName: "account",
  options: function options(c) {
    c.associations.belongsTo({
      fromFieldPath: ["siProperties", "billingAccountId"],
      typeName: "billingAccount"
    });
    c.fields.addObject({
      name: "siProperties",
      label: "SI Internal Properties",
      options: function options(p) {
        p.required = true;
        p.properties.addText({
          name: "billingAccountId",
          label: "Billing Account ID",
          options: function options(p) {
            p.required = true;
          }
        });
      }
    });
    c.addListMethod();
    c.addGetMethod();
    c.methods.addMethod({
      name: "create",
      label: "Create an Organization",
      options: function options(p) {
        p.mutation = true;
        p.request.properties.addText({
          name: "name",
          label: "User Name",
          options: function options(p) {
            p.required = true;
          }
        });
        p.request.properties.addText({
          name: "displayName",
          label: "User Display Name",
          options: function options(p) {
            p.required = true;
          }
        });
        p.request.properties.addLink({
          name: "siProperties",
          label: "The SI Properties for this User",
          options: function options(p) {
            p.required = true;
            p.lookup = {
              typeName: "organization",
              names: ["siProperties"]
            };
          }
        });
        p.reply.properties.addLink({
          name: "object",
          label: "".concat(c.displayTypeName, " Object"),
          options: function options(p) {
            p.lookup = {
              typeName: "organization"
            };
          }
        });
      }
    });
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3NpLWFjY291bnQvb3JnYW5pemF0aW9uLnRzIl0sIm5hbWVzIjpbInJlZ2lzdHJ5Iiwic3lzdGVtIiwidHlwZU5hbWUiLCJkaXNwbGF5VHlwZU5hbWUiLCJzaVBhdGhOYW1lIiwic2VydmljZU5hbWUiLCJvcHRpb25zIiwiYyIsImFzc29jaWF0aW9ucyIsImJlbG9uZ3NUbyIsImZyb21GaWVsZFBhdGgiLCJmaWVsZHMiLCJhZGRPYmplY3QiLCJuYW1lIiwibGFiZWwiLCJwIiwicmVxdWlyZWQiLCJwcm9wZXJ0aWVzIiwiYWRkVGV4dCIsImFkZExpc3RNZXRob2QiLCJhZGRHZXRNZXRob2QiLCJtZXRob2RzIiwiYWRkTWV0aG9kIiwibXV0YXRpb24iLCJyZXF1ZXN0IiwiYWRkTGluayIsImxvb2t1cCIsIm5hbWVzIiwicmVwbHkiXSwibWFwcGluZ3MiOiI7O0FBQ0E7O0FBR0FBLG1CQUFTQyxNQUFULENBQWdCO0FBQ2RDLEVBQUFBLFFBQVEsRUFBRSxjQURJO0FBRWRDLEVBQUFBLGVBQWUsRUFBRSxrQ0FGSDtBQUdkQyxFQUFBQSxVQUFVLEVBQUUsWUFIRTtBQUlkQyxFQUFBQSxXQUFXLEVBQUUsU0FKQztBQUtkQyxFQUFBQSxPQUxjLG1CQUtOQyxDQUxNLEVBS1c7QUFDdkJBLElBQUFBLENBQUMsQ0FBQ0MsWUFBRixDQUFlQyxTQUFmLENBQXlCO0FBQ3ZCQyxNQUFBQSxhQUFhLEVBQUUsQ0FBQyxjQUFELEVBQWlCLGtCQUFqQixDQURRO0FBRXZCUixNQUFBQSxRQUFRLEVBQUU7QUFGYSxLQUF6QjtBQUlBSyxJQUFBQSxDQUFDLENBQUNJLE1BQUYsQ0FBU0MsU0FBVCxDQUFtQjtBQUNqQkMsTUFBQUEsSUFBSSxFQUFFLGNBRFc7QUFFakJDLE1BQUFBLEtBQUssRUFBRSx3QkFGVTtBQUdqQlIsTUFBQUEsT0FIaUIsbUJBR1RTLENBSFMsRUFHTTtBQUNyQkEsUUFBQUEsQ0FBQyxDQUFDQyxRQUFGLEdBQWEsSUFBYjtBQUNBRCxRQUFBQSxDQUFDLENBQUNFLFVBQUYsQ0FBYUMsT0FBYixDQUFxQjtBQUNuQkwsVUFBQUEsSUFBSSxFQUFFLGtCQURhO0FBRW5CQyxVQUFBQSxLQUFLLEVBQUUsb0JBRlk7QUFHbkJSLFVBQUFBLE9BSG1CLG1CQUdYUyxDQUhXLEVBR1I7QUFDVEEsWUFBQUEsQ0FBQyxDQUFDQyxRQUFGLEdBQWEsSUFBYjtBQUNEO0FBTGtCLFNBQXJCO0FBT0Q7QUFaZ0IsS0FBbkI7QUFjQVQsSUFBQUEsQ0FBQyxDQUFDWSxhQUFGO0FBQ0FaLElBQUFBLENBQUMsQ0FBQ2EsWUFBRjtBQUNBYixJQUFBQSxDQUFDLENBQUNjLE9BQUYsQ0FBVUMsU0FBVixDQUFvQjtBQUNsQlQsTUFBQUEsSUFBSSxFQUFFLFFBRFk7QUFFbEJDLE1BQUFBLEtBQUssRUFBRSx3QkFGVztBQUdsQlIsTUFBQUEsT0FIa0IsbUJBR1ZTLENBSFUsRUFHSztBQUNyQkEsUUFBQUEsQ0FBQyxDQUFDUSxRQUFGLEdBQWEsSUFBYjtBQUNBUixRQUFBQSxDQUFDLENBQUNTLE9BQUYsQ0FBVVAsVUFBVixDQUFxQkMsT0FBckIsQ0FBNkI7QUFDM0JMLFVBQUFBLElBQUksRUFBRSxNQURxQjtBQUUzQkMsVUFBQUEsS0FBSyxFQUFFLFdBRm9CO0FBRzNCUixVQUFBQSxPQUgyQixtQkFHbkJTLENBSG1CLEVBR2hCO0FBQ1RBLFlBQUFBLENBQUMsQ0FBQ0MsUUFBRixHQUFhLElBQWI7QUFDRDtBQUwwQixTQUE3QjtBQU9BRCxRQUFBQSxDQUFDLENBQUNTLE9BQUYsQ0FBVVAsVUFBVixDQUFxQkMsT0FBckIsQ0FBNkI7QUFDM0JMLFVBQUFBLElBQUksRUFBRSxhQURxQjtBQUUzQkMsVUFBQUEsS0FBSyxFQUFFLG1CQUZvQjtBQUczQlIsVUFBQUEsT0FIMkIsbUJBR25CUyxDQUhtQixFQUdoQjtBQUNUQSxZQUFBQSxDQUFDLENBQUNDLFFBQUYsR0FBYSxJQUFiO0FBQ0Q7QUFMMEIsU0FBN0I7QUFPQUQsUUFBQUEsQ0FBQyxDQUFDUyxPQUFGLENBQVVQLFVBQVYsQ0FBcUJRLE9BQXJCLENBQTZCO0FBQzNCWixVQUFBQSxJQUFJLEVBQUUsY0FEcUI7QUFFM0JDLFVBQUFBLEtBQUssRUFBRSxpQ0FGb0I7QUFHM0JSLFVBQUFBLE9BSDJCLG1CQUduQlMsQ0FIbUIsRUFHTjtBQUNuQkEsWUFBQUEsQ0FBQyxDQUFDQyxRQUFGLEdBQWEsSUFBYjtBQUNBRCxZQUFBQSxDQUFDLENBQUNXLE1BQUYsR0FBVztBQUNUeEIsY0FBQUEsUUFBUSxFQUFFLGNBREQ7QUFFVHlCLGNBQUFBLEtBQUssRUFBRSxDQUFDLGNBQUQ7QUFGRSxhQUFYO0FBSUQ7QUFUMEIsU0FBN0I7QUFXQVosUUFBQUEsQ0FBQyxDQUFDYSxLQUFGLENBQVFYLFVBQVIsQ0FBbUJRLE9BQW5CLENBQTJCO0FBQ3pCWixVQUFBQSxJQUFJLEVBQUUsUUFEbUI7QUFFekJDLFVBQUFBLEtBQUssWUFBS1AsQ0FBQyxDQUFDSixlQUFQLFlBRm9CO0FBR3pCRyxVQUFBQSxPQUh5QixtQkFHakJTLENBSGlCLEVBR0o7QUFDbkJBLFlBQUFBLENBQUMsQ0FBQ1csTUFBRixHQUFXO0FBQ1R4QixjQUFBQSxRQUFRLEVBQUU7QUFERCxhQUFYO0FBR0Q7QUFQd0IsU0FBM0I7QUFTRDtBQXZDaUIsS0FBcEI7QUF5Q0Q7QUFuRWEsQ0FBaEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQcm9wT2JqZWN0LCBQcm9wTWV0aG9kLCBQcm9wTGluayB9IGZyb20gXCIuLi8uLi9jb21wb25lbnRzL3ByZWx1ZGVcIjtcbmltcG9ydCB7IHJlZ2lzdHJ5IH0gZnJvbSBcIi4uLy4uL3JlZ2lzdHJ5XCI7XG5pbXBvcnQgeyBTeXN0ZW1PYmplY3QgfSBmcm9tIFwiLi4vLi4vc3lzdGVtQ29tcG9uZW50XCI7XG5cbnJlZ2lzdHJ5LnN5c3RlbSh7XG4gIHR5cGVOYW1lOiBcIm9yZ2FuaXphdGlvblwiLFxuICBkaXNwbGF5VHlwZU5hbWU6IFwiQSBTeXN0ZW0gSW5pdGlhdGl2ZSBPcmdhbml6YXRpb25cIixcbiAgc2lQYXRoTmFtZTogXCJzaS1hY2NvdW50XCIsXG4gIHNlcnZpY2VOYW1lOiBcImFjY291bnRcIixcbiAgb3B0aW9ucyhjOiBTeXN0ZW1PYmplY3QpIHtcbiAgICBjLmFzc29jaWF0aW9ucy5iZWxvbmdzVG8oe1xuICAgICAgZnJvbUZpZWxkUGF0aDogW1wic2lQcm9wZXJ0aWVzXCIsIFwiYmlsbGluZ0FjY291bnRJZFwiXSxcbiAgICAgIHR5cGVOYW1lOiBcImJpbGxpbmdBY2NvdW50XCIsXG4gICAgfSk7XG4gICAgYy5maWVsZHMuYWRkT2JqZWN0KHtcbiAgICAgIG5hbWU6IFwic2lQcm9wZXJ0aWVzXCIsXG4gICAgICBsYWJlbDogXCJTSSBJbnRlcm5hbCBQcm9wZXJ0aWVzXCIsXG4gICAgICBvcHRpb25zKHA6IFByb3BPYmplY3QpIHtcbiAgICAgICAgcC5yZXF1aXJlZCA9IHRydWU7XG4gICAgICAgIHAucHJvcGVydGllcy5hZGRUZXh0KHtcbiAgICAgICAgICBuYW1lOiBcImJpbGxpbmdBY2NvdW50SWRcIixcbiAgICAgICAgICBsYWJlbDogXCJCaWxsaW5nIEFjY291bnQgSURcIixcbiAgICAgICAgICBvcHRpb25zKHApIHtcbiAgICAgICAgICAgIHAucmVxdWlyZWQgPSB0cnVlO1xuICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICB9KTtcbiAgICBjLmFkZExpc3RNZXRob2QoKTtcbiAgICBjLmFkZEdldE1ldGhvZCgpO1xuICAgIGMubWV0aG9kcy5hZGRNZXRob2Qoe1xuICAgICAgbmFtZTogXCJjcmVhdGVcIixcbiAgICAgIGxhYmVsOiBcIkNyZWF0ZSBhbiBPcmdhbml6YXRpb25cIixcbiAgICAgIG9wdGlvbnMocDogUHJvcE1ldGhvZCkge1xuICAgICAgICBwLm11dGF0aW9uID0gdHJ1ZTtcbiAgICAgICAgcC5yZXF1ZXN0LnByb3BlcnRpZXMuYWRkVGV4dCh7XG4gICAgICAgICAgbmFtZTogXCJuYW1lXCIsXG4gICAgICAgICAgbGFiZWw6IFwiVXNlciBOYW1lXCIsXG4gICAgICAgICAgb3B0aW9ucyhwKSB7XG4gICAgICAgICAgICBwLnJlcXVpcmVkID0gdHJ1ZTtcbiAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICAgICAgcC5yZXF1ZXN0LnByb3BlcnRpZXMuYWRkVGV4dCh7XG4gICAgICAgICAgbmFtZTogXCJkaXNwbGF5TmFtZVwiLFxuICAgICAgICAgIGxhYmVsOiBcIlVzZXIgRGlzcGxheSBOYW1lXCIsXG4gICAgICAgICAgb3B0aW9ucyhwKSB7XG4gICAgICAgICAgICBwLnJlcXVpcmVkID0gdHJ1ZTtcbiAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICAgICAgcC5yZXF1ZXN0LnByb3BlcnRpZXMuYWRkTGluayh7XG4gICAgICAgICAgbmFtZTogXCJzaVByb3BlcnRpZXNcIixcbiAgICAgICAgICBsYWJlbDogXCJUaGUgU0kgUHJvcGVydGllcyBmb3IgdGhpcyBVc2VyXCIsXG4gICAgICAgICAgb3B0aW9ucyhwOiBQcm9wTGluaykge1xuICAgICAgICAgICAgcC5yZXF1aXJlZCA9IHRydWU7XG4gICAgICAgICAgICBwLmxvb2t1cCA9IHtcbiAgICAgICAgICAgICAgdHlwZU5hbWU6IFwib3JnYW5pemF0aW9uXCIsXG4gICAgICAgICAgICAgIG5hbWVzOiBbXCJzaVByb3BlcnRpZXNcIl0sXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgICBwLnJlcGx5LnByb3BlcnRpZXMuYWRkTGluayh7XG4gICAgICAgICAgbmFtZTogXCJvYmplY3RcIixcbiAgICAgICAgICBsYWJlbDogYCR7Yy5kaXNwbGF5VHlwZU5hbWV9IE9iamVjdGAsXG4gICAgICAgICAgb3B0aW9ucyhwOiBQcm9wTGluaykge1xuICAgICAgICAgICAgcC5sb29rdXAgPSB7XG4gICAgICAgICAgICAgIHR5cGVOYW1lOiBcIm9yZ2FuaXphdGlvblwiLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgfSk7XG4gIH0sXG59KTtcblxuIl19