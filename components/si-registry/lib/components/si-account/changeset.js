"use strict";

var _registry = require("../../registry");

_registry.registry.system({
  typeName: "changeSet",
  displayTypeName: "A change set for your system",
  siPathName: "si-account",
  serviceName: "account",
  options: function options(c) {
    c.associations.belongsTo({
      fromFieldPath: ["siProperties", "billingAccountId"],
      typeName: "billingAccount"
    });
    c.associations.belongsTo({
      fromFieldPath: ["siProperties", "organizationId"],
      typeName: "organization"
    });
    c.associations.belongsTo({
      fromFieldPath: ["siProperties", "workspaceId"],
      typeName: "workspace"
    });
    c.fields.addObject({
      name: "siProperties",
      label: "SI Internal Properties",
      options: function options(p) {
        p.required = true;
        p.properties.addText({
          name: "billingAccountId",
          label: "Billing Account ID",
          options: function options(p) {
            p.required = true;
          }
        });
        p.properties.addText({
          name: "organizationId",
          label: "Organization ID",
          options: function options(p) {
            p.required = true;
          }
        });
        p.properties.addText({
          name: "workspaceId",
          label: "Organization ID",
          options: function options(p) {
            p.required = true;
          }
        });
      }
    });
    c.fields.addText({
      name: "createdByUserId",
      label: "User ID who created this Change Set",
      options: function options(p) {
        p.required = true;
      }
    });
    c.fields.addText({
      name: "changeSetItemOrder",
      label: "The list of change set items, in order",
      options: function options(p) {
        p.repeated = true;
      }
    });
    c.fields.addEnum({
      name: "status",
      label: "The status of this Change Set",
      options: function options(p) {
        p.variants = ["open", "closed", "abandoned"];
        p.baseDefaultValue = "open";
      }
    });
    c.addListMethod();
    c.addGetMethod();
    c.methods.addMethod({
      name: "create",
      label: "Create a Change Set",
      options: function options(p) {
        p.mutation = true;
        p.request.properties.addText({
          name: "name",
          label: "Name of the changeset",
          options: function options(p) {
            p.required = true;
          }
        });
        p.request.properties.addText({
          name: "displayName",
          label: "Change Set display name",
          options: function options(p) {
            p.required = true;
          }
        });
        p.request.properties.addLink({
          name: "siProperties",
          label: "The SI Properties for this User",
          options: function options(p) {
            p.required = true;
            p.lookup = {
              typeName: "changeSet",
              names: ["siProperties"]
            };
          }
        });
        p.request.properties.addText({
          name: "createdByUserId",
          label: "User ID who created this Change Set",
          options: function options(p) {
            p.required = true;
          }
        });
        p.reply.properties.addLink({
          name: "item",
          label: "".concat(c.displayTypeName, " Item"),
          options: function options(p) {
            p.lookup = {
              typeName: "changeSet"
            };
          }
        });
      }
    });
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3NpLWFjY291bnQvY2hhbmdlc2V0LnRzIl0sIm5hbWVzIjpbInJlZ2lzdHJ5Iiwic3lzdGVtIiwidHlwZU5hbWUiLCJkaXNwbGF5VHlwZU5hbWUiLCJzaVBhdGhOYW1lIiwic2VydmljZU5hbWUiLCJvcHRpb25zIiwiYyIsImFzc29jaWF0aW9ucyIsImJlbG9uZ3NUbyIsImZyb21GaWVsZFBhdGgiLCJmaWVsZHMiLCJhZGRPYmplY3QiLCJuYW1lIiwibGFiZWwiLCJwIiwicmVxdWlyZWQiLCJwcm9wZXJ0aWVzIiwiYWRkVGV4dCIsInJlcGVhdGVkIiwiYWRkRW51bSIsInZhcmlhbnRzIiwiYmFzZURlZmF1bHRWYWx1ZSIsImFkZExpc3RNZXRob2QiLCJhZGRHZXRNZXRob2QiLCJtZXRob2RzIiwiYWRkTWV0aG9kIiwibXV0YXRpb24iLCJyZXF1ZXN0IiwiYWRkTGluayIsImxvb2t1cCIsIm5hbWVzIiwicmVwbHkiXSwibWFwcGluZ3MiOiI7O0FBTUE7O0FBR0FBLG1CQUFTQyxNQUFULENBQWdCO0FBQ2RDLEVBQUFBLFFBQVEsRUFBRSxXQURJO0FBRWRDLEVBQUFBLGVBQWUsRUFBRSw4QkFGSDtBQUdkQyxFQUFBQSxVQUFVLEVBQUUsWUFIRTtBQUlkQyxFQUFBQSxXQUFXLEVBQUUsU0FKQztBQUtkQyxFQUFBQSxPQUxjLG1CQUtOQyxDQUxNLEVBS1c7QUFDdkJBLElBQUFBLENBQUMsQ0FBQ0MsWUFBRixDQUFlQyxTQUFmLENBQXlCO0FBQ3ZCQyxNQUFBQSxhQUFhLEVBQUUsQ0FBQyxjQUFELEVBQWlCLGtCQUFqQixDQURRO0FBRXZCUixNQUFBQSxRQUFRLEVBQUU7QUFGYSxLQUF6QjtBQUlBSyxJQUFBQSxDQUFDLENBQUNDLFlBQUYsQ0FBZUMsU0FBZixDQUF5QjtBQUN2QkMsTUFBQUEsYUFBYSxFQUFFLENBQUMsY0FBRCxFQUFpQixnQkFBakIsQ0FEUTtBQUV2QlIsTUFBQUEsUUFBUSxFQUFFO0FBRmEsS0FBekI7QUFJQUssSUFBQUEsQ0FBQyxDQUFDQyxZQUFGLENBQWVDLFNBQWYsQ0FBeUI7QUFDdkJDLE1BQUFBLGFBQWEsRUFBRSxDQUFDLGNBQUQsRUFBaUIsYUFBakIsQ0FEUTtBQUV2QlIsTUFBQUEsUUFBUSxFQUFFO0FBRmEsS0FBekI7QUFLQUssSUFBQUEsQ0FBQyxDQUFDSSxNQUFGLENBQVNDLFNBQVQsQ0FBbUI7QUFDakJDLE1BQUFBLElBQUksRUFBRSxjQURXO0FBRWpCQyxNQUFBQSxLQUFLLEVBQUUsd0JBRlU7QUFHakJSLE1BQUFBLE9BSGlCLG1CQUdUUyxDQUhTLEVBR007QUFDckJBLFFBQUFBLENBQUMsQ0FBQ0MsUUFBRixHQUFhLElBQWI7QUFDQUQsUUFBQUEsQ0FBQyxDQUFDRSxVQUFGLENBQWFDLE9BQWIsQ0FBcUI7QUFDbkJMLFVBQUFBLElBQUksRUFBRSxrQkFEYTtBQUVuQkMsVUFBQUEsS0FBSyxFQUFFLG9CQUZZO0FBR25CUixVQUFBQSxPQUhtQixtQkFHWFMsQ0FIVyxFQUdSO0FBQ1RBLFlBQUFBLENBQUMsQ0FBQ0MsUUFBRixHQUFhLElBQWI7QUFDRDtBQUxrQixTQUFyQjtBQU9BRCxRQUFBQSxDQUFDLENBQUNFLFVBQUYsQ0FBYUMsT0FBYixDQUFxQjtBQUNuQkwsVUFBQUEsSUFBSSxFQUFFLGdCQURhO0FBRW5CQyxVQUFBQSxLQUFLLEVBQUUsaUJBRlk7QUFHbkJSLFVBQUFBLE9BSG1CLG1CQUdYUyxDQUhXLEVBR1I7QUFDVEEsWUFBQUEsQ0FBQyxDQUFDQyxRQUFGLEdBQWEsSUFBYjtBQUNEO0FBTGtCLFNBQXJCO0FBT0FELFFBQUFBLENBQUMsQ0FBQ0UsVUFBRixDQUFhQyxPQUFiLENBQXFCO0FBQ25CTCxVQUFBQSxJQUFJLEVBQUUsYUFEYTtBQUVuQkMsVUFBQUEsS0FBSyxFQUFFLGlCQUZZO0FBR25CUixVQUFBQSxPQUhtQixtQkFHWFMsQ0FIVyxFQUdSO0FBQ1RBLFlBQUFBLENBQUMsQ0FBQ0MsUUFBRixHQUFhLElBQWI7QUFDRDtBQUxrQixTQUFyQjtBQU9EO0FBMUJnQixLQUFuQjtBQTZCQVQsSUFBQUEsQ0FBQyxDQUFDSSxNQUFGLENBQVNPLE9BQVQsQ0FBaUI7QUFDZkwsTUFBQUEsSUFBSSxFQUFFLGlCQURTO0FBRWZDLE1BQUFBLEtBQUssRUFBRSxxQ0FGUTtBQUdmUixNQUFBQSxPQUhlLG1CQUdQUyxDQUhPLEVBR0o7QUFDVEEsUUFBQUEsQ0FBQyxDQUFDQyxRQUFGLEdBQWEsSUFBYjtBQUNEO0FBTGMsS0FBakI7QUFPQVQsSUFBQUEsQ0FBQyxDQUFDSSxNQUFGLENBQVNPLE9BQVQsQ0FBaUI7QUFDZkwsTUFBQUEsSUFBSSxFQUFFLG9CQURTO0FBRWZDLE1BQUFBLEtBQUssRUFBRSx3Q0FGUTtBQUdmUixNQUFBQSxPQUhlLG1CQUdQUyxDQUhPLEVBR0o7QUFDVEEsUUFBQUEsQ0FBQyxDQUFDSSxRQUFGLEdBQWEsSUFBYjtBQUNEO0FBTGMsS0FBakI7QUFPQVosSUFBQUEsQ0FBQyxDQUFDSSxNQUFGLENBQVNTLE9BQVQsQ0FBaUI7QUFDZlAsTUFBQUEsSUFBSSxFQUFFLFFBRFM7QUFFZkMsTUFBQUEsS0FBSyxFQUFFLCtCQUZRO0FBR2ZSLE1BQUFBLE9BSGUsbUJBR1BTLENBSE8sRUFHTTtBQUNuQkEsUUFBQUEsQ0FBQyxDQUFDTSxRQUFGLEdBQWEsQ0FBQyxNQUFELEVBQVMsUUFBVCxFQUFtQixXQUFuQixDQUFiO0FBQ0FOLFFBQUFBLENBQUMsQ0FBQ08sZ0JBQUYsR0FBcUIsTUFBckI7QUFDRDtBQU5jLEtBQWpCO0FBU0FmLElBQUFBLENBQUMsQ0FBQ2dCLGFBQUY7QUFDQWhCLElBQUFBLENBQUMsQ0FBQ2lCLFlBQUY7QUFFQWpCLElBQUFBLENBQUMsQ0FBQ2tCLE9BQUYsQ0FBVUMsU0FBVixDQUFvQjtBQUNsQmIsTUFBQUEsSUFBSSxFQUFFLFFBRFk7QUFFbEJDLE1BQUFBLEtBQUssRUFBRSxxQkFGVztBQUdsQlIsTUFBQUEsT0FIa0IsbUJBR1ZTLENBSFUsRUFHSztBQUNyQkEsUUFBQUEsQ0FBQyxDQUFDWSxRQUFGLEdBQWEsSUFBYjtBQUNBWixRQUFBQSxDQUFDLENBQUNhLE9BQUYsQ0FBVVgsVUFBVixDQUFxQkMsT0FBckIsQ0FBNkI7QUFDM0JMLFVBQUFBLElBQUksRUFBRSxNQURxQjtBQUUzQkMsVUFBQUEsS0FBSyxFQUFFLHVCQUZvQjtBQUczQlIsVUFBQUEsT0FIMkIsbUJBR25CUyxDQUhtQixFQUdoQjtBQUNUQSxZQUFBQSxDQUFDLENBQUNDLFFBQUYsR0FBYSxJQUFiO0FBQ0Q7QUFMMEIsU0FBN0I7QUFPQUQsUUFBQUEsQ0FBQyxDQUFDYSxPQUFGLENBQVVYLFVBQVYsQ0FBcUJDLE9BQXJCLENBQTZCO0FBQzNCTCxVQUFBQSxJQUFJLEVBQUUsYUFEcUI7QUFFM0JDLFVBQUFBLEtBQUssRUFBRSx5QkFGb0I7QUFHM0JSLFVBQUFBLE9BSDJCLG1CQUduQlMsQ0FIbUIsRUFHaEI7QUFDVEEsWUFBQUEsQ0FBQyxDQUFDQyxRQUFGLEdBQWEsSUFBYjtBQUNEO0FBTDBCLFNBQTdCO0FBT0FELFFBQUFBLENBQUMsQ0FBQ2EsT0FBRixDQUFVWCxVQUFWLENBQXFCWSxPQUFyQixDQUE2QjtBQUMzQmhCLFVBQUFBLElBQUksRUFBRSxjQURxQjtBQUUzQkMsVUFBQUEsS0FBSyxFQUFFLGlDQUZvQjtBQUczQlIsVUFBQUEsT0FIMkIsbUJBR25CUyxDQUhtQixFQUdOO0FBQ25CQSxZQUFBQSxDQUFDLENBQUNDLFFBQUYsR0FBYSxJQUFiO0FBQ0FELFlBQUFBLENBQUMsQ0FBQ2UsTUFBRixHQUFXO0FBQ1Q1QixjQUFBQSxRQUFRLEVBQUUsV0FERDtBQUVUNkIsY0FBQUEsS0FBSyxFQUFFLENBQUMsY0FBRDtBQUZFLGFBQVg7QUFJRDtBQVQwQixTQUE3QjtBQVdBaEIsUUFBQUEsQ0FBQyxDQUFDYSxPQUFGLENBQVVYLFVBQVYsQ0FBcUJDLE9BQXJCLENBQTZCO0FBQzNCTCxVQUFBQSxJQUFJLEVBQUUsaUJBRHFCO0FBRTNCQyxVQUFBQSxLQUFLLEVBQUUscUNBRm9CO0FBRzNCUixVQUFBQSxPQUgyQixtQkFHbkJTLENBSG1CLEVBR2hCO0FBQ1RBLFlBQUFBLENBQUMsQ0FBQ0MsUUFBRixHQUFhLElBQWI7QUFDRDtBQUwwQixTQUE3QjtBQU9BRCxRQUFBQSxDQUFDLENBQUNpQixLQUFGLENBQVFmLFVBQVIsQ0FBbUJZLE9BQW5CLENBQTJCO0FBQ3pCaEIsVUFBQUEsSUFBSSxFQUFFLE1BRG1CO0FBRXpCQyxVQUFBQSxLQUFLLFlBQUtQLENBQUMsQ0FBQ0osZUFBUCxVQUZvQjtBQUd6QkcsVUFBQUEsT0FIeUIsbUJBR2pCUyxDQUhpQixFQUdKO0FBQ25CQSxZQUFBQSxDQUFDLENBQUNlLE1BQUYsR0FBVztBQUNUNUIsY0FBQUEsUUFBUSxFQUFFO0FBREQsYUFBWDtBQUdEO0FBUHdCLFNBQTNCO0FBU0Q7QUE5Q2lCLEtBQXBCO0FBZ0REO0FBMUhhLENBQWhCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgUHJvcEVudW0sXG4gIFByb3BPYmplY3QsXG4gIFByb3BNZXRob2QsXG4gIFByb3BMaW5rLFxufSBmcm9tIFwiLi4vLi4vY29tcG9uZW50cy9wcmVsdWRlXCI7XG5pbXBvcnQgeyByZWdpc3RyeSB9IGZyb20gXCIuLi8uLi9yZWdpc3RyeVwiO1xuaW1wb3J0IHsgU3lzdGVtT2JqZWN0IH0gZnJvbSBcIi4uLy4uL3N5c3RlbUNvbXBvbmVudFwiO1xuXG5yZWdpc3RyeS5zeXN0ZW0oe1xuICB0eXBlTmFtZTogXCJjaGFuZ2VTZXRcIixcbiAgZGlzcGxheVR5cGVOYW1lOiBcIkEgY2hhbmdlIHNldCBmb3IgeW91ciBzeXN0ZW1cIixcbiAgc2lQYXRoTmFtZTogXCJzaS1hY2NvdW50XCIsXG4gIHNlcnZpY2VOYW1lOiBcImFjY291bnRcIixcbiAgb3B0aW9ucyhjOiBTeXN0ZW1PYmplY3QpIHtcbiAgICBjLmFzc29jaWF0aW9ucy5iZWxvbmdzVG8oe1xuICAgICAgZnJvbUZpZWxkUGF0aDogW1wic2lQcm9wZXJ0aWVzXCIsIFwiYmlsbGluZ0FjY291bnRJZFwiXSxcbiAgICAgIHR5cGVOYW1lOiBcImJpbGxpbmdBY2NvdW50XCIsXG4gICAgfSk7XG4gICAgYy5hc3NvY2lhdGlvbnMuYmVsb25nc1RvKHtcbiAgICAgIGZyb21GaWVsZFBhdGg6IFtcInNpUHJvcGVydGllc1wiLCBcIm9yZ2FuaXphdGlvbklkXCJdLFxuICAgICAgdHlwZU5hbWU6IFwib3JnYW5pemF0aW9uXCIsXG4gICAgfSk7XG4gICAgYy5hc3NvY2lhdGlvbnMuYmVsb25nc1RvKHtcbiAgICAgIGZyb21GaWVsZFBhdGg6IFtcInNpUHJvcGVydGllc1wiLCBcIndvcmtzcGFjZUlkXCJdLFxuICAgICAgdHlwZU5hbWU6IFwid29ya3NwYWNlXCIsXG4gICAgfSk7XG5cbiAgICBjLmZpZWxkcy5hZGRPYmplY3Qoe1xuICAgICAgbmFtZTogXCJzaVByb3BlcnRpZXNcIixcbiAgICAgIGxhYmVsOiBcIlNJIEludGVybmFsIFByb3BlcnRpZXNcIixcbiAgICAgIG9wdGlvbnMocDogUHJvcE9iamVjdCkge1xuICAgICAgICBwLnJlcXVpcmVkID0gdHJ1ZTtcbiAgICAgICAgcC5wcm9wZXJ0aWVzLmFkZFRleHQoe1xuICAgICAgICAgIG5hbWU6IFwiYmlsbGluZ0FjY291bnRJZFwiLFxuICAgICAgICAgIGxhYmVsOiBcIkJpbGxpbmcgQWNjb3VudCBJRFwiLFxuICAgICAgICAgIG9wdGlvbnMocCkge1xuICAgICAgICAgICAgcC5yZXF1aXJlZCA9IHRydWU7XG4gICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgICAgIHAucHJvcGVydGllcy5hZGRUZXh0KHtcbiAgICAgICAgICBuYW1lOiBcIm9yZ2FuaXphdGlvbklkXCIsXG4gICAgICAgICAgbGFiZWw6IFwiT3JnYW5pemF0aW9uIElEXCIsXG4gICAgICAgICAgb3B0aW9ucyhwKSB7XG4gICAgICAgICAgICBwLnJlcXVpcmVkID0gdHJ1ZTtcbiAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICAgICAgcC5wcm9wZXJ0aWVzLmFkZFRleHQoe1xuICAgICAgICAgIG5hbWU6IFwid29ya3NwYWNlSWRcIixcbiAgICAgICAgICBsYWJlbDogXCJPcmdhbml6YXRpb24gSURcIixcbiAgICAgICAgICBvcHRpb25zKHApIHtcbiAgICAgICAgICAgIHAucmVxdWlyZWQgPSB0cnVlO1xuICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICB9KTtcblxuICAgIGMuZmllbGRzLmFkZFRleHQoe1xuICAgICAgbmFtZTogXCJjcmVhdGVkQnlVc2VySWRcIixcbiAgICAgIGxhYmVsOiBcIlVzZXIgSUQgd2hvIGNyZWF0ZWQgdGhpcyBDaGFuZ2UgU2V0XCIsXG4gICAgICBvcHRpb25zKHApIHtcbiAgICAgICAgcC5yZXF1aXJlZCA9IHRydWU7XG4gICAgICB9LFxuICAgIH0pO1xuICAgIGMuZmllbGRzLmFkZFRleHQoe1xuICAgICAgbmFtZTogXCJjaGFuZ2VTZXRJdGVtT3JkZXJcIixcbiAgICAgIGxhYmVsOiBcIlRoZSBsaXN0IG9mIGNoYW5nZSBzZXQgaXRlbXMsIGluIG9yZGVyXCIsXG4gICAgICBvcHRpb25zKHApIHtcbiAgICAgICAgcC5yZXBlYXRlZCA9IHRydWU7XG4gICAgICB9LFxuICAgIH0pO1xuICAgIGMuZmllbGRzLmFkZEVudW0oe1xuICAgICAgbmFtZTogXCJzdGF0dXNcIixcbiAgICAgIGxhYmVsOiBcIlRoZSBzdGF0dXMgb2YgdGhpcyBDaGFuZ2UgU2V0XCIsXG4gICAgICBvcHRpb25zKHA6IFByb3BFbnVtKSB7XG4gICAgICAgIHAudmFyaWFudHMgPSBbXCJvcGVuXCIsIFwiY2xvc2VkXCIsIFwiYWJhbmRvbmVkXCJdO1xuICAgICAgICBwLmJhc2VEZWZhdWx0VmFsdWUgPSBcIm9wZW5cIjtcbiAgICAgIH0sXG4gICAgfSk7XG5cbiAgICBjLmFkZExpc3RNZXRob2QoKTtcbiAgICBjLmFkZEdldE1ldGhvZCgpO1xuXG4gICAgYy5tZXRob2RzLmFkZE1ldGhvZCh7XG4gICAgICBuYW1lOiBcImNyZWF0ZVwiLFxuICAgICAgbGFiZWw6IFwiQ3JlYXRlIGEgQ2hhbmdlIFNldFwiLFxuICAgICAgb3B0aW9ucyhwOiBQcm9wTWV0aG9kKSB7XG4gICAgICAgIHAubXV0YXRpb24gPSB0cnVlO1xuICAgICAgICBwLnJlcXVlc3QucHJvcGVydGllcy5hZGRUZXh0KHtcbiAgICAgICAgICBuYW1lOiBcIm5hbWVcIixcbiAgICAgICAgICBsYWJlbDogXCJOYW1lIG9mIHRoZSBjaGFuZ2VzZXRcIixcbiAgICAgICAgICBvcHRpb25zKHApIHtcbiAgICAgICAgICAgIHAucmVxdWlyZWQgPSB0cnVlO1xuICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgICBwLnJlcXVlc3QucHJvcGVydGllcy5hZGRUZXh0KHtcbiAgICAgICAgICBuYW1lOiBcImRpc3BsYXlOYW1lXCIsXG4gICAgICAgICAgbGFiZWw6IFwiQ2hhbmdlIFNldCBkaXNwbGF5IG5hbWVcIixcbiAgICAgICAgICBvcHRpb25zKHApIHtcbiAgICAgICAgICAgIHAucmVxdWlyZWQgPSB0cnVlO1xuICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgICBwLnJlcXVlc3QucHJvcGVydGllcy5hZGRMaW5rKHtcbiAgICAgICAgICBuYW1lOiBcInNpUHJvcGVydGllc1wiLFxuICAgICAgICAgIGxhYmVsOiBcIlRoZSBTSSBQcm9wZXJ0aWVzIGZvciB0aGlzIFVzZXJcIixcbiAgICAgICAgICBvcHRpb25zKHA6IFByb3BMaW5rKSB7XG4gICAgICAgICAgICBwLnJlcXVpcmVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHAubG9va3VwID0ge1xuICAgICAgICAgICAgICB0eXBlTmFtZTogXCJjaGFuZ2VTZXRcIixcbiAgICAgICAgICAgICAgbmFtZXM6IFtcInNpUHJvcGVydGllc1wiXSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgICAgIHAucmVxdWVzdC5wcm9wZXJ0aWVzLmFkZFRleHQoe1xuICAgICAgICAgIG5hbWU6IFwiY3JlYXRlZEJ5VXNlcklkXCIsXG4gICAgICAgICAgbGFiZWw6IFwiVXNlciBJRCB3aG8gY3JlYXRlZCB0aGlzIENoYW5nZSBTZXRcIixcbiAgICAgICAgICBvcHRpb25zKHApIHtcbiAgICAgICAgICAgIHAucmVxdWlyZWQgPSB0cnVlO1xuICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgICBwLnJlcGx5LnByb3BlcnRpZXMuYWRkTGluayh7XG4gICAgICAgICAgbmFtZTogXCJpdGVtXCIsXG4gICAgICAgICAgbGFiZWw6IGAke2MuZGlzcGxheVR5cGVOYW1lfSBJdGVtYCxcbiAgICAgICAgICBvcHRpb25zKHA6IFByb3BMaW5rKSB7XG4gICAgICAgICAgICBwLmxvb2t1cCA9IHtcbiAgICAgICAgICAgICAgdHlwZU5hbWU6IFwiY2hhbmdlU2V0XCIsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICB9KTtcbiAgfSxcbn0pO1xuXG4iXX0=