"use strict";

var _registry = require("../../registry");

_registry.registry.system({
  typeName: "billingAccount",
  displayTypeName: "System Initiative Billing Account",
  siPathName: "si-account",
  serviceName: "account",
  options: function options(c) {
    c.associations.hasMany({
      fieldName: "users",
      typeName: "user"
    });
    c.associations.hasMany({
      fieldName: "organizations",
      typeName: "organization"
    });
    c.associations.hasMany({
      fieldName: "integrationInstances",
      typeName: "integrationInstance"
    });
    c.addListMethod();
    c.addGetMethod();
    c.methods.addMethod({
      name: "signup",
      label: "Create a Billing Account and Administrative User",
      options: function options(p) {
        p.mutation = true;
        p.skipAuth = true;
        p.request.properties.addObject({
          name: "billingAccount",
          label: "Billing Account Information",
          options: function options(p) {
            p.required = true;
            p.properties.addText({
              name: "name",
              label: "Billing Account Name",
              options: function options(p) {
                p.required = true;
              }
            });
            p.properties.addText({
              name: "displayName",
              label: "Billing Account Display Name",
              options: function options(p) {
                p.required = true;
              }
            });
          }
        });
        p.request.properties.addObject({
          name: "user",
          label: "User Information",
          options: function options(p) {
            p.required = true;
            p.properties.addText({
              name: "name",
              label: "User Name",
              options: function options(p) {
                p.required = true;
              }
            });
            p.properties.addText({
              name: "displayName",
              label: "User Display Name",
              options: function options(p) {
                p.required = true;
              }
            });
            p.properties.addText({
              name: "email",
              label: "A valid email address",
              options: function options(p) {
                p.universal = true;
                p.required = true;
              }
            });
            p.properties.addPassword({
              name: "password",
              label: "The users password hash",
              options: function options(p) {
                p.universal = true;
                p.required = true;
                p.hidden = true;
              }
            });
          }
        });
        p.reply.properties.addLink({
          name: "billingAccount",
          label: "Billing Account Object",
          options: function options(p) {
            p.lookup = {
              typeName: "billingAccount"
            };
          }
        });
        p.reply.properties.addLink({
          name: "user",
          label: "User Object",
          options: function options(p) {
            p.lookup = {
              typeName: "user"
            };
          }
        });
      }
    });
    c.methods.addMethod({
      name: "create",
      label: "Create a Billing Account",
      options: function options(p) {
        p.mutation = true;
        p.isPrivate = true;
        p.request.properties.addText({
          name: "name",
          label: "Billing Account Name",
          options: function options(p) {
            p.required = true;
          }
        });
        p.request.properties.addText({
          name: "displayName",
          label: "Billing Account Display Name",
          options: function options(p) {
            p.required = true;
          }
        });
        p.reply.properties.addLink({
          name: "item",
          label: "Billing Account Item",
          options: function options(p) {
            p.lookup = {
              typeName: "billingAccount"
            };
          }
        });
      }
    });
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,