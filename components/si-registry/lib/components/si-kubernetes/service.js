"use strict";

var _registry = require("../../registry");

_registry.registry.componentAndEntity({
  typeName: "kubernetesService",
  displayTypeName: "Kubernetes Service Object",
  siPathName: "si-kubernetes",
  serviceName: "kubernetes",
  options: function options(c) {
    c.entity.associations.belongsTo({
      fromFieldPath: ["siProperties", "billingAccountId"],
      typeName: "billingAccount"
    });
    c.entity.integrationServices.push({
      integrationName: "aws",
      integrationServiceName: "eks_kubernetes"
    }); // Constraints
    //
    // TODO(fnicho): this should be a common enum across all AWS/EKS related
    // objects

    c.constraints.addEnum({
      name: "kubernetesVersion",
      label: "Kubernetes Version",
      options: function options(p) {
        p.variants = ["v1.12", "v1.13", "v1.14", "v1.15"];
      }
    }); // Properties

    c.properties.addObject({
      name: "kubernetesObject",
      label: "Kubernetes Object",
      options: function options(p) {
        p.relationships.updates({
          partner: {
            typeName: "kubernetesServiceEntity",
            names: ["properties", "kubernetesObjectYaml"]
          }
        });
        p.relationships.either({
          partner: {
            typeName: "kubernetesServiceEntity",
            names: ["properties", "kubernetesObjectYaml"]
          }
        });
        p.properties.addText({
          name: "apiVersion",
          label: "API Version",
          options: function options(p) {
            p.required = true;
          }
        });
        p.properties.addText({
          name: "kind",
          label: "Kind",
          options: function options(p) {
            p.required = true;
            p.baseDefaultValue = "Service";
          }
        });
        p.properties.addLink({
          name: "metadata",
          label: "Metadat",
          options: function options(p) {
            p.lookup = {
              typeName: "kubernetesMetadata"
            };
          }
        });
        p.properties.addObject({
          name: "spec",
          label: "Service Spec",
          options: function options(p) {
            // TODO(fnichol): The specification records this field in YAML as
            // `clusterIP`
            p.properties.addText({
              name: "clusterIp",
              label: "Host IP"
            }); // TODO(fnichol): The specification records this field in YAML as
            // `externalIPs`

            p.properties.addText({
              name: "externalIps",
              label: "External IPs",
              options: function options(p) {
                p.repeated = true;
              }
            });
            p.properties.addText({
              name: "externalName",
              label: "External Name"
            });
            p.properties.addEnum({
              name: "externalTrafficPolicy",
              label: "External Traffic Policy",
              options: function options(p) {
                p.variants = ["Local", "Cluster"];
              }
            });
            p.properties.addNumber({
              name: "healthCheckNodePort",
              label: "Health Check Node Port",
              options: function options(p) {
                p.numberKind = "uint32";
              }
            });
            p.properties.addEnum({
              name: "ipFamily",
              label: "IP Family",
              options: function options(p) {
                p.variants = ["IPv4", "IPv6"];
              }
            }); // TODO(fnichol); The specification records this field in YAML as
            // `LoadBalancerIP`

            p.properties.addText({
              name: "loadBalancerIp",
              label: "Load Balancer IP"
            });
            p.properties.addText({
              name: "loadBalancerSourceRanges",
              label: "Load Balancer Source Ranges",
              options: function options(p) {
                p.repeated = true;
              }
            });
            p.properties.addLink({
              name: "ports",
              label: "Ports",
              options: function options(p) {
                p.repeated = true;
                p.lookup = {
                  typeName: "kubernetesServicePort"
                };
              }
            });
            p.properties.addBool({
              name: "publishNotReadyAddress",
              label: "Publish Not Ready Address",
              options: function options(p) {
                p.baseDefaultValue = false;
              }
            });
            p.properties.addLink({
              name: "selector",
              label: "Selector",
              options: function options(p) {
                p.lookup = {
                  typeName: "kubernetesSelector"
                };
              }
            });
            p.properties.addEnum({
              name: "sessionAffinity",
              label: "Session Affinity",
              options: function options(p) {
                p.variants = ["ClientIP", "None"];
                p.baseDefaultValue = "None";
              }
            });
            p.properties.addObject({
              name: "sessionAffinityConfig",
              label: "Session Affinity Config",
              options: function options(p) {
                // TODO(fnichol): The specification records this field in YAML
                // as `clientIP`
                p.properties.addObject({
                  name: "clientIp",
                  label: "Client IP Config",
                  options: function options(p) {
                    p.properties.addNumber({
                      name: "timeoutSeconds",
                      label: "Timeout Seconds",
                      options: function options(p) {
                        p.numberKind = "uint32"; // Default is 3 hours

                        p.baseDefaultValue = "10800";
                      }
                    });
                  }
                });
              }
            });
            p.properties.addText({
              name: "topologyKeys",
              label: "Topology Keys",
              options: function options(p) {
                p.repeated = true;
              }
            });
            p.properties.addEnum({
              name: "type",
              label: "Type",
              options: function options(p) {
                p.variants = ["ExternalName", "ClusterIP", "NodePort", "LoadBalancer"];
                p.baseDefaultValue = "ClusterIP";
              }
            });
          }
        });
        p.properties.addObject({
          name: "status",
          label: "Service Status",
          options: function options(p) {
            p.properties.addLink({
              name: "loadBalancer",
              label: "Load Balancer Status",
              options: function options(p) {
                p.lookup = {
                  typeName: "kubernetesLoadBalancerStatus"
                };
              }
            });
          }
        });
      }
    });
    c.properties.addCode({
      name: "kubernetesObjectYaml",
      label: "Kubernetes Object YAML",
      options: function options(p) {
        p.relationships.updates({
          partner: {
            typeName: "kubernetesServiceEntity",
            names: ["properties", "kubernetesObject"]
          }
        });
        p.relationships.either({
          partner: {
            typeName: "kubernetesServiceEntity",
            names: ["properties", "kubernetesObject"]
          }
        });
        p.language = "yaml";
      }
    });
  }
});

_registry.registry.base({
  typeName: "kubernetesServicePort",
  displayTypeName: "Kubernetes Service Port",
  serviceName: "kubernetes",
  options: function options(c) {
    c.fields.addText({
      name: "appProtocol",
      label: "App Protocol"
    });
    c.fields.addText({
      name: "name",
      label: "Name"
    });
    c.fields.addNumber({
      name: "nodePort",
      label: "Node Port",
      options: function options(p) {
        p.numberKind = "uint32";
      }
    });
    c.fields.addNumber({
      name: "port",
      label: "Port",
      options: function options(p) {
        p.numberKind = "uint32";
      }
    });
    c.fields.addEnum({
      name: "protocol",
      label: "Protocol",
      options: function options(p) {
        p.variants = ["TCP", "UDP", "SCTP"];
        p.baseDefaultValue = "TCP";
      }
    }); // NOTE: "Number or name of the port...", implying either an integer or
    // string name. ugh.

    c.fields.addText({
      name: "targetPort",
      label: "Target Port"
    });
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,