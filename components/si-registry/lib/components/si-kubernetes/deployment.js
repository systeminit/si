"use strict";

var _registry = require("../../registry");

_registry.registry.componentAndEntity({
  typeName: "kubernetesDeployment",
  displayTypeName: "Kubernetes Deployment Object",
  siPathName: "si-kubernetes",
  serviceName: "kubernetes",
  options: function options(c) {
    c.entity.associations.belongsTo({
      fromFieldPath: ["siProperties", "billingAccountId"],
      typeName: "billingAccount"
    }); // Constraints

    c.constraints.addEnum({
      name: "kubernetesVersion",
      label: "Kubernetes Version",
      options: function options(p) {
        p.variants = ["v1.12", "v1.13", "v1.14", "v1.15"];
      }
    }); // Properties

    c.properties.addObject({
      name: "kubernetesObject",
      label: "Kubernetes Object",
      options: function options(p) {
        p.relationships.updates({
          partner: {
            typeName: "kubernetesDeployment",
            names: ["kubernetesObjectYaml"]
          }
        });
        p.relationships.either({
          partner: {
            typeName: "kubernetesDeployment",
            names: ["kubernetesObjectYaml"]
          }
        });
        p.properties.addText({
          name: "apiVersion",
          label: "API Version",
          options: function options(p) {
            p.required = true;
          }
        });
        p.properties.addText({
          name: "kind",
          label: "Kind",
          options: function options(p) {
            p.required = true;
            p.baseDefaultValue = "Deployment";
          }
        });
        p.properties.addLink({
          name: "metadata",
          label: "Metadata",
          options: function options(p) {
            p.lookup = {
              typeName: "kubernetesMetadata"
            };
          }
        });
        p.properties.addObject({
          name: "spec",
          label: "Deployment Spec",
          options: function options(p) {
            p.properties.addNumber({
              name: "replicas",
              label: "Replicas",
              options: function options(p) {
                p.numberKind = "uint32";
              }
            });
            p.properties.addLink({
              name: "selector",
              label: "Selector",
              options: function options(p) {
                p.lookup = {
                  typeName: "kubernetesSelector"
                };
              }
            });
            p.properties.addLink({
              name: "template",
              label: "Pod Template Spec",
              options: function options(p) {
                p.lookup = {
                  typeName: "kubernetesPodTemplateSpec"
                };
              }
            });
          }
        });
      }
    });
    c.properties.addCode({
      name: "kubernetesObjectYaml",
      label: "Kubernetes Object YAML",
      options: function options(p) {
        p.relationships.updates({
          partner: {
            typeName: "kubernetesDeployment",
            names: ["kubernetesObject"]
          }
        });
        p.relationships.either({
          partner: {
            typeName: "kubernetesDeployment",
            names: ["kubernetesObject"]
          }
        });
        p.language = "yaml";
      }
    });
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,