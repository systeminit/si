"use strict";

var _registry = require("../../registry");

/**
 * Field model for UI
 *
 * Alex's Notes...
 *
 * c.fields.addText({
 *   name: field ID
 *   label: UI display name
 *   description: short description of this field
 *   tooltip: quick info mouseover
 *   documentation: link to native docs
 * })
 *
 */
_registry.registry.base({
  typeName: "kubernetesMetadata",
  displayTypeName: "Kubernetes Meta Data",
  serviceName: "kubernetes",
  options: function options(c) {
    c.fields.addText({
      name: "name",
      label: "Name",
      options: function options(p) {
        p.required = true;
      }
    });
    c.fields.addMap({
      name: "labels",
      label: "Labels" // options(p: PropMap) {
      //   p.repeated = true;
      // }

    });
  }
});

_registry.registry.base({
  typeName: "kubernetesSelector",
  displayTypeName: "Kubernetes Label Selector",
  serviceName: "kubernetes",
  options: function options(c) {
    c.fields.addMap({
      name: "matchLabels",
      label: "Match Labels"
    });
  }
});

_registry.registry.base({
  typeName: "kubernetesContainer",
  displayTypeName: "Kubernetes Container Definition",
  serviceName: "kubernetes",
  options: function options(c) {
    c.fields.addText({
      name: "name",
      label: "Name"
    });
    c.fields.addText({
      name: "image",
      label: "Image"
    });
    c.fields.addLink({
      name: "ports",
      label: "Ports",
      options: function options(p) {
        p.repeated = true;
        p.lookup = {
          typeName: "kubernetesContainerPort"
        };
      }
    });
  }
});

_registry.registry.base({
  typeName: "kubernetesContainerPort",
  displayTypeName: "Kubernetes Container Port Definition",
  serviceName: "kubernetes",
  options: function options(c) {
    c.fields.addNumber({
      name: "containerPort",
      label: "Container Port",
      options: function options(p) {
        p.numberKind = "int32";
      }
    });
    c.fields.addText({
      name: "hostIp",
      // disabled auto/camelcase in graphql.ts for testing ...
      // name: "hostIP", 
      label: "Host IP"
    });
    c.fields.addNumber({
      name: "hostPort",
      label: "Host Port",
      options: function options(p) {
        p.numberKind = "int32";
        p.hidden = true;
      }
    });
    c.fields.addText({
      name: "name",
      label: "Name"
    });
    c.fields.addText({
      name: "protocol",
      label: "Protocol"
    });
  }
});

_registry.registry.base({
  typeName: "kubernetesPodSpec",
  displayTypeName: "Kubernetes Pod Spec",
  serviceName: "kubernetes",
  options: function options(c) {
    c.fields.addLink({
      name: "containers",
      label: "Containers",
      options: function options(p) {
        p.repeated = true;
        p.lookup = {
          typeName: "kubernetesContainer"
        };
      }
    });
  }
});

_registry.registry.base({
  typeName: "kubernetesPodTemplateSpec",
  displayTypeName: "Kubernetes Pod Template Spec",
  serviceName: "kubernetes",
  options: function options(c) {
    c.fields.addLink({
      name: "metadata",
      label: "Meta Data",
      options: function options(p) {
        p.lookup = {
          typeName: "kubernetesMetadata"
        };
      }
    });
    c.fields.addLink({
      name: "spec",
      label: "Pod Spec",
      options: function options(p) {
        p.lookup = {
          typeName: "kubernetesPodSpec"
        };
      }
    });
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,