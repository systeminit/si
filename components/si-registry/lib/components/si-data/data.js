"use strict";

var _registry = require("../../registry");

_registry.registry.base({
  typeName: "dataStorable",
  displayTypeName: "SI Internal Storable Data",
  serviceName: "data",
  options: function options(c) {
    c.fields.addText({
      name: "tenantIds",
      label: "Tenant IDs",
      options: function options(p) {
        p.readOnly = true;
        p.hidden = true;
        p.repeated = true;
        p.required = true;
        p.universal = true;
      }
    });
    c.fields.addText({
      name: "naturalKey",
      label: "Natural Key",
      options: function options(p) {
        p.readOnly = true;
        p.hidden = true;
        p.required = true;
        p.universal = true;
      }
    });
    c.fields.addText({
      name: "typeName",
      label: "Type Name",
      options: function options(p) {
        p.readOnly = true;
        p.hidden = true;
        p.required = true;
        p.universal = true;
      }
    });
  }
});

_registry.registry.base({
  typeName: "dataPageToken",
  displayTypeName: "Page Token",
  serviceName: "data",
  options: function options(c) {
    c.fields.addLink({
      name: "query",
      label: "Query",
      options: function options(p) {
        p.universal = true;
        p.lookup = {
          typeName: "dataQuery"
        };
      }
    });
    c.fields.addNumber({
      name: "pageSize",
      label: "Page Size",
      options: function options(p) {
        p.universal = true;
        p.numberKind = "uint32";
      }
    });
    c.fields.addText({
      name: "orderBy",
      label: "Order by",
      options: function options(p) {
        p.universal = true;
      }
    });
    c.fields.addEnum({
      name: "orderByDirection",
      label: "Order by direction",
      options: function options(p) {
        p.universal = true;
        p.variants = ["asc", "desc"];
      }
    });
    c.fields.addText({
      name: "itemId",
      label: "Item ID",
      options: function options(p) {
        p.universal = true;
      }
    });
    c.fields.addText({
      name: "containedWithin",
      label: "Contained Within",
      options: function options(p) {
        p.universal = true;
      }
    });
  }
});

_registry.registry.base({
  typeName: "dataQuery",
  displayTypeName: "Query",
  serviceName: "data",
  options: function options(c) {
    c.fields.addEnum({
      name: "booleanTerm",
      label: "Query Boolean Logic",
      options: function options(p) {
        p.variants = ["and", "or"];
        p.universal = true;
      }
    });
    c.fields.addBool({
      name: "isNot",
      label: "Is Not",
      options: function options(p) {
        p.universal = true;
      }
    });
    c.fields.addObject({
      name: "items",
      label: "Expression Option",
      options: function options(p) {
        p.repeated = true;
        p.universal = true;
        p.properties.addLink({
          name: "query",
          label: "Query",
          options: function options(p) {
            p.lookup = {
              typeName: "dataQuery"
            };
          }
        });
        p.properties.addObject({
          name: "expression",
          label: "Query Expression",
          options: function options(p) {
            p.universal = true;
            p.properties.addText({
              name: "field",
              label: "Field",
              options: function options(p) {
                p.universal = true;
                p.required = true;
              }
            });
            p.properties.addText({
              name: "value",
              label: "Value",
              options: function options(p) {
                p.universal = true;
                p.required = true;
              }
            });
            p.properties.addEnum({
              name: "comparison",
              label: "Query Comparison",
              options: function options(p) {
                p.universal = true;
                p.variants = ["equals", "notEquals", "contains", "like", "notLike"];
              }
            });
            p.properties.addEnum({
              name: "fieldType",
              label: "Query Field Type",
              options: function options(p) {
                p.universal = true;
                p.variants = ["string", "int"];
              }
            });
          }
        });
      }
    });
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,