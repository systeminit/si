<%_ const enumType = fmt.rustTypeForProp(propEnum, { option: false }) _%>

impl <%- enumType %> {
    pub fn iterator() -> impl Iterator<Item = Self> {
        [<%- propEnum.variants.map(v => `Self::${fmt.rustNameForEnumVariant(v)}`) %>]
            .iter()
            .copied()
    }

    <%_ if (propEnum.baseDefaultValue.trim().length > 0) { _%>
        pub fn default_value() -> Self {
            Self::<%- fmt.rustNameForEnumVariant(propEnum.baseDefaultValue) %>
        }
    <%_ } _%>

    pub fn to_i32_string(&self) -> String {
        (*self as i32).to_string()
    }
}

impl std::fmt::Display for <%- enumType %> {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Unknown => f.write_str("<UNKNOWN>"),
            <%_ for (const variant of propEnum.variants) { _%>
                Self::<%- fmt.rustNameForEnumVariant(variant) %> => f.write_str("<%- variant %>"),
            <%_ } _%>
        }
    }
}

<%_ const typeBasename = enumType.split("::").pop() _%>
<%_ const errType = `Invalid${typeBasename}` _%>
#[derive(thiserror::Error, Debug)]
#[error("invalid <%- typeBasename %> value: {0}")]
pub struct <%- errType %>(String);

impl std::str::FromStr for <%- enumType %> {
    type Err = <%- errType %>;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        match s {
            <%_ for (const variant of propEnum.variants) { _%>
                "<%- variant %>" => Ok(Self::<%- fmt.rustNameForEnumVariant(variant) %>),
            <%_ } _%>
            invalid => Err(<%- errType %>(invalid.to_string())),
        }
    }
}
