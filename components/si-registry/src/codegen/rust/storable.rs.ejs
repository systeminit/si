impl si_data::Storable for <%- fmt.structName() %> {
    fn type_name() -> &'static str {
        "<%- fmt.typeName() %>"
    }

    fn set_type_name(&mut self) {
        if self.si_storable.is_none() {
            self.si_storable = Some(Default::default());
        }

        let si_storable = self.si_storable
            .as_mut()
            .expect("<%- fmt.structName() %>.si_storable \
                has been set or initialized");
        si_storable.type_name = Some(Self::type_name().to_string());
    }

    fn id(&self) -> si_data::Result<&str> {
        self.id
            .as_ref()
            .map(String::as_str)
            .ok_or_else(|| si_data::DataError::RequiredField("id".to_string()))
    }

    fn set_id(&mut self, id: impl Into<String>) {
        self.id = Some(id.into());
    }

    fn change_set_id(&self) -> si_data::Result<Option<&str>> {
        Ok(self.si_storable
            .as_ref()
            .ok_or_else(|| si_data::DataError::RequiredField("si_storable".to_string()))?
            .change_set_id
            .as_ref()
            .map(String::as_str))
    }

    fn set_change_set_entry_count(&mut self, entry_count: u64) -> si_data::Result<()> {
        self.si_storable
            .as_mut()
            .ok_or_else(|| si_data::DataError::RequiredField("si_storable".to_string()))?
            .change_set_entry_count
            .replace(entry_count);
        Ok(())
    }

    fn generate_id(&mut self) {
        let mut id = format!("{}:{}", Self::type_name(), si_data::uuid_string(),);
        if self.si_storable.is_some() {
            if self.si_storable.as_ref().unwrap().change_set_id.is_some() {
                if self
                    .si_storable
                    .as_ref()
                    .unwrap()
                    .change_set_entry_count
                    .is_some()
                {
                    self.si_storable.as_mut().unwrap().item_id = Some(id.clone());
                    id = format!(
                        "{}:{}:{}",
                        self.si_storable
                            .as_ref()
                            .unwrap()
                            .change_set_id
                            .as_ref()
                            .unwrap(),
                        self.si_storable
                            .as_ref()
                            .unwrap()
                            .change_set_entry_count
                            .unwrap(),
                        id
                    );
                }
            }
        }
        self.set_id(id);
    }

    fn natural_key(&self) -> si_data::Result<Option<&str>> {
    <%_ if (fmt.isEntityEventObject() || fmt.isEntityObject()) { _%>
        Ok(None)
    <%_ } else { _%>
        Ok(self.si_storable
            .as_ref()
            .ok_or_else(|| si_data::DataError::RequiredField("si_storable".to_string()))?
            .natural_key
            .as_ref()
            .map(String::as_str))
    <%_ } _%>
    }

    fn set_natural_key(&mut self) -> si_data::Result<()> {
    <%_ if (fmt.isEntityEventObject() || fmt.isEntityObject()) { _%>
        Ok(())
    <%_ } else { _%>
        let natural_key = format!(
            "{}:{}:{}",
            self.tenant_ids()?.first().ok_or_else(|| si_data::DataError::MissingTenantIds)?,
            Self::type_name(),
            self.<%- fmt.naturalKey() %>
                .as_ref()
                .ok_or_else(|| si_data::DataError::RequiredField("<%- fmt.naturalKey() %>".to_string()))?,
        );

        if self.si_storable.is_none() {
            self.si_storable = Some(Default::default());
        }

        let si_storable = self.si_storable
            .as_mut()
            .expect("<%- fmt.structName() %>.si_storable \
                has been set or initialized");
        si_storable.natural_key = Some(natural_key);

        Ok(())
      <%_ } _%>
    }

    fn tenant_ids(&self) -> si_data::Result<&[String]> {
        Ok(self.si_storable
            .as_ref()
            .ok_or_else(|| si_data::DataError::RequiredField("si_storable".to_string()))?
            .tenant_ids
            .as_slice())
    }

    fn add_to_tenant_ids(&mut self, id: impl Into<String>) {
        if self.si_storable.is_none() {
            self.si_storable = Some(Default::default());
        }

        let si_storable = self.si_storable
            .as_mut()
            .expect("<%- fmt.structName() %>.si_storable \
                has been set or initialized");
        si_storable.tenant_ids.push(id.into());
    }

    fn validate(&self) -> si_data::error::Result<()> {
        <%- fmt.storableValidateFunction() %>

        Ok(())
    }

    fn referential_fields(&self) -> Vec<si_data::Reference> {
        <%- fmt.storableReferentialFieldsFunction() %>
    }

    fn order_by_fields() -> Vec<&'static str> {
      <%- fmt.storableOrderByFieldsFunction() %>
    }
}
