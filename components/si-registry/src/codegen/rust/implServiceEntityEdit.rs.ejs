use si_cea::{Entity, EntityEvent};

let auth = <%- fmt.implServiceAuth(propMethod) %>;

let inner = request.into_inner();
let id = inner.id.ok_or_else(|| si_data::DataError::RequiredField("id".to_string()))?;
let property = inner.property.ok_or_else(|| si_data::DataError::RequiredField("property".to_string()))?;

let mut entity = <%- fmt.structName() %>::get(&self.db, &id).await?;
let previous_entity = entity.clone();

entity.set_entity_state_transition();
entity.<%- fmt.entityEditMethodName(propMethod) %>(property)?;
entity.save(&self.db).await?;

let entity_event = <%- fmt.entityEventName() %>::create_with_previous_entity(
    &self.db,
    auth.user_id(),
    "<%- fmt.entityEditMethodName(propMethod) %>",
    &entity,
    previous_entity,
)
.await?;

Ok(tonic::Response::new(
    <%- fmt.implServiceReplyType(propMethod, { option: false, reference: false }) %> {
        item: Some(entity_event),
    },
))
