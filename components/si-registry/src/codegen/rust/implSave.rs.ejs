pub async fn get(db: &si_data::Db, id: &str) -> si_data::Result<<%- fmt.structName() %>> {
    let obj = db.get(id).await?;
    Ok(obj)
}

pub async fn get_by_natural_key(db: &si_data::Db, natural_key: &str) -> si_data::Result<<%- fmt.structName() %>> {
    let obj = db.lookup_by_natural_key(natural_key).await?;
    Ok(obj)
}

pub async fn save(&self, db: &si_data::Db) -> si_data::Result<()> {
    db.upsert(self).await?;
    Ok(())
}

pub async fn finalize(&self, db: &si_data::Db) -> si_data::Result<()> {
    tracing::debug!("finalizing_<%- fmt.typeName() %>");
    db.upsert(self).await?;

<%_ if (fmt.isEntityEventObject()) { _%>
    // No output entity means we didn't mutate anything
    if let Some(ref entity) = self.output_entity {
       tracing::debug!("finalizing_<%- fmt.entityTypeName() %>");
       db.upsert(entity).await?;
    }
<%_ } _%>

    Ok(())
}

pub async fn list(db: &si_data::Db, list_request: <%- fmt.implListRequestType({ reference: false, option: false }) %>) -> si_data::Result<si_data::ListResult<<%- fmt.structName() %>>> {
    let result = match list_request.page_token {
        Some(token) => db.list_by_page_token(token).await?,
        None => {
            let page_size = match list_request.page_size {
                Some(page_size) => page_size,
                None => 10,
            };
            let order_by = match list_request.order_by {
                Some(order_by) => order_by,
                // The empty string is the signal for a default, thanks protobuf history
                None => "".to_string(),
            };
            let contained_within = match list_request.scope_by_tenant_id {
                Some(contained_within) => contained_within,
                None => return Err(si_data::DataError::MissingScopeByTenantId),
            };
            db.list(
                &list_request.query,
                page_size,
                order_by,
                list_request.order_by_direction,
                contained_within,
                "",
            )
            .await?
        }
    };
    Ok(result)
}
