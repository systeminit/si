pub fn new(<%- fmt.implCreateNewArgs() %>, si_properties: Option<crate::protobuf::ChangeSetSiProperties>) -> si_data::Result<<%- fmt.structName() %>> {
<%_ if (fmt.isStorable()) { _%>
    let mut si_storable = si_data::protobuf::DataStorable::default();
    <%- fmt.implCreateAddToTenancy() %>
<%_ } _%>

    let mut result: <%- fmt.structName() %> = Default::default();
    result.name = name;
    result.display_name = display_name;
    result.note = note;
    result.created_by_user_id = created_by_user_id;
    result.set_status(crate::protobuf::ChangeSetStatus::Open);
    result.si_storable = Some(si_storable);
    result.si_properties = si_properties;

    Ok(result)
}

pub async fn create(db: &si_data::Db, <%- fmt.implCreateNewArgs() %>, si_properties: Option<crate::protobuf::ChangeSetSiProperties>) -> si_data::Result<<%- fmt.structName() %>> {
    let mut result = <%- fmt.structName() %>::new(<%- fmt.implCreatePassNewArgs() %>, si_properties)?;
    db.validate_and_insert_as_new(&mut result).await?;

    Ok(result)
}

