<%- fmt.implServiceAuth(propMethod) %>

let user_id = request
    .metadata()
    .get("userid")
    .map(|r| r.to_str().unwrap_or("no_user_id_bug_live_here")).unwrap().to_string();

let inner = request.into_inner();
<%- fmt.implServiceMethodCreateDestructure() %>

let workspace_id = workspace_id.ok_or_else(|| {
    si_data::DataError::ValidationError(
        "missing required workspace_id value".to_string(),
    )
})?;

let workspace = si_account::Workspace::get(&self.db, &workspace_id).await?;

let (implicit_constraints, component) =
    <%- fmt.componentName() %>::pick(&self.db, constraints.clone()).await?;

let si_properties = si_cea::EntitySiProperties::new(
    &workspace,
    component
        .id
        .as_ref()
        .ok_or_else(|| si_data::DataError::RequiredField("id".to_string()))?,
    component.si_properties.as_ref().ok_or_else(|| {
        si_data::DataError::RequiredField("si_properties".to_string())
    })?,
)?;

let entity = <%- fmt.structName() %>::create(
    &self.db,
    name,
    display_name,
    description,
    constraints,
    Some(implicit_constraints),
    properties,
    Some(si_properties),
    change_set_id,
).await?;

si_account::EventLog::entity_create(&self.db, &user_id, &entity).await?; 

Ok(tonic::Response::new(
     <%- fmt.implServiceReplyType(propMethod, { option: false, reference: false }) %> {
        item: Some(entity),
    },
))
