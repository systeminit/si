// Auto-generated rust code!
// No-Touchy!

use tracing_futures::Instrument as _;
use tracing_opentelemetry::OpenTelemetrySpanExt as _;
use opentelemetry::api::propagation::text_propagator::HttpTextFormat;

pub use <%- fmt.implServerName() %> as Server;

#[derive(Debug)]
pub struct Service {
<%- fmt.implServiceStructBody() %>
}

impl Service {
    pub fn new(<%- fmt.implServiceNewConstructorArgs() %>) -> Service {
        Service { <%- fmt.implServiceStructConstructorReturn() %> }
    }

    <% if (fmt.hasMigratables()) { %>
    pub async fn migrate(&self) -> si_data::Result<()> {
        <%- fmt.implServiceMigrate() %>

        Ok(())
    }
    <%_ } _%>
}

#[tonic::async_trait]
impl <%- fmt.implServiceTraitName() %> for Service {
<%_ for (const objFmt of fmt.systemObjectsAsFormatters()) { _%>
    <%- objFmt.serviceMethods() %>
<%_ } _%>
}

struct TonicMetaWrapper<'a>(&'a mut tonic::metadata::MetadataMap);

impl<'a> opentelemetry::api::propagation::Carrier for TonicMetaWrapper<'a> {
    fn get(&self, key: &'static str) -> Option<&str> {
        let raw_value = self.0.get(key)?;
        match raw_value.to_str() {
            Ok(value) => Some(value),
            Err(_e) => {
                tracing::debug!("Cannot extract header for trace parent, not a string");
                None
            }
        }
    }

    fn set(&mut self, key: &'static str, raw_value: String) {
        let value = match tonic::metadata::MetadataValue::from_str(&raw_value) {
            Ok(value) => value,
            Err(_e) => {
                tracing::debug!("Cannot insert header for trace parent, not a string");
                tracing::debug!("Inserting the empty string");
                tonic::metadata::MetadataValue::from_str("").unwrap()
            }
        };
        self.0.insert(key, value);
    }
}
