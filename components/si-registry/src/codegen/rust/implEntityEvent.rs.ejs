impl si_cea::EntityEvent for <%- fmt.structName() %> {
    type Entity = <%- fmt.entityName() %>;

    fn action_names() -> &'static [&'static str] {
    &[<%- fmt.entityActionMethodNames().map(e => `"${e}"`).join(",") %>]
    }

    fn action_name(&self) -> si_data::Result<&str> {
        self.action_name
            .as_ref()
            .map(String::as_str)
            .ok_or_else(|| si_data::DataError::RequiredField("action_name".to_string()))
    }

    fn set_action_name(&mut self, action_name: impl Into<String>) {
        self.action_name = Some(action_name.into());
    }

    fn create_time(&self) -> si_data::Result<&str> {
        self.create_time
            .as_ref()
            .map(String::as_str)
            .ok_or_else(|| si_data::DataError::RequiredField("create_time".to_string()))
    }

    fn set_create_time(&mut self, create_time: impl Into<String>) {
        self.create_time = Some(create_time.into());
    }

    fn updated_time(&self) -> Option<&str> {
        self.updated_time
            .as_ref()
            .map(String::as_str)
    }

    fn set_updated_time(&mut self, updated_time: impl Into<String>) {
        self.updated_time = Some(updated_time.into());
    }

    fn final_time(&self) -> Option<&str> {
        self.final_time
            .as_ref()
            .map(String::as_str)
    }

    fn set_final_time(&mut self, final_time: impl Into<String>) {
        self.final_time = Some(final_time.into());
    }

    fn success(&self) -> Option<bool> {
        self.success
    }

    fn set_success(&mut self, success: bool) {
        self.success = Some(success);
    }

    fn finalized(&self) -> Option<bool> {
        self.finalized
    }

    fn set_finalized(&mut self, finalized: bool) {
        self.finalized = Some(finalized);
    }

    fn user_id(&self) -> si_data::Result<&str> {
        self.user_id
            .as_ref()
            .map(String::as_str)
            .ok_or_else(|| si_data::DataError::RequiredField("user_id".to_string()))
    }

    fn set_user_id(&mut self, user_id: impl Into<String>) {
        self.user_id = Some(user_id.into());
    }

    fn output_lines(&self) -> &[String] {
        &self.output_lines
    }

    fn add_to_output_lines(&mut self, line: impl Into<String>) {
        self.output_lines.push(line.into());
    }

    fn error_lines(&self) -> &[String] {
        self.error_lines.as_ref()
    }

    fn add_to_error_lines(&mut self, line: impl Into<String>) {
        self.error_lines.push(line.into());
    }

    fn error_message(&self) -> Option<&str> {
        self.error_message
            .as_ref()
            .map(String::as_str)
    }

    fn set_error_message(&mut self, error_message: impl Into<String>) {
        self.error_message = Some(error_message.into());
    }

    fn previous_entity(&self) -> Option<&Self::Entity> {
        self.previous_entity.as_ref()
    }

    fn set_previous_entity(&mut self, previous_entity: Self::Entity) {
        self.previous_entity = Some(previous_entity);
    }

    fn input_entity(&self) -> si_data::Result<&Self::Entity> {
        self.input_entity
            .as_ref()
            .ok_or_else(|| si_data::DataError::RequiredField("input_entity".to_string()))
    }

    fn set_input_entity(&mut self, input_entity: Self::Entity) {
        self.input_entity = Some(input_entity);
    }

    fn output_entity(&self) -> Option<&Self::Entity> {
        self.output_entity.as_ref()
    }

    fn set_output_entity(&mut self, output_entity: Self::Entity) {
        self.output_entity = Some(output_entity);
    }

    fn mut_output_entity(&mut self) -> si_data::Result<&mut Self::Entity> {
        if self.output_entity.is_none() {
            self.init_output_entity()?;
        }

        Ok(self.output_entity.as_mut().expect("output_entity has been set or initialized"))
    }

    fn billing_account_id(&self) -> si_data::Result<&str> {
        self.si_properties
            .as_ref()
            .ok_or_else(|| si_data::DataError::RequiredField("si_properties".to_string()))?
            .billing_account_id
            .as_ref()
            .map(String::as_str)
            .ok_or_else(|| si_data::DataError::RequiredField("billing_account_id".to_string()))
    }

    fn set_billing_account_id(&mut self, billing_account_id: impl Into<String>) {
        if self.si_properties.is_none() {
            self.si_properties = Some(Default::default());
        }

        let si_properties = self.si_properties
            .as_mut()
            .expect("<%- fmt.structName() %>.si_properties \
                has been set or initialized");
        si_properties.billing_account_id = Some(billing_account_id.into());
    }

    fn organization_id(&self) -> si_data::Result<&str> {
        self.si_properties
            .as_ref()
            .ok_or_else(|| si_data::DataError::RequiredField("si_properties".to_string()))?
            .organization_id
            .as_ref()
            .map(String::as_str)
            .ok_or_else(|| si_data::DataError::RequiredField("organization_id".to_string()))
    }

    fn set_organization_id(&mut self, organization_id: impl Into<String>) {
        if self.si_properties.is_none() {
            self.si_properties = Some(Default::default());
        }

        let si_properties = self.si_properties
            .as_mut()
            .expect("<%- fmt.structName() %>.si_properties \
                has been set or initialized");
        si_properties.organization_id = Some(organization_id.into());
    }

    fn workspace_id(&self) -> si_data::Result<&str> {
        self.si_properties
            .as_ref()
            .ok_or_else(|| si_data::DataError::RequiredField("si_properties".to_string()))?
            .workspace_id
            .as_ref()
            .map(String::as_str)
            .ok_or_else(|| si_data::DataError::RequiredField("workspace_id".to_string()))
    }

    fn set_workspace_id(&mut self, workspace_id: impl Into<String>) {
        if self.si_properties.is_none() {
            self.si_properties = Some(Default::default());
        }

        let si_properties = self.si_properties
            .as_mut()
            .expect("<%- fmt.structName() %>.si_properties \
                has been set or initialized");
        si_properties.workspace_id = Some(workspace_id.into());
    }

    fn integration_id(&self) -> si_data::Result<&str> {
        self.si_properties
            .as_ref()
            .ok_or_else(|| si_data::DataError::RequiredField("si_properties".to_string()))?
            .integration_id
            .as_ref()
            .map(String::as_str)
            .ok_or_else(|| si_data::DataError::RequiredField("integration_id".to_string()))
    }

    fn set_integration_id(&mut self, integration_id: impl Into<String>) {
        if self.si_properties.is_none() {
            self.si_properties = Some(Default::default());
        }

        let si_properties = self.si_properties
            .as_mut()
            .expect("<%- fmt.structName() %>.si_properties \
                has been set or initialized");
        si_properties.integration_id = Some(integration_id.into());
    }

    fn integration_service_id(&self) -> si_data::Result<&str> {
        self.si_properties
            .as_ref()
            .ok_or_else(|| si_data::DataError::RequiredField("si_properties".to_string()))?
            .integration_service_id
            .as_ref()
            .map(String::as_str)
            .ok_or_else(|| si_data::DataError::RequiredField("integration_service_id".to_string()))
    }

    fn set_integration_service_id(&mut self, integration_service_id: impl Into<String>) {
        if self.si_properties.is_none() {
            self.si_properties = Some(Default::default());
        }

        let si_properties = self.si_properties
            .as_mut()
            .expect("<%- fmt.structName() %>.si_properties \
                has been set or initialized");
        si_properties.integration_service_id = Some(integration_service_id.into());
    }

    fn component_id(&self) -> si_data::Result<&str> {
        self.si_properties
            .as_ref()
            .ok_or_else(|| si_data::DataError::RequiredField("si_properties".to_string()))?
            .component_id
            .as_ref()
            .map(String::as_str)
            .ok_or_else(|| si_data::DataError::RequiredField("component_id".to_string()))
    }

    fn set_component_id(&mut self, component_id: impl Into<String>) {
        if self.si_properties.is_none() {
            self.si_properties = Some(Default::default());
        }

        let si_properties = self.si_properties
            .as_mut()
            .expect("<%- fmt.structName() %>.si_properties \
                has been set or initialized");
        si_properties.component_id = Some(component_id.into());
    }

    fn entity_id(&self) -> si_data::Result<&str> {
        self.si_properties
            .as_ref()
            .ok_or_else(|| si_data::DataError::RequiredField("si_properties".to_string()))?
            .entity_id
            .as_ref()
            .map(String::as_str)
            .ok_or_else(|| si_data::DataError::RequiredField("entity_id".to_string()))
    }

    fn set_entity_id(&mut self, entity_id: impl Into<String>) {
        if self.si_properties.is_none() {
            self.si_properties = Some(Default::default());
        }

        let si_properties = self.si_properties
            .as_mut()
            .expect("<%- fmt.structName() %>.si_properties \
                has been set or initialized");
        si_properties.entity_id = Some(entity_id.into());
    }
}
