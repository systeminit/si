pub async fn delete(
    &mut self,
    db: &si_data::Db,
    change_set_id: Option<String>,
  ) -> si_data::Result<()> {
    let item_id = self.id.as_ref().map(|change_set_enabled_id| {
        let split_result: Vec<&str> = change_set_enabled_id.split(":").collect();
        let item_id = if split_result.len() == 2 {
            format!("{}:{}", split_result[0], split_result[1])
        } else {
            format!("{}:{}", split_result[3], split_result[4])
        };
        item_id
    });
    self.si_storable.as_mut().map(|si_storable| {
        si_storable.change_set_id = change_set_id;
        si_storable.deleted = Some(true);
        si_storable.set_change_set_event_type(si_data::DataStorableChangeSetEventType::Delete);
        si_storable.item_id = item_id;
        si_storable.change_set_executed = Some(false);
        si_storable
    });

    db.delete(self).await?;
    Ok(())
}

pub async fn update(
    &mut self,
    db: &si_data::Db,
    change_set_id: Option<String>,
    update: <%- fmt.implUpdateRequestType({ reference: false, option: true }) %>,
    ) -> si_data::Result<()> {
    let item_id = self.id.as_ref().map(|change_set_enabled_id| {
        let split_result: Vec<&str> = change_set_enabled_id.split(":").collect();
        let item_id = if split_result.len() == 2 {
            format!("{}:{}", split_result[0], split_result[1])
        } else {
            format!("{}:{}", split_result[3], split_result[4])
        };
        item_id
    });
    self.si_storable.as_mut().map(|si_storable| {
        si_storable.change_set_id = change_set_id;
        si_storable.deleted = Some(false);
        si_storable.set_change_set_event_type(si_data::DataStorableChangeSetEventType::Update);
        si_storable.item_id = item_id;
        si_storable.change_set_executed = Some(false);
        si_storable
    });

    if update.is_some() {
        let real_update = update.unwrap();
        if real_update.description.is_some() {
            self.description = real_update.description;
        }
        if real_update.properties.is_some() {
            self.properties = real_update.properties;
        }
        if real_update.name.is_some() {
            self.name = real_update.name;
        }
    }

    db.update(self).await?;
    Ok(())
}
