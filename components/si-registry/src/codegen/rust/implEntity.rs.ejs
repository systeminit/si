impl si_cea::Entity for <%- fmt.structName() %> {
    fn id(&self) -> &str {
        self.id
            .as_ref()
            .expect("TODO: fix")
    }

    fn set_id(&mut self, id: impl Into<String>) {
        self.id = Some(id.into());
    }

    fn state(&self) -> i32 {
        self.si_properties
            .as_ref()
            .expect("TODO: fix").entity_state
    }

    fn set_state(&mut self, state: si_cea::EntitySiPropertiesEntityState) {
        self.si_properties
            .as_mut()
            .expect("TODO: fix").set_entity_state(state);
    }

    fn component_id(&self) -> &str {
        self.si_properties
            .as_ref()
            .expect("TODO: fix")
            .component_id
            .as_ref()
            .expect("TODO: fix")
    }

    fn set_component_id(&mut self, component_id: impl Into<String>) {
        self.si_properties
            .as_mut()
            .expect("TODO: fix")
            .component_id = Some(component_id.into());
    }

    fn integration_id(&self) -> &str {
        self.si_properties
            .as_ref()
            .expect("TODO: fix")
            .integration_id
            .as_ref()
            .expect("TODO: fix")
    }

    fn set_integration_id(&mut self, integration_id: impl Into<String>) {
        self.si_properties
            .as_mut()
            .expect("TODO: fix")
            .integration_id = Some(integration_id.into());
    }

    fn integration_service_id(&self) -> &str {
        self.si_properties
            .as_ref()
            .expect("TODO: fix")
            .integration_service_id
            .as_ref()
            .expect("TODO: fix")
    }

    fn set_integration_service_id(&mut self, integration_service_id: impl Into<String>) {
        self.si_properties
            .as_mut()
            .expect("TODO: fix")
            .integration_service_id = Some(integration_service_id.into());
    }

    fn workspace_id(&self) -> &str {
        self.si_properties
            .as_ref()
            .expect("TODO: fix")
            .workspace_id
            .as_ref()
            .expect("TODO: fix")
    }

    fn set_workspace_id(&mut self, workspace_id: impl Into<String>) {
        self.si_properties
            .as_mut()
            .expect("TODO: fix").workspace_id = Some(workspace_id.into());
    }

    fn organization_id(&self) -> &str {
        self.si_properties
            .as_ref()
            .expect("TODO: fix")
            .organization_id
            .as_ref()
            .expect("TODO: fix")
    }

    fn set_organization_id(&mut self, organization_id: impl Into<String>) {
        self.si_properties
            .as_mut()
            .expect("TODO: fix")
            .organization_id = Some(organization_id.into());
    }

    fn billing_account_id(&self) -> &str {
        self.si_properties
            .as_ref()
            .expect("TODO: fix")
            .billing_account_id
            .as_ref()
            .expect("TODO: fix")
    }

    fn set_billing_account_id(&mut self, billing_account_id: impl Into<String>) {
        self.si_properties
            .as_mut()
            .expect("TODO: fix")
            .billing_account_id = Some(billing_account_id.into());
    }
}
