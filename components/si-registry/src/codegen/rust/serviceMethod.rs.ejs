async fn <%- fmt.implServiceMethodName(propMethod) %>(
    &self,
    mut request: tonic::Request<<%- fmt.implServiceRequestType(propMethod, { option: false, reference: false }) %>>,
    ) -> std::result::Result<tonic::Response<<%- fmt.implServiceReplyType(propMethod, { option: false, reference: false }) %>>, tonic::Status> {
    let trace_propagator =
      opentelemetry::api::trace::trace_context_propagator::TraceContextPropagator::new();
    let span_context = {
      let metadata_wrapper = TonicMetaWrapper(request.metadata_mut());
        trace_propagator.extract(&metadata_wrapper)
    };
    let span = tracing::span!(
      tracing::Level::INFO,
      "<%- fmt.implServiceTraceName(propMethod) %>",
      metadata.content_type = tracing::field::Empty,
      authenticated = tracing::field::Empty,
      userId = tracing::field::Empty,
      billingAccountId = tracing::field::Empty,
      http.user_agent = tracing::field::Empty,
    );
    span.set_parent(span_context);

    {
        let metadata = request.metadata();
        if let Some(raw_value) = metadata.get("authenticated") {
            let value = raw_value.to_str().unwrap_or("unserializable");
            span.record("authenticated", &tracing::field::display(value));
        }
        if let Some(raw_value) = metadata.get("userid") {
        let value = raw_value.to_str().unwrap_or("unserializable");
            span.record("userId", &tracing::field::display(value));
        }
        if let Some(raw_value) = metadata.get("billingAccountId") {
            let value = raw_value.to_str().unwrap_or("unserializable");
            span.record("billingAccountId", &tracing::field::display(value));
        }
        if let Some(raw_value) = metadata.get("user-agent") {
            let value = raw_value.to_str().unwrap_or("unserializable");
            span.record("http.user_agent", &tracing::field::display(value));
        }
      }

    async {
        <%_ if (fmt.isEntityEditMethod(propMethod)) { _%>
            <%- fmt.implServiceEntityEdit(propMethod) %>
        <%_ } else if (fmt.isEntityActionMethod(propMethod)) { _%>
            <%- fmt.implServiceEntityAction(propMethod) %>
        <%_ } else if (propMethod.name == "get") { _%>
            <%- fmt.implServiceGet(propMethod) %>
        <%_ } else if (propMethod.name == "create" && fmt.isEntityObject()) { _%>
            <%- fmt.implServiceEntityCreate(propMethod) %>
        <%_ } else if (propMethod.name == "create") { _%>
            <%- fmt.implServiceCommonCreate(propMethod) %>
        <%_ } else if (propMethod.name == "list") { _%>
            <%- fmt.implServiceList(propMethod) %>
        <%_ } else if (propMethod.name == "pick" && fmt.isComponentObject()) { _%>
            <%- fmt.implServiceComponentPick(propMethod) %>
        <%_ } else { _%>
            <%- fmt.implServiceCustomMethod(propMethod) %>
        <%_ } _%>
    }
    .instrument(span)
    .await
}
