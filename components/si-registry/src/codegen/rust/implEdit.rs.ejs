<%_ for (const method of fmt.entityEditMethods()) { _%>
pub fn <%- fmt.entityEditMethodName(method) %>(
    &mut self,
    property: <%- fmt.entityEditPropertyType(method) %>,
) -> si_cea::CeaResult<()> {
    use si_cea::Entity;

    self.properties_mut()?.<%- fmt.entityEditPropertyField(method) %> = Some(property);
    <%_ for (const propertyUpdate of fmt.entityEditPropertyUpdates(method)) { _%>
        self.<%- fmt.entityEditPropertyUpdateMethodName(propertyUpdate) %>()?;
    <%_ } _%>

    Ok(())
}

<%_ } _%>
<%_ for (const method of fmt.entityEditMethods()) { _%>
    <%_ for (const pu of fmt.entityEditPropertyUpdates(method)) { _%>
    fn <%- fmt.entityEditPropertyUpdateMethodName(pu) %>(
        &mut self
    ) -> si_cea::CeaResult<()> {
        use si_cea::Entity;
        use std::convert::TryInto;

        if let Some(ref <%- fmt.rustFieldNameForProp(pu.from) %>) = self
            .properties()?
            .<%- fmt.rustFieldNameForProp(pu.from) %>
        {
            self.properties_mut()?.<%- fmt.rustFieldNameForProp(pu.to) %> =
                Some(<%- fmt.rustFieldNameForProp(pu.from) %>.try_into()?);
        }

        Ok(())
    }

    <%_ } _%>
<%_ } _%>
