"A Port Component"
type PortComponent implements Component {
  "The ID"
  id: ID!
  "The name of the component"
  name: String!
  "Description of the element"
  description: String!
  "Raw data for the component"
  rawDataJson: String!
  "The integration that backs the component"
  integration: Integration!
  "The type of node created by this component type"
  nodeType: String!
  "The supported actions on this component"
  supportedActions: [String]!
  "The service name"
  serviceName: String!
  "The protocol of the port"
  protocol: String!
  "The number of the port"
  number: Int!
}

type PortEntity {
  "The ID"
  id: ID!
  "The name of the port"
  name: String!
  "A longer description of the port"
  description: String!
  "The service name"
  serviceName: String!
  "The protocol"
  protocol: String!
  "The number of the port"
  number: Int!
  "An optional component this entity was created with"
  component: PortComponent
}

extend type Query {
  "Get Operating System Components enabled for this user"
  getPortComponents(where: GetComponentsInput): [PortComponent]!
  findPortComponents(where: FindComponentInput): [PortComponent]!
}

input CreatePortArgs {
  "The name of the port"
  name: String!
  "A longer description of the port"
  description: String
  "The service name"
  serviceName: String
  "The protocol"
  protocol: String
  "The number of the port"
  number: Int
}

input CreatePortInput {
  constraints: String,
  args: CreatePortArgs!,
  workspace: String!,
}

type CreatePortPayload {
  port: PortEntity!
}

extend type Mutation {
  createPort(input: CreatePortInput): CreatePortPayload!
}

