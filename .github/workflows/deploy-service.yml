name: Deploy Service

run-name: Deploying ${{ inputs.service }}

on:
  workflow_call:
    inputs:
      environment:
        type: string
        required: true
        description: "where to deploy"
      service:
        type: string
        required: true
        description: "service to deploy"
      version:
        type: string
        required: true
        description: "version to deploy"

jobs:
  deploy:
    environment: ${{ inputs.environment }}
    name: Deploy Service
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials for production
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: us-east-1

      - name: Deploy web
        if: ${{ inputs.service == 'web' }}
        uses: netlify/actions/cli@master
        with:
          args: deploy --dir=app/web
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

      - name: Deploy service
        if: ${{ inputs.service != 'web' }}
        run: |
            check_version_exists() {
                local version="$1"
                local service="$2"
                local URL="https://artifacts.systeminit.com/${service}/${version}/omnibus/linux/x86_64/${service}-${version}-omnibus-linux-x86_64.tar.gz"
                local check=$(curl -s -o /dev/null -w "%{http_code}" "$URL")
                [[ "$check" -eq 200 || "$check" -eq 301 ]]
            }

            poll_instance_refresh() {
                local environment="$1"
                local service="$2"
                local id="$3"
                while true; do
                  status=$(aws autoscaling describe-instance-refreshes \
                    --auto-scaling-group-name "${environment}-${service}" \
                    --query "InstanceRefreshes[?InstanceRefreshId=='${id}'].Status" \
                    --output text)

                  if [ -z "$status" ]; then
                    echo "No instance refresh found with ID ${id} for ${environment}-${service}."
                    break
                  fi

                  echo "Instance refresh status: $status"

                  if [[ "$status" == "Successful" ]]; then
                    echo "Instance refresh completed successfully."
                    break
                  elif [[ "$status" == "Failed" || "$status" == "Cancelled" ]]; then
                    echo "Instance refresh failed or was cancelled."
                    exit 1
                  else
                    echo "Instance refresh is still in progress. Waiting..."
                    sleep 15
                  fi
                done
            }

            check_existing_refresh() {
                local environment="$1"
                local service="$2"
                id=$(aws autoscaling describe-instance-refreshes \
                  --auto-scaling-group-name "${environment}-${service}"\
                  --query "InstanceRefreshes[?Status=='InProgress'].[InstanceRefreshId]"\
                  --output text)
                poll_instance_refresh "$environment" "$service" "$id"
            }

            ENVIRONMENT="${{ inputs.environment }}"
            SERVICE="${{ inputs.service }}"
            VERSION="${{ inputs.version }}"

            if check_version_exists "$VERSION" "$SERVICE"; then
                echo "Checking if an instance refresh is already underway..."
                check_existing_refresh "$ENVIRONMENT" "$SERVICE"

                echo "Setting $SERVICE to $VERSION."
                aws ssm put-parameter --name "${ENVIRONMENT}-si-version-$SERVICE" --value "$VERSION" --type "String" --overwrite
                id=$(aws autoscaling start-instance-refresh \
                  --auto-scaling-group-name "${ENVIRONMENT}-${SERVICE}" \
                  --query 'InstanceRefreshId' --output text)
                poll_instance_refresh "$ENVIRONMENT" "$SERVICE" "$id"
            else
                echo "Version $VERSION for $SERVICE not found in the artifacts registry. Skipping!"
                exit 1
            fi
