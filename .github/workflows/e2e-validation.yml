name: Cypress E2E Tests

on:
  workflow_call:
    inputs:
      environment:
        type: string
        required: true
        description: "where to test"
      test_dir:
        type: string
        required: true
        description: "which test directory to execute"
  workflow_dispatch:
    inputs:
      environment:
        type: choice
        required: true
        description: "where to test"
        default: "tools"
        options:
          - tools
          - production
          - perf
          - ec2-node
      test_dir:
        type: string
        required: true
        description: "which test directory to execute"
        default: "cypress/e2e"

jobs:
  define-test-matrix:
    runs-on: ubuntu-latest
    outputs:
      tests: ${{ steps.tests.outputs.tests }}
    steps:
      - uses: actions/checkout@v4
      - id: tests
        working-directory: app/web/${{ inputs.test_dir }}
        run: |
          test_dirs=$(find . -mindepth 1 -maxdepth 1 -type d  | sed 's|^\./||')
          test_array="[]"
          for d in $test_dirs; do
            test_array=$(echo "$test_array" | jq --arg d "$d" '. += [$d]')
          done
          test_array=$(echo "$test_array" | jq -c '.')
          echo "$test_array"
          echo "tests=$test_array" >> "$GITHUB_OUTPUT"

  launch-ec2-node:
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-latest
    if: ${{ inputs.environment == 'ec2-node' }}
    outputs:
      remote-ip: ${{ steps.get-ip.outputs.remote_ip }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy EC2 node
        working-directory: .ci/
        run: |
          export SI_API_TOKEN="${{ secrets.SI_API_TOKEN }}"
          export SI_WORKSPACE_ID="${{ vars.MANAGEMENT_WORKSPACE_ID }}"
          python3 ./deploy-stack.py

      - name: Save IP
        id: get-ip
        working-directory: .ci/
        run: |
          remote_ip=$(grep -Eo '([0-9]{1,3}\.){3}[0-9]{1,3}' "./ip")
          echo "Remote IP set to ${remote_ip}"
          echo "remote_ip=$remote_ip" >> "$GITHUB_OUTPUT"
          echo "remote_ip=$remote_ip" >> "$GITHUB_ENV"

      - name: Validate Service's are healthy
        if: ${{ inputs.environment == 'ec2-node' }}
        working-directory: .ci/
        run: |
          echo "$SSH_KEY" > ssh-key.pem
          chmod 600 ssh-key.pem

          echo "Tunneling EC2 node @ $remote_ip"

          # Start SSH tunnel in background for 3020 (Bedrock)
          nohup ssh -o StrictHostKeyChecking=no -L 3020:localhost:3020 "arch@$remote_ip" -i ssh-key.pem -N &

          # Wait for Bedrock (EC2 localhost:3020) to be ready
          echo "Waiting for Bedrock to be ready..."
          for i in {1..180}; do
            if curl --fail --silent --max-time 2 http://localhost:3020/; then
                echo "✅ Bedrock service is up and returned a valid response, preparing db"
                curl --location 'http://localhost:3020/prepare' \
                --header 'Content;' \
                --header 'Content-Type: application/json' \
                --data '{
                  "recording_id": "W=01JYPR32SD5RKR3AMG298J7263-CS=01JZ3W5XX6QHQZ6PYSBHK4SB3K (39 components)",
                  "parameters": {},
                  "executionParameters": {}
                }'
                break
            fi
            echo "⏳ Attempt $i/180: Bedrock not responding yet. Retrying in 10s..."
            sleep 10
          done

          # Fail if still not up after 30 min
          if ! nc -z localhost 3020; then
            echo "❌ Timed out waiting for bedrock service on port 3020"
            exit 1
          fi

          # Start SSH tunnel in background for 8080 (Web App)
          nohup ssh -o StrictHostKeyChecking=no -L 8080:localhost:8080 "arch@$remote_ip" -i ssh-key.pem -N &

          # Wait for tunnel Web App (EC2 localhost:8080) to be ready
          echo "Waiting up to 30 minutes for remote web app to be ready..."
          for i in {1..180}; do
            if curl --fail --silent --max-time 2 http://localhost:8080/health; then
                echo "✅ Remote service is up and returned a valid response!"
                break
            fi
            echo "⏳ Attempt $i/180: Service not responding yet. Retrying in 10s..."
            sleep 10
          done

          # Fail if still not up after 30 min
          if ! nc -z localhost 8080; then
            echo "❌ Timed out waiting for web app on port 8080"
            exit 1
          fi
        env:
          SSH_KEY: ${{ secrets.SSH_KEY }}

  cypress-tests:
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-latest
    needs: [define-test-matrix, launch-ec2-node]
    if: always() && (needs.define-test-matrix.result == 'success') && (inputs.environment != 'ec2-node' || needs.launch-ec2-node.result == 'success')
    strategy:
      fail-fast: true
      matrix:
        tests: ${{ fromJSON(needs.define-test-matrix.outputs.tests) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.18.2'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Install Deps
        working-directory: app/web
        run: |
          pnpm i
          npx cypress install

      - name: install uuid
        run: |
          sudo apt update
          sudo apt install uuid -y

      - name: Setup SSH tunnel if ec2-node for web access
        if: ${{ inputs.environment == 'ec2-node' }}
        working-directory: .ci/
        run: |
          echo "$SSH_KEY" > ssh-key.pem
          chmod 600 ssh-key.pem

          remote_ip="${{ needs.launch-ec2-node.outputs.remote-ip }}"
          echo "Tunneling EC2 node @ $remote_ip"

          # Start SSH tunnel in background for 8080 (Web App) & 3020 (Bedrock)
          nohup ssh -o StrictHostKeyChecking=no -L 8080:localhost:8080 arch@$remote_ip -i ssh-key.pem -N &

          # Wait for tunnel Web App (EC2 localhost:8080) to be ready
          echo "Waiting up to 30 minutes for remote web app to be ready..."
          for i in {1..180}; do
            if curl --fail --silent --max-time 2 http://localhost:8080/health; then
                echo "✅ Remote service is up and returned a valid response!"
                break
            fi
            echo "⏳ Attempt $i/180: Service not responding yet. Retrying in 10s..."
            sleep 10
          done

          # Fail if still not up after 30 min
          if ! nc -z localhost 8080; then
            echo "❌ Timed out waiting for web app on port 8080"
            exit 1
          fi
        env:
          SSH_KEY: ${{ secrets.SSH_KEY }}

      - name: Run Cypress Tests
        working-directory: app/web
        run: |
          export VITE_AUTH0_USERNAME="${{ secrets.VITE_AUTH0_USERNAME }}"
          export VITE_AUTH0_PASSWORD="${{ secrets.VITE_AUTH0_PASSWORD }}"
          export VITE_SI_CYPRESS_MULTIPLIER="${{ vars.VITE_SI_CYPRESS_MULTIPLIER }}"
          export VITE_SI_WORKSPACE_URL="${{ vars.VITE_SI_WORKSPACE_URL }}"
          export VITE_HOST_URL="${{ vars.VITE_SI_WORKSPACE_URL }}"
          export VITE_SI_WORKSPACE_ID="${{ vars.VITE_SI_WORKSPACE_ID }}"
          VITE_UUID="$(uuid)"
          export VITE_UUID
          export VITE_AUTH_API_URL="https://auth-api.systeminit.com"
          export VITE_AUTH_PORTAL_URL="https://auth.systeminit.com"

          n=0
          max_retries=3
          
          until [ $n -ge $max_retries ]; do
            unset exit_code || echo "exit_code not set"
            npx cypress run --spec "${{ inputs.test_dir }}/${{ matrix.tests }}/**" || exit_code=$?
            if [ -z "$exit_code" ]; then
              echo "Cypress Test task succeeded!"
              break
            fi
            n=$((n+1))
            echo "Attempt $n/$max_retries failed with exit code $exit_code! Retrying..."
          done

          if [ $n -ge $max_retries ]; then
            echo "All $max_retries attempts failed."
            exit 1
          fi

      - name: 'Upload Cypress Recordings to Github'
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: cypress-recordings-run-${{ matrix.tests }}
          path: app/web/cypress/videos/**/*.mp4
          retention-days: 5

      - name: Check Test Results
        if: failure()
        run: exit 1

  on-failure:
    runs-on: ubuntu-latest
    needs: cypress-tests
    environment: ${{ inputs.environment }}
    if: failure()
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      - run: |     
          has_artifacts=false
          for marker in artifacts/*/*.mp4; do
            if [ -f "$marker" ]; then
              echo "Artifact detected for failed test: $marker"
              has_artifacts=true
              break
            fi
          done
          if [ "$has_artifacts" = true ] && [ "${{ github.ref_name }}" = "main" ]; then
            curl --location "${{ secrets.FIREHYDRANT_WEBHOOK_URL }}" \
              --header "Content-Type: application/json" \
              --data "{
                \"summary\": \"E2E ${{ inputs.environment }} Tests Fail\",
                \"body\": \"E2E Tests have failed for ${{ inputs.environment }}.\",
                \"links\": [
                  {
                    \"href\": \"https://github.com/systeminit/si/actions/runs/$GITHUB_RUN_ID\",
                    \"text\": \"E2E Test Run ${{ inputs.environment }}\"
                  }
                ],
                \"tags\": [
                  \"service:github\"
                ]
              }"
          fi

      - run: |
          curl -X POST \
          --header 'Content-type: application/json' \
          --data "{\"text\": \":si: Failed Cypress E2E Test for ${{ inputs.environment }}: <https://github.com/systeminit/si/actions/runs/$GITHUB_RUN_ID|:test_tube: Link>\"}" \
          ${{ secrets.SLACK_WEBHOOK_URL }}
