# coding: utf-8

"""
    System Initiative API

    The API Server for interacting with a System Initiative workspace

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class PropSchemaV1(BaseModel):
    """
    PropSchemaV1
    """ # noqa: E501
    children: Optional[List[PropSchemaV1]] = None
    default_value: Optional[Any] = Field(default=None, alias="defaultValue")
    description: Optional[StrictStr] = None
    doc_link: Optional[StrictStr] = Field(default=None, alias="docLink")
    hidden: Optional[StrictBool] = None
    name: StrictStr
    prop_id: StrictStr = Field(alias="propId")
    prop_type: StrictStr = Field(alias="propType")
    validation_format: Optional[StrictStr] = Field(default=None, alias="validationFormat")
    __properties: ClassVar[List[str]] = ["children", "defaultValue", "description", "docLink", "hidden", "name", "propId", "propType", "validationFormat"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PropSchemaV1 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in children (list)
        _items = []
        if self.children:
            for _item_children in self.children:
                if _item_children:
                    _items.append(_item_children.to_dict())
            _dict['children'] = _items
        # set to None if children (nullable) is None
        # and model_fields_set contains the field
        if self.children is None and "children" in self.model_fields_set:
            _dict['children'] = None

        # set to None if default_value (nullable) is None
        # and model_fields_set contains the field
        if self.default_value is None and "default_value" in self.model_fields_set:
            _dict['defaultValue'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if doc_link (nullable) is None
        # and model_fields_set contains the field
        if self.doc_link is None and "doc_link" in self.model_fields_set:
            _dict['docLink'] = None

        # set to None if hidden (nullable) is None
        # and model_fields_set contains the field
        if self.hidden is None and "hidden" in self.model_fields_set:
            _dict['hidden'] = None

        # set to None if validation_format (nullable) is None
        # and model_fields_set contains the field
        if self.validation_format is None and "validation_format" in self.model_fields_set:
            _dict['validationFormat'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PropSchemaV1 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "children": [PropSchemaV1.from_dict(_item) for _item in obj["children"]] if obj.get("children") is not None else None,
            "defaultValue": obj.get("defaultValue"),
            "description": obj.get("description"),
            "docLink": obj.get("docLink"),
            "hidden": obj.get("hidden"),
            "name": obj.get("name"),
            "propId": obj.get("propId"),
            "propType": obj.get("propType"),
            "validationFormat": obj.get("validationFormat")
        })
        return _obj

# TODO: Rewrite to not use raise_errors
PropSchemaV1.model_rebuild(raise_errors=False)

