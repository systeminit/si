# coding: utf-8

"""
    System Initiative API

    The API Server for interacting with a System Initiative workspace

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from system_initiative_api_client.models.func_run_log_view_v1 import FuncRunLogViewV1
from typing import Optional, Set
from typing_extensions import Self

class FuncRunViewV1(BaseModel):
    """
    FuncRunViewV1
    """ # noqa: E501
    action_display_name: StrictStr = Field(alias="actionDisplayName")
    action_id: StrictStr = Field(alias="actionId")
    action_kind: StrictStr = Field(alias="actionKind")
    action_originating_change_set_id: StrictStr = Field(alias="actionOriginatingChangeSetId")
    action_originating_change_set_name: StrictStr = Field(alias="actionOriginatingChangeSetName")
    action_prototype_id: StrictStr = Field(alias="actionPrototypeId")
    action_result_state: StrictStr = Field(alias="actionResultState")
    attribute_value_id: StrictStr = Field(alias="attributeValueId")
    backend_kind: StrictStr = Field(alias="backendKind")
    backend_response_type: StrictStr = Field(alias="backendResponseType")
    component_id: StrictStr = Field(alias="componentId")
    component_name: StrictStr = Field(alias="componentName")
    created_at: StrictStr = Field(alias="createdAt")
    function_args: Optional[Any] = Field(alias="functionArgs")
    function_code_base64: StrictStr = Field(alias="functionCodeBase64")
    function_description: StrictStr = Field(alias="functionDescription")
    function_display_name: StrictStr = Field(alias="functionDisplayName")
    function_kind: StrictStr = Field(alias="functionKind")
    function_link: StrictStr = Field(alias="functionLink")
    function_name: StrictStr = Field(alias="functionName")
    id: StrictStr
    logs: Optional[FuncRunLogViewV1] = None
    result_value: Optional[Any] = Field(default=None, alias="resultValue")
    schema_name: StrictStr = Field(alias="schemaName")
    state: StrictStr
    updated_at: StrictStr = Field(alias="updatedAt")
    __properties: ClassVar[List[str]] = ["actionDisplayName", "actionId", "actionKind", "actionOriginatingChangeSetId", "actionOriginatingChangeSetName", "actionPrototypeId", "actionResultState", "attributeValueId", "backendKind", "backendResponseType", "componentId", "componentName", "createdAt", "functionArgs", "functionCodeBase64", "functionDescription", "functionDisplayName", "functionKind", "functionLink", "functionName", "id", "logs", "resultValue", "schemaName", "state", "updatedAt"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FuncRunViewV1 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of logs
        if self.logs:
            _dict['logs'] = self.logs.to_dict()
        # set to None if function_args (nullable) is None
        # and model_fields_set contains the field
        if self.function_args is None and "function_args" in self.model_fields_set:
            _dict['functionArgs'] = None

        # set to None if logs (nullable) is None
        # and model_fields_set contains the field
        if self.logs is None and "logs" in self.model_fields_set:
            _dict['logs'] = None

        # set to None if result_value (nullable) is None
        # and model_fields_set contains the field
        if self.result_value is None and "result_value" in self.model_fields_set:
            _dict['resultValue'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FuncRunViewV1 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "actionDisplayName": obj.get("actionDisplayName"),
            "actionId": obj.get("actionId"),
            "actionKind": obj.get("actionKind"),
            "actionOriginatingChangeSetId": obj.get("actionOriginatingChangeSetId"),
            "actionOriginatingChangeSetName": obj.get("actionOriginatingChangeSetName"),
            "actionPrototypeId": obj.get("actionPrototypeId"),
            "actionResultState": obj.get("actionResultState"),
            "attributeValueId": obj.get("attributeValueId"),
            "backendKind": obj.get("backendKind"),
            "backendResponseType": obj.get("backendResponseType"),
            "componentId": obj.get("componentId"),
            "componentName": obj.get("componentName"),
            "createdAt": obj.get("createdAt"),
            "functionArgs": obj.get("functionArgs"),
            "functionCodeBase64": obj.get("functionCodeBase64"),
            "functionDescription": obj.get("functionDescription"),
            "functionDisplayName": obj.get("functionDisplayName"),
            "functionKind": obj.get("functionKind"),
            "functionLink": obj.get("functionLink"),
            "functionName": obj.get("functionName"),
            "id": obj.get("id"),
            "logs": FuncRunLogViewV1.from_dict(obj["logs"]) if obj.get("logs") is not None else None,
            "resultValue": obj.get("resultValue"),
            "schemaName": obj.get("schemaName"),
            "state": obj.get("state"),
            "updatedAt": obj.get("updatedAt")
        })
        return _obj


