# coding: utf-8

"""
    System Initiative API

    The API Server for interacting with a System Initiative workspace

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from system_initiative_api_client.models.creator_user import CreatorUser
from typing import Optional, Set
from typing_extensions import Self

class Workspace(BaseModel):
    """
    Workspace
    """ # noqa: E501
    approvals_enabled: StrictBool = Field(alias="approvalsEnabled")
    creator_user: Optional[CreatorUser] = Field(default=None, alias="creatorUser")
    creator_user_id: StrictStr = Field(alias="creatorUserId")
    description: Optional[StrictStr] = None
    display_name: StrictStr = Field(alias="displayName")
    id: StrictStr
    instance_env_type: StrictStr = Field(alias="instanceEnvType")
    instance_url: Optional[StrictStr] = Field(default=None, alias="instanceUrl")
    is_default: StrictBool = Field(alias="isDefault")
    quarantined_at: Optional[StrictStr] = Field(default=None, alias="quarantinedAt")
    role: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["approvalsEnabled", "creatorUser", "creatorUserId", "description", "displayName", "id", "instanceEnvType", "instanceUrl", "isDefault", "quarantinedAt", "role"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Workspace from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of creator_user
        if self.creator_user:
            _dict['creatorUser'] = self.creator_user.to_dict()
        # set to None if creator_user (nullable) is None
        # and model_fields_set contains the field
        if self.creator_user is None and "creator_user" in self.model_fields_set:
            _dict['creatorUser'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if instance_url (nullable) is None
        # and model_fields_set contains the field
        if self.instance_url is None and "instance_url" in self.model_fields_set:
            _dict['instanceUrl'] = None

        # set to None if quarantined_at (nullable) is None
        # and model_fields_set contains the field
        if self.quarantined_at is None and "quarantined_at" in self.model_fields_set:
            _dict['quarantinedAt'] = None

        # set to None if role (nullable) is None
        # and model_fields_set contains the field
        if self.role is None and "role" in self.model_fields_set:
            _dict['role'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Workspace from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "approvalsEnabled": obj.get("approvalsEnabled"),
            "creatorUser": CreatorUser.from_dict(obj["creatorUser"]) if obj.get("creatorUser") is not None else None,
            "creatorUserId": obj.get("creatorUserId"),
            "description": obj.get("description"),
            "displayName": obj.get("displayName"),
            "id": obj.get("id"),
            "instanceEnvType": obj.get("instanceEnvType"),
            "instanceUrl": obj.get("instanceUrl"),
            "isDefault": obj.get("isDefault"),
            "quarantinedAt": obj.get("quarantinedAt"),
            "role": obj.get("role")
        })
        return _obj


