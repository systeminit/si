# coding: utf-8

"""
    System Initiative API

    The API Server for interacting with a System Initiative workspace

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from system_initiative_api_client.api.schemas_api import SchemasApi


class TestSchemasApi(unittest.TestCase):
    """SchemasApi unit test stubs"""

    def setUp(self) -> None:
        self.api = SchemasApi()

    def tearDown(self) -> None:
        pass

    def test_create_schema(self) -> None:
        """Test case for create_schema

        Create a schema and it's default variant
        """
        pass

    def test_create_variant_action(self) -> None:
        """Test case for create_variant_action

        Create an action function and attach to a schema variant
        """
        pass

    def test_create_variant_authentication(self) -> None:
        """Test case for create_variant_authentication

        Create an authentication function and attach to a schema variant
        """
        pass

    def test_create_variant_codegen(self) -> None:
        """Test case for create_variant_codegen

        Create a codegen function and attach to a schema variant
        """
        pass

    def test_create_variant_management(self) -> None:
        """Test case for create_variant_management

        Create a management function and attach to a schema variant
        """
        pass

    def test_create_variant_qualification(self) -> None:
        """Test case for create_variant_qualification

        Create a qualification and attach to a schema variant
        """
        pass

    def test_find_schema(self) -> None:
        """Test case for find_schema

        Find schema by name or schema id
        """
        pass

    def test_get_default_variant(self) -> None:
        """Test case for get_default_variant

        Get the default variant for a schema id
        """
        pass

    def test_get_schema(self) -> None:
        """Test case for get_schema

        Get a schema by schema id
        """
        pass

    def test_get_variant(self) -> None:
        """Test case for get_variant

        Get a schema variant by schema id and schema variant id
        """
        pass

    def test_list_schemas(self) -> None:
        """Test case for list_schemas

        List all schemas (paginated endpoint)
        """
        pass

    def test_unlock_schema(self) -> None:
        """Test case for unlock_schema

        Unlocks a schema - if there's already an unlocked variant, then we return that
        """
        pass

    def test_update_schema_variant(self) -> None:
        """Test case for update_schema_variant

        Update the schema variant and regenerate
        """
        pass


if __name__ == '__main__':
    unittest.main()
