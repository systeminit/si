load(
    "@prelude-si//:macros.bzl",
    "alias",
    "export_file",
    "nix_omnibus_pkg",
)
load(
    "@prelude-si//:deno.bzl",
    "deno_cache",
    "deno_compile",
    "deno_format",
    "deno_run",
    "deno_test",
)

export_file(
    name = "deno.json",
)

alias(
    name = "lang-js",
    actual = ":bin"
)

deno_cache(
  name = "cache",
  srcs = glob(["src/**/*.ts"])
)

# this builds bundle.js so it can be used at runtime by function execution
deno_run(
    name = "build",
    main = "src/build.ts",
    out = "src/bundle.js",
    srcs = [
        ":cache",
        "//:deno_workspace"
    ] +
    glob([
        "src/**/sandbox.ts",
        "src/**/build.ts",
        "src/sandbox/*.ts",
    ]),
    permissions = [
        "allow-all",
    ],
    visibility = ["PUBLIC"],
)

deno_compile(
    name = "bin",
    main = "src/index.ts",
    out = "lang-js",
    srcs = glob([
        "src/**/*.ts",
        "src/**/*.js",
    ]),
    extra_srcs = [
      ":build"
    ],
    permissions = [
        "allow-all",
    ],
    unstable_flags = [
        "node-globals"
    ],
    visibility = ["PUBLIC"],
)

deno_format(
    name = "fix-format",
    srcs = glob(["**/*.ts", "**/*.js"]),
    ignore = ["node_modules"],
)

deno_format(
    name = "check-format",
    srcs = glob(["**/*.ts", "**/*.js"]),
    check = True,
)

deno_test(
    name = "test-unit",
    srcs = glob(["**/tests/*.spec.ts"]),
    ignore = ["node_modules"],
    permissions = [
        "allow-all",
    ],
    unstable_flags = [
        "worker-options",
    ],
)

nix_omnibus_pkg(
    name = "omnibus",
    pkg_name = "lang-js",
    build_dep = "//bin/lang-js:bin",
    srcs = {
        "//:deno.json": ".",
        "//:flake.nix": ".",
        "//:flake.lock": ".",
        "//:rust-toolchain": ".",
    }
)
