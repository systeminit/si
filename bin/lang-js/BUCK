load(
    "@prelude-si//:macros.bzl",
    "alias",
    "export_file",
    "nix_omnibus_pkg",
)
load(
    "@prelude-si//:deno.bzl",
    "deno_compile",
    "deno_format",
    "deno_run",
    "deno_test",
)

export_file(
    name = "deno.json",
)

alias(
    name = "lang-js",
    actual = ":bin"
)

filegroup(
    name = "srcs",
    srcs = glob([
        "**/*",
    ]),
    visibility = ["PUBLIC"],
)

# this builds bundle.js so it can be used at runtime by function execution
deno_run(
    name = "build",
    main = "src/build.ts",
    out = "bundle.js",
    srcs =glob(["src/**/*.ts"]),
    permissions = [
        "allow-all",
    ],
    deno_cache = "//:deno_workspace",
    visibility = ["PUBLIC"],
)

deno_compile(
    name = "bin",
    main = "src/index.ts",
    out = "lang-js",
    srcs = [":build"] + glob(["src/**/*.ts"]),
    include = [":build"],
    permissions = [
        "allow-all",
    ],
    unstable_flags = [
        "node-globals"
    ],
    deno_cache = "//:deno_workspace",
    visibility = ["PUBLIC"],
)

deno_format(
    name = "fix-format",
    srcs = glob(["**/*.ts", "**/*.js"]),
    ignore = ["node_modules"],
)

deno_format(
    name = "check-format",
    srcs = glob(["**/*.ts", "**/*.js"]),
    check = True,
)

deno_test(
    name = "test-unit",
    srcs = glob(["**/tests/*.spec.ts"]),
    ignore = ["node_modules"],
    permissions = [
        "allow-all",
    ],
    unstable_flags = [
        "worker-options",
    ],
)

nix_omnibus_pkg(
    name = "omnibus",
    pkg_name = "lang-js",
    build_dep = "//bin/lang-js:bin",
    srcs = {
        "//:deno.json": ".",
        "//:flake.nix": ".",
        "//:flake.lock": ".",
        "//:rust-toolchain": ".",
    }
)
