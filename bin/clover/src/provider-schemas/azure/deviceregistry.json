{
  "swagger": "2.0",
  "info": {
    "title": "Azure deviceregistry",
    "version": "2025-10-01",
    "description": "Azure deviceregistry service specifications"
  },
  "host": "management.azure.com",
  "schemes": [
    "https"
  ],
  "paths": {
    "/providers/Microsoft.DeviceRegistry/operations": {
      "get": {
        "operationId": "Operations_List",
        "tags": [
          "Operations"
        ],
        "description": "List the operations for the provider",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "type": "object",
              "description": "A list of REST API operations supported by an Azure Resource Provider. It contains an URL link to get the next set of results.",
              "properties": {
                "value": {
                  "type": "array",
                  "description": "List of operations supported by the resource provider",
                  "items": {
                    "type": "object",
                    "title": "REST API Operation",
                    "description": "Details of a REST API operation, returned from the Resource Provider Operations API",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "The name of the operation, as per Resource-Based Access Control (RBAC). Examples: \"Microsoft.Compute/virtualMachines/write\", \"Microsoft.Compute/virtualMachines/capture/action\"",
                        "readOnly": true
                      },
                      "isDataAction": {
                        "type": "boolean",
                        "description": "Whether the operation applies to data-plane. This is \"true\" for data-plane operations and \"false\" for ARM/control-plane operations.",
                        "readOnly": true
                      },
                      "display": {
                        "type": "object",
                        "description": "Localized display information for this particular operation.",
                        "properties": {
                          "provider": {
                            "type": "string",
                            "description": "The localized friendly form of the resource provider name, e.g. \"Microsoft Monitoring Insights\" or \"Microsoft Compute\".",
                            "readOnly": true
                          },
                          "resource": {
                            "type": "string",
                            "description": "The localized friendly name of the resource type related to this operation. E.g. \"Virtual Machines\" or \"Job Schedule Collections\".",
                            "readOnly": true
                          },
                          "operation": {
                            "type": "string",
                            "description": "The concise, localized friendly name for the operation; suitable for dropdowns. E.g. \"Create or Update Virtual Machine\", \"Restart Virtual Machine\".",
                            "readOnly": true
                          },
                          "description": {
                            "type": "string",
                            "description": "The short, localized friendly description of the operation; suitable for tool tips and detailed views.",
                            "readOnly": true
                          }
                        }
                      },
                      "origin": {
                        "type": "string",
                        "description": "The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit logs UX. Default value is \"user,system\"",
                        "enum": [
                          "user",
                          "system",
                          "user,system"
                        ],
                        "x-ms-enum": {
                          "name": "Origin",
                          "modelAsString": true
                        },
                        "readOnly": true
                      },
                      "actionType": {
                        "type": "string",
                        "description": "Enum. Indicates the action type. \"Internal\" refers to actions that are for internal only APIs.",
                        "enum": [
                          "Internal"
                        ],
                        "x-ms-enum": {
                          "name": "ActionType",
                          "modelAsString": true
                        },
                        "readOnly": true
                      }
                    }
                  },
                  "readOnly": true,
                  "x-ms-identifiers": [
                    "name"
                  ]
                },
                "nextLink": {
                  "type": "string",
                  "format": "uri",
                  "description": "URL to get the next set of operation list results (if there are any).",
                  "readOnly": true
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.DeviceRegistry/assetEndpointProfiles": {
      "get": {
        "operationId": "AssetEndpointProfiles_ListBySubscription",
        "tags": [
          "AssetEndpointProfiles"
        ],
        "description": "List AssetEndpointProfile resources by subscription ID",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription. The value must be an UUID.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "type": "object",
              "description": "The response of a AssetEndpointProfile list operation.",
              "properties": {
                "value": {
                  "type": "array",
                  "description": "The AssetEndpointProfile items on this page",
                  "items": {
                    "type": "object",
                    "description": "Asset Endpoint Profile definition.",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "arm-id",
                        "description": "Fully qualified resource ID for the resource. E.g. \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}\"",
                        "readOnly": true
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the resource",
                        "readOnly": true
                      },
                      "type": {
                        "type": "string",
                        "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                        "readOnly": true
                      },
                      "systemData": {
                        "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                        "readOnly": true,
                        "type": "object",
                        "properties": {
                          "createdBy": {
                            "type": "string",
                            "description": "The identity that created the resource."
                          },
                          "createdByType": {
                            "type": "string",
                            "description": "The type of identity that created the resource.",
                            "enum": [
                              "User",
                              "Application",
                              "ManagedIdentity",
                              "Key"
                            ],
                            "x-ms-enum": {
                              "name": "createdByType",
                              "modelAsString": true
                            }
                          },
                          "createdAt": {
                            "type": "string",
                            "format": "date-time",
                            "description": "The timestamp of resource creation (UTC)."
                          },
                          "lastModifiedBy": {
                            "type": "string",
                            "description": "The identity that last modified the resource."
                          },
                          "lastModifiedByType": {
                            "type": "string",
                            "description": "The type of identity that last modified the resource.",
                            "enum": [
                              "User",
                              "Application",
                              "ManagedIdentity",
                              "Key"
                            ],
                            "x-ms-enum": {
                              "name": "createdByType",
                              "modelAsString": true
                            }
                          },
                          "lastModifiedAt": {
                            "type": "string",
                            "format": "date-time",
                            "description": "The timestamp of resource last modification (UTC)"
                          }
                        }
                      },
                      "tags": {
                        "type": "object",
                        "description": "Resource tags.",
                        "additionalProperties": {
                          "type": "string"
                        },
                        "x-ms-mutability": [
                          "read",
                          "create",
                          "update"
                        ]
                      },
                      "location": {
                        "type": "string",
                        "description": "The geo-location where the resource lives",
                        "x-ms-mutability": [
                          "read",
                          "create"
                        ]
                      },
                      "properties": {
                        "description": "The resource-specific properties for this resource.",
                        "x-ms-client-flatten": true,
                        "type": "object",
                        "properties": {
                          "uuid": {
                            "type": "string",
                            "description": "Globally unique, immutable, non-reusable id.",
                            "readOnly": true
                          },
                          "targetAddress": {
                            "type": "string",
                            "format": "uri",
                            "description": "The local valid URI specifying the network address/DNS name of a southbound device. The scheme part of the targetAddress URI specifies the type of the device. The additionalConfiguration field holds further connector type specific configuration."
                          },
                          "endpointProfileType": {
                            "type": "string",
                            "description": "Defines the configuration for the connector type that is being used with the endpoint profile."
                          },
                          "authentication": {
                            "description": "Defines the client authentication mechanism to the server.",
                            "type": "object",
                            "properties": {
                              "method": {
                                "type": "string",
                                "description": "Defines the method to authenticate the user of the client at the server.",
                                "default": "Certificate",
                                "enum": [
                                  "Anonymous",
                                  "Certificate",
                                  "UsernamePassword"
                                ],
                                "x-ms-enum": {
                                  "name": "AuthenticationMethod",
                                  "modelAsString": true,
                                  "values": [
                                    {
                                      "name": "Anonymous",
                                      "value": "Anonymous",
                                      "description": "The user authentication method is anonymous."
                                    },
                                    {
                                      "name": "Certificate",
                                      "value": "Certificate",
                                      "description": "The user authentication method is an x509 certificate."
                                    },
                                    {
                                      "name": "UsernamePassword",
                                      "value": "UsernamePassword",
                                      "description": "The user authentication method is a username and password."
                                    }
                                  ]
                                }
                              },
                              "usernamePasswordCredentials": {
                                "description": "Defines the username and password references when UsernamePassword user authentication mode is selected.",
                                "type": "object",
                                "properties": {
                                  "usernameSecretName": {
                                    "type": "string",
                                    "description": "The name of the secret containing the username."
                                  },
                                  "passwordSecretName": {
                                    "type": "string",
                                    "description": "The name of the secret containing the password."
                                  }
                                },
                                "required": [
                                  "usernameSecretName",
                                  "passwordSecretName"
                                ]
                              },
                              "x509Credentials": {
                                "description": "Defines the certificate reference when Certificate user authentication mode is selected.",
                                "type": "object",
                                "properties": {
                                  "certificateSecretName": {
                                    "type": "string",
                                    "description": "The name of the secret containing the certificate and private key (e.g. stored as .der/.pem or .der/.pfx)."
                                  }
                                },
                                "required": [
                                  "certificateSecretName"
                                ]
                              }
                            },
                            "required": [
                              "method"
                            ]
                          },
                          "additionalConfiguration": {
                            "type": "string",
                            "description": "Stringified JSON that contains connectivity type specific further configuration (e.g. OPC UA, Modbus, ONVIF)."
                          },
                          "discoveredAssetEndpointProfileRef": {
                            "type": "string",
                            "description": "Reference to a discovered asset endpoint profile. Populated only if the asset endpoint profile has been created from discovery flow. Discovered asset endpoint profile name must be provided.",
                            "x-ms-mutability": [
                              "read",
                              "create"
                            ]
                          },
                          "status": {
                            "description": "Read only object to reflect changes that have occurred on the Edge. Similar to Kubernetes status property for custom resources.",
                            "readOnly": true,
                            "type": "object",
                            "properties": {
                              "errors": {
                                "type": "array",
                                "description": "Array object to transfer and persist errors that originate from the Edge.",
                                "items": {
                                  "type": "object",
                                  "description": "Defines the asset endpoint profile status error properties.",
                                  "properties": {
                                    "code": {
                                      "type": "integer",
                                      "format": "int32",
                                      "description": "Error code for classification of errors (ex: 400, 404, 500, etc.).",
                                      "readOnly": true
                                    },
                                    "message": {
                                      "type": "string",
                                      "description": "Human readable helpful error message to provide additional context for error (ex: “targetAddress 'foo' is not a valid url”).",
                                      "readOnly": true
                                    }
                                  }
                                },
                                "readOnly": true,
                                "x-ms-identifiers": []
                              }
                            }
                          },
                          "provisioningState": {
                            "description": "Provisioning state of the resource.",
                            "readOnly": true,
                            "type": "string",
                            "enum": [
                              "Succeeded",
                              "Failed",
                              "Canceled",
                              "Accepted",
                              "Deleting"
                            ],
                            "x-ms-enum": {
                              "name": "ProvisioningState",
                              "modelAsString": true,
                              "values": [
                                {
                                  "name": "Succeeded",
                                  "value": "Succeeded",
                                  "description": "Resource has been created."
                                },
                                {
                                  "name": "Failed",
                                  "value": "Failed",
                                  "description": "Resource creation failed."
                                },
                                {
                                  "name": "Canceled",
                                  "value": "Canceled",
                                  "description": "Resource creation was canceled."
                                },
                                {
                                  "name": "Accepted",
                                  "value": "Accepted",
                                  "description": "Resource has been accepted by the server."
                                },
                                {
                                  "name": "Deleting",
                                  "value": "Deleting",
                                  "description": "Resource is deleting."
                                }
                              ]
                            }
                          }
                        },
                        "required": [
                          "targetAddress",
                          "endpointProfileType"
                        ]
                      },
                      "extendedLocation": {
                        "description": "The extended location.",
                        "x-ms-mutability": [
                          "read",
                          "create"
                        ],
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "description": "The extended location type."
                          },
                          "name": {
                            "type": "string",
                            "description": "The extended location name."
                          }
                        },
                        "required": [
                          "type",
                          "name"
                        ]
                      }
                    },
                    "required": [
                      "extendedLocation"
                    ]
                  }
                },
                "nextLink": {
                  "type": "string",
                  "format": "uri",
                  "description": "The link to the next page of items"
                }
              },
              "required": [
                "value"
              ]
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.DeviceRegistry/assets": {
      "get": {
        "operationId": "Assets_ListBySubscription",
        "tags": [
          "Assets"
        ],
        "description": "List Asset resources by subscription ID",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription. The value must be an UUID.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "type": "object",
              "description": "The response of a Asset list operation.",
              "properties": {
                "value": {
                  "type": "array",
                  "description": "The Asset items on this page",
                  "items": {
                    "type": "object",
                    "description": "Asset definition.",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "arm-id",
                        "description": "Fully qualified resource ID for the resource. E.g. \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}\"",
                        "readOnly": true
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the resource",
                        "readOnly": true
                      },
                      "type": {
                        "type": "string",
                        "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                        "readOnly": true
                      },
                      "systemData": {
                        "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                        "readOnly": true,
                        "type": "object",
                        "properties": {
                          "createdBy": {
                            "type": "string",
                            "description": "The identity that created the resource."
                          },
                          "createdByType": {
                            "type": "string",
                            "description": "The type of identity that created the resource.",
                            "enum": [
                              "User",
                              "Application",
                              "ManagedIdentity",
                              "Key"
                            ],
                            "x-ms-enum": {
                              "name": "createdByType",
                              "modelAsString": true
                            }
                          },
                          "createdAt": {
                            "type": "string",
                            "format": "date-time",
                            "description": "The timestamp of resource creation (UTC)."
                          },
                          "lastModifiedBy": {
                            "type": "string",
                            "description": "The identity that last modified the resource."
                          },
                          "lastModifiedByType": {
                            "type": "string",
                            "description": "The type of identity that last modified the resource.",
                            "enum": [
                              "User",
                              "Application",
                              "ManagedIdentity",
                              "Key"
                            ],
                            "x-ms-enum": {
                              "name": "createdByType",
                              "modelAsString": true
                            }
                          },
                          "lastModifiedAt": {
                            "type": "string",
                            "format": "date-time",
                            "description": "The timestamp of resource last modification (UTC)"
                          }
                        }
                      },
                      "tags": {
                        "type": "object",
                        "description": "Resource tags.",
                        "additionalProperties": {
                          "type": "string"
                        },
                        "x-ms-mutability": [
                          "read",
                          "create",
                          "update"
                        ]
                      },
                      "location": {
                        "type": "string",
                        "description": "The geo-location where the resource lives",
                        "x-ms-mutability": [
                          "read",
                          "create"
                        ]
                      },
                      "properties": {
                        "description": "The resource-specific properties for this resource.",
                        "x-ms-client-flatten": true,
                        "type": "object",
                        "properties": {
                          "uuid": {
                            "type": "string",
                            "description": "Globally unique, immutable, non-reusable id.",
                            "readOnly": true
                          },
                          "enabled": {
                            "type": "boolean",
                            "description": "Enabled/Disabled status of the asset."
                          },
                          "externalAssetId": {
                            "type": "string",
                            "description": "Asset id provided by the customer.",
                            "x-ms-mutability": [
                              "read",
                              "create"
                            ]
                          },
                          "displayName": {
                            "type": "string",
                            "description": "Human-readable display name."
                          },
                          "description": {
                            "type": "string",
                            "description": "Human-readable description of the asset."
                          },
                          "assetEndpointProfileRef": {
                            "type": "string",
                            "description": "A reference to the asset endpoint profile (connection information) used by brokers to connect to an endpoint that provides data points for this asset. Must provide asset endpoint profile name.",
                            "x-ms-mutability": [
                              "read",
                              "create"
                            ]
                          },
                          "version": {
                            "type": "integer",
                            "format": "int64",
                            "description": "An integer that is incremented each time the resource is modified.",
                            "readOnly": true
                          },
                          "manufacturer": {
                            "type": "string",
                            "description": "Asset manufacturer name."
                          },
                          "manufacturerUri": {
                            "type": "string",
                            "description": "Asset manufacturer URI."
                          },
                          "model": {
                            "type": "string",
                            "description": "Asset model name."
                          },
                          "productCode": {
                            "type": "string",
                            "description": "Asset product code."
                          },
                          "hardwareRevision": {
                            "type": "string",
                            "description": "Revision number of the hardware."
                          },
                          "softwareRevision": {
                            "type": "string",
                            "description": "Revision number of the software."
                          },
                          "documentationUri": {
                            "type": "string",
                            "description": "Reference to the documentation."
                          },
                          "serialNumber": {
                            "type": "string",
                            "description": "Asset serial number."
                          },
                          "attributes": {
                            "type": "object",
                            "description": "A set of key-value pairs that contain custom attributes set by the customer.",
                            "additionalProperties": {}
                          },
                          "discoveredAssetRefs": {
                            "type": "array",
                            "description": "Reference to a list of discovered assets. Populated only if the asset has been created from discovery flow. Discovered asset names must be provided.",
                            "items": {
                              "type": "string"
                            },
                            "x-ms-mutability": [
                              "read",
                              "create"
                            ]
                          },
                          "defaultDatasetsConfiguration": {
                            "type": "string",
                            "description": "Stringified JSON that contains connector-specific default configuration for all datasets. Each dataset can have its own configuration that overrides the default settings here."
                          },
                          "defaultEventsConfiguration": {
                            "type": "string",
                            "description": "Stringified JSON that contains connector-specific default configuration for all events. Each event can have its own configuration that overrides the default settings here."
                          },
                          "defaultTopic": {
                            "description": "Object that describes the default topic information for the asset.",
                            "type": "object",
                            "properties": {
                              "path": {
                                "type": "string",
                                "description": "The topic path for messages published to an MQTT broker."
                              },
                              "retain": {
                                "type": "string",
                                "description": "When set to 'Keep', messages published to an MQTT broker will have the retain flag set. Default: 'Never'.",
                                "default": "Never",
                                "enum": [
                                  "Keep",
                                  "Never"
                                ],
                                "x-ms-enum": {
                                  "name": "TopicRetainType",
                                  "modelAsString": true,
                                  "values": [
                                    {
                                      "name": "Keep",
                                      "value": "Keep",
                                      "description": "Retain the messages."
                                    },
                                    {
                                      "name": "Never",
                                      "value": "Never",
                                      "description": "Never retain messages."
                                    }
                                  ]
                                }
                              }
                            },
                            "required": [
                              "path"
                            ]
                          },
                          "datasets": {
                            "type": "array",
                            "description": "Array of datasets that are part of the asset. Each dataset describes the data points that make up the set.",
                            "items": {
                              "type": "object",
                              "description": "Defines the dataset properties.",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "Name of the dataset."
                                },
                                "datasetConfiguration": {
                                  "type": "string",
                                  "description": "Stringified JSON that contains connector-specific JSON string that describes configuration for the specific dataset."
                                },
                                "topic": {
                                  "description": "Object that describes the topic information for the specific dataset.",
                                  "type": "object",
                                  "properties": {
                                    "path": {
                                      "type": "string",
                                      "description": "The topic path for messages published to an MQTT broker."
                                    },
                                    "retain": {
                                      "type": "string",
                                      "description": "When set to 'Keep', messages published to an MQTT broker will have the retain flag set. Default: 'Never'.",
                                      "default": "Never",
                                      "enum": [
                                        "Keep",
                                        "Never"
                                      ],
                                      "x-ms-enum": {
                                        "name": "TopicRetainType",
                                        "modelAsString": true,
                                        "values": [
                                          {
                                            "name": "Keep",
                                            "value": "Keep",
                                            "description": "Retain the messages."
                                          },
                                          {
                                            "name": "Never",
                                            "value": "Never",
                                            "description": "Never retain messages."
                                          }
                                        ]
                                      }
                                    }
                                  },
                                  "required": [
                                    "path"
                                  ]
                                },
                                "dataPoints": {
                                  "type": "array",
                                  "description": "Array of data points that are part of the dataset. Each data point can have per-data point configuration.",
                                  "items": {
                                    "type": "object",
                                    "description": "Defines the data point properties.",
                                    "properties": {
                                      "name": {
                                        "type": "string",
                                        "description": "The name of the data point."
                                      },
                                      "dataSource": {
                                        "type": "string",
                                        "description": "The address of the source of the data in the asset (e.g. URL) so that a client can access the data source on the asset."
                                      },
                                      "dataPointConfiguration": {
                                        "type": "string",
                                        "description": "Stringified JSON that contains connector-specific configuration for the data point. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize."
                                      },
                                      "observabilityMode": {
                                        "type": "string",
                                        "description": "An indication of how the data point should be mapped to OpenTelemetry.",
                                        "default": "None",
                                        "enum": [
                                          "None",
                                          "Counter",
                                          "Gauge",
                                          "Histogram",
                                          "Log"
                                        ],
                                        "x-ms-enum": {
                                          "name": "DataPointObservabilityMode",
                                          "modelAsString": true,
                                          "values": [
                                            {
                                              "name": "None",
                                              "value": "None",
                                              "description": "No mapping to OpenTelemetry."
                                            },
                                            {
                                              "name": "Counter",
                                              "value": "Counter",
                                              "description": "Map as counter to OpenTelemetry."
                                            },
                                            {
                                              "name": "Gauge",
                                              "value": "Gauge",
                                              "description": "Map as gauge to OpenTelemetry."
                                            },
                                            {
                                              "name": "Histogram",
                                              "value": "Histogram",
                                              "description": "Map as histogram to OpenTelemetry."
                                            },
                                            {
                                              "name": "Log",
                                              "value": "Log",
                                              "description": "Map as log to OpenTelemetry."
                                            }
                                          ]
                                        }
                                      }
                                    }
                                  },
                                  "x-ms-identifiers": []
                                }
                              },
                              "required": [
                                "name"
                              ]
                            },
                            "x-ms-identifiers": []
                          },
                          "events": {
                            "type": "array",
                            "description": "Array of events that are part of the asset. Each event can have per-event configuration.",
                            "items": {
                              "type": "object",
                              "description": "Defines the event properties.",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "The name of the event."
                                },
                                "eventNotifier": {
                                  "type": "string",
                                  "description": "The address of the notifier of the event in the asset (e.g. URL) so that a client can access the event on the asset."
                                },
                                "eventConfiguration": {
                                  "type": "string",
                                  "description": "Stringified JSON that contains connector-specific configuration for the event. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize."
                                },
                                "topic": {
                                  "description": "Object that describes the topic information for the specific event.",
                                  "type": "object",
                                  "properties": {
                                    "path": {
                                      "type": "string",
                                      "description": "The topic path for messages published to an MQTT broker."
                                    },
                                    "retain": {
                                      "type": "string",
                                      "description": "When set to 'Keep', messages published to an MQTT broker will have the retain flag set. Default: 'Never'.",
                                      "default": "Never",
                                      "enum": [
                                        "Keep",
                                        "Never"
                                      ],
                                      "x-ms-enum": {
                                        "name": "TopicRetainType",
                                        "modelAsString": true,
                                        "values": [
                                          {
                                            "name": "Keep",
                                            "value": "Keep",
                                            "description": "Retain the messages."
                                          },
                                          {
                                            "name": "Never",
                                            "value": "Never",
                                            "description": "Never retain messages."
                                          }
                                        ]
                                      }
                                    }
                                  },
                                  "required": [
                                    "path"
                                  ]
                                },
                                "observabilityMode": {
                                  "type": "string",
                                  "description": "An indication of how the event should be mapped to OpenTelemetry.",
                                  "default": "None",
                                  "enum": [
                                    "None",
                                    "Log"
                                  ],
                                  "x-ms-enum": {
                                    "name": "EventObservabilityMode",
                                    "modelAsString": true,
                                    "values": [
                                      {
                                        "name": "None",
                                        "value": "None",
                                        "description": "No mapping to OpenTelemetry."
                                      },
                                      {
                                        "name": "Log",
                                        "value": "Log",
                                        "description": "Map as log to OpenTelemetry."
                                      }
                                    ]
                                  }
                                }
                              }
                            },
                            "x-ms-identifiers": []
                          },
                          "status": {
                            "description": "Read only object to reflect changes that have occurred on the Edge. Similar to Kubernetes status property for custom resources.",
                            "readOnly": true,
                            "type": "object",
                            "properties": {
                              "errors": {
                                "type": "array",
                                "description": "Array object to transfer and persist errors that originate from the Edge.",
                                "items": {
                                  "type": "object",
                                  "description": "Defines the asset status error properties.",
                                  "properties": {
                                    "code": {
                                      "type": "integer",
                                      "format": "int32",
                                      "description": "Error code for classification of errors (ex: 400, 404, 500, etc.).",
                                      "readOnly": true
                                    },
                                    "message": {
                                      "type": "string",
                                      "description": "Human readable helpful error message to provide additional context for error (ex: “capability Id 'foo' does not exist”).",
                                      "readOnly": true
                                    }
                                  }
                                },
                                "readOnly": true,
                                "x-ms-identifiers": []
                              },
                              "version": {
                                "type": "integer",
                                "format": "int64",
                                "description": "A read only incremental counter indicating the number of times the configuration has been modified from the perspective of the current actual (Edge) state of the Asset. Edge would be the only writer of this value and would sync back up to the cloud. In steady state, this should equal version.",
                                "readOnly": true
                              },
                              "datasets": {
                                "type": "array",
                                "description": "Array of dataset statuses that describe the status of each dataset.",
                                "items": {
                                  "type": "object",
                                  "description": "Defines the asset status dataset properties.",
                                  "properties": {
                                    "name": {
                                      "type": "string",
                                      "description": "The name of the dataset. Must be unique within the status.datasets array. This name is used to correlate between the spec and status dataset information.",
                                      "readOnly": true
                                    },
                                    "messageSchemaReference": {
                                      "description": "The message schema reference object.",
                                      "readOnly": true,
                                      "type": "object",
                                      "properties": {
                                        "schemaRegistryNamespace": {
                                          "type": "string",
                                          "description": "The message schema registry namespace.",
                                          "readOnly": true
                                        },
                                        "schemaName": {
                                          "type": "string",
                                          "description": "The message schema name.",
                                          "readOnly": true
                                        },
                                        "schemaVersion": {
                                          "type": "string",
                                          "description": "The message schema version.",
                                          "readOnly": true
                                        }
                                      },
                                      "required": [
                                        "schemaRegistryNamespace",
                                        "schemaName",
                                        "schemaVersion"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "name"
                                  ]
                                },
                                "readOnly": true,
                                "x-ms-identifiers": []
                              },
                              "events": {
                                "type": "array",
                                "description": "Array of event statuses that describe the status of each event.",
                                "items": {
                                  "type": "object",
                                  "description": "Defines the asset status event properties.",
                                  "properties": {
                                    "name": {
                                      "type": "string",
                                      "description": "The name of the event. Must be unique within the status.events array. This name is used to correlate between the spec and status event information.",
                                      "readOnly": true
                                    },
                                    "messageSchemaReference": {
                                      "description": "The message schema reference object.",
                                      "readOnly": true,
                                      "type": "object",
                                      "properties": {
                                        "schemaRegistryNamespace": {
                                          "type": "string",
                                          "description": "The message schema registry namespace.",
                                          "readOnly": true
                                        },
                                        "schemaName": {
                                          "type": "string",
                                          "description": "The message schema name.",
                                          "readOnly": true
                                        },
                                        "schemaVersion": {
                                          "type": "string",
                                          "description": "The message schema version.",
                                          "readOnly": true
                                        }
                                      },
                                      "required": [
                                        "schemaRegistryNamespace",
                                        "schemaName",
                                        "schemaVersion"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "name"
                                  ]
                                },
                                "readOnly": true,
                                "x-ms-identifiers": []
                              }
                            }
                          },
                          "provisioningState": {
                            "description": "Provisioning state of the resource.",
                            "readOnly": true,
                            "type": "string",
                            "enum": [
                              "Succeeded",
                              "Failed",
                              "Canceled",
                              "Accepted",
                              "Deleting"
                            ],
                            "x-ms-enum": {
                              "name": "ProvisioningState",
                              "modelAsString": true,
                              "values": [
                                {
                                  "name": "Succeeded",
                                  "value": "Succeeded",
                                  "description": "Resource has been created."
                                },
                                {
                                  "name": "Failed",
                                  "value": "Failed",
                                  "description": "Resource creation failed."
                                },
                                {
                                  "name": "Canceled",
                                  "value": "Canceled",
                                  "description": "Resource creation was canceled."
                                },
                                {
                                  "name": "Accepted",
                                  "value": "Accepted",
                                  "description": "Resource has been accepted by the server."
                                },
                                {
                                  "name": "Deleting",
                                  "value": "Deleting",
                                  "description": "Resource is deleting."
                                }
                              ]
                            }
                          }
                        },
                        "required": [
                          "assetEndpointProfileRef"
                        ]
                      },
                      "extendedLocation": {
                        "description": "The extended location.",
                        "x-ms-mutability": [
                          "read",
                          "create"
                        ],
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "description": "The extended location type."
                          },
                          "name": {
                            "type": "string",
                            "description": "The extended location name."
                          }
                        },
                        "required": [
                          "type",
                          "name"
                        ]
                      }
                    },
                    "required": [
                      "extendedLocation"
                    ]
                  }
                },
                "nextLink": {
                  "type": "string",
                  "format": "uri",
                  "description": "The link to the next page of items"
                }
              },
              "required": [
                "value"
              ]
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.DeviceRegistry/billingContainers": {
      "get": {
        "operationId": "BillingContainers_ListBySubscription",
        "tags": [
          "BillingContainers"
        ],
        "description": "List BillingContainer resources by subscription ID",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription. The value must be an UUID.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "type": "object",
              "description": "The response of a BillingContainer list operation.",
              "properties": {
                "value": {
                  "type": "array",
                  "description": "The BillingContainer items on this page",
                  "items": {
                    "type": "object",
                    "description": "billingContainer Model as Azure resource whose sole purpose is to keep track of billables resources under a subscription.",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "arm-id",
                        "description": "Fully qualified resource ID for the resource. E.g. \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}\"",
                        "readOnly": true
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the resource",
                        "readOnly": true
                      },
                      "type": {
                        "type": "string",
                        "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                        "readOnly": true
                      },
                      "systemData": {
                        "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                        "readOnly": true,
                        "type": "object",
                        "properties": {
                          "createdBy": {
                            "type": "string",
                            "description": "The identity that created the resource."
                          },
                          "createdByType": {
                            "type": "string",
                            "description": "The type of identity that created the resource.",
                            "enum": [
                              "User",
                              "Application",
                              "ManagedIdentity",
                              "Key"
                            ],
                            "x-ms-enum": {
                              "name": "createdByType",
                              "modelAsString": true
                            }
                          },
                          "createdAt": {
                            "type": "string",
                            "format": "date-time",
                            "description": "The timestamp of resource creation (UTC)."
                          },
                          "lastModifiedBy": {
                            "type": "string",
                            "description": "The identity that last modified the resource."
                          },
                          "lastModifiedByType": {
                            "type": "string",
                            "description": "The type of identity that last modified the resource.",
                            "enum": [
                              "User",
                              "Application",
                              "ManagedIdentity",
                              "Key"
                            ],
                            "x-ms-enum": {
                              "name": "createdByType",
                              "modelAsString": true
                            }
                          },
                          "lastModifiedAt": {
                            "type": "string",
                            "format": "date-time",
                            "description": "The timestamp of resource last modification (UTC)"
                          }
                        }
                      },
                      "properties": {
                        "description": "The resource-specific properties for this resource.",
                        "x-ms-client-flatten": true,
                        "type": "object",
                        "properties": {
                          "provisioningState": {
                            "description": "Provisioning state of the resource.",
                            "readOnly": true,
                            "type": "string",
                            "enum": [
                              "Succeeded",
                              "Failed",
                              "Canceled",
                              "Accepted",
                              "Deleting"
                            ],
                            "x-ms-enum": {
                              "name": "ProvisioningState",
                              "modelAsString": true,
                              "values": [
                                {
                                  "name": "Succeeded",
                                  "value": "Succeeded",
                                  "description": "Resource has been created."
                                },
                                {
                                  "name": "Failed",
                                  "value": "Failed",
                                  "description": "Resource creation failed."
                                },
                                {
                                  "name": "Canceled",
                                  "value": "Canceled",
                                  "description": "Resource creation was canceled."
                                },
                                {
                                  "name": "Accepted",
                                  "value": "Accepted",
                                  "description": "Resource has been accepted by the server."
                                },
                                {
                                  "name": "Deleting",
                                  "value": "Deleting",
                                  "description": "Resource is deleting."
                                }
                              ]
                            }
                          }
                        }
                      },
                      "etag": {
                        "type": "string",
                        "description": "Resource ETag",
                        "readOnly": true
                      }
                    }
                  }
                },
                "nextLink": {
                  "type": "string",
                  "format": "uri",
                  "description": "The link to the next page of items"
                }
              },
              "required": [
                "value"
              ]
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.DeviceRegistry/billingContainers/{billingContainerName}": {
      "get": {
        "operationId": "BillingContainers_Get",
        "tags": [
          "BillingContainers"
        ],
        "description": "Get a BillingContainer",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription. The value must be an UUID.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "billingContainerName",
            "in": "path",
            "description": "Name of the billing container.",
            "required": true,
            "type": "string",
            "minLength": 3,
            "maxLength": 64,
            "pattern": "^[0-9a-zA-Z][a-zA-Z0-9-]*$"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "type": "object",
              "description": "billingContainer Model as Azure resource whose sole purpose is to keep track of billables resources under a subscription.",
              "properties": {
                "id": {
                  "type": "string",
                  "format": "arm-id",
                  "description": "Fully qualified resource ID for the resource. E.g. \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}\"",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "description": "The name of the resource",
                  "readOnly": true
                },
                "type": {
                  "type": "string",
                  "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                  "readOnly": true
                },
                "systemData": {
                  "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                  "readOnly": true,
                  "type": "object",
                  "properties": {
                    "createdBy": {
                      "type": "string",
                      "description": "The identity that created the resource."
                    },
                    "createdByType": {
                      "type": "string",
                      "description": "The type of identity that created the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource creation (UTC)."
                    },
                    "lastModifiedBy": {
                      "type": "string",
                      "description": "The identity that last modified the resource."
                    },
                    "lastModifiedByType": {
                      "type": "string",
                      "description": "The type of identity that last modified the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "lastModifiedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource last modification (UTC)"
                    }
                  }
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "provisioningState": {
                      "description": "Provisioning state of the resource.",
                      "readOnly": true,
                      "type": "string",
                      "enum": [
                        "Succeeded",
                        "Failed",
                        "Canceled",
                        "Accepted",
                        "Deleting"
                      ],
                      "x-ms-enum": {
                        "name": "ProvisioningState",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Succeeded",
                            "value": "Succeeded",
                            "description": "Resource has been created."
                          },
                          {
                            "name": "Failed",
                            "value": "Failed",
                            "description": "Resource creation failed."
                          },
                          {
                            "name": "Canceled",
                            "value": "Canceled",
                            "description": "Resource creation was canceled."
                          },
                          {
                            "name": "Accepted",
                            "value": "Accepted",
                            "description": "Resource has been accepted by the server."
                          },
                          {
                            "name": "Deleting",
                            "value": "Deleting",
                            "description": "Resource is deleting."
                          }
                        ]
                      }
                    }
                  }
                },
                "etag": {
                  "type": "string",
                  "description": "Resource ETag",
                  "readOnly": true
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.DeviceRegistry/locations/{location}/operationStatuses/{operationId}": {
      "get": {
        "operationId": "OperationStatus_Get",
        "tags": [
          "OperationStatus"
        ],
        "description": "Returns the current status of an async operation.",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription. The value must be an UUID.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "location",
            "in": "path",
            "description": "The name of the Azure region.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "x-ms-parameter-location": "method"
          },
          {
            "name": "operationId",
            "in": "path",
            "description": "The ID of an ongoing async operation.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "$ref": "../../../../../common-types/resource-management/v5/types.json#/definitions/OperationStatusResult"
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.DeviceRegistry/namespaces": {
      "get": {
        "operationId": "Namespaces_ListBySubscription",
        "tags": [
          "Namespaces"
        ],
        "description": "List Namespace resources by subscription ID",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription. The value must be an UUID.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "type": "object",
              "description": "The response of a Namespace list operation.",
              "properties": {
                "value": {
                  "type": "array",
                  "description": "The Namespace items on this page",
                  "items": {
                    "type": "object",
                    "description": "Namespace definition.",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "arm-id",
                        "description": "Fully qualified resource ID for the resource. E.g. \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}\"",
                        "readOnly": true
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the resource",
                        "readOnly": true
                      },
                      "type": {
                        "type": "string",
                        "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                        "readOnly": true
                      },
                      "systemData": {
                        "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                        "readOnly": true,
                        "type": "object",
                        "properties": {
                          "createdBy": {
                            "type": "string",
                            "description": "The identity that created the resource."
                          },
                          "createdByType": {
                            "type": "string",
                            "description": "The type of identity that created the resource.",
                            "enum": [
                              "User",
                              "Application",
                              "ManagedIdentity",
                              "Key"
                            ],
                            "x-ms-enum": {
                              "name": "createdByType",
                              "modelAsString": true
                            }
                          },
                          "createdAt": {
                            "type": "string",
                            "format": "date-time",
                            "description": "The timestamp of resource creation (UTC)."
                          },
                          "lastModifiedBy": {
                            "type": "string",
                            "description": "The identity that last modified the resource."
                          },
                          "lastModifiedByType": {
                            "type": "string",
                            "description": "The type of identity that last modified the resource.",
                            "enum": [
                              "User",
                              "Application",
                              "ManagedIdentity",
                              "Key"
                            ],
                            "x-ms-enum": {
                              "name": "createdByType",
                              "modelAsString": true
                            }
                          },
                          "lastModifiedAt": {
                            "type": "string",
                            "format": "date-time",
                            "description": "The timestamp of resource last modification (UTC)"
                          }
                        }
                      },
                      "tags": {
                        "type": "object",
                        "description": "Resource tags.",
                        "additionalProperties": {
                          "type": "string"
                        },
                        "x-ms-mutability": [
                          "read",
                          "create",
                          "update"
                        ]
                      },
                      "location": {
                        "type": "string",
                        "description": "The geo-location where the resource lives",
                        "x-ms-mutability": [
                          "read",
                          "create"
                        ]
                      },
                      "properties": {
                        "description": "The resource-specific properties for this resource.",
                        "x-ms-client-flatten": true,
                        "type": "object",
                        "properties": {
                          "uuid": {
                            "type": "string",
                            "description": "Globally unique, immutable, non-reusable ID.",
                            "readOnly": true
                          },
                          "messaging": {
                            "description": "Assigned and unassigned messaging endpoints.",
                            "type": "object",
                            "properties": {
                              "endpoints": {
                                "type": "object",
                                "description": "Dictionary of messaging endpoints.",
                                "additionalProperties": {
                                  "type": "object",
                                  "description": "Namespace messaging endpoint model used by a device to connect to a service.",
                                  "properties": {
                                    "endpointType": {
                                      "type": "string",
                                      "description": "Type of connection used for messaging endpoint."
                                    },
                                    "address": {
                                      "type": "string",
                                      "description": "The endpoint address to connect to."
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "description": "The messaging endpoint Azure resource Id."
                                    }
                                  },
                                  "required": [
                                    "address"
                                  ]
                                }
                              }
                            }
                          },
                          "provisioningState": {
                            "description": "Provisioning state of the resource.",
                            "readOnly": true,
                            "type": "string",
                            "enum": [
                              "Succeeded",
                              "Failed",
                              "Canceled",
                              "Accepted",
                              "Deleting"
                            ],
                            "x-ms-enum": {
                              "name": "ProvisioningState",
                              "modelAsString": true,
                              "values": [
                                {
                                  "name": "Succeeded",
                                  "value": "Succeeded",
                                  "description": "Resource has been created."
                                },
                                {
                                  "name": "Failed",
                                  "value": "Failed",
                                  "description": "Resource creation failed."
                                },
                                {
                                  "name": "Canceled",
                                  "value": "Canceled",
                                  "description": "Resource creation was canceled."
                                },
                                {
                                  "name": "Accepted",
                                  "value": "Accepted",
                                  "description": "Resource has been accepted by the server."
                                },
                                {
                                  "name": "Deleting",
                                  "value": "Deleting",
                                  "description": "Resource is deleting."
                                }
                              ]
                            }
                          }
                        }
                      },
                      "identity": {
                        "description": "The managed service identities assigned to this resource.",
                        "type": "object",
                        "properties": {
                          "principalId": {
                            "type": "string",
                            "format": "uuid",
                            "description": "The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.",
                            "readOnly": true
                          },
                          "tenantId": {
                            "type": "string",
                            "format": "uuid",
                            "description": "The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.",
                            "readOnly": true
                          },
                          "type": {
                            "type": "string",
                            "description": "Type of managed service identity (either system assigned, or none).",
                            "enum": [
                              "None",
                              "SystemAssigned"
                            ],
                            "x-ms-enum": {
                              "name": "SystemAssignedServiceIdentityType",
                              "modelAsString": true
                            }
                          }
                        },
                        "required": [
                          "type"
                        ]
                      }
                    }
                  }
                },
                "nextLink": {
                  "type": "string",
                  "format": "uri",
                  "description": "The link to the next page of items"
                }
              },
              "required": [
                "value"
              ]
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.DeviceRegistry/schemaRegistries": {
      "get": {
        "operationId": "SchemaRegistries_ListBySubscription",
        "tags": [
          "SchemaRegistries"
        ],
        "description": "List SchemaRegistry resources by subscription ID",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription. The value must be an UUID.",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "type": "object",
              "description": "The response of a SchemaRegistry list operation.",
              "properties": {
                "value": {
                  "type": "array",
                  "description": "The SchemaRegistry items on this page",
                  "items": {
                    "type": "object",
                    "description": "Schema registry definition.",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "arm-id",
                        "description": "Fully qualified resource ID for the resource. E.g. \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}\"",
                        "readOnly": true
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the resource",
                        "readOnly": true
                      },
                      "type": {
                        "type": "string",
                        "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                        "readOnly": true
                      },
                      "systemData": {
                        "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                        "readOnly": true,
                        "type": "object",
                        "properties": {
                          "createdBy": {
                            "type": "string",
                            "description": "The identity that created the resource."
                          },
                          "createdByType": {
                            "type": "string",
                            "description": "The type of identity that created the resource.",
                            "enum": [
                              "User",
                              "Application",
                              "ManagedIdentity",
                              "Key"
                            ],
                            "x-ms-enum": {
                              "name": "createdByType",
                              "modelAsString": true
                            }
                          },
                          "createdAt": {
                            "type": "string",
                            "format": "date-time",
                            "description": "The timestamp of resource creation (UTC)."
                          },
                          "lastModifiedBy": {
                            "type": "string",
                            "description": "The identity that last modified the resource."
                          },
                          "lastModifiedByType": {
                            "type": "string",
                            "description": "The type of identity that last modified the resource.",
                            "enum": [
                              "User",
                              "Application",
                              "ManagedIdentity",
                              "Key"
                            ],
                            "x-ms-enum": {
                              "name": "createdByType",
                              "modelAsString": true
                            }
                          },
                          "lastModifiedAt": {
                            "type": "string",
                            "format": "date-time",
                            "description": "The timestamp of resource last modification (UTC)"
                          }
                        }
                      },
                      "tags": {
                        "type": "object",
                        "description": "Resource tags.",
                        "additionalProperties": {
                          "type": "string"
                        },
                        "x-ms-mutability": [
                          "read",
                          "create",
                          "update"
                        ]
                      },
                      "location": {
                        "type": "string",
                        "description": "The geo-location where the resource lives",
                        "x-ms-mutability": [
                          "read",
                          "create"
                        ]
                      },
                      "properties": {
                        "description": "The resource-specific properties for this resource.",
                        "x-ms-client-flatten": true,
                        "type": "object",
                        "properties": {
                          "uuid": {
                            "type": "string",
                            "description": "Globally unique, immutable, non-reusable id.",
                            "readOnly": true
                          },
                          "namespace": {
                            "type": "string",
                            "description": "Schema registry namespace. Uniquely identifies a schema registry within a tenant.",
                            "maxLength": 32,
                            "pattern": "^[a-z0-9][a-z0-9-]*[a-z0-9]$",
                            "x-ms-mutability": [
                              "read",
                              "create"
                            ]
                          },
                          "displayName": {
                            "type": "string",
                            "description": "Human-readable display name."
                          },
                          "description": {
                            "type": "string",
                            "description": "Human-readable description of the schema registry."
                          },
                          "storageAccountContainerUrl": {
                            "type": "string",
                            "description": "The Storage Account's Container URL where schemas will be stored.",
                            "x-ms-mutability": [
                              "read",
                              "create"
                            ]
                          },
                          "provisioningState": {
                            "description": "Provisioning state of the resource.",
                            "readOnly": true,
                            "type": "string",
                            "enum": [
                              "Succeeded",
                              "Failed",
                              "Canceled",
                              "Accepted",
                              "Deleting"
                            ],
                            "x-ms-enum": {
                              "name": "ProvisioningState",
                              "modelAsString": true,
                              "values": [
                                {
                                  "name": "Succeeded",
                                  "value": "Succeeded",
                                  "description": "Resource has been created."
                                },
                                {
                                  "name": "Failed",
                                  "value": "Failed",
                                  "description": "Resource creation failed."
                                },
                                {
                                  "name": "Canceled",
                                  "value": "Canceled",
                                  "description": "Resource creation was canceled."
                                },
                                {
                                  "name": "Accepted",
                                  "value": "Accepted",
                                  "description": "Resource has been accepted by the server."
                                },
                                {
                                  "name": "Deleting",
                                  "value": "Deleting",
                                  "description": "Resource is deleting."
                                }
                              ]
                            }
                          }
                        },
                        "required": [
                          "namespace",
                          "storageAccountContainerUrl"
                        ]
                      },
                      "identity": {
                        "description": "The managed service identities assigned to this resource.",
                        "type": "object",
                        "properties": {
                          "principalId": {
                            "type": "string",
                            "format": "uuid",
                            "description": "The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.",
                            "readOnly": true
                          },
                          "tenantId": {
                            "type": "string",
                            "format": "uuid",
                            "description": "The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.",
                            "readOnly": true
                          },
                          "type": {
                            "type": "string",
                            "description": "Type of managed service identity (either system assigned, or none).",
                            "enum": [
                              "None",
                              "SystemAssigned"
                            ],
                            "x-ms-enum": {
                              "name": "SystemAssignedServiceIdentityType",
                              "modelAsString": true
                            }
                          }
                        },
                        "required": [
                          "type"
                        ]
                      }
                    }
                  }
                },
                "nextLink": {
                  "type": "string",
                  "format": "uri",
                  "description": "The link to the next page of items"
                }
              },
              "required": [
                "value"
              ]
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeviceRegistry/assetEndpointProfiles": {
      "get": {
        "operationId": "AssetEndpointProfiles_ListByResourceGroup",
        "tags": [
          "AssetEndpointProfiles"
        ],
        "description": "List AssetEndpointProfile resources by resource group",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription. The value must be an UUID.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group. The name is case insensitive.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "type": "object",
              "description": "The response of a AssetEndpointProfile list operation.",
              "properties": {
                "value": {
                  "type": "array",
                  "description": "The AssetEndpointProfile items on this page",
                  "items": {
                    "type": "object",
                    "description": "Asset Endpoint Profile definition.",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "arm-id",
                        "description": "Fully qualified resource ID for the resource. E.g. \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}\"",
                        "readOnly": true
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the resource",
                        "readOnly": true
                      },
                      "type": {
                        "type": "string",
                        "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                        "readOnly": true
                      },
                      "systemData": {
                        "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                        "readOnly": true,
                        "type": "object",
                        "properties": {
                          "createdBy": {
                            "type": "string",
                            "description": "The identity that created the resource."
                          },
                          "createdByType": {
                            "type": "string",
                            "description": "The type of identity that created the resource.",
                            "enum": [
                              "User",
                              "Application",
                              "ManagedIdentity",
                              "Key"
                            ],
                            "x-ms-enum": {
                              "name": "createdByType",
                              "modelAsString": true
                            }
                          },
                          "createdAt": {
                            "type": "string",
                            "format": "date-time",
                            "description": "The timestamp of resource creation (UTC)."
                          },
                          "lastModifiedBy": {
                            "type": "string",
                            "description": "The identity that last modified the resource."
                          },
                          "lastModifiedByType": {
                            "type": "string",
                            "description": "The type of identity that last modified the resource.",
                            "enum": [
                              "User",
                              "Application",
                              "ManagedIdentity",
                              "Key"
                            ],
                            "x-ms-enum": {
                              "name": "createdByType",
                              "modelAsString": true
                            }
                          },
                          "lastModifiedAt": {
                            "type": "string",
                            "format": "date-time",
                            "description": "The timestamp of resource last modification (UTC)"
                          }
                        }
                      },
                      "tags": {
                        "type": "object",
                        "description": "Resource tags.",
                        "additionalProperties": {
                          "type": "string"
                        },
                        "x-ms-mutability": [
                          "read",
                          "create",
                          "update"
                        ]
                      },
                      "location": {
                        "type": "string",
                        "description": "The geo-location where the resource lives",
                        "x-ms-mutability": [
                          "read",
                          "create"
                        ]
                      },
                      "properties": {
                        "description": "The resource-specific properties for this resource.",
                        "x-ms-client-flatten": true,
                        "type": "object",
                        "properties": {
                          "uuid": {
                            "type": "string",
                            "description": "Globally unique, immutable, non-reusable id.",
                            "readOnly": true
                          },
                          "targetAddress": {
                            "type": "string",
                            "format": "uri",
                            "description": "The local valid URI specifying the network address/DNS name of a southbound device. The scheme part of the targetAddress URI specifies the type of the device. The additionalConfiguration field holds further connector type specific configuration."
                          },
                          "endpointProfileType": {
                            "type": "string",
                            "description": "Defines the configuration for the connector type that is being used with the endpoint profile."
                          },
                          "authentication": {
                            "description": "Defines the client authentication mechanism to the server.",
                            "type": "object",
                            "properties": {
                              "method": {
                                "type": "string",
                                "description": "Defines the method to authenticate the user of the client at the server.",
                                "default": "Certificate",
                                "enum": [
                                  "Anonymous",
                                  "Certificate",
                                  "UsernamePassword"
                                ],
                                "x-ms-enum": {
                                  "name": "AuthenticationMethod",
                                  "modelAsString": true,
                                  "values": [
                                    {
                                      "name": "Anonymous",
                                      "value": "Anonymous",
                                      "description": "The user authentication method is anonymous."
                                    },
                                    {
                                      "name": "Certificate",
                                      "value": "Certificate",
                                      "description": "The user authentication method is an x509 certificate."
                                    },
                                    {
                                      "name": "UsernamePassword",
                                      "value": "UsernamePassword",
                                      "description": "The user authentication method is a username and password."
                                    }
                                  ]
                                }
                              },
                              "usernamePasswordCredentials": {
                                "description": "Defines the username and password references when UsernamePassword user authentication mode is selected.",
                                "type": "object",
                                "properties": {
                                  "usernameSecretName": {
                                    "type": "string",
                                    "description": "The name of the secret containing the username."
                                  },
                                  "passwordSecretName": {
                                    "type": "string",
                                    "description": "The name of the secret containing the password."
                                  }
                                },
                                "required": [
                                  "usernameSecretName",
                                  "passwordSecretName"
                                ]
                              },
                              "x509Credentials": {
                                "description": "Defines the certificate reference when Certificate user authentication mode is selected.",
                                "type": "object",
                                "properties": {
                                  "certificateSecretName": {
                                    "type": "string",
                                    "description": "The name of the secret containing the certificate and private key (e.g. stored as .der/.pem or .der/.pfx)."
                                  }
                                },
                                "required": [
                                  "certificateSecretName"
                                ]
                              }
                            },
                            "required": [
                              "method"
                            ]
                          },
                          "additionalConfiguration": {
                            "type": "string",
                            "description": "Stringified JSON that contains connectivity type specific further configuration (e.g. OPC UA, Modbus, ONVIF)."
                          },
                          "discoveredAssetEndpointProfileRef": {
                            "type": "string",
                            "description": "Reference to a discovered asset endpoint profile. Populated only if the asset endpoint profile has been created from discovery flow. Discovered asset endpoint profile name must be provided.",
                            "x-ms-mutability": [
                              "read",
                              "create"
                            ]
                          },
                          "status": {
                            "description": "Read only object to reflect changes that have occurred on the Edge. Similar to Kubernetes status property for custom resources.",
                            "readOnly": true,
                            "type": "object",
                            "properties": {
                              "errors": {
                                "type": "array",
                                "description": "Array object to transfer and persist errors that originate from the Edge.",
                                "items": {
                                  "type": "object",
                                  "description": "Defines the asset endpoint profile status error properties.",
                                  "properties": {
                                    "code": {
                                      "type": "integer",
                                      "format": "int32",
                                      "description": "Error code for classification of errors (ex: 400, 404, 500, etc.).",
                                      "readOnly": true
                                    },
                                    "message": {
                                      "type": "string",
                                      "description": "Human readable helpful error message to provide additional context for error (ex: “targetAddress 'foo' is not a valid url”).",
                                      "readOnly": true
                                    }
                                  }
                                },
                                "readOnly": true,
                                "x-ms-identifiers": []
                              }
                            }
                          },
                          "provisioningState": {
                            "description": "Provisioning state of the resource.",
                            "readOnly": true,
                            "type": "string",
                            "enum": [
                              "Succeeded",
                              "Failed",
                              "Canceled",
                              "Accepted",
                              "Deleting"
                            ],
                            "x-ms-enum": {
                              "name": "ProvisioningState",
                              "modelAsString": true,
                              "values": [
                                {
                                  "name": "Succeeded",
                                  "value": "Succeeded",
                                  "description": "Resource has been created."
                                },
                                {
                                  "name": "Failed",
                                  "value": "Failed",
                                  "description": "Resource creation failed."
                                },
                                {
                                  "name": "Canceled",
                                  "value": "Canceled",
                                  "description": "Resource creation was canceled."
                                },
                                {
                                  "name": "Accepted",
                                  "value": "Accepted",
                                  "description": "Resource has been accepted by the server."
                                },
                                {
                                  "name": "Deleting",
                                  "value": "Deleting",
                                  "description": "Resource is deleting."
                                }
                              ]
                            }
                          }
                        },
                        "required": [
                          "targetAddress",
                          "endpointProfileType"
                        ]
                      },
                      "extendedLocation": {
                        "description": "The extended location.",
                        "x-ms-mutability": [
                          "read",
                          "create"
                        ],
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "description": "The extended location type."
                          },
                          "name": {
                            "type": "string",
                            "description": "The extended location name."
                          }
                        },
                        "required": [
                          "type",
                          "name"
                        ]
                      }
                    },
                    "required": [
                      "extendedLocation"
                    ]
                  }
                },
                "nextLink": {
                  "type": "string",
                  "format": "uri",
                  "description": "The link to the next page of items"
                }
              },
              "required": [
                "value"
              ]
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeviceRegistry/assetEndpointProfiles/{assetEndpointProfileName}": {
      "get": {
        "operationId": "AssetEndpointProfiles_Get",
        "tags": [
          "AssetEndpointProfiles"
        ],
        "description": "Get a AssetEndpointProfile",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription. The value must be an UUID.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group. The name is case insensitive.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "x-ms-parameter-location": "method"
          },
          {
            "name": "assetEndpointProfileName",
            "in": "path",
            "description": "Asset Endpoint Profile name parameter.",
            "required": true,
            "type": "string",
            "minLength": 3,
            "maxLength": 63,
            "pattern": "^[a-z0-9][a-z0-9-]*[a-z0-9]$"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "type": "object",
              "description": "Asset Endpoint Profile definition.",
              "properties": {
                "id": {
                  "type": "string",
                  "format": "arm-id",
                  "description": "Fully qualified resource ID for the resource. E.g. \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}\"",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "description": "The name of the resource",
                  "readOnly": true
                },
                "type": {
                  "type": "string",
                  "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                  "readOnly": true
                },
                "systemData": {
                  "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                  "readOnly": true,
                  "type": "object",
                  "properties": {
                    "createdBy": {
                      "type": "string",
                      "description": "The identity that created the resource."
                    },
                    "createdByType": {
                      "type": "string",
                      "description": "The type of identity that created the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource creation (UTC)."
                    },
                    "lastModifiedBy": {
                      "type": "string",
                      "description": "The identity that last modified the resource."
                    },
                    "lastModifiedByType": {
                      "type": "string",
                      "description": "The type of identity that last modified the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "lastModifiedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource last modification (UTC)"
                    }
                  }
                },
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "x-ms-mutability": [
                    "read",
                    "create",
                    "update"
                  ]
                },
                "location": {
                  "type": "string",
                  "description": "The geo-location where the resource lives",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ]
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "uuid": {
                      "type": "string",
                      "description": "Globally unique, immutable, non-reusable id.",
                      "readOnly": true
                    },
                    "targetAddress": {
                      "type": "string",
                      "format": "uri",
                      "description": "The local valid URI specifying the network address/DNS name of a southbound device. The scheme part of the targetAddress URI specifies the type of the device. The additionalConfiguration field holds further connector type specific configuration."
                    },
                    "endpointProfileType": {
                      "type": "string",
                      "description": "Defines the configuration for the connector type that is being used with the endpoint profile."
                    },
                    "authentication": {
                      "description": "Defines the client authentication mechanism to the server.",
                      "type": "object",
                      "properties": {
                        "method": {
                          "type": "string",
                          "description": "Defines the method to authenticate the user of the client at the server.",
                          "default": "Certificate",
                          "enum": [
                            "Anonymous",
                            "Certificate",
                            "UsernamePassword"
                          ],
                          "x-ms-enum": {
                            "name": "AuthenticationMethod",
                            "modelAsString": true,
                            "values": [
                              {
                                "name": "Anonymous",
                                "value": "Anonymous",
                                "description": "The user authentication method is anonymous."
                              },
                              {
                                "name": "Certificate",
                                "value": "Certificate",
                                "description": "The user authentication method is an x509 certificate."
                              },
                              {
                                "name": "UsernamePassword",
                                "value": "UsernamePassword",
                                "description": "The user authentication method is a username and password."
                              }
                            ]
                          }
                        },
                        "usernamePasswordCredentials": {
                          "description": "Defines the username and password references when UsernamePassword user authentication mode is selected.",
                          "type": "object",
                          "properties": {
                            "usernameSecretName": {
                              "type": "string",
                              "description": "The name of the secret containing the username."
                            },
                            "passwordSecretName": {
                              "type": "string",
                              "description": "The name of the secret containing the password."
                            }
                          },
                          "required": [
                            "usernameSecretName",
                            "passwordSecretName"
                          ]
                        },
                        "x509Credentials": {
                          "description": "Defines the certificate reference when Certificate user authentication mode is selected.",
                          "type": "object",
                          "properties": {
                            "certificateSecretName": {
                              "type": "string",
                              "description": "The name of the secret containing the certificate and private key (e.g. stored as .der/.pem or .der/.pfx)."
                            }
                          },
                          "required": [
                            "certificateSecretName"
                          ]
                        }
                      },
                      "required": [
                        "method"
                      ]
                    },
                    "additionalConfiguration": {
                      "type": "string",
                      "description": "Stringified JSON that contains connectivity type specific further configuration (e.g. OPC UA, Modbus, ONVIF)."
                    },
                    "discoveredAssetEndpointProfileRef": {
                      "type": "string",
                      "description": "Reference to a discovered asset endpoint profile. Populated only if the asset endpoint profile has been created from discovery flow. Discovered asset endpoint profile name must be provided.",
                      "x-ms-mutability": [
                        "read",
                        "create"
                      ]
                    },
                    "status": {
                      "description": "Read only object to reflect changes that have occurred on the Edge. Similar to Kubernetes status property for custom resources.",
                      "readOnly": true,
                      "type": "object",
                      "properties": {
                        "errors": {
                          "type": "array",
                          "description": "Array object to transfer and persist errors that originate from the Edge.",
                          "items": {
                            "type": "object",
                            "description": "Defines the asset endpoint profile status error properties.",
                            "properties": {
                              "code": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Error code for classification of errors (ex: 400, 404, 500, etc.).",
                                "readOnly": true
                              },
                              "message": {
                                "type": "string",
                                "description": "Human readable helpful error message to provide additional context for error (ex: “targetAddress 'foo' is not a valid url”).",
                                "readOnly": true
                              }
                            }
                          },
                          "readOnly": true,
                          "x-ms-identifiers": []
                        }
                      }
                    },
                    "provisioningState": {
                      "description": "Provisioning state of the resource.",
                      "readOnly": true,
                      "type": "string",
                      "enum": [
                        "Succeeded",
                        "Failed",
                        "Canceled",
                        "Accepted",
                        "Deleting"
                      ],
                      "x-ms-enum": {
                        "name": "ProvisioningState",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Succeeded",
                            "value": "Succeeded",
                            "description": "Resource has been created."
                          },
                          {
                            "name": "Failed",
                            "value": "Failed",
                            "description": "Resource creation failed."
                          },
                          {
                            "name": "Canceled",
                            "value": "Canceled",
                            "description": "Resource creation was canceled."
                          },
                          {
                            "name": "Accepted",
                            "value": "Accepted",
                            "description": "Resource has been accepted by the server."
                          },
                          {
                            "name": "Deleting",
                            "value": "Deleting",
                            "description": "Resource is deleting."
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "targetAddress",
                    "endpointProfileType"
                  ]
                },
                "extendedLocation": {
                  "description": "The extended location.",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ],
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "description": "The extended location type."
                    },
                    "name": {
                      "type": "string",
                      "description": "The extended location name."
                    }
                  },
                  "required": [
                    "type",
                    "name"
                  ]
                }
              },
              "required": [
                "extendedLocation"
              ]
            }
          }
        }
      },
      "put": {
        "operationId": "AssetEndpointProfiles_CreateOrReplace",
        "tags": [
          "AssetEndpointProfiles"
        ],
        "description": "Create a AssetEndpointProfile",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription. The value must be an UUID.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group. The name is case insensitive.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "x-ms-parameter-location": "method"
          },
          {
            "name": "assetEndpointProfileName",
            "in": "path",
            "description": "Asset Endpoint Profile name parameter.",
            "required": true,
            "type": "string",
            "minLength": 3,
            "maxLength": 63,
            "pattern": "^[a-z0-9][a-z0-9-]*[a-z0-9]$"
          },
          {
            "name": "resource",
            "in": "body",
            "description": "Resource create parameters.",
            "required": true,
            "schema": {
              "type": "object",
              "description": "Asset Endpoint Profile definition.",
              "properties": {
                "id": {
                  "type": "string",
                  "format": "arm-id",
                  "description": "Fully qualified resource ID for the resource. E.g. \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}\"",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "description": "The name of the resource",
                  "readOnly": true
                },
                "type": {
                  "type": "string",
                  "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                  "readOnly": true
                },
                "systemData": {
                  "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                  "readOnly": true,
                  "type": "object",
                  "properties": {
                    "createdBy": {
                      "type": "string",
                      "description": "The identity that created the resource."
                    },
                    "createdByType": {
                      "type": "string",
                      "description": "The type of identity that created the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource creation (UTC)."
                    },
                    "lastModifiedBy": {
                      "type": "string",
                      "description": "The identity that last modified the resource."
                    },
                    "lastModifiedByType": {
                      "type": "string",
                      "description": "The type of identity that last modified the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "lastModifiedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource last modification (UTC)"
                    }
                  }
                },
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "x-ms-mutability": [
                    "read",
                    "create",
                    "update"
                  ]
                },
                "location": {
                  "type": "string",
                  "description": "The geo-location where the resource lives",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ]
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "uuid": {
                      "type": "string",
                      "description": "Globally unique, immutable, non-reusable id.",
                      "readOnly": true
                    },
                    "targetAddress": {
                      "type": "string",
                      "format": "uri",
                      "description": "The local valid URI specifying the network address/DNS name of a southbound device. The scheme part of the targetAddress URI specifies the type of the device. The additionalConfiguration field holds further connector type specific configuration."
                    },
                    "endpointProfileType": {
                      "type": "string",
                      "description": "Defines the configuration for the connector type that is being used with the endpoint profile."
                    },
                    "authentication": {
                      "description": "Defines the client authentication mechanism to the server.",
                      "type": "object",
                      "properties": {
                        "method": {
                          "type": "string",
                          "description": "Defines the method to authenticate the user of the client at the server.",
                          "default": "Certificate",
                          "enum": [
                            "Anonymous",
                            "Certificate",
                            "UsernamePassword"
                          ],
                          "x-ms-enum": {
                            "name": "AuthenticationMethod",
                            "modelAsString": true,
                            "values": [
                              {
                                "name": "Anonymous",
                                "value": "Anonymous",
                                "description": "The user authentication method is anonymous."
                              },
                              {
                                "name": "Certificate",
                                "value": "Certificate",
                                "description": "The user authentication method is an x509 certificate."
                              },
                              {
                                "name": "UsernamePassword",
                                "value": "UsernamePassword",
                                "description": "The user authentication method is a username and password."
                              }
                            ]
                          }
                        },
                        "usernamePasswordCredentials": {
                          "description": "Defines the username and password references when UsernamePassword user authentication mode is selected.",
                          "type": "object",
                          "properties": {
                            "usernameSecretName": {
                              "type": "string",
                              "description": "The name of the secret containing the username."
                            },
                            "passwordSecretName": {
                              "type": "string",
                              "description": "The name of the secret containing the password."
                            }
                          },
                          "required": [
                            "usernameSecretName",
                            "passwordSecretName"
                          ]
                        },
                        "x509Credentials": {
                          "description": "Defines the certificate reference when Certificate user authentication mode is selected.",
                          "type": "object",
                          "properties": {
                            "certificateSecretName": {
                              "type": "string",
                              "description": "The name of the secret containing the certificate and private key (e.g. stored as .der/.pem or .der/.pfx)."
                            }
                          },
                          "required": [
                            "certificateSecretName"
                          ]
                        }
                      },
                      "required": [
                        "method"
                      ]
                    },
                    "additionalConfiguration": {
                      "type": "string",
                      "description": "Stringified JSON that contains connectivity type specific further configuration (e.g. OPC UA, Modbus, ONVIF)."
                    },
                    "discoveredAssetEndpointProfileRef": {
                      "type": "string",
                      "description": "Reference to a discovered asset endpoint profile. Populated only if the asset endpoint profile has been created from discovery flow. Discovered asset endpoint profile name must be provided.",
                      "x-ms-mutability": [
                        "read",
                        "create"
                      ]
                    },
                    "status": {
                      "description": "Read only object to reflect changes that have occurred on the Edge. Similar to Kubernetes status property for custom resources.",
                      "readOnly": true,
                      "type": "object",
                      "properties": {
                        "errors": {
                          "type": "array",
                          "description": "Array object to transfer and persist errors that originate from the Edge.",
                          "items": {
                            "type": "object",
                            "description": "Defines the asset endpoint profile status error properties.",
                            "properties": {
                              "code": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Error code for classification of errors (ex: 400, 404, 500, etc.).",
                                "readOnly": true
                              },
                              "message": {
                                "type": "string",
                                "description": "Human readable helpful error message to provide additional context for error (ex: “targetAddress 'foo' is not a valid url”).",
                                "readOnly": true
                              }
                            }
                          },
                          "readOnly": true,
                          "x-ms-identifiers": []
                        }
                      }
                    },
                    "provisioningState": {
                      "description": "Provisioning state of the resource.",
                      "readOnly": true,
                      "type": "string",
                      "enum": [
                        "Succeeded",
                        "Failed",
                        "Canceled",
                        "Accepted",
                        "Deleting"
                      ],
                      "x-ms-enum": {
                        "name": "ProvisioningState",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Succeeded",
                            "value": "Succeeded",
                            "description": "Resource has been created."
                          },
                          {
                            "name": "Failed",
                            "value": "Failed",
                            "description": "Resource creation failed."
                          },
                          {
                            "name": "Canceled",
                            "value": "Canceled",
                            "description": "Resource creation was canceled."
                          },
                          {
                            "name": "Accepted",
                            "value": "Accepted",
                            "description": "Resource has been accepted by the server."
                          },
                          {
                            "name": "Deleting",
                            "value": "Deleting",
                            "description": "Resource is deleting."
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "targetAddress",
                    "endpointProfileType"
                  ]
                },
                "extendedLocation": {
                  "description": "The extended location.",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ],
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "description": "The extended location type."
                    },
                    "name": {
                      "type": "string",
                      "description": "The extended location name."
                    }
                  },
                  "required": [
                    "type",
                    "name"
                  ]
                }
              },
              "required": [
                "extendedLocation"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resource 'AssetEndpointProfile' update operation succeeded",
            "schema": {
              "type": "object",
              "description": "Asset Endpoint Profile definition.",
              "properties": {
                "id": {
                  "type": "string",
                  "format": "arm-id",
                  "description": "Fully qualified resource ID for the resource. E.g. \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}\"",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "description": "The name of the resource",
                  "readOnly": true
                },
                "type": {
                  "type": "string",
                  "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                  "readOnly": true
                },
                "systemData": {
                  "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                  "readOnly": true,
                  "type": "object",
                  "properties": {
                    "createdBy": {
                      "type": "string",
                      "description": "The identity that created the resource."
                    },
                    "createdByType": {
                      "type": "string",
                      "description": "The type of identity that created the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource creation (UTC)."
                    },
                    "lastModifiedBy": {
                      "type": "string",
                      "description": "The identity that last modified the resource."
                    },
                    "lastModifiedByType": {
                      "type": "string",
                      "description": "The type of identity that last modified the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "lastModifiedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource last modification (UTC)"
                    }
                  }
                },
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "x-ms-mutability": [
                    "read",
                    "create",
                    "update"
                  ]
                },
                "location": {
                  "type": "string",
                  "description": "The geo-location where the resource lives",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ]
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "uuid": {
                      "type": "string",
                      "description": "Globally unique, immutable, non-reusable id.",
                      "readOnly": true
                    },
                    "targetAddress": {
                      "type": "string",
                      "format": "uri",
                      "description": "The local valid URI specifying the network address/DNS name of a southbound device. The scheme part of the targetAddress URI specifies the type of the device. The additionalConfiguration field holds further connector type specific configuration."
                    },
                    "endpointProfileType": {
                      "type": "string",
                      "description": "Defines the configuration for the connector type that is being used with the endpoint profile."
                    },
                    "authentication": {
                      "description": "Defines the client authentication mechanism to the server.",
                      "type": "object",
                      "properties": {
                        "method": {
                          "type": "string",
                          "description": "Defines the method to authenticate the user of the client at the server.",
                          "default": "Certificate",
                          "enum": [
                            "Anonymous",
                            "Certificate",
                            "UsernamePassword"
                          ],
                          "x-ms-enum": {
                            "name": "AuthenticationMethod",
                            "modelAsString": true,
                            "values": [
                              {
                                "name": "Anonymous",
                                "value": "Anonymous",
                                "description": "The user authentication method is anonymous."
                              },
                              {
                                "name": "Certificate",
                                "value": "Certificate",
                                "description": "The user authentication method is an x509 certificate."
                              },
                              {
                                "name": "UsernamePassword",
                                "value": "UsernamePassword",
                                "description": "The user authentication method is a username and password."
                              }
                            ]
                          }
                        },
                        "usernamePasswordCredentials": {
                          "description": "Defines the username and password references when UsernamePassword user authentication mode is selected.",
                          "type": "object",
                          "properties": {
                            "usernameSecretName": {
                              "type": "string",
                              "description": "The name of the secret containing the username."
                            },
                            "passwordSecretName": {
                              "type": "string",
                              "description": "The name of the secret containing the password."
                            }
                          },
                          "required": [
                            "usernameSecretName",
                            "passwordSecretName"
                          ]
                        },
                        "x509Credentials": {
                          "description": "Defines the certificate reference when Certificate user authentication mode is selected.",
                          "type": "object",
                          "properties": {
                            "certificateSecretName": {
                              "type": "string",
                              "description": "The name of the secret containing the certificate and private key (e.g. stored as .der/.pem or .der/.pfx)."
                            }
                          },
                          "required": [
                            "certificateSecretName"
                          ]
                        }
                      },
                      "required": [
                        "method"
                      ]
                    },
                    "additionalConfiguration": {
                      "type": "string",
                      "description": "Stringified JSON that contains connectivity type specific further configuration (e.g. OPC UA, Modbus, ONVIF)."
                    },
                    "discoveredAssetEndpointProfileRef": {
                      "type": "string",
                      "description": "Reference to a discovered asset endpoint profile. Populated only if the asset endpoint profile has been created from discovery flow. Discovered asset endpoint profile name must be provided.",
                      "x-ms-mutability": [
                        "read",
                        "create"
                      ]
                    },
                    "status": {
                      "description": "Read only object to reflect changes that have occurred on the Edge. Similar to Kubernetes status property for custom resources.",
                      "readOnly": true,
                      "type": "object",
                      "properties": {
                        "errors": {
                          "type": "array",
                          "description": "Array object to transfer and persist errors that originate from the Edge.",
                          "items": {
                            "type": "object",
                            "description": "Defines the asset endpoint profile status error properties.",
                            "properties": {
                              "code": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Error code for classification of errors (ex: 400, 404, 500, etc.).",
                                "readOnly": true
                              },
                              "message": {
                                "type": "string",
                                "description": "Human readable helpful error message to provide additional context for error (ex: “targetAddress 'foo' is not a valid url”).",
                                "readOnly": true
                              }
                            }
                          },
                          "readOnly": true,
                          "x-ms-identifiers": []
                        }
                      }
                    },
                    "provisioningState": {
                      "description": "Provisioning state of the resource.",
                      "readOnly": true,
                      "type": "string",
                      "enum": [
                        "Succeeded",
                        "Failed",
                        "Canceled",
                        "Accepted",
                        "Deleting"
                      ],
                      "x-ms-enum": {
                        "name": "ProvisioningState",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Succeeded",
                            "value": "Succeeded",
                            "description": "Resource has been created."
                          },
                          {
                            "name": "Failed",
                            "value": "Failed",
                            "description": "Resource creation failed."
                          },
                          {
                            "name": "Canceled",
                            "value": "Canceled",
                            "description": "Resource creation was canceled."
                          },
                          {
                            "name": "Accepted",
                            "value": "Accepted",
                            "description": "Resource has been accepted by the server."
                          },
                          {
                            "name": "Deleting",
                            "value": "Deleting",
                            "description": "Resource is deleting."
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "targetAddress",
                    "endpointProfileType"
                  ]
                },
                "extendedLocation": {
                  "description": "The extended location.",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ],
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "description": "The extended location type."
                    },
                    "name": {
                      "type": "string",
                      "description": "The extended location name."
                    }
                  },
                  "required": [
                    "type",
                    "name"
                  ]
                }
              },
              "required": [
                "extendedLocation"
              ]
            }
          },
          "201": {
            "description": "Resource 'AssetEndpointProfile' create operation succeeded",
            "schema": {
              "type": "object",
              "description": "Asset Endpoint Profile definition.",
              "properties": {
                "id": {
                  "type": "string",
                  "format": "arm-id",
                  "description": "Fully qualified resource ID for the resource. E.g. \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}\"",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "description": "The name of the resource",
                  "readOnly": true
                },
                "type": {
                  "type": "string",
                  "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                  "readOnly": true
                },
                "systemData": {
                  "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                  "readOnly": true,
                  "type": "object",
                  "properties": {
                    "createdBy": {
                      "type": "string",
                      "description": "The identity that created the resource."
                    },
                    "createdByType": {
                      "type": "string",
                      "description": "The type of identity that created the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource creation (UTC)."
                    },
                    "lastModifiedBy": {
                      "type": "string",
                      "description": "The identity that last modified the resource."
                    },
                    "lastModifiedByType": {
                      "type": "string",
                      "description": "The type of identity that last modified the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "lastModifiedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource last modification (UTC)"
                    }
                  }
                },
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "x-ms-mutability": [
                    "read",
                    "create",
                    "update"
                  ]
                },
                "location": {
                  "type": "string",
                  "description": "The geo-location where the resource lives",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ]
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "uuid": {
                      "type": "string",
                      "description": "Globally unique, immutable, non-reusable id.",
                      "readOnly": true
                    },
                    "targetAddress": {
                      "type": "string",
                      "format": "uri",
                      "description": "The local valid URI specifying the network address/DNS name of a southbound device. The scheme part of the targetAddress URI specifies the type of the device. The additionalConfiguration field holds further connector type specific configuration."
                    },
                    "endpointProfileType": {
                      "type": "string",
                      "description": "Defines the configuration for the connector type that is being used with the endpoint profile."
                    },
                    "authentication": {
                      "description": "Defines the client authentication mechanism to the server.",
                      "type": "object",
                      "properties": {
                        "method": {
                          "type": "string",
                          "description": "Defines the method to authenticate the user of the client at the server.",
                          "default": "Certificate",
                          "enum": [
                            "Anonymous",
                            "Certificate",
                            "UsernamePassword"
                          ],
                          "x-ms-enum": {
                            "name": "AuthenticationMethod",
                            "modelAsString": true,
                            "values": [
                              {
                                "name": "Anonymous",
                                "value": "Anonymous",
                                "description": "The user authentication method is anonymous."
                              },
                              {
                                "name": "Certificate",
                                "value": "Certificate",
                                "description": "The user authentication method is an x509 certificate."
                              },
                              {
                                "name": "UsernamePassword",
                                "value": "UsernamePassword",
                                "description": "The user authentication method is a username and password."
                              }
                            ]
                          }
                        },
                        "usernamePasswordCredentials": {
                          "description": "Defines the username and password references when UsernamePassword user authentication mode is selected.",
                          "type": "object",
                          "properties": {
                            "usernameSecretName": {
                              "type": "string",
                              "description": "The name of the secret containing the username."
                            },
                            "passwordSecretName": {
                              "type": "string",
                              "description": "The name of the secret containing the password."
                            }
                          },
                          "required": [
                            "usernameSecretName",
                            "passwordSecretName"
                          ]
                        },
                        "x509Credentials": {
                          "description": "Defines the certificate reference when Certificate user authentication mode is selected.",
                          "type": "object",
                          "properties": {
                            "certificateSecretName": {
                              "type": "string",
                              "description": "The name of the secret containing the certificate and private key (e.g. stored as .der/.pem or .der/.pfx)."
                            }
                          },
                          "required": [
                            "certificateSecretName"
                          ]
                        }
                      },
                      "required": [
                        "method"
                      ]
                    },
                    "additionalConfiguration": {
                      "type": "string",
                      "description": "Stringified JSON that contains connectivity type specific further configuration (e.g. OPC UA, Modbus, ONVIF)."
                    },
                    "discoveredAssetEndpointProfileRef": {
                      "type": "string",
                      "description": "Reference to a discovered asset endpoint profile. Populated only if the asset endpoint profile has been created from discovery flow. Discovered asset endpoint profile name must be provided.",
                      "x-ms-mutability": [
                        "read",
                        "create"
                      ]
                    },
                    "status": {
                      "description": "Read only object to reflect changes that have occurred on the Edge. Similar to Kubernetes status property for custom resources.",
                      "readOnly": true,
                      "type": "object",
                      "properties": {
                        "errors": {
                          "type": "array",
                          "description": "Array object to transfer and persist errors that originate from the Edge.",
                          "items": {
                            "type": "object",
                            "description": "Defines the asset endpoint profile status error properties.",
                            "properties": {
                              "code": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Error code for classification of errors (ex: 400, 404, 500, etc.).",
                                "readOnly": true
                              },
                              "message": {
                                "type": "string",
                                "description": "Human readable helpful error message to provide additional context for error (ex: “targetAddress 'foo' is not a valid url”).",
                                "readOnly": true
                              }
                            }
                          },
                          "readOnly": true,
                          "x-ms-identifiers": []
                        }
                      }
                    },
                    "provisioningState": {
                      "description": "Provisioning state of the resource.",
                      "readOnly": true,
                      "type": "string",
                      "enum": [
                        "Succeeded",
                        "Failed",
                        "Canceled",
                        "Accepted",
                        "Deleting"
                      ],
                      "x-ms-enum": {
                        "name": "ProvisioningState",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Succeeded",
                            "value": "Succeeded",
                            "description": "Resource has been created."
                          },
                          {
                            "name": "Failed",
                            "value": "Failed",
                            "description": "Resource creation failed."
                          },
                          {
                            "name": "Canceled",
                            "value": "Canceled",
                            "description": "Resource creation was canceled."
                          },
                          {
                            "name": "Accepted",
                            "value": "Accepted",
                            "description": "Resource has been accepted by the server."
                          },
                          {
                            "name": "Deleting",
                            "value": "Deleting",
                            "description": "Resource is deleting."
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "targetAddress",
                    "endpointProfileType"
                  ]
                },
                "extendedLocation": {
                  "description": "The extended location.",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ],
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "description": "The extended location type."
                    },
                    "name": {
                      "type": "string",
                      "description": "The extended location name."
                    }
                  },
                  "required": [
                    "type",
                    "name"
                  ]
                }
              },
              "required": [
                "extendedLocation"
              ]
            },
            "headers": {
              "Azure-AsyncOperation": {
                "type": "string",
                "description": "A link to the status monitor"
              },
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "AssetEndpointProfiles_Update",
        "tags": [
          "AssetEndpointProfiles"
        ],
        "description": "Update a AssetEndpointProfile",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription. The value must be an UUID.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group. The name is case insensitive.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "x-ms-parameter-location": "method"
          },
          {
            "name": "assetEndpointProfileName",
            "in": "path",
            "description": "Asset Endpoint Profile name parameter.",
            "required": true,
            "type": "string",
            "minLength": 3,
            "maxLength": 63,
            "pattern": "^[a-z0-9][a-z0-9-]*[a-z0-9]$"
          },
          {
            "name": "properties",
            "in": "body",
            "description": "The resource properties to be updated.",
            "required": true,
            "schema": {
              "type": "object",
              "description": "The type used for update operations of the AssetEndpointProfile.",
              "properties": {
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "targetAddress": {
                      "type": "string",
                      "format": "uri",
                      "description": "The local valid URI specifying the network address/DNS name of a southbound device. The scheme part of the targetAddress URI specifies the type of the device. The additionalConfiguration field holds further connector type specific configuration."
                    },
                    "endpointProfileType": {
                      "type": "string",
                      "description": "Defines the configuration for the connector type that is being used with the endpoint profile."
                    },
                    "authentication": {
                      "description": "Defines the client authentication mechanism to the server.",
                      "type": "object",
                      "properties": {
                        "method": {
                          "type": "string",
                          "description": "Defines the method to authenticate the user of the client at the server.",
                          "default": "Certificate",
                          "enum": [
                            "Anonymous",
                            "Certificate",
                            "UsernamePassword"
                          ],
                          "x-ms-enum": {
                            "name": "AuthenticationMethod",
                            "modelAsString": true,
                            "values": [
                              {
                                "name": "Anonymous",
                                "value": "Anonymous",
                                "description": "The user authentication method is anonymous."
                              },
                              {
                                "name": "Certificate",
                                "value": "Certificate",
                                "description": "The user authentication method is an x509 certificate."
                              },
                              {
                                "name": "UsernamePassword",
                                "value": "UsernamePassword",
                                "description": "The user authentication method is a username and password."
                              }
                            ]
                          }
                        },
                        "usernamePasswordCredentials": {
                          "description": "Defines the username and password references when UsernamePassword user authentication mode is selected.",
                          "type": "object",
                          "properties": {
                            "usernameSecretName": {
                              "type": "string",
                              "description": "The name of the secret containing the username."
                            },
                            "passwordSecretName": {
                              "type": "string",
                              "description": "The name of the secret containing the password."
                            }
                          }
                        },
                        "x509Credentials": {
                          "description": "Defines the certificate reference when Certificate user authentication mode is selected.",
                          "type": "object",
                          "properties": {
                            "certificateSecretName": {
                              "type": "string",
                              "description": "The name of the secret containing the certificate and private key (e.g. stored as .der/.pem or .der/.pfx)."
                            }
                          }
                        }
                      }
                    },
                    "additionalConfiguration": {
                      "type": "string",
                      "description": "Stringified JSON that contains connectivity type specific further configuration (e.g. OPC UA, Modbus, ONVIF)."
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "type": "object",
              "description": "Asset Endpoint Profile definition.",
              "properties": {
                "id": {
                  "type": "string",
                  "format": "arm-id",
                  "description": "Fully qualified resource ID for the resource. E.g. \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}\"",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "description": "The name of the resource",
                  "readOnly": true
                },
                "type": {
                  "type": "string",
                  "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                  "readOnly": true
                },
                "systemData": {
                  "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                  "readOnly": true,
                  "type": "object",
                  "properties": {
                    "createdBy": {
                      "type": "string",
                      "description": "The identity that created the resource."
                    },
                    "createdByType": {
                      "type": "string",
                      "description": "The type of identity that created the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource creation (UTC)."
                    },
                    "lastModifiedBy": {
                      "type": "string",
                      "description": "The identity that last modified the resource."
                    },
                    "lastModifiedByType": {
                      "type": "string",
                      "description": "The type of identity that last modified the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "lastModifiedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource last modification (UTC)"
                    }
                  }
                },
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "x-ms-mutability": [
                    "read",
                    "create",
                    "update"
                  ]
                },
                "location": {
                  "type": "string",
                  "description": "The geo-location where the resource lives",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ]
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "uuid": {
                      "type": "string",
                      "description": "Globally unique, immutable, non-reusable id.",
                      "readOnly": true
                    },
                    "targetAddress": {
                      "type": "string",
                      "format": "uri",
                      "description": "The local valid URI specifying the network address/DNS name of a southbound device. The scheme part of the targetAddress URI specifies the type of the device. The additionalConfiguration field holds further connector type specific configuration."
                    },
                    "endpointProfileType": {
                      "type": "string",
                      "description": "Defines the configuration for the connector type that is being used with the endpoint profile."
                    },
                    "authentication": {
                      "description": "Defines the client authentication mechanism to the server.",
                      "type": "object",
                      "properties": {
                        "method": {
                          "type": "string",
                          "description": "Defines the method to authenticate the user of the client at the server.",
                          "default": "Certificate",
                          "enum": [
                            "Anonymous",
                            "Certificate",
                            "UsernamePassword"
                          ],
                          "x-ms-enum": {
                            "name": "AuthenticationMethod",
                            "modelAsString": true,
                            "values": [
                              {
                                "name": "Anonymous",
                                "value": "Anonymous",
                                "description": "The user authentication method is anonymous."
                              },
                              {
                                "name": "Certificate",
                                "value": "Certificate",
                                "description": "The user authentication method is an x509 certificate."
                              },
                              {
                                "name": "UsernamePassword",
                                "value": "UsernamePassword",
                                "description": "The user authentication method is a username and password."
                              }
                            ]
                          }
                        },
                        "usernamePasswordCredentials": {
                          "description": "Defines the username and password references when UsernamePassword user authentication mode is selected.",
                          "type": "object",
                          "properties": {
                            "usernameSecretName": {
                              "type": "string",
                              "description": "The name of the secret containing the username."
                            },
                            "passwordSecretName": {
                              "type": "string",
                              "description": "The name of the secret containing the password."
                            }
                          },
                          "required": [
                            "usernameSecretName",
                            "passwordSecretName"
                          ]
                        },
                        "x509Credentials": {
                          "description": "Defines the certificate reference when Certificate user authentication mode is selected.",
                          "type": "object",
                          "properties": {
                            "certificateSecretName": {
                              "type": "string",
                              "description": "The name of the secret containing the certificate and private key (e.g. stored as .der/.pem or .der/.pfx)."
                            }
                          },
                          "required": [
                            "certificateSecretName"
                          ]
                        }
                      },
                      "required": [
                        "method"
                      ]
                    },
                    "additionalConfiguration": {
                      "type": "string",
                      "description": "Stringified JSON that contains connectivity type specific further configuration (e.g. OPC UA, Modbus, ONVIF)."
                    },
                    "discoveredAssetEndpointProfileRef": {
                      "type": "string",
                      "description": "Reference to a discovered asset endpoint profile. Populated only if the asset endpoint profile has been created from discovery flow. Discovered asset endpoint profile name must be provided.",
                      "x-ms-mutability": [
                        "read",
                        "create"
                      ]
                    },
                    "status": {
                      "description": "Read only object to reflect changes that have occurred on the Edge. Similar to Kubernetes status property for custom resources.",
                      "readOnly": true,
                      "type": "object",
                      "properties": {
                        "errors": {
                          "type": "array",
                          "description": "Array object to transfer and persist errors that originate from the Edge.",
                          "items": {
                            "type": "object",
                            "description": "Defines the asset endpoint profile status error properties.",
                            "properties": {
                              "code": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Error code for classification of errors (ex: 400, 404, 500, etc.).",
                                "readOnly": true
                              },
                              "message": {
                                "type": "string",
                                "description": "Human readable helpful error message to provide additional context for error (ex: “targetAddress 'foo' is not a valid url”).",
                                "readOnly": true
                              }
                            }
                          },
                          "readOnly": true,
                          "x-ms-identifiers": []
                        }
                      }
                    },
                    "provisioningState": {
                      "description": "Provisioning state of the resource.",
                      "readOnly": true,
                      "type": "string",
                      "enum": [
                        "Succeeded",
                        "Failed",
                        "Canceled",
                        "Accepted",
                        "Deleting"
                      ],
                      "x-ms-enum": {
                        "name": "ProvisioningState",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Succeeded",
                            "value": "Succeeded",
                            "description": "Resource has been created."
                          },
                          {
                            "name": "Failed",
                            "value": "Failed",
                            "description": "Resource creation failed."
                          },
                          {
                            "name": "Canceled",
                            "value": "Canceled",
                            "description": "Resource creation was canceled."
                          },
                          {
                            "name": "Accepted",
                            "value": "Accepted",
                            "description": "Resource has been accepted by the server."
                          },
                          {
                            "name": "Deleting",
                            "value": "Deleting",
                            "description": "Resource is deleting."
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "targetAddress",
                    "endpointProfileType"
                  ]
                },
                "extendedLocation": {
                  "description": "The extended location.",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ],
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "description": "The extended location type."
                    },
                    "name": {
                      "type": "string",
                      "description": "The extended location name."
                    }
                  },
                  "required": [
                    "type",
                    "name"
                  ]
                }
              },
              "required": [
                "extendedLocation"
              ]
            }
          },
          "202": {
            "description": "Resource update request accepted.",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              },
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "AssetEndpointProfiles_Delete",
        "tags": [
          "AssetEndpointProfiles"
        ],
        "description": "Delete a AssetEndpointProfile",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription. The value must be an UUID.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group. The name is case insensitive.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "x-ms-parameter-location": "method"
          },
          {
            "name": "assetEndpointProfileName",
            "in": "path",
            "description": "Asset Endpoint Profile name parameter.",
            "required": true,
            "type": "string",
            "minLength": 3,
            "maxLength": 63,
            "pattern": "^[a-z0-9][a-z0-9-]*[a-z0-9]$"
          }
        ],
        "responses": {
          "202": {
            "description": "Resource deletion accepted.",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              },
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "204": {
            "description": "Resource does not exist."
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeviceRegistry/assets": {
      "get": {
        "operationId": "Assets_ListByResourceGroup",
        "tags": [
          "Assets"
        ],
        "description": "List Asset resources by resource group",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription. The value must be an UUID.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group. The name is case insensitive.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "type": "object",
              "description": "The response of a Asset list operation.",
              "properties": {
                "value": {
                  "type": "array",
                  "description": "The Asset items on this page",
                  "items": {
                    "type": "object",
                    "description": "Asset definition.",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "arm-id",
                        "description": "Fully qualified resource ID for the resource. E.g. \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}\"",
                        "readOnly": true
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the resource",
                        "readOnly": true
                      },
                      "type": {
                        "type": "string",
                        "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                        "readOnly": true
                      },
                      "systemData": {
                        "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                        "readOnly": true,
                        "type": "object",
                        "properties": {
                          "createdBy": {
                            "type": "string",
                            "description": "The identity that created the resource."
                          },
                          "createdByType": {
                            "type": "string",
                            "description": "The type of identity that created the resource.",
                            "enum": [
                              "User",
                              "Application",
                              "ManagedIdentity",
                              "Key"
                            ],
                            "x-ms-enum": {
                              "name": "createdByType",
                              "modelAsString": true
                            }
                          },
                          "createdAt": {
                            "type": "string",
                            "format": "date-time",
                            "description": "The timestamp of resource creation (UTC)."
                          },
                          "lastModifiedBy": {
                            "type": "string",
                            "description": "The identity that last modified the resource."
                          },
                          "lastModifiedByType": {
                            "type": "string",
                            "description": "The type of identity that last modified the resource.",
                            "enum": [
                              "User",
                              "Application",
                              "ManagedIdentity",
                              "Key"
                            ],
                            "x-ms-enum": {
                              "name": "createdByType",
                              "modelAsString": true
                            }
                          },
                          "lastModifiedAt": {
                            "type": "string",
                            "format": "date-time",
                            "description": "The timestamp of resource last modification (UTC)"
                          }
                        }
                      },
                      "tags": {
                        "type": "object",
                        "description": "Resource tags.",
                        "additionalProperties": {
                          "type": "string"
                        },
                        "x-ms-mutability": [
                          "read",
                          "create",
                          "update"
                        ]
                      },
                      "location": {
                        "type": "string",
                        "description": "The geo-location where the resource lives",
                        "x-ms-mutability": [
                          "read",
                          "create"
                        ]
                      },
                      "properties": {
                        "description": "The resource-specific properties for this resource.",
                        "x-ms-client-flatten": true,
                        "type": "object",
                        "properties": {
                          "uuid": {
                            "type": "string",
                            "description": "Globally unique, immutable, non-reusable id.",
                            "readOnly": true
                          },
                          "enabled": {
                            "type": "boolean",
                            "description": "Enabled/Disabled status of the asset."
                          },
                          "externalAssetId": {
                            "type": "string",
                            "description": "Asset id provided by the customer.",
                            "x-ms-mutability": [
                              "read",
                              "create"
                            ]
                          },
                          "displayName": {
                            "type": "string",
                            "description": "Human-readable display name."
                          },
                          "description": {
                            "type": "string",
                            "description": "Human-readable description of the asset."
                          },
                          "assetEndpointProfileRef": {
                            "type": "string",
                            "description": "A reference to the asset endpoint profile (connection information) used by brokers to connect to an endpoint that provides data points for this asset. Must provide asset endpoint profile name.",
                            "x-ms-mutability": [
                              "read",
                              "create"
                            ]
                          },
                          "version": {
                            "type": "integer",
                            "format": "int64",
                            "description": "An integer that is incremented each time the resource is modified.",
                            "readOnly": true
                          },
                          "manufacturer": {
                            "type": "string",
                            "description": "Asset manufacturer name."
                          },
                          "manufacturerUri": {
                            "type": "string",
                            "description": "Asset manufacturer URI."
                          },
                          "model": {
                            "type": "string",
                            "description": "Asset model name."
                          },
                          "productCode": {
                            "type": "string",
                            "description": "Asset product code."
                          },
                          "hardwareRevision": {
                            "type": "string",
                            "description": "Revision number of the hardware."
                          },
                          "softwareRevision": {
                            "type": "string",
                            "description": "Revision number of the software."
                          },
                          "documentationUri": {
                            "type": "string",
                            "description": "Reference to the documentation."
                          },
                          "serialNumber": {
                            "type": "string",
                            "description": "Asset serial number."
                          },
                          "attributes": {
                            "type": "object",
                            "description": "A set of key-value pairs that contain custom attributes set by the customer.",
                            "additionalProperties": {}
                          },
                          "discoveredAssetRefs": {
                            "type": "array",
                            "description": "Reference to a list of discovered assets. Populated only if the asset has been created from discovery flow. Discovered asset names must be provided.",
                            "items": {
                              "type": "string"
                            },
                            "x-ms-mutability": [
                              "read",
                              "create"
                            ]
                          },
                          "defaultDatasetsConfiguration": {
                            "type": "string",
                            "description": "Stringified JSON that contains connector-specific default configuration for all datasets. Each dataset can have its own configuration that overrides the default settings here."
                          },
                          "defaultEventsConfiguration": {
                            "type": "string",
                            "description": "Stringified JSON that contains connector-specific default configuration for all events. Each event can have its own configuration that overrides the default settings here."
                          },
                          "defaultTopic": {
                            "description": "Object that describes the default topic information for the asset.",
                            "type": "object",
                            "properties": {
                              "path": {
                                "type": "string",
                                "description": "The topic path for messages published to an MQTT broker."
                              },
                              "retain": {
                                "type": "string",
                                "description": "When set to 'Keep', messages published to an MQTT broker will have the retain flag set. Default: 'Never'.",
                                "default": "Never",
                                "enum": [
                                  "Keep",
                                  "Never"
                                ],
                                "x-ms-enum": {
                                  "name": "TopicRetainType",
                                  "modelAsString": true,
                                  "values": [
                                    {
                                      "name": "Keep",
                                      "value": "Keep",
                                      "description": "Retain the messages."
                                    },
                                    {
                                      "name": "Never",
                                      "value": "Never",
                                      "description": "Never retain messages."
                                    }
                                  ]
                                }
                              }
                            },
                            "required": [
                              "path"
                            ]
                          },
                          "datasets": {
                            "type": "array",
                            "description": "Array of datasets that are part of the asset. Each dataset describes the data points that make up the set.",
                            "items": {
                              "type": "object",
                              "description": "Defines the dataset properties.",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "Name of the dataset."
                                },
                                "datasetConfiguration": {
                                  "type": "string",
                                  "description": "Stringified JSON that contains connector-specific JSON string that describes configuration for the specific dataset."
                                },
                                "topic": {
                                  "description": "Object that describes the topic information for the specific dataset.",
                                  "type": "object",
                                  "properties": {
                                    "path": {
                                      "type": "string",
                                      "description": "The topic path for messages published to an MQTT broker."
                                    },
                                    "retain": {
                                      "type": "string",
                                      "description": "When set to 'Keep', messages published to an MQTT broker will have the retain flag set. Default: 'Never'.",
                                      "default": "Never",
                                      "enum": [
                                        "Keep",
                                        "Never"
                                      ],
                                      "x-ms-enum": {
                                        "name": "TopicRetainType",
                                        "modelAsString": true,
                                        "values": [
                                          {
                                            "name": "Keep",
                                            "value": "Keep",
                                            "description": "Retain the messages."
                                          },
                                          {
                                            "name": "Never",
                                            "value": "Never",
                                            "description": "Never retain messages."
                                          }
                                        ]
                                      }
                                    }
                                  },
                                  "required": [
                                    "path"
                                  ]
                                },
                                "dataPoints": {
                                  "type": "array",
                                  "description": "Array of data points that are part of the dataset. Each data point can have per-data point configuration.",
                                  "items": {
                                    "type": "object",
                                    "description": "Defines the data point properties.",
                                    "properties": {
                                      "name": {
                                        "type": "string",
                                        "description": "The name of the data point."
                                      },
                                      "dataSource": {
                                        "type": "string",
                                        "description": "The address of the source of the data in the asset (e.g. URL) so that a client can access the data source on the asset."
                                      },
                                      "dataPointConfiguration": {
                                        "type": "string",
                                        "description": "Stringified JSON that contains connector-specific configuration for the data point. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize."
                                      },
                                      "observabilityMode": {
                                        "type": "string",
                                        "description": "An indication of how the data point should be mapped to OpenTelemetry.",
                                        "default": "None",
                                        "enum": [
                                          "None",
                                          "Counter",
                                          "Gauge",
                                          "Histogram",
                                          "Log"
                                        ],
                                        "x-ms-enum": {
                                          "name": "DataPointObservabilityMode",
                                          "modelAsString": true,
                                          "values": [
                                            {
                                              "name": "None",
                                              "value": "None",
                                              "description": "No mapping to OpenTelemetry."
                                            },
                                            {
                                              "name": "Counter",
                                              "value": "Counter",
                                              "description": "Map as counter to OpenTelemetry."
                                            },
                                            {
                                              "name": "Gauge",
                                              "value": "Gauge",
                                              "description": "Map as gauge to OpenTelemetry."
                                            },
                                            {
                                              "name": "Histogram",
                                              "value": "Histogram",
                                              "description": "Map as histogram to OpenTelemetry."
                                            },
                                            {
                                              "name": "Log",
                                              "value": "Log",
                                              "description": "Map as log to OpenTelemetry."
                                            }
                                          ]
                                        }
                                      }
                                    }
                                  },
                                  "x-ms-identifiers": []
                                }
                              },
                              "required": [
                                "name"
                              ]
                            },
                            "x-ms-identifiers": []
                          },
                          "events": {
                            "type": "array",
                            "description": "Array of events that are part of the asset. Each event can have per-event configuration.",
                            "items": {
                              "type": "object",
                              "description": "Defines the event properties.",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "The name of the event."
                                },
                                "eventNotifier": {
                                  "type": "string",
                                  "description": "The address of the notifier of the event in the asset (e.g. URL) so that a client can access the event on the asset."
                                },
                                "eventConfiguration": {
                                  "type": "string",
                                  "description": "Stringified JSON that contains connector-specific configuration for the event. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize."
                                },
                                "topic": {
                                  "description": "Object that describes the topic information for the specific event.",
                                  "type": "object",
                                  "properties": {
                                    "path": {
                                      "type": "string",
                                      "description": "The topic path for messages published to an MQTT broker."
                                    },
                                    "retain": {
                                      "type": "string",
                                      "description": "When set to 'Keep', messages published to an MQTT broker will have the retain flag set. Default: 'Never'.",
                                      "default": "Never",
                                      "enum": [
                                        "Keep",
                                        "Never"
                                      ],
                                      "x-ms-enum": {
                                        "name": "TopicRetainType",
                                        "modelAsString": true,
                                        "values": [
                                          {
                                            "name": "Keep",
                                            "value": "Keep",
                                            "description": "Retain the messages."
                                          },
                                          {
                                            "name": "Never",
                                            "value": "Never",
                                            "description": "Never retain messages."
                                          }
                                        ]
                                      }
                                    }
                                  },
                                  "required": [
                                    "path"
                                  ]
                                },
                                "observabilityMode": {
                                  "type": "string",
                                  "description": "An indication of how the event should be mapped to OpenTelemetry.",
                                  "default": "None",
                                  "enum": [
                                    "None",
                                    "Log"
                                  ],
                                  "x-ms-enum": {
                                    "name": "EventObservabilityMode",
                                    "modelAsString": true,
                                    "values": [
                                      {
                                        "name": "None",
                                        "value": "None",
                                        "description": "No mapping to OpenTelemetry."
                                      },
                                      {
                                        "name": "Log",
                                        "value": "Log",
                                        "description": "Map as log to OpenTelemetry."
                                      }
                                    ]
                                  }
                                }
                              }
                            },
                            "x-ms-identifiers": []
                          },
                          "status": {
                            "description": "Read only object to reflect changes that have occurred on the Edge. Similar to Kubernetes status property for custom resources.",
                            "readOnly": true,
                            "type": "object",
                            "properties": {
                              "errors": {
                                "type": "array",
                                "description": "Array object to transfer and persist errors that originate from the Edge.",
                                "items": {
                                  "type": "object",
                                  "description": "Defines the asset status error properties.",
                                  "properties": {
                                    "code": {
                                      "type": "integer",
                                      "format": "int32",
                                      "description": "Error code for classification of errors (ex: 400, 404, 500, etc.).",
                                      "readOnly": true
                                    },
                                    "message": {
                                      "type": "string",
                                      "description": "Human readable helpful error message to provide additional context for error (ex: “capability Id 'foo' does not exist”).",
                                      "readOnly": true
                                    }
                                  }
                                },
                                "readOnly": true,
                                "x-ms-identifiers": []
                              },
                              "version": {
                                "type": "integer",
                                "format": "int64",
                                "description": "A read only incremental counter indicating the number of times the configuration has been modified from the perspective of the current actual (Edge) state of the Asset. Edge would be the only writer of this value and would sync back up to the cloud. In steady state, this should equal version.",
                                "readOnly": true
                              },
                              "datasets": {
                                "type": "array",
                                "description": "Array of dataset statuses that describe the status of each dataset.",
                                "items": {
                                  "type": "object",
                                  "description": "Defines the asset status dataset properties.",
                                  "properties": {
                                    "name": {
                                      "type": "string",
                                      "description": "The name of the dataset. Must be unique within the status.datasets array. This name is used to correlate between the spec and status dataset information.",
                                      "readOnly": true
                                    },
                                    "messageSchemaReference": {
                                      "description": "The message schema reference object.",
                                      "readOnly": true,
                                      "type": "object",
                                      "properties": {
                                        "schemaRegistryNamespace": {
                                          "type": "string",
                                          "description": "The message schema registry namespace.",
                                          "readOnly": true
                                        },
                                        "schemaName": {
                                          "type": "string",
                                          "description": "The message schema name.",
                                          "readOnly": true
                                        },
                                        "schemaVersion": {
                                          "type": "string",
                                          "description": "The message schema version.",
                                          "readOnly": true
                                        }
                                      },
                                      "required": [
                                        "schemaRegistryNamespace",
                                        "schemaName",
                                        "schemaVersion"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "name"
                                  ]
                                },
                                "readOnly": true,
                                "x-ms-identifiers": []
                              },
                              "events": {
                                "type": "array",
                                "description": "Array of event statuses that describe the status of each event.",
                                "items": {
                                  "type": "object",
                                  "description": "Defines the asset status event properties.",
                                  "properties": {
                                    "name": {
                                      "type": "string",
                                      "description": "The name of the event. Must be unique within the status.events array. This name is used to correlate between the spec and status event information.",
                                      "readOnly": true
                                    },
                                    "messageSchemaReference": {
                                      "description": "The message schema reference object.",
                                      "readOnly": true,
                                      "type": "object",
                                      "properties": {
                                        "schemaRegistryNamespace": {
                                          "type": "string",
                                          "description": "The message schema registry namespace.",
                                          "readOnly": true
                                        },
                                        "schemaName": {
                                          "type": "string",
                                          "description": "The message schema name.",
                                          "readOnly": true
                                        },
                                        "schemaVersion": {
                                          "type": "string",
                                          "description": "The message schema version.",
                                          "readOnly": true
                                        }
                                      },
                                      "required": [
                                        "schemaRegistryNamespace",
                                        "schemaName",
                                        "schemaVersion"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "name"
                                  ]
                                },
                                "readOnly": true,
                                "x-ms-identifiers": []
                              }
                            }
                          },
                          "provisioningState": {
                            "description": "Provisioning state of the resource.",
                            "readOnly": true,
                            "type": "string",
                            "enum": [
                              "Succeeded",
                              "Failed",
                              "Canceled",
                              "Accepted",
                              "Deleting"
                            ],
                            "x-ms-enum": {
                              "name": "ProvisioningState",
                              "modelAsString": true,
                              "values": [
                                {
                                  "name": "Succeeded",
                                  "value": "Succeeded",
                                  "description": "Resource has been created."
                                },
                                {
                                  "name": "Failed",
                                  "value": "Failed",
                                  "description": "Resource creation failed."
                                },
                                {
                                  "name": "Canceled",
                                  "value": "Canceled",
                                  "description": "Resource creation was canceled."
                                },
                                {
                                  "name": "Accepted",
                                  "value": "Accepted",
                                  "description": "Resource has been accepted by the server."
                                },
                                {
                                  "name": "Deleting",
                                  "value": "Deleting",
                                  "description": "Resource is deleting."
                                }
                              ]
                            }
                          }
                        },
                        "required": [
                          "assetEndpointProfileRef"
                        ]
                      },
                      "extendedLocation": {
                        "description": "The extended location.",
                        "x-ms-mutability": [
                          "read",
                          "create"
                        ],
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "description": "The extended location type."
                          },
                          "name": {
                            "type": "string",
                            "description": "The extended location name."
                          }
                        },
                        "required": [
                          "type",
                          "name"
                        ]
                      }
                    },
                    "required": [
                      "extendedLocation"
                    ]
                  }
                },
                "nextLink": {
                  "type": "string",
                  "format": "uri",
                  "description": "The link to the next page of items"
                }
              },
              "required": [
                "value"
              ]
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeviceRegistry/assets/{assetName}": {
      "get": {
        "operationId": "Assets_Get",
        "tags": [
          "Assets"
        ],
        "description": "Get a Asset",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription. The value must be an UUID.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group. The name is case insensitive.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "x-ms-parameter-location": "method"
          },
          {
            "name": "assetName",
            "in": "path",
            "description": "Asset name parameter.",
            "required": true,
            "type": "string",
            "minLength": 3,
            "maxLength": 63,
            "pattern": "^[a-z0-9][a-z0-9-]*[a-z0-9]$"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "type": "object",
              "description": "Asset definition.",
              "properties": {
                "id": {
                  "type": "string",
                  "format": "arm-id",
                  "description": "Fully qualified resource ID for the resource. E.g. \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}\"",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "description": "The name of the resource",
                  "readOnly": true
                },
                "type": {
                  "type": "string",
                  "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                  "readOnly": true
                },
                "systemData": {
                  "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                  "readOnly": true,
                  "type": "object",
                  "properties": {
                    "createdBy": {
                      "type": "string",
                      "description": "The identity that created the resource."
                    },
                    "createdByType": {
                      "type": "string",
                      "description": "The type of identity that created the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource creation (UTC)."
                    },
                    "lastModifiedBy": {
                      "type": "string",
                      "description": "The identity that last modified the resource."
                    },
                    "lastModifiedByType": {
                      "type": "string",
                      "description": "The type of identity that last modified the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "lastModifiedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource last modification (UTC)"
                    }
                  }
                },
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "x-ms-mutability": [
                    "read",
                    "create",
                    "update"
                  ]
                },
                "location": {
                  "type": "string",
                  "description": "The geo-location where the resource lives",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ]
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "uuid": {
                      "type": "string",
                      "description": "Globally unique, immutable, non-reusable id.",
                      "readOnly": true
                    },
                    "enabled": {
                      "type": "boolean",
                      "description": "Enabled/Disabled status of the asset."
                    },
                    "externalAssetId": {
                      "type": "string",
                      "description": "Asset id provided by the customer.",
                      "x-ms-mutability": [
                        "read",
                        "create"
                      ]
                    },
                    "displayName": {
                      "type": "string",
                      "description": "Human-readable display name."
                    },
                    "description": {
                      "type": "string",
                      "description": "Human-readable description of the asset."
                    },
                    "assetEndpointProfileRef": {
                      "type": "string",
                      "description": "A reference to the asset endpoint profile (connection information) used by brokers to connect to an endpoint that provides data points for this asset. Must provide asset endpoint profile name.",
                      "x-ms-mutability": [
                        "read",
                        "create"
                      ]
                    },
                    "version": {
                      "type": "integer",
                      "format": "int64",
                      "description": "An integer that is incremented each time the resource is modified.",
                      "readOnly": true
                    },
                    "manufacturer": {
                      "type": "string",
                      "description": "Asset manufacturer name."
                    },
                    "manufacturerUri": {
                      "type": "string",
                      "description": "Asset manufacturer URI."
                    },
                    "model": {
                      "type": "string",
                      "description": "Asset model name."
                    },
                    "productCode": {
                      "type": "string",
                      "description": "Asset product code."
                    },
                    "hardwareRevision": {
                      "type": "string",
                      "description": "Revision number of the hardware."
                    },
                    "softwareRevision": {
                      "type": "string",
                      "description": "Revision number of the software."
                    },
                    "documentationUri": {
                      "type": "string",
                      "description": "Reference to the documentation."
                    },
                    "serialNumber": {
                      "type": "string",
                      "description": "Asset serial number."
                    },
                    "attributes": {
                      "type": "object",
                      "description": "A set of key-value pairs that contain custom attributes set by the customer.",
                      "additionalProperties": {}
                    },
                    "discoveredAssetRefs": {
                      "type": "array",
                      "description": "Reference to a list of discovered assets. Populated only if the asset has been created from discovery flow. Discovered asset names must be provided.",
                      "items": {
                        "type": "string"
                      },
                      "x-ms-mutability": [
                        "read",
                        "create"
                      ]
                    },
                    "defaultDatasetsConfiguration": {
                      "type": "string",
                      "description": "Stringified JSON that contains connector-specific default configuration for all datasets. Each dataset can have its own configuration that overrides the default settings here."
                    },
                    "defaultEventsConfiguration": {
                      "type": "string",
                      "description": "Stringified JSON that contains connector-specific default configuration for all events. Each event can have its own configuration that overrides the default settings here."
                    },
                    "defaultTopic": {
                      "description": "Object that describes the default topic information for the asset.",
                      "type": "object",
                      "properties": {
                        "path": {
                          "type": "string",
                          "description": "The topic path for messages published to an MQTT broker."
                        },
                        "retain": {
                          "type": "string",
                          "description": "When set to 'Keep', messages published to an MQTT broker will have the retain flag set. Default: 'Never'.",
                          "default": "Never",
                          "enum": [
                            "Keep",
                            "Never"
                          ],
                          "x-ms-enum": {
                            "name": "TopicRetainType",
                            "modelAsString": true,
                            "values": [
                              {
                                "name": "Keep",
                                "value": "Keep",
                                "description": "Retain the messages."
                              },
                              {
                                "name": "Never",
                                "value": "Never",
                                "description": "Never retain messages."
                              }
                            ]
                          }
                        }
                      },
                      "required": [
                        "path"
                      ]
                    },
                    "datasets": {
                      "type": "array",
                      "description": "Array of datasets that are part of the asset. Each dataset describes the data points that make up the set.",
                      "items": {
                        "type": "object",
                        "description": "Defines the dataset properties.",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "Name of the dataset."
                          },
                          "datasetConfiguration": {
                            "type": "string",
                            "description": "Stringified JSON that contains connector-specific JSON string that describes configuration for the specific dataset."
                          },
                          "topic": {
                            "description": "Object that describes the topic information for the specific dataset.",
                            "type": "object",
                            "properties": {
                              "path": {
                                "type": "string",
                                "description": "The topic path for messages published to an MQTT broker."
                              },
                              "retain": {
                                "type": "string",
                                "description": "When set to 'Keep', messages published to an MQTT broker will have the retain flag set. Default: 'Never'.",
                                "default": "Never",
                                "enum": [
                                  "Keep",
                                  "Never"
                                ],
                                "x-ms-enum": {
                                  "name": "TopicRetainType",
                                  "modelAsString": true,
                                  "values": [
                                    {
                                      "name": "Keep",
                                      "value": "Keep",
                                      "description": "Retain the messages."
                                    },
                                    {
                                      "name": "Never",
                                      "value": "Never",
                                      "description": "Never retain messages."
                                    }
                                  ]
                                }
                              }
                            },
                            "required": [
                              "path"
                            ]
                          },
                          "dataPoints": {
                            "type": "array",
                            "description": "Array of data points that are part of the dataset. Each data point can have per-data point configuration.",
                            "items": {
                              "type": "object",
                              "description": "Defines the data point properties.",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "The name of the data point."
                                },
                                "dataSource": {
                                  "type": "string",
                                  "description": "The address of the source of the data in the asset (e.g. URL) so that a client can access the data source on the asset."
                                },
                                "dataPointConfiguration": {
                                  "type": "string",
                                  "description": "Stringified JSON that contains connector-specific configuration for the data point. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize."
                                },
                                "observabilityMode": {
                                  "type": "string",
                                  "description": "An indication of how the data point should be mapped to OpenTelemetry.",
                                  "default": "None",
                                  "enum": [
                                    "None",
                                    "Counter",
                                    "Gauge",
                                    "Histogram",
                                    "Log"
                                  ],
                                  "x-ms-enum": {
                                    "name": "DataPointObservabilityMode",
                                    "modelAsString": true,
                                    "values": [
                                      {
                                        "name": "None",
                                        "value": "None",
                                        "description": "No mapping to OpenTelemetry."
                                      },
                                      {
                                        "name": "Counter",
                                        "value": "Counter",
                                        "description": "Map as counter to OpenTelemetry."
                                      },
                                      {
                                        "name": "Gauge",
                                        "value": "Gauge",
                                        "description": "Map as gauge to OpenTelemetry."
                                      },
                                      {
                                        "name": "Histogram",
                                        "value": "Histogram",
                                        "description": "Map as histogram to OpenTelemetry."
                                      },
                                      {
                                        "name": "Log",
                                        "value": "Log",
                                        "description": "Map as log to OpenTelemetry."
                                      }
                                    ]
                                  }
                                }
                              }
                            },
                            "x-ms-identifiers": []
                          }
                        },
                        "required": [
                          "name"
                        ]
                      },
                      "x-ms-identifiers": []
                    },
                    "events": {
                      "type": "array",
                      "description": "Array of events that are part of the asset. Each event can have per-event configuration.",
                      "items": {
                        "type": "object",
                        "description": "Defines the event properties.",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "The name of the event."
                          },
                          "eventNotifier": {
                            "type": "string",
                            "description": "The address of the notifier of the event in the asset (e.g. URL) so that a client can access the event on the asset."
                          },
                          "eventConfiguration": {
                            "type": "string",
                            "description": "Stringified JSON that contains connector-specific configuration for the event. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize."
                          },
                          "topic": {
                            "description": "Object that describes the topic information for the specific event.",
                            "type": "object",
                            "properties": {
                              "path": {
                                "type": "string",
                                "description": "The topic path for messages published to an MQTT broker."
                              },
                              "retain": {
                                "type": "string",
                                "description": "When set to 'Keep', messages published to an MQTT broker will have the retain flag set. Default: 'Never'.",
                                "default": "Never",
                                "enum": [
                                  "Keep",
                                  "Never"
                                ],
                                "x-ms-enum": {
                                  "name": "TopicRetainType",
                                  "modelAsString": true,
                                  "values": [
                                    {
                                      "name": "Keep",
                                      "value": "Keep",
                                      "description": "Retain the messages."
                                    },
                                    {
                                      "name": "Never",
                                      "value": "Never",
                                      "description": "Never retain messages."
                                    }
                                  ]
                                }
                              }
                            },
                            "required": [
                              "path"
                            ]
                          },
                          "observabilityMode": {
                            "type": "string",
                            "description": "An indication of how the event should be mapped to OpenTelemetry.",
                            "default": "None",
                            "enum": [
                              "None",
                              "Log"
                            ],
                            "x-ms-enum": {
                              "name": "EventObservabilityMode",
                              "modelAsString": true,
                              "values": [
                                {
                                  "name": "None",
                                  "value": "None",
                                  "description": "No mapping to OpenTelemetry."
                                },
                                {
                                  "name": "Log",
                                  "value": "Log",
                                  "description": "Map as log to OpenTelemetry."
                                }
                              ]
                            }
                          }
                        }
                      },
                      "x-ms-identifiers": []
                    },
                    "status": {
                      "description": "Read only object to reflect changes that have occurred on the Edge. Similar to Kubernetes status property for custom resources.",
                      "readOnly": true,
                      "type": "object",
                      "properties": {
                        "errors": {
                          "type": "array",
                          "description": "Array object to transfer and persist errors that originate from the Edge.",
                          "items": {
                            "type": "object",
                            "description": "Defines the asset status error properties.",
                            "properties": {
                              "code": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Error code for classification of errors (ex: 400, 404, 500, etc.).",
                                "readOnly": true
                              },
                              "message": {
                                "type": "string",
                                "description": "Human readable helpful error message to provide additional context for error (ex: “capability Id 'foo' does not exist”).",
                                "readOnly": true
                              }
                            }
                          },
                          "readOnly": true,
                          "x-ms-identifiers": []
                        },
                        "version": {
                          "type": "integer",
                          "format": "int64",
                          "description": "A read only incremental counter indicating the number of times the configuration has been modified from the perspective of the current actual (Edge) state of the Asset. Edge would be the only writer of this value and would sync back up to the cloud. In steady state, this should equal version.",
                          "readOnly": true
                        },
                        "datasets": {
                          "type": "array",
                          "description": "Array of dataset statuses that describe the status of each dataset.",
                          "items": {
                            "type": "object",
                            "description": "Defines the asset status dataset properties.",
                            "properties": {
                              "name": {
                                "type": "string",
                                "description": "The name of the dataset. Must be unique within the status.datasets array. This name is used to correlate between the spec and status dataset information.",
                                "readOnly": true
                              },
                              "messageSchemaReference": {
                                "description": "The message schema reference object.",
                                "readOnly": true,
                                "type": "object",
                                "properties": {
                                  "schemaRegistryNamespace": {
                                    "type": "string",
                                    "description": "The message schema registry namespace.",
                                    "readOnly": true
                                  },
                                  "schemaName": {
                                    "type": "string",
                                    "description": "The message schema name.",
                                    "readOnly": true
                                  },
                                  "schemaVersion": {
                                    "type": "string",
                                    "description": "The message schema version.",
                                    "readOnly": true
                                  }
                                },
                                "required": [
                                  "schemaRegistryNamespace",
                                  "schemaName",
                                  "schemaVersion"
                                ]
                              }
                            },
                            "required": [
                              "name"
                            ]
                          },
                          "readOnly": true,
                          "x-ms-identifiers": []
                        },
                        "events": {
                          "type": "array",
                          "description": "Array of event statuses that describe the status of each event.",
                          "items": {
                            "type": "object",
                            "description": "Defines the asset status event properties.",
                            "properties": {
                              "name": {
                                "type": "string",
                                "description": "The name of the event. Must be unique within the status.events array. This name is used to correlate between the spec and status event information.",
                                "readOnly": true
                              },
                              "messageSchemaReference": {
                                "description": "The message schema reference object.",
                                "readOnly": true,
                                "type": "object",
                                "properties": {
                                  "schemaRegistryNamespace": {
                                    "type": "string",
                                    "description": "The message schema registry namespace.",
                                    "readOnly": true
                                  },
                                  "schemaName": {
                                    "type": "string",
                                    "description": "The message schema name.",
                                    "readOnly": true
                                  },
                                  "schemaVersion": {
                                    "type": "string",
                                    "description": "The message schema version.",
                                    "readOnly": true
                                  }
                                },
                                "required": [
                                  "schemaRegistryNamespace",
                                  "schemaName",
                                  "schemaVersion"
                                ]
                              }
                            },
                            "required": [
                              "name"
                            ]
                          },
                          "readOnly": true,
                          "x-ms-identifiers": []
                        }
                      }
                    },
                    "provisioningState": {
                      "description": "Provisioning state of the resource.",
                      "readOnly": true,
                      "type": "string",
                      "enum": [
                        "Succeeded",
                        "Failed",
                        "Canceled",
                        "Accepted",
                        "Deleting"
                      ],
                      "x-ms-enum": {
                        "name": "ProvisioningState",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Succeeded",
                            "value": "Succeeded",
                            "description": "Resource has been created."
                          },
                          {
                            "name": "Failed",
                            "value": "Failed",
                            "description": "Resource creation failed."
                          },
                          {
                            "name": "Canceled",
                            "value": "Canceled",
                            "description": "Resource creation was canceled."
                          },
                          {
                            "name": "Accepted",
                            "value": "Accepted",
                            "description": "Resource has been accepted by the server."
                          },
                          {
                            "name": "Deleting",
                            "value": "Deleting",
                            "description": "Resource is deleting."
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "assetEndpointProfileRef"
                  ]
                },
                "extendedLocation": {
                  "description": "The extended location.",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ],
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "description": "The extended location type."
                    },
                    "name": {
                      "type": "string",
                      "description": "The extended location name."
                    }
                  },
                  "required": [
                    "type",
                    "name"
                  ]
                }
              },
              "required": [
                "extendedLocation"
              ]
            }
          }
        }
      },
      "put": {
        "operationId": "Assets_CreateOrReplace",
        "tags": [
          "Assets"
        ],
        "description": "Create a Asset",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription. The value must be an UUID.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group. The name is case insensitive.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "x-ms-parameter-location": "method"
          },
          {
            "name": "assetName",
            "in": "path",
            "description": "Asset name parameter.",
            "required": true,
            "type": "string",
            "minLength": 3,
            "maxLength": 63,
            "pattern": "^[a-z0-9][a-z0-9-]*[a-z0-9]$"
          },
          {
            "name": "resource",
            "in": "body",
            "description": "Resource create parameters.",
            "required": true,
            "schema": {
              "type": "object",
              "description": "Asset definition.",
              "properties": {
                "id": {
                  "type": "string",
                  "format": "arm-id",
                  "description": "Fully qualified resource ID for the resource. E.g. \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}\"",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "description": "The name of the resource",
                  "readOnly": true
                },
                "type": {
                  "type": "string",
                  "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                  "readOnly": true
                },
                "systemData": {
                  "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                  "readOnly": true,
                  "type": "object",
                  "properties": {
                    "createdBy": {
                      "type": "string",
                      "description": "The identity that created the resource."
                    },
                    "createdByType": {
                      "type": "string",
                      "description": "The type of identity that created the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource creation (UTC)."
                    },
                    "lastModifiedBy": {
                      "type": "string",
                      "description": "The identity that last modified the resource."
                    },
                    "lastModifiedByType": {
                      "type": "string",
                      "description": "The type of identity that last modified the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "lastModifiedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource last modification (UTC)"
                    }
                  }
                },
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "x-ms-mutability": [
                    "read",
                    "create",
                    "update"
                  ]
                },
                "location": {
                  "type": "string",
                  "description": "The geo-location where the resource lives",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ]
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "uuid": {
                      "type": "string",
                      "description": "Globally unique, immutable, non-reusable id.",
                      "readOnly": true
                    },
                    "enabled": {
                      "type": "boolean",
                      "description": "Enabled/Disabled status of the asset."
                    },
                    "externalAssetId": {
                      "type": "string",
                      "description": "Asset id provided by the customer.",
                      "x-ms-mutability": [
                        "read",
                        "create"
                      ]
                    },
                    "displayName": {
                      "type": "string",
                      "description": "Human-readable display name."
                    },
                    "description": {
                      "type": "string",
                      "description": "Human-readable description of the asset."
                    },
                    "assetEndpointProfileRef": {
                      "type": "string",
                      "description": "A reference to the asset endpoint profile (connection information) used by brokers to connect to an endpoint that provides data points for this asset. Must provide asset endpoint profile name.",
                      "x-ms-mutability": [
                        "read",
                        "create"
                      ]
                    },
                    "version": {
                      "type": "integer",
                      "format": "int64",
                      "description": "An integer that is incremented each time the resource is modified.",
                      "readOnly": true
                    },
                    "manufacturer": {
                      "type": "string",
                      "description": "Asset manufacturer name."
                    },
                    "manufacturerUri": {
                      "type": "string",
                      "description": "Asset manufacturer URI."
                    },
                    "model": {
                      "type": "string",
                      "description": "Asset model name."
                    },
                    "productCode": {
                      "type": "string",
                      "description": "Asset product code."
                    },
                    "hardwareRevision": {
                      "type": "string",
                      "description": "Revision number of the hardware."
                    },
                    "softwareRevision": {
                      "type": "string",
                      "description": "Revision number of the software."
                    },
                    "documentationUri": {
                      "type": "string",
                      "description": "Reference to the documentation."
                    },
                    "serialNumber": {
                      "type": "string",
                      "description": "Asset serial number."
                    },
                    "attributes": {
                      "type": "object",
                      "description": "A set of key-value pairs that contain custom attributes set by the customer.",
                      "additionalProperties": {}
                    },
                    "discoveredAssetRefs": {
                      "type": "array",
                      "description": "Reference to a list of discovered assets. Populated only if the asset has been created from discovery flow. Discovered asset names must be provided.",
                      "items": {
                        "type": "string"
                      },
                      "x-ms-mutability": [
                        "read",
                        "create"
                      ]
                    },
                    "defaultDatasetsConfiguration": {
                      "type": "string",
                      "description": "Stringified JSON that contains connector-specific default configuration for all datasets. Each dataset can have its own configuration that overrides the default settings here."
                    },
                    "defaultEventsConfiguration": {
                      "type": "string",
                      "description": "Stringified JSON that contains connector-specific default configuration for all events. Each event can have its own configuration that overrides the default settings here."
                    },
                    "defaultTopic": {
                      "description": "Object that describes the default topic information for the asset.",
                      "type": "object",
                      "properties": {
                        "path": {
                          "type": "string",
                          "description": "The topic path for messages published to an MQTT broker."
                        },
                        "retain": {
                          "type": "string",
                          "description": "When set to 'Keep', messages published to an MQTT broker will have the retain flag set. Default: 'Never'.",
                          "default": "Never",
                          "enum": [
                            "Keep",
                            "Never"
                          ],
                          "x-ms-enum": {
                            "name": "TopicRetainType",
                            "modelAsString": true,
                            "values": [
                              {
                                "name": "Keep",
                                "value": "Keep",
                                "description": "Retain the messages."
                              },
                              {
                                "name": "Never",
                                "value": "Never",
                                "description": "Never retain messages."
                              }
                            ]
                          }
                        }
                      },
                      "required": [
                        "path"
                      ]
                    },
                    "datasets": {
                      "type": "array",
                      "description": "Array of datasets that are part of the asset. Each dataset describes the data points that make up the set.",
                      "items": {
                        "type": "object",
                        "description": "Defines the dataset properties.",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "Name of the dataset."
                          },
                          "datasetConfiguration": {
                            "type": "string",
                            "description": "Stringified JSON that contains connector-specific JSON string that describes configuration for the specific dataset."
                          },
                          "topic": {
                            "description": "Object that describes the topic information for the specific dataset.",
                            "type": "object",
                            "properties": {
                              "path": {
                                "type": "string",
                                "description": "The topic path for messages published to an MQTT broker."
                              },
                              "retain": {
                                "type": "string",
                                "description": "When set to 'Keep', messages published to an MQTT broker will have the retain flag set. Default: 'Never'.",
                                "default": "Never",
                                "enum": [
                                  "Keep",
                                  "Never"
                                ],
                                "x-ms-enum": {
                                  "name": "TopicRetainType",
                                  "modelAsString": true,
                                  "values": [
                                    {
                                      "name": "Keep",
                                      "value": "Keep",
                                      "description": "Retain the messages."
                                    },
                                    {
                                      "name": "Never",
                                      "value": "Never",
                                      "description": "Never retain messages."
                                    }
                                  ]
                                }
                              }
                            },
                            "required": [
                              "path"
                            ]
                          },
                          "dataPoints": {
                            "type": "array",
                            "description": "Array of data points that are part of the dataset. Each data point can have per-data point configuration.",
                            "items": {
                              "type": "object",
                              "description": "Defines the data point properties.",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "The name of the data point."
                                },
                                "dataSource": {
                                  "type": "string",
                                  "description": "The address of the source of the data in the asset (e.g. URL) so that a client can access the data source on the asset."
                                },
                                "dataPointConfiguration": {
                                  "type": "string",
                                  "description": "Stringified JSON that contains connector-specific configuration for the data point. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize."
                                },
                                "observabilityMode": {
                                  "type": "string",
                                  "description": "An indication of how the data point should be mapped to OpenTelemetry.",
                                  "default": "None",
                                  "enum": [
                                    "None",
                                    "Counter",
                                    "Gauge",
                                    "Histogram",
                                    "Log"
                                  ],
                                  "x-ms-enum": {
                                    "name": "DataPointObservabilityMode",
                                    "modelAsString": true,
                                    "values": [
                                      {
                                        "name": "None",
                                        "value": "None",
                                        "description": "No mapping to OpenTelemetry."
                                      },
                                      {
                                        "name": "Counter",
                                        "value": "Counter",
                                        "description": "Map as counter to OpenTelemetry."
                                      },
                                      {
                                        "name": "Gauge",
                                        "value": "Gauge",
                                        "description": "Map as gauge to OpenTelemetry."
                                      },
                                      {
                                        "name": "Histogram",
                                        "value": "Histogram",
                                        "description": "Map as histogram to OpenTelemetry."
                                      },
                                      {
                                        "name": "Log",
                                        "value": "Log",
                                        "description": "Map as log to OpenTelemetry."
                                      }
                                    ]
                                  }
                                }
                              }
                            },
                            "x-ms-identifiers": []
                          }
                        },
                        "required": [
                          "name"
                        ]
                      },
                      "x-ms-identifiers": []
                    },
                    "events": {
                      "type": "array",
                      "description": "Array of events that are part of the asset. Each event can have per-event configuration.",
                      "items": {
                        "type": "object",
                        "description": "Defines the event properties.",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "The name of the event."
                          },
                          "eventNotifier": {
                            "type": "string",
                            "description": "The address of the notifier of the event in the asset (e.g. URL) so that a client can access the event on the asset."
                          },
                          "eventConfiguration": {
                            "type": "string",
                            "description": "Stringified JSON that contains connector-specific configuration for the event. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize."
                          },
                          "topic": {
                            "description": "Object that describes the topic information for the specific event.",
                            "type": "object",
                            "properties": {
                              "path": {
                                "type": "string",
                                "description": "The topic path for messages published to an MQTT broker."
                              },
                              "retain": {
                                "type": "string",
                                "description": "When set to 'Keep', messages published to an MQTT broker will have the retain flag set. Default: 'Never'.",
                                "default": "Never",
                                "enum": [
                                  "Keep",
                                  "Never"
                                ],
                                "x-ms-enum": {
                                  "name": "TopicRetainType",
                                  "modelAsString": true,
                                  "values": [
                                    {
                                      "name": "Keep",
                                      "value": "Keep",
                                      "description": "Retain the messages."
                                    },
                                    {
                                      "name": "Never",
                                      "value": "Never",
                                      "description": "Never retain messages."
                                    }
                                  ]
                                }
                              }
                            },
                            "required": [
                              "path"
                            ]
                          },
                          "observabilityMode": {
                            "type": "string",
                            "description": "An indication of how the event should be mapped to OpenTelemetry.",
                            "default": "None",
                            "enum": [
                              "None",
                              "Log"
                            ],
                            "x-ms-enum": {
                              "name": "EventObservabilityMode",
                              "modelAsString": true,
                              "values": [
                                {
                                  "name": "None",
                                  "value": "None",
                                  "description": "No mapping to OpenTelemetry."
                                },
                                {
                                  "name": "Log",
                                  "value": "Log",
                                  "description": "Map as log to OpenTelemetry."
                                }
                              ]
                            }
                          }
                        }
                      },
                      "x-ms-identifiers": []
                    },
                    "status": {
                      "description": "Read only object to reflect changes that have occurred on the Edge. Similar to Kubernetes status property for custom resources.",
                      "readOnly": true,
                      "type": "object",
                      "properties": {
                        "errors": {
                          "type": "array",
                          "description": "Array object to transfer and persist errors that originate from the Edge.",
                          "items": {
                            "type": "object",
                            "description": "Defines the asset status error properties.",
                            "properties": {
                              "code": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Error code for classification of errors (ex: 400, 404, 500, etc.).",
                                "readOnly": true
                              },
                              "message": {
                                "type": "string",
                                "description": "Human readable helpful error message to provide additional context for error (ex: “capability Id 'foo' does not exist”).",
                                "readOnly": true
                              }
                            }
                          },
                          "readOnly": true,
                          "x-ms-identifiers": []
                        },
                        "version": {
                          "type": "integer",
                          "format": "int64",
                          "description": "A read only incremental counter indicating the number of times the configuration has been modified from the perspective of the current actual (Edge) state of the Asset. Edge would be the only writer of this value and would sync back up to the cloud. In steady state, this should equal version.",
                          "readOnly": true
                        },
                        "datasets": {
                          "type": "array",
                          "description": "Array of dataset statuses that describe the status of each dataset.",
                          "items": {
                            "type": "object",
                            "description": "Defines the asset status dataset properties.",
                            "properties": {
                              "name": {
                                "type": "string",
                                "description": "The name of the dataset. Must be unique within the status.datasets array. This name is used to correlate between the spec and status dataset information.",
                                "readOnly": true
                              },
                              "messageSchemaReference": {
                                "description": "The message schema reference object.",
                                "readOnly": true,
                                "type": "object",
                                "properties": {
                                  "schemaRegistryNamespace": {
                                    "type": "string",
                                    "description": "The message schema registry namespace.",
                                    "readOnly": true
                                  },
                                  "schemaName": {
                                    "type": "string",
                                    "description": "The message schema name.",
                                    "readOnly": true
                                  },
                                  "schemaVersion": {
                                    "type": "string",
                                    "description": "The message schema version.",
                                    "readOnly": true
                                  }
                                },
                                "required": [
                                  "schemaRegistryNamespace",
                                  "schemaName",
                                  "schemaVersion"
                                ]
                              }
                            },
                            "required": [
                              "name"
                            ]
                          },
                          "readOnly": true,
                          "x-ms-identifiers": []
                        },
                        "events": {
                          "type": "array",
                          "description": "Array of event statuses that describe the status of each event.",
                          "items": {
                            "type": "object",
                            "description": "Defines the asset status event properties.",
                            "properties": {
                              "name": {
                                "type": "string",
                                "description": "The name of the event. Must be unique within the status.events array. This name is used to correlate between the spec and status event information.",
                                "readOnly": true
                              },
                              "messageSchemaReference": {
                                "description": "The message schema reference object.",
                                "readOnly": true,
                                "type": "object",
                                "properties": {
                                  "schemaRegistryNamespace": {
                                    "type": "string",
                                    "description": "The message schema registry namespace.",
                                    "readOnly": true
                                  },
                                  "schemaName": {
                                    "type": "string",
                                    "description": "The message schema name.",
                                    "readOnly": true
                                  },
                                  "schemaVersion": {
                                    "type": "string",
                                    "description": "The message schema version.",
                                    "readOnly": true
                                  }
                                },
                                "required": [
                                  "schemaRegistryNamespace",
                                  "schemaName",
                                  "schemaVersion"
                                ]
                              }
                            },
                            "required": [
                              "name"
                            ]
                          },
                          "readOnly": true,
                          "x-ms-identifiers": []
                        }
                      }
                    },
                    "provisioningState": {
                      "description": "Provisioning state of the resource.",
                      "readOnly": true,
                      "type": "string",
                      "enum": [
                        "Succeeded",
                        "Failed",
                        "Canceled",
                        "Accepted",
                        "Deleting"
                      ],
                      "x-ms-enum": {
                        "name": "ProvisioningState",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Succeeded",
                            "value": "Succeeded",
                            "description": "Resource has been created."
                          },
                          {
                            "name": "Failed",
                            "value": "Failed",
                            "description": "Resource creation failed."
                          },
                          {
                            "name": "Canceled",
                            "value": "Canceled",
                            "description": "Resource creation was canceled."
                          },
                          {
                            "name": "Accepted",
                            "value": "Accepted",
                            "description": "Resource has been accepted by the server."
                          },
                          {
                            "name": "Deleting",
                            "value": "Deleting",
                            "description": "Resource is deleting."
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "assetEndpointProfileRef"
                  ]
                },
                "extendedLocation": {
                  "description": "The extended location.",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ],
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "description": "The extended location type."
                    },
                    "name": {
                      "type": "string",
                      "description": "The extended location name."
                    }
                  },
                  "required": [
                    "type",
                    "name"
                  ]
                }
              },
              "required": [
                "extendedLocation"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resource 'Asset' update operation succeeded",
            "schema": {
              "type": "object",
              "description": "Asset definition.",
              "properties": {
                "id": {
                  "type": "string",
                  "format": "arm-id",
                  "description": "Fully qualified resource ID for the resource. E.g. \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}\"",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "description": "The name of the resource",
                  "readOnly": true
                },
                "type": {
                  "type": "string",
                  "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                  "readOnly": true
                },
                "systemData": {
                  "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                  "readOnly": true,
                  "type": "object",
                  "properties": {
                    "createdBy": {
                      "type": "string",
                      "description": "The identity that created the resource."
                    },
                    "createdByType": {
                      "type": "string",
                      "description": "The type of identity that created the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource creation (UTC)."
                    },
                    "lastModifiedBy": {
                      "type": "string",
                      "description": "The identity that last modified the resource."
                    },
                    "lastModifiedByType": {
                      "type": "string",
                      "description": "The type of identity that last modified the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "lastModifiedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource last modification (UTC)"
                    }
                  }
                },
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "x-ms-mutability": [
                    "read",
                    "create",
                    "update"
                  ]
                },
                "location": {
                  "type": "string",
                  "description": "The geo-location where the resource lives",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ]
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "uuid": {
                      "type": "string",
                      "description": "Globally unique, immutable, non-reusable id.",
                      "readOnly": true
                    },
                    "enabled": {
                      "type": "boolean",
                      "description": "Enabled/Disabled status of the asset."
                    },
                    "externalAssetId": {
                      "type": "string",
                      "description": "Asset id provided by the customer.",
                      "x-ms-mutability": [
                        "read",
                        "create"
                      ]
                    },
                    "displayName": {
                      "type": "string",
                      "description": "Human-readable display name."
                    },
                    "description": {
                      "type": "string",
                      "description": "Human-readable description of the asset."
                    },
                    "assetEndpointProfileRef": {
                      "type": "string",
                      "description": "A reference to the asset endpoint profile (connection information) used by brokers to connect to an endpoint that provides data points for this asset. Must provide asset endpoint profile name.",
                      "x-ms-mutability": [
                        "read",
                        "create"
                      ]
                    },
                    "version": {
                      "type": "integer",
                      "format": "int64",
                      "description": "An integer that is incremented each time the resource is modified.",
                      "readOnly": true
                    },
                    "manufacturer": {
                      "type": "string",
                      "description": "Asset manufacturer name."
                    },
                    "manufacturerUri": {
                      "type": "string",
                      "description": "Asset manufacturer URI."
                    },
                    "model": {
                      "type": "string",
                      "description": "Asset model name."
                    },
                    "productCode": {
                      "type": "string",
                      "description": "Asset product code."
                    },
                    "hardwareRevision": {
                      "type": "string",
                      "description": "Revision number of the hardware."
                    },
                    "softwareRevision": {
                      "type": "string",
                      "description": "Revision number of the software."
                    },
                    "documentationUri": {
                      "type": "string",
                      "description": "Reference to the documentation."
                    },
                    "serialNumber": {
                      "type": "string",
                      "description": "Asset serial number."
                    },
                    "attributes": {
                      "type": "object",
                      "description": "A set of key-value pairs that contain custom attributes set by the customer.",
                      "additionalProperties": {}
                    },
                    "discoveredAssetRefs": {
                      "type": "array",
                      "description": "Reference to a list of discovered assets. Populated only if the asset has been created from discovery flow. Discovered asset names must be provided.",
                      "items": {
                        "type": "string"
                      },
                      "x-ms-mutability": [
                        "read",
                        "create"
                      ]
                    },
                    "defaultDatasetsConfiguration": {
                      "type": "string",
                      "description": "Stringified JSON that contains connector-specific default configuration for all datasets. Each dataset can have its own configuration that overrides the default settings here."
                    },
                    "defaultEventsConfiguration": {
                      "type": "string",
                      "description": "Stringified JSON that contains connector-specific default configuration for all events. Each event can have its own configuration that overrides the default settings here."
                    },
                    "defaultTopic": {
                      "description": "Object that describes the default topic information for the asset.",
                      "type": "object",
                      "properties": {
                        "path": {
                          "type": "string",
                          "description": "The topic path for messages published to an MQTT broker."
                        },
                        "retain": {
                          "type": "string",
                          "description": "When set to 'Keep', messages published to an MQTT broker will have the retain flag set. Default: 'Never'.",
                          "default": "Never",
                          "enum": [
                            "Keep",
                            "Never"
                          ],
                          "x-ms-enum": {
                            "name": "TopicRetainType",
                            "modelAsString": true,
                            "values": [
                              {
                                "name": "Keep",
                                "value": "Keep",
                                "description": "Retain the messages."
                              },
                              {
                                "name": "Never",
                                "value": "Never",
                                "description": "Never retain messages."
                              }
                            ]
                          }
                        }
                      },
                      "required": [
                        "path"
                      ]
                    },
                    "datasets": {
                      "type": "array",
                      "description": "Array of datasets that are part of the asset. Each dataset describes the data points that make up the set.",
                      "items": {
                        "type": "object",
                        "description": "Defines the dataset properties.",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "Name of the dataset."
                          },
                          "datasetConfiguration": {
                            "type": "string",
                            "description": "Stringified JSON that contains connector-specific JSON string that describes configuration for the specific dataset."
                          },
                          "topic": {
                            "description": "Object that describes the topic information for the specific dataset.",
                            "type": "object",
                            "properties": {
                              "path": {
                                "type": "string",
                                "description": "The topic path for messages published to an MQTT broker."
                              },
                              "retain": {
                                "type": "string",
                                "description": "When set to 'Keep', messages published to an MQTT broker will have the retain flag set. Default: 'Never'.",
                                "default": "Never",
                                "enum": [
                                  "Keep",
                                  "Never"
                                ],
                                "x-ms-enum": {
                                  "name": "TopicRetainType",
                                  "modelAsString": true,
                                  "values": [
                                    {
                                      "name": "Keep",
                                      "value": "Keep",
                                      "description": "Retain the messages."
                                    },
                                    {
                                      "name": "Never",
                                      "value": "Never",
                                      "description": "Never retain messages."
                                    }
                                  ]
                                }
                              }
                            },
                            "required": [
                              "path"
                            ]
                          },
                          "dataPoints": {
                            "type": "array",
                            "description": "Array of data points that are part of the dataset. Each data point can have per-data point configuration.",
                            "items": {
                              "type": "object",
                              "description": "Defines the data point properties.",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "The name of the data point."
                                },
                                "dataSource": {
                                  "type": "string",
                                  "description": "The address of the source of the data in the asset (e.g. URL) so that a client can access the data source on the asset."
                                },
                                "dataPointConfiguration": {
                                  "type": "string",
                                  "description": "Stringified JSON that contains connector-specific configuration for the data point. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize."
                                },
                                "observabilityMode": {
                                  "type": "string",
                                  "description": "An indication of how the data point should be mapped to OpenTelemetry.",
                                  "default": "None",
                                  "enum": [
                                    "None",
                                    "Counter",
                                    "Gauge",
                                    "Histogram",
                                    "Log"
                                  ],
                                  "x-ms-enum": {
                                    "name": "DataPointObservabilityMode",
                                    "modelAsString": true,
                                    "values": [
                                      {
                                        "name": "None",
                                        "value": "None",
                                        "description": "No mapping to OpenTelemetry."
                                      },
                                      {
                                        "name": "Counter",
                                        "value": "Counter",
                                        "description": "Map as counter to OpenTelemetry."
                                      },
                                      {
                                        "name": "Gauge",
                                        "value": "Gauge",
                                        "description": "Map as gauge to OpenTelemetry."
                                      },
                                      {
                                        "name": "Histogram",
                                        "value": "Histogram",
                                        "description": "Map as histogram to OpenTelemetry."
                                      },
                                      {
                                        "name": "Log",
                                        "value": "Log",
                                        "description": "Map as log to OpenTelemetry."
                                      }
                                    ]
                                  }
                                }
                              }
                            },
                            "x-ms-identifiers": []
                          }
                        },
                        "required": [
                          "name"
                        ]
                      },
                      "x-ms-identifiers": []
                    },
                    "events": {
                      "type": "array",
                      "description": "Array of events that are part of the asset. Each event can have per-event configuration.",
                      "items": {
                        "type": "object",
                        "description": "Defines the event properties.",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "The name of the event."
                          },
                          "eventNotifier": {
                            "type": "string",
                            "description": "The address of the notifier of the event in the asset (e.g. URL) so that a client can access the event on the asset."
                          },
                          "eventConfiguration": {
                            "type": "string",
                            "description": "Stringified JSON that contains connector-specific configuration for the event. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize."
                          },
                          "topic": {
                            "description": "Object that describes the topic information for the specific event.",
                            "type": "object",
                            "properties": {
                              "path": {
                                "type": "string",
                                "description": "The topic path for messages published to an MQTT broker."
                              },
                              "retain": {
                                "type": "string",
                                "description": "When set to 'Keep', messages published to an MQTT broker will have the retain flag set. Default: 'Never'.",
                                "default": "Never",
                                "enum": [
                                  "Keep",
                                  "Never"
                                ],
                                "x-ms-enum": {
                                  "name": "TopicRetainType",
                                  "modelAsString": true,
                                  "values": [
                                    {
                                      "name": "Keep",
                                      "value": "Keep",
                                      "description": "Retain the messages."
                                    },
                                    {
                                      "name": "Never",
                                      "value": "Never",
                                      "description": "Never retain messages."
                                    }
                                  ]
                                }
                              }
                            },
                            "required": [
                              "path"
                            ]
                          },
                          "observabilityMode": {
                            "type": "string",
                            "description": "An indication of how the event should be mapped to OpenTelemetry.",
                            "default": "None",
                            "enum": [
                              "None",
                              "Log"
                            ],
                            "x-ms-enum": {
                              "name": "EventObservabilityMode",
                              "modelAsString": true,
                              "values": [
                                {
                                  "name": "None",
                                  "value": "None",
                                  "description": "No mapping to OpenTelemetry."
                                },
                                {
                                  "name": "Log",
                                  "value": "Log",
                                  "description": "Map as log to OpenTelemetry."
                                }
                              ]
                            }
                          }
                        }
                      },
                      "x-ms-identifiers": []
                    },
                    "status": {
                      "description": "Read only object to reflect changes that have occurred on the Edge. Similar to Kubernetes status property for custom resources.",
                      "readOnly": true,
                      "type": "object",
                      "properties": {
                        "errors": {
                          "type": "array",
                          "description": "Array object to transfer and persist errors that originate from the Edge.",
                          "items": {
                            "type": "object",
                            "description": "Defines the asset status error properties.",
                            "properties": {
                              "code": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Error code for classification of errors (ex: 400, 404, 500, etc.).",
                                "readOnly": true
                              },
                              "message": {
                                "type": "string",
                                "description": "Human readable helpful error message to provide additional context for error (ex: “capability Id 'foo' does not exist”).",
                                "readOnly": true
                              }
                            }
                          },
                          "readOnly": true,
                          "x-ms-identifiers": []
                        },
                        "version": {
                          "type": "integer",
                          "format": "int64",
                          "description": "A read only incremental counter indicating the number of times the configuration has been modified from the perspective of the current actual (Edge) state of the Asset. Edge would be the only writer of this value and would sync back up to the cloud. In steady state, this should equal version.",
                          "readOnly": true
                        },
                        "datasets": {
                          "type": "array",
                          "description": "Array of dataset statuses that describe the status of each dataset.",
                          "items": {
                            "type": "object",
                            "description": "Defines the asset status dataset properties.",
                            "properties": {
                              "name": {
                                "type": "string",
                                "description": "The name of the dataset. Must be unique within the status.datasets array. This name is used to correlate between the spec and status dataset information.",
                                "readOnly": true
                              },
                              "messageSchemaReference": {
                                "description": "The message schema reference object.",
                                "readOnly": true,
                                "type": "object",
                                "properties": {
                                  "schemaRegistryNamespace": {
                                    "type": "string",
                                    "description": "The message schema registry namespace.",
                                    "readOnly": true
                                  },
                                  "schemaName": {
                                    "type": "string",
                                    "description": "The message schema name.",
                                    "readOnly": true
                                  },
                                  "schemaVersion": {
                                    "type": "string",
                                    "description": "The message schema version.",
                                    "readOnly": true
                                  }
                                },
                                "required": [
                                  "schemaRegistryNamespace",
                                  "schemaName",
                                  "schemaVersion"
                                ]
                              }
                            },
                            "required": [
                              "name"
                            ]
                          },
                          "readOnly": true,
                          "x-ms-identifiers": []
                        },
                        "events": {
                          "type": "array",
                          "description": "Array of event statuses that describe the status of each event.",
                          "items": {
                            "type": "object",
                            "description": "Defines the asset status event properties.",
                            "properties": {
                              "name": {
                                "type": "string",
                                "description": "The name of the event. Must be unique within the status.events array. This name is used to correlate between the spec and status event information.",
                                "readOnly": true
                              },
                              "messageSchemaReference": {
                                "description": "The message schema reference object.",
                                "readOnly": true,
                                "type": "object",
                                "properties": {
                                  "schemaRegistryNamespace": {
                                    "type": "string",
                                    "description": "The message schema registry namespace.",
                                    "readOnly": true
                                  },
                                  "schemaName": {
                                    "type": "string",
                                    "description": "The message schema name.",
                                    "readOnly": true
                                  },
                                  "schemaVersion": {
                                    "type": "string",
                                    "description": "The message schema version.",
                                    "readOnly": true
                                  }
                                },
                                "required": [
                                  "schemaRegistryNamespace",
                                  "schemaName",
                                  "schemaVersion"
                                ]
                              }
                            },
                            "required": [
                              "name"
                            ]
                          },
                          "readOnly": true,
                          "x-ms-identifiers": []
                        }
                      }
                    },
                    "provisioningState": {
                      "description": "Provisioning state of the resource.",
                      "readOnly": true,
                      "type": "string",
                      "enum": [
                        "Succeeded",
                        "Failed",
                        "Canceled",
                        "Accepted",
                        "Deleting"
                      ],
                      "x-ms-enum": {
                        "name": "ProvisioningState",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Succeeded",
                            "value": "Succeeded",
                            "description": "Resource has been created."
                          },
                          {
                            "name": "Failed",
                            "value": "Failed",
                            "description": "Resource creation failed."
                          },
                          {
                            "name": "Canceled",
                            "value": "Canceled",
                            "description": "Resource creation was canceled."
                          },
                          {
                            "name": "Accepted",
                            "value": "Accepted",
                            "description": "Resource has been accepted by the server."
                          },
                          {
                            "name": "Deleting",
                            "value": "Deleting",
                            "description": "Resource is deleting."
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "assetEndpointProfileRef"
                  ]
                },
                "extendedLocation": {
                  "description": "The extended location.",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ],
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "description": "The extended location type."
                    },
                    "name": {
                      "type": "string",
                      "description": "The extended location name."
                    }
                  },
                  "required": [
                    "type",
                    "name"
                  ]
                }
              },
              "required": [
                "extendedLocation"
              ]
            }
          },
          "201": {
            "description": "Resource 'Asset' create operation succeeded",
            "schema": {
              "type": "object",
              "description": "Asset definition.",
              "properties": {
                "id": {
                  "type": "string",
                  "format": "arm-id",
                  "description": "Fully qualified resource ID for the resource. E.g. \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}\"",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "description": "The name of the resource",
                  "readOnly": true
                },
                "type": {
                  "type": "string",
                  "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                  "readOnly": true
                },
                "systemData": {
                  "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                  "readOnly": true,
                  "type": "object",
                  "properties": {
                    "createdBy": {
                      "type": "string",
                      "description": "The identity that created the resource."
                    },
                    "createdByType": {
                      "type": "string",
                      "description": "The type of identity that created the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource creation (UTC)."
                    },
                    "lastModifiedBy": {
                      "type": "string",
                      "description": "The identity that last modified the resource."
                    },
                    "lastModifiedByType": {
                      "type": "string",
                      "description": "The type of identity that last modified the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "lastModifiedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource last modification (UTC)"
                    }
                  }
                },
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "x-ms-mutability": [
                    "read",
                    "create",
                    "update"
                  ]
                },
                "location": {
                  "type": "string",
                  "description": "The geo-location where the resource lives",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ]
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "uuid": {
                      "type": "string",
                      "description": "Globally unique, immutable, non-reusable id.",
                      "readOnly": true
                    },
                    "enabled": {
                      "type": "boolean",
                      "description": "Enabled/Disabled status of the asset."
                    },
                    "externalAssetId": {
                      "type": "string",
                      "description": "Asset id provided by the customer.",
                      "x-ms-mutability": [
                        "read",
                        "create"
                      ]
                    },
                    "displayName": {
                      "type": "string",
                      "description": "Human-readable display name."
                    },
                    "description": {
                      "type": "string",
                      "description": "Human-readable description of the asset."
                    },
                    "assetEndpointProfileRef": {
                      "type": "string",
                      "description": "A reference to the asset endpoint profile (connection information) used by brokers to connect to an endpoint that provides data points for this asset. Must provide asset endpoint profile name.",
                      "x-ms-mutability": [
                        "read",
                        "create"
                      ]
                    },
                    "version": {
                      "type": "integer",
                      "format": "int64",
                      "description": "An integer that is incremented each time the resource is modified.",
                      "readOnly": true
                    },
                    "manufacturer": {
                      "type": "string",
                      "description": "Asset manufacturer name."
                    },
                    "manufacturerUri": {
                      "type": "string",
                      "description": "Asset manufacturer URI."
                    },
                    "model": {
                      "type": "string",
                      "description": "Asset model name."
                    },
                    "productCode": {
                      "type": "string",
                      "description": "Asset product code."
                    },
                    "hardwareRevision": {
                      "type": "string",
                      "description": "Revision number of the hardware."
                    },
                    "softwareRevision": {
                      "type": "string",
                      "description": "Revision number of the software."
                    },
                    "documentationUri": {
                      "type": "string",
                      "description": "Reference to the documentation."
                    },
                    "serialNumber": {
                      "type": "string",
                      "description": "Asset serial number."
                    },
                    "attributes": {
                      "type": "object",
                      "description": "A set of key-value pairs that contain custom attributes set by the customer.",
                      "additionalProperties": {}
                    },
                    "discoveredAssetRefs": {
                      "type": "array",
                      "description": "Reference to a list of discovered assets. Populated only if the asset has been created from discovery flow. Discovered asset names must be provided.",
                      "items": {
                        "type": "string"
                      },
                      "x-ms-mutability": [
                        "read",
                        "create"
                      ]
                    },
                    "defaultDatasetsConfiguration": {
                      "type": "string",
                      "description": "Stringified JSON that contains connector-specific default configuration for all datasets. Each dataset can have its own configuration that overrides the default settings here."
                    },
                    "defaultEventsConfiguration": {
                      "type": "string",
                      "description": "Stringified JSON that contains connector-specific default configuration for all events. Each event can have its own configuration that overrides the default settings here."
                    },
                    "defaultTopic": {
                      "description": "Object that describes the default topic information for the asset.",
                      "type": "object",
                      "properties": {
                        "path": {
                          "type": "string",
                          "description": "The topic path for messages published to an MQTT broker."
                        },
                        "retain": {
                          "type": "string",
                          "description": "When set to 'Keep', messages published to an MQTT broker will have the retain flag set. Default: 'Never'.",
                          "default": "Never",
                          "enum": [
                            "Keep",
                            "Never"
                          ],
                          "x-ms-enum": {
                            "name": "TopicRetainType",
                            "modelAsString": true,
                            "values": [
                              {
                                "name": "Keep",
                                "value": "Keep",
                                "description": "Retain the messages."
                              },
                              {
                                "name": "Never",
                                "value": "Never",
                                "description": "Never retain messages."
                              }
                            ]
                          }
                        }
                      },
                      "required": [
                        "path"
                      ]
                    },
                    "datasets": {
                      "type": "array",
                      "description": "Array of datasets that are part of the asset. Each dataset describes the data points that make up the set.",
                      "items": {
                        "type": "object",
                        "description": "Defines the dataset properties.",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "Name of the dataset."
                          },
                          "datasetConfiguration": {
                            "type": "string",
                            "description": "Stringified JSON that contains connector-specific JSON string that describes configuration for the specific dataset."
                          },
                          "topic": {
                            "description": "Object that describes the topic information for the specific dataset.",
                            "type": "object",
                            "properties": {
                              "path": {
                                "type": "string",
                                "description": "The topic path for messages published to an MQTT broker."
                              },
                              "retain": {
                                "type": "string",
                                "description": "When set to 'Keep', messages published to an MQTT broker will have the retain flag set. Default: 'Never'.",
                                "default": "Never",
                                "enum": [
                                  "Keep",
                                  "Never"
                                ],
                                "x-ms-enum": {
                                  "name": "TopicRetainType",
                                  "modelAsString": true,
                                  "values": [
                                    {
                                      "name": "Keep",
                                      "value": "Keep",
                                      "description": "Retain the messages."
                                    },
                                    {
                                      "name": "Never",
                                      "value": "Never",
                                      "description": "Never retain messages."
                                    }
                                  ]
                                }
                              }
                            },
                            "required": [
                              "path"
                            ]
                          },
                          "dataPoints": {
                            "type": "array",
                            "description": "Array of data points that are part of the dataset. Each data point can have per-data point configuration.",
                            "items": {
                              "type": "object",
                              "description": "Defines the data point properties.",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "The name of the data point."
                                },
                                "dataSource": {
                                  "type": "string",
                                  "description": "The address of the source of the data in the asset (e.g. URL) so that a client can access the data source on the asset."
                                },
                                "dataPointConfiguration": {
                                  "type": "string",
                                  "description": "Stringified JSON that contains connector-specific configuration for the data point. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize."
                                },
                                "observabilityMode": {
                                  "type": "string",
                                  "description": "An indication of how the data point should be mapped to OpenTelemetry.",
                                  "default": "None",
                                  "enum": [
                                    "None",
                                    "Counter",
                                    "Gauge",
                                    "Histogram",
                                    "Log"
                                  ],
                                  "x-ms-enum": {
                                    "name": "DataPointObservabilityMode",
                                    "modelAsString": true,
                                    "values": [
                                      {
                                        "name": "None",
                                        "value": "None",
                                        "description": "No mapping to OpenTelemetry."
                                      },
                                      {
                                        "name": "Counter",
                                        "value": "Counter",
                                        "description": "Map as counter to OpenTelemetry."
                                      },
                                      {
                                        "name": "Gauge",
                                        "value": "Gauge",
                                        "description": "Map as gauge to OpenTelemetry."
                                      },
                                      {
                                        "name": "Histogram",
                                        "value": "Histogram",
                                        "description": "Map as histogram to OpenTelemetry."
                                      },
                                      {
                                        "name": "Log",
                                        "value": "Log",
                                        "description": "Map as log to OpenTelemetry."
                                      }
                                    ]
                                  }
                                }
                              }
                            },
                            "x-ms-identifiers": []
                          }
                        },
                        "required": [
                          "name"
                        ]
                      },
                      "x-ms-identifiers": []
                    },
                    "events": {
                      "type": "array",
                      "description": "Array of events that are part of the asset. Each event can have per-event configuration.",
                      "items": {
                        "type": "object",
                        "description": "Defines the event properties.",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "The name of the event."
                          },
                          "eventNotifier": {
                            "type": "string",
                            "description": "The address of the notifier of the event in the asset (e.g. URL) so that a client can access the event on the asset."
                          },
                          "eventConfiguration": {
                            "type": "string",
                            "description": "Stringified JSON that contains connector-specific configuration for the event. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize."
                          },
                          "topic": {
                            "description": "Object that describes the topic information for the specific event.",
                            "type": "object",
                            "properties": {
                              "path": {
                                "type": "string",
                                "description": "The topic path for messages published to an MQTT broker."
                              },
                              "retain": {
                                "type": "string",
                                "description": "When set to 'Keep', messages published to an MQTT broker will have the retain flag set. Default: 'Never'.",
                                "default": "Never",
                                "enum": [
                                  "Keep",
                                  "Never"
                                ],
                                "x-ms-enum": {
                                  "name": "TopicRetainType",
                                  "modelAsString": true,
                                  "values": [
                                    {
                                      "name": "Keep",
                                      "value": "Keep",
                                      "description": "Retain the messages."
                                    },
                                    {
                                      "name": "Never",
                                      "value": "Never",
                                      "description": "Never retain messages."
                                    }
                                  ]
                                }
                              }
                            },
                            "required": [
                              "path"
                            ]
                          },
                          "observabilityMode": {
                            "type": "string",
                            "description": "An indication of how the event should be mapped to OpenTelemetry.",
                            "default": "None",
                            "enum": [
                              "None",
                              "Log"
                            ],
                            "x-ms-enum": {
                              "name": "EventObservabilityMode",
                              "modelAsString": true,
                              "values": [
                                {
                                  "name": "None",
                                  "value": "None",
                                  "description": "No mapping to OpenTelemetry."
                                },
                                {
                                  "name": "Log",
                                  "value": "Log",
                                  "description": "Map as log to OpenTelemetry."
                                }
                              ]
                            }
                          }
                        }
                      },
                      "x-ms-identifiers": []
                    },
                    "status": {
                      "description": "Read only object to reflect changes that have occurred on the Edge. Similar to Kubernetes status property for custom resources.",
                      "readOnly": true,
                      "type": "object",
                      "properties": {
                        "errors": {
                          "type": "array",
                          "description": "Array object to transfer and persist errors that originate from the Edge.",
                          "items": {
                            "type": "object",
                            "description": "Defines the asset status error properties.",
                            "properties": {
                              "code": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Error code for classification of errors (ex: 400, 404, 500, etc.).",
                                "readOnly": true
                              },
                              "message": {
                                "type": "string",
                                "description": "Human readable helpful error message to provide additional context for error (ex: “capability Id 'foo' does not exist”).",
                                "readOnly": true
                              }
                            }
                          },
                          "readOnly": true,
                          "x-ms-identifiers": []
                        },
                        "version": {
                          "type": "integer",
                          "format": "int64",
                          "description": "A read only incremental counter indicating the number of times the configuration has been modified from the perspective of the current actual (Edge) state of the Asset. Edge would be the only writer of this value and would sync back up to the cloud. In steady state, this should equal version.",
                          "readOnly": true
                        },
                        "datasets": {
                          "type": "array",
                          "description": "Array of dataset statuses that describe the status of each dataset.",
                          "items": {
                            "type": "object",
                            "description": "Defines the asset status dataset properties.",
                            "properties": {
                              "name": {
                                "type": "string",
                                "description": "The name of the dataset. Must be unique within the status.datasets array. This name is used to correlate between the spec and status dataset information.",
                                "readOnly": true
                              },
                              "messageSchemaReference": {
                                "description": "The message schema reference object.",
                                "readOnly": true,
                                "type": "object",
                                "properties": {
                                  "schemaRegistryNamespace": {
                                    "type": "string",
                                    "description": "The message schema registry namespace.",
                                    "readOnly": true
                                  },
                                  "schemaName": {
                                    "type": "string",
                                    "description": "The message schema name.",
                                    "readOnly": true
                                  },
                                  "schemaVersion": {
                                    "type": "string",
                                    "description": "The message schema version.",
                                    "readOnly": true
                                  }
                                },
                                "required": [
                                  "schemaRegistryNamespace",
                                  "schemaName",
                                  "schemaVersion"
                                ]
                              }
                            },
                            "required": [
                              "name"
                            ]
                          },
                          "readOnly": true,
                          "x-ms-identifiers": []
                        },
                        "events": {
                          "type": "array",
                          "description": "Array of event statuses that describe the status of each event.",
                          "items": {
                            "type": "object",
                            "description": "Defines the asset status event properties.",
                            "properties": {
                              "name": {
                                "type": "string",
                                "description": "The name of the event. Must be unique within the status.events array. This name is used to correlate between the spec and status event information.",
                                "readOnly": true
                              },
                              "messageSchemaReference": {
                                "description": "The message schema reference object.",
                                "readOnly": true,
                                "type": "object",
                                "properties": {
                                  "schemaRegistryNamespace": {
                                    "type": "string",
                                    "description": "The message schema registry namespace.",
                                    "readOnly": true
                                  },
                                  "schemaName": {
                                    "type": "string",
                                    "description": "The message schema name.",
                                    "readOnly": true
                                  },
                                  "schemaVersion": {
                                    "type": "string",
                                    "description": "The message schema version.",
                                    "readOnly": true
                                  }
                                },
                                "required": [
                                  "schemaRegistryNamespace",
                                  "schemaName",
                                  "schemaVersion"
                                ]
                              }
                            },
                            "required": [
                              "name"
                            ]
                          },
                          "readOnly": true,
                          "x-ms-identifiers": []
                        }
                      }
                    },
                    "provisioningState": {
                      "description": "Provisioning state of the resource.",
                      "readOnly": true,
                      "type": "string",
                      "enum": [
                        "Succeeded",
                        "Failed",
                        "Canceled",
                        "Accepted",
                        "Deleting"
                      ],
                      "x-ms-enum": {
                        "name": "ProvisioningState",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Succeeded",
                            "value": "Succeeded",
                            "description": "Resource has been created."
                          },
                          {
                            "name": "Failed",
                            "value": "Failed",
                            "description": "Resource creation failed."
                          },
                          {
                            "name": "Canceled",
                            "value": "Canceled",
                            "description": "Resource creation was canceled."
                          },
                          {
                            "name": "Accepted",
                            "value": "Accepted",
                            "description": "Resource has been accepted by the server."
                          },
                          {
                            "name": "Deleting",
                            "value": "Deleting",
                            "description": "Resource is deleting."
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "assetEndpointProfileRef"
                  ]
                },
                "extendedLocation": {
                  "description": "The extended location.",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ],
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "description": "The extended location type."
                    },
                    "name": {
                      "type": "string",
                      "description": "The extended location name."
                    }
                  },
                  "required": [
                    "type",
                    "name"
                  ]
                }
              },
              "required": [
                "extendedLocation"
              ]
            },
            "headers": {
              "Azure-AsyncOperation": {
                "type": "string",
                "description": "A link to the status monitor"
              },
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "Assets_Update",
        "tags": [
          "Assets"
        ],
        "description": "Update a Asset",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription. The value must be an UUID.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group. The name is case insensitive.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "x-ms-parameter-location": "method"
          },
          {
            "name": "assetName",
            "in": "path",
            "description": "Asset name parameter.",
            "required": true,
            "type": "string",
            "minLength": 3,
            "maxLength": 63,
            "pattern": "^[a-z0-9][a-z0-9-]*[a-z0-9]$"
          },
          {
            "name": "properties",
            "in": "body",
            "description": "The resource properties to be updated.",
            "required": true,
            "schema": {
              "type": "object",
              "description": "The type used for update operations of the Asset.",
              "properties": {
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "enabled": {
                      "type": "boolean",
                      "description": "Enabled/Disabled status of the asset."
                    },
                    "displayName": {
                      "type": "string",
                      "description": "Human-readable display name."
                    },
                    "description": {
                      "type": "string",
                      "description": "Human-readable description of the asset."
                    },
                    "manufacturer": {
                      "type": "string",
                      "description": "Asset manufacturer name."
                    },
                    "manufacturerUri": {
                      "type": "string",
                      "description": "Asset manufacturer URI."
                    },
                    "model": {
                      "type": "string",
                      "description": "Asset model name."
                    },
                    "productCode": {
                      "type": "string",
                      "description": "Asset product code."
                    },
                    "hardwareRevision": {
                      "type": "string",
                      "description": "Revision number of the hardware."
                    },
                    "softwareRevision": {
                      "type": "string",
                      "description": "Revision number of the software."
                    },
                    "documentationUri": {
                      "type": "string",
                      "description": "Reference to the documentation."
                    },
                    "serialNumber": {
                      "type": "string",
                      "description": "Asset serial number."
                    },
                    "attributes": {
                      "type": "object",
                      "description": "A set of key-value pairs that contain custom attributes set by the customer.",
                      "additionalProperties": {}
                    },
                    "defaultDatasetsConfiguration": {
                      "type": "string",
                      "description": "Stringified JSON that contains connector-specific default configuration for all datasets. Each dataset can have its own configuration that overrides the default settings here."
                    },
                    "defaultEventsConfiguration": {
                      "type": "string",
                      "description": "Stringified JSON that contains connector-specific default configuration for all events. Each event can have its own configuration that overrides the default settings here."
                    },
                    "defaultTopic": {
                      "description": "Object that describes the default topic information for the asset.",
                      "type": "object",
                      "properties": {
                        "path": {
                          "type": "string",
                          "description": "The topic path for messages published to an MQTT broker."
                        },
                        "retain": {
                          "type": "string",
                          "description": "When set to 'Keep', messages published to an MQTT broker will have the retain flag set. Default: 'Never'.",
                          "default": "Never",
                          "enum": [
                            "Keep",
                            "Never"
                          ],
                          "x-ms-enum": {
                            "name": "TopicRetainType",
                            "modelAsString": true,
                            "values": [
                              {
                                "name": "Keep",
                                "value": "Keep",
                                "description": "Retain the messages."
                              },
                              {
                                "name": "Never",
                                "value": "Never",
                                "description": "Never retain messages."
                              }
                            ]
                          }
                        }
                      }
                    },
                    "datasets": {
                      "type": "array",
                      "description": "Array of datasets that are part of the asset. Each dataset describes the data points that make up the set.",
                      "items": {
                        "type": "object",
                        "description": "Defines the dataset properties.",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "Name of the dataset."
                          },
                          "datasetConfiguration": {
                            "type": "string",
                            "description": "Stringified JSON that contains connector-specific JSON string that describes configuration for the specific dataset."
                          },
                          "topic": {
                            "description": "Object that describes the topic information for the specific dataset.",
                            "type": "object",
                            "properties": {
                              "path": {
                                "type": "string",
                                "description": "The topic path for messages published to an MQTT broker."
                              },
                              "retain": {
                                "type": "string",
                                "description": "When set to 'Keep', messages published to an MQTT broker will have the retain flag set. Default: 'Never'.",
                                "default": "Never",
                                "enum": [
                                  "Keep",
                                  "Never"
                                ],
                                "x-ms-enum": {
                                  "name": "TopicRetainType",
                                  "modelAsString": true,
                                  "values": [
                                    {
                                      "name": "Keep",
                                      "value": "Keep",
                                      "description": "Retain the messages."
                                    },
                                    {
                                      "name": "Never",
                                      "value": "Never",
                                      "description": "Never retain messages."
                                    }
                                  ]
                                }
                              }
                            },
                            "required": [
                              "path"
                            ]
                          },
                          "dataPoints": {
                            "type": "array",
                            "description": "Array of data points that are part of the dataset. Each data point can have per-data point configuration.",
                            "items": {
                              "type": "object",
                              "description": "Defines the data point properties.",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "The name of the data point."
                                },
                                "dataSource": {
                                  "type": "string",
                                  "description": "The address of the source of the data in the asset (e.g. URL) so that a client can access the data source on the asset."
                                },
                                "dataPointConfiguration": {
                                  "type": "string",
                                  "description": "Stringified JSON that contains connector-specific configuration for the data point. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize."
                                },
                                "observabilityMode": {
                                  "type": "string",
                                  "description": "An indication of how the data point should be mapped to OpenTelemetry.",
                                  "default": "None",
                                  "enum": [
                                    "None",
                                    "Counter",
                                    "Gauge",
                                    "Histogram",
                                    "Log"
                                  ],
                                  "x-ms-enum": {
                                    "name": "DataPointObservabilityMode",
                                    "modelAsString": true,
                                    "values": [
                                      {
                                        "name": "None",
                                        "value": "None",
                                        "description": "No mapping to OpenTelemetry."
                                      },
                                      {
                                        "name": "Counter",
                                        "value": "Counter",
                                        "description": "Map as counter to OpenTelemetry."
                                      },
                                      {
                                        "name": "Gauge",
                                        "value": "Gauge",
                                        "description": "Map as gauge to OpenTelemetry."
                                      },
                                      {
                                        "name": "Histogram",
                                        "value": "Histogram",
                                        "description": "Map as histogram to OpenTelemetry."
                                      },
                                      {
                                        "name": "Log",
                                        "value": "Log",
                                        "description": "Map as log to OpenTelemetry."
                                      }
                                    ]
                                  }
                                }
                              }
                            },
                            "x-ms-identifiers": []
                          }
                        },
                        "required": [
                          "name"
                        ]
                      },
                      "x-ms-identifiers": []
                    },
                    "events": {
                      "type": "array",
                      "description": "Array of events that are part of the asset. Each event can have per-event configuration.",
                      "items": {
                        "type": "object",
                        "description": "Defines the event properties.",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "The name of the event."
                          },
                          "eventNotifier": {
                            "type": "string",
                            "description": "The address of the notifier of the event in the asset (e.g. URL) so that a client can access the event on the asset."
                          },
                          "eventConfiguration": {
                            "type": "string",
                            "description": "Stringified JSON that contains connector-specific configuration for the event. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize."
                          },
                          "topic": {
                            "description": "Object that describes the topic information for the specific event.",
                            "type": "object",
                            "properties": {
                              "path": {
                                "type": "string",
                                "description": "The topic path for messages published to an MQTT broker."
                              },
                              "retain": {
                                "type": "string",
                                "description": "When set to 'Keep', messages published to an MQTT broker will have the retain flag set. Default: 'Never'.",
                                "default": "Never",
                                "enum": [
                                  "Keep",
                                  "Never"
                                ],
                                "x-ms-enum": {
                                  "name": "TopicRetainType",
                                  "modelAsString": true,
                                  "values": [
                                    {
                                      "name": "Keep",
                                      "value": "Keep",
                                      "description": "Retain the messages."
                                    },
                                    {
                                      "name": "Never",
                                      "value": "Never",
                                      "description": "Never retain messages."
                                    }
                                  ]
                                }
                              }
                            },
                            "required": [
                              "path"
                            ]
                          },
                          "observabilityMode": {
                            "type": "string",
                            "description": "An indication of how the event should be mapped to OpenTelemetry.",
                            "default": "None",
                            "enum": [
                              "None",
                              "Log"
                            ],
                            "x-ms-enum": {
                              "name": "EventObservabilityMode",
                              "modelAsString": true,
                              "values": [
                                {
                                  "name": "None",
                                  "value": "None",
                                  "description": "No mapping to OpenTelemetry."
                                },
                                {
                                  "name": "Log",
                                  "value": "Log",
                                  "description": "Map as log to OpenTelemetry."
                                }
                              ]
                            }
                          }
                        }
                      },
                      "x-ms-identifiers": []
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "type": "object",
              "description": "Asset definition.",
              "properties": {
                "id": {
                  "type": "string",
                  "format": "arm-id",
                  "description": "Fully qualified resource ID for the resource. E.g. \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}\"",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "description": "The name of the resource",
                  "readOnly": true
                },
                "type": {
                  "type": "string",
                  "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                  "readOnly": true
                },
                "systemData": {
                  "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                  "readOnly": true,
                  "type": "object",
                  "properties": {
                    "createdBy": {
                      "type": "string",
                      "description": "The identity that created the resource."
                    },
                    "createdByType": {
                      "type": "string",
                      "description": "The type of identity that created the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource creation (UTC)."
                    },
                    "lastModifiedBy": {
                      "type": "string",
                      "description": "The identity that last modified the resource."
                    },
                    "lastModifiedByType": {
                      "type": "string",
                      "description": "The type of identity that last modified the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "lastModifiedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource last modification (UTC)"
                    }
                  }
                },
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "x-ms-mutability": [
                    "read",
                    "create",
                    "update"
                  ]
                },
                "location": {
                  "type": "string",
                  "description": "The geo-location where the resource lives",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ]
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "uuid": {
                      "type": "string",
                      "description": "Globally unique, immutable, non-reusable id.",
                      "readOnly": true
                    },
                    "enabled": {
                      "type": "boolean",
                      "description": "Enabled/Disabled status of the asset."
                    },
                    "externalAssetId": {
                      "type": "string",
                      "description": "Asset id provided by the customer.",
                      "x-ms-mutability": [
                        "read",
                        "create"
                      ]
                    },
                    "displayName": {
                      "type": "string",
                      "description": "Human-readable display name."
                    },
                    "description": {
                      "type": "string",
                      "description": "Human-readable description of the asset."
                    },
                    "assetEndpointProfileRef": {
                      "type": "string",
                      "description": "A reference to the asset endpoint profile (connection information) used by brokers to connect to an endpoint that provides data points for this asset. Must provide asset endpoint profile name.",
                      "x-ms-mutability": [
                        "read",
                        "create"
                      ]
                    },
                    "version": {
                      "type": "integer",
                      "format": "int64",
                      "description": "An integer that is incremented each time the resource is modified.",
                      "readOnly": true
                    },
                    "manufacturer": {
                      "type": "string",
                      "description": "Asset manufacturer name."
                    },
                    "manufacturerUri": {
                      "type": "string",
                      "description": "Asset manufacturer URI."
                    },
                    "model": {
                      "type": "string",
                      "description": "Asset model name."
                    },
                    "productCode": {
                      "type": "string",
                      "description": "Asset product code."
                    },
                    "hardwareRevision": {
                      "type": "string",
                      "description": "Revision number of the hardware."
                    },
                    "softwareRevision": {
                      "type": "string",
                      "description": "Revision number of the software."
                    },
                    "documentationUri": {
                      "type": "string",
                      "description": "Reference to the documentation."
                    },
                    "serialNumber": {
                      "type": "string",
                      "description": "Asset serial number."
                    },
                    "attributes": {
                      "type": "object",
                      "description": "A set of key-value pairs that contain custom attributes set by the customer.",
                      "additionalProperties": {}
                    },
                    "discoveredAssetRefs": {
                      "type": "array",
                      "description": "Reference to a list of discovered assets. Populated only if the asset has been created from discovery flow. Discovered asset names must be provided.",
                      "items": {
                        "type": "string"
                      },
                      "x-ms-mutability": [
                        "read",
                        "create"
                      ]
                    },
                    "defaultDatasetsConfiguration": {
                      "type": "string",
                      "description": "Stringified JSON that contains connector-specific default configuration for all datasets. Each dataset can have its own configuration that overrides the default settings here."
                    },
                    "defaultEventsConfiguration": {
                      "type": "string",
                      "description": "Stringified JSON that contains connector-specific default configuration for all events. Each event can have its own configuration that overrides the default settings here."
                    },
                    "defaultTopic": {
                      "description": "Object that describes the default topic information for the asset.",
                      "type": "object",
                      "properties": {
                        "path": {
                          "type": "string",
                          "description": "The topic path for messages published to an MQTT broker."
                        },
                        "retain": {
                          "type": "string",
                          "description": "When set to 'Keep', messages published to an MQTT broker will have the retain flag set. Default: 'Never'.",
                          "default": "Never",
                          "enum": [
                            "Keep",
                            "Never"
                          ],
                          "x-ms-enum": {
                            "name": "TopicRetainType",
                            "modelAsString": true,
                            "values": [
                              {
                                "name": "Keep",
                                "value": "Keep",
                                "description": "Retain the messages."
                              },
                              {
                                "name": "Never",
                                "value": "Never",
                                "description": "Never retain messages."
                              }
                            ]
                          }
                        }
                      },
                      "required": [
                        "path"
                      ]
                    },
                    "datasets": {
                      "type": "array",
                      "description": "Array of datasets that are part of the asset. Each dataset describes the data points that make up the set.",
                      "items": {
                        "type": "object",
                        "description": "Defines the dataset properties.",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "Name of the dataset."
                          },
                          "datasetConfiguration": {
                            "type": "string",
                            "description": "Stringified JSON that contains connector-specific JSON string that describes configuration for the specific dataset."
                          },
                          "topic": {
                            "description": "Object that describes the topic information for the specific dataset.",
                            "type": "object",
                            "properties": {
                              "path": {
                                "type": "string",
                                "description": "The topic path for messages published to an MQTT broker."
                              },
                              "retain": {
                                "type": "string",
                                "description": "When set to 'Keep', messages published to an MQTT broker will have the retain flag set. Default: 'Never'.",
                                "default": "Never",
                                "enum": [
                                  "Keep",
                                  "Never"
                                ],
                                "x-ms-enum": {
                                  "name": "TopicRetainType",
                                  "modelAsString": true,
                                  "values": [
                                    {
                                      "name": "Keep",
                                      "value": "Keep",
                                      "description": "Retain the messages."
                                    },
                                    {
                                      "name": "Never",
                                      "value": "Never",
                                      "description": "Never retain messages."
                                    }
                                  ]
                                }
                              }
                            },
                            "required": [
                              "path"
                            ]
                          },
                          "dataPoints": {
                            "type": "array",
                            "description": "Array of data points that are part of the dataset. Each data point can have per-data point configuration.",
                            "items": {
                              "type": "object",
                              "description": "Defines the data point properties.",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "The name of the data point."
                                },
                                "dataSource": {
                                  "type": "string",
                                  "description": "The address of the source of the data in the asset (e.g. URL) so that a client can access the data source on the asset."
                                },
                                "dataPointConfiguration": {
                                  "type": "string",
                                  "description": "Stringified JSON that contains connector-specific configuration for the data point. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize."
                                },
                                "observabilityMode": {
                                  "type": "string",
                                  "description": "An indication of how the data point should be mapped to OpenTelemetry.",
                                  "default": "None",
                                  "enum": [
                                    "None",
                                    "Counter",
                                    "Gauge",
                                    "Histogram",
                                    "Log"
                                  ],
                                  "x-ms-enum": {
                                    "name": "DataPointObservabilityMode",
                                    "modelAsString": true,
                                    "values": [
                                      {
                                        "name": "None",
                                        "value": "None",
                                        "description": "No mapping to OpenTelemetry."
                                      },
                                      {
                                        "name": "Counter",
                                        "value": "Counter",
                                        "description": "Map as counter to OpenTelemetry."
                                      },
                                      {
                                        "name": "Gauge",
                                        "value": "Gauge",
                                        "description": "Map as gauge to OpenTelemetry."
                                      },
                                      {
                                        "name": "Histogram",
                                        "value": "Histogram",
                                        "description": "Map as histogram to OpenTelemetry."
                                      },
                                      {
                                        "name": "Log",
                                        "value": "Log",
                                        "description": "Map as log to OpenTelemetry."
                                      }
                                    ]
                                  }
                                }
                              }
                            },
                            "x-ms-identifiers": []
                          }
                        },
                        "required": [
                          "name"
                        ]
                      },
                      "x-ms-identifiers": []
                    },
                    "events": {
                      "type": "array",
                      "description": "Array of events that are part of the asset. Each event can have per-event configuration.",
                      "items": {
                        "type": "object",
                        "description": "Defines the event properties.",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "The name of the event."
                          },
                          "eventNotifier": {
                            "type": "string",
                            "description": "The address of the notifier of the event in the asset (e.g. URL) so that a client can access the event on the asset."
                          },
                          "eventConfiguration": {
                            "type": "string",
                            "description": "Stringified JSON that contains connector-specific configuration for the event. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize."
                          },
                          "topic": {
                            "description": "Object that describes the topic information for the specific event.",
                            "type": "object",
                            "properties": {
                              "path": {
                                "type": "string",
                                "description": "The topic path for messages published to an MQTT broker."
                              },
                              "retain": {
                                "type": "string",
                                "description": "When set to 'Keep', messages published to an MQTT broker will have the retain flag set. Default: 'Never'.",
                                "default": "Never",
                                "enum": [
                                  "Keep",
                                  "Never"
                                ],
                                "x-ms-enum": {
                                  "name": "TopicRetainType",
                                  "modelAsString": true,
                                  "values": [
                                    {
                                      "name": "Keep",
                                      "value": "Keep",
                                      "description": "Retain the messages."
                                    },
                                    {
                                      "name": "Never",
                                      "value": "Never",
                                      "description": "Never retain messages."
                                    }
                                  ]
                                }
                              }
                            },
                            "required": [
                              "path"
                            ]
                          },
                          "observabilityMode": {
                            "type": "string",
                            "description": "An indication of how the event should be mapped to OpenTelemetry.",
                            "default": "None",
                            "enum": [
                              "None",
                              "Log"
                            ],
                            "x-ms-enum": {
                              "name": "EventObservabilityMode",
                              "modelAsString": true,
                              "values": [
                                {
                                  "name": "None",
                                  "value": "None",
                                  "description": "No mapping to OpenTelemetry."
                                },
                                {
                                  "name": "Log",
                                  "value": "Log",
                                  "description": "Map as log to OpenTelemetry."
                                }
                              ]
                            }
                          }
                        }
                      },
                      "x-ms-identifiers": []
                    },
                    "status": {
                      "description": "Read only object to reflect changes that have occurred on the Edge. Similar to Kubernetes status property for custom resources.",
                      "readOnly": true,
                      "type": "object",
                      "properties": {
                        "errors": {
                          "type": "array",
                          "description": "Array object to transfer and persist errors that originate from the Edge.",
                          "items": {
                            "type": "object",
                            "description": "Defines the asset status error properties.",
                            "properties": {
                              "code": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Error code for classification of errors (ex: 400, 404, 500, etc.).",
                                "readOnly": true
                              },
                              "message": {
                                "type": "string",
                                "description": "Human readable helpful error message to provide additional context for error (ex: “capability Id 'foo' does not exist”).",
                                "readOnly": true
                              }
                            }
                          },
                          "readOnly": true,
                          "x-ms-identifiers": []
                        },
                        "version": {
                          "type": "integer",
                          "format": "int64",
                          "description": "A read only incremental counter indicating the number of times the configuration has been modified from the perspective of the current actual (Edge) state of the Asset. Edge would be the only writer of this value and would sync back up to the cloud. In steady state, this should equal version.",
                          "readOnly": true
                        },
                        "datasets": {
                          "type": "array",
                          "description": "Array of dataset statuses that describe the status of each dataset.",
                          "items": {
                            "type": "object",
                            "description": "Defines the asset status dataset properties.",
                            "properties": {
                              "name": {
                                "type": "string",
                                "description": "The name of the dataset. Must be unique within the status.datasets array. This name is used to correlate between the spec and status dataset information.",
                                "readOnly": true
                              },
                              "messageSchemaReference": {
                                "description": "The message schema reference object.",
                                "readOnly": true,
                                "type": "object",
                                "properties": {
                                  "schemaRegistryNamespace": {
                                    "type": "string",
                                    "description": "The message schema registry namespace.",
                                    "readOnly": true
                                  },
                                  "schemaName": {
                                    "type": "string",
                                    "description": "The message schema name.",
                                    "readOnly": true
                                  },
                                  "schemaVersion": {
                                    "type": "string",
                                    "description": "The message schema version.",
                                    "readOnly": true
                                  }
                                },
                                "required": [
                                  "schemaRegistryNamespace",
                                  "schemaName",
                                  "schemaVersion"
                                ]
                              }
                            },
                            "required": [
                              "name"
                            ]
                          },
                          "readOnly": true,
                          "x-ms-identifiers": []
                        },
                        "events": {
                          "type": "array",
                          "description": "Array of event statuses that describe the status of each event.",
                          "items": {
                            "type": "object",
                            "description": "Defines the asset status event properties.",
                            "properties": {
                              "name": {
                                "type": "string",
                                "description": "The name of the event. Must be unique within the status.events array. This name is used to correlate between the spec and status event information.",
                                "readOnly": true
                              },
                              "messageSchemaReference": {
                                "description": "The message schema reference object.",
                                "readOnly": true,
                                "type": "object",
                                "properties": {
                                  "schemaRegistryNamespace": {
                                    "type": "string",
                                    "description": "The message schema registry namespace.",
                                    "readOnly": true
                                  },
                                  "schemaName": {
                                    "type": "string",
                                    "description": "The message schema name.",
                                    "readOnly": true
                                  },
                                  "schemaVersion": {
                                    "type": "string",
                                    "description": "The message schema version.",
                                    "readOnly": true
                                  }
                                },
                                "required": [
                                  "schemaRegistryNamespace",
                                  "schemaName",
                                  "schemaVersion"
                                ]
                              }
                            },
                            "required": [
                              "name"
                            ]
                          },
                          "readOnly": true,
                          "x-ms-identifiers": []
                        }
                      }
                    },
                    "provisioningState": {
                      "description": "Provisioning state of the resource.",
                      "readOnly": true,
                      "type": "string",
                      "enum": [
                        "Succeeded",
                        "Failed",
                        "Canceled",
                        "Accepted",
                        "Deleting"
                      ],
                      "x-ms-enum": {
                        "name": "ProvisioningState",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Succeeded",
                            "value": "Succeeded",
                            "description": "Resource has been created."
                          },
                          {
                            "name": "Failed",
                            "value": "Failed",
                            "description": "Resource creation failed."
                          },
                          {
                            "name": "Canceled",
                            "value": "Canceled",
                            "description": "Resource creation was canceled."
                          },
                          {
                            "name": "Accepted",
                            "value": "Accepted",
                            "description": "Resource has been accepted by the server."
                          },
                          {
                            "name": "Deleting",
                            "value": "Deleting",
                            "description": "Resource is deleting."
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "assetEndpointProfileRef"
                  ]
                },
                "extendedLocation": {
                  "description": "The extended location.",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ],
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "description": "The extended location type."
                    },
                    "name": {
                      "type": "string",
                      "description": "The extended location name."
                    }
                  },
                  "required": [
                    "type",
                    "name"
                  ]
                }
              },
              "required": [
                "extendedLocation"
              ]
            }
          },
          "202": {
            "description": "Resource update request accepted.",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              },
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "Assets_Delete",
        "tags": [
          "Assets"
        ],
        "description": "Delete a Asset",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription. The value must be an UUID.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group. The name is case insensitive.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "x-ms-parameter-location": "method"
          },
          {
            "name": "assetName",
            "in": "path",
            "description": "Asset name parameter.",
            "required": true,
            "type": "string",
            "minLength": 3,
            "maxLength": 63,
            "pattern": "^[a-z0-9][a-z0-9-]*[a-z0-9]$"
          }
        ],
        "responses": {
          "202": {
            "description": "Resource deletion accepted.",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              },
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "204": {
            "description": "Resource does not exist."
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeviceRegistry/namespaces": {
      "get": {
        "operationId": "Namespaces_ListByResourceGroup",
        "tags": [
          "Namespaces"
        ],
        "description": "List Namespace resources by resource group",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription. The value must be an UUID.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group. The name is case insensitive.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "type": "object",
              "description": "The response of a Namespace list operation.",
              "properties": {
                "value": {
                  "type": "array",
                  "description": "The Namespace items on this page",
                  "items": {
                    "type": "object",
                    "description": "Namespace definition.",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "arm-id",
                        "description": "Fully qualified resource ID for the resource. E.g. \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}\"",
                        "readOnly": true
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the resource",
                        "readOnly": true
                      },
                      "type": {
                        "type": "string",
                        "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                        "readOnly": true
                      },
                      "systemData": {
                        "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                        "readOnly": true,
                        "type": "object",
                        "properties": {
                          "createdBy": {
                            "type": "string",
                            "description": "The identity that created the resource."
                          },
                          "createdByType": {
                            "type": "string",
                            "description": "The type of identity that created the resource.",
                            "enum": [
                              "User",
                              "Application",
                              "ManagedIdentity",
                              "Key"
                            ],
                            "x-ms-enum": {
                              "name": "createdByType",
                              "modelAsString": true
                            }
                          },
                          "createdAt": {
                            "type": "string",
                            "format": "date-time",
                            "description": "The timestamp of resource creation (UTC)."
                          },
                          "lastModifiedBy": {
                            "type": "string",
                            "description": "The identity that last modified the resource."
                          },
                          "lastModifiedByType": {
                            "type": "string",
                            "description": "The type of identity that last modified the resource.",
                            "enum": [
                              "User",
                              "Application",
                              "ManagedIdentity",
                              "Key"
                            ],
                            "x-ms-enum": {
                              "name": "createdByType",
                              "modelAsString": true
                            }
                          },
                          "lastModifiedAt": {
                            "type": "string",
                            "format": "date-time",
                            "description": "The timestamp of resource last modification (UTC)"
                          }
                        }
                      },
                      "tags": {
                        "type": "object",
                        "description": "Resource tags.",
                        "additionalProperties": {
                          "type": "string"
                        },
                        "x-ms-mutability": [
                          "read",
                          "create",
                          "update"
                        ]
                      },
                      "location": {
                        "type": "string",
                        "description": "The geo-location where the resource lives",
                        "x-ms-mutability": [
                          "read",
                          "create"
                        ]
                      },
                      "properties": {
                        "description": "The resource-specific properties for this resource.",
                        "x-ms-client-flatten": true,
                        "type": "object",
                        "properties": {
                          "uuid": {
                            "type": "string",
                            "description": "Globally unique, immutable, non-reusable ID.",
                            "readOnly": true
                          },
                          "messaging": {
                            "description": "Assigned and unassigned messaging endpoints.",
                            "type": "object",
                            "properties": {
                              "endpoints": {
                                "type": "object",
                                "description": "Dictionary of messaging endpoints.",
                                "additionalProperties": {
                                  "type": "object",
                                  "description": "Namespace messaging endpoint model used by a device to connect to a service.",
                                  "properties": {
                                    "endpointType": {
                                      "type": "string",
                                      "description": "Type of connection used for messaging endpoint."
                                    },
                                    "address": {
                                      "type": "string",
                                      "description": "The endpoint address to connect to."
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "description": "The messaging endpoint Azure resource Id."
                                    }
                                  },
                                  "required": [
                                    "address"
                                  ]
                                }
                              }
                            }
                          },
                          "provisioningState": {
                            "description": "Provisioning state of the resource.",
                            "readOnly": true,
                            "type": "string",
                            "enum": [
                              "Succeeded",
                              "Failed",
                              "Canceled",
                              "Accepted",
                              "Deleting"
                            ],
                            "x-ms-enum": {
                              "name": "ProvisioningState",
                              "modelAsString": true,
                              "values": [
                                {
                                  "name": "Succeeded",
                                  "value": "Succeeded",
                                  "description": "Resource has been created."
                                },
                                {
                                  "name": "Failed",
                                  "value": "Failed",
                                  "description": "Resource creation failed."
                                },
                                {
                                  "name": "Canceled",
                                  "value": "Canceled",
                                  "description": "Resource creation was canceled."
                                },
                                {
                                  "name": "Accepted",
                                  "value": "Accepted",
                                  "description": "Resource has been accepted by the server."
                                },
                                {
                                  "name": "Deleting",
                                  "value": "Deleting",
                                  "description": "Resource is deleting."
                                }
                              ]
                            }
                          }
                        }
                      },
                      "identity": {
                        "description": "The managed service identities assigned to this resource.",
                        "type": "object",
                        "properties": {
                          "principalId": {
                            "type": "string",
                            "format": "uuid",
                            "description": "The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.",
                            "readOnly": true
                          },
                          "tenantId": {
                            "type": "string",
                            "format": "uuid",
                            "description": "The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.",
                            "readOnly": true
                          },
                          "type": {
                            "type": "string",
                            "description": "Type of managed service identity (either system assigned, or none).",
                            "enum": [
                              "None",
                              "SystemAssigned"
                            ],
                            "x-ms-enum": {
                              "name": "SystemAssignedServiceIdentityType",
                              "modelAsString": true
                            }
                          }
                        },
                        "required": [
                          "type"
                        ]
                      }
                    }
                  }
                },
                "nextLink": {
                  "type": "string",
                  "format": "uri",
                  "description": "The link to the next page of items"
                }
              },
              "required": [
                "value"
              ]
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeviceRegistry/namespaces/{namespaceName}": {
      "get": {
        "operationId": "Namespaces_Get",
        "tags": [
          "Namespaces"
        ],
        "description": "Get a Namespace",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription. The value must be an UUID.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group. The name is case insensitive.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "x-ms-parameter-location": "method"
          },
          {
            "name": "namespaceName",
            "in": "path",
            "description": "The name of the namespace.",
            "required": true,
            "type": "string",
            "minLength": 3,
            "maxLength": 64,
            "pattern": "^[a-z0-9][a-z0-9-]*[a-z0-9]$"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "type": "object",
              "description": "Namespace definition.",
              "properties": {
                "id": {
                  "type": "string",
                  "format": "arm-id",
                  "description": "Fully qualified resource ID for the resource. E.g. \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}\"",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "description": "The name of the resource",
                  "readOnly": true
                },
                "type": {
                  "type": "string",
                  "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                  "readOnly": true
                },
                "systemData": {
                  "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                  "readOnly": true,
                  "type": "object",
                  "properties": {
                    "createdBy": {
                      "type": "string",
                      "description": "The identity that created the resource."
                    },
                    "createdByType": {
                      "type": "string",
                      "description": "The type of identity that created the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource creation (UTC)."
                    },
                    "lastModifiedBy": {
                      "type": "string",
                      "description": "The identity that last modified the resource."
                    },
                    "lastModifiedByType": {
                      "type": "string",
                      "description": "The type of identity that last modified the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "lastModifiedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource last modification (UTC)"
                    }
                  }
                },
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "x-ms-mutability": [
                    "read",
                    "create",
                    "update"
                  ]
                },
                "location": {
                  "type": "string",
                  "description": "The geo-location where the resource lives",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ]
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "uuid": {
                      "type": "string",
                      "description": "Globally unique, immutable, non-reusable ID.",
                      "readOnly": true
                    },
                    "messaging": {
                      "description": "Assigned and unassigned messaging endpoints.",
                      "type": "object",
                      "properties": {
                        "endpoints": {
                          "type": "object",
                          "description": "Dictionary of messaging endpoints.",
                          "additionalProperties": {
                            "type": "object",
                            "description": "Namespace messaging endpoint model used by a device to connect to a service.",
                            "properties": {
                              "endpointType": {
                                "type": "string",
                                "description": "Type of connection used for messaging endpoint."
                              },
                              "address": {
                                "type": "string",
                                "description": "The endpoint address to connect to."
                              },
                              "resourceId": {
                                "type": "string",
                                "description": "The messaging endpoint Azure resource Id."
                              }
                            },
                            "required": [
                              "address"
                            ]
                          }
                        }
                      }
                    },
                    "provisioningState": {
                      "description": "Provisioning state of the resource.",
                      "readOnly": true,
                      "type": "string",
                      "enum": [
                        "Succeeded",
                        "Failed",
                        "Canceled",
                        "Accepted",
                        "Deleting"
                      ],
                      "x-ms-enum": {
                        "name": "ProvisioningState",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Succeeded",
                            "value": "Succeeded",
                            "description": "Resource has been created."
                          },
                          {
                            "name": "Failed",
                            "value": "Failed",
                            "description": "Resource creation failed."
                          },
                          {
                            "name": "Canceled",
                            "value": "Canceled",
                            "description": "Resource creation was canceled."
                          },
                          {
                            "name": "Accepted",
                            "value": "Accepted",
                            "description": "Resource has been accepted by the server."
                          },
                          {
                            "name": "Deleting",
                            "value": "Deleting",
                            "description": "Resource is deleting."
                          }
                        ]
                      }
                    }
                  }
                },
                "identity": {
                  "description": "The managed service identities assigned to this resource.",
                  "type": "object",
                  "properties": {
                    "principalId": {
                      "type": "string",
                      "format": "uuid",
                      "description": "The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.",
                      "readOnly": true
                    },
                    "tenantId": {
                      "type": "string",
                      "format": "uuid",
                      "description": "The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.",
                      "readOnly": true
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of managed service identity (either system assigned, or none).",
                      "enum": [
                        "None",
                        "SystemAssigned"
                      ],
                      "x-ms-enum": {
                        "name": "SystemAssignedServiceIdentityType",
                        "modelAsString": true
                      }
                    }
                  },
                  "required": [
                    "type"
                  ]
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "Namespaces_CreateOrReplace",
        "tags": [
          "Namespaces"
        ],
        "description": "Create a Namespace",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription. The value must be an UUID.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group. The name is case insensitive.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "x-ms-parameter-location": "method"
          },
          {
            "name": "namespaceName",
            "in": "path",
            "description": "The name of the namespace.",
            "required": true,
            "type": "string",
            "minLength": 3,
            "maxLength": 64,
            "pattern": "^[a-z0-9][a-z0-9-]*[a-z0-9]$"
          },
          {
            "name": "resource",
            "in": "body",
            "description": "Resource create parameters.",
            "required": true,
            "schema": {
              "type": "object",
              "description": "Namespace definition.",
              "properties": {
                "id": {
                  "type": "string",
                  "format": "arm-id",
                  "description": "Fully qualified resource ID for the resource. E.g. \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}\"",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "description": "The name of the resource",
                  "readOnly": true
                },
                "type": {
                  "type": "string",
                  "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                  "readOnly": true
                },
                "systemData": {
                  "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                  "readOnly": true,
                  "type": "object",
                  "properties": {
                    "createdBy": {
                      "type": "string",
                      "description": "The identity that created the resource."
                    },
                    "createdByType": {
                      "type": "string",
                      "description": "The type of identity that created the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource creation (UTC)."
                    },
                    "lastModifiedBy": {
                      "type": "string",
                      "description": "The identity that last modified the resource."
                    },
                    "lastModifiedByType": {
                      "type": "string",
                      "description": "The type of identity that last modified the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "lastModifiedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource last modification (UTC)"
                    }
                  }
                },
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "x-ms-mutability": [
                    "read",
                    "create",
                    "update"
                  ]
                },
                "location": {
                  "type": "string",
                  "description": "The geo-location where the resource lives",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ]
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "uuid": {
                      "type": "string",
                      "description": "Globally unique, immutable, non-reusable ID.",
                      "readOnly": true
                    },
                    "messaging": {
                      "description": "Assigned and unassigned messaging endpoints.",
                      "type": "object",
                      "properties": {
                        "endpoints": {
                          "type": "object",
                          "description": "Dictionary of messaging endpoints.",
                          "additionalProperties": {
                            "type": "object",
                            "description": "Namespace messaging endpoint model used by a device to connect to a service.",
                            "properties": {
                              "endpointType": {
                                "type": "string",
                                "description": "Type of connection used for messaging endpoint."
                              },
                              "address": {
                                "type": "string",
                                "description": "The endpoint address to connect to."
                              },
                              "resourceId": {
                                "type": "string",
                                "description": "The messaging endpoint Azure resource Id."
                              }
                            },
                            "required": [
                              "address"
                            ]
                          }
                        }
                      }
                    },
                    "provisioningState": {
                      "description": "Provisioning state of the resource.",
                      "readOnly": true,
                      "type": "string",
                      "enum": [
                        "Succeeded",
                        "Failed",
                        "Canceled",
                        "Accepted",
                        "Deleting"
                      ],
                      "x-ms-enum": {
                        "name": "ProvisioningState",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Succeeded",
                            "value": "Succeeded",
                            "description": "Resource has been created."
                          },
                          {
                            "name": "Failed",
                            "value": "Failed",
                            "description": "Resource creation failed."
                          },
                          {
                            "name": "Canceled",
                            "value": "Canceled",
                            "description": "Resource creation was canceled."
                          },
                          {
                            "name": "Accepted",
                            "value": "Accepted",
                            "description": "Resource has been accepted by the server."
                          },
                          {
                            "name": "Deleting",
                            "value": "Deleting",
                            "description": "Resource is deleting."
                          }
                        ]
                      }
                    }
                  }
                },
                "identity": {
                  "description": "The managed service identities assigned to this resource.",
                  "type": "object",
                  "properties": {
                    "principalId": {
                      "type": "string",
                      "format": "uuid",
                      "description": "The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.",
                      "readOnly": true
                    },
                    "tenantId": {
                      "type": "string",
                      "format": "uuid",
                      "description": "The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.",
                      "readOnly": true
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of managed service identity (either system assigned, or none).",
                      "enum": [
                        "None",
                        "SystemAssigned"
                      ],
                      "x-ms-enum": {
                        "name": "SystemAssignedServiceIdentityType",
                        "modelAsString": true
                      }
                    }
                  },
                  "required": [
                    "type"
                  ]
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resource 'Namespace' update operation succeeded",
            "schema": {
              "type": "object",
              "description": "Namespace definition.",
              "properties": {
                "id": {
                  "type": "string",
                  "format": "arm-id",
                  "description": "Fully qualified resource ID for the resource. E.g. \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}\"",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "description": "The name of the resource",
                  "readOnly": true
                },
                "type": {
                  "type": "string",
                  "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                  "readOnly": true
                },
                "systemData": {
                  "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                  "readOnly": true,
                  "type": "object",
                  "properties": {
                    "createdBy": {
                      "type": "string",
                      "description": "The identity that created the resource."
                    },
                    "createdByType": {
                      "type": "string",
                      "description": "The type of identity that created the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource creation (UTC)."
                    },
                    "lastModifiedBy": {
                      "type": "string",
                      "description": "The identity that last modified the resource."
                    },
                    "lastModifiedByType": {
                      "type": "string",
                      "description": "The type of identity that last modified the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "lastModifiedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource last modification (UTC)"
                    }
                  }
                },
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "x-ms-mutability": [
                    "read",
                    "create",
                    "update"
                  ]
                },
                "location": {
                  "type": "string",
                  "description": "The geo-location where the resource lives",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ]
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "uuid": {
                      "type": "string",
                      "description": "Globally unique, immutable, non-reusable ID.",
                      "readOnly": true
                    },
                    "messaging": {
                      "description": "Assigned and unassigned messaging endpoints.",
                      "type": "object",
                      "properties": {
                        "endpoints": {
                          "type": "object",
                          "description": "Dictionary of messaging endpoints.",
                          "additionalProperties": {
                            "type": "object",
                            "description": "Namespace messaging endpoint model used by a device to connect to a service.",
                            "properties": {
                              "endpointType": {
                                "type": "string",
                                "description": "Type of connection used for messaging endpoint."
                              },
                              "address": {
                                "type": "string",
                                "description": "The endpoint address to connect to."
                              },
                              "resourceId": {
                                "type": "string",
                                "description": "The messaging endpoint Azure resource Id."
                              }
                            },
                            "required": [
                              "address"
                            ]
                          }
                        }
                      }
                    },
                    "provisioningState": {
                      "description": "Provisioning state of the resource.",
                      "readOnly": true,
                      "type": "string",
                      "enum": [
                        "Succeeded",
                        "Failed",
                        "Canceled",
                        "Accepted",
                        "Deleting"
                      ],
                      "x-ms-enum": {
                        "name": "ProvisioningState",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Succeeded",
                            "value": "Succeeded",
                            "description": "Resource has been created."
                          },
                          {
                            "name": "Failed",
                            "value": "Failed",
                            "description": "Resource creation failed."
                          },
                          {
                            "name": "Canceled",
                            "value": "Canceled",
                            "description": "Resource creation was canceled."
                          },
                          {
                            "name": "Accepted",
                            "value": "Accepted",
                            "description": "Resource has been accepted by the server."
                          },
                          {
                            "name": "Deleting",
                            "value": "Deleting",
                            "description": "Resource is deleting."
                          }
                        ]
                      }
                    }
                  }
                },
                "identity": {
                  "description": "The managed service identities assigned to this resource.",
                  "type": "object",
                  "properties": {
                    "principalId": {
                      "type": "string",
                      "format": "uuid",
                      "description": "The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.",
                      "readOnly": true
                    },
                    "tenantId": {
                      "type": "string",
                      "format": "uuid",
                      "description": "The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.",
                      "readOnly": true
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of managed service identity (either system assigned, or none).",
                      "enum": [
                        "None",
                        "SystemAssigned"
                      ],
                      "x-ms-enum": {
                        "name": "SystemAssignedServiceIdentityType",
                        "modelAsString": true
                      }
                    }
                  },
                  "required": [
                    "type"
                  ]
                }
              }
            }
          },
          "201": {
            "description": "Resource 'Namespace' create operation succeeded",
            "schema": {
              "type": "object",
              "description": "Namespace definition.",
              "properties": {
                "id": {
                  "type": "string",
                  "format": "arm-id",
                  "description": "Fully qualified resource ID for the resource. E.g. \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}\"",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "description": "The name of the resource",
                  "readOnly": true
                },
                "type": {
                  "type": "string",
                  "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                  "readOnly": true
                },
                "systemData": {
                  "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                  "readOnly": true,
                  "type": "object",
                  "properties": {
                    "createdBy": {
                      "type": "string",
                      "description": "The identity that created the resource."
                    },
                    "createdByType": {
                      "type": "string",
                      "description": "The type of identity that created the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource creation (UTC)."
                    },
                    "lastModifiedBy": {
                      "type": "string",
                      "description": "The identity that last modified the resource."
                    },
                    "lastModifiedByType": {
                      "type": "string",
                      "description": "The type of identity that last modified the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "lastModifiedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource last modification (UTC)"
                    }
                  }
                },
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "x-ms-mutability": [
                    "read",
                    "create",
                    "update"
                  ]
                },
                "location": {
                  "type": "string",
                  "description": "The geo-location where the resource lives",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ]
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "uuid": {
                      "type": "string",
                      "description": "Globally unique, immutable, non-reusable ID.",
                      "readOnly": true
                    },
                    "messaging": {
                      "description": "Assigned and unassigned messaging endpoints.",
                      "type": "object",
                      "properties": {
                        "endpoints": {
                          "type": "object",
                          "description": "Dictionary of messaging endpoints.",
                          "additionalProperties": {
                            "type": "object",
                            "description": "Namespace messaging endpoint model used by a device to connect to a service.",
                            "properties": {
                              "endpointType": {
                                "type": "string",
                                "description": "Type of connection used for messaging endpoint."
                              },
                              "address": {
                                "type": "string",
                                "description": "The endpoint address to connect to."
                              },
                              "resourceId": {
                                "type": "string",
                                "description": "The messaging endpoint Azure resource Id."
                              }
                            },
                            "required": [
                              "address"
                            ]
                          }
                        }
                      }
                    },
                    "provisioningState": {
                      "description": "Provisioning state of the resource.",
                      "readOnly": true,
                      "type": "string",
                      "enum": [
                        "Succeeded",
                        "Failed",
                        "Canceled",
                        "Accepted",
                        "Deleting"
                      ],
                      "x-ms-enum": {
                        "name": "ProvisioningState",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Succeeded",
                            "value": "Succeeded",
                            "description": "Resource has been created."
                          },
                          {
                            "name": "Failed",
                            "value": "Failed",
                            "description": "Resource creation failed."
                          },
                          {
                            "name": "Canceled",
                            "value": "Canceled",
                            "description": "Resource creation was canceled."
                          },
                          {
                            "name": "Accepted",
                            "value": "Accepted",
                            "description": "Resource has been accepted by the server."
                          },
                          {
                            "name": "Deleting",
                            "value": "Deleting",
                            "description": "Resource is deleting."
                          }
                        ]
                      }
                    }
                  }
                },
                "identity": {
                  "description": "The managed service identities assigned to this resource.",
                  "type": "object",
                  "properties": {
                    "principalId": {
                      "type": "string",
                      "format": "uuid",
                      "description": "The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.",
                      "readOnly": true
                    },
                    "tenantId": {
                      "type": "string",
                      "format": "uuid",
                      "description": "The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.",
                      "readOnly": true
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of managed service identity (either system assigned, or none).",
                      "enum": [
                        "None",
                        "SystemAssigned"
                      ],
                      "x-ms-enum": {
                        "name": "SystemAssignedServiceIdentityType",
                        "modelAsString": true
                      }
                    }
                  },
                  "required": [
                    "type"
                  ]
                }
              }
            },
            "headers": {
              "Azure-AsyncOperation": {
                "type": "string",
                "description": "A link to the status monitor"
              },
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "Namespaces_Update",
        "tags": [
          "Namespaces"
        ],
        "description": "Update a Namespace",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription. The value must be an UUID.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group. The name is case insensitive.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "x-ms-parameter-location": "method"
          },
          {
            "name": "namespaceName",
            "in": "path",
            "description": "The name of the namespace.",
            "required": true,
            "type": "string",
            "minLength": 3,
            "maxLength": 64,
            "pattern": "^[a-z0-9][a-z0-9-]*[a-z0-9]$"
          },
          {
            "name": "properties",
            "in": "body",
            "description": "The resource properties to be updated.",
            "required": true,
            "schema": {
              "type": "object",
              "description": "The type used for update operations of the Namespace.",
              "properties": {
                "identity": {
                  "description": "The managed service identities assigned to this resource.",
                  "type": "object",
                  "properties": {
                    "principalId": {
                      "type": "string",
                      "format": "uuid",
                      "description": "The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.",
                      "readOnly": true
                    },
                    "tenantId": {
                      "type": "string",
                      "format": "uuid",
                      "description": "The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.",
                      "readOnly": true
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of managed service identity (either system assigned, or none).",
                      "enum": [
                        "None",
                        "SystemAssigned"
                      ],
                      "x-ms-enum": {
                        "name": "SystemAssignedServiceIdentityType",
                        "modelAsString": true
                      }
                    }
                  },
                  "required": [
                    "type"
                  ]
                },
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "messaging": {
                      "description": "Assigned and unassigned messaging endpoints.",
                      "type": "object",
                      "properties": {
                        "endpoints": {
                          "type": "object",
                          "description": "Dictionary of messaging endpoints.",
                          "additionalProperties": {
                            "type": "object",
                            "description": "Namespace messaging endpoint model used by a device to connect to a service.",
                            "properties": {
                              "endpointType": {
                                "type": "string",
                                "description": "Type of connection used for messaging endpoint."
                              },
                              "address": {
                                "type": "string",
                                "description": "The endpoint address to connect to."
                              },
                              "resourceId": {
                                "type": "string",
                                "description": "The messaging endpoint Azure resource Id."
                              }
                            },
                            "required": [
                              "address"
                            ]
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "type": "object",
              "description": "Namespace definition.",
              "properties": {
                "id": {
                  "type": "string",
                  "format": "arm-id",
                  "description": "Fully qualified resource ID for the resource. E.g. \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}\"",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "description": "The name of the resource",
                  "readOnly": true
                },
                "type": {
                  "type": "string",
                  "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                  "readOnly": true
                },
                "systemData": {
                  "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                  "readOnly": true,
                  "type": "object",
                  "properties": {
                    "createdBy": {
                      "type": "string",
                      "description": "The identity that created the resource."
                    },
                    "createdByType": {
                      "type": "string",
                      "description": "The type of identity that created the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource creation (UTC)."
                    },
                    "lastModifiedBy": {
                      "type": "string",
                      "description": "The identity that last modified the resource."
                    },
                    "lastModifiedByType": {
                      "type": "string",
                      "description": "The type of identity that last modified the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "lastModifiedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource last modification (UTC)"
                    }
                  }
                },
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "x-ms-mutability": [
                    "read",
                    "create",
                    "update"
                  ]
                },
                "location": {
                  "type": "string",
                  "description": "The geo-location where the resource lives",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ]
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "uuid": {
                      "type": "string",
                      "description": "Globally unique, immutable, non-reusable ID.",
                      "readOnly": true
                    },
                    "messaging": {
                      "description": "Assigned and unassigned messaging endpoints.",
                      "type": "object",
                      "properties": {
                        "endpoints": {
                          "type": "object",
                          "description": "Dictionary of messaging endpoints.",
                          "additionalProperties": {
                            "type": "object",
                            "description": "Namespace messaging endpoint model used by a device to connect to a service.",
                            "properties": {
                              "endpointType": {
                                "type": "string",
                                "description": "Type of connection used for messaging endpoint."
                              },
                              "address": {
                                "type": "string",
                                "description": "The endpoint address to connect to."
                              },
                              "resourceId": {
                                "type": "string",
                                "description": "The messaging endpoint Azure resource Id."
                              }
                            },
                            "required": [
                              "address"
                            ]
                          }
                        }
                      }
                    },
                    "provisioningState": {
                      "description": "Provisioning state of the resource.",
                      "readOnly": true,
                      "type": "string",
                      "enum": [
                        "Succeeded",
                        "Failed",
                        "Canceled",
                        "Accepted",
                        "Deleting"
                      ],
                      "x-ms-enum": {
                        "name": "ProvisioningState",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Succeeded",
                            "value": "Succeeded",
                            "description": "Resource has been created."
                          },
                          {
                            "name": "Failed",
                            "value": "Failed",
                            "description": "Resource creation failed."
                          },
                          {
                            "name": "Canceled",
                            "value": "Canceled",
                            "description": "Resource creation was canceled."
                          },
                          {
                            "name": "Accepted",
                            "value": "Accepted",
                            "description": "Resource has been accepted by the server."
                          },
                          {
                            "name": "Deleting",
                            "value": "Deleting",
                            "description": "Resource is deleting."
                          }
                        ]
                      }
                    }
                  }
                },
                "identity": {
                  "description": "The managed service identities assigned to this resource.",
                  "type": "object",
                  "properties": {
                    "principalId": {
                      "type": "string",
                      "format": "uuid",
                      "description": "The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.",
                      "readOnly": true
                    },
                    "tenantId": {
                      "type": "string",
                      "format": "uuid",
                      "description": "The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.",
                      "readOnly": true
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of managed service identity (either system assigned, or none).",
                      "enum": [
                        "None",
                        "SystemAssigned"
                      ],
                      "x-ms-enum": {
                        "name": "SystemAssignedServiceIdentityType",
                        "modelAsString": true
                      }
                    }
                  },
                  "required": [
                    "type"
                  ]
                }
              }
            }
          },
          "202": {
            "description": "Resource update request accepted.",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              },
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "Namespaces_Delete",
        "tags": [
          "Namespaces"
        ],
        "description": "Delete a Namespace",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription. The value must be an UUID.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group. The name is case insensitive.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "x-ms-parameter-location": "method"
          },
          {
            "name": "namespaceName",
            "in": "path",
            "description": "The name of the namespace.",
            "required": true,
            "type": "string",
            "minLength": 3,
            "maxLength": 64,
            "pattern": "^[a-z0-9][a-z0-9-]*[a-z0-9]$"
          }
        ],
        "responses": {
          "202": {
            "description": "Resource deletion accepted.",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              },
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "204": {
            "description": "Resource does not exist."
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeviceRegistry/namespaces/{namespaceName}/assets": {
      "get": {
        "operationId": "NamespaceAssets_ListByResourceGroup",
        "tags": [
          "NamespaceAssets"
        ],
        "description": "List NamespaceAsset resources by Namespace",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription. The value must be an UUID.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group. The name is case insensitive.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "x-ms-parameter-location": "method"
          },
          {
            "name": "namespaceName",
            "in": "path",
            "description": "The name of the namespace.",
            "required": true,
            "type": "string",
            "minLength": 3,
            "maxLength": 64,
            "pattern": "^[a-z0-9][a-z0-9-]*[a-z0-9]$"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "type": "object",
              "description": "The response of a NamespaceAsset list operation.",
              "properties": {
                "value": {
                  "type": "array",
                  "description": "The NamespaceAsset items on this page",
                  "items": {
                    "type": "object",
                    "description": "Asset definition.",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "arm-id",
                        "description": "Fully qualified resource ID for the resource. E.g. \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}\"",
                        "readOnly": true
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the resource",
                        "readOnly": true
                      },
                      "type": {
                        "type": "string",
                        "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                        "readOnly": true
                      },
                      "systemData": {
                        "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                        "readOnly": true,
                        "type": "object",
                        "properties": {
                          "createdBy": {
                            "type": "string",
                            "description": "The identity that created the resource."
                          },
                          "createdByType": {
                            "type": "string",
                            "description": "The type of identity that created the resource.",
                            "enum": [
                              "User",
                              "Application",
                              "ManagedIdentity",
                              "Key"
                            ],
                            "x-ms-enum": {
                              "name": "createdByType",
                              "modelAsString": true
                            }
                          },
                          "createdAt": {
                            "type": "string",
                            "format": "date-time",
                            "description": "The timestamp of resource creation (UTC)."
                          },
                          "lastModifiedBy": {
                            "type": "string",
                            "description": "The identity that last modified the resource."
                          },
                          "lastModifiedByType": {
                            "type": "string",
                            "description": "The type of identity that last modified the resource.",
                            "enum": [
                              "User",
                              "Application",
                              "ManagedIdentity",
                              "Key"
                            ],
                            "x-ms-enum": {
                              "name": "createdByType",
                              "modelAsString": true
                            }
                          },
                          "lastModifiedAt": {
                            "type": "string",
                            "format": "date-time",
                            "description": "The timestamp of resource last modification (UTC)"
                          }
                        }
                      },
                      "tags": {
                        "type": "object",
                        "description": "Resource tags.",
                        "additionalProperties": {
                          "type": "string"
                        },
                        "x-ms-mutability": [
                          "read",
                          "create",
                          "update"
                        ]
                      },
                      "location": {
                        "type": "string",
                        "description": "The geo-location where the resource lives",
                        "x-ms-mutability": [
                          "read",
                          "create"
                        ]
                      },
                      "properties": {
                        "description": "The resource-specific properties for this resource.",
                        "x-ms-client-flatten": true,
                        "type": "object",
                        "properties": {
                          "uuid": {
                            "type": "string",
                            "description": "Globally unique, immutable, non-reusable ID.",
                            "readOnly": true
                          },
                          "enabled": {
                            "type": "boolean",
                            "description": "Enabled/disabled status of the asset."
                          },
                          "externalAssetId": {
                            "type": "string",
                            "description": "Asset ID provided by the customer.",
                            "x-ms-mutability": [
                              "read",
                              "create"
                            ]
                          },
                          "displayName": {
                            "type": "string",
                            "description": "Human-readable display name."
                          },
                          "description": {
                            "type": "string",
                            "description": "Human-readable description of the asset."
                          },
                          "deviceRef": {
                            "description": "Reference to the device that provides data for this asset. Must provide device name & endpoint on the device to use.",
                            "x-ms-mutability": [
                              "read",
                              "create"
                            ],
                            "type": "object",
                            "properties": {
                              "deviceName": {
                                "type": "string",
                                "description": "Name of the device resource"
                              },
                              "endpointName": {
                                "type": "string",
                                "description": "The name of endpoint to use"
                              }
                            },
                            "required": [
                              "deviceName",
                              "endpointName"
                            ]
                          },
                          "assetTypeRefs": {
                            "type": "array",
                            "description": "URIs or type definition IDs.",
                            "items": {
                              "type": "string"
                            }
                          },
                          "version": {
                            "type": "integer",
                            "format": "int64",
                            "description": "An integer that is incremented each time the resource is modified.",
                            "readOnly": true
                          },
                          "lastTransitionTime": {
                            "type": "string",
                            "format": "date-time",
                            "description": "A timestamp (in UTC) that is updated each time the resource is modified.",
                            "readOnly": true
                          },
                          "manufacturer": {
                            "type": "string",
                            "description": "Asset manufacturer."
                          },
                          "manufacturerUri": {
                            "type": "string",
                            "description": "Asset manufacturer URI."
                          },
                          "model": {
                            "type": "string",
                            "description": "Asset model."
                          },
                          "productCode": {
                            "type": "string",
                            "description": "Asset product code."
                          },
                          "hardwareRevision": {
                            "type": "string",
                            "description": "Asset hardware revision number."
                          },
                          "softwareRevision": {
                            "type": "string",
                            "description": "Asset software revision number."
                          },
                          "documentationUri": {
                            "type": "string",
                            "description": "Asset documentation reference."
                          },
                          "serialNumber": {
                            "type": "string",
                            "description": "Asset serial number."
                          },
                          "attributes": {
                            "type": "object",
                            "description": "A set of key-value pairs that contain custom attributes set by the customer.",
                            "additionalProperties": {}
                          },
                          "discoveredAssetRefs": {
                            "type": "array",
                            "description": "Reference to a list of discovered assets. Populated only if the asset has been created from discovery flow. Discovered asset names must be provided.",
                            "items": {
                              "type": "string"
                            },
                            "x-ms-mutability": [
                              "read",
                              "create"
                            ]
                          },
                          "defaultDatasetsConfiguration": {
                            "type": "string",
                            "description": "Stringified JSON that contains connector-specific default configuration for all datasets. Each dataset can have its own configuration that overrides the default settings here."
                          },
                          "defaultEventsConfiguration": {
                            "type": "string",
                            "description": "Stringified JSON that contains connector-specific default configuration for all events. Each event can have its own configuration that overrides the default settings here."
                          },
                          "defaultStreamsConfiguration": {
                            "type": "string",
                            "description": "Stringified JSON that contains connector-specific default configuration for all streams. Each stream can have its own configuration that overrides the default settings here."
                          },
                          "defaultManagementGroupsConfiguration": {
                            "type": "string",
                            "description": "Stringified JSON that contains connector-specific default configuration for all management groups. Each management group can have its own configuration that overrides the default settings here."
                          },
                          "defaultDatasetsDestinations": {
                            "type": "array",
                            "description": "Default destinations for a dataset.",
                            "items": {
                              "type": "object",
                              "description": "The type of the destination.",
                              "properties": {
                                "target": {
                                  "description": "Target destination.",
                                  "type": "string",
                                  "enum": [
                                    "Mqtt",
                                    "BrokerStateStore",
                                    "Storage"
                                  ],
                                  "x-ms-enum": {
                                    "name": "DatasetDestinationTarget",
                                    "modelAsString": true,
                                    "values": [
                                      {
                                        "name": "Mqtt",
                                        "value": "Mqtt",
                                        "description": "MQTT target."
                                      },
                                      {
                                        "name": "BrokerStateStore",
                                        "value": "BrokerStateStore",
                                        "description": "Broker State Store target."
                                      },
                                      {
                                        "name": "Storage",
                                        "value": "Storage",
                                        "description": "Storage target."
                                      }
                                    ]
                                  }
                                }
                              },
                              "discriminator": "target",
                              "required": [
                                "target"
                              ]
                            },
                            "x-ms-identifiers": []
                          },
                          "defaultEventsDestinations": {
                            "type": "array",
                            "description": "Default destinations for an event.",
                            "items": {
                              "type": "object",
                              "description": "The type of the destination.",
                              "properties": {
                                "target": {
                                  "description": "Target destination.",
                                  "type": "string",
                                  "enum": [
                                    "Mqtt",
                                    "Storage"
                                  ],
                                  "x-ms-enum": {
                                    "name": "EventDestinationTarget",
                                    "modelAsString": true,
                                    "values": [
                                      {
                                        "name": "Mqtt",
                                        "value": "Mqtt",
                                        "description": "MQTT target."
                                      },
                                      {
                                        "name": "Storage",
                                        "value": "Storage",
                                        "description": "Storage target."
                                      }
                                    ]
                                  }
                                }
                              },
                              "discriminator": "target",
                              "required": [
                                "target"
                              ]
                            },
                            "x-ms-identifiers": []
                          },
                          "defaultStreamsDestinations": {
                            "type": "array",
                            "description": "Default destinations for a stream.",
                            "items": {
                              "type": "object",
                              "description": "The type of the destination.",
                              "properties": {
                                "target": {
                                  "description": "Target destination.",
                                  "type": "string",
                                  "enum": [
                                    "Mqtt",
                                    "Storage"
                                  ],
                                  "x-ms-enum": {
                                    "name": "StreamDestinationTarget",
                                    "modelAsString": true,
                                    "values": [
                                      {
                                        "name": "Mqtt",
                                        "value": "Mqtt",
                                        "description": "MQTT target."
                                      },
                                      {
                                        "name": "Storage",
                                        "value": "Storage",
                                        "description": "Storage target."
                                      }
                                    ]
                                  }
                                }
                              },
                              "discriminator": "target",
                              "required": [
                                "target"
                              ]
                            },
                            "x-ms-identifiers": []
                          },
                          "datasets": {
                            "type": "array",
                            "description": "Array of datasets that are part of the asset. Each dataset describes the data points that make up the set.",
                            "items": {
                              "type": "object",
                              "description": "Defines the dataset properties.",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "Name of the dataset."
                                },
                                "dataSource": {
                                  "type": "string",
                                  "description": "Reference to a data source for a given dataset."
                                },
                                "typeRef": {
                                  "type": "string",
                                  "description": "URI or type definition ID."
                                },
                                "datasetConfiguration": {
                                  "type": "string",
                                  "description": "Stringified JSON that contains connector-specific JSON string that describes configuration for the specific dataset."
                                },
                                "destinations": {
                                  "type": "array",
                                  "description": "Destinations for a dataset.",
                                  "items": {
                                    "type": "object",
                                    "description": "The type of the destination.",
                                    "properties": {
                                      "target": {
                                        "description": "Target destination.",
                                        "type": "string",
                                        "enum": [
                                          "Mqtt",
                                          "BrokerStateStore",
                                          "Storage"
                                        ],
                                        "x-ms-enum": {
                                          "name": "DatasetDestinationTarget",
                                          "modelAsString": true,
                                          "values": [
                                            {
                                              "name": "Mqtt",
                                              "value": "Mqtt",
                                              "description": "MQTT target."
                                            },
                                            {
                                              "name": "BrokerStateStore",
                                              "value": "BrokerStateStore",
                                              "description": "Broker State Store target."
                                            },
                                            {
                                              "name": "Storage",
                                              "value": "Storage",
                                              "description": "Storage target."
                                            }
                                          ]
                                        }
                                      }
                                    },
                                    "discriminator": "target",
                                    "required": [
                                      "target"
                                    ]
                                  },
                                  "x-ms-identifiers": []
                                },
                                "dataPoints": {
                                  "type": "array",
                                  "description": "Array of data points that are part of the dataset. Each data point can have per-data point configuration.",
                                  "items": {
                                    "type": "object",
                                    "description": "Defines the dataset data point properties.",
                                    "properties": {
                                      "name": {
                                        "type": "string",
                                        "description": "The name of the data point."
                                      },
                                      "dataSource": {
                                        "type": "string",
                                        "description": "The address of the source of the data in the asset (e.g. URL) so that a client can access the data source on the asset."
                                      },
                                      "dataPointConfiguration": {
                                        "type": "string",
                                        "description": "Stringified JSON that contains connector-specific configuration for the data point. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize."
                                      },
                                      "typeRef": {
                                        "type": "string",
                                        "description": "URI or type definition ID."
                                      }
                                    },
                                    "required": [
                                      "name",
                                      "dataSource"
                                    ]
                                  },
                                  "x-ms-identifiers": []
                                }
                              },
                              "required": [
                                "name"
                              ]
                            },
                            "x-ms-identifiers": []
                          },
                          "eventGroups": {
                            "type": "array",
                            "description": "Array of event groups that are part of the asset. Each event group can have per-event group configuration.",
                            "items": {
                              "type": "object",
                              "description": "Defines the event group properties.",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "The name of the event group."
                                },
                                "dataSource": {
                                  "type": "string",
                                  "description": "The address of the notifier of the event group in the asset (e.g. URL) so that a client can access the event group on the asset."
                                },
                                "eventGroupConfiguration": {
                                  "type": "string",
                                  "description": "Stringified JSON that contains connector-specific configuration for the event group. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize."
                                },
                                "defaultDestinations": {
                                  "type": "array",
                                  "description": "Destinations for events. Default destinations when destinations is not defined at the event level.",
                                  "items": {
                                    "type": "object",
                                    "description": "The type of the destination.",
                                    "properties": {
                                      "target": {
                                        "description": "Target destination.",
                                        "type": "string",
                                        "enum": [
                                          "Mqtt",
                                          "Storage"
                                        ],
                                        "x-ms-enum": {
                                          "name": "EventDestinationTarget",
                                          "modelAsString": true,
                                          "values": [
                                            {
                                              "name": "Mqtt",
                                              "value": "Mqtt",
                                              "description": "MQTT target."
                                            },
                                            {
                                              "name": "Storage",
                                              "value": "Storage",
                                              "description": "Storage target."
                                            }
                                          ]
                                        }
                                      }
                                    },
                                    "discriminator": "target",
                                    "required": [
                                      "target"
                                    ]
                                  },
                                  "x-ms-identifiers": []
                                },
                                "typeRef": {
                                  "type": "string",
                                  "description": "URI or type definition ID."
                                },
                                "events": {
                                  "type": "array",
                                  "description": "Array of events that are part of the event group.",
                                  "items": {
                                    "type": "object",
                                    "description": "Defines the event properties.",
                                    "properties": {
                                      "name": {
                                        "type": "string",
                                        "description": "The name of the event."
                                      },
                                      "dataSource": {
                                        "type": "string",
                                        "description": "Reference to a data source for a given event."
                                      },
                                      "eventConfiguration": {
                                        "type": "string",
                                        "description": "Stringified JSON that contains connector-specific configuration for the event. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize."
                                      },
                                      "destinations": {
                                        "type": "array",
                                        "description": "Destinations for an event.",
                                        "items": {
                                          "type": "object",
                                          "description": "The type of the destination.",
                                          "properties": {
                                            "target": {
                                              "description": "Target destination.",
                                              "type": "string",
                                              "enum": [
                                                "Mqtt",
                                                "Storage"
                                              ],
                                              "x-ms-enum": {
                                                "name": "EventDestinationTarget",
                                                "modelAsString": true,
                                                "values": [
                                                  {
                                                    "name": "Mqtt",
                                                    "value": "Mqtt",
                                                    "description": "MQTT target."
                                                  },
                                                  {
                                                    "name": "Storage",
                                                    "value": "Storage",
                                                    "description": "Storage target."
                                                  }
                                                ]
                                              }
                                            }
                                          },
                                          "discriminator": "target",
                                          "required": [
                                            "target"
                                          ]
                                        },
                                        "x-ms-identifiers": []
                                      },
                                      "typeRef": {
                                        "type": "string",
                                        "description": "URI or type definition ID."
                                      }
                                    },
                                    "required": [
                                      "name"
                                    ]
                                  },
                                  "x-ms-identifiers": []
                                }
                              },
                              "required": [
                                "name"
                              ]
                            },
                            "x-ms-identifiers": []
                          },
                          "streams": {
                            "type": "array",
                            "description": "Array of streams that are part of the asset. Each stream can have a per-stream configuration.",
                            "items": {
                              "type": "object",
                              "description": "Defines the stream properties.",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "Name of the stream definition."
                                },
                                "streamConfiguration": {
                                  "type": "string",
                                  "description": "Stringified JSON that contains connector-specific configuration for the specific stream."
                                },
                                "typeRef": {
                                  "type": "string",
                                  "description": "URI or type definition ID."
                                },
                                "destinations": {
                                  "type": "array",
                                  "description": "Destinations for a stream.",
                                  "items": {
                                    "type": "object",
                                    "description": "The type of the destination.",
                                    "properties": {
                                      "target": {
                                        "description": "Target destination.",
                                        "type": "string",
                                        "enum": [
                                          "Mqtt",
                                          "Storage"
                                        ],
                                        "x-ms-enum": {
                                          "name": "StreamDestinationTarget",
                                          "modelAsString": true,
                                          "values": [
                                            {
                                              "name": "Mqtt",
                                              "value": "Mqtt",
                                              "description": "MQTT target."
                                            },
                                            {
                                              "name": "Storage",
                                              "value": "Storage",
                                              "description": "Storage target."
                                            }
                                          ]
                                        }
                                      }
                                    },
                                    "discriminator": "target",
                                    "required": [
                                      "target"
                                    ]
                                  },
                                  "x-ms-identifiers": []
                                }
                              },
                              "required": [
                                "name"
                              ]
                            },
                            "x-ms-identifiers": []
                          },
                          "managementGroups": {
                            "type": "array",
                            "description": "Array of management groups that are part of the asset. Each management group can have a per-group configuration.",
                            "items": {
                              "type": "object",
                              "description": "Defines the management group properties.",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "Name of the management group."
                                },
                                "dataSource": {
                                  "type": "string",
                                  "description": "Reference to a data source for a given management group."
                                },
                                "managementGroupConfiguration": {
                                  "type": "string",
                                  "description": "Stringified JSON that contains connector-specific configuration for the management group."
                                },
                                "typeRef": {
                                  "type": "string",
                                  "description": "URI or type definition ID."
                                },
                                "defaultTopic": {
                                  "type": "string",
                                  "description": "Default MQTT topic path on which a client will receive the request for all actions that are part of the management group."
                                },
                                "defaultTimeoutInSeconds": {
                                  "type": "integer",
                                  "format": "int32",
                                  "description": "Default response timeout for all actions that are part of the management group.",
                                  "default": 100
                                },
                                "actions": {
                                  "type": "array",
                                  "description": "Array of actions that are part of the management group. Each action can have an individual configuration.",
                                  "items": {
                                    "type": "object",
                                    "description": "Defines the action properties.",
                                    "properties": {
                                      "name": {
                                        "type": "string",
                                        "description": "Name of the action."
                                      },
                                      "actionConfiguration": {
                                        "type": "string",
                                        "description": "Stringified JSON that contains connector-specific configuration for the action."
                                      },
                                      "targetUri": {
                                        "type": "string",
                                        "description": "The target URI on which a client can invoke the specific action."
                                      },
                                      "typeRef": {
                                        "type": "string",
                                        "description": "URI or type definition ID."
                                      },
                                      "topic": {
                                        "type": "string",
                                        "description": "The MQTT topic path on which a client will receive the request for the action."
                                      },
                                      "actionType": {
                                        "type": "string",
                                        "description": "The type of the action.",
                                        "default": "Call",
                                        "enum": [
                                          "Call",
                                          "Read",
                                          "Write"
                                        ],
                                        "x-ms-enum": {
                                          "name": "ManagementActionType",
                                          "modelAsString": true,
                                          "values": [
                                            {
                                              "name": "Call",
                                              "value": "Call",
                                              "description": "Call action type."
                                            },
                                            {
                                              "name": "Read",
                                              "value": "Read",
                                              "description": "Read action type."
                                            },
                                            {
                                              "name": "Write",
                                              "value": "Write",
                                              "description": "Write action type."
                                            }
                                          ]
                                        }
                                      },
                                      "timeoutInSeconds": {
                                        "type": "integer",
                                        "format": "int32",
                                        "description": "Response timeout for the action."
                                      }
                                    },
                                    "required": [
                                      "name",
                                      "targetUri"
                                    ]
                                  },
                                  "x-ms-identifiers": []
                                }
                              },
                              "required": [
                                "name"
                              ]
                            },
                            "x-ms-identifiers": []
                          },
                          "status": {
                            "description": "Read only object to reflect changes that have occurred on the Edge. Similar to Kubernetes status property for custom resources.",
                            "readOnly": true,
                            "type": "object",
                            "properties": {
                              "config": {
                                "description": "Defines the asset status config properties.",
                                "readOnly": true,
                                "type": "object",
                                "properties": {
                                  "version": {
                                    "type": "integer",
                                    "format": "int64",
                                    "description": "A read-only incremental counter indicating the number of times the configuration has been modified from the perspective of the current actual (edge) state of the CRD. Edge would be the only writer of this value and would sync back up to the cloud. In steady state, this should equal version.",
                                    "readOnly": true
                                  },
                                  "lastTransitionTime": {
                                    "type": "string",
                                    "format": "date-time",
                                    "description": "A read-only timestamp indicating the last time the configuration has been modified from the perspective of the current actual (edge) state of the CRD. Edge would be the only writer of this value and would sync back up to the cloud.",
                                    "readOnly": true
                                  },
                                  "error": {
                                    "description": "Object to transfer and persist errors that originate from the edge.",
                                    "readOnly": true,
                                    "type": "object",
                                    "properties": {
                                      "code": {
                                        "type": "string",
                                        "description": "Error code for classification of errors (ex: '400', '404', '500', etc.).",
                                        "readOnly": true
                                      },
                                      "message": {
                                        "type": "string",
                                        "description": "Human-readable helpful error message to provide additional context for error (e.g.,: “Capability ID 'foo' does not exist”).",
                                        "readOnly": true
                                      },
                                      "details": {
                                        "type": "array",
                                        "description": "Array of error details that describe the status of each error.",
                                        "items": {
                                          "type": "object",
                                          "description": "Defines the error details properties.",
                                          "properties": {
                                            "code": {
                                              "type": "string",
                                              "description": "Multi-part error code for classification and root causing of errors (ex: 400.200.100.432).",
                                              "readOnly": true
                                            },
                                            "message": {
                                              "type": "string",
                                              "description": "Human-readable helpful error message to provide additional context for error (ex: “Authentication method not supported”).",
                                              "readOnly": true
                                            },
                                            "info": {
                                              "type": "string",
                                              "description": "Human-readable helpful detailed text context for debugging (ex: “The following mechanisms are supported...”).",
                                              "readOnly": true
                                            },
                                            "correlationId": {
                                              "type": "string",
                                              "description": "Unique identifier for the transaction to aid in debugging.",
                                              "readOnly": true
                                            }
                                          }
                                        },
                                        "readOnly": true,
                                        "x-ms-identifiers": []
                                      }
                                    }
                                  }
                                }
                              },
                              "datasets": {
                                "type": "array",
                                "description": "Array of dataset statuses that describe the status of each dataset.",
                                "items": {
                                  "type": "object",
                                  "description": "Defines the asset status dataset properties.",
                                  "properties": {
                                    "name": {
                                      "type": "string",
                                      "description": "The name of the dataset. Must be unique within the status.datasets array. This name is used to correlate between the spec and status dataset information.",
                                      "readOnly": true
                                    },
                                    "messageSchemaReference": {
                                      "description": "The message schema reference object.",
                                      "readOnly": true,
                                      "type": "object",
                                      "properties": {
                                        "schemaRegistryNamespace": {
                                          "type": "string",
                                          "description": "The message schema registry namespace.",
                                          "readOnly": true
                                        },
                                        "schemaName": {
                                          "type": "string",
                                          "description": "The message schema name.",
                                          "readOnly": true
                                        },
                                        "schemaVersion": {
                                          "type": "string",
                                          "description": "The message schema version.",
                                          "readOnly": true
                                        }
                                      },
                                      "required": [
                                        "schemaRegistryNamespace",
                                        "schemaName",
                                        "schemaVersion"
                                      ]
                                    },
                                    "error": {
                                      "description": "Object to transfer and persist errors that originate from the edge.",
                                      "readOnly": true,
                                      "type": "object",
                                      "properties": {
                                        "code": {
                                          "type": "string",
                                          "description": "Error code for classification of errors (ex: '400', '404', '500', etc.).",
                                          "readOnly": true
                                        },
                                        "message": {
                                          "type": "string",
                                          "description": "Human-readable helpful error message to provide additional context for error (e.g.,: “Capability ID 'foo' does not exist”).",
                                          "readOnly": true
                                        },
                                        "details": {
                                          "type": "array",
                                          "description": "Array of error details that describe the status of each error.",
                                          "items": {
                                            "type": "object",
                                            "description": "Defines the error details properties.",
                                            "properties": {
                                              "code": {
                                                "type": "string",
                                                "description": "Multi-part error code for classification and root causing of errors (ex: 400.200.100.432).",
                                                "readOnly": true
                                              },
                                              "message": {
                                                "type": "string",
                                                "description": "Human-readable helpful error message to provide additional context for error (ex: “Authentication method not supported”).",
                                                "readOnly": true
                                              },
                                              "info": {
                                                "type": "string",
                                                "description": "Human-readable helpful detailed text context for debugging (ex: “The following mechanisms are supported...”).",
                                                "readOnly": true
                                              },
                                              "correlationId": {
                                                "type": "string",
                                                "description": "Unique identifier for the transaction to aid in debugging.",
                                                "readOnly": true
                                              }
                                            }
                                          },
                                          "readOnly": true,
                                          "x-ms-identifiers": []
                                        }
                                      }
                                    }
                                  },
                                  "required": [
                                    "name"
                                  ]
                                },
                                "readOnly": true,
                                "x-ms-identifiers": []
                              },
                              "eventGroups": {
                                "type": "array",
                                "description": "Array of event group statuses that describe the status of each event group.",
                                "items": {
                                  "type": "object",
                                  "description": "Defines the asset status event group properties.",
                                  "properties": {
                                    "name": {
                                      "type": "string",
                                      "description": "The name of the event group. Must be unique within the status.eventGroups array. This name is used to correlate between the spec and status event group information.",
                                      "readOnly": true
                                    },
                                    "events": {
                                      "type": "array",
                                      "description": "Array of event statuses that describe the status of each event in the event group.",
                                      "items": {
                                        "type": "object",
                                        "description": "Defines the asset status event properties.",
                                        "properties": {
                                          "name": {
                                            "type": "string",
                                            "description": "The name of the event. Must be unique within the status.events array. This name is used to correlate between the spec and status event information.",
                                            "readOnly": true
                                          },
                                          "messageSchemaReference": {
                                            "description": "The message schema reference object.",
                                            "readOnly": true,
                                            "type": "object",
                                            "properties": {
                                              "schemaRegistryNamespace": {
                                                "type": "string",
                                                "description": "The message schema registry namespace.",
                                                "readOnly": true
                                              },
                                              "schemaName": {
                                                "type": "string",
                                                "description": "The message schema name.",
                                                "readOnly": true
                                              },
                                              "schemaVersion": {
                                                "type": "string",
                                                "description": "The message schema version.",
                                                "readOnly": true
                                              }
                                            },
                                            "required": [
                                              "schemaRegistryNamespace",
                                              "schemaName",
                                              "schemaVersion"
                                            ]
                                          },
                                          "error": {
                                            "description": "Object to transfer and persist errors that originate from the edge.",
                                            "readOnly": true,
                                            "type": "object",
                                            "properties": {
                                              "code": {
                                                "type": "string",
                                                "description": "Error code for classification of errors (ex: '400', '404', '500', etc.).",
                                                "readOnly": true
                                              },
                                              "message": {
                                                "type": "string",
                                                "description": "Human-readable helpful error message to provide additional context for error (e.g.,: “Capability ID 'foo' does not exist”).",
                                                "readOnly": true
                                              },
                                              "details": {
                                                "type": "array",
                                                "description": "Array of error details that describe the status of each error.",
                                                "items": {
                                                  "type": "object",
                                                  "description": "Defines the error details properties.",
                                                  "properties": {
                                                    "code": {
                                                      "type": "string",
                                                      "description": "Multi-part error code for classification and root causing of errors (ex: 400.200.100.432).",
                                                      "readOnly": true
                                                    },
                                                    "message": {
                                                      "type": "string",
                                                      "description": "Human-readable helpful error message to provide additional context for error (ex: “Authentication method not supported”).",
                                                      "readOnly": true
                                                    },
                                                    "info": {
                                                      "type": "string",
                                                      "description": "Human-readable helpful detailed text context for debugging (ex: “The following mechanisms are supported...”).",
                                                      "readOnly": true
                                                    },
                                                    "correlationId": {
                                                      "type": "string",
                                                      "description": "Unique identifier for the transaction to aid in debugging.",
                                                      "readOnly": true
                                                    }
                                                  }
                                                },
                                                "readOnly": true,
                                                "x-ms-identifiers": []
                                              }
                                            }
                                          }
                                        },
                                        "required": [
                                          "name"
                                        ]
                                      },
                                      "readOnly": true,
                                      "x-ms-identifiers": []
                                    }
                                  },
                                  "required": [
                                    "name"
                                  ]
                                },
                                "readOnly": true,
                                "x-ms-identifiers": []
                              },
                              "streams": {
                                "type": "array",
                                "description": "Array of stream statuses that describe the status of each stream.",
                                "items": {
                                  "type": "object",
                                  "description": "Defines the asset status stream properties.",
                                  "properties": {
                                    "name": {
                                      "type": "string",
                                      "description": "The name of the stream. Must be unique within the status.streams array. This name is used to correlate between the spec and status event information.",
                                      "readOnly": true
                                    },
                                    "messageSchemaReference": {
                                      "description": "The message schema reference object.",
                                      "readOnly": true,
                                      "type": "object",
                                      "properties": {
                                        "schemaRegistryNamespace": {
                                          "type": "string",
                                          "description": "The message schema registry namespace.",
                                          "readOnly": true
                                        },
                                        "schemaName": {
                                          "type": "string",
                                          "description": "The message schema name.",
                                          "readOnly": true
                                        },
                                        "schemaVersion": {
                                          "type": "string",
                                          "description": "The message schema version.",
                                          "readOnly": true
                                        }
                                      },
                                      "required": [
                                        "schemaRegistryNamespace",
                                        "schemaName",
                                        "schemaVersion"
                                      ]
                                    },
                                    "error": {
                                      "description": "Object to transfer and persist errors that originate from the edge.",
                                      "readOnly": true,
                                      "type": "object",
                                      "properties": {
                                        "code": {
                                          "type": "string",
                                          "description": "Error code for classification of errors (ex: '400', '404', '500', etc.).",
                                          "readOnly": true
                                        },
                                        "message": {
                                          "type": "string",
                                          "description": "Human-readable helpful error message to provide additional context for error (e.g.,: “Capability ID 'foo' does not exist”).",
                                          "readOnly": true
                                        },
                                        "details": {
                                          "type": "array",
                                          "description": "Array of error details that describe the status of each error.",
                                          "items": {
                                            "type": "object",
                                            "description": "Defines the error details properties.",
                                            "properties": {
                                              "code": {
                                                "type": "string",
                                                "description": "Multi-part error code for classification and root causing of errors (ex: 400.200.100.432).",
                                                "readOnly": true
                                              },
                                              "message": {
                                                "type": "string",
                                                "description": "Human-readable helpful error message to provide additional context for error (ex: “Authentication method not supported”).",
                                                "readOnly": true
                                              },
                                              "info": {
                                                "type": "string",
                                                "description": "Human-readable helpful detailed text context for debugging (ex: “The following mechanisms are supported...”).",
                                                "readOnly": true
                                              },
                                              "correlationId": {
                                                "type": "string",
                                                "description": "Unique identifier for the transaction to aid in debugging.",
                                                "readOnly": true
                                              }
                                            }
                                          },
                                          "readOnly": true,
                                          "x-ms-identifiers": []
                                        }
                                      }
                                    }
                                  },
                                  "required": [
                                    "name"
                                  ]
                                },
                                "readOnly": true,
                                "x-ms-identifiers": []
                              },
                              "managementGroups": {
                                "type": "array",
                                "description": "Array of management group statuses that describe the status of each management group.",
                                "items": {
                                  "type": "object",
                                  "description": "Defines the asset status management group properties.",
                                  "properties": {
                                    "name": {
                                      "type": "string",
                                      "description": "The name of the management group. Must be unique within the status.managementGroups array. This name is used to correlate between the spec and status event information.",
                                      "readOnly": true
                                    },
                                    "actions": {
                                      "type": "array",
                                      "description": "Array of action statuses that describe the status of each action.",
                                      "items": {
                                        "type": "object",
                                        "description": "Defines the asset status action properties.",
                                        "properties": {
                                          "name": {
                                            "type": "string",
                                            "description": "The name of the action. Must be unique within the status.actions array. This name is used to correlate between the spec and status event information.",
                                            "readOnly": true
                                          },
                                          "requestMessageSchemaReference": {
                                            "description": "The request message schema reference object for the action.",
                                            "readOnly": true,
                                            "type": "object",
                                            "properties": {
                                              "schemaRegistryNamespace": {
                                                "type": "string",
                                                "description": "The message schema registry namespace.",
                                                "readOnly": true
                                              },
                                              "schemaName": {
                                                "type": "string",
                                                "description": "The message schema name.",
                                                "readOnly": true
                                              },
                                              "schemaVersion": {
                                                "type": "string",
                                                "description": "The message schema version.",
                                                "readOnly": true
                                              }
                                            },
                                            "required": [
                                              "schemaRegistryNamespace",
                                              "schemaName",
                                              "schemaVersion"
                                            ]
                                          },
                                          "responseMessageSchemaReference": {
                                            "description": "The response message schema reference object for the action.",
                                            "readOnly": true,
                                            "type": "object",
                                            "properties": {
                                              "schemaRegistryNamespace": {
                                                "type": "string",
                                                "description": "The message schema registry namespace.",
                                                "readOnly": true
                                              },
                                              "schemaName": {
                                                "type": "string",
                                                "description": "The message schema name.",
                                                "readOnly": true
                                              },
                                              "schemaVersion": {
                                                "type": "string",
                                                "description": "The message schema version.",
                                                "readOnly": true
                                              }
                                            },
                                            "required": [
                                              "schemaRegistryNamespace",
                                              "schemaName",
                                              "schemaVersion"
                                            ]
                                          },
                                          "error": {
                                            "description": "Object to transfer and persist errors that originate from the edge.",
                                            "readOnly": true,
                                            "type": "object",
                                            "properties": {
                                              "code": {
                                                "type": "string",
                                                "description": "Error code for classification of errors (ex: '400', '404', '500', etc.).",
                                                "readOnly": true
                                              },
                                              "message": {
                                                "type": "string",
                                                "description": "Human-readable helpful error message to provide additional context for error (e.g.,: “Capability ID 'foo' does not exist”).",
                                                "readOnly": true
                                              },
                                              "details": {
                                                "type": "array",
                                                "description": "Array of error details that describe the status of each error.",
                                                "items": {
                                                  "type": "object",
                                                  "description": "Defines the error details properties.",
                                                  "properties": {
                                                    "code": {
                                                      "type": "string",
                                                      "description": "Multi-part error code for classification and root causing of errors (ex: 400.200.100.432).",
                                                      "readOnly": true
                                                    },
                                                    "message": {
                                                      "type": "string",
                                                      "description": "Human-readable helpful error message to provide additional context for error (ex: “Authentication method not supported”).",
                                                      "readOnly": true
                                                    },
                                                    "info": {
                                                      "type": "string",
                                                      "description": "Human-readable helpful detailed text context for debugging (ex: “The following mechanisms are supported...”).",
                                                      "readOnly": true
                                                    },
                                                    "correlationId": {
                                                      "type": "string",
                                                      "description": "Unique identifier for the transaction to aid in debugging.",
                                                      "readOnly": true
                                                    }
                                                  }
                                                },
                                                "readOnly": true,
                                                "x-ms-identifiers": []
                                              }
                                            }
                                          }
                                        },
                                        "required": [
                                          "name"
                                        ]
                                      },
                                      "readOnly": true,
                                      "x-ms-identifiers": []
                                    }
                                  },
                                  "required": [
                                    "name"
                                  ]
                                },
                                "readOnly": true,
                                "x-ms-identifiers": []
                              }
                            }
                          },
                          "provisioningState": {
                            "description": "Provisioning state of the resource.",
                            "readOnly": true,
                            "type": "string",
                            "enum": [
                              "Succeeded",
                              "Failed",
                              "Canceled",
                              "Accepted",
                              "Deleting"
                            ],
                            "x-ms-enum": {
                              "name": "ProvisioningState",
                              "modelAsString": true,
                              "values": [
                                {
                                  "name": "Succeeded",
                                  "value": "Succeeded",
                                  "description": "Resource has been created."
                                },
                                {
                                  "name": "Failed",
                                  "value": "Failed",
                                  "description": "Resource creation failed."
                                },
                                {
                                  "name": "Canceled",
                                  "value": "Canceled",
                                  "description": "Resource creation was canceled."
                                },
                                {
                                  "name": "Accepted",
                                  "value": "Accepted",
                                  "description": "Resource has been accepted by the server."
                                },
                                {
                                  "name": "Deleting",
                                  "value": "Deleting",
                                  "description": "Resource is deleting."
                                }
                              ]
                            }
                          }
                        },
                        "required": [
                          "deviceRef"
                        ]
                      },
                      "extendedLocation": {
                        "description": "The extended location.",
                        "x-ms-mutability": [
                          "read",
                          "create"
                        ],
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "description": "The extended location type."
                          },
                          "name": {
                            "type": "string",
                            "description": "The extended location name."
                          }
                        },
                        "required": [
                          "type",
                          "name"
                        ]
                      }
                    },
                    "required": [
                      "extendedLocation"
                    ]
                  }
                },
                "nextLink": {
                  "type": "string",
                  "format": "uri",
                  "description": "The link to the next page of items"
                }
              },
              "required": [
                "value"
              ]
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeviceRegistry/namespaces/{namespaceName}/assets/{assetName}": {
      "get": {
        "operationId": "NamespaceAssets_Get",
        "tags": [
          "NamespaceAssets"
        ],
        "description": "Get a NamespaceAsset",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription. The value must be an UUID.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group. The name is case insensitive.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "x-ms-parameter-location": "method"
          },
          {
            "name": "namespaceName",
            "in": "path",
            "description": "The name of the namespace.",
            "required": true,
            "type": "string",
            "minLength": 3,
            "maxLength": 64,
            "pattern": "^[a-z0-9][a-z0-9-]*[a-z0-9]$"
          },
          {
            "name": "assetName",
            "in": "path",
            "description": "The name of the asset.",
            "required": true,
            "type": "string",
            "minLength": 3,
            "maxLength": 63,
            "pattern": "^[a-z0-9][a-z0-9-]*[a-z0-9]$"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "type": "object",
              "description": "Asset definition.",
              "properties": {
                "id": {
                  "type": "string",
                  "format": "arm-id",
                  "description": "Fully qualified resource ID for the resource. E.g. \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}\"",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "description": "The name of the resource",
                  "readOnly": true
                },
                "type": {
                  "type": "string",
                  "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                  "readOnly": true
                },
                "systemData": {
                  "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                  "readOnly": true,
                  "type": "object",
                  "properties": {
                    "createdBy": {
                      "type": "string",
                      "description": "The identity that created the resource."
                    },
                    "createdByType": {
                      "type": "string",
                      "description": "The type of identity that created the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource creation (UTC)."
                    },
                    "lastModifiedBy": {
                      "type": "string",
                      "description": "The identity that last modified the resource."
                    },
                    "lastModifiedByType": {
                      "type": "string",
                      "description": "The type of identity that last modified the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "lastModifiedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource last modification (UTC)"
                    }
                  }
                },
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "x-ms-mutability": [
                    "read",
                    "create",
                    "update"
                  ]
                },
                "location": {
                  "type": "string",
                  "description": "The geo-location where the resource lives",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ]
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "uuid": {
                      "type": "string",
                      "description": "Globally unique, immutable, non-reusable ID.",
                      "readOnly": true
                    },
                    "enabled": {
                      "type": "boolean",
                      "description": "Enabled/disabled status of the asset."
                    },
                    "externalAssetId": {
                      "type": "string",
                      "description": "Asset ID provided by the customer.",
                      "x-ms-mutability": [
                        "read",
                        "create"
                      ]
                    },
                    "displayName": {
                      "type": "string",
                      "description": "Human-readable display name."
                    },
                    "description": {
                      "type": "string",
                      "description": "Human-readable description of the asset."
                    },
                    "deviceRef": {
                      "description": "Reference to the device that provides data for this asset. Must provide device name & endpoint on the device to use.",
                      "x-ms-mutability": [
                        "read",
                        "create"
                      ],
                      "type": "object",
                      "properties": {
                        "deviceName": {
                          "type": "string",
                          "description": "Name of the device resource"
                        },
                        "endpointName": {
                          "type": "string",
                          "description": "The name of endpoint to use"
                        }
                      },
                      "required": [
                        "deviceName",
                        "endpointName"
                      ]
                    },
                    "assetTypeRefs": {
                      "type": "array",
                      "description": "URIs or type definition IDs.",
                      "items": {
                        "type": "string"
                      }
                    },
                    "version": {
                      "type": "integer",
                      "format": "int64",
                      "description": "An integer that is incremented each time the resource is modified.",
                      "readOnly": true
                    },
                    "lastTransitionTime": {
                      "type": "string",
                      "format": "date-time",
                      "description": "A timestamp (in UTC) that is updated each time the resource is modified.",
                      "readOnly": true
                    },
                    "manufacturer": {
                      "type": "string",
                      "description": "Asset manufacturer."
                    },
                    "manufacturerUri": {
                      "type": "string",
                      "description": "Asset manufacturer URI."
                    },
                    "model": {
                      "type": "string",
                      "description": "Asset model."
                    },
                    "productCode": {
                      "type": "string",
                      "description": "Asset product code."
                    },
                    "hardwareRevision": {
                      "type": "string",
                      "description": "Asset hardware revision number."
                    },
                    "softwareRevision": {
                      "type": "string",
                      "description": "Asset software revision number."
                    },
                    "documentationUri": {
                      "type": "string",
                      "description": "Asset documentation reference."
                    },
                    "serialNumber": {
                      "type": "string",
                      "description": "Asset serial number."
                    },
                    "attributes": {
                      "type": "object",
                      "description": "A set of key-value pairs that contain custom attributes set by the customer.",
                      "additionalProperties": {}
                    },
                    "discoveredAssetRefs": {
                      "type": "array",
                      "description": "Reference to a list of discovered assets. Populated only if the asset has been created from discovery flow. Discovered asset names must be provided.",
                      "items": {
                        "type": "string"
                      },
                      "x-ms-mutability": [
                        "read",
                        "create"
                      ]
                    },
                    "defaultDatasetsConfiguration": {
                      "type": "string",
                      "description": "Stringified JSON that contains connector-specific default configuration for all datasets. Each dataset can have its own configuration that overrides the default settings here."
                    },
                    "defaultEventsConfiguration": {
                      "type": "string",
                      "description": "Stringified JSON that contains connector-specific default configuration for all events. Each event can have its own configuration that overrides the default settings here."
                    },
                    "defaultStreamsConfiguration": {
                      "type": "string",
                      "description": "Stringified JSON that contains connector-specific default configuration for all streams. Each stream can have its own configuration that overrides the default settings here."
                    },
                    "defaultManagementGroupsConfiguration": {
                      "type": "string",
                      "description": "Stringified JSON that contains connector-specific default configuration for all management groups. Each management group can have its own configuration that overrides the default settings here."
                    },
                    "defaultDatasetsDestinations": {
                      "type": "array",
                      "description": "Default destinations for a dataset.",
                      "items": {
                        "type": "object",
                        "description": "The type of the destination.",
                        "properties": {
                          "target": {
                            "description": "Target destination.",
                            "type": "string",
                            "enum": [
                              "Mqtt",
                              "BrokerStateStore",
                              "Storage"
                            ],
                            "x-ms-enum": {
                              "name": "DatasetDestinationTarget",
                              "modelAsString": true,
                              "values": [
                                {
                                  "name": "Mqtt",
                                  "value": "Mqtt",
                                  "description": "MQTT target."
                                },
                                {
                                  "name": "BrokerStateStore",
                                  "value": "BrokerStateStore",
                                  "description": "Broker State Store target."
                                },
                                {
                                  "name": "Storage",
                                  "value": "Storage",
                                  "description": "Storage target."
                                }
                              ]
                            }
                          }
                        },
                        "discriminator": "target",
                        "required": [
                          "target"
                        ]
                      },
                      "x-ms-identifiers": []
                    },
                    "defaultEventsDestinations": {
                      "type": "array",
                      "description": "Default destinations for an event.",
                      "items": {
                        "type": "object",
                        "description": "The type of the destination.",
                        "properties": {
                          "target": {
                            "description": "Target destination.",
                            "type": "string",
                            "enum": [
                              "Mqtt",
                              "Storage"
                            ],
                            "x-ms-enum": {
                              "name": "EventDestinationTarget",
                              "modelAsString": true,
                              "values": [
                                {
                                  "name": "Mqtt",
                                  "value": "Mqtt",
                                  "description": "MQTT target."
                                },
                                {
                                  "name": "Storage",
                                  "value": "Storage",
                                  "description": "Storage target."
                                }
                              ]
                            }
                          }
                        },
                        "discriminator": "target",
                        "required": [
                          "target"
                        ]
                      },
                      "x-ms-identifiers": []
                    },
                    "defaultStreamsDestinations": {
                      "type": "array",
                      "description": "Default destinations for a stream.",
                      "items": {
                        "type": "object",
                        "description": "The type of the destination.",
                        "properties": {
                          "target": {
                            "description": "Target destination.",
                            "type": "string",
                            "enum": [
                              "Mqtt",
                              "Storage"
                            ],
                            "x-ms-enum": {
                              "name": "StreamDestinationTarget",
                              "modelAsString": true,
                              "values": [
                                {
                                  "name": "Mqtt",
                                  "value": "Mqtt",
                                  "description": "MQTT target."
                                },
                                {
                                  "name": "Storage",
                                  "value": "Storage",
                                  "description": "Storage target."
                                }
                              ]
                            }
                          }
                        },
                        "discriminator": "target",
                        "required": [
                          "target"
                        ]
                      },
                      "x-ms-identifiers": []
                    },
                    "datasets": {
                      "type": "array",
                      "description": "Array of datasets that are part of the asset. Each dataset describes the data points that make up the set.",
                      "items": {
                        "type": "object",
                        "description": "Defines the dataset properties.",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "Name of the dataset."
                          },
                          "dataSource": {
                            "type": "string",
                            "description": "Reference to a data source for a given dataset."
                          },
                          "typeRef": {
                            "type": "string",
                            "description": "URI or type definition ID."
                          },
                          "datasetConfiguration": {
                            "type": "string",
                            "description": "Stringified JSON that contains connector-specific JSON string that describes configuration for the specific dataset."
                          },
                          "destinations": {
                            "type": "array",
                            "description": "Destinations for a dataset.",
                            "items": {
                              "type": "object",
                              "description": "The type of the destination.",
                              "properties": {
                                "target": {
                                  "description": "Target destination.",
                                  "type": "string",
                                  "enum": [
                                    "Mqtt",
                                    "BrokerStateStore",
                                    "Storage"
                                  ],
                                  "x-ms-enum": {
                                    "name": "DatasetDestinationTarget",
                                    "modelAsString": true,
                                    "values": [
                                      {
                                        "name": "Mqtt",
                                        "value": "Mqtt",
                                        "description": "MQTT target."
                                      },
                                      {
                                        "name": "BrokerStateStore",
                                        "value": "BrokerStateStore",
                                        "description": "Broker State Store target."
                                      },
                                      {
                                        "name": "Storage",
                                        "value": "Storage",
                                        "description": "Storage target."
                                      }
                                    ]
                                  }
                                }
                              },
                              "discriminator": "target",
                              "required": [
                                "target"
                              ]
                            },
                            "x-ms-identifiers": []
                          },
                          "dataPoints": {
                            "type": "array",
                            "description": "Array of data points that are part of the dataset. Each data point can have per-data point configuration.",
                            "items": {
                              "type": "object",
                              "description": "Defines the dataset data point properties.",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "The name of the data point."
                                },
                                "dataSource": {
                                  "type": "string",
                                  "description": "The address of the source of the data in the asset (e.g. URL) so that a client can access the data source on the asset."
                                },
                                "dataPointConfiguration": {
                                  "type": "string",
                                  "description": "Stringified JSON that contains connector-specific configuration for the data point. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize."
                                },
                                "typeRef": {
                                  "type": "string",
                                  "description": "URI or type definition ID."
                                }
                              },
                              "required": [
                                "name",
                                "dataSource"
                              ]
                            },
                            "x-ms-identifiers": []
                          }
                        },
                        "required": [
                          "name"
                        ]
                      },
                      "x-ms-identifiers": []
                    },
                    "eventGroups": {
                      "type": "array",
                      "description": "Array of event groups that are part of the asset. Each event group can have per-event group configuration.",
                      "items": {
                        "type": "object",
                        "description": "Defines the event group properties.",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "The name of the event group."
                          },
                          "dataSource": {
                            "type": "string",
                            "description": "The address of the notifier of the event group in the asset (e.g. URL) so that a client can access the event group on the asset."
                          },
                          "eventGroupConfiguration": {
                            "type": "string",
                            "description": "Stringified JSON that contains connector-specific configuration for the event group. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize."
                          },
                          "defaultDestinations": {
                            "type": "array",
                            "description": "Destinations for events. Default destinations when destinations is not defined at the event level.",
                            "items": {
                              "type": "object",
                              "description": "The type of the destination.",
                              "properties": {
                                "target": {
                                  "description": "Target destination.",
                                  "type": "string",
                                  "enum": [
                                    "Mqtt",
                                    "Storage"
                                  ],
                                  "x-ms-enum": {
                                    "name": "EventDestinationTarget",
                                    "modelAsString": true,
                                    "values": [
                                      {
                                        "name": "Mqtt",
                                        "value": "Mqtt",
                                        "description": "MQTT target."
                                      },
                                      {
                                        "name": "Storage",
                                        "value": "Storage",
                                        "description": "Storage target."
                                      }
                                    ]
                                  }
                                }
                              },
                              "discriminator": "target",
                              "required": [
                                "target"
                              ]
                            },
                            "x-ms-identifiers": []
                          },
                          "typeRef": {
                            "type": "string",
                            "description": "URI or type definition ID."
                          },
                          "events": {
                            "type": "array",
                            "description": "Array of events that are part of the event group.",
                            "items": {
                              "type": "object",
                              "description": "Defines the event properties.",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "The name of the event."
                                },
                                "dataSource": {
                                  "type": "string",
                                  "description": "Reference to a data source for a given event."
                                },
                                "eventConfiguration": {
                                  "type": "string",
                                  "description": "Stringified JSON that contains connector-specific configuration for the event. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize."
                                },
                                "destinations": {
                                  "type": "array",
                                  "description": "Destinations for an event.",
                                  "items": {
                                    "type": "object",
                                    "description": "The type of the destination.",
                                    "properties": {
                                      "target": {
                                        "description": "Target destination.",
                                        "type": "string",
                                        "enum": [
                                          "Mqtt",
                                          "Storage"
                                        ],
                                        "x-ms-enum": {
                                          "name": "EventDestinationTarget",
                                          "modelAsString": true,
                                          "values": [
                                            {
                                              "name": "Mqtt",
                                              "value": "Mqtt",
                                              "description": "MQTT target."
                                            },
                                            {
                                              "name": "Storage",
                                              "value": "Storage",
                                              "description": "Storage target."
                                            }
                                          ]
                                        }
                                      }
                                    },
                                    "discriminator": "target",
                                    "required": [
                                      "target"
                                    ]
                                  },
                                  "x-ms-identifiers": []
                                },
                                "typeRef": {
                                  "type": "string",
                                  "description": "URI or type definition ID."
                                }
                              },
                              "required": [
                                "name"
                              ]
                            },
                            "x-ms-identifiers": []
                          }
                        },
                        "required": [
                          "name"
                        ]
                      },
                      "x-ms-identifiers": []
                    },
                    "streams": {
                      "type": "array",
                      "description": "Array of streams that are part of the asset. Each stream can have a per-stream configuration.",
                      "items": {
                        "type": "object",
                        "description": "Defines the stream properties.",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "Name of the stream definition."
                          },
                          "streamConfiguration": {
                            "type": "string",
                            "description": "Stringified JSON that contains connector-specific configuration for the specific stream."
                          },
                          "typeRef": {
                            "type": "string",
                            "description": "URI or type definition ID."
                          },
                          "destinations": {
                            "type": "array",
                            "description": "Destinations for a stream.",
                            "items": {
                              "type": "object",
                              "description": "The type of the destination.",
                              "properties": {
                                "target": {
                                  "description": "Target destination.",
                                  "type": "string",
                                  "enum": [
                                    "Mqtt",
                                    "Storage"
                                  ],
                                  "x-ms-enum": {
                                    "name": "StreamDestinationTarget",
                                    "modelAsString": true,
                                    "values": [
                                      {
                                        "name": "Mqtt",
                                        "value": "Mqtt",
                                        "description": "MQTT target."
                                      },
                                      {
                                        "name": "Storage",
                                        "value": "Storage",
                                        "description": "Storage target."
                                      }
                                    ]
                                  }
                                }
                              },
                              "discriminator": "target",
                              "required": [
                                "target"
                              ]
                            },
                            "x-ms-identifiers": []
                          }
                        },
                        "required": [
                          "name"
                        ]
                      },
                      "x-ms-identifiers": []
                    },
                    "managementGroups": {
                      "type": "array",
                      "description": "Array of management groups that are part of the asset. Each management group can have a per-group configuration.",
                      "items": {
                        "type": "object",
                        "description": "Defines the management group properties.",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "Name of the management group."
                          },
                          "dataSource": {
                            "type": "string",
                            "description": "Reference to a data source for a given management group."
                          },
                          "managementGroupConfiguration": {
                            "type": "string",
                            "description": "Stringified JSON that contains connector-specific configuration for the management group."
                          },
                          "typeRef": {
                            "type": "string",
                            "description": "URI or type definition ID."
                          },
                          "defaultTopic": {
                            "type": "string",
                            "description": "Default MQTT topic path on which a client will receive the request for all actions that are part of the management group."
                          },
                          "defaultTimeoutInSeconds": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Default response timeout for all actions that are part of the management group.",
                            "default": 100
                          },
                          "actions": {
                            "type": "array",
                            "description": "Array of actions that are part of the management group. Each action can have an individual configuration.",
                            "items": {
                              "type": "object",
                              "description": "Defines the action properties.",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "Name of the action."
                                },
                                "actionConfiguration": {
                                  "type": "string",
                                  "description": "Stringified JSON that contains connector-specific configuration for the action."
                                },
                                "targetUri": {
                                  "type": "string",
                                  "description": "The target URI on which a client can invoke the specific action."
                                },
                                "typeRef": {
                                  "type": "string",
                                  "description": "URI or type definition ID."
                                },
                                "topic": {
                                  "type": "string",
                                  "description": "The MQTT topic path on which a client will receive the request for the action."
                                },
                                "actionType": {
                                  "type": "string",
                                  "description": "The type of the action.",
                                  "default": "Call",
                                  "enum": [
                                    "Call",
                                    "Read",
                                    "Write"
                                  ],
                                  "x-ms-enum": {
                                    "name": "ManagementActionType",
                                    "modelAsString": true,
                                    "values": [
                                      {
                                        "name": "Call",
                                        "value": "Call",
                                        "description": "Call action type."
                                      },
                                      {
                                        "name": "Read",
                                        "value": "Read",
                                        "description": "Read action type."
                                      },
                                      {
                                        "name": "Write",
                                        "value": "Write",
                                        "description": "Write action type."
                                      }
                                    ]
                                  }
                                },
                                "timeoutInSeconds": {
                                  "type": "integer",
                                  "format": "int32",
                                  "description": "Response timeout for the action."
                                }
                              },
                              "required": [
                                "name",
                                "targetUri"
                              ]
                            },
                            "x-ms-identifiers": []
                          }
                        },
                        "required": [
                          "name"
                        ]
                      },
                      "x-ms-identifiers": []
                    },
                    "status": {
                      "description": "Read only object to reflect changes that have occurred on the Edge. Similar to Kubernetes status property for custom resources.",
                      "readOnly": true,
                      "type": "object",
                      "properties": {
                        "config": {
                          "description": "Defines the asset status config properties.",
                          "readOnly": true,
                          "type": "object",
                          "properties": {
                            "version": {
                              "type": "integer",
                              "format": "int64",
                              "description": "A read-only incremental counter indicating the number of times the configuration has been modified from the perspective of the current actual (edge) state of the CRD. Edge would be the only writer of this value and would sync back up to the cloud. In steady state, this should equal version.",
                              "readOnly": true
                            },
                            "lastTransitionTime": {
                              "type": "string",
                              "format": "date-time",
                              "description": "A read-only timestamp indicating the last time the configuration has been modified from the perspective of the current actual (edge) state of the CRD. Edge would be the only writer of this value and would sync back up to the cloud.",
                              "readOnly": true
                            },
                            "error": {
                              "description": "Object to transfer and persist errors that originate from the edge.",
                              "readOnly": true,
                              "type": "object",
                              "properties": {
                                "code": {
                                  "type": "string",
                                  "description": "Error code for classification of errors (ex: '400', '404', '500', etc.).",
                                  "readOnly": true
                                },
                                "message": {
                                  "type": "string",
                                  "description": "Human-readable helpful error message to provide additional context for error (e.g.,: “Capability ID 'foo' does not exist”).",
                                  "readOnly": true
                                },
                                "details": {
                                  "type": "array",
                                  "description": "Array of error details that describe the status of each error.",
                                  "items": {
                                    "type": "object",
                                    "description": "Defines the error details properties.",
                                    "properties": {
                                      "code": {
                                        "type": "string",
                                        "description": "Multi-part error code for classification and root causing of errors (ex: 400.200.100.432).",
                                        "readOnly": true
                                      },
                                      "message": {
                                        "type": "string",
                                        "description": "Human-readable helpful error message to provide additional context for error (ex: “Authentication method not supported”).",
                                        "readOnly": true
                                      },
                                      "info": {
                                        "type": "string",
                                        "description": "Human-readable helpful detailed text context for debugging (ex: “The following mechanisms are supported...”).",
                                        "readOnly": true
                                      },
                                      "correlationId": {
                                        "type": "string",
                                        "description": "Unique identifier for the transaction to aid in debugging.",
                                        "readOnly": true
                                      }
                                    }
                                  },
                                  "readOnly": true,
                                  "x-ms-identifiers": []
                                }
                              }
                            }
                          }
                        },
                        "datasets": {
                          "type": "array",
                          "description": "Array of dataset statuses that describe the status of each dataset.",
                          "items": {
                            "type": "object",
                            "description": "Defines the asset status dataset properties.",
                            "properties": {
                              "name": {
                                "type": "string",
                                "description": "The name of the dataset. Must be unique within the status.datasets array. This name is used to correlate between the spec and status dataset information.",
                                "readOnly": true
                              },
                              "messageSchemaReference": {
                                "description": "The message schema reference object.",
                                "readOnly": true,
                                "type": "object",
                                "properties": {
                                  "schemaRegistryNamespace": {
                                    "type": "string",
                                    "description": "The message schema registry namespace.",
                                    "readOnly": true
                                  },
                                  "schemaName": {
                                    "type": "string",
                                    "description": "The message schema name.",
                                    "readOnly": true
                                  },
                                  "schemaVersion": {
                                    "type": "string",
                                    "description": "The message schema version.",
                                    "readOnly": true
                                  }
                                },
                                "required": [
                                  "schemaRegistryNamespace",
                                  "schemaName",
                                  "schemaVersion"
                                ]
                              },
                              "error": {
                                "description": "Object to transfer and persist errors that originate from the edge.",
                                "readOnly": true,
                                "type": "object",
                                "properties": {
                                  "code": {
                                    "type": "string",
                                    "description": "Error code for classification of errors (ex: '400', '404', '500', etc.).",
                                    "readOnly": true
                                  },
                                  "message": {
                                    "type": "string",
                                    "description": "Human-readable helpful error message to provide additional context for error (e.g.,: “Capability ID 'foo' does not exist”).",
                                    "readOnly": true
                                  },
                                  "details": {
                                    "type": "array",
                                    "description": "Array of error details that describe the status of each error.",
                                    "items": {
                                      "type": "object",
                                      "description": "Defines the error details properties.",
                                      "properties": {
                                        "code": {
                                          "type": "string",
                                          "description": "Multi-part error code for classification and root causing of errors (ex: 400.200.100.432).",
                                          "readOnly": true
                                        },
                                        "message": {
                                          "type": "string",
                                          "description": "Human-readable helpful error message to provide additional context for error (ex: “Authentication method not supported”).",
                                          "readOnly": true
                                        },
                                        "info": {
                                          "type": "string",
                                          "description": "Human-readable helpful detailed text context for debugging (ex: “The following mechanisms are supported...”).",
                                          "readOnly": true
                                        },
                                        "correlationId": {
                                          "type": "string",
                                          "description": "Unique identifier for the transaction to aid in debugging.",
                                          "readOnly": true
                                        }
                                      }
                                    },
                                    "readOnly": true,
                                    "x-ms-identifiers": []
                                  }
                                }
                              }
                            },
                            "required": [
                              "name"
                            ]
                          },
                          "readOnly": true,
                          "x-ms-identifiers": []
                        },
                        "eventGroups": {
                          "type": "array",
                          "description": "Array of event group statuses that describe the status of each event group.",
                          "items": {
                            "type": "object",
                            "description": "Defines the asset status event group properties.",
                            "properties": {
                              "name": {
                                "type": "string",
                                "description": "The name of the event group. Must be unique within the status.eventGroups array. This name is used to correlate between the spec and status event group information.",
                                "readOnly": true
                              },
                              "events": {
                                "type": "array",
                                "description": "Array of event statuses that describe the status of each event in the event group.",
                                "items": {
                                  "type": "object",
                                  "description": "Defines the asset status event properties.",
                                  "properties": {
                                    "name": {
                                      "type": "string",
                                      "description": "The name of the event. Must be unique within the status.events array. This name is used to correlate between the spec and status event information.",
                                      "readOnly": true
                                    },
                                    "messageSchemaReference": {
                                      "description": "The message schema reference object.",
                                      "readOnly": true,
                                      "type": "object",
                                      "properties": {
                                        "schemaRegistryNamespace": {
                                          "type": "string",
                                          "description": "The message schema registry namespace.",
                                          "readOnly": true
                                        },
                                        "schemaName": {
                                          "type": "string",
                                          "description": "The message schema name.",
                                          "readOnly": true
                                        },
                                        "schemaVersion": {
                                          "type": "string",
                                          "description": "The message schema version.",
                                          "readOnly": true
                                        }
                                      },
                                      "required": [
                                        "schemaRegistryNamespace",
                                        "schemaName",
                                        "schemaVersion"
                                      ]
                                    },
                                    "error": {
                                      "description": "Object to transfer and persist errors that originate from the edge.",
                                      "readOnly": true,
                                      "type": "object",
                                      "properties": {
                                        "code": {
                                          "type": "string",
                                          "description": "Error code for classification of errors (ex: '400', '404', '500', etc.).",
                                          "readOnly": true
                                        },
                                        "message": {
                                          "type": "string",
                                          "description": "Human-readable helpful error message to provide additional context for error (e.g.,: “Capability ID 'foo' does not exist”).",
                                          "readOnly": true
                                        },
                                        "details": {
                                          "type": "array",
                                          "description": "Array of error details that describe the status of each error.",
                                          "items": {
                                            "type": "object",
                                            "description": "Defines the error details properties.",
                                            "properties": {
                                              "code": {
                                                "type": "string",
                                                "description": "Multi-part error code for classification and root causing of errors (ex: 400.200.100.432).",
                                                "readOnly": true
                                              },
                                              "message": {
                                                "type": "string",
                                                "description": "Human-readable helpful error message to provide additional context for error (ex: “Authentication method not supported”).",
                                                "readOnly": true
                                              },
                                              "info": {
                                                "type": "string",
                                                "description": "Human-readable helpful detailed text context for debugging (ex: “The following mechanisms are supported...”).",
                                                "readOnly": true
                                              },
                                              "correlationId": {
                                                "type": "string",
                                                "description": "Unique identifier for the transaction to aid in debugging.",
                                                "readOnly": true
                                              }
                                            }
                                          },
                                          "readOnly": true,
                                          "x-ms-identifiers": []
                                        }
                                      }
                                    }
                                  },
                                  "required": [
                                    "name"
                                  ]
                                },
                                "readOnly": true,
                                "x-ms-identifiers": []
                              }
                            },
                            "required": [
                              "name"
                            ]
                          },
                          "readOnly": true,
                          "x-ms-identifiers": []
                        },
                        "streams": {
                          "type": "array",
                          "description": "Array of stream statuses that describe the status of each stream.",
                          "items": {
                            "type": "object",
                            "description": "Defines the asset status stream properties.",
                            "properties": {
                              "name": {
                                "type": "string",
                                "description": "The name of the stream. Must be unique within the status.streams array. This name is used to correlate between the spec and status event information.",
                                "readOnly": true
                              },
                              "messageSchemaReference": {
                                "description": "The message schema reference object.",
                                "readOnly": true,
                                "type": "object",
                                "properties": {
                                  "schemaRegistryNamespace": {
                                    "type": "string",
                                    "description": "The message schema registry namespace.",
                                    "readOnly": true
                                  },
                                  "schemaName": {
                                    "type": "string",
                                    "description": "The message schema name.",
                                    "readOnly": true
                                  },
                                  "schemaVersion": {
                                    "type": "string",
                                    "description": "The message schema version.",
                                    "readOnly": true
                                  }
                                },
                                "required": [
                                  "schemaRegistryNamespace",
                                  "schemaName",
                                  "schemaVersion"
                                ]
                              },
                              "error": {
                                "description": "Object to transfer and persist errors that originate from the edge.",
                                "readOnly": true,
                                "type": "object",
                                "properties": {
                                  "code": {
                                    "type": "string",
                                    "description": "Error code for classification of errors (ex: '400', '404', '500', etc.).",
                                    "readOnly": true
                                  },
                                  "message": {
                                    "type": "string",
                                    "description": "Human-readable helpful error message to provide additional context for error (e.g.,: “Capability ID 'foo' does not exist”).",
                                    "readOnly": true
                                  },
                                  "details": {
                                    "type": "array",
                                    "description": "Array of error details that describe the status of each error.",
                                    "items": {
                                      "type": "object",
                                      "description": "Defines the error details properties.",
                                      "properties": {
                                        "code": {
                                          "type": "string",
                                          "description": "Multi-part error code for classification and root causing of errors (ex: 400.200.100.432).",
                                          "readOnly": true
                                        },
                                        "message": {
                                          "type": "string",
                                          "description": "Human-readable helpful error message to provide additional context for error (ex: “Authentication method not supported”).",
                                          "readOnly": true
                                        },
                                        "info": {
                                          "type": "string",
                                          "description": "Human-readable helpful detailed text context for debugging (ex: “The following mechanisms are supported...”).",
                                          "readOnly": true
                                        },
                                        "correlationId": {
                                          "type": "string",
                                          "description": "Unique identifier for the transaction to aid in debugging.",
                                          "readOnly": true
                                        }
                                      }
                                    },
                                    "readOnly": true,
                                    "x-ms-identifiers": []
                                  }
                                }
                              }
                            },
                            "required": [
                              "name"
                            ]
                          },
                          "readOnly": true,
                          "x-ms-identifiers": []
                        },
                        "managementGroups": {
                          "type": "array",
                          "description": "Array of management group statuses that describe the status of each management group.",
                          "items": {
                            "type": "object",
                            "description": "Defines the asset status management group properties.",
                            "properties": {
                              "name": {
                                "type": "string",
                                "description": "The name of the management group. Must be unique within the status.managementGroups array. This name is used to correlate between the spec and status event information.",
                                "readOnly": true
                              },
                              "actions": {
                                "type": "array",
                                "description": "Array of action statuses that describe the status of each action.",
                                "items": {
                                  "type": "object",
                                  "description": "Defines the asset status action properties.",
                                  "properties": {
                                    "name": {
                                      "type": "string",
                                      "description": "The name of the action. Must be unique within the status.actions array. This name is used to correlate between the spec and status event information.",
                                      "readOnly": true
                                    },
                                    "requestMessageSchemaReference": {
                                      "description": "The request message schema reference object for the action.",
                                      "readOnly": true,
                                      "type": "object",
                                      "properties": {
                                        "schemaRegistryNamespace": {
                                          "type": "string",
                                          "description": "The message schema registry namespace.",
                                          "readOnly": true
                                        },
                                        "schemaName": {
                                          "type": "string",
                                          "description": "The message schema name.",
                                          "readOnly": true
                                        },
                                        "schemaVersion": {
                                          "type": "string",
                                          "description": "The message schema version.",
                                          "readOnly": true
                                        }
                                      },
                                      "required": [
                                        "schemaRegistryNamespace",
                                        "schemaName",
                                        "schemaVersion"
                                      ]
                                    },
                                    "responseMessageSchemaReference": {
                                      "description": "The response message schema reference object for the action.",
                                      "readOnly": true,
                                      "type": "object",
                                      "properties": {
                                        "schemaRegistryNamespace": {
                                          "type": "string",
                                          "description": "The message schema registry namespace.",
                                          "readOnly": true
                                        },
                                        "schemaName": {
                                          "type": "string",
                                          "description": "The message schema name.",
                                          "readOnly": true
                                        },
                                        "schemaVersion": {
                                          "type": "string",
                                          "description": "The message schema version.",
                                          "readOnly": true
                                        }
                                      },
                                      "required": [
                                        "schemaRegistryNamespace",
                                        "schemaName",
                                        "schemaVersion"
                                      ]
                                    },
                                    "error": {
                                      "description": "Object to transfer and persist errors that originate from the edge.",
                                      "readOnly": true,
                                      "type": "object",
                                      "properties": {
                                        "code": {
                                          "type": "string",
                                          "description": "Error code for classification of errors (ex: '400', '404', '500', etc.).",
                                          "readOnly": true
                                        },
                                        "message": {
                                          "type": "string",
                                          "description": "Human-readable helpful error message to provide additional context for error (e.g.,: “Capability ID 'foo' does not exist”).",
                                          "readOnly": true
                                        },
                                        "details": {
                                          "type": "array",
                                          "description": "Array of error details that describe the status of each error.",
                                          "items": {
                                            "type": "object",
                                            "description": "Defines the error details properties.",
                                            "properties": {
                                              "code": {
                                                "type": "string",
                                                "description": "Multi-part error code for classification and root causing of errors (ex: 400.200.100.432).",
                                                "readOnly": true
                                              },
                                              "message": {
                                                "type": "string",
                                                "description": "Human-readable helpful error message to provide additional context for error (ex: “Authentication method not supported”).",
                                                "readOnly": true
                                              },
                                              "info": {
                                                "type": "string",
                                                "description": "Human-readable helpful detailed text context for debugging (ex: “The following mechanisms are supported...”).",
                                                "readOnly": true
                                              },
                                              "correlationId": {
                                                "type": "string",
                                                "description": "Unique identifier for the transaction to aid in debugging.",
                                                "readOnly": true
                                              }
                                            }
                                          },
                                          "readOnly": true,
                                          "x-ms-identifiers": []
                                        }
                                      }
                                    }
                                  },
                                  "required": [
                                    "name"
                                  ]
                                },
                                "readOnly": true,
                                "x-ms-identifiers": []
                              }
                            },
                            "required": [
                              "name"
                            ]
                          },
                          "readOnly": true,
                          "x-ms-identifiers": []
                        }
                      }
                    },
                    "provisioningState": {
                      "description": "Provisioning state of the resource.",
                      "readOnly": true,
                      "type": "string",
                      "enum": [
                        "Succeeded",
                        "Failed",
                        "Canceled",
                        "Accepted",
                        "Deleting"
                      ],
                      "x-ms-enum": {
                        "name": "ProvisioningState",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Succeeded",
                            "value": "Succeeded",
                            "description": "Resource has been created."
                          },
                          {
                            "name": "Failed",
                            "value": "Failed",
                            "description": "Resource creation failed."
                          },
                          {
                            "name": "Canceled",
                            "value": "Canceled",
                            "description": "Resource creation was canceled."
                          },
                          {
                            "name": "Accepted",
                            "value": "Accepted",
                            "description": "Resource has been accepted by the server."
                          },
                          {
                            "name": "Deleting",
                            "value": "Deleting",
                            "description": "Resource is deleting."
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "deviceRef"
                  ]
                },
                "extendedLocation": {
                  "description": "The extended location.",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ],
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "description": "The extended location type."
                    },
                    "name": {
                      "type": "string",
                      "description": "The extended location name."
                    }
                  },
                  "required": [
                    "type",
                    "name"
                  ]
                }
              },
              "required": [
                "extendedLocation"
              ]
            }
          }
        }
      },
      "put": {
        "operationId": "NamespaceAssets_CreateOrReplace",
        "tags": [
          "NamespaceAssets"
        ],
        "description": "Create a NamespaceAsset",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription. The value must be an UUID.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group. The name is case insensitive.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "x-ms-parameter-location": "method"
          },
          {
            "name": "namespaceName",
            "in": "path",
            "description": "The name of the namespace.",
            "required": true,
            "type": "string",
            "minLength": 3,
            "maxLength": 64,
            "pattern": "^[a-z0-9][a-z0-9-]*[a-z0-9]$"
          },
          {
            "name": "assetName",
            "in": "path",
            "description": "The name of the asset.",
            "required": true,
            "type": "string",
            "minLength": 3,
            "maxLength": 63,
            "pattern": "^[a-z0-9][a-z0-9-]*[a-z0-9]$"
          },
          {
            "name": "resource",
            "in": "body",
            "description": "Resource create parameters.",
            "required": true,
            "schema": {
              "type": "object",
              "description": "Asset definition.",
              "properties": {
                "id": {
                  "type": "string",
                  "format": "arm-id",
                  "description": "Fully qualified resource ID for the resource. E.g. \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}\"",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "description": "The name of the resource",
                  "readOnly": true
                },
                "type": {
                  "type": "string",
                  "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                  "readOnly": true
                },
                "systemData": {
                  "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                  "readOnly": true,
                  "type": "object",
                  "properties": {
                    "createdBy": {
                      "type": "string",
                      "description": "The identity that created the resource."
                    },
                    "createdByType": {
                      "type": "string",
                      "description": "The type of identity that created the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource creation (UTC)."
                    },
                    "lastModifiedBy": {
                      "type": "string",
                      "description": "The identity that last modified the resource."
                    },
                    "lastModifiedByType": {
                      "type": "string",
                      "description": "The type of identity that last modified the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "lastModifiedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource last modification (UTC)"
                    }
                  }
                },
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "x-ms-mutability": [
                    "read",
                    "create",
                    "update"
                  ]
                },
                "location": {
                  "type": "string",
                  "description": "The geo-location where the resource lives",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ]
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "uuid": {
                      "type": "string",
                      "description": "Globally unique, immutable, non-reusable ID.",
                      "readOnly": true
                    },
                    "enabled": {
                      "type": "boolean",
                      "description": "Enabled/disabled status of the asset."
                    },
                    "externalAssetId": {
                      "type": "string",
                      "description": "Asset ID provided by the customer.",
                      "x-ms-mutability": [
                        "read",
                        "create"
                      ]
                    },
                    "displayName": {
                      "type": "string",
                      "description": "Human-readable display name."
                    },
                    "description": {
                      "type": "string",
                      "description": "Human-readable description of the asset."
                    },
                    "deviceRef": {
                      "description": "Reference to the device that provides data for this asset. Must provide device name & endpoint on the device to use.",
                      "x-ms-mutability": [
                        "read",
                        "create"
                      ],
                      "type": "object",
                      "properties": {
                        "deviceName": {
                          "type": "string",
                          "description": "Name of the device resource"
                        },
                        "endpointName": {
                          "type": "string",
                          "description": "The name of endpoint to use"
                        }
                      },
                      "required": [
                        "deviceName",
                        "endpointName"
                      ]
                    },
                    "assetTypeRefs": {
                      "type": "array",
                      "description": "URIs or type definition IDs.",
                      "items": {
                        "type": "string"
                      }
                    },
                    "version": {
                      "type": "integer",
                      "format": "int64",
                      "description": "An integer that is incremented each time the resource is modified.",
                      "readOnly": true
                    },
                    "lastTransitionTime": {
                      "type": "string",
                      "format": "date-time",
                      "description": "A timestamp (in UTC) that is updated each time the resource is modified.",
                      "readOnly": true
                    },
                    "manufacturer": {
                      "type": "string",
                      "description": "Asset manufacturer."
                    },
                    "manufacturerUri": {
                      "type": "string",
                      "description": "Asset manufacturer URI."
                    },
                    "model": {
                      "type": "string",
                      "description": "Asset model."
                    },
                    "productCode": {
                      "type": "string",
                      "description": "Asset product code."
                    },
                    "hardwareRevision": {
                      "type": "string",
                      "description": "Asset hardware revision number."
                    },
                    "softwareRevision": {
                      "type": "string",
                      "description": "Asset software revision number."
                    },
                    "documentationUri": {
                      "type": "string",
                      "description": "Asset documentation reference."
                    },
                    "serialNumber": {
                      "type": "string",
                      "description": "Asset serial number."
                    },
                    "attributes": {
                      "type": "object",
                      "description": "A set of key-value pairs that contain custom attributes set by the customer.",
                      "additionalProperties": {}
                    },
                    "discoveredAssetRefs": {
                      "type": "array",
                      "description": "Reference to a list of discovered assets. Populated only if the asset has been created from discovery flow. Discovered asset names must be provided.",
                      "items": {
                        "type": "string"
                      },
                      "x-ms-mutability": [
                        "read",
                        "create"
                      ]
                    },
                    "defaultDatasetsConfiguration": {
                      "type": "string",
                      "description": "Stringified JSON that contains connector-specific default configuration for all datasets. Each dataset can have its own configuration that overrides the default settings here."
                    },
                    "defaultEventsConfiguration": {
                      "type": "string",
                      "description": "Stringified JSON that contains connector-specific default configuration for all events. Each event can have its own configuration that overrides the default settings here."
                    },
                    "defaultStreamsConfiguration": {
                      "type": "string",
                      "description": "Stringified JSON that contains connector-specific default configuration for all streams. Each stream can have its own configuration that overrides the default settings here."
                    },
                    "defaultManagementGroupsConfiguration": {
                      "type": "string",
                      "description": "Stringified JSON that contains connector-specific default configuration for all management groups. Each management group can have its own configuration that overrides the default settings here."
                    },
                    "defaultDatasetsDestinations": {
                      "type": "array",
                      "description": "Default destinations for a dataset.",
                      "items": {
                        "type": "object",
                        "description": "The type of the destination.",
                        "properties": {
                          "target": {
                            "description": "Target destination.",
                            "type": "string",
                            "enum": [
                              "Mqtt",
                              "BrokerStateStore",
                              "Storage"
                            ],
                            "x-ms-enum": {
                              "name": "DatasetDestinationTarget",
                              "modelAsString": true,
                              "values": [
                                {
                                  "name": "Mqtt",
                                  "value": "Mqtt",
                                  "description": "MQTT target."
                                },
                                {
                                  "name": "BrokerStateStore",
                                  "value": "BrokerStateStore",
                                  "description": "Broker State Store target."
                                },
                                {
                                  "name": "Storage",
                                  "value": "Storage",
                                  "description": "Storage target."
                                }
                              ]
                            }
                          }
                        },
                        "discriminator": "target",
                        "required": [
                          "target"
                        ]
                      },
                      "x-ms-identifiers": []
                    },
                    "defaultEventsDestinations": {
                      "type": "array",
                      "description": "Default destinations for an event.",
                      "items": {
                        "type": "object",
                        "description": "The type of the destination.",
                        "properties": {
                          "target": {
                            "description": "Target destination.",
                            "type": "string",
                            "enum": [
                              "Mqtt",
                              "Storage"
                            ],
                            "x-ms-enum": {
                              "name": "EventDestinationTarget",
                              "modelAsString": true,
                              "values": [
                                {
                                  "name": "Mqtt",
                                  "value": "Mqtt",
                                  "description": "MQTT target."
                                },
                                {
                                  "name": "Storage",
                                  "value": "Storage",
                                  "description": "Storage target."
                                }
                              ]
                            }
                          }
                        },
                        "discriminator": "target",
                        "required": [
                          "target"
                        ]
                      },
                      "x-ms-identifiers": []
                    },
                    "defaultStreamsDestinations": {
                      "type": "array",
                      "description": "Default destinations for a stream.",
                      "items": {
                        "type": "object",
                        "description": "The type of the destination.",
                        "properties": {
                          "target": {
                            "description": "Target destination.",
                            "type": "string",
                            "enum": [
                              "Mqtt",
                              "Storage"
                            ],
                            "x-ms-enum": {
                              "name": "StreamDestinationTarget",
                              "modelAsString": true,
                              "values": [
                                {
                                  "name": "Mqtt",
                                  "value": "Mqtt",
                                  "description": "MQTT target."
                                },
                                {
                                  "name": "Storage",
                                  "value": "Storage",
                                  "description": "Storage target."
                                }
                              ]
                            }
                          }
                        },
                        "discriminator": "target",
                        "required": [
                          "target"
                        ]
                      },
                      "x-ms-identifiers": []
                    },
                    "datasets": {
                      "type": "array",
                      "description": "Array of datasets that are part of the asset. Each dataset describes the data points that make up the set.",
                      "items": {
                        "type": "object",
                        "description": "Defines the dataset properties.",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "Name of the dataset."
                          },
                          "dataSource": {
                            "type": "string",
                            "description": "Reference to a data source for a given dataset."
                          },
                          "typeRef": {
                            "type": "string",
                            "description": "URI or type definition ID."
                          },
                          "datasetConfiguration": {
                            "type": "string",
                            "description": "Stringified JSON that contains connector-specific JSON string that describes configuration for the specific dataset."
                          },
                          "destinations": {
                            "type": "array",
                            "description": "Destinations for a dataset.",
                            "items": {
                              "type": "object",
                              "description": "The type of the destination.",
                              "properties": {
                                "target": {
                                  "description": "Target destination.",
                                  "type": "string",
                                  "enum": [
                                    "Mqtt",
                                    "BrokerStateStore",
                                    "Storage"
                                  ],
                                  "x-ms-enum": {
                                    "name": "DatasetDestinationTarget",
                                    "modelAsString": true,
                                    "values": [
                                      {
                                        "name": "Mqtt",
                                        "value": "Mqtt",
                                        "description": "MQTT target."
                                      },
                                      {
                                        "name": "BrokerStateStore",
                                        "value": "BrokerStateStore",
                                        "description": "Broker State Store target."
                                      },
                                      {
                                        "name": "Storage",
                                        "value": "Storage",
                                        "description": "Storage target."
                                      }
                                    ]
                                  }
                                }
                              },
                              "discriminator": "target",
                              "required": [
                                "target"
                              ]
                            },
                            "x-ms-identifiers": []
                          },
                          "dataPoints": {
                            "type": "array",
                            "description": "Array of data points that are part of the dataset. Each data point can have per-data point configuration.",
                            "items": {
                              "type": "object",
                              "description": "Defines the dataset data point properties.",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "The name of the data point."
                                },
                                "dataSource": {
                                  "type": "string",
                                  "description": "The address of the source of the data in the asset (e.g. URL) so that a client can access the data source on the asset."
                                },
                                "dataPointConfiguration": {
                                  "type": "string",
                                  "description": "Stringified JSON that contains connector-specific configuration for the data point. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize."
                                },
                                "typeRef": {
                                  "type": "string",
                                  "description": "URI or type definition ID."
                                }
                              },
                              "required": [
                                "name",
                                "dataSource"
                              ]
                            },
                            "x-ms-identifiers": []
                          }
                        },
                        "required": [
                          "name"
                        ]
                      },
                      "x-ms-identifiers": []
                    },
                    "eventGroups": {
                      "type": "array",
                      "description": "Array of event groups that are part of the asset. Each event group can have per-event group configuration.",
                      "items": {
                        "type": "object",
                        "description": "Defines the event group properties.",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "The name of the event group."
                          },
                          "dataSource": {
                            "type": "string",
                            "description": "The address of the notifier of the event group in the asset (e.g. URL) so that a client can access the event group on the asset."
                          },
                          "eventGroupConfiguration": {
                            "type": "string",
                            "description": "Stringified JSON that contains connector-specific configuration for the event group. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize."
                          },
                          "defaultDestinations": {
                            "type": "array",
                            "description": "Destinations for events. Default destinations when destinations is not defined at the event level.",
                            "items": {
                              "type": "object",
                              "description": "The type of the destination.",
                              "properties": {
                                "target": {
                                  "description": "Target destination.",
                                  "type": "string",
                                  "enum": [
                                    "Mqtt",
                                    "Storage"
                                  ],
                                  "x-ms-enum": {
                                    "name": "EventDestinationTarget",
                                    "modelAsString": true,
                                    "values": [
                                      {
                                        "name": "Mqtt",
                                        "value": "Mqtt",
                                        "description": "MQTT target."
                                      },
                                      {
                                        "name": "Storage",
                                        "value": "Storage",
                                        "description": "Storage target."
                                      }
                                    ]
                                  }
                                }
                              },
                              "discriminator": "target",
                              "required": [
                                "target"
                              ]
                            },
                            "x-ms-identifiers": []
                          },
                          "typeRef": {
                            "type": "string",
                            "description": "URI or type definition ID."
                          },
                          "events": {
                            "type": "array",
                            "description": "Array of events that are part of the event group.",
                            "items": {
                              "type": "object",
                              "description": "Defines the event properties.",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "The name of the event."
                                },
                                "dataSource": {
                                  "type": "string",
                                  "description": "Reference to a data source for a given event."
                                },
                                "eventConfiguration": {
                                  "type": "string",
                                  "description": "Stringified JSON that contains connector-specific configuration for the event. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize."
                                },
                                "destinations": {
                                  "type": "array",
                                  "description": "Destinations for an event.",
                                  "items": {
                                    "type": "object",
                                    "description": "The type of the destination.",
                                    "properties": {
                                      "target": {
                                        "description": "Target destination.",
                                        "type": "string",
                                        "enum": [
                                          "Mqtt",
                                          "Storage"
                                        ],
                                        "x-ms-enum": {
                                          "name": "EventDestinationTarget",
                                          "modelAsString": true,
                                          "values": [
                                            {
                                              "name": "Mqtt",
                                              "value": "Mqtt",
                                              "description": "MQTT target."
                                            },
                                            {
                                              "name": "Storage",
                                              "value": "Storage",
                                              "description": "Storage target."
                                            }
                                          ]
                                        }
                                      }
                                    },
                                    "discriminator": "target",
                                    "required": [
                                      "target"
                                    ]
                                  },
                                  "x-ms-identifiers": []
                                },
                                "typeRef": {
                                  "type": "string",
                                  "description": "URI or type definition ID."
                                }
                              },
                              "required": [
                                "name"
                              ]
                            },
                            "x-ms-identifiers": []
                          }
                        },
                        "required": [
                          "name"
                        ]
                      },
                      "x-ms-identifiers": []
                    },
                    "streams": {
                      "type": "array",
                      "description": "Array of streams that are part of the asset. Each stream can have a per-stream configuration.",
                      "items": {
                        "type": "object",
                        "description": "Defines the stream properties.",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "Name of the stream definition."
                          },
                          "streamConfiguration": {
                            "type": "string",
                            "description": "Stringified JSON that contains connector-specific configuration for the specific stream."
                          },
                          "typeRef": {
                            "type": "string",
                            "description": "URI or type definition ID."
                          },
                          "destinations": {
                            "type": "array",
                            "description": "Destinations for a stream.",
                            "items": {
                              "type": "object",
                              "description": "The type of the destination.",
                              "properties": {
                                "target": {
                                  "description": "Target destination.",
                                  "type": "string",
                                  "enum": [
                                    "Mqtt",
                                    "Storage"
                                  ],
                                  "x-ms-enum": {
                                    "name": "StreamDestinationTarget",
                                    "modelAsString": true,
                                    "values": [
                                      {
                                        "name": "Mqtt",
                                        "value": "Mqtt",
                                        "description": "MQTT target."
                                      },
                                      {
                                        "name": "Storage",
                                        "value": "Storage",
                                        "description": "Storage target."
                                      }
                                    ]
                                  }
                                }
                              },
                              "discriminator": "target",
                              "required": [
                                "target"
                              ]
                            },
                            "x-ms-identifiers": []
                          }
                        },
                        "required": [
                          "name"
                        ]
                      },
                      "x-ms-identifiers": []
                    },
                    "managementGroups": {
                      "type": "array",
                      "description": "Array of management groups that are part of the asset. Each management group can have a per-group configuration.",
                      "items": {
                        "type": "object",
                        "description": "Defines the management group properties.",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "Name of the management group."
                          },
                          "dataSource": {
                            "type": "string",
                            "description": "Reference to a data source for a given management group."
                          },
                          "managementGroupConfiguration": {
                            "type": "string",
                            "description": "Stringified JSON that contains connector-specific configuration for the management group."
                          },
                          "typeRef": {
                            "type": "string",
                            "description": "URI or type definition ID."
                          },
                          "defaultTopic": {
                            "type": "string",
                            "description": "Default MQTT topic path on which a client will receive the request for all actions that are part of the management group."
                          },
                          "defaultTimeoutInSeconds": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Default response timeout for all actions that are part of the management group.",
                            "default": 100
                          },
                          "actions": {
                            "type": "array",
                            "description": "Array of actions that are part of the management group. Each action can have an individual configuration.",
                            "items": {
                              "type": "object",
                              "description": "Defines the action properties.",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "Name of the action."
                                },
                                "actionConfiguration": {
                                  "type": "string",
                                  "description": "Stringified JSON that contains connector-specific configuration for the action."
                                },
                                "targetUri": {
                                  "type": "string",
                                  "description": "The target URI on which a client can invoke the specific action."
                                },
                                "typeRef": {
                                  "type": "string",
                                  "description": "URI or type definition ID."
                                },
                                "topic": {
                                  "type": "string",
                                  "description": "The MQTT topic path on which a client will receive the request for the action."
                                },
                                "actionType": {
                                  "type": "string",
                                  "description": "The type of the action.",
                                  "default": "Call",
                                  "enum": [
                                    "Call",
                                    "Read",
                                    "Write"
                                  ],
                                  "x-ms-enum": {
                                    "name": "ManagementActionType",
                                    "modelAsString": true,
                                    "values": [
                                      {
                                        "name": "Call",
                                        "value": "Call",
                                        "description": "Call action type."
                                      },
                                      {
                                        "name": "Read",
                                        "value": "Read",
                                        "description": "Read action type."
                                      },
                                      {
                                        "name": "Write",
                                        "value": "Write",
                                        "description": "Write action type."
                                      }
                                    ]
                                  }
                                },
                                "timeoutInSeconds": {
                                  "type": "integer",
                                  "format": "int32",
                                  "description": "Response timeout for the action."
                                }
                              },
                              "required": [
                                "name",
                                "targetUri"
                              ]
                            },
                            "x-ms-identifiers": []
                          }
                        },
                        "required": [
                          "name"
                        ]
                      },
                      "x-ms-identifiers": []
                    },
                    "status": {
                      "description": "Read only object to reflect changes that have occurred on the Edge. Similar to Kubernetes status property for custom resources.",
                      "readOnly": true,
                      "type": "object",
                      "properties": {
                        "config": {
                          "description": "Defines the asset status config properties.",
                          "readOnly": true,
                          "type": "object",
                          "properties": {
                            "version": {
                              "type": "integer",
                              "format": "int64",
                              "description": "A read-only incremental counter indicating the number of times the configuration has been modified from the perspective of the current actual (edge) state of the CRD. Edge would be the only writer of this value and would sync back up to the cloud. In steady state, this should equal version.",
                              "readOnly": true
                            },
                            "lastTransitionTime": {
                              "type": "string",
                              "format": "date-time",
                              "description": "A read-only timestamp indicating the last time the configuration has been modified from the perspective of the current actual (edge) state of the CRD. Edge would be the only writer of this value and would sync back up to the cloud.",
                              "readOnly": true
                            },
                            "error": {
                              "description": "Object to transfer and persist errors that originate from the edge.",
                              "readOnly": true,
                              "type": "object",
                              "properties": {
                                "code": {
                                  "type": "string",
                                  "description": "Error code for classification of errors (ex: '400', '404', '500', etc.).",
                                  "readOnly": true
                                },
                                "message": {
                                  "type": "string",
                                  "description": "Human-readable helpful error message to provide additional context for error (e.g.,: “Capability ID 'foo' does not exist”).",
                                  "readOnly": true
                                },
                                "details": {
                                  "type": "array",
                                  "description": "Array of error details that describe the status of each error.",
                                  "items": {
                                    "type": "object",
                                    "description": "Defines the error details properties.",
                                    "properties": {
                                      "code": {
                                        "type": "string",
                                        "description": "Multi-part error code for classification and root causing of errors (ex: 400.200.100.432).",
                                        "readOnly": true
                                      },
                                      "message": {
                                        "type": "string",
                                        "description": "Human-readable helpful error message to provide additional context for error (ex: “Authentication method not supported”).",
                                        "readOnly": true
                                      },
                                      "info": {
                                        "type": "string",
                                        "description": "Human-readable helpful detailed text context for debugging (ex: “The following mechanisms are supported...”).",
                                        "readOnly": true
                                      },
                                      "correlationId": {
                                        "type": "string",
                                        "description": "Unique identifier for the transaction to aid in debugging.",
                                        "readOnly": true
                                      }
                                    }
                                  },
                                  "readOnly": true,
                                  "x-ms-identifiers": []
                                }
                              }
                            }
                          }
                        },
                        "datasets": {
                          "type": "array",
                          "description": "Array of dataset statuses that describe the status of each dataset.",
                          "items": {
                            "type": "object",
                            "description": "Defines the asset status dataset properties.",
                            "properties": {
                              "name": {
                                "type": "string",
                                "description": "The name of the dataset. Must be unique within the status.datasets array. This name is used to correlate between the spec and status dataset information.",
                                "readOnly": true
                              },
                              "messageSchemaReference": {
                                "description": "The message schema reference object.",
                                "readOnly": true,
                                "type": "object",
                                "properties": {
                                  "schemaRegistryNamespace": {
                                    "type": "string",
                                    "description": "The message schema registry namespace.",
                                    "readOnly": true
                                  },
                                  "schemaName": {
                                    "type": "string",
                                    "description": "The message schema name.",
                                    "readOnly": true
                                  },
                                  "schemaVersion": {
                                    "type": "string",
                                    "description": "The message schema version.",
                                    "readOnly": true
                                  }
                                },
                                "required": [
                                  "schemaRegistryNamespace",
                                  "schemaName",
                                  "schemaVersion"
                                ]
                              },
                              "error": {
                                "description": "Object to transfer and persist errors that originate from the edge.",
                                "readOnly": true,
                                "type": "object",
                                "properties": {
                                  "code": {
                                    "type": "string",
                                    "description": "Error code for classification of errors (ex: '400', '404', '500', etc.).",
                                    "readOnly": true
                                  },
                                  "message": {
                                    "type": "string",
                                    "description": "Human-readable helpful error message to provide additional context for error (e.g.,: “Capability ID 'foo' does not exist”).",
                                    "readOnly": true
                                  },
                                  "details": {
                                    "type": "array",
                                    "description": "Array of error details that describe the status of each error.",
                                    "items": {
                                      "type": "object",
                                      "description": "Defines the error details properties.",
                                      "properties": {
                                        "code": {
                                          "type": "string",
                                          "description": "Multi-part error code for classification and root causing of errors (ex: 400.200.100.432).",
                                          "readOnly": true
                                        },
                                        "message": {
                                          "type": "string",
                                          "description": "Human-readable helpful error message to provide additional context for error (ex: “Authentication method not supported”).",
                                          "readOnly": true
                                        },
                                        "info": {
                                          "type": "string",
                                          "description": "Human-readable helpful detailed text context for debugging (ex: “The following mechanisms are supported...”).",
                                          "readOnly": true
                                        },
                                        "correlationId": {
                                          "type": "string",
                                          "description": "Unique identifier for the transaction to aid in debugging.",
                                          "readOnly": true
                                        }
                                      }
                                    },
                                    "readOnly": true,
                                    "x-ms-identifiers": []
                                  }
                                }
                              }
                            },
                            "required": [
                              "name"
                            ]
                          },
                          "readOnly": true,
                          "x-ms-identifiers": []
                        },
                        "eventGroups": {
                          "type": "array",
                          "description": "Array of event group statuses that describe the status of each event group.",
                          "items": {
                            "type": "object",
                            "description": "Defines the asset status event group properties.",
                            "properties": {
                              "name": {
                                "type": "string",
                                "description": "The name of the event group. Must be unique within the status.eventGroups array. This name is used to correlate between the spec and status event group information.",
                                "readOnly": true
                              },
                              "events": {
                                "type": "array",
                                "description": "Array of event statuses that describe the status of each event in the event group.",
                                "items": {
                                  "type": "object",
                                  "description": "Defines the asset status event properties.",
                                  "properties": {
                                    "name": {
                                      "type": "string",
                                      "description": "The name of the event. Must be unique within the status.events array. This name is used to correlate between the spec and status event information.",
                                      "readOnly": true
                                    },
                                    "messageSchemaReference": {
                                      "description": "The message schema reference object.",
                                      "readOnly": true,
                                      "type": "object",
                                      "properties": {
                                        "schemaRegistryNamespace": {
                                          "type": "string",
                                          "description": "The message schema registry namespace.",
                                          "readOnly": true
                                        },
                                        "schemaName": {
                                          "type": "string",
                                          "description": "The message schema name.",
                                          "readOnly": true
                                        },
                                        "schemaVersion": {
                                          "type": "string",
                                          "description": "The message schema version.",
                                          "readOnly": true
                                        }
                                      },
                                      "required": [
                                        "schemaRegistryNamespace",
                                        "schemaName",
                                        "schemaVersion"
                                      ]
                                    },
                                    "error": {
                                      "description": "Object to transfer and persist errors that originate from the edge.",
                                      "readOnly": true,
                                      "type": "object",
                                      "properties": {
                                        "code": {
                                          "type": "string",
                                          "description": "Error code for classification of errors (ex: '400', '404', '500', etc.).",
                                          "readOnly": true
                                        },
                                        "message": {
                                          "type": "string",
                                          "description": "Human-readable helpful error message to provide additional context for error (e.g.,: “Capability ID 'foo' does not exist”).",
                                          "readOnly": true
                                        },
                                        "details": {
                                          "type": "array",
                                          "description": "Array of error details that describe the status of each error.",
                                          "items": {
                                            "type": "object",
                                            "description": "Defines the error details properties.",
                                            "properties": {
                                              "code": {
                                                "type": "string",
                                                "description": "Multi-part error code for classification and root causing of errors (ex: 400.200.100.432).",
                                                "readOnly": true
                                              },
                                              "message": {
                                                "type": "string",
                                                "description": "Human-readable helpful error message to provide additional context for error (ex: “Authentication method not supported”).",
                                                "readOnly": true
                                              },
                                              "info": {
                                                "type": "string",
                                                "description": "Human-readable helpful detailed text context for debugging (ex: “The following mechanisms are supported...”).",
                                                "readOnly": true
                                              },
                                              "correlationId": {
                                                "type": "string",
                                                "description": "Unique identifier for the transaction to aid in debugging.",
                                                "readOnly": true
                                              }
                                            }
                                          },
                                          "readOnly": true,
                                          "x-ms-identifiers": []
                                        }
                                      }
                                    }
                                  },
                                  "required": [
                                    "name"
                                  ]
                                },
                                "readOnly": true,
                                "x-ms-identifiers": []
                              }
                            },
                            "required": [
                              "name"
                            ]
                          },
                          "readOnly": true,
                          "x-ms-identifiers": []
                        },
                        "streams": {
                          "type": "array",
                          "description": "Array of stream statuses that describe the status of each stream.",
                          "items": {
                            "type": "object",
                            "description": "Defines the asset status stream properties.",
                            "properties": {
                              "name": {
                                "type": "string",
                                "description": "The name of the stream. Must be unique within the status.streams array. This name is used to correlate between the spec and status event information.",
                                "readOnly": true
                              },
                              "messageSchemaReference": {
                                "description": "The message schema reference object.",
                                "readOnly": true,
                                "type": "object",
                                "properties": {
                                  "schemaRegistryNamespace": {
                                    "type": "string",
                                    "description": "The message schema registry namespace.",
                                    "readOnly": true
                                  },
                                  "schemaName": {
                                    "type": "string",
                                    "description": "The message schema name.",
                                    "readOnly": true
                                  },
                                  "schemaVersion": {
                                    "type": "string",
                                    "description": "The message schema version.",
                                    "readOnly": true
                                  }
                                },
                                "required": [
                                  "schemaRegistryNamespace",
                                  "schemaName",
                                  "schemaVersion"
                                ]
                              },
                              "error": {
                                "description": "Object to transfer and persist errors that originate from the edge.",
                                "readOnly": true,
                                "type": "object",
                                "properties": {
                                  "code": {
                                    "type": "string",
                                    "description": "Error code for classification of errors (ex: '400', '404', '500', etc.).",
                                    "readOnly": true
                                  },
                                  "message": {
                                    "type": "string",
                                    "description": "Human-readable helpful error message to provide additional context for error (e.g.,: “Capability ID 'foo' does not exist”).",
                                    "readOnly": true
                                  },
                                  "details": {
                                    "type": "array",
                                    "description": "Array of error details that describe the status of each error.",
                                    "items": {
                                      "type": "object",
                                      "description": "Defines the error details properties.",
                                      "properties": {
                                        "code": {
                                          "type": "string",
                                          "description": "Multi-part error code for classification and root causing of errors (ex: 400.200.100.432).",
                                          "readOnly": true
                                        },
                                        "message": {
                                          "type": "string",
                                          "description": "Human-readable helpful error message to provide additional context for error (ex: “Authentication method not supported”).",
                                          "readOnly": true
                                        },
                                        "info": {
                                          "type": "string",
                                          "description": "Human-readable helpful detailed text context for debugging (ex: “The following mechanisms are supported...”).",
                                          "readOnly": true
                                        },
                                        "correlationId": {
                                          "type": "string",
                                          "description": "Unique identifier for the transaction to aid in debugging.",
                                          "readOnly": true
                                        }
                                      }
                                    },
                                    "readOnly": true,
                                    "x-ms-identifiers": []
                                  }
                                }
                              }
                            },
                            "required": [
                              "name"
                            ]
                          },
                          "readOnly": true,
                          "x-ms-identifiers": []
                        },
                        "managementGroups": {
                          "type": "array",
                          "description": "Array of management group statuses that describe the status of each management group.",
                          "items": {
                            "type": "object",
                            "description": "Defines the asset status management group properties.",
                            "properties": {
                              "name": {
                                "type": "string",
                                "description": "The name of the management group. Must be unique within the status.managementGroups array. This name is used to correlate between the spec and status event information.",
                                "readOnly": true
                              },
                              "actions": {
                                "type": "array",
                                "description": "Array of action statuses that describe the status of each action.",
                                "items": {
                                  "type": "object",
                                  "description": "Defines the asset status action properties.",
                                  "properties": {
                                    "name": {
                                      "type": "string",
                                      "description": "The name of the action. Must be unique within the status.actions array. This name is used to correlate between the spec and status event information.",
                                      "readOnly": true
                                    },
                                    "requestMessageSchemaReference": {
                                      "description": "The request message schema reference object for the action.",
                                      "readOnly": true,
                                      "type": "object",
                                      "properties": {
                                        "schemaRegistryNamespace": {
                                          "type": "string",
                                          "description": "The message schema registry namespace.",
                                          "readOnly": true
                                        },
                                        "schemaName": {
                                          "type": "string",
                                          "description": "The message schema name.",
                                          "readOnly": true
                                        },
                                        "schemaVersion": {
                                          "type": "string",
                                          "description": "The message schema version.",
                                          "readOnly": true
                                        }
                                      },
                                      "required": [
                                        "schemaRegistryNamespace",
                                        "schemaName",
                                        "schemaVersion"
                                      ]
                                    },
                                    "responseMessageSchemaReference": {
                                      "description": "The response message schema reference object for the action.",
                                      "readOnly": true,
                                      "type": "object",
                                      "properties": {
                                        "schemaRegistryNamespace": {
                                          "type": "string",
                                          "description": "The message schema registry namespace.",
                                          "readOnly": true
                                        },
                                        "schemaName": {
                                          "type": "string",
                                          "description": "The message schema name.",
                                          "readOnly": true
                                        },
                                        "schemaVersion": {
                                          "type": "string",
                                          "description": "The message schema version.",
                                          "readOnly": true
                                        }
                                      },
                                      "required": [
                                        "schemaRegistryNamespace",
                                        "schemaName",
                                        "schemaVersion"
                                      ]
                                    },
                                    "error": {
                                      "description": "Object to transfer and persist errors that originate from the edge.",
                                      "readOnly": true,
                                      "type": "object",
                                      "properties": {
                                        "code": {
                                          "type": "string",
                                          "description": "Error code for classification of errors (ex: '400', '404', '500', etc.).",
                                          "readOnly": true
                                        },
                                        "message": {
                                          "type": "string",
                                          "description": "Human-readable helpful error message to provide additional context for error (e.g.,: “Capability ID 'foo' does not exist”).",
                                          "readOnly": true
                                        },
                                        "details": {
                                          "type": "array",
                                          "description": "Array of error details that describe the status of each error.",
                                          "items": {
                                            "type": "object",
                                            "description": "Defines the error details properties.",
                                            "properties": {
                                              "code": {
                                                "type": "string",
                                                "description": "Multi-part error code for classification and root causing of errors (ex: 400.200.100.432).",
                                                "readOnly": true
                                              },
                                              "message": {
                                                "type": "string",
                                                "description": "Human-readable helpful error message to provide additional context for error (ex: “Authentication method not supported”).",
                                                "readOnly": true
                                              },
                                              "info": {
                                                "type": "string",
                                                "description": "Human-readable helpful detailed text context for debugging (ex: “The following mechanisms are supported...”).",
                                                "readOnly": true
                                              },
                                              "correlationId": {
                                                "type": "string",
                                                "description": "Unique identifier for the transaction to aid in debugging.",
                                                "readOnly": true
                                              }
                                            }
                                          },
                                          "readOnly": true,
                                          "x-ms-identifiers": []
                                        }
                                      }
                                    }
                                  },
                                  "required": [
                                    "name"
                                  ]
                                },
                                "readOnly": true,
                                "x-ms-identifiers": []
                              }
                            },
                            "required": [
                              "name"
                            ]
                          },
                          "readOnly": true,
                          "x-ms-identifiers": []
                        }
                      }
                    },
                    "provisioningState": {
                      "description": "Provisioning state of the resource.",
                      "readOnly": true,
                      "type": "string",
                      "enum": [
                        "Succeeded",
                        "Failed",
                        "Canceled",
                        "Accepted",
                        "Deleting"
                      ],
                      "x-ms-enum": {
                        "name": "ProvisioningState",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Succeeded",
                            "value": "Succeeded",
                            "description": "Resource has been created."
                          },
                          {
                            "name": "Failed",
                            "value": "Failed",
                            "description": "Resource creation failed."
                          },
                          {
                            "name": "Canceled",
                            "value": "Canceled",
                            "description": "Resource creation was canceled."
                          },
                          {
                            "name": "Accepted",
                            "value": "Accepted",
                            "description": "Resource has been accepted by the server."
                          },
                          {
                            "name": "Deleting",
                            "value": "Deleting",
                            "description": "Resource is deleting."
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "deviceRef"
                  ]
                },
                "extendedLocation": {
                  "description": "The extended location.",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ],
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "description": "The extended location type."
                    },
                    "name": {
                      "type": "string",
                      "description": "The extended location name."
                    }
                  },
                  "required": [
                    "type",
                    "name"
                  ]
                }
              },
              "required": [
                "extendedLocation"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resource 'NamespaceAsset' update operation succeeded",
            "schema": {
              "type": "object",
              "description": "Asset definition.",
              "properties": {
                "id": {
                  "type": "string",
                  "format": "arm-id",
                  "description": "Fully qualified resource ID for the resource. E.g. \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}\"",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "description": "The name of the resource",
                  "readOnly": true
                },
                "type": {
                  "type": "string",
                  "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                  "readOnly": true
                },
                "systemData": {
                  "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                  "readOnly": true,
                  "type": "object",
                  "properties": {
                    "createdBy": {
                      "type": "string",
                      "description": "The identity that created the resource."
                    },
                    "createdByType": {
                      "type": "string",
                      "description": "The type of identity that created the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource creation (UTC)."
                    },
                    "lastModifiedBy": {
                      "type": "string",
                      "description": "The identity that last modified the resource."
                    },
                    "lastModifiedByType": {
                      "type": "string",
                      "description": "The type of identity that last modified the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "lastModifiedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource last modification (UTC)"
                    }
                  }
                },
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "x-ms-mutability": [
                    "read",
                    "create",
                    "update"
                  ]
                },
                "location": {
                  "type": "string",
                  "description": "The geo-location where the resource lives",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ]
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "uuid": {
                      "type": "string",
                      "description": "Globally unique, immutable, non-reusable ID.",
                      "readOnly": true
                    },
                    "enabled": {
                      "type": "boolean",
                      "description": "Enabled/disabled status of the asset."
                    },
                    "externalAssetId": {
                      "type": "string",
                      "description": "Asset ID provided by the customer.",
                      "x-ms-mutability": [
                        "read",
                        "create"
                      ]
                    },
                    "displayName": {
                      "type": "string",
                      "description": "Human-readable display name."
                    },
                    "description": {
                      "type": "string",
                      "description": "Human-readable description of the asset."
                    },
                    "deviceRef": {
                      "description": "Reference to the device that provides data for this asset. Must provide device name & endpoint on the device to use.",
                      "x-ms-mutability": [
                        "read",
                        "create"
                      ],
                      "type": "object",
                      "properties": {
                        "deviceName": {
                          "type": "string",
                          "description": "Name of the device resource"
                        },
                        "endpointName": {
                          "type": "string",
                          "description": "The name of endpoint to use"
                        }
                      },
                      "required": [
                        "deviceName",
                        "endpointName"
                      ]
                    },
                    "assetTypeRefs": {
                      "type": "array",
                      "description": "URIs or type definition IDs.",
                      "items": {
                        "type": "string"
                      }
                    },
                    "version": {
                      "type": "integer",
                      "format": "int64",
                      "description": "An integer that is incremented each time the resource is modified.",
                      "readOnly": true
                    },
                    "lastTransitionTime": {
                      "type": "string",
                      "format": "date-time",
                      "description": "A timestamp (in UTC) that is updated each time the resource is modified.",
                      "readOnly": true
                    },
                    "manufacturer": {
                      "type": "string",
                      "description": "Asset manufacturer."
                    },
                    "manufacturerUri": {
                      "type": "string",
                      "description": "Asset manufacturer URI."
                    },
                    "model": {
                      "type": "string",
                      "description": "Asset model."
                    },
                    "productCode": {
                      "type": "string",
                      "description": "Asset product code."
                    },
                    "hardwareRevision": {
                      "type": "string",
                      "description": "Asset hardware revision number."
                    },
                    "softwareRevision": {
                      "type": "string",
                      "description": "Asset software revision number."
                    },
                    "documentationUri": {
                      "type": "string",
                      "description": "Asset documentation reference."
                    },
                    "serialNumber": {
                      "type": "string",
                      "description": "Asset serial number."
                    },
                    "attributes": {
                      "type": "object",
                      "description": "A set of key-value pairs that contain custom attributes set by the customer.",
                      "additionalProperties": {}
                    },
                    "discoveredAssetRefs": {
                      "type": "array",
                      "description": "Reference to a list of discovered assets. Populated only if the asset has been created from discovery flow. Discovered asset names must be provided.",
                      "items": {
                        "type": "string"
                      },
                      "x-ms-mutability": [
                        "read",
                        "create"
                      ]
                    },
                    "defaultDatasetsConfiguration": {
                      "type": "string",
                      "description": "Stringified JSON that contains connector-specific default configuration for all datasets. Each dataset can have its own configuration that overrides the default settings here."
                    },
                    "defaultEventsConfiguration": {
                      "type": "string",
                      "description": "Stringified JSON that contains connector-specific default configuration for all events. Each event can have its own configuration that overrides the default settings here."
                    },
                    "defaultStreamsConfiguration": {
                      "type": "string",
                      "description": "Stringified JSON that contains connector-specific default configuration for all streams. Each stream can have its own configuration that overrides the default settings here."
                    },
                    "defaultManagementGroupsConfiguration": {
                      "type": "string",
                      "description": "Stringified JSON that contains connector-specific default configuration for all management groups. Each management group can have its own configuration that overrides the default settings here."
                    },
                    "defaultDatasetsDestinations": {
                      "type": "array",
                      "description": "Default destinations for a dataset.",
                      "items": {
                        "type": "object",
                        "description": "The type of the destination.",
                        "properties": {
                          "target": {
                            "description": "Target destination.",
                            "type": "string",
                            "enum": [
                              "Mqtt",
                              "BrokerStateStore",
                              "Storage"
                            ],
                            "x-ms-enum": {
                              "name": "DatasetDestinationTarget",
                              "modelAsString": true,
                              "values": [
                                {
                                  "name": "Mqtt",
                                  "value": "Mqtt",
                                  "description": "MQTT target."
                                },
                                {
                                  "name": "BrokerStateStore",
                                  "value": "BrokerStateStore",
                                  "description": "Broker State Store target."
                                },
                                {
                                  "name": "Storage",
                                  "value": "Storage",
                                  "description": "Storage target."
                                }
                              ]
                            }
                          }
                        },
                        "discriminator": "target",
                        "required": [
                          "target"
                        ]
                      },
                      "x-ms-identifiers": []
                    },
                    "defaultEventsDestinations": {
                      "type": "array",
                      "description": "Default destinations for an event.",
                      "items": {
                        "type": "object",
                        "description": "The type of the destination.",
                        "properties": {
                          "target": {
                            "description": "Target destination.",
                            "type": "string",
                            "enum": [
                              "Mqtt",
                              "Storage"
                            ],
                            "x-ms-enum": {
                              "name": "EventDestinationTarget",
                              "modelAsString": true,
                              "values": [
                                {
                                  "name": "Mqtt",
                                  "value": "Mqtt",
                                  "description": "MQTT target."
                                },
                                {
                                  "name": "Storage",
                                  "value": "Storage",
                                  "description": "Storage target."
                                }
                              ]
                            }
                          }
                        },
                        "discriminator": "target",
                        "required": [
                          "target"
                        ]
                      },
                      "x-ms-identifiers": []
                    },
                    "defaultStreamsDestinations": {
                      "type": "array",
                      "description": "Default destinations for a stream.",
                      "items": {
                        "type": "object",
                        "description": "The type of the destination.",
                        "properties": {
                          "target": {
                            "description": "Target destination.",
                            "type": "string",
                            "enum": [
                              "Mqtt",
                              "Storage"
                            ],
                            "x-ms-enum": {
                              "name": "StreamDestinationTarget",
                              "modelAsString": true,
                              "values": [
                                {
                                  "name": "Mqtt",
                                  "value": "Mqtt",
                                  "description": "MQTT target."
                                },
                                {
                                  "name": "Storage",
                                  "value": "Storage",
                                  "description": "Storage target."
                                }
                              ]
                            }
                          }
                        },
                        "discriminator": "target",
                        "required": [
                          "target"
                        ]
                      },
                      "x-ms-identifiers": []
                    },
                    "datasets": {
                      "type": "array",
                      "description": "Array of datasets that are part of the asset. Each dataset describes the data points that make up the set.",
                      "items": {
                        "type": "object",
                        "description": "Defines the dataset properties.",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "Name of the dataset."
                          },
                          "dataSource": {
                            "type": "string",
                            "description": "Reference to a data source for a given dataset."
                          },
                          "typeRef": {
                            "type": "string",
                            "description": "URI or type definition ID."
                          },
                          "datasetConfiguration": {
                            "type": "string",
                            "description": "Stringified JSON that contains connector-specific JSON string that describes configuration for the specific dataset."
                          },
                          "destinations": {
                            "type": "array",
                            "description": "Destinations for a dataset.",
                            "items": {
                              "type": "object",
                              "description": "The type of the destination.",
                              "properties": {
                                "target": {
                                  "description": "Target destination.",
                                  "type": "string",
                                  "enum": [
                                    "Mqtt",
                                    "BrokerStateStore",
                                    "Storage"
                                  ],
                                  "x-ms-enum": {
                                    "name": "DatasetDestinationTarget",
                                    "modelAsString": true,
                                    "values": [
                                      {
                                        "name": "Mqtt",
                                        "value": "Mqtt",
                                        "description": "MQTT target."
                                      },
                                      {
                                        "name": "BrokerStateStore",
                                        "value": "BrokerStateStore",
                                        "description": "Broker State Store target."
                                      },
                                      {
                                        "name": "Storage",
                                        "value": "Storage",
                                        "description": "Storage target."
                                      }
                                    ]
                                  }
                                }
                              },
                              "discriminator": "target",
                              "required": [
                                "target"
                              ]
                            },
                            "x-ms-identifiers": []
                          },
                          "dataPoints": {
                            "type": "array",
                            "description": "Array of data points that are part of the dataset. Each data point can have per-data point configuration.",
                            "items": {
                              "type": "object",
                              "description": "Defines the dataset data point properties.",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "The name of the data point."
                                },
                                "dataSource": {
                                  "type": "string",
                                  "description": "The address of the source of the data in the asset (e.g. URL) so that a client can access the data source on the asset."
                                },
                                "dataPointConfiguration": {
                                  "type": "string",
                                  "description": "Stringified JSON that contains connector-specific configuration for the data point. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize."
                                },
                                "typeRef": {
                                  "type": "string",
                                  "description": "URI or type definition ID."
                                }
                              },
                              "required": [
                                "name",
                                "dataSource"
                              ]
                            },
                            "x-ms-identifiers": []
                          }
                        },
                        "required": [
                          "name"
                        ]
                      },
                      "x-ms-identifiers": []
                    },
                    "eventGroups": {
                      "type": "array",
                      "description": "Array of event groups that are part of the asset. Each event group can have per-event group configuration.",
                      "items": {
                        "type": "object",
                        "description": "Defines the event group properties.",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "The name of the event group."
                          },
                          "dataSource": {
                            "type": "string",
                            "description": "The address of the notifier of the event group in the asset (e.g. URL) so that a client can access the event group on the asset."
                          },
                          "eventGroupConfiguration": {
                            "type": "string",
                            "description": "Stringified JSON that contains connector-specific configuration for the event group. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize."
                          },
                          "defaultDestinations": {
                            "type": "array",
                            "description": "Destinations for events. Default destinations when destinations is not defined at the event level.",
                            "items": {
                              "type": "object",
                              "description": "The type of the destination.",
                              "properties": {
                                "target": {
                                  "description": "Target destination.",
                                  "type": "string",
                                  "enum": [
                                    "Mqtt",
                                    "Storage"
                                  ],
                                  "x-ms-enum": {
                                    "name": "EventDestinationTarget",
                                    "modelAsString": true,
                                    "values": [
                                      {
                                        "name": "Mqtt",
                                        "value": "Mqtt",
                                        "description": "MQTT target."
                                      },
                                      {
                                        "name": "Storage",
                                        "value": "Storage",
                                        "description": "Storage target."
                                      }
                                    ]
                                  }
                                }
                              },
                              "discriminator": "target",
                              "required": [
                                "target"
                              ]
                            },
                            "x-ms-identifiers": []
                          },
                          "typeRef": {
                            "type": "string",
                            "description": "URI or type definition ID."
                          },
                          "events": {
                            "type": "array",
                            "description": "Array of events that are part of the event group.",
                            "items": {
                              "type": "object",
                              "description": "Defines the event properties.",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "The name of the event."
                                },
                                "dataSource": {
                                  "type": "string",
                                  "description": "Reference to a data source for a given event."
                                },
                                "eventConfiguration": {
                                  "type": "string",
                                  "description": "Stringified JSON that contains connector-specific configuration for the event. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize."
                                },
                                "destinations": {
                                  "type": "array",
                                  "description": "Destinations for an event.",
                                  "items": {
                                    "type": "object",
                                    "description": "The type of the destination.",
                                    "properties": {
                                      "target": {
                                        "description": "Target destination.",
                                        "type": "string",
                                        "enum": [
                                          "Mqtt",
                                          "Storage"
                                        ],
                                        "x-ms-enum": {
                                          "name": "EventDestinationTarget",
                                          "modelAsString": true,
                                          "values": [
                                            {
                                              "name": "Mqtt",
                                              "value": "Mqtt",
                                              "description": "MQTT target."
                                            },
                                            {
                                              "name": "Storage",
                                              "value": "Storage",
                                              "description": "Storage target."
                                            }
                                          ]
                                        }
                                      }
                                    },
                                    "discriminator": "target",
                                    "required": [
                                      "target"
                                    ]
                                  },
                                  "x-ms-identifiers": []
                                },
                                "typeRef": {
                                  "type": "string",
                                  "description": "URI or type definition ID."
                                }
                              },
                              "required": [
                                "name"
                              ]
                            },
                            "x-ms-identifiers": []
                          }
                        },
                        "required": [
                          "name"
                        ]
                      },
                      "x-ms-identifiers": []
                    },
                    "streams": {
                      "type": "array",
                      "description": "Array of streams that are part of the asset. Each stream can have a per-stream configuration.",
                      "items": {
                        "type": "object",
                        "description": "Defines the stream properties.",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "Name of the stream definition."
                          },
                          "streamConfiguration": {
                            "type": "string",
                            "description": "Stringified JSON that contains connector-specific configuration for the specific stream."
                          },
                          "typeRef": {
                            "type": "string",
                            "description": "URI or type definition ID."
                          },
                          "destinations": {
                            "type": "array",
                            "description": "Destinations for a stream.",
                            "items": {
                              "type": "object",
                              "description": "The type of the destination.",
                              "properties": {
                                "target": {
                                  "description": "Target destination.",
                                  "type": "string",
                                  "enum": [
                                    "Mqtt",
                                    "Storage"
                                  ],
                                  "x-ms-enum": {
                                    "name": "StreamDestinationTarget",
                                    "modelAsString": true,
                                    "values": [
                                      {
                                        "name": "Mqtt",
                                        "value": "Mqtt",
                                        "description": "MQTT target."
                                      },
                                      {
                                        "name": "Storage",
                                        "value": "Storage",
                                        "description": "Storage target."
                                      }
                                    ]
                                  }
                                }
                              },
                              "discriminator": "target",
                              "required": [
                                "target"
                              ]
                            },
                            "x-ms-identifiers": []
                          }
                        },
                        "required": [
                          "name"
                        ]
                      },
                      "x-ms-identifiers": []
                    },
                    "managementGroups": {
                      "type": "array",
                      "description": "Array of management groups that are part of the asset. Each management group can have a per-group configuration.",
                      "items": {
                        "type": "object",
                        "description": "Defines the management group properties.",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "Name of the management group."
                          },
                          "dataSource": {
                            "type": "string",
                            "description": "Reference to a data source for a given management group."
                          },
                          "managementGroupConfiguration": {
                            "type": "string",
                            "description": "Stringified JSON that contains connector-specific configuration for the management group."
                          },
                          "typeRef": {
                            "type": "string",
                            "description": "URI or type definition ID."
                          },
                          "defaultTopic": {
                            "type": "string",
                            "description": "Default MQTT topic path on which a client will receive the request for all actions that are part of the management group."
                          },
                          "defaultTimeoutInSeconds": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Default response timeout for all actions that are part of the management group.",
                            "default": 100
                          },
                          "actions": {
                            "type": "array",
                            "description": "Array of actions that are part of the management group. Each action can have an individual configuration.",
                            "items": {
                              "type": "object",
                              "description": "Defines the action properties.",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "Name of the action."
                                },
                                "actionConfiguration": {
                                  "type": "string",
                                  "description": "Stringified JSON that contains connector-specific configuration for the action."
                                },
                                "targetUri": {
                                  "type": "string",
                                  "description": "The target URI on which a client can invoke the specific action."
                                },
                                "typeRef": {
                                  "type": "string",
                                  "description": "URI or type definition ID."
                                },
                                "topic": {
                                  "type": "string",
                                  "description": "The MQTT topic path on which a client will receive the request for the action."
                                },
                                "actionType": {
                                  "type": "string",
                                  "description": "The type of the action.",
                                  "default": "Call",
                                  "enum": [
                                    "Call",
                                    "Read",
                                    "Write"
                                  ],
                                  "x-ms-enum": {
                                    "name": "ManagementActionType",
                                    "modelAsString": true,
                                    "values": [
                                      {
                                        "name": "Call",
                                        "value": "Call",
                                        "description": "Call action type."
                                      },
                                      {
                                        "name": "Read",
                                        "value": "Read",
                                        "description": "Read action type."
                                      },
                                      {
                                        "name": "Write",
                                        "value": "Write",
                                        "description": "Write action type."
                                      }
                                    ]
                                  }
                                },
                                "timeoutInSeconds": {
                                  "type": "integer",
                                  "format": "int32",
                                  "description": "Response timeout for the action."
                                }
                              },
                              "required": [
                                "name",
                                "targetUri"
                              ]
                            },
                            "x-ms-identifiers": []
                          }
                        },
                        "required": [
                          "name"
                        ]
                      },
                      "x-ms-identifiers": []
                    },
                    "status": {
                      "description": "Read only object to reflect changes that have occurred on the Edge. Similar to Kubernetes status property for custom resources.",
                      "readOnly": true,
                      "type": "object",
                      "properties": {
                        "config": {
                          "description": "Defines the asset status config properties.",
                          "readOnly": true,
                          "type": "object",
                          "properties": {
                            "version": {
                              "type": "integer",
                              "format": "int64",
                              "description": "A read-only incremental counter indicating the number of times the configuration has been modified from the perspective of the current actual (edge) state of the CRD. Edge would be the only writer of this value and would sync back up to the cloud. In steady state, this should equal version.",
                              "readOnly": true
                            },
                            "lastTransitionTime": {
                              "type": "string",
                              "format": "date-time",
                              "description": "A read-only timestamp indicating the last time the configuration has been modified from the perspective of the current actual (edge) state of the CRD. Edge would be the only writer of this value and would sync back up to the cloud.",
                              "readOnly": true
                            },
                            "error": {
                              "description": "Object to transfer and persist errors that originate from the edge.",
                              "readOnly": true,
                              "type": "object",
                              "properties": {
                                "code": {
                                  "type": "string",
                                  "description": "Error code for classification of errors (ex: '400', '404', '500', etc.).",
                                  "readOnly": true
                                },
                                "message": {
                                  "type": "string",
                                  "description": "Human-readable helpful error message to provide additional context for error (e.g.,: “Capability ID 'foo' does not exist”).",
                                  "readOnly": true
                                },
                                "details": {
                                  "type": "array",
                                  "description": "Array of error details that describe the status of each error.",
                                  "items": {
                                    "type": "object",
                                    "description": "Defines the error details properties.",
                                    "properties": {
                                      "code": {
                                        "type": "string",
                                        "description": "Multi-part error code for classification and root causing of errors (ex: 400.200.100.432).",
                                        "readOnly": true
                                      },
                                      "message": {
                                        "type": "string",
                                        "description": "Human-readable helpful error message to provide additional context for error (ex: “Authentication method not supported”).",
                                        "readOnly": true
                                      },
                                      "info": {
                                        "type": "string",
                                        "description": "Human-readable helpful detailed text context for debugging (ex: “The following mechanisms are supported...”).",
                                        "readOnly": true
                                      },
                                      "correlationId": {
                                        "type": "string",
                                        "description": "Unique identifier for the transaction to aid in debugging.",
                                        "readOnly": true
                                      }
                                    }
                                  },
                                  "readOnly": true,
                                  "x-ms-identifiers": []
                                }
                              }
                            }
                          }
                        },
                        "datasets": {
                          "type": "array",
                          "description": "Array of dataset statuses that describe the status of each dataset.",
                          "items": {
                            "type": "object",
                            "description": "Defines the asset status dataset properties.",
                            "properties": {
                              "name": {
                                "type": "string",
                                "description": "The name of the dataset. Must be unique within the status.datasets array. This name is used to correlate between the spec and status dataset information.",
                                "readOnly": true
                              },
                              "messageSchemaReference": {
                                "description": "The message schema reference object.",
                                "readOnly": true,
                                "type": "object",
                                "properties": {
                                  "schemaRegistryNamespace": {
                                    "type": "string",
                                    "description": "The message schema registry namespace.",
                                    "readOnly": true
                                  },
                                  "schemaName": {
                                    "type": "string",
                                    "description": "The message schema name.",
                                    "readOnly": true
                                  },
                                  "schemaVersion": {
                                    "type": "string",
                                    "description": "The message schema version.",
                                    "readOnly": true
                                  }
                                },
                                "required": [
                                  "schemaRegistryNamespace",
                                  "schemaName",
                                  "schemaVersion"
                                ]
                              },
                              "error": {
                                "description": "Object to transfer and persist errors that originate from the edge.",
                                "readOnly": true,
                                "type": "object",
                                "properties": {
                                  "code": {
                                    "type": "string",
                                    "description": "Error code for classification of errors (ex: '400', '404', '500', etc.).",
                                    "readOnly": true
                                  },
                                  "message": {
                                    "type": "string",
                                    "description": "Human-readable helpful error message to provide additional context for error (e.g.,: “Capability ID 'foo' does not exist”).",
                                    "readOnly": true
                                  },
                                  "details": {
                                    "type": "array",
                                    "description": "Array of error details that describe the status of each error.",
                                    "items": {
                                      "type": "object",
                                      "description": "Defines the error details properties.",
                                      "properties": {
                                        "code": {
                                          "type": "string",
                                          "description": "Multi-part error code for classification and root causing of errors (ex: 400.200.100.432).",
                                          "readOnly": true
                                        },
                                        "message": {
                                          "type": "string",
                                          "description": "Human-readable helpful error message to provide additional context for error (ex: “Authentication method not supported”).",
                                          "readOnly": true
                                        },
                                        "info": {
                                          "type": "string",
                                          "description": "Human-readable helpful detailed text context for debugging (ex: “The following mechanisms are supported...”).",
                                          "readOnly": true
                                        },
                                        "correlationId": {
                                          "type": "string",
                                          "description": "Unique identifier for the transaction to aid in debugging.",
                                          "readOnly": true
                                        }
                                      }
                                    },
                                    "readOnly": true,
                                    "x-ms-identifiers": []
                                  }
                                }
                              }
                            },
                            "required": [
                              "name"
                            ]
                          },
                          "readOnly": true,
                          "x-ms-identifiers": []
                        },
                        "eventGroups": {
                          "type": "array",
                          "description": "Array of event group statuses that describe the status of each event group.",
                          "items": {
                            "type": "object",
                            "description": "Defines the asset status event group properties.",
                            "properties": {
                              "name": {
                                "type": "string",
                                "description": "The name of the event group. Must be unique within the status.eventGroups array. This name is used to correlate between the spec and status event group information.",
                                "readOnly": true
                              },
                              "events": {
                                "type": "array",
                                "description": "Array of event statuses that describe the status of each event in the event group.",
                                "items": {
                                  "type": "object",
                                  "description": "Defines the asset status event properties.",
                                  "properties": {
                                    "name": {
                                      "type": "string",
                                      "description": "The name of the event. Must be unique within the status.events array. This name is used to correlate between the spec and status event information.",
                                      "readOnly": true
                                    },
                                    "messageSchemaReference": {
                                      "description": "The message schema reference object.",
                                      "readOnly": true,
                                      "type": "object",
                                      "properties": {
                                        "schemaRegistryNamespace": {
                                          "type": "string",
                                          "description": "The message schema registry namespace.",
                                          "readOnly": true
                                        },
                                        "schemaName": {
                                          "type": "string",
                                          "description": "The message schema name.",
                                          "readOnly": true
                                        },
                                        "schemaVersion": {
                                          "type": "string",
                                          "description": "The message schema version.",
                                          "readOnly": true
                                        }
                                      },
                                      "required": [
                                        "schemaRegistryNamespace",
                                        "schemaName",
                                        "schemaVersion"
                                      ]
                                    },
                                    "error": {
                                      "description": "Object to transfer and persist errors that originate from the edge.",
                                      "readOnly": true,
                                      "type": "object",
                                      "properties": {
                                        "code": {
                                          "type": "string",
                                          "description": "Error code for classification of errors (ex: '400', '404', '500', etc.).",
                                          "readOnly": true
                                        },
                                        "message": {
                                          "type": "string",
                                          "description": "Human-readable helpful error message to provide additional context for error (e.g.,: “Capability ID 'foo' does not exist”).",
                                          "readOnly": true
                                        },
                                        "details": {
                                          "type": "array",
                                          "description": "Array of error details that describe the status of each error.",
                                          "items": {
                                            "type": "object",
                                            "description": "Defines the error details properties.",
                                            "properties": {
                                              "code": {
                                                "type": "string",
                                                "description": "Multi-part error code for classification and root causing of errors (ex: 400.200.100.432).",
                                                "readOnly": true
                                              },
                                              "message": {
                                                "type": "string",
                                                "description": "Human-readable helpful error message to provide additional context for error (ex: “Authentication method not supported”).",
                                                "readOnly": true
                                              },
                                              "info": {
                                                "type": "string",
                                                "description": "Human-readable helpful detailed text context for debugging (ex: “The following mechanisms are supported...”).",
                                                "readOnly": true
                                              },
                                              "correlationId": {
                                                "type": "string",
                                                "description": "Unique identifier for the transaction to aid in debugging.",
                                                "readOnly": true
                                              }
                                            }
                                          },
                                          "readOnly": true,
                                          "x-ms-identifiers": []
                                        }
                                      }
                                    }
                                  },
                                  "required": [
                                    "name"
                                  ]
                                },
                                "readOnly": true,
                                "x-ms-identifiers": []
                              }
                            },
                            "required": [
                              "name"
                            ]
                          },
                          "readOnly": true,
                          "x-ms-identifiers": []
                        },
                        "streams": {
                          "type": "array",
                          "description": "Array of stream statuses that describe the status of each stream.",
                          "items": {
                            "type": "object",
                            "description": "Defines the asset status stream properties.",
                            "properties": {
                              "name": {
                                "type": "string",
                                "description": "The name of the stream. Must be unique within the status.streams array. This name is used to correlate between the spec and status event information.",
                                "readOnly": true
                              },
                              "messageSchemaReference": {
                                "description": "The message schema reference object.",
                                "readOnly": true,
                                "type": "object",
                                "properties": {
                                  "schemaRegistryNamespace": {
                                    "type": "string",
                                    "description": "The message schema registry namespace.",
                                    "readOnly": true
                                  },
                                  "schemaName": {
                                    "type": "string",
                                    "description": "The message schema name.",
                                    "readOnly": true
                                  },
                                  "schemaVersion": {
                                    "type": "string",
                                    "description": "The message schema version.",
                                    "readOnly": true
                                  }
                                },
                                "required": [
                                  "schemaRegistryNamespace",
                                  "schemaName",
                                  "schemaVersion"
                                ]
                              },
                              "error": {
                                "description": "Object to transfer and persist errors that originate from the edge.",
                                "readOnly": true,
                                "type": "object",
                                "properties": {
                                  "code": {
                                    "type": "string",
                                    "description": "Error code for classification of errors (ex: '400', '404', '500', etc.).",
                                    "readOnly": true
                                  },
                                  "message": {
                                    "type": "string",
                                    "description": "Human-readable helpful error message to provide additional context for error (e.g.,: “Capability ID 'foo' does not exist”).",
                                    "readOnly": true
                                  },
                                  "details": {
                                    "type": "array",
                                    "description": "Array of error details that describe the status of each error.",
                                    "items": {
                                      "type": "object",
                                      "description": "Defines the error details properties.",
                                      "properties": {
                                        "code": {
                                          "type": "string",
                                          "description": "Multi-part error code for classification and root causing of errors (ex: 400.200.100.432).",
                                          "readOnly": true
                                        },
                                        "message": {
                                          "type": "string",
                                          "description": "Human-readable helpful error message to provide additional context for error (ex: “Authentication method not supported”).",
                                          "readOnly": true
                                        },
                                        "info": {
                                          "type": "string",
                                          "description": "Human-readable helpful detailed text context for debugging (ex: “The following mechanisms are supported...”).",
                                          "readOnly": true
                                        },
                                        "correlationId": {
                                          "type": "string",
                                          "description": "Unique identifier for the transaction to aid in debugging.",
                                          "readOnly": true
                                        }
                                      }
                                    },
                                    "readOnly": true,
                                    "x-ms-identifiers": []
                                  }
                                }
                              }
                            },
                            "required": [
                              "name"
                            ]
                          },
                          "readOnly": true,
                          "x-ms-identifiers": []
                        },
                        "managementGroups": {
                          "type": "array",
                          "description": "Array of management group statuses that describe the status of each management group.",
                          "items": {
                            "type": "object",
                            "description": "Defines the asset status management group properties.",
                            "properties": {
                              "name": {
                                "type": "string",
                                "description": "The name of the management group. Must be unique within the status.managementGroups array. This name is used to correlate between the spec and status event information.",
                                "readOnly": true
                              },
                              "actions": {
                                "type": "array",
                                "description": "Array of action statuses that describe the status of each action.",
                                "items": {
                                  "type": "object",
                                  "description": "Defines the asset status action properties.",
                                  "properties": {
                                    "name": {
                                      "type": "string",
                                      "description": "The name of the action. Must be unique within the status.actions array. This name is used to correlate between the spec and status event information.",
                                      "readOnly": true
                                    },
                                    "requestMessageSchemaReference": {
                                      "description": "The request message schema reference object for the action.",
                                      "readOnly": true,
                                      "type": "object",
                                      "properties": {
                                        "schemaRegistryNamespace": {
                                          "type": "string",
                                          "description": "The message schema registry namespace.",
                                          "readOnly": true
                                        },
                                        "schemaName": {
                                          "type": "string",
                                          "description": "The message schema name.",
                                          "readOnly": true
                                        },
                                        "schemaVersion": {
                                          "type": "string",
                                          "description": "The message schema version.",
                                          "readOnly": true
                                        }
                                      },
                                      "required": [
                                        "schemaRegistryNamespace",
                                        "schemaName",
                                        "schemaVersion"
                                      ]
                                    },
                                    "responseMessageSchemaReference": {
                                      "description": "The response message schema reference object for the action.",
                                      "readOnly": true,
                                      "type": "object",
                                      "properties": {
                                        "schemaRegistryNamespace": {
                                          "type": "string",
                                          "description": "The message schema registry namespace.",
                                          "readOnly": true
                                        },
                                        "schemaName": {
                                          "type": "string",
                                          "description": "The message schema name.",
                                          "readOnly": true
                                        },
                                        "schemaVersion": {
                                          "type": "string",
                                          "description": "The message schema version.",
                                          "readOnly": true
                                        }
                                      },
                                      "required": [
                                        "schemaRegistryNamespace",
                                        "schemaName",
                                        "schemaVersion"
                                      ]
                                    },
                                    "error": {
                                      "description": "Object to transfer and persist errors that originate from the edge.",
                                      "readOnly": true,
                                      "type": "object",
                                      "properties": {
                                        "code": {
                                          "type": "string",
                                          "description": "Error code for classification of errors (ex: '400', '404', '500', etc.).",
                                          "readOnly": true
                                        },
                                        "message": {
                                          "type": "string",
                                          "description": "Human-readable helpful error message to provide additional context for error (e.g.,: “Capability ID 'foo' does not exist”).",
                                          "readOnly": true
                                        },
                                        "details": {
                                          "type": "array",
                                          "description": "Array of error details that describe the status of each error.",
                                          "items": {
                                            "type": "object",
                                            "description": "Defines the error details properties.",
                                            "properties": {
                                              "code": {
                                                "type": "string",
                                                "description": "Multi-part error code for classification and root causing of errors (ex: 400.200.100.432).",
                                                "readOnly": true
                                              },
                                              "message": {
                                                "type": "string",
                                                "description": "Human-readable helpful error message to provide additional context for error (ex: “Authentication method not supported”).",
                                                "readOnly": true
                                              },
                                              "info": {
                                                "type": "string",
                                                "description": "Human-readable helpful detailed text context for debugging (ex: “The following mechanisms are supported...”).",
                                                "readOnly": true
                                              },
                                              "correlationId": {
                                                "type": "string",
                                                "description": "Unique identifier for the transaction to aid in debugging.",
                                                "readOnly": true
                                              }
                                            }
                                          },
                                          "readOnly": true,
                                          "x-ms-identifiers": []
                                        }
                                      }
                                    }
                                  },
                                  "required": [
                                    "name"
                                  ]
                                },
                                "readOnly": true,
                                "x-ms-identifiers": []
                              }
                            },
                            "required": [
                              "name"
                            ]
                          },
                          "readOnly": true,
                          "x-ms-identifiers": []
                        }
                      }
                    },
                    "provisioningState": {
                      "description": "Provisioning state of the resource.",
                      "readOnly": true,
                      "type": "string",
                      "enum": [
                        "Succeeded",
                        "Failed",
                        "Canceled",
                        "Accepted",
                        "Deleting"
                      ],
                      "x-ms-enum": {
                        "name": "ProvisioningState",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Succeeded",
                            "value": "Succeeded",
                            "description": "Resource has been created."
                          },
                          {
                            "name": "Failed",
                            "value": "Failed",
                            "description": "Resource creation failed."
                          },
                          {
                            "name": "Canceled",
                            "value": "Canceled",
                            "description": "Resource creation was canceled."
                          },
                          {
                            "name": "Accepted",
                            "value": "Accepted",
                            "description": "Resource has been accepted by the server."
                          },
                          {
                            "name": "Deleting",
                            "value": "Deleting",
                            "description": "Resource is deleting."
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "deviceRef"
                  ]
                },
                "extendedLocation": {
                  "description": "The extended location.",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ],
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "description": "The extended location type."
                    },
                    "name": {
                      "type": "string",
                      "description": "The extended location name."
                    }
                  },
                  "required": [
                    "type",
                    "name"
                  ]
                }
              },
              "required": [
                "extendedLocation"
              ]
            }
          },
          "201": {
            "description": "Resource 'NamespaceAsset' create operation succeeded",
            "schema": {
              "type": "object",
              "description": "Asset definition.",
              "properties": {
                "id": {
                  "type": "string",
                  "format": "arm-id",
                  "description": "Fully qualified resource ID for the resource. E.g. \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}\"",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "description": "The name of the resource",
                  "readOnly": true
                },
                "type": {
                  "type": "string",
                  "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                  "readOnly": true
                },
                "systemData": {
                  "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                  "readOnly": true,
                  "type": "object",
                  "properties": {
                    "createdBy": {
                      "type": "string",
                      "description": "The identity that created the resource."
                    },
                    "createdByType": {
                      "type": "string",
                      "description": "The type of identity that created the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource creation (UTC)."
                    },
                    "lastModifiedBy": {
                      "type": "string",
                      "description": "The identity that last modified the resource."
                    },
                    "lastModifiedByType": {
                      "type": "string",
                      "description": "The type of identity that last modified the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "lastModifiedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource last modification (UTC)"
                    }
                  }
                },
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "x-ms-mutability": [
                    "read",
                    "create",
                    "update"
                  ]
                },
                "location": {
                  "type": "string",
                  "description": "The geo-location where the resource lives",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ]
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "uuid": {
                      "type": "string",
                      "description": "Globally unique, immutable, non-reusable ID.",
                      "readOnly": true
                    },
                    "enabled": {
                      "type": "boolean",
                      "description": "Enabled/disabled status of the asset."
                    },
                    "externalAssetId": {
                      "type": "string",
                      "description": "Asset ID provided by the customer.",
                      "x-ms-mutability": [
                        "read",
                        "create"
                      ]
                    },
                    "displayName": {
                      "type": "string",
                      "description": "Human-readable display name."
                    },
                    "description": {
                      "type": "string",
                      "description": "Human-readable description of the asset."
                    },
                    "deviceRef": {
                      "description": "Reference to the device that provides data for this asset. Must provide device name & endpoint on the device to use.",
                      "x-ms-mutability": [
                        "read",
                        "create"
                      ],
                      "type": "object",
                      "properties": {
                        "deviceName": {
                          "type": "string",
                          "description": "Name of the device resource"
                        },
                        "endpointName": {
                          "type": "string",
                          "description": "The name of endpoint to use"
                        }
                      },
                      "required": [
                        "deviceName",
                        "endpointName"
                      ]
                    },
                    "assetTypeRefs": {
                      "type": "array",
                      "description": "URIs or type definition IDs.",
                      "items": {
                        "type": "string"
                      }
                    },
                    "version": {
                      "type": "integer",
                      "format": "int64",
                      "description": "An integer that is incremented each time the resource is modified.",
                      "readOnly": true
                    },
                    "lastTransitionTime": {
                      "type": "string",
                      "format": "date-time",
                      "description": "A timestamp (in UTC) that is updated each time the resource is modified.",
                      "readOnly": true
                    },
                    "manufacturer": {
                      "type": "string",
                      "description": "Asset manufacturer."
                    },
                    "manufacturerUri": {
                      "type": "string",
                      "description": "Asset manufacturer URI."
                    },
                    "model": {
                      "type": "string",
                      "description": "Asset model."
                    },
                    "productCode": {
                      "type": "string",
                      "description": "Asset product code."
                    },
                    "hardwareRevision": {
                      "type": "string",
                      "description": "Asset hardware revision number."
                    },
                    "softwareRevision": {
                      "type": "string",
                      "description": "Asset software revision number."
                    },
                    "documentationUri": {
                      "type": "string",
                      "description": "Asset documentation reference."
                    },
                    "serialNumber": {
                      "type": "string",
                      "description": "Asset serial number."
                    },
                    "attributes": {
                      "type": "object",
                      "description": "A set of key-value pairs that contain custom attributes set by the customer.",
                      "additionalProperties": {}
                    },
                    "discoveredAssetRefs": {
                      "type": "array",
                      "description": "Reference to a list of discovered assets. Populated only if the asset has been created from discovery flow. Discovered asset names must be provided.",
                      "items": {
                        "type": "string"
                      },
                      "x-ms-mutability": [
                        "read",
                        "create"
                      ]
                    },
                    "defaultDatasetsConfiguration": {
                      "type": "string",
                      "description": "Stringified JSON that contains connector-specific default configuration for all datasets. Each dataset can have its own configuration that overrides the default settings here."
                    },
                    "defaultEventsConfiguration": {
                      "type": "string",
                      "description": "Stringified JSON that contains connector-specific default configuration for all events. Each event can have its own configuration that overrides the default settings here."
                    },
                    "defaultStreamsConfiguration": {
                      "type": "string",
                      "description": "Stringified JSON that contains connector-specific default configuration for all streams. Each stream can have its own configuration that overrides the default settings here."
                    },
                    "defaultManagementGroupsConfiguration": {
                      "type": "string",
                      "description": "Stringified JSON that contains connector-specific default configuration for all management groups. Each management group can have its own configuration that overrides the default settings here."
                    },
                    "defaultDatasetsDestinations": {
                      "type": "array",
                      "description": "Default destinations for a dataset.",
                      "items": {
                        "type": "object",
                        "description": "The type of the destination.",
                        "properties": {
                          "target": {
                            "description": "Target destination.",
                            "type": "string",
                            "enum": [
                              "Mqtt",
                              "BrokerStateStore",
                              "Storage"
                            ],
                            "x-ms-enum": {
                              "name": "DatasetDestinationTarget",
                              "modelAsString": true,
                              "values": [
                                {
                                  "name": "Mqtt",
                                  "value": "Mqtt",
                                  "description": "MQTT target."
                                },
                                {
                                  "name": "BrokerStateStore",
                                  "value": "BrokerStateStore",
                                  "description": "Broker State Store target."
                                },
                                {
                                  "name": "Storage",
                                  "value": "Storage",
                                  "description": "Storage target."
                                }
                              ]
                            }
                          }
                        },
                        "discriminator": "target",
                        "required": [
                          "target"
                        ]
                      },
                      "x-ms-identifiers": []
                    },
                    "defaultEventsDestinations": {
                      "type": "array",
                      "description": "Default destinations for an event.",
                      "items": {
                        "type": "object",
                        "description": "The type of the destination.",
                        "properties": {
                          "target": {
                            "description": "Target destination.",
                            "type": "string",
                            "enum": [
                              "Mqtt",
                              "Storage"
                            ],
                            "x-ms-enum": {
                              "name": "EventDestinationTarget",
                              "modelAsString": true,
                              "values": [
                                {
                                  "name": "Mqtt",
                                  "value": "Mqtt",
                                  "description": "MQTT target."
                                },
                                {
                                  "name": "Storage",
                                  "value": "Storage",
                                  "description": "Storage target."
                                }
                              ]
                            }
                          }
                        },
                        "discriminator": "target",
                        "required": [
                          "target"
                        ]
                      },
                      "x-ms-identifiers": []
                    },
                    "defaultStreamsDestinations": {
                      "type": "array",
                      "description": "Default destinations for a stream.",
                      "items": {
                        "type": "object",
                        "description": "The type of the destination.",
                        "properties": {
                          "target": {
                            "description": "Target destination.",
                            "type": "string",
                            "enum": [
                              "Mqtt",
                              "Storage"
                            ],
                            "x-ms-enum": {
                              "name": "StreamDestinationTarget",
                              "modelAsString": true,
                              "values": [
                                {
                                  "name": "Mqtt",
                                  "value": "Mqtt",
                                  "description": "MQTT target."
                                },
                                {
                                  "name": "Storage",
                                  "value": "Storage",
                                  "description": "Storage target."
                                }
                              ]
                            }
                          }
                        },
                        "discriminator": "target",
                        "required": [
                          "target"
                        ]
                      },
                      "x-ms-identifiers": []
                    },
                    "datasets": {
                      "type": "array",
                      "description": "Array of datasets that are part of the asset. Each dataset describes the data points that make up the set.",
                      "items": {
                        "type": "object",
                        "description": "Defines the dataset properties.",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "Name of the dataset."
                          },
                          "dataSource": {
                            "type": "string",
                            "description": "Reference to a data source for a given dataset."
                          },
                          "typeRef": {
                            "type": "string",
                            "description": "URI or type definition ID."
                          },
                          "datasetConfiguration": {
                            "type": "string",
                            "description": "Stringified JSON that contains connector-specific JSON string that describes configuration for the specific dataset."
                          },
                          "destinations": {
                            "type": "array",
                            "description": "Destinations for a dataset.",
                            "items": {
                              "type": "object",
                              "description": "The type of the destination.",
                              "properties": {
                                "target": {
                                  "description": "Target destination.",
                                  "type": "string",
                                  "enum": [
                                    "Mqtt",
                                    "BrokerStateStore",
                                    "Storage"
                                  ],
                                  "x-ms-enum": {
                                    "name": "DatasetDestinationTarget",
                                    "modelAsString": true,
                                    "values": [
                                      {
                                        "name": "Mqtt",
                                        "value": "Mqtt",
                                        "description": "MQTT target."
                                      },
                                      {
                                        "name": "BrokerStateStore",
                                        "value": "BrokerStateStore",
                                        "description": "Broker State Store target."
                                      },
                                      {
                                        "name": "Storage",
                                        "value": "Storage",
                                        "description": "Storage target."
                                      }
                                    ]
                                  }
                                }
                              },
                              "discriminator": "target",
                              "required": [
                                "target"
                              ]
                            },
                            "x-ms-identifiers": []
                          },
                          "dataPoints": {
                            "type": "array",
                            "description": "Array of data points that are part of the dataset. Each data point can have per-data point configuration.",
                            "items": {
                              "type": "object",
                              "description": "Defines the dataset data point properties.",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "The name of the data point."
                                },
                                "dataSource": {
                                  "type": "string",
                                  "description": "The address of the source of the data in the asset (e.g. URL) so that a client can access the data source on the asset."
                                },
                                "dataPointConfiguration": {
                                  "type": "string",
                                  "description": "Stringified JSON that contains connector-specific configuration for the data point. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize."
                                },
                                "typeRef": {
                                  "type": "string",
                                  "description": "URI or type definition ID."
                                }
                              },
                              "required": [
                                "name",
                                "dataSource"
                              ]
                            },
                            "x-ms-identifiers": []
                          }
                        },
                        "required": [
                          "name"
                        ]
                      },
                      "x-ms-identifiers": []
                    },
                    "eventGroups": {
                      "type": "array",
                      "description": "Array of event groups that are part of the asset. Each event group can have per-event group configuration.",
                      "items": {
                        "type": "object",
                        "description": "Defines the event group properties.",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "The name of the event group."
                          },
                          "dataSource": {
                            "type": "string",
                            "description": "The address of the notifier of the event group in the asset (e.g. URL) so that a client can access the event group on the asset."
                          },
                          "eventGroupConfiguration": {
                            "type": "string",
                            "description": "Stringified JSON that contains connector-specific configuration for the event group. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize."
                          },
                          "defaultDestinations": {
                            "type": "array",
                            "description": "Destinations for events. Default destinations when destinations is not defined at the event level.",
                            "items": {
                              "type": "object",
                              "description": "The type of the destination.",
                              "properties": {
                                "target": {
                                  "description": "Target destination.",
                                  "type": "string",
                                  "enum": [
                                    "Mqtt",
                                    "Storage"
                                  ],
                                  "x-ms-enum": {
                                    "name": "EventDestinationTarget",
                                    "modelAsString": true,
                                    "values": [
                                      {
                                        "name": "Mqtt",
                                        "value": "Mqtt",
                                        "description": "MQTT target."
                                      },
                                      {
                                        "name": "Storage",
                                        "value": "Storage",
                                        "description": "Storage target."
                                      }
                                    ]
                                  }
                                }
                              },
                              "discriminator": "target",
                              "required": [
                                "target"
                              ]
                            },
                            "x-ms-identifiers": []
                          },
                          "typeRef": {
                            "type": "string",
                            "description": "URI or type definition ID."
                          },
                          "events": {
                            "type": "array",
                            "description": "Array of events that are part of the event group.",
                            "items": {
                              "type": "object",
                              "description": "Defines the event properties.",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "The name of the event."
                                },
                                "dataSource": {
                                  "type": "string",
                                  "description": "Reference to a data source for a given event."
                                },
                                "eventConfiguration": {
                                  "type": "string",
                                  "description": "Stringified JSON that contains connector-specific configuration for the event. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize."
                                },
                                "destinations": {
                                  "type": "array",
                                  "description": "Destinations for an event.",
                                  "items": {
                                    "type": "object",
                                    "description": "The type of the destination.",
                                    "properties": {
                                      "target": {
                                        "description": "Target destination.",
                                        "type": "string",
                                        "enum": [
                                          "Mqtt",
                                          "Storage"
                                        ],
                                        "x-ms-enum": {
                                          "name": "EventDestinationTarget",
                                          "modelAsString": true,
                                          "values": [
                                            {
                                              "name": "Mqtt",
                                              "value": "Mqtt",
                                              "description": "MQTT target."
                                            },
                                            {
                                              "name": "Storage",
                                              "value": "Storage",
                                              "description": "Storage target."
                                            }
                                          ]
                                        }
                                      }
                                    },
                                    "discriminator": "target",
                                    "required": [
                                      "target"
                                    ]
                                  },
                                  "x-ms-identifiers": []
                                },
                                "typeRef": {
                                  "type": "string",
                                  "description": "URI or type definition ID."
                                }
                              },
                              "required": [
                                "name"
                              ]
                            },
                            "x-ms-identifiers": []
                          }
                        },
                        "required": [
                          "name"
                        ]
                      },
                      "x-ms-identifiers": []
                    },
                    "streams": {
                      "type": "array",
                      "description": "Array of streams that are part of the asset. Each stream can have a per-stream configuration.",
                      "items": {
                        "type": "object",
                        "description": "Defines the stream properties.",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "Name of the stream definition."
                          },
                          "streamConfiguration": {
                            "type": "string",
                            "description": "Stringified JSON that contains connector-specific configuration for the specific stream."
                          },
                          "typeRef": {
                            "type": "string",
                            "description": "URI or type definition ID."
                          },
                          "destinations": {
                            "type": "array",
                            "description": "Destinations for a stream.",
                            "items": {
                              "type": "object",
                              "description": "The type of the destination.",
                              "properties": {
                                "target": {
                                  "description": "Target destination.",
                                  "type": "string",
                                  "enum": [
                                    "Mqtt",
                                    "Storage"
                                  ],
                                  "x-ms-enum": {
                                    "name": "StreamDestinationTarget",
                                    "modelAsString": true,
                                    "values": [
                                      {
                                        "name": "Mqtt",
                                        "value": "Mqtt",
                                        "description": "MQTT target."
                                      },
                                      {
                                        "name": "Storage",
                                        "value": "Storage",
                                        "description": "Storage target."
                                      }
                                    ]
                                  }
                                }
                              },
                              "discriminator": "target",
                              "required": [
                                "target"
                              ]
                            },
                            "x-ms-identifiers": []
                          }
                        },
                        "required": [
                          "name"
                        ]
                      },
                      "x-ms-identifiers": []
                    },
                    "managementGroups": {
                      "type": "array",
                      "description": "Array of management groups that are part of the asset. Each management group can have a per-group configuration.",
                      "items": {
                        "type": "object",
                        "description": "Defines the management group properties.",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "Name of the management group."
                          },
                          "dataSource": {
                            "type": "string",
                            "description": "Reference to a data source for a given management group."
                          },
                          "managementGroupConfiguration": {
                            "type": "string",
                            "description": "Stringified JSON that contains connector-specific configuration for the management group."
                          },
                          "typeRef": {
                            "type": "string",
                            "description": "URI or type definition ID."
                          },
                          "defaultTopic": {
                            "type": "string",
                            "description": "Default MQTT topic path on which a client will receive the request for all actions that are part of the management group."
                          },
                          "defaultTimeoutInSeconds": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Default response timeout for all actions that are part of the management group.",
                            "default": 100
                          },
                          "actions": {
                            "type": "array",
                            "description": "Array of actions that are part of the management group. Each action can have an individual configuration.",
                            "items": {
                              "type": "object",
                              "description": "Defines the action properties.",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "Name of the action."
                                },
                                "actionConfiguration": {
                                  "type": "string",
                                  "description": "Stringified JSON that contains connector-specific configuration for the action."
                                },
                                "targetUri": {
                                  "type": "string",
                                  "description": "The target URI on which a client can invoke the specific action."
                                },
                                "typeRef": {
                                  "type": "string",
                                  "description": "URI or type definition ID."
                                },
                                "topic": {
                                  "type": "string",
                                  "description": "The MQTT topic path on which a client will receive the request for the action."
                                },
                                "actionType": {
                                  "type": "string",
                                  "description": "The type of the action.",
                                  "default": "Call",
                                  "enum": [
                                    "Call",
                                    "Read",
                                    "Write"
                                  ],
                                  "x-ms-enum": {
                                    "name": "ManagementActionType",
                                    "modelAsString": true,
                                    "values": [
                                      {
                                        "name": "Call",
                                        "value": "Call",
                                        "description": "Call action type."
                                      },
                                      {
                                        "name": "Read",
                                        "value": "Read",
                                        "description": "Read action type."
                                      },
                                      {
                                        "name": "Write",
                                        "value": "Write",
                                        "description": "Write action type."
                                      }
                                    ]
                                  }
                                },
                                "timeoutInSeconds": {
                                  "type": "integer",
                                  "format": "int32",
                                  "description": "Response timeout for the action."
                                }
                              },
                              "required": [
                                "name",
                                "targetUri"
                              ]
                            },
                            "x-ms-identifiers": []
                          }
                        },
                        "required": [
                          "name"
                        ]
                      },
                      "x-ms-identifiers": []
                    },
                    "status": {
                      "description": "Read only object to reflect changes that have occurred on the Edge. Similar to Kubernetes status property for custom resources.",
                      "readOnly": true,
                      "type": "object",
                      "properties": {
                        "config": {
                          "description": "Defines the asset status config properties.",
                          "readOnly": true,
                          "type": "object",
                          "properties": {
                            "version": {
                              "type": "integer",
                              "format": "int64",
                              "description": "A read-only incremental counter indicating the number of times the configuration has been modified from the perspective of the current actual (edge) state of the CRD. Edge would be the only writer of this value and would sync back up to the cloud. In steady state, this should equal version.",
                              "readOnly": true
                            },
                            "lastTransitionTime": {
                              "type": "string",
                              "format": "date-time",
                              "description": "A read-only timestamp indicating the last time the configuration has been modified from the perspective of the current actual (edge) state of the CRD. Edge would be the only writer of this value and would sync back up to the cloud.",
                              "readOnly": true
                            },
                            "error": {
                              "description": "Object to transfer and persist errors that originate from the edge.",
                              "readOnly": true,
                              "type": "object",
                              "properties": {
                                "code": {
                                  "type": "string",
                                  "description": "Error code for classification of errors (ex: '400', '404', '500', etc.).",
                                  "readOnly": true
                                },
                                "message": {
                                  "type": "string",
                                  "description": "Human-readable helpful error message to provide additional context for error (e.g.,: “Capability ID 'foo' does not exist”).",
                                  "readOnly": true
                                },
                                "details": {
                                  "type": "array",
                                  "description": "Array of error details that describe the status of each error.",
                                  "items": {
                                    "type": "object",
                                    "description": "Defines the error details properties.",
                                    "properties": {
                                      "code": {
                                        "type": "string",
                                        "description": "Multi-part error code for classification and root causing of errors (ex: 400.200.100.432).",
                                        "readOnly": true
                                      },
                                      "message": {
                                        "type": "string",
                                        "description": "Human-readable helpful error message to provide additional context for error (ex: “Authentication method not supported”).",
                                        "readOnly": true
                                      },
                                      "info": {
                                        "type": "string",
                                        "description": "Human-readable helpful detailed text context for debugging (ex: “The following mechanisms are supported...”).",
                                        "readOnly": true
                                      },
                                      "correlationId": {
                                        "type": "string",
                                        "description": "Unique identifier for the transaction to aid in debugging.",
                                        "readOnly": true
                                      }
                                    }
                                  },
                                  "readOnly": true,
                                  "x-ms-identifiers": []
                                }
                              }
                            }
                          }
                        },
                        "datasets": {
                          "type": "array",
                          "description": "Array of dataset statuses that describe the status of each dataset.",
                          "items": {
                            "type": "object",
                            "description": "Defines the asset status dataset properties.",
                            "properties": {
                              "name": {
                                "type": "string",
                                "description": "The name of the dataset. Must be unique within the status.datasets array. This name is used to correlate between the spec and status dataset information.",
                                "readOnly": true
                              },
                              "messageSchemaReference": {
                                "description": "The message schema reference object.",
                                "readOnly": true,
                                "type": "object",
                                "properties": {
                                  "schemaRegistryNamespace": {
                                    "type": "string",
                                    "description": "The message schema registry namespace.",
                                    "readOnly": true
                                  },
                                  "schemaName": {
                                    "type": "string",
                                    "description": "The message schema name.",
                                    "readOnly": true
                                  },
                                  "schemaVersion": {
                                    "type": "string",
                                    "description": "The message schema version.",
                                    "readOnly": true
                                  }
                                },
                                "required": [
                                  "schemaRegistryNamespace",
                                  "schemaName",
                                  "schemaVersion"
                                ]
                              },
                              "error": {
                                "description": "Object to transfer and persist errors that originate from the edge.",
                                "readOnly": true,
                                "type": "object",
                                "properties": {
                                  "code": {
                                    "type": "string",
                                    "description": "Error code for classification of errors (ex: '400', '404', '500', etc.).",
                                    "readOnly": true
                                  },
                                  "message": {
                                    "type": "string",
                                    "description": "Human-readable helpful error message to provide additional context for error (e.g.,: “Capability ID 'foo' does not exist”).",
                                    "readOnly": true
                                  },
                                  "details": {
                                    "type": "array",
                                    "description": "Array of error details that describe the status of each error.",
                                    "items": {
                                      "type": "object",
                                      "description": "Defines the error details properties.",
                                      "properties": {
                                        "code": {
                                          "type": "string",
                                          "description": "Multi-part error code for classification and root causing of errors (ex: 400.200.100.432).",
                                          "readOnly": true
                                        },
                                        "message": {
                                          "type": "string",
                                          "description": "Human-readable helpful error message to provide additional context for error (ex: “Authentication method not supported”).",
                                          "readOnly": true
                                        },
                                        "info": {
                                          "type": "string",
                                          "description": "Human-readable helpful detailed text context for debugging (ex: “The following mechanisms are supported...”).",
                                          "readOnly": true
                                        },
                                        "correlationId": {
                                          "type": "string",
                                          "description": "Unique identifier for the transaction to aid in debugging.",
                                          "readOnly": true
                                        }
                                      }
                                    },
                                    "readOnly": true,
                                    "x-ms-identifiers": []
                                  }
                                }
                              }
                            },
                            "required": [
                              "name"
                            ]
                          },
                          "readOnly": true,
                          "x-ms-identifiers": []
                        },
                        "eventGroups": {
                          "type": "array",
                          "description": "Array of event group statuses that describe the status of each event group.",
                          "items": {
                            "type": "object",
                            "description": "Defines the asset status event group properties.",
                            "properties": {
                              "name": {
                                "type": "string",
                                "description": "The name of the event group. Must be unique within the status.eventGroups array. This name is used to correlate between the spec and status event group information.",
                                "readOnly": true
                              },
                              "events": {
                                "type": "array",
                                "description": "Array of event statuses that describe the status of each event in the event group.",
                                "items": {
                                  "type": "object",
                                  "description": "Defines the asset status event properties.",
                                  "properties": {
                                    "name": {
                                      "type": "string",
                                      "description": "The name of the event. Must be unique within the status.events array. This name is used to correlate between the spec and status event information.",
                                      "readOnly": true
                                    },
                                    "messageSchemaReference": {
                                      "description": "The message schema reference object.",
                                      "readOnly": true,
                                      "type": "object",
                                      "properties": {
                                        "schemaRegistryNamespace": {
                                          "type": "string",
                                          "description": "The message schema registry namespace.",
                                          "readOnly": true
                                        },
                                        "schemaName": {
                                          "type": "string",
                                          "description": "The message schema name.",
                                          "readOnly": true
                                        },
                                        "schemaVersion": {
                                          "type": "string",
                                          "description": "The message schema version.",
                                          "readOnly": true
                                        }
                                      },
                                      "required": [
                                        "schemaRegistryNamespace",
                                        "schemaName",
                                        "schemaVersion"
                                      ]
                                    },
                                    "error": {
                                      "description": "Object to transfer and persist errors that originate from the edge.",
                                      "readOnly": true,
                                      "type": "object",
                                      "properties": {
                                        "code": {
                                          "type": "string",
                                          "description": "Error code for classification of errors (ex: '400', '404', '500', etc.).",
                                          "readOnly": true
                                        },
                                        "message": {
                                          "type": "string",
                                          "description": "Human-readable helpful error message to provide additional context for error (e.g.,: “Capability ID 'foo' does not exist”).",
                                          "readOnly": true
                                        },
                                        "details": {
                                          "type": "array",
                                          "description": "Array of error details that describe the status of each error.",
                                          "items": {
                                            "type": "object",
                                            "description": "Defines the error details properties.",
                                            "properties": {
                                              "code": {
                                                "type": "string",
                                                "description": "Multi-part error code for classification and root causing of errors (ex: 400.200.100.432).",
                                                "readOnly": true
                                              },
                                              "message": {
                                                "type": "string",
                                                "description": "Human-readable helpful error message to provide additional context for error (ex: “Authentication method not supported”).",
                                                "readOnly": true
                                              },
                                              "info": {
                                                "type": "string",
                                                "description": "Human-readable helpful detailed text context for debugging (ex: “The following mechanisms are supported...”).",
                                                "readOnly": true
                                              },
                                              "correlationId": {
                                                "type": "string",
                                                "description": "Unique identifier for the transaction to aid in debugging.",
                                                "readOnly": true
                                              }
                                            }
                                          },
                                          "readOnly": true,
                                          "x-ms-identifiers": []
                                        }
                                      }
                                    }
                                  },
                                  "required": [
                                    "name"
                                  ]
                                },
                                "readOnly": true,
                                "x-ms-identifiers": []
                              }
                            },
                            "required": [
                              "name"
                            ]
                          },
                          "readOnly": true,
                          "x-ms-identifiers": []
                        },
                        "streams": {
                          "type": "array",
                          "description": "Array of stream statuses that describe the status of each stream.",
                          "items": {
                            "type": "object",
                            "description": "Defines the asset status stream properties.",
                            "properties": {
                              "name": {
                                "type": "string",
                                "description": "The name of the stream. Must be unique within the status.streams array. This name is used to correlate between the spec and status event information.",
                                "readOnly": true
                              },
                              "messageSchemaReference": {
                                "description": "The message schema reference object.",
                                "readOnly": true,
                                "type": "object",
                                "properties": {
                                  "schemaRegistryNamespace": {
                                    "type": "string",
                                    "description": "The message schema registry namespace.",
                                    "readOnly": true
                                  },
                                  "schemaName": {
                                    "type": "string",
                                    "description": "The message schema name.",
                                    "readOnly": true
                                  },
                                  "schemaVersion": {
                                    "type": "string",
                                    "description": "The message schema version.",
                                    "readOnly": true
                                  }
                                },
                                "required": [
                                  "schemaRegistryNamespace",
                                  "schemaName",
                                  "schemaVersion"
                                ]
                              },
                              "error": {
                                "description": "Object to transfer and persist errors that originate from the edge.",
                                "readOnly": true,
                                "type": "object",
                                "properties": {
                                  "code": {
                                    "type": "string",
                                    "description": "Error code for classification of errors (ex: '400', '404', '500', etc.).",
                                    "readOnly": true
                                  },
                                  "message": {
                                    "type": "string",
                                    "description": "Human-readable helpful error message to provide additional context for error (e.g.,: “Capability ID 'foo' does not exist”).",
                                    "readOnly": true
                                  },
                                  "details": {
                                    "type": "array",
                                    "description": "Array of error details that describe the status of each error.",
                                    "items": {
                                      "type": "object",
                                      "description": "Defines the error details properties.",
                                      "properties": {
                                        "code": {
                                          "type": "string",
                                          "description": "Multi-part error code for classification and root causing of errors (ex: 400.200.100.432).",
                                          "readOnly": true
                                        },
                                        "message": {
                                          "type": "string",
                                          "description": "Human-readable helpful error message to provide additional context for error (ex: “Authentication method not supported”).",
                                          "readOnly": true
                                        },
                                        "info": {
                                          "type": "string",
                                          "description": "Human-readable helpful detailed text context for debugging (ex: “The following mechanisms are supported...”).",
                                          "readOnly": true
                                        },
                                        "correlationId": {
                                          "type": "string",
                                          "description": "Unique identifier for the transaction to aid in debugging.",
                                          "readOnly": true
                                        }
                                      }
                                    },
                                    "readOnly": true,
                                    "x-ms-identifiers": []
                                  }
                                }
                              }
                            },
                            "required": [
                              "name"
                            ]
                          },
                          "readOnly": true,
                          "x-ms-identifiers": []
                        },
                        "managementGroups": {
                          "type": "array",
                          "description": "Array of management group statuses that describe the status of each management group.",
                          "items": {
                            "type": "object",
                            "description": "Defines the asset status management group properties.",
                            "properties": {
                              "name": {
                                "type": "string",
                                "description": "The name of the management group. Must be unique within the status.managementGroups array. This name is used to correlate between the spec and status event information.",
                                "readOnly": true
                              },
                              "actions": {
                                "type": "array",
                                "description": "Array of action statuses that describe the status of each action.",
                                "items": {
                                  "type": "object",
                                  "description": "Defines the asset status action properties.",
                                  "properties": {
                                    "name": {
                                      "type": "string",
                                      "description": "The name of the action. Must be unique within the status.actions array. This name is used to correlate between the spec and status event information.",
                                      "readOnly": true
                                    },
                                    "requestMessageSchemaReference": {
                                      "description": "The request message schema reference object for the action.",
                                      "readOnly": true,
                                      "type": "object",
                                      "properties": {
                                        "schemaRegistryNamespace": {
                                          "type": "string",
                                          "description": "The message schema registry namespace.",
                                          "readOnly": true
                                        },
                                        "schemaName": {
                                          "type": "string",
                                          "description": "The message schema name.",
                                          "readOnly": true
                                        },
                                        "schemaVersion": {
                                          "type": "string",
                                          "description": "The message schema version.",
                                          "readOnly": true
                                        }
                                      },
                                      "required": [
                                        "schemaRegistryNamespace",
                                        "schemaName",
                                        "schemaVersion"
                                      ]
                                    },
                                    "responseMessageSchemaReference": {
                                      "description": "The response message schema reference object for the action.",
                                      "readOnly": true,
                                      "type": "object",
                                      "properties": {
                                        "schemaRegistryNamespace": {
                                          "type": "string",
                                          "description": "The message schema registry namespace.",
                                          "readOnly": true
                                        },
                                        "schemaName": {
                                          "type": "string",
                                          "description": "The message schema name.",
                                          "readOnly": true
                                        },
                                        "schemaVersion": {
                                          "type": "string",
                                          "description": "The message schema version.",
                                          "readOnly": true
                                        }
                                      },
                                      "required": [
                                        "schemaRegistryNamespace",
                                        "schemaName",
                                        "schemaVersion"
                                      ]
                                    },
                                    "error": {
                                      "description": "Object to transfer and persist errors that originate from the edge.",
                                      "readOnly": true,
                                      "type": "object",
                                      "properties": {
                                        "code": {
                                          "type": "string",
                                          "description": "Error code for classification of errors (ex: '400', '404', '500', etc.).",
                                          "readOnly": true
                                        },
                                        "message": {
                                          "type": "string",
                                          "description": "Human-readable helpful error message to provide additional context for error (e.g.,: “Capability ID 'foo' does not exist”).",
                                          "readOnly": true
                                        },
                                        "details": {
                                          "type": "array",
                                          "description": "Array of error details that describe the status of each error.",
                                          "items": {
                                            "type": "object",
                                            "description": "Defines the error details properties.",
                                            "properties": {
                                              "code": {
                                                "type": "string",
                                                "description": "Multi-part error code for classification and root causing of errors (ex: 400.200.100.432).",
                                                "readOnly": true
                                              },
                                              "message": {
                                                "type": "string",
                                                "description": "Human-readable helpful error message to provide additional context for error (ex: “Authentication method not supported”).",
                                                "readOnly": true
                                              },
                                              "info": {
                                                "type": "string",
                                                "description": "Human-readable helpful detailed text context for debugging (ex: “The following mechanisms are supported...”).",
                                                "readOnly": true
                                              },
                                              "correlationId": {
                                                "type": "string",
                                                "description": "Unique identifier for the transaction to aid in debugging.",
                                                "readOnly": true
                                              }
                                            }
                                          },
                                          "readOnly": true,
                                          "x-ms-identifiers": []
                                        }
                                      }
                                    }
                                  },
                                  "required": [
                                    "name"
                                  ]
                                },
                                "readOnly": true,
                                "x-ms-identifiers": []
                              }
                            },
                            "required": [
                              "name"
                            ]
                          },
                          "readOnly": true,
                          "x-ms-identifiers": []
                        }
                      }
                    },
                    "provisioningState": {
                      "description": "Provisioning state of the resource.",
                      "readOnly": true,
                      "type": "string",
                      "enum": [
                        "Succeeded",
                        "Failed",
                        "Canceled",
                        "Accepted",
                        "Deleting"
                      ],
                      "x-ms-enum": {
                        "name": "ProvisioningState",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Succeeded",
                            "value": "Succeeded",
                            "description": "Resource has been created."
                          },
                          {
                            "name": "Failed",
                            "value": "Failed",
                            "description": "Resource creation failed."
                          },
                          {
                            "name": "Canceled",
                            "value": "Canceled",
                            "description": "Resource creation was canceled."
                          },
                          {
                            "name": "Accepted",
                            "value": "Accepted",
                            "description": "Resource has been accepted by the server."
                          },
                          {
                            "name": "Deleting",
                            "value": "Deleting",
                            "description": "Resource is deleting."
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "deviceRef"
                  ]
                },
                "extendedLocation": {
                  "description": "The extended location.",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ],
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "description": "The extended location type."
                    },
                    "name": {
                      "type": "string",
                      "description": "The extended location name."
                    }
                  },
                  "required": [
                    "type",
                    "name"
                  ]
                }
              },
              "required": [
                "extendedLocation"
              ]
            },
            "headers": {
              "Azure-AsyncOperation": {
                "type": "string",
                "description": "A link to the status monitor"
              },
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "NamespaceAssets_Update",
        "tags": [
          "NamespaceAssets"
        ],
        "description": "Update a NamespaceAsset",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription. The value must be an UUID.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group. The name is case insensitive.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "x-ms-parameter-location": "method"
          },
          {
            "name": "namespaceName",
            "in": "path",
            "description": "The name of the namespace.",
            "required": true,
            "type": "string",
            "minLength": 3,
            "maxLength": 64,
            "pattern": "^[a-z0-9][a-z0-9-]*[a-z0-9]$"
          },
          {
            "name": "assetName",
            "in": "path",
            "description": "The name of the asset.",
            "required": true,
            "type": "string",
            "minLength": 3,
            "maxLength": 63,
            "pattern": "^[a-z0-9][a-z0-9-]*[a-z0-9]$"
          },
          {
            "name": "properties",
            "in": "body",
            "description": "The resource properties to be updated.",
            "required": true,
            "schema": {
              "type": "object",
              "description": "The type used for update operations of the NamespaceAsset.",
              "properties": {
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "enabled": {
                      "type": "boolean",
                      "description": "Enabled/disabled status of the asset."
                    },
                    "displayName": {
                      "type": "string",
                      "description": "Human-readable display name."
                    },
                    "description": {
                      "type": "string",
                      "description": "Human-readable description of the asset."
                    },
                    "assetTypeRefs": {
                      "type": "array",
                      "description": "URIs or type definition IDs.",
                      "items": {
                        "type": "string"
                      }
                    },
                    "manufacturer": {
                      "type": "string",
                      "description": "Asset manufacturer."
                    },
                    "manufacturerUri": {
                      "type": "string",
                      "description": "Asset manufacturer URI."
                    },
                    "model": {
                      "type": "string",
                      "description": "Asset model."
                    },
                    "productCode": {
                      "type": "string",
                      "description": "Asset product code."
                    },
                    "hardwareRevision": {
                      "type": "string",
                      "description": "Asset hardware revision number."
                    },
                    "softwareRevision": {
                      "type": "string",
                      "description": "Asset software revision number."
                    },
                    "documentationUri": {
                      "type": "string",
                      "description": "Asset documentation reference."
                    },
                    "serialNumber": {
                      "type": "string",
                      "description": "Asset serial number."
                    },
                    "attributes": {
                      "type": "object",
                      "description": "A set of key-value pairs that contain custom attributes set by the customer.",
                      "additionalProperties": {}
                    },
                    "defaultDatasetsConfiguration": {
                      "type": "string",
                      "description": "Stringified JSON that contains connector-specific default configuration for all datasets. Each dataset can have its own configuration that overrides the default settings here."
                    },
                    "defaultEventsConfiguration": {
                      "type": "string",
                      "description": "Stringified JSON that contains connector-specific default configuration for all events. Each event can have its own configuration that overrides the default settings here."
                    },
                    "defaultStreamsConfiguration": {
                      "type": "string",
                      "description": "Stringified JSON that contains connector-specific default configuration for all streams. Each stream can have its own configuration that overrides the default settings here."
                    },
                    "defaultManagementGroupsConfiguration": {
                      "type": "string",
                      "description": "Stringified JSON that contains connector-specific default configuration for all management groups. Each management group can have its own configuration that overrides the default settings here."
                    },
                    "defaultDatasetsDestinations": {
                      "type": "array",
                      "description": "Default destinations for a dataset.",
                      "items": {
                        "type": "object",
                        "description": "The type of the destination.",
                        "properties": {
                          "target": {
                            "description": "Target destination.",
                            "type": "string",
                            "enum": [
                              "Mqtt",
                              "BrokerStateStore",
                              "Storage"
                            ],
                            "x-ms-enum": {
                              "name": "DatasetDestinationTarget",
                              "modelAsString": true,
                              "values": [
                                {
                                  "name": "Mqtt",
                                  "value": "Mqtt",
                                  "description": "MQTT target."
                                },
                                {
                                  "name": "BrokerStateStore",
                                  "value": "BrokerStateStore",
                                  "description": "Broker State Store target."
                                },
                                {
                                  "name": "Storage",
                                  "value": "Storage",
                                  "description": "Storage target."
                                }
                              ]
                            }
                          }
                        },
                        "discriminator": "target",
                        "required": [
                          "target"
                        ]
                      },
                      "x-ms-identifiers": []
                    },
                    "defaultEventsDestinations": {
                      "type": "array",
                      "description": "Default destinations for an event.",
                      "items": {
                        "type": "object",
                        "description": "The type of the destination.",
                        "properties": {
                          "target": {
                            "description": "Target destination.",
                            "type": "string",
                            "enum": [
                              "Mqtt",
                              "Storage"
                            ],
                            "x-ms-enum": {
                              "name": "EventDestinationTarget",
                              "modelAsString": true,
                              "values": [
                                {
                                  "name": "Mqtt",
                                  "value": "Mqtt",
                                  "description": "MQTT target."
                                },
                                {
                                  "name": "Storage",
                                  "value": "Storage",
                                  "description": "Storage target."
                                }
                              ]
                            }
                          }
                        },
                        "discriminator": "target",
                        "required": [
                          "target"
                        ]
                      },
                      "x-ms-identifiers": []
                    },
                    "defaultStreamsDestinations": {
                      "type": "array",
                      "description": "Default destinations for a stream.",
                      "items": {
                        "type": "object",
                        "description": "The type of the destination.",
                        "properties": {
                          "target": {
                            "description": "Target destination.",
                            "type": "string",
                            "enum": [
                              "Mqtt",
                              "Storage"
                            ],
                            "x-ms-enum": {
                              "name": "StreamDestinationTarget",
                              "modelAsString": true,
                              "values": [
                                {
                                  "name": "Mqtt",
                                  "value": "Mqtt",
                                  "description": "MQTT target."
                                },
                                {
                                  "name": "Storage",
                                  "value": "Storage",
                                  "description": "Storage target."
                                }
                              ]
                            }
                          }
                        },
                        "discriminator": "target",
                        "required": [
                          "target"
                        ]
                      },
                      "x-ms-identifiers": []
                    },
                    "datasets": {
                      "type": "array",
                      "description": "Array of datasets that are part of the asset. Each dataset describes the data points that make up the set.",
                      "items": {
                        "type": "object",
                        "description": "Defines the dataset properties.",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "Name of the dataset."
                          },
                          "dataSource": {
                            "type": "string",
                            "description": "Reference to a data source for a given dataset."
                          },
                          "typeRef": {
                            "type": "string",
                            "description": "URI or type definition ID."
                          },
                          "datasetConfiguration": {
                            "type": "string",
                            "description": "Stringified JSON that contains connector-specific JSON string that describes configuration for the specific dataset."
                          },
                          "destinations": {
                            "type": "array",
                            "description": "Destinations for a dataset.",
                            "items": {
                              "type": "object",
                              "description": "The type of the destination.",
                              "properties": {
                                "target": {
                                  "description": "Target destination.",
                                  "type": "string",
                                  "enum": [
                                    "Mqtt",
                                    "BrokerStateStore",
                                    "Storage"
                                  ],
                                  "x-ms-enum": {
                                    "name": "DatasetDestinationTarget",
                                    "modelAsString": true,
                                    "values": [
                                      {
                                        "name": "Mqtt",
                                        "value": "Mqtt",
                                        "description": "MQTT target."
                                      },
                                      {
                                        "name": "BrokerStateStore",
                                        "value": "BrokerStateStore",
                                        "description": "Broker State Store target."
                                      },
                                      {
                                        "name": "Storage",
                                        "value": "Storage",
                                        "description": "Storage target."
                                      }
                                    ]
                                  }
                                }
                              },
                              "discriminator": "target",
                              "required": [
                                "target"
                              ]
                            },
                            "x-ms-identifiers": []
                          },
                          "dataPoints": {
                            "type": "array",
                            "description": "Array of data points that are part of the dataset. Each data point can have per-data point configuration.",
                            "items": {
                              "type": "object",
                              "description": "Defines the dataset data point properties.",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "The name of the data point."
                                },
                                "dataSource": {
                                  "type": "string",
                                  "description": "The address of the source of the data in the asset (e.g. URL) so that a client can access the data source on the asset."
                                },
                                "dataPointConfiguration": {
                                  "type": "string",
                                  "description": "Stringified JSON that contains connector-specific configuration for the data point. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize."
                                },
                                "typeRef": {
                                  "type": "string",
                                  "description": "URI or type definition ID."
                                }
                              },
                              "required": [
                                "name",
                                "dataSource"
                              ]
                            },
                            "x-ms-identifiers": []
                          }
                        },
                        "required": [
                          "name"
                        ]
                      },
                      "x-ms-identifiers": []
                    },
                    "eventGroups": {
                      "type": "array",
                      "description": "Array of event groups that are part of the asset. Each event group can have per-event group configuration.",
                      "items": {
                        "type": "object",
                        "description": "Defines the event group properties.",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "The name of the event group."
                          },
                          "dataSource": {
                            "type": "string",
                            "description": "The address of the notifier of the event group in the asset (e.g. URL) so that a client can access the event group on the asset."
                          },
                          "eventGroupConfiguration": {
                            "type": "string",
                            "description": "Stringified JSON that contains connector-specific configuration for the event group. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize."
                          },
                          "defaultDestinations": {
                            "type": "array",
                            "description": "Destinations for events. Default destinations when destinations is not defined at the event level.",
                            "items": {
                              "type": "object",
                              "description": "The type of the destination.",
                              "properties": {
                                "target": {
                                  "description": "Target destination.",
                                  "type": "string",
                                  "enum": [
                                    "Mqtt",
                                    "Storage"
                                  ],
                                  "x-ms-enum": {
                                    "name": "EventDestinationTarget",
                                    "modelAsString": true,
                                    "values": [
                                      {
                                        "name": "Mqtt",
                                        "value": "Mqtt",
                                        "description": "MQTT target."
                                      },
                                      {
                                        "name": "Storage",
                                        "value": "Storage",
                                        "description": "Storage target."
                                      }
                                    ]
                                  }
                                }
                              },
                              "discriminator": "target",
                              "required": [
                                "target"
                              ]
                            },
                            "x-ms-identifiers": []
                          },
                          "typeRef": {
                            "type": "string",
                            "description": "URI or type definition ID."
                          },
                          "events": {
                            "type": "array",
                            "description": "Array of events that are part of the event group.",
                            "items": {
                              "type": "object",
                              "description": "Defines the event properties.",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "The name of the event."
                                },
                                "dataSource": {
                                  "type": "string",
                                  "description": "Reference to a data source for a given event."
                                },
                                "eventConfiguration": {
                                  "type": "string",
                                  "description": "Stringified JSON that contains connector-specific configuration for the event. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize."
                                },
                                "destinations": {
                                  "type": "array",
                                  "description": "Destinations for an event.",
                                  "items": {
                                    "type": "object",
                                    "description": "The type of the destination.",
                                    "properties": {
                                      "target": {
                                        "description": "Target destination.",
                                        "type": "string",
                                        "enum": [
                                          "Mqtt",
                                          "Storage"
                                        ],
                                        "x-ms-enum": {
                                          "name": "EventDestinationTarget",
                                          "modelAsString": true,
                                          "values": [
                                            {
                                              "name": "Mqtt",
                                              "value": "Mqtt",
                                              "description": "MQTT target."
                                            },
                                            {
                                              "name": "Storage",
                                              "value": "Storage",
                                              "description": "Storage target."
                                            }
                                          ]
                                        }
                                      }
                                    },
                                    "discriminator": "target",
                                    "required": [
                                      "target"
                                    ]
                                  },
                                  "x-ms-identifiers": []
                                },
                                "typeRef": {
                                  "type": "string",
                                  "description": "URI or type definition ID."
                                }
                              },
                              "required": [
                                "name"
                              ]
                            },
                            "x-ms-identifiers": []
                          }
                        },
                        "required": [
                          "name"
                        ]
                      },
                      "x-ms-identifiers": []
                    },
                    "streams": {
                      "type": "array",
                      "description": "Array of streams that are part of the asset. Each stream can have a per-stream configuration.",
                      "items": {
                        "type": "object",
                        "description": "Defines the stream properties.",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "Name of the stream definition."
                          },
                          "streamConfiguration": {
                            "type": "string",
                            "description": "Stringified JSON that contains connector-specific configuration for the specific stream."
                          },
                          "typeRef": {
                            "type": "string",
                            "description": "URI or type definition ID."
                          },
                          "destinations": {
                            "type": "array",
                            "description": "Destinations for a stream.",
                            "items": {
                              "type": "object",
                              "description": "The type of the destination.",
                              "properties": {
                                "target": {
                                  "description": "Target destination.",
                                  "type": "string",
                                  "enum": [
                                    "Mqtt",
                                    "Storage"
                                  ],
                                  "x-ms-enum": {
                                    "name": "StreamDestinationTarget",
                                    "modelAsString": true,
                                    "values": [
                                      {
                                        "name": "Mqtt",
                                        "value": "Mqtt",
                                        "description": "MQTT target."
                                      },
                                      {
                                        "name": "Storage",
                                        "value": "Storage",
                                        "description": "Storage target."
                                      }
                                    ]
                                  }
                                }
                              },
                              "discriminator": "target",
                              "required": [
                                "target"
                              ]
                            },
                            "x-ms-identifiers": []
                          }
                        },
                        "required": [
                          "name"
                        ]
                      },
                      "x-ms-identifiers": []
                    },
                    "managementGroups": {
                      "type": "array",
                      "description": "Array of management groups that are part of the asset. Each management group can have a per-group configuration.",
                      "items": {
                        "type": "object",
                        "description": "Defines the management group properties.",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "Name of the management group."
                          },
                          "dataSource": {
                            "type": "string",
                            "description": "Reference to a data source for a given management group."
                          },
                          "managementGroupConfiguration": {
                            "type": "string",
                            "description": "Stringified JSON that contains connector-specific configuration for the management group."
                          },
                          "typeRef": {
                            "type": "string",
                            "description": "URI or type definition ID."
                          },
                          "defaultTopic": {
                            "type": "string",
                            "description": "Default MQTT topic path on which a client will receive the request for all actions that are part of the management group."
                          },
                          "defaultTimeoutInSeconds": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Default response timeout for all actions that are part of the management group.",
                            "default": 100
                          },
                          "actions": {
                            "type": "array",
                            "description": "Array of actions that are part of the management group. Each action can have an individual configuration.",
                            "items": {
                              "type": "object",
                              "description": "Defines the action properties.",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "Name of the action."
                                },
                                "actionConfiguration": {
                                  "type": "string",
                                  "description": "Stringified JSON that contains connector-specific configuration for the action."
                                },
                                "targetUri": {
                                  "type": "string",
                                  "description": "The target URI on which a client can invoke the specific action."
                                },
                                "typeRef": {
                                  "type": "string",
                                  "description": "URI or type definition ID."
                                },
                                "topic": {
                                  "type": "string",
                                  "description": "The MQTT topic path on which a client will receive the request for the action."
                                },
                                "actionType": {
                                  "type": "string",
                                  "description": "The type of the action.",
                                  "default": "Call",
                                  "enum": [
                                    "Call",
                                    "Read",
                                    "Write"
                                  ],
                                  "x-ms-enum": {
                                    "name": "ManagementActionType",
                                    "modelAsString": true,
                                    "values": [
                                      {
                                        "name": "Call",
                                        "value": "Call",
                                        "description": "Call action type."
                                      },
                                      {
                                        "name": "Read",
                                        "value": "Read",
                                        "description": "Read action type."
                                      },
                                      {
                                        "name": "Write",
                                        "value": "Write",
                                        "description": "Write action type."
                                      }
                                    ]
                                  }
                                },
                                "timeoutInSeconds": {
                                  "type": "integer",
                                  "format": "int32",
                                  "description": "Response timeout for the action."
                                }
                              },
                              "required": [
                                "name",
                                "targetUri"
                              ]
                            },
                            "x-ms-identifiers": []
                          }
                        },
                        "required": [
                          "name"
                        ]
                      },
                      "x-ms-identifiers": []
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "type": "object",
              "description": "Asset definition.",
              "properties": {
                "id": {
                  "type": "string",
                  "format": "arm-id",
                  "description": "Fully qualified resource ID for the resource. E.g. \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}\"",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "description": "The name of the resource",
                  "readOnly": true
                },
                "type": {
                  "type": "string",
                  "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                  "readOnly": true
                },
                "systemData": {
                  "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                  "readOnly": true,
                  "type": "object",
                  "properties": {
                    "createdBy": {
                      "type": "string",
                      "description": "The identity that created the resource."
                    },
                    "createdByType": {
                      "type": "string",
                      "description": "The type of identity that created the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource creation (UTC)."
                    },
                    "lastModifiedBy": {
                      "type": "string",
                      "description": "The identity that last modified the resource."
                    },
                    "lastModifiedByType": {
                      "type": "string",
                      "description": "The type of identity that last modified the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "lastModifiedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource last modification (UTC)"
                    }
                  }
                },
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "x-ms-mutability": [
                    "read",
                    "create",
                    "update"
                  ]
                },
                "location": {
                  "type": "string",
                  "description": "The geo-location where the resource lives",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ]
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "uuid": {
                      "type": "string",
                      "description": "Globally unique, immutable, non-reusable ID.",
                      "readOnly": true
                    },
                    "enabled": {
                      "type": "boolean",
                      "description": "Enabled/disabled status of the asset."
                    },
                    "externalAssetId": {
                      "type": "string",
                      "description": "Asset ID provided by the customer.",
                      "x-ms-mutability": [
                        "read",
                        "create"
                      ]
                    },
                    "displayName": {
                      "type": "string",
                      "description": "Human-readable display name."
                    },
                    "description": {
                      "type": "string",
                      "description": "Human-readable description of the asset."
                    },
                    "deviceRef": {
                      "description": "Reference to the device that provides data for this asset. Must provide device name & endpoint on the device to use.",
                      "x-ms-mutability": [
                        "read",
                        "create"
                      ],
                      "type": "object",
                      "properties": {
                        "deviceName": {
                          "type": "string",
                          "description": "Name of the device resource"
                        },
                        "endpointName": {
                          "type": "string",
                          "description": "The name of endpoint to use"
                        }
                      },
                      "required": [
                        "deviceName",
                        "endpointName"
                      ]
                    },
                    "assetTypeRefs": {
                      "type": "array",
                      "description": "URIs or type definition IDs.",
                      "items": {
                        "type": "string"
                      }
                    },
                    "version": {
                      "type": "integer",
                      "format": "int64",
                      "description": "An integer that is incremented each time the resource is modified.",
                      "readOnly": true
                    },
                    "lastTransitionTime": {
                      "type": "string",
                      "format": "date-time",
                      "description": "A timestamp (in UTC) that is updated each time the resource is modified.",
                      "readOnly": true
                    },
                    "manufacturer": {
                      "type": "string",
                      "description": "Asset manufacturer."
                    },
                    "manufacturerUri": {
                      "type": "string",
                      "description": "Asset manufacturer URI."
                    },
                    "model": {
                      "type": "string",
                      "description": "Asset model."
                    },
                    "productCode": {
                      "type": "string",
                      "description": "Asset product code."
                    },
                    "hardwareRevision": {
                      "type": "string",
                      "description": "Asset hardware revision number."
                    },
                    "softwareRevision": {
                      "type": "string",
                      "description": "Asset software revision number."
                    },
                    "documentationUri": {
                      "type": "string",
                      "description": "Asset documentation reference."
                    },
                    "serialNumber": {
                      "type": "string",
                      "description": "Asset serial number."
                    },
                    "attributes": {
                      "type": "object",
                      "description": "A set of key-value pairs that contain custom attributes set by the customer.",
                      "additionalProperties": {}
                    },
                    "discoveredAssetRefs": {
                      "type": "array",
                      "description": "Reference to a list of discovered assets. Populated only if the asset has been created from discovery flow. Discovered asset names must be provided.",
                      "items": {
                        "type": "string"
                      },
                      "x-ms-mutability": [
                        "read",
                        "create"
                      ]
                    },
                    "defaultDatasetsConfiguration": {
                      "type": "string",
                      "description": "Stringified JSON that contains connector-specific default configuration for all datasets. Each dataset can have its own configuration that overrides the default settings here."
                    },
                    "defaultEventsConfiguration": {
                      "type": "string",
                      "description": "Stringified JSON that contains connector-specific default configuration for all events. Each event can have its own configuration that overrides the default settings here."
                    },
                    "defaultStreamsConfiguration": {
                      "type": "string",
                      "description": "Stringified JSON that contains connector-specific default configuration for all streams. Each stream can have its own configuration that overrides the default settings here."
                    },
                    "defaultManagementGroupsConfiguration": {
                      "type": "string",
                      "description": "Stringified JSON that contains connector-specific default configuration for all management groups. Each management group can have its own configuration that overrides the default settings here."
                    },
                    "defaultDatasetsDestinations": {
                      "type": "array",
                      "description": "Default destinations for a dataset.",
                      "items": {
                        "type": "object",
                        "description": "The type of the destination.",
                        "properties": {
                          "target": {
                            "description": "Target destination.",
                            "type": "string",
                            "enum": [
                              "Mqtt",
                              "BrokerStateStore",
                              "Storage"
                            ],
                            "x-ms-enum": {
                              "name": "DatasetDestinationTarget",
                              "modelAsString": true,
                              "values": [
                                {
                                  "name": "Mqtt",
                                  "value": "Mqtt",
                                  "description": "MQTT target."
                                },
                                {
                                  "name": "BrokerStateStore",
                                  "value": "BrokerStateStore",
                                  "description": "Broker State Store target."
                                },
                                {
                                  "name": "Storage",
                                  "value": "Storage",
                                  "description": "Storage target."
                                }
                              ]
                            }
                          }
                        },
                        "discriminator": "target",
                        "required": [
                          "target"
                        ]
                      },
                      "x-ms-identifiers": []
                    },
                    "defaultEventsDestinations": {
                      "type": "array",
                      "description": "Default destinations for an event.",
                      "items": {
                        "type": "object",
                        "description": "The type of the destination.",
                        "properties": {
                          "target": {
                            "description": "Target destination.",
                            "type": "string",
                            "enum": [
                              "Mqtt",
                              "Storage"
                            ],
                            "x-ms-enum": {
                              "name": "EventDestinationTarget",
                              "modelAsString": true,
                              "values": [
                                {
                                  "name": "Mqtt",
                                  "value": "Mqtt",
                                  "description": "MQTT target."
                                },
                                {
                                  "name": "Storage",
                                  "value": "Storage",
                                  "description": "Storage target."
                                }
                              ]
                            }
                          }
                        },
                        "discriminator": "target",
                        "required": [
                          "target"
                        ]
                      },
                      "x-ms-identifiers": []
                    },
                    "defaultStreamsDestinations": {
                      "type": "array",
                      "description": "Default destinations for a stream.",
                      "items": {
                        "type": "object",
                        "description": "The type of the destination.",
                        "properties": {
                          "target": {
                            "description": "Target destination.",
                            "type": "string",
                            "enum": [
                              "Mqtt",
                              "Storage"
                            ],
                            "x-ms-enum": {
                              "name": "StreamDestinationTarget",
                              "modelAsString": true,
                              "values": [
                                {
                                  "name": "Mqtt",
                                  "value": "Mqtt",
                                  "description": "MQTT target."
                                },
                                {
                                  "name": "Storage",
                                  "value": "Storage",
                                  "description": "Storage target."
                                }
                              ]
                            }
                          }
                        },
                        "discriminator": "target",
                        "required": [
                          "target"
                        ]
                      },
                      "x-ms-identifiers": []
                    },
                    "datasets": {
                      "type": "array",
                      "description": "Array of datasets that are part of the asset. Each dataset describes the data points that make up the set.",
                      "items": {
                        "type": "object",
                        "description": "Defines the dataset properties.",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "Name of the dataset."
                          },
                          "dataSource": {
                            "type": "string",
                            "description": "Reference to a data source for a given dataset."
                          },
                          "typeRef": {
                            "type": "string",
                            "description": "URI or type definition ID."
                          },
                          "datasetConfiguration": {
                            "type": "string",
                            "description": "Stringified JSON that contains connector-specific JSON string that describes configuration for the specific dataset."
                          },
                          "destinations": {
                            "type": "array",
                            "description": "Destinations for a dataset.",
                            "items": {
                              "type": "object",
                              "description": "The type of the destination.",
                              "properties": {
                                "target": {
                                  "description": "Target destination.",
                                  "type": "string",
                                  "enum": [
                                    "Mqtt",
                                    "BrokerStateStore",
                                    "Storage"
                                  ],
                                  "x-ms-enum": {
                                    "name": "DatasetDestinationTarget",
                                    "modelAsString": true,
                                    "values": [
                                      {
                                        "name": "Mqtt",
                                        "value": "Mqtt",
                                        "description": "MQTT target."
                                      },
                                      {
                                        "name": "BrokerStateStore",
                                        "value": "BrokerStateStore",
                                        "description": "Broker State Store target."
                                      },
                                      {
                                        "name": "Storage",
                                        "value": "Storage",
                                        "description": "Storage target."
                                      }
                                    ]
                                  }
                                }
                              },
                              "discriminator": "target",
                              "required": [
                                "target"
                              ]
                            },
                            "x-ms-identifiers": []
                          },
                          "dataPoints": {
                            "type": "array",
                            "description": "Array of data points that are part of the dataset. Each data point can have per-data point configuration.",
                            "items": {
                              "type": "object",
                              "description": "Defines the dataset data point properties.",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "The name of the data point."
                                },
                                "dataSource": {
                                  "type": "string",
                                  "description": "The address of the source of the data in the asset (e.g. URL) so that a client can access the data source on the asset."
                                },
                                "dataPointConfiguration": {
                                  "type": "string",
                                  "description": "Stringified JSON that contains connector-specific configuration for the data point. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize."
                                },
                                "typeRef": {
                                  "type": "string",
                                  "description": "URI or type definition ID."
                                }
                              },
                              "required": [
                                "name",
                                "dataSource"
                              ]
                            },
                            "x-ms-identifiers": []
                          }
                        },
                        "required": [
                          "name"
                        ]
                      },
                      "x-ms-identifiers": []
                    },
                    "eventGroups": {
                      "type": "array",
                      "description": "Array of event groups that are part of the asset. Each event group can have per-event group configuration.",
                      "items": {
                        "type": "object",
                        "description": "Defines the event group properties.",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "The name of the event group."
                          },
                          "dataSource": {
                            "type": "string",
                            "description": "The address of the notifier of the event group in the asset (e.g. URL) so that a client can access the event group on the asset."
                          },
                          "eventGroupConfiguration": {
                            "type": "string",
                            "description": "Stringified JSON that contains connector-specific configuration for the event group. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize."
                          },
                          "defaultDestinations": {
                            "type": "array",
                            "description": "Destinations for events. Default destinations when destinations is not defined at the event level.",
                            "items": {
                              "type": "object",
                              "description": "The type of the destination.",
                              "properties": {
                                "target": {
                                  "description": "Target destination.",
                                  "type": "string",
                                  "enum": [
                                    "Mqtt",
                                    "Storage"
                                  ],
                                  "x-ms-enum": {
                                    "name": "EventDestinationTarget",
                                    "modelAsString": true,
                                    "values": [
                                      {
                                        "name": "Mqtt",
                                        "value": "Mqtt",
                                        "description": "MQTT target."
                                      },
                                      {
                                        "name": "Storage",
                                        "value": "Storage",
                                        "description": "Storage target."
                                      }
                                    ]
                                  }
                                }
                              },
                              "discriminator": "target",
                              "required": [
                                "target"
                              ]
                            },
                            "x-ms-identifiers": []
                          },
                          "typeRef": {
                            "type": "string",
                            "description": "URI or type definition ID."
                          },
                          "events": {
                            "type": "array",
                            "description": "Array of events that are part of the event group.",
                            "items": {
                              "type": "object",
                              "description": "Defines the event properties.",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "The name of the event."
                                },
                                "dataSource": {
                                  "type": "string",
                                  "description": "Reference to a data source for a given event."
                                },
                                "eventConfiguration": {
                                  "type": "string",
                                  "description": "Stringified JSON that contains connector-specific configuration for the event. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize."
                                },
                                "destinations": {
                                  "type": "array",
                                  "description": "Destinations for an event.",
                                  "items": {
                                    "type": "object",
                                    "description": "The type of the destination.",
                                    "properties": {
                                      "target": {
                                        "description": "Target destination.",
                                        "type": "string",
                                        "enum": [
                                          "Mqtt",
                                          "Storage"
                                        ],
                                        "x-ms-enum": {
                                          "name": "EventDestinationTarget",
                                          "modelAsString": true,
                                          "values": [
                                            {
                                              "name": "Mqtt",
                                              "value": "Mqtt",
                                              "description": "MQTT target."
                                            },
                                            {
                                              "name": "Storage",
                                              "value": "Storage",
                                              "description": "Storage target."
                                            }
                                          ]
                                        }
                                      }
                                    },
                                    "discriminator": "target",
                                    "required": [
                                      "target"
                                    ]
                                  },
                                  "x-ms-identifiers": []
                                },
                                "typeRef": {
                                  "type": "string",
                                  "description": "URI or type definition ID."
                                }
                              },
                              "required": [
                                "name"
                              ]
                            },
                            "x-ms-identifiers": []
                          }
                        },
                        "required": [
                          "name"
                        ]
                      },
                      "x-ms-identifiers": []
                    },
                    "streams": {
                      "type": "array",
                      "description": "Array of streams that are part of the asset. Each stream can have a per-stream configuration.",
                      "items": {
                        "type": "object",
                        "description": "Defines the stream properties.",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "Name of the stream definition."
                          },
                          "streamConfiguration": {
                            "type": "string",
                            "description": "Stringified JSON that contains connector-specific configuration for the specific stream."
                          },
                          "typeRef": {
                            "type": "string",
                            "description": "URI or type definition ID."
                          },
                          "destinations": {
                            "type": "array",
                            "description": "Destinations for a stream.",
                            "items": {
                              "type": "object",
                              "description": "The type of the destination.",
                              "properties": {
                                "target": {
                                  "description": "Target destination.",
                                  "type": "string",
                                  "enum": [
                                    "Mqtt",
                                    "Storage"
                                  ],
                                  "x-ms-enum": {
                                    "name": "StreamDestinationTarget",
                                    "modelAsString": true,
                                    "values": [
                                      {
                                        "name": "Mqtt",
                                        "value": "Mqtt",
                                        "description": "MQTT target."
                                      },
                                      {
                                        "name": "Storage",
                                        "value": "Storage",
                                        "description": "Storage target."
                                      }
                                    ]
                                  }
                                }
                              },
                              "discriminator": "target",
                              "required": [
                                "target"
                              ]
                            },
                            "x-ms-identifiers": []
                          }
                        },
                        "required": [
                          "name"
                        ]
                      },
                      "x-ms-identifiers": []
                    },
                    "managementGroups": {
                      "type": "array",
                      "description": "Array of management groups that are part of the asset. Each management group can have a per-group configuration.",
                      "items": {
                        "type": "object",
                        "description": "Defines the management group properties.",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "Name of the management group."
                          },
                          "dataSource": {
                            "type": "string",
                            "description": "Reference to a data source for a given management group."
                          },
                          "managementGroupConfiguration": {
                            "type": "string",
                            "description": "Stringified JSON that contains connector-specific configuration for the management group."
                          },
                          "typeRef": {
                            "type": "string",
                            "description": "URI or type definition ID."
                          },
                          "defaultTopic": {
                            "type": "string",
                            "description": "Default MQTT topic path on which a client will receive the request for all actions that are part of the management group."
                          },
                          "defaultTimeoutInSeconds": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Default response timeout for all actions that are part of the management group.",
                            "default": 100
                          },
                          "actions": {
                            "type": "array",
                            "description": "Array of actions that are part of the management group. Each action can have an individual configuration.",
                            "items": {
                              "type": "object",
                              "description": "Defines the action properties.",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "Name of the action."
                                },
                                "actionConfiguration": {
                                  "type": "string",
                                  "description": "Stringified JSON that contains connector-specific configuration for the action."
                                },
                                "targetUri": {
                                  "type": "string",
                                  "description": "The target URI on which a client can invoke the specific action."
                                },
                                "typeRef": {
                                  "type": "string",
                                  "description": "URI or type definition ID."
                                },
                                "topic": {
                                  "type": "string",
                                  "description": "The MQTT topic path on which a client will receive the request for the action."
                                },
                                "actionType": {
                                  "type": "string",
                                  "description": "The type of the action.",
                                  "default": "Call",
                                  "enum": [
                                    "Call",
                                    "Read",
                                    "Write"
                                  ],
                                  "x-ms-enum": {
                                    "name": "ManagementActionType",
                                    "modelAsString": true,
                                    "values": [
                                      {
                                        "name": "Call",
                                        "value": "Call",
                                        "description": "Call action type."
                                      },
                                      {
                                        "name": "Read",
                                        "value": "Read",
                                        "description": "Read action type."
                                      },
                                      {
                                        "name": "Write",
                                        "value": "Write",
                                        "description": "Write action type."
                                      }
                                    ]
                                  }
                                },
                                "timeoutInSeconds": {
                                  "type": "integer",
                                  "format": "int32",
                                  "description": "Response timeout for the action."
                                }
                              },
                              "required": [
                                "name",
                                "targetUri"
                              ]
                            },
                            "x-ms-identifiers": []
                          }
                        },
                        "required": [
                          "name"
                        ]
                      },
                      "x-ms-identifiers": []
                    },
                    "status": {
                      "description": "Read only object to reflect changes that have occurred on the Edge. Similar to Kubernetes status property for custom resources.",
                      "readOnly": true,
                      "type": "object",
                      "properties": {
                        "config": {
                          "description": "Defines the asset status config properties.",
                          "readOnly": true,
                          "type": "object",
                          "properties": {
                            "version": {
                              "type": "integer",
                              "format": "int64",
                              "description": "A read-only incremental counter indicating the number of times the configuration has been modified from the perspective of the current actual (edge) state of the CRD. Edge would be the only writer of this value and would sync back up to the cloud. In steady state, this should equal version.",
                              "readOnly": true
                            },
                            "lastTransitionTime": {
                              "type": "string",
                              "format": "date-time",
                              "description": "A read-only timestamp indicating the last time the configuration has been modified from the perspective of the current actual (edge) state of the CRD. Edge would be the only writer of this value and would sync back up to the cloud.",
                              "readOnly": true
                            },
                            "error": {
                              "description": "Object to transfer and persist errors that originate from the edge.",
                              "readOnly": true,
                              "type": "object",
                              "properties": {
                                "code": {
                                  "type": "string",
                                  "description": "Error code for classification of errors (ex: '400', '404', '500', etc.).",
                                  "readOnly": true
                                },
                                "message": {
                                  "type": "string",
                                  "description": "Human-readable helpful error message to provide additional context for error (e.g.,: “Capability ID 'foo' does not exist”).",
                                  "readOnly": true
                                },
                                "details": {
                                  "type": "array",
                                  "description": "Array of error details that describe the status of each error.",
                                  "items": {
                                    "type": "object",
                                    "description": "Defines the error details properties.",
                                    "properties": {
                                      "code": {
                                        "type": "string",
                                        "description": "Multi-part error code for classification and root causing of errors (ex: 400.200.100.432).",
                                        "readOnly": true
                                      },
                                      "message": {
                                        "type": "string",
                                        "description": "Human-readable helpful error message to provide additional context for error (ex: “Authentication method not supported”).",
                                        "readOnly": true
                                      },
                                      "info": {
                                        "type": "string",
                                        "description": "Human-readable helpful detailed text context for debugging (ex: “The following mechanisms are supported...”).",
                                        "readOnly": true
                                      },
                                      "correlationId": {
                                        "type": "string",
                                        "description": "Unique identifier for the transaction to aid in debugging.",
                                        "readOnly": true
                                      }
                                    }
                                  },
                                  "readOnly": true,
                                  "x-ms-identifiers": []
                                }
                              }
                            }
                          }
                        },
                        "datasets": {
                          "type": "array",
                          "description": "Array of dataset statuses that describe the status of each dataset.",
                          "items": {
                            "type": "object",
                            "description": "Defines the asset status dataset properties.",
                            "properties": {
                              "name": {
                                "type": "string",
                                "description": "The name of the dataset. Must be unique within the status.datasets array. This name is used to correlate between the spec and status dataset information.",
                                "readOnly": true
                              },
                              "messageSchemaReference": {
                                "description": "The message schema reference object.",
                                "readOnly": true,
                                "type": "object",
                                "properties": {
                                  "schemaRegistryNamespace": {
                                    "type": "string",
                                    "description": "The message schema registry namespace.",
                                    "readOnly": true
                                  },
                                  "schemaName": {
                                    "type": "string",
                                    "description": "The message schema name.",
                                    "readOnly": true
                                  },
                                  "schemaVersion": {
                                    "type": "string",
                                    "description": "The message schema version.",
                                    "readOnly": true
                                  }
                                },
                                "required": [
                                  "schemaRegistryNamespace",
                                  "schemaName",
                                  "schemaVersion"
                                ]
                              },
                              "error": {
                                "description": "Object to transfer and persist errors that originate from the edge.",
                                "readOnly": true,
                                "type": "object",
                                "properties": {
                                  "code": {
                                    "type": "string",
                                    "description": "Error code for classification of errors (ex: '400', '404', '500', etc.).",
                                    "readOnly": true
                                  },
                                  "message": {
                                    "type": "string",
                                    "description": "Human-readable helpful error message to provide additional context for error (e.g.,: “Capability ID 'foo' does not exist”).",
                                    "readOnly": true
                                  },
                                  "details": {
                                    "type": "array",
                                    "description": "Array of error details that describe the status of each error.",
                                    "items": {
                                      "type": "object",
                                      "description": "Defines the error details properties.",
                                      "properties": {
                                        "code": {
                                          "type": "string",
                                          "description": "Multi-part error code for classification and root causing of errors (ex: 400.200.100.432).",
                                          "readOnly": true
                                        },
                                        "message": {
                                          "type": "string",
                                          "description": "Human-readable helpful error message to provide additional context for error (ex: “Authentication method not supported”).",
                                          "readOnly": true
                                        },
                                        "info": {
                                          "type": "string",
                                          "description": "Human-readable helpful detailed text context for debugging (ex: “The following mechanisms are supported...”).",
                                          "readOnly": true
                                        },
                                        "correlationId": {
                                          "type": "string",
                                          "description": "Unique identifier for the transaction to aid in debugging.",
                                          "readOnly": true
                                        }
                                      }
                                    },
                                    "readOnly": true,
                                    "x-ms-identifiers": []
                                  }
                                }
                              }
                            },
                            "required": [
                              "name"
                            ]
                          },
                          "readOnly": true,
                          "x-ms-identifiers": []
                        },
                        "eventGroups": {
                          "type": "array",
                          "description": "Array of event group statuses that describe the status of each event group.",
                          "items": {
                            "type": "object",
                            "description": "Defines the asset status event group properties.",
                            "properties": {
                              "name": {
                                "type": "string",
                                "description": "The name of the event group. Must be unique within the status.eventGroups array. This name is used to correlate between the spec and status event group information.",
                                "readOnly": true
                              },
                              "events": {
                                "type": "array",
                                "description": "Array of event statuses that describe the status of each event in the event group.",
                                "items": {
                                  "type": "object",
                                  "description": "Defines the asset status event properties.",
                                  "properties": {
                                    "name": {
                                      "type": "string",
                                      "description": "The name of the event. Must be unique within the status.events array. This name is used to correlate between the spec and status event information.",
                                      "readOnly": true
                                    },
                                    "messageSchemaReference": {
                                      "description": "The message schema reference object.",
                                      "readOnly": true,
                                      "type": "object",
                                      "properties": {
                                        "schemaRegistryNamespace": {
                                          "type": "string",
                                          "description": "The message schema registry namespace.",
                                          "readOnly": true
                                        },
                                        "schemaName": {
                                          "type": "string",
                                          "description": "The message schema name.",
                                          "readOnly": true
                                        },
                                        "schemaVersion": {
                                          "type": "string",
                                          "description": "The message schema version.",
                                          "readOnly": true
                                        }
                                      },
                                      "required": [
                                        "schemaRegistryNamespace",
                                        "schemaName",
                                        "schemaVersion"
                                      ]
                                    },
                                    "error": {
                                      "description": "Object to transfer and persist errors that originate from the edge.",
                                      "readOnly": true,
                                      "type": "object",
                                      "properties": {
                                        "code": {
                                          "type": "string",
                                          "description": "Error code for classification of errors (ex: '400', '404', '500', etc.).",
                                          "readOnly": true
                                        },
                                        "message": {
                                          "type": "string",
                                          "description": "Human-readable helpful error message to provide additional context for error (e.g.,: “Capability ID 'foo' does not exist”).",
                                          "readOnly": true
                                        },
                                        "details": {
                                          "type": "array",
                                          "description": "Array of error details that describe the status of each error.",
                                          "items": {
                                            "type": "object",
                                            "description": "Defines the error details properties.",
                                            "properties": {
                                              "code": {
                                                "type": "string",
                                                "description": "Multi-part error code for classification and root causing of errors (ex: 400.200.100.432).",
                                                "readOnly": true
                                              },
                                              "message": {
                                                "type": "string",
                                                "description": "Human-readable helpful error message to provide additional context for error (ex: “Authentication method not supported”).",
                                                "readOnly": true
                                              },
                                              "info": {
                                                "type": "string",
                                                "description": "Human-readable helpful detailed text context for debugging (ex: “The following mechanisms are supported...”).",
                                                "readOnly": true
                                              },
                                              "correlationId": {
                                                "type": "string",
                                                "description": "Unique identifier for the transaction to aid in debugging.",
                                                "readOnly": true
                                              }
                                            }
                                          },
                                          "readOnly": true,
                                          "x-ms-identifiers": []
                                        }
                                      }
                                    }
                                  },
                                  "required": [
                                    "name"
                                  ]
                                },
                                "readOnly": true,
                                "x-ms-identifiers": []
                              }
                            },
                            "required": [
                              "name"
                            ]
                          },
                          "readOnly": true,
                          "x-ms-identifiers": []
                        },
                        "streams": {
                          "type": "array",
                          "description": "Array of stream statuses that describe the status of each stream.",
                          "items": {
                            "type": "object",
                            "description": "Defines the asset status stream properties.",
                            "properties": {
                              "name": {
                                "type": "string",
                                "description": "The name of the stream. Must be unique within the status.streams array. This name is used to correlate between the spec and status event information.",
                                "readOnly": true
                              },
                              "messageSchemaReference": {
                                "description": "The message schema reference object.",
                                "readOnly": true,
                                "type": "object",
                                "properties": {
                                  "schemaRegistryNamespace": {
                                    "type": "string",
                                    "description": "The message schema registry namespace.",
                                    "readOnly": true
                                  },
                                  "schemaName": {
                                    "type": "string",
                                    "description": "The message schema name.",
                                    "readOnly": true
                                  },
                                  "schemaVersion": {
                                    "type": "string",
                                    "description": "The message schema version.",
                                    "readOnly": true
                                  }
                                },
                                "required": [
                                  "schemaRegistryNamespace",
                                  "schemaName",
                                  "schemaVersion"
                                ]
                              },
                              "error": {
                                "description": "Object to transfer and persist errors that originate from the edge.",
                                "readOnly": true,
                                "type": "object",
                                "properties": {
                                  "code": {
                                    "type": "string",
                                    "description": "Error code for classification of errors (ex: '400', '404', '500', etc.).",
                                    "readOnly": true
                                  },
                                  "message": {
                                    "type": "string",
                                    "description": "Human-readable helpful error message to provide additional context for error (e.g.,: “Capability ID 'foo' does not exist”).",
                                    "readOnly": true
                                  },
                                  "details": {
                                    "type": "array",
                                    "description": "Array of error details that describe the status of each error.",
                                    "items": {
                                      "type": "object",
                                      "description": "Defines the error details properties.",
                                      "properties": {
                                        "code": {
                                          "type": "string",
                                          "description": "Multi-part error code for classification and root causing of errors (ex: 400.200.100.432).",
                                          "readOnly": true
                                        },
                                        "message": {
                                          "type": "string",
                                          "description": "Human-readable helpful error message to provide additional context for error (ex: “Authentication method not supported”).",
                                          "readOnly": true
                                        },
                                        "info": {
                                          "type": "string",
                                          "description": "Human-readable helpful detailed text context for debugging (ex: “The following mechanisms are supported...”).",
                                          "readOnly": true
                                        },
                                        "correlationId": {
                                          "type": "string",
                                          "description": "Unique identifier for the transaction to aid in debugging.",
                                          "readOnly": true
                                        }
                                      }
                                    },
                                    "readOnly": true,
                                    "x-ms-identifiers": []
                                  }
                                }
                              }
                            },
                            "required": [
                              "name"
                            ]
                          },
                          "readOnly": true,
                          "x-ms-identifiers": []
                        },
                        "managementGroups": {
                          "type": "array",
                          "description": "Array of management group statuses that describe the status of each management group.",
                          "items": {
                            "type": "object",
                            "description": "Defines the asset status management group properties.",
                            "properties": {
                              "name": {
                                "type": "string",
                                "description": "The name of the management group. Must be unique within the status.managementGroups array. This name is used to correlate between the spec and status event information.",
                                "readOnly": true
                              },
                              "actions": {
                                "type": "array",
                                "description": "Array of action statuses that describe the status of each action.",
                                "items": {
                                  "type": "object",
                                  "description": "Defines the asset status action properties.",
                                  "properties": {
                                    "name": {
                                      "type": "string",
                                      "description": "The name of the action. Must be unique within the status.actions array. This name is used to correlate between the spec and status event information.",
                                      "readOnly": true
                                    },
                                    "requestMessageSchemaReference": {
                                      "description": "The request message schema reference object for the action.",
                                      "readOnly": true,
                                      "type": "object",
                                      "properties": {
                                        "schemaRegistryNamespace": {
                                          "type": "string",
                                          "description": "The message schema registry namespace.",
                                          "readOnly": true
                                        },
                                        "schemaName": {
                                          "type": "string",
                                          "description": "The message schema name.",
                                          "readOnly": true
                                        },
                                        "schemaVersion": {
                                          "type": "string",
                                          "description": "The message schema version.",
                                          "readOnly": true
                                        }
                                      },
                                      "required": [
                                        "schemaRegistryNamespace",
                                        "schemaName",
                                        "schemaVersion"
                                      ]
                                    },
                                    "responseMessageSchemaReference": {
                                      "description": "The response message schema reference object for the action.",
                                      "readOnly": true,
                                      "type": "object",
                                      "properties": {
                                        "schemaRegistryNamespace": {
                                          "type": "string",
                                          "description": "The message schema registry namespace.",
                                          "readOnly": true
                                        },
                                        "schemaName": {
                                          "type": "string",
                                          "description": "The message schema name.",
                                          "readOnly": true
                                        },
                                        "schemaVersion": {
                                          "type": "string",
                                          "description": "The message schema version.",
                                          "readOnly": true
                                        }
                                      },
                                      "required": [
                                        "schemaRegistryNamespace",
                                        "schemaName",
                                        "schemaVersion"
                                      ]
                                    },
                                    "error": {
                                      "description": "Object to transfer and persist errors that originate from the edge.",
                                      "readOnly": true,
                                      "type": "object",
                                      "properties": {
                                        "code": {
                                          "type": "string",
                                          "description": "Error code for classification of errors (ex: '400', '404', '500', etc.).",
                                          "readOnly": true
                                        },
                                        "message": {
                                          "type": "string",
                                          "description": "Human-readable helpful error message to provide additional context for error (e.g.,: “Capability ID 'foo' does not exist”).",
                                          "readOnly": true
                                        },
                                        "details": {
                                          "type": "array",
                                          "description": "Array of error details that describe the status of each error.",
                                          "items": {
                                            "type": "object",
                                            "description": "Defines the error details properties.",
                                            "properties": {
                                              "code": {
                                                "type": "string",
                                                "description": "Multi-part error code for classification and root causing of errors (ex: 400.200.100.432).",
                                                "readOnly": true
                                              },
                                              "message": {
                                                "type": "string",
                                                "description": "Human-readable helpful error message to provide additional context for error (ex: “Authentication method not supported”).",
                                                "readOnly": true
                                              },
                                              "info": {
                                                "type": "string",
                                                "description": "Human-readable helpful detailed text context for debugging (ex: “The following mechanisms are supported...”).",
                                                "readOnly": true
                                              },
                                              "correlationId": {
                                                "type": "string",
                                                "description": "Unique identifier for the transaction to aid in debugging.",
                                                "readOnly": true
                                              }
                                            }
                                          },
                                          "readOnly": true,
                                          "x-ms-identifiers": []
                                        }
                                      }
                                    }
                                  },
                                  "required": [
                                    "name"
                                  ]
                                },
                                "readOnly": true,
                                "x-ms-identifiers": []
                              }
                            },
                            "required": [
                              "name"
                            ]
                          },
                          "readOnly": true,
                          "x-ms-identifiers": []
                        }
                      }
                    },
                    "provisioningState": {
                      "description": "Provisioning state of the resource.",
                      "readOnly": true,
                      "type": "string",
                      "enum": [
                        "Succeeded",
                        "Failed",
                        "Canceled",
                        "Accepted",
                        "Deleting"
                      ],
                      "x-ms-enum": {
                        "name": "ProvisioningState",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Succeeded",
                            "value": "Succeeded",
                            "description": "Resource has been created."
                          },
                          {
                            "name": "Failed",
                            "value": "Failed",
                            "description": "Resource creation failed."
                          },
                          {
                            "name": "Canceled",
                            "value": "Canceled",
                            "description": "Resource creation was canceled."
                          },
                          {
                            "name": "Accepted",
                            "value": "Accepted",
                            "description": "Resource has been accepted by the server."
                          },
                          {
                            "name": "Deleting",
                            "value": "Deleting",
                            "description": "Resource is deleting."
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "deviceRef"
                  ]
                },
                "extendedLocation": {
                  "description": "The extended location.",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ],
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "description": "The extended location type."
                    },
                    "name": {
                      "type": "string",
                      "description": "The extended location name."
                    }
                  },
                  "required": [
                    "type",
                    "name"
                  ]
                }
              },
              "required": [
                "extendedLocation"
              ]
            }
          },
          "202": {
            "description": "Resource update request accepted.",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              },
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "NamespaceAssets_Delete",
        "tags": [
          "NamespaceAssets"
        ],
        "description": "Delete a NamespaceAsset",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription. The value must be an UUID.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group. The name is case insensitive.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "x-ms-parameter-location": "method"
          },
          {
            "name": "namespaceName",
            "in": "path",
            "description": "The name of the namespace.",
            "required": true,
            "type": "string",
            "minLength": 3,
            "maxLength": 64,
            "pattern": "^[a-z0-9][a-z0-9-]*[a-z0-9]$"
          },
          {
            "name": "assetName",
            "in": "path",
            "description": "The name of the asset.",
            "required": true,
            "type": "string",
            "minLength": 3,
            "maxLength": 63,
            "pattern": "^[a-z0-9][a-z0-9-]*[a-z0-9]$"
          }
        ],
        "responses": {
          "202": {
            "description": "Resource deletion accepted.",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              },
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "204": {
            "description": "Resource does not exist."
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeviceRegistry/namespaces/{namespaceName}/devices": {
      "get": {
        "operationId": "NamespaceDevices_ListByResourceGroup",
        "tags": [
          "NamespaceDevices"
        ],
        "description": "List NamespaceDevice resources by Namespace",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription. The value must be an UUID.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group. The name is case insensitive.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "x-ms-parameter-location": "method"
          },
          {
            "name": "namespaceName",
            "in": "path",
            "description": "The name of the namespace.",
            "required": true,
            "type": "string",
            "minLength": 3,
            "maxLength": 64,
            "pattern": "^[a-z0-9][a-z0-9-]*[a-z0-9]$"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "type": "object",
              "description": "The response of a NamespaceDevice list operation.",
              "properties": {
                "value": {
                  "type": "array",
                  "description": "The NamespaceDevice items on this page",
                  "items": {
                    "type": "object",
                    "description": "Device definition.",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "arm-id",
                        "description": "Fully qualified resource ID for the resource. E.g. \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}\"",
                        "readOnly": true
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the resource",
                        "readOnly": true
                      },
                      "type": {
                        "type": "string",
                        "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                        "readOnly": true
                      },
                      "systemData": {
                        "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                        "readOnly": true,
                        "type": "object",
                        "properties": {
                          "createdBy": {
                            "type": "string",
                            "description": "The identity that created the resource."
                          },
                          "createdByType": {
                            "type": "string",
                            "description": "The type of identity that created the resource.",
                            "enum": [
                              "User",
                              "Application",
                              "ManagedIdentity",
                              "Key"
                            ],
                            "x-ms-enum": {
                              "name": "createdByType",
                              "modelAsString": true
                            }
                          },
                          "createdAt": {
                            "type": "string",
                            "format": "date-time",
                            "description": "The timestamp of resource creation (UTC)."
                          },
                          "lastModifiedBy": {
                            "type": "string",
                            "description": "The identity that last modified the resource."
                          },
                          "lastModifiedByType": {
                            "type": "string",
                            "description": "The type of identity that last modified the resource.",
                            "enum": [
                              "User",
                              "Application",
                              "ManagedIdentity",
                              "Key"
                            ],
                            "x-ms-enum": {
                              "name": "createdByType",
                              "modelAsString": true
                            }
                          },
                          "lastModifiedAt": {
                            "type": "string",
                            "format": "date-time",
                            "description": "The timestamp of resource last modification (UTC)"
                          }
                        }
                      },
                      "tags": {
                        "type": "object",
                        "description": "Resource tags.",
                        "additionalProperties": {
                          "type": "string"
                        },
                        "x-ms-mutability": [
                          "read",
                          "create",
                          "update"
                        ]
                      },
                      "location": {
                        "type": "string",
                        "description": "The geo-location where the resource lives",
                        "x-ms-mutability": [
                          "read",
                          "create"
                        ]
                      },
                      "properties": {
                        "description": "The resource-specific properties for this resource.",
                        "x-ms-client-flatten": true,
                        "type": "object",
                        "properties": {
                          "uuid": {
                            "type": "string",
                            "description": "A unique identifier for the device.",
                            "readOnly": true
                          },
                          "enabled": {
                            "type": "boolean",
                            "description": "Indicates if the resource is enabled or not.",
                            "default": true
                          },
                          "externalDeviceId": {
                            "type": "string",
                            "description": "The Device ID provided by the customer.",
                            "x-ms-mutability": [
                              "read",
                              "create"
                            ]
                          },
                          "discoveredDeviceRef": {
                            "type": "string",
                            "description": "Reference to a device. Populated only if the device had been created from discovery flow. Discovered device name must be provided.",
                            "x-ms-mutability": [
                              "read",
                              "create"
                            ]
                          },
                          "manufacturer": {
                            "type": "string",
                            "description": "Device manufacturer.",
                            "x-ms-mutability": [
                              "read",
                              "create"
                            ]
                          },
                          "model": {
                            "type": "string",
                            "description": "Device model.",
                            "x-ms-mutability": [
                              "read",
                              "create"
                            ]
                          },
                          "operatingSystem": {
                            "type": "string",
                            "description": "Device operating system.",
                            "x-ms-mutability": [
                              "read",
                              "create"
                            ]
                          },
                          "operatingSystemVersion": {
                            "type": "string",
                            "description": "Device operating system version."
                          },
                          "endpoints": {
                            "description": "Property bag containing the device's unassigned and assigned endpoints.",
                            "type": "object",
                            "properties": {
                              "inbound": {
                                "type": "object",
                                "description": "Set of endpoints to connect to the device.",
                                "additionalProperties": {
                                  "type": "object",
                                  "description": "An endpoint to connect to the device.",
                                  "properties": {
                                    "endpointType": {
                                      "type": "string",
                                      "description": "Type of connection endpoint."
                                    },
                                    "address": {
                                      "type": "string",
                                      "description": "The endpoint address & port. This can be either an IP address (e.g., 192.168.1.1) or a fully qualified domain name (FQDN, e.g., server.example.com)."
                                    },
                                    "version": {
                                      "type": "string",
                                      "description": "Protocol version associated with the endpoint e.g. 1 or 2 for endpointType Microsoft.HTTP, and 3.5 or 5.0 for endpointType Microsoft.Mqtt etc."
                                    },
                                    "authentication": {
                                      "description": "Defines the client authentication mechanism to the server.",
                                      "type": "object",
                                      "properties": {
                                        "method": {
                                          "type": "string",
                                          "description": "Defines the method to authenticate the user of the client at the server.",
                                          "default": "Certificate",
                                          "enum": [
                                            "Anonymous",
                                            "Certificate",
                                            "UsernamePassword"
                                          ],
                                          "x-ms-enum": {
                                            "name": "AuthenticationMethod",
                                            "modelAsString": true,
                                            "values": [
                                              {
                                                "name": "Anonymous",
                                                "value": "Anonymous",
                                                "description": "The user authentication method is anonymous."
                                              },
                                              {
                                                "name": "Certificate",
                                                "value": "Certificate",
                                                "description": "The user authentication method is an x509 certificate."
                                              },
                                              {
                                                "name": "UsernamePassword",
                                                "value": "UsernamePassword",
                                                "description": "The user authentication method is a username and password."
                                              }
                                            ]
                                          }
                                        },
                                        "usernamePasswordCredentials": {
                                          "description": "Defines the username and password references when UsernamePassword user authentication mode is selected.",
                                          "type": "object",
                                          "properties": {
                                            "usernameSecretName": {
                                              "type": "string",
                                              "description": "The name of the secret containing the username."
                                            },
                                            "passwordSecretName": {
                                              "type": "string",
                                              "description": "The name of the secret containing the password."
                                            }
                                          },
                                          "required": [
                                            "usernameSecretName",
                                            "passwordSecretName"
                                          ]
                                        },
                                        "x509Credentials": {
                                          "description": "Defines the certificate reference when Certificate user authentication mode is selected.",
                                          "type": "object",
                                          "properties": {
                                            "certificateSecretName": {
                                              "type": "string",
                                              "description": "The name of the secret containing the certificate and private key (e.g. stored as .der/.pem or .der/.pfx)."
                                            },
                                            "keySecretName": {
                                              "type": "string",
                                              "description": "The name of the secret containing the certificate private key in PEM or DER format."
                                            },
                                            "intermediateCertificatesSecretName": {
                                              "type": "string",
                                              "description": "The name of the secret containing the combined intermediate certificates in PEM format."
                                            }
                                          },
                                          "required": [
                                            "certificateSecretName"
                                          ]
                                        }
                                      },
                                      "required": [
                                        "method"
                                      ]
                                    },
                                    "trustSettings": {
                                      "description": "Defines server trust settings for the endpoint.",
                                      "type": "object",
                                      "properties": {
                                        "trustList": {
                                          "type": "string",
                                          "description": "Defines a secret reference for certificates to trust."
                                        }
                                      }
                                    },
                                    "additionalConfiguration": {
                                      "type": "string",
                                      "description": "Stringified JSON that contains configuration to be used by the connector (e.g., OPC UA, ONVIF)."
                                    }
                                  },
                                  "required": [
                                    "endpointType",
                                    "address"
                                  ]
                                }
                              },
                              "outbound": {
                                "description": "Set of endpoints a device can connect to.",
                                "type": "object",
                                "properties": {
                                  "assigned": {
                                    "type": "object",
                                    "description": "Endpoints the device can connect to.",
                                    "additionalProperties": {
                                      "type": "object",
                                      "description": "Device messaging endpoint model.",
                                      "properties": {
                                        "endpointType": {
                                          "type": "string",
                                          "description": "Type of connection used for the messaging endpoint."
                                        },
                                        "address": {
                                          "type": "string",
                                          "description": "The endpoint address to connect to."
                                        }
                                      },
                                      "required": [
                                        "address"
                                      ]
                                    }
                                  },
                                  "unassigned": {
                                    "type": "object",
                                    "description": "Set of most recently removed endpoints.",
                                    "additionalProperties": {
                                      "type": "object",
                                      "description": "Device messaging endpoint model.",
                                      "properties": {
                                        "endpointType": {
                                          "type": "string",
                                          "description": "Type of connection used for the messaging endpoint."
                                        },
                                        "address": {
                                          "type": "string",
                                          "description": "The endpoint address to connect to."
                                        }
                                      },
                                      "required": [
                                        "address"
                                      ]
                                    }
                                  }
                                },
                                "required": [
                                  "assigned"
                                ]
                              }
                            }
                          },
                          "attributes": {
                            "type": "object",
                            "description": "A set of key-value pairs that contain custom attributes set by the customer.",
                            "additionalProperties": {}
                          },
                          "status": {
                            "description": "Device status updates.",
                            "readOnly": true,
                            "type": "object",
                            "properties": {
                              "config": {
                                "description": "Defines the device status config properties.",
                                "readOnly": true,
                                "type": "object",
                                "properties": {
                                  "version": {
                                    "type": "integer",
                                    "format": "int64",
                                    "description": "A read-only incremental counter indicating the number of times the configuration has been modified from the perspective of the current actual (edge) state of the CRD. Edge would be the only writer of this value and would sync back up to the cloud. In steady state, this should equal version.",
                                    "readOnly": true
                                  },
                                  "lastTransitionTime": {
                                    "type": "string",
                                    "format": "date-time",
                                    "description": "A read-only timestamp indicating the last time the configuration has been modified from the perspective of the current actual (edge) state of the CRD. Edge would be the only writer of this value and would sync back up to the cloud.",
                                    "readOnly": true
                                  },
                                  "error": {
                                    "description": "Object to transfer and persist errors that originate from the edge.",
                                    "readOnly": true,
                                    "type": "object",
                                    "properties": {
                                      "code": {
                                        "type": "string",
                                        "description": "Error code for classification of errors (ex: '400', '404', '500', etc.).",
                                        "readOnly": true
                                      },
                                      "message": {
                                        "type": "string",
                                        "description": "Human-readable helpful error message to provide additional context for error (e.g.,: “Capability ID 'foo' does not exist”).",
                                        "readOnly": true
                                      },
                                      "details": {
                                        "type": "array",
                                        "description": "Array of error details that describe the status of each error.",
                                        "items": {
                                          "type": "object",
                                          "description": "Defines the error details properties.",
                                          "properties": {
                                            "code": {
                                              "type": "string",
                                              "description": "Multi-part error code for classification and root causing of errors (ex: 400.200.100.432).",
                                              "readOnly": true
                                            },
                                            "message": {
                                              "type": "string",
                                              "description": "Human-readable helpful error message to provide additional context for error (ex: “Authentication method not supported”).",
                                              "readOnly": true
                                            },
                                            "info": {
                                              "type": "string",
                                              "description": "Human-readable helpful detailed text context for debugging (ex: “The following mechanisms are supported...”).",
                                              "readOnly": true
                                            },
                                            "correlationId": {
                                              "type": "string",
                                              "description": "Unique identifier for the transaction to aid in debugging.",
                                              "readOnly": true
                                            }
                                          }
                                        },
                                        "readOnly": true,
                                        "x-ms-identifiers": []
                                      }
                                    }
                                  }
                                }
                              },
                              "endpoints": {
                                "description": "Defines the device status for inbound/outbound endpoints.",
                                "readOnly": true,
                                "type": "object",
                                "properties": {
                                  "inbound": {
                                    "type": "object",
                                    "description": "KeyValue pair representing status of inbound endpoints.",
                                    "additionalProperties": {
                                      "type": "object",
                                      "description": "Defines the device status properties.",
                                      "properties": {
                                        "error": {
                                          "description": "Defines the error related to this endpoint.",
                                          "readOnly": true,
                                          "type": "object",
                                          "properties": {
                                            "code": {
                                              "type": "string",
                                              "description": "Error code for classification of errors (ex: '400', '404', '500', etc.).",
                                              "readOnly": true
                                            },
                                            "message": {
                                              "type": "string",
                                              "description": "Human-readable helpful error message to provide additional context for error (e.g.,: “Capability ID 'foo' does not exist”).",
                                              "readOnly": true
                                            },
                                            "details": {
                                              "type": "array",
                                              "description": "Array of error details that describe the status of each error.",
                                              "items": {
                                                "type": "object",
                                                "description": "Defines the error details properties.",
                                                "properties": {
                                                  "code": {
                                                    "type": "string",
                                                    "description": "Multi-part error code for classification and root causing of errors (ex: 400.200.100.432).",
                                                    "readOnly": true
                                                  },
                                                  "message": {
                                                    "type": "string",
                                                    "description": "Human-readable helpful error message to provide additional context for error (ex: “Authentication method not supported”).",
                                                    "readOnly": true
                                                  },
                                                  "info": {
                                                    "type": "string",
                                                    "description": "Human-readable helpful detailed text context for debugging (ex: “The following mechanisms are supported...”).",
                                                    "readOnly": true
                                                  },
                                                  "correlationId": {
                                                    "type": "string",
                                                    "description": "Unique identifier for the transaction to aid in debugging.",
                                                    "readOnly": true
                                                  }
                                                }
                                              },
                                              "readOnly": true,
                                              "x-ms-identifiers": []
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "readOnly": true
                                  }
                                }
                              }
                            }
                          },
                          "version": {
                            "type": "integer",
                            "format": "int64",
                            "description": "An integer that is incremented each time the resource is modified.",
                            "readOnly": true
                          },
                          "lastTransitionTime": {
                            "type": "string",
                            "format": "date-time",
                            "description": "A timestamp (in UTC) that is updated each time the resource is modified.",
                            "readOnly": true
                          },
                          "provisioningState": {
                            "description": "Provisioning state of the resource.",
                            "readOnly": true,
                            "type": "string",
                            "enum": [
                              "Succeeded",
                              "Failed",
                              "Canceled",
                              "Accepted",
                              "Deleting"
                            ],
                            "x-ms-enum": {
                              "name": "ProvisioningState",
                              "modelAsString": true,
                              "values": [
                                {
                                  "name": "Succeeded",
                                  "value": "Succeeded",
                                  "description": "Resource has been created."
                                },
                                {
                                  "name": "Failed",
                                  "value": "Failed",
                                  "description": "Resource creation failed."
                                },
                                {
                                  "name": "Canceled",
                                  "value": "Canceled",
                                  "description": "Resource creation was canceled."
                                },
                                {
                                  "name": "Accepted",
                                  "value": "Accepted",
                                  "description": "Resource has been accepted by the server."
                                },
                                {
                                  "name": "Deleting",
                                  "value": "Deleting",
                                  "description": "Resource is deleting."
                                }
                              ]
                            }
                          }
                        }
                      },
                      "etag": {
                        "type": "string",
                        "description": "Resource Tag.",
                        "readOnly": true
                      },
                      "extendedLocation": {
                        "description": "The extended location.",
                        "x-ms-mutability": [
                          "read",
                          "create"
                        ],
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "description": "The extended location type."
                          },
                          "name": {
                            "type": "string",
                            "description": "The extended location name."
                          }
                        },
                        "required": [
                          "type",
                          "name"
                        ]
                      }
                    }
                  }
                },
                "nextLink": {
                  "type": "string",
                  "format": "uri",
                  "description": "The link to the next page of items"
                }
              },
              "required": [
                "value"
              ]
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeviceRegistry/namespaces/{namespaceName}/devices/{deviceName}": {
      "get": {
        "operationId": "NamespaceDevices_Get",
        "tags": [
          "NamespaceDevices"
        ],
        "description": "Get a NamespaceDevice",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription. The value must be an UUID.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group. The name is case insensitive.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "x-ms-parameter-location": "method"
          },
          {
            "name": "namespaceName",
            "in": "path",
            "description": "The name of the namespace.",
            "required": true,
            "type": "string",
            "minLength": 3,
            "maxLength": 64,
            "pattern": "^[a-z0-9][a-z0-9-]*[a-z0-9]$"
          },
          {
            "name": "deviceName",
            "in": "path",
            "description": "The name of the device.",
            "required": true,
            "type": "string",
            "minLength": 3,
            "maxLength": 63,
            "pattern": "^[0-9a-zA-Z][a-zA-Z0-9-]*$"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "type": "object",
              "description": "Device definition.",
              "properties": {
                "id": {
                  "type": "string",
                  "format": "arm-id",
                  "description": "Fully qualified resource ID for the resource. E.g. \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}\"",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "description": "The name of the resource",
                  "readOnly": true
                },
                "type": {
                  "type": "string",
                  "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                  "readOnly": true
                },
                "systemData": {
                  "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                  "readOnly": true,
                  "type": "object",
                  "properties": {
                    "createdBy": {
                      "type": "string",
                      "description": "The identity that created the resource."
                    },
                    "createdByType": {
                      "type": "string",
                      "description": "The type of identity that created the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource creation (UTC)."
                    },
                    "lastModifiedBy": {
                      "type": "string",
                      "description": "The identity that last modified the resource."
                    },
                    "lastModifiedByType": {
                      "type": "string",
                      "description": "The type of identity that last modified the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "lastModifiedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource last modification (UTC)"
                    }
                  }
                },
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "x-ms-mutability": [
                    "read",
                    "create",
                    "update"
                  ]
                },
                "location": {
                  "type": "string",
                  "description": "The geo-location where the resource lives",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ]
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "uuid": {
                      "type": "string",
                      "description": "A unique identifier for the device.",
                      "readOnly": true
                    },
                    "enabled": {
                      "type": "boolean",
                      "description": "Indicates if the resource is enabled or not.",
                      "default": true
                    },
                    "externalDeviceId": {
                      "type": "string",
                      "description": "The Device ID provided by the customer.",
                      "x-ms-mutability": [
                        "read",
                        "create"
                      ]
                    },
                    "discoveredDeviceRef": {
                      "type": "string",
                      "description": "Reference to a device. Populated only if the device had been created from discovery flow. Discovered device name must be provided.",
                      "x-ms-mutability": [
                        "read",
                        "create"
                      ]
                    },
                    "manufacturer": {
                      "type": "string",
                      "description": "Device manufacturer.",
                      "x-ms-mutability": [
                        "read",
                        "create"
                      ]
                    },
                    "model": {
                      "type": "string",
                      "description": "Device model.",
                      "x-ms-mutability": [
                        "read",
                        "create"
                      ]
                    },
                    "operatingSystem": {
                      "type": "string",
                      "description": "Device operating system.",
                      "x-ms-mutability": [
                        "read",
                        "create"
                      ]
                    },
                    "operatingSystemVersion": {
                      "type": "string",
                      "description": "Device operating system version."
                    },
                    "endpoints": {
                      "description": "Property bag containing the device's unassigned and assigned endpoints.",
                      "type": "object",
                      "properties": {
                        "inbound": {
                          "type": "object",
                          "description": "Set of endpoints to connect to the device.",
                          "additionalProperties": {
                            "type": "object",
                            "description": "An endpoint to connect to the device.",
                            "properties": {
                              "endpointType": {
                                "type": "string",
                                "description": "Type of connection endpoint."
                              },
                              "address": {
                                "type": "string",
                                "description": "The endpoint address & port. This can be either an IP address (e.g., 192.168.1.1) or a fully qualified domain name (FQDN, e.g., server.example.com)."
                              },
                              "version": {
                                "type": "string",
                                "description": "Protocol version associated with the endpoint e.g. 1 or 2 for endpointType Microsoft.HTTP, and 3.5 or 5.0 for endpointType Microsoft.Mqtt etc."
                              },
                              "authentication": {
                                "description": "Defines the client authentication mechanism to the server.",
                                "type": "object",
                                "properties": {
                                  "method": {
                                    "type": "string",
                                    "description": "Defines the method to authenticate the user of the client at the server.",
                                    "default": "Certificate",
                                    "enum": [
                                      "Anonymous",
                                      "Certificate",
                                      "UsernamePassword"
                                    ],
                                    "x-ms-enum": {
                                      "name": "AuthenticationMethod",
                                      "modelAsString": true,
                                      "values": [
                                        {
                                          "name": "Anonymous",
                                          "value": "Anonymous",
                                          "description": "The user authentication method is anonymous."
                                        },
                                        {
                                          "name": "Certificate",
                                          "value": "Certificate",
                                          "description": "The user authentication method is an x509 certificate."
                                        },
                                        {
                                          "name": "UsernamePassword",
                                          "value": "UsernamePassword",
                                          "description": "The user authentication method is a username and password."
                                        }
                                      ]
                                    }
                                  },
                                  "usernamePasswordCredentials": {
                                    "description": "Defines the username and password references when UsernamePassword user authentication mode is selected.",
                                    "type": "object",
                                    "properties": {
                                      "usernameSecretName": {
                                        "type": "string",
                                        "description": "The name of the secret containing the username."
                                      },
                                      "passwordSecretName": {
                                        "type": "string",
                                        "description": "The name of the secret containing the password."
                                      }
                                    },
                                    "required": [
                                      "usernameSecretName",
                                      "passwordSecretName"
                                    ]
                                  },
                                  "x509Credentials": {
                                    "description": "Defines the certificate reference when Certificate user authentication mode is selected.",
                                    "type": "object",
                                    "properties": {
                                      "certificateSecretName": {
                                        "type": "string",
                                        "description": "The name of the secret containing the certificate and private key (e.g. stored as .der/.pem or .der/.pfx)."
                                      },
                                      "keySecretName": {
                                        "type": "string",
                                        "description": "The name of the secret containing the certificate private key in PEM or DER format."
                                      },
                                      "intermediateCertificatesSecretName": {
                                        "type": "string",
                                        "description": "The name of the secret containing the combined intermediate certificates in PEM format."
                                      }
                                    },
                                    "required": [
                                      "certificateSecretName"
                                    ]
                                  }
                                },
                                "required": [
                                  "method"
                                ]
                              },
                              "trustSettings": {
                                "description": "Defines server trust settings for the endpoint.",
                                "type": "object",
                                "properties": {
                                  "trustList": {
                                    "type": "string",
                                    "description": "Defines a secret reference for certificates to trust."
                                  }
                                }
                              },
                              "additionalConfiguration": {
                                "type": "string",
                                "description": "Stringified JSON that contains configuration to be used by the connector (e.g., OPC UA, ONVIF)."
                              }
                            },
                            "required": [
                              "endpointType",
                              "address"
                            ]
                          }
                        },
                        "outbound": {
                          "description": "Set of endpoints a device can connect to.",
                          "type": "object",
                          "properties": {
                            "assigned": {
                              "type": "object",
                              "description": "Endpoints the device can connect to.",
                              "additionalProperties": {
                                "type": "object",
                                "description": "Device messaging endpoint model.",
                                "properties": {
                                  "endpointType": {
                                    "type": "string",
                                    "description": "Type of connection used for the messaging endpoint."
                                  },
                                  "address": {
                                    "type": "string",
                                    "description": "The endpoint address to connect to."
                                  }
                                },
                                "required": [
                                  "address"
                                ]
                              }
                            },
                            "unassigned": {
                              "type": "object",
                              "description": "Set of most recently removed endpoints.",
                              "additionalProperties": {
                                "type": "object",
                                "description": "Device messaging endpoint model.",
                                "properties": {
                                  "endpointType": {
                                    "type": "string",
                                    "description": "Type of connection used for the messaging endpoint."
                                  },
                                  "address": {
                                    "type": "string",
                                    "description": "The endpoint address to connect to."
                                  }
                                },
                                "required": [
                                  "address"
                                ]
                              }
                            }
                          },
                          "required": [
                            "assigned"
                          ]
                        }
                      }
                    },
                    "attributes": {
                      "type": "object",
                      "description": "A set of key-value pairs that contain custom attributes set by the customer.",
                      "additionalProperties": {}
                    },
                    "status": {
                      "description": "Device status updates.",
                      "readOnly": true,
                      "type": "object",
                      "properties": {
                        "config": {
                          "description": "Defines the device status config properties.",
                          "readOnly": true,
                          "type": "object",
                          "properties": {
                            "version": {
                              "type": "integer",
                              "format": "int64",
                              "description": "A read-only incremental counter indicating the number of times the configuration has been modified from the perspective of the current actual (edge) state of the CRD. Edge would be the only writer of this value and would sync back up to the cloud. In steady state, this should equal version.",
                              "readOnly": true
                            },
                            "lastTransitionTime": {
                              "type": "string",
                              "format": "date-time",
                              "description": "A read-only timestamp indicating the last time the configuration has been modified from the perspective of the current actual (edge) state of the CRD. Edge would be the only writer of this value and would sync back up to the cloud.",
                              "readOnly": true
                            },
                            "error": {
                              "description": "Object to transfer and persist errors that originate from the edge.",
                              "readOnly": true,
                              "type": "object",
                              "properties": {
                                "code": {
                                  "type": "string",
                                  "description": "Error code for classification of errors (ex: '400', '404', '500', etc.).",
                                  "readOnly": true
                                },
                                "message": {
                                  "type": "string",
                                  "description": "Human-readable helpful error message to provide additional context for error (e.g.,: “Capability ID 'foo' does not exist”).",
                                  "readOnly": true
                                },
                                "details": {
                                  "type": "array",
                                  "description": "Array of error details that describe the status of each error.",
                                  "items": {
                                    "type": "object",
                                    "description": "Defines the error details properties.",
                                    "properties": {
                                      "code": {
                                        "type": "string",
                                        "description": "Multi-part error code for classification and root causing of errors (ex: 400.200.100.432).",
                                        "readOnly": true
                                      },
                                      "message": {
                                        "type": "string",
                                        "description": "Human-readable helpful error message to provide additional context for error (ex: “Authentication method not supported”).",
                                        "readOnly": true
                                      },
                                      "info": {
                                        "type": "string",
                                        "description": "Human-readable helpful detailed text context for debugging (ex: “The following mechanisms are supported...”).",
                                        "readOnly": true
                                      },
                                      "correlationId": {
                                        "type": "string",
                                        "description": "Unique identifier for the transaction to aid in debugging.",
                                        "readOnly": true
                                      }
                                    }
                                  },
                                  "readOnly": true,
                                  "x-ms-identifiers": []
                                }
                              }
                            }
                          }
                        },
                        "endpoints": {
                          "description": "Defines the device status for inbound/outbound endpoints.",
                          "readOnly": true,
                          "type": "object",
                          "properties": {
                            "inbound": {
                              "type": "object",
                              "description": "KeyValue pair representing status of inbound endpoints.",
                              "additionalProperties": {
                                "type": "object",
                                "description": "Defines the device status properties.",
                                "properties": {
                                  "error": {
                                    "description": "Defines the error related to this endpoint.",
                                    "readOnly": true,
                                    "type": "object",
                                    "properties": {
                                      "code": {
                                        "type": "string",
                                        "description": "Error code for classification of errors (ex: '400', '404', '500', etc.).",
                                        "readOnly": true
                                      },
                                      "message": {
                                        "type": "string",
                                        "description": "Human-readable helpful error message to provide additional context for error (e.g.,: “Capability ID 'foo' does not exist”).",
                                        "readOnly": true
                                      },
                                      "details": {
                                        "type": "array",
                                        "description": "Array of error details that describe the status of each error.",
                                        "items": {
                                          "type": "object",
                                          "description": "Defines the error details properties.",
                                          "properties": {
                                            "code": {
                                              "type": "string",
                                              "description": "Multi-part error code for classification and root causing of errors (ex: 400.200.100.432).",
                                              "readOnly": true
                                            },
                                            "message": {
                                              "type": "string",
                                              "description": "Human-readable helpful error message to provide additional context for error (ex: “Authentication method not supported”).",
                                              "readOnly": true
                                            },
                                            "info": {
                                              "type": "string",
                                              "description": "Human-readable helpful detailed text context for debugging (ex: “The following mechanisms are supported...”).",
                                              "readOnly": true
                                            },
                                            "correlationId": {
                                              "type": "string",
                                              "description": "Unique identifier for the transaction to aid in debugging.",
                                              "readOnly": true
                                            }
                                          }
                                        },
                                        "readOnly": true,
                                        "x-ms-identifiers": []
                                      }
                                    }
                                  }
                                }
                              },
                              "readOnly": true
                            }
                          }
                        }
                      }
                    },
                    "version": {
                      "type": "integer",
                      "format": "int64",
                      "description": "An integer that is incremented each time the resource is modified.",
                      "readOnly": true
                    },
                    "lastTransitionTime": {
                      "type": "string",
                      "format": "date-time",
                      "description": "A timestamp (in UTC) that is updated each time the resource is modified.",
                      "readOnly": true
                    },
                    "provisioningState": {
                      "description": "Provisioning state of the resource.",
                      "readOnly": true,
                      "type": "string",
                      "enum": [
                        "Succeeded",
                        "Failed",
                        "Canceled",
                        "Accepted",
                        "Deleting"
                      ],
                      "x-ms-enum": {
                        "name": "ProvisioningState",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Succeeded",
                            "value": "Succeeded",
                            "description": "Resource has been created."
                          },
                          {
                            "name": "Failed",
                            "value": "Failed",
                            "description": "Resource creation failed."
                          },
                          {
                            "name": "Canceled",
                            "value": "Canceled",
                            "description": "Resource creation was canceled."
                          },
                          {
                            "name": "Accepted",
                            "value": "Accepted",
                            "description": "Resource has been accepted by the server."
                          },
                          {
                            "name": "Deleting",
                            "value": "Deleting",
                            "description": "Resource is deleting."
                          }
                        ]
                      }
                    }
                  }
                },
                "etag": {
                  "type": "string",
                  "description": "Resource Tag.",
                  "readOnly": true
                },
                "extendedLocation": {
                  "description": "The extended location.",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ],
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "description": "The extended location type."
                    },
                    "name": {
                      "type": "string",
                      "description": "The extended location name."
                    }
                  },
                  "required": [
                    "type",
                    "name"
                  ]
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "NamespaceDevices_CreateOrReplace",
        "tags": [
          "NamespaceDevices"
        ],
        "description": "Create a NamespaceDevice",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription. The value must be an UUID.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group. The name is case insensitive.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "x-ms-parameter-location": "method"
          },
          {
            "name": "namespaceName",
            "in": "path",
            "description": "The name of the namespace.",
            "required": true,
            "type": "string",
            "minLength": 3,
            "maxLength": 64,
            "pattern": "^[a-z0-9][a-z0-9-]*[a-z0-9]$"
          },
          {
            "name": "deviceName",
            "in": "path",
            "description": "The name of the device.",
            "required": true,
            "type": "string",
            "minLength": 3,
            "maxLength": 63,
            "pattern": "^[0-9a-zA-Z][a-zA-Z0-9-]*$"
          },
          {
            "name": "resource",
            "in": "body",
            "description": "Resource create parameters.",
            "required": true,
            "schema": {
              "type": "object",
              "description": "Device definition.",
              "properties": {
                "id": {
                  "type": "string",
                  "format": "arm-id",
                  "description": "Fully qualified resource ID for the resource. E.g. \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}\"",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "description": "The name of the resource",
                  "readOnly": true
                },
                "type": {
                  "type": "string",
                  "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                  "readOnly": true
                },
                "systemData": {
                  "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                  "readOnly": true,
                  "type": "object",
                  "properties": {
                    "createdBy": {
                      "type": "string",
                      "description": "The identity that created the resource."
                    },
                    "createdByType": {
                      "type": "string",
                      "description": "The type of identity that created the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource creation (UTC)."
                    },
                    "lastModifiedBy": {
                      "type": "string",
                      "description": "The identity that last modified the resource."
                    },
                    "lastModifiedByType": {
                      "type": "string",
                      "description": "The type of identity that last modified the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "lastModifiedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource last modification (UTC)"
                    }
                  }
                },
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "x-ms-mutability": [
                    "read",
                    "create",
                    "update"
                  ]
                },
                "location": {
                  "type": "string",
                  "description": "The geo-location where the resource lives",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ]
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "uuid": {
                      "type": "string",
                      "description": "A unique identifier for the device.",
                      "readOnly": true
                    },
                    "enabled": {
                      "type": "boolean",
                      "description": "Indicates if the resource is enabled or not.",
                      "default": true
                    },
                    "externalDeviceId": {
                      "type": "string",
                      "description": "The Device ID provided by the customer.",
                      "x-ms-mutability": [
                        "read",
                        "create"
                      ]
                    },
                    "discoveredDeviceRef": {
                      "type": "string",
                      "description": "Reference to a device. Populated only if the device had been created from discovery flow. Discovered device name must be provided.",
                      "x-ms-mutability": [
                        "read",
                        "create"
                      ]
                    },
                    "manufacturer": {
                      "type": "string",
                      "description": "Device manufacturer.",
                      "x-ms-mutability": [
                        "read",
                        "create"
                      ]
                    },
                    "model": {
                      "type": "string",
                      "description": "Device model.",
                      "x-ms-mutability": [
                        "read",
                        "create"
                      ]
                    },
                    "operatingSystem": {
                      "type": "string",
                      "description": "Device operating system.",
                      "x-ms-mutability": [
                        "read",
                        "create"
                      ]
                    },
                    "operatingSystemVersion": {
                      "type": "string",
                      "description": "Device operating system version."
                    },
                    "endpoints": {
                      "description": "Property bag containing the device's unassigned and assigned endpoints.",
                      "type": "object",
                      "properties": {
                        "inbound": {
                          "type": "object",
                          "description": "Set of endpoints to connect to the device.",
                          "additionalProperties": {
                            "type": "object",
                            "description": "An endpoint to connect to the device.",
                            "properties": {
                              "endpointType": {
                                "type": "string",
                                "description": "Type of connection endpoint."
                              },
                              "address": {
                                "type": "string",
                                "description": "The endpoint address & port. This can be either an IP address (e.g., 192.168.1.1) or a fully qualified domain name (FQDN, e.g., server.example.com)."
                              },
                              "version": {
                                "type": "string",
                                "description": "Protocol version associated with the endpoint e.g. 1 or 2 for endpointType Microsoft.HTTP, and 3.5 or 5.0 for endpointType Microsoft.Mqtt etc."
                              },
                              "authentication": {
                                "description": "Defines the client authentication mechanism to the server.",
                                "type": "object",
                                "properties": {
                                  "method": {
                                    "type": "string",
                                    "description": "Defines the method to authenticate the user of the client at the server.",
                                    "default": "Certificate",
                                    "enum": [
                                      "Anonymous",
                                      "Certificate",
                                      "UsernamePassword"
                                    ],
                                    "x-ms-enum": {
                                      "name": "AuthenticationMethod",
                                      "modelAsString": true,
                                      "values": [
                                        {
                                          "name": "Anonymous",
                                          "value": "Anonymous",
                                          "description": "The user authentication method is anonymous."
                                        },
                                        {
                                          "name": "Certificate",
                                          "value": "Certificate",
                                          "description": "The user authentication method is an x509 certificate."
                                        },
                                        {
                                          "name": "UsernamePassword",
                                          "value": "UsernamePassword",
                                          "description": "The user authentication method is a username and password."
                                        }
                                      ]
                                    }
                                  },
                                  "usernamePasswordCredentials": {
                                    "description": "Defines the username and password references when UsernamePassword user authentication mode is selected.",
                                    "type": "object",
                                    "properties": {
                                      "usernameSecretName": {
                                        "type": "string",
                                        "description": "The name of the secret containing the username."
                                      },
                                      "passwordSecretName": {
                                        "type": "string",
                                        "description": "The name of the secret containing the password."
                                      }
                                    },
                                    "required": [
                                      "usernameSecretName",
                                      "passwordSecretName"
                                    ]
                                  },
                                  "x509Credentials": {
                                    "description": "Defines the certificate reference when Certificate user authentication mode is selected.",
                                    "type": "object",
                                    "properties": {
                                      "certificateSecretName": {
                                        "type": "string",
                                        "description": "The name of the secret containing the certificate and private key (e.g. stored as .der/.pem or .der/.pfx)."
                                      },
                                      "keySecretName": {
                                        "type": "string",
                                        "description": "The name of the secret containing the certificate private key in PEM or DER format."
                                      },
                                      "intermediateCertificatesSecretName": {
                                        "type": "string",
                                        "description": "The name of the secret containing the combined intermediate certificates in PEM format."
                                      }
                                    },
                                    "required": [
                                      "certificateSecretName"
                                    ]
                                  }
                                },
                                "required": [
                                  "method"
                                ]
                              },
                              "trustSettings": {
                                "description": "Defines server trust settings for the endpoint.",
                                "type": "object",
                                "properties": {
                                  "trustList": {
                                    "type": "string",
                                    "description": "Defines a secret reference for certificates to trust."
                                  }
                                }
                              },
                              "additionalConfiguration": {
                                "type": "string",
                                "description": "Stringified JSON that contains configuration to be used by the connector (e.g., OPC UA, ONVIF)."
                              }
                            },
                            "required": [
                              "endpointType",
                              "address"
                            ]
                          }
                        },
                        "outbound": {
                          "description": "Set of endpoints a device can connect to.",
                          "type": "object",
                          "properties": {
                            "assigned": {
                              "type": "object",
                              "description": "Endpoints the device can connect to.",
                              "additionalProperties": {
                                "type": "object",
                                "description": "Device messaging endpoint model.",
                                "properties": {
                                  "endpointType": {
                                    "type": "string",
                                    "description": "Type of connection used for the messaging endpoint."
                                  },
                                  "address": {
                                    "type": "string",
                                    "description": "The endpoint address to connect to."
                                  }
                                },
                                "required": [
                                  "address"
                                ]
                              }
                            },
                            "unassigned": {
                              "type": "object",
                              "description": "Set of most recently removed endpoints.",
                              "additionalProperties": {
                                "type": "object",
                                "description": "Device messaging endpoint model.",
                                "properties": {
                                  "endpointType": {
                                    "type": "string",
                                    "description": "Type of connection used for the messaging endpoint."
                                  },
                                  "address": {
                                    "type": "string",
                                    "description": "The endpoint address to connect to."
                                  }
                                },
                                "required": [
                                  "address"
                                ]
                              }
                            }
                          },
                          "required": [
                            "assigned"
                          ]
                        }
                      }
                    },
                    "attributes": {
                      "type": "object",
                      "description": "A set of key-value pairs that contain custom attributes set by the customer.",
                      "additionalProperties": {}
                    },
                    "status": {
                      "description": "Device status updates.",
                      "readOnly": true,
                      "type": "object",
                      "properties": {
                        "config": {
                          "description": "Defines the device status config properties.",
                          "readOnly": true,
                          "type": "object",
                          "properties": {
                            "version": {
                              "type": "integer",
                              "format": "int64",
                              "description": "A read-only incremental counter indicating the number of times the configuration has been modified from the perspective of the current actual (edge) state of the CRD. Edge would be the only writer of this value and would sync back up to the cloud. In steady state, this should equal version.",
                              "readOnly": true
                            },
                            "lastTransitionTime": {
                              "type": "string",
                              "format": "date-time",
                              "description": "A read-only timestamp indicating the last time the configuration has been modified from the perspective of the current actual (edge) state of the CRD. Edge would be the only writer of this value and would sync back up to the cloud.",
                              "readOnly": true
                            },
                            "error": {
                              "description": "Object to transfer and persist errors that originate from the edge.",
                              "readOnly": true,
                              "type": "object",
                              "properties": {
                                "code": {
                                  "type": "string",
                                  "description": "Error code for classification of errors (ex: '400', '404', '500', etc.).",
                                  "readOnly": true
                                },
                                "message": {
                                  "type": "string",
                                  "description": "Human-readable helpful error message to provide additional context for error (e.g.,: “Capability ID 'foo' does not exist”).",
                                  "readOnly": true
                                },
                                "details": {
                                  "type": "array",
                                  "description": "Array of error details that describe the status of each error.",
                                  "items": {
                                    "type": "object",
                                    "description": "Defines the error details properties.",
                                    "properties": {
                                      "code": {
                                        "type": "string",
                                        "description": "Multi-part error code for classification and root causing of errors (ex: 400.200.100.432).",
                                        "readOnly": true
                                      },
                                      "message": {
                                        "type": "string",
                                        "description": "Human-readable helpful error message to provide additional context for error (ex: “Authentication method not supported”).",
                                        "readOnly": true
                                      },
                                      "info": {
                                        "type": "string",
                                        "description": "Human-readable helpful detailed text context for debugging (ex: “The following mechanisms are supported...”).",
                                        "readOnly": true
                                      },
                                      "correlationId": {
                                        "type": "string",
                                        "description": "Unique identifier for the transaction to aid in debugging.",
                                        "readOnly": true
                                      }
                                    }
                                  },
                                  "readOnly": true,
                                  "x-ms-identifiers": []
                                }
                              }
                            }
                          }
                        },
                        "endpoints": {
                          "description": "Defines the device status for inbound/outbound endpoints.",
                          "readOnly": true,
                          "type": "object",
                          "properties": {
                            "inbound": {
                              "type": "object",
                              "description": "KeyValue pair representing status of inbound endpoints.",
                              "additionalProperties": {
                                "type": "object",
                                "description": "Defines the device status properties.",
                                "properties": {
                                  "error": {
                                    "description": "Defines the error related to this endpoint.",
                                    "readOnly": true,
                                    "type": "object",
                                    "properties": {
                                      "code": {
                                        "type": "string",
                                        "description": "Error code for classification of errors (ex: '400', '404', '500', etc.).",
                                        "readOnly": true
                                      },
                                      "message": {
                                        "type": "string",
                                        "description": "Human-readable helpful error message to provide additional context for error (e.g.,: “Capability ID 'foo' does not exist”).",
                                        "readOnly": true
                                      },
                                      "details": {
                                        "type": "array",
                                        "description": "Array of error details that describe the status of each error.",
                                        "items": {
                                          "type": "object",
                                          "description": "Defines the error details properties.",
                                          "properties": {
                                            "code": {
                                              "type": "string",
                                              "description": "Multi-part error code for classification and root causing of errors (ex: 400.200.100.432).",
                                              "readOnly": true
                                            },
                                            "message": {
                                              "type": "string",
                                              "description": "Human-readable helpful error message to provide additional context for error (ex: “Authentication method not supported”).",
                                              "readOnly": true
                                            },
                                            "info": {
                                              "type": "string",
                                              "description": "Human-readable helpful detailed text context for debugging (ex: “The following mechanisms are supported...”).",
                                              "readOnly": true
                                            },
                                            "correlationId": {
                                              "type": "string",
                                              "description": "Unique identifier for the transaction to aid in debugging.",
                                              "readOnly": true
                                            }
                                          }
                                        },
                                        "readOnly": true,
                                        "x-ms-identifiers": []
                                      }
                                    }
                                  }
                                }
                              },
                              "readOnly": true
                            }
                          }
                        }
                      }
                    },
                    "version": {
                      "type": "integer",
                      "format": "int64",
                      "description": "An integer that is incremented each time the resource is modified.",
                      "readOnly": true
                    },
                    "lastTransitionTime": {
                      "type": "string",
                      "format": "date-time",
                      "description": "A timestamp (in UTC) that is updated each time the resource is modified.",
                      "readOnly": true
                    },
                    "provisioningState": {
                      "description": "Provisioning state of the resource.",
                      "readOnly": true,
                      "type": "string",
                      "enum": [
                        "Succeeded",
                        "Failed",
                        "Canceled",
                        "Accepted",
                        "Deleting"
                      ],
                      "x-ms-enum": {
                        "name": "ProvisioningState",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Succeeded",
                            "value": "Succeeded",
                            "description": "Resource has been created."
                          },
                          {
                            "name": "Failed",
                            "value": "Failed",
                            "description": "Resource creation failed."
                          },
                          {
                            "name": "Canceled",
                            "value": "Canceled",
                            "description": "Resource creation was canceled."
                          },
                          {
                            "name": "Accepted",
                            "value": "Accepted",
                            "description": "Resource has been accepted by the server."
                          },
                          {
                            "name": "Deleting",
                            "value": "Deleting",
                            "description": "Resource is deleting."
                          }
                        ]
                      }
                    }
                  }
                },
                "etag": {
                  "type": "string",
                  "description": "Resource Tag.",
                  "readOnly": true
                },
                "extendedLocation": {
                  "description": "The extended location.",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ],
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "description": "The extended location type."
                    },
                    "name": {
                      "type": "string",
                      "description": "The extended location name."
                    }
                  },
                  "required": [
                    "type",
                    "name"
                  ]
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resource 'NamespaceDevice' update operation succeeded",
            "schema": {
              "type": "object",
              "description": "Device definition.",
              "properties": {
                "id": {
                  "type": "string",
                  "format": "arm-id",
                  "description": "Fully qualified resource ID for the resource. E.g. \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}\"",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "description": "The name of the resource",
                  "readOnly": true
                },
                "type": {
                  "type": "string",
                  "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                  "readOnly": true
                },
                "systemData": {
                  "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                  "readOnly": true,
                  "type": "object",
                  "properties": {
                    "createdBy": {
                      "type": "string",
                      "description": "The identity that created the resource."
                    },
                    "createdByType": {
                      "type": "string",
                      "description": "The type of identity that created the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource creation (UTC)."
                    },
                    "lastModifiedBy": {
                      "type": "string",
                      "description": "The identity that last modified the resource."
                    },
                    "lastModifiedByType": {
                      "type": "string",
                      "description": "The type of identity that last modified the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "lastModifiedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource last modification (UTC)"
                    }
                  }
                },
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "x-ms-mutability": [
                    "read",
                    "create",
                    "update"
                  ]
                },
                "location": {
                  "type": "string",
                  "description": "The geo-location where the resource lives",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ]
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "uuid": {
                      "type": "string",
                      "description": "A unique identifier for the device.",
                      "readOnly": true
                    },
                    "enabled": {
                      "type": "boolean",
                      "description": "Indicates if the resource is enabled or not.",
                      "default": true
                    },
                    "externalDeviceId": {
                      "type": "string",
                      "description": "The Device ID provided by the customer.",
                      "x-ms-mutability": [
                        "read",
                        "create"
                      ]
                    },
                    "discoveredDeviceRef": {
                      "type": "string",
                      "description": "Reference to a device. Populated only if the device had been created from discovery flow. Discovered device name must be provided.",
                      "x-ms-mutability": [
                        "read",
                        "create"
                      ]
                    },
                    "manufacturer": {
                      "type": "string",
                      "description": "Device manufacturer.",
                      "x-ms-mutability": [
                        "read",
                        "create"
                      ]
                    },
                    "model": {
                      "type": "string",
                      "description": "Device model.",
                      "x-ms-mutability": [
                        "read",
                        "create"
                      ]
                    },
                    "operatingSystem": {
                      "type": "string",
                      "description": "Device operating system.",
                      "x-ms-mutability": [
                        "read",
                        "create"
                      ]
                    },
                    "operatingSystemVersion": {
                      "type": "string",
                      "description": "Device operating system version."
                    },
                    "endpoints": {
                      "description": "Property bag containing the device's unassigned and assigned endpoints.",
                      "type": "object",
                      "properties": {
                        "inbound": {
                          "type": "object",
                          "description": "Set of endpoints to connect to the device.",
                          "additionalProperties": {
                            "type": "object",
                            "description": "An endpoint to connect to the device.",
                            "properties": {
                              "endpointType": {
                                "type": "string",
                                "description": "Type of connection endpoint."
                              },
                              "address": {
                                "type": "string",
                                "description": "The endpoint address & port. This can be either an IP address (e.g., 192.168.1.1) or a fully qualified domain name (FQDN, e.g., server.example.com)."
                              },
                              "version": {
                                "type": "string",
                                "description": "Protocol version associated with the endpoint e.g. 1 or 2 for endpointType Microsoft.HTTP, and 3.5 or 5.0 for endpointType Microsoft.Mqtt etc."
                              },
                              "authentication": {
                                "description": "Defines the client authentication mechanism to the server.",
                                "type": "object",
                                "properties": {
                                  "method": {
                                    "type": "string",
                                    "description": "Defines the method to authenticate the user of the client at the server.",
                                    "default": "Certificate",
                                    "enum": [
                                      "Anonymous",
                                      "Certificate",
                                      "UsernamePassword"
                                    ],
                                    "x-ms-enum": {
                                      "name": "AuthenticationMethod",
                                      "modelAsString": true,
                                      "values": [
                                        {
                                          "name": "Anonymous",
                                          "value": "Anonymous",
                                          "description": "The user authentication method is anonymous."
                                        },
                                        {
                                          "name": "Certificate",
                                          "value": "Certificate",
                                          "description": "The user authentication method is an x509 certificate."
                                        },
                                        {
                                          "name": "UsernamePassword",
                                          "value": "UsernamePassword",
                                          "description": "The user authentication method is a username and password."
                                        }
                                      ]
                                    }
                                  },
                                  "usernamePasswordCredentials": {
                                    "description": "Defines the username and password references when UsernamePassword user authentication mode is selected.",
                                    "type": "object",
                                    "properties": {
                                      "usernameSecretName": {
                                        "type": "string",
                                        "description": "The name of the secret containing the username."
                                      },
                                      "passwordSecretName": {
                                        "type": "string",
                                        "description": "The name of the secret containing the password."
                                      }
                                    },
                                    "required": [
                                      "usernameSecretName",
                                      "passwordSecretName"
                                    ]
                                  },
                                  "x509Credentials": {
                                    "description": "Defines the certificate reference when Certificate user authentication mode is selected.",
                                    "type": "object",
                                    "properties": {
                                      "certificateSecretName": {
                                        "type": "string",
                                        "description": "The name of the secret containing the certificate and private key (e.g. stored as .der/.pem or .der/.pfx)."
                                      },
                                      "keySecretName": {
                                        "type": "string",
                                        "description": "The name of the secret containing the certificate private key in PEM or DER format."
                                      },
                                      "intermediateCertificatesSecretName": {
                                        "type": "string",
                                        "description": "The name of the secret containing the combined intermediate certificates in PEM format."
                                      }
                                    },
                                    "required": [
                                      "certificateSecretName"
                                    ]
                                  }
                                },
                                "required": [
                                  "method"
                                ]
                              },
                              "trustSettings": {
                                "description": "Defines server trust settings for the endpoint.",
                                "type": "object",
                                "properties": {
                                  "trustList": {
                                    "type": "string",
                                    "description": "Defines a secret reference for certificates to trust."
                                  }
                                }
                              },
                              "additionalConfiguration": {
                                "type": "string",
                                "description": "Stringified JSON that contains configuration to be used by the connector (e.g., OPC UA, ONVIF)."
                              }
                            },
                            "required": [
                              "endpointType",
                              "address"
                            ]
                          }
                        },
                        "outbound": {
                          "description": "Set of endpoints a device can connect to.",
                          "type": "object",
                          "properties": {
                            "assigned": {
                              "type": "object",
                              "description": "Endpoints the device can connect to.",
                              "additionalProperties": {
                                "type": "object",
                                "description": "Device messaging endpoint model.",
                                "properties": {
                                  "endpointType": {
                                    "type": "string",
                                    "description": "Type of connection used for the messaging endpoint."
                                  },
                                  "address": {
                                    "type": "string",
                                    "description": "The endpoint address to connect to."
                                  }
                                },
                                "required": [
                                  "address"
                                ]
                              }
                            },
                            "unassigned": {
                              "type": "object",
                              "description": "Set of most recently removed endpoints.",
                              "additionalProperties": {
                                "type": "object",
                                "description": "Device messaging endpoint model.",
                                "properties": {
                                  "endpointType": {
                                    "type": "string",
                                    "description": "Type of connection used for the messaging endpoint."
                                  },
                                  "address": {
                                    "type": "string",
                                    "description": "The endpoint address to connect to."
                                  }
                                },
                                "required": [
                                  "address"
                                ]
                              }
                            }
                          },
                          "required": [
                            "assigned"
                          ]
                        }
                      }
                    },
                    "attributes": {
                      "type": "object",
                      "description": "A set of key-value pairs that contain custom attributes set by the customer.",
                      "additionalProperties": {}
                    },
                    "status": {
                      "description": "Device status updates.",
                      "readOnly": true,
                      "type": "object",
                      "properties": {
                        "config": {
                          "description": "Defines the device status config properties.",
                          "readOnly": true,
                          "type": "object",
                          "properties": {
                            "version": {
                              "type": "integer",
                              "format": "int64",
                              "description": "A read-only incremental counter indicating the number of times the configuration has been modified from the perspective of the current actual (edge) state of the CRD. Edge would be the only writer of this value and would sync back up to the cloud. In steady state, this should equal version.",
                              "readOnly": true
                            },
                            "lastTransitionTime": {
                              "type": "string",
                              "format": "date-time",
                              "description": "A read-only timestamp indicating the last time the configuration has been modified from the perspective of the current actual (edge) state of the CRD. Edge would be the only writer of this value and would sync back up to the cloud.",
                              "readOnly": true
                            },
                            "error": {
                              "description": "Object to transfer and persist errors that originate from the edge.",
                              "readOnly": true,
                              "type": "object",
                              "properties": {
                                "code": {
                                  "type": "string",
                                  "description": "Error code for classification of errors (ex: '400', '404', '500', etc.).",
                                  "readOnly": true
                                },
                                "message": {
                                  "type": "string",
                                  "description": "Human-readable helpful error message to provide additional context for error (e.g.,: “Capability ID 'foo' does not exist”).",
                                  "readOnly": true
                                },
                                "details": {
                                  "type": "array",
                                  "description": "Array of error details that describe the status of each error.",
                                  "items": {
                                    "type": "object",
                                    "description": "Defines the error details properties.",
                                    "properties": {
                                      "code": {
                                        "type": "string",
                                        "description": "Multi-part error code for classification and root causing of errors (ex: 400.200.100.432).",
                                        "readOnly": true
                                      },
                                      "message": {
                                        "type": "string",
                                        "description": "Human-readable helpful error message to provide additional context for error (ex: “Authentication method not supported”).",
                                        "readOnly": true
                                      },
                                      "info": {
                                        "type": "string",
                                        "description": "Human-readable helpful detailed text context for debugging (ex: “The following mechanisms are supported...”).",
                                        "readOnly": true
                                      },
                                      "correlationId": {
                                        "type": "string",
                                        "description": "Unique identifier for the transaction to aid in debugging.",
                                        "readOnly": true
                                      }
                                    }
                                  },
                                  "readOnly": true,
                                  "x-ms-identifiers": []
                                }
                              }
                            }
                          }
                        },
                        "endpoints": {
                          "description": "Defines the device status for inbound/outbound endpoints.",
                          "readOnly": true,
                          "type": "object",
                          "properties": {
                            "inbound": {
                              "type": "object",
                              "description": "KeyValue pair representing status of inbound endpoints.",
                              "additionalProperties": {
                                "type": "object",
                                "description": "Defines the device status properties.",
                                "properties": {
                                  "error": {
                                    "description": "Defines the error related to this endpoint.",
                                    "readOnly": true,
                                    "type": "object",
                                    "properties": {
                                      "code": {
                                        "type": "string",
                                        "description": "Error code for classification of errors (ex: '400', '404', '500', etc.).",
                                        "readOnly": true
                                      },
                                      "message": {
                                        "type": "string",
                                        "description": "Human-readable helpful error message to provide additional context for error (e.g.,: “Capability ID 'foo' does not exist”).",
                                        "readOnly": true
                                      },
                                      "details": {
                                        "type": "array",
                                        "description": "Array of error details that describe the status of each error.",
                                        "items": {
                                          "type": "object",
                                          "description": "Defines the error details properties.",
                                          "properties": {
                                            "code": {
                                              "type": "string",
                                              "description": "Multi-part error code for classification and root causing of errors (ex: 400.200.100.432).",
                                              "readOnly": true
                                            },
                                            "message": {
                                              "type": "string",
                                              "description": "Human-readable helpful error message to provide additional context for error (ex: “Authentication method not supported”).",
                                              "readOnly": true
                                            },
                                            "info": {
                                              "type": "string",
                                              "description": "Human-readable helpful detailed text context for debugging (ex: “The following mechanisms are supported...”).",
                                              "readOnly": true
                                            },
                                            "correlationId": {
                                              "type": "string",
                                              "description": "Unique identifier for the transaction to aid in debugging.",
                                              "readOnly": true
                                            }
                                          }
                                        },
                                        "readOnly": true,
                                        "x-ms-identifiers": []
                                      }
                                    }
                                  }
                                }
                              },
                              "readOnly": true
                            }
                          }
                        }
                      }
                    },
                    "version": {
                      "type": "integer",
                      "format": "int64",
                      "description": "An integer that is incremented each time the resource is modified.",
                      "readOnly": true
                    },
                    "lastTransitionTime": {
                      "type": "string",
                      "format": "date-time",
                      "description": "A timestamp (in UTC) that is updated each time the resource is modified.",
                      "readOnly": true
                    },
                    "provisioningState": {
                      "description": "Provisioning state of the resource.",
                      "readOnly": true,
                      "type": "string",
                      "enum": [
                        "Succeeded",
                        "Failed",
                        "Canceled",
                        "Accepted",
                        "Deleting"
                      ],
                      "x-ms-enum": {
                        "name": "ProvisioningState",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Succeeded",
                            "value": "Succeeded",
                            "description": "Resource has been created."
                          },
                          {
                            "name": "Failed",
                            "value": "Failed",
                            "description": "Resource creation failed."
                          },
                          {
                            "name": "Canceled",
                            "value": "Canceled",
                            "description": "Resource creation was canceled."
                          },
                          {
                            "name": "Accepted",
                            "value": "Accepted",
                            "description": "Resource has been accepted by the server."
                          },
                          {
                            "name": "Deleting",
                            "value": "Deleting",
                            "description": "Resource is deleting."
                          }
                        ]
                      }
                    }
                  }
                },
                "etag": {
                  "type": "string",
                  "description": "Resource Tag.",
                  "readOnly": true
                },
                "extendedLocation": {
                  "description": "The extended location.",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ],
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "description": "The extended location type."
                    },
                    "name": {
                      "type": "string",
                      "description": "The extended location name."
                    }
                  },
                  "required": [
                    "type",
                    "name"
                  ]
                }
              }
            }
          },
          "201": {
            "description": "Resource 'NamespaceDevice' create operation succeeded",
            "schema": {
              "type": "object",
              "description": "Device definition.",
              "properties": {
                "id": {
                  "type": "string",
                  "format": "arm-id",
                  "description": "Fully qualified resource ID for the resource. E.g. \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}\"",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "description": "The name of the resource",
                  "readOnly": true
                },
                "type": {
                  "type": "string",
                  "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                  "readOnly": true
                },
                "systemData": {
                  "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                  "readOnly": true,
                  "type": "object",
                  "properties": {
                    "createdBy": {
                      "type": "string",
                      "description": "The identity that created the resource."
                    },
                    "createdByType": {
                      "type": "string",
                      "description": "The type of identity that created the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource creation (UTC)."
                    },
                    "lastModifiedBy": {
                      "type": "string",
                      "description": "The identity that last modified the resource."
                    },
                    "lastModifiedByType": {
                      "type": "string",
                      "description": "The type of identity that last modified the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "lastModifiedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource last modification (UTC)"
                    }
                  }
                },
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "x-ms-mutability": [
                    "read",
                    "create",
                    "update"
                  ]
                },
                "location": {
                  "type": "string",
                  "description": "The geo-location where the resource lives",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ]
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "uuid": {
                      "type": "string",
                      "description": "A unique identifier for the device.",
                      "readOnly": true
                    },
                    "enabled": {
                      "type": "boolean",
                      "description": "Indicates if the resource is enabled or not.",
                      "default": true
                    },
                    "externalDeviceId": {
                      "type": "string",
                      "description": "The Device ID provided by the customer.",
                      "x-ms-mutability": [
                        "read",
                        "create"
                      ]
                    },
                    "discoveredDeviceRef": {
                      "type": "string",
                      "description": "Reference to a device. Populated only if the device had been created from discovery flow. Discovered device name must be provided.",
                      "x-ms-mutability": [
                        "read",
                        "create"
                      ]
                    },
                    "manufacturer": {
                      "type": "string",
                      "description": "Device manufacturer.",
                      "x-ms-mutability": [
                        "read",
                        "create"
                      ]
                    },
                    "model": {
                      "type": "string",
                      "description": "Device model.",
                      "x-ms-mutability": [
                        "read",
                        "create"
                      ]
                    },
                    "operatingSystem": {
                      "type": "string",
                      "description": "Device operating system.",
                      "x-ms-mutability": [
                        "read",
                        "create"
                      ]
                    },
                    "operatingSystemVersion": {
                      "type": "string",
                      "description": "Device operating system version."
                    },
                    "endpoints": {
                      "description": "Property bag containing the device's unassigned and assigned endpoints.",
                      "type": "object",
                      "properties": {
                        "inbound": {
                          "type": "object",
                          "description": "Set of endpoints to connect to the device.",
                          "additionalProperties": {
                            "type": "object",
                            "description": "An endpoint to connect to the device.",
                            "properties": {
                              "endpointType": {
                                "type": "string",
                                "description": "Type of connection endpoint."
                              },
                              "address": {
                                "type": "string",
                                "description": "The endpoint address & port. This can be either an IP address (e.g., 192.168.1.1) or a fully qualified domain name (FQDN, e.g., server.example.com)."
                              },
                              "version": {
                                "type": "string",
                                "description": "Protocol version associated with the endpoint e.g. 1 or 2 for endpointType Microsoft.HTTP, and 3.5 or 5.0 for endpointType Microsoft.Mqtt etc."
                              },
                              "authentication": {
                                "description": "Defines the client authentication mechanism to the server.",
                                "type": "object",
                                "properties": {
                                  "method": {
                                    "type": "string",
                                    "description": "Defines the method to authenticate the user of the client at the server.",
                                    "default": "Certificate",
                                    "enum": [
                                      "Anonymous",
                                      "Certificate",
                                      "UsernamePassword"
                                    ],
                                    "x-ms-enum": {
                                      "name": "AuthenticationMethod",
                                      "modelAsString": true,
                                      "values": [
                                        {
                                          "name": "Anonymous",
                                          "value": "Anonymous",
                                          "description": "The user authentication method is anonymous."
                                        },
                                        {
                                          "name": "Certificate",
                                          "value": "Certificate",
                                          "description": "The user authentication method is an x509 certificate."
                                        },
                                        {
                                          "name": "UsernamePassword",
                                          "value": "UsernamePassword",
                                          "description": "The user authentication method is a username and password."
                                        }
                                      ]
                                    }
                                  },
                                  "usernamePasswordCredentials": {
                                    "description": "Defines the username and password references when UsernamePassword user authentication mode is selected.",
                                    "type": "object",
                                    "properties": {
                                      "usernameSecretName": {
                                        "type": "string",
                                        "description": "The name of the secret containing the username."
                                      },
                                      "passwordSecretName": {
                                        "type": "string",
                                        "description": "The name of the secret containing the password."
                                      }
                                    },
                                    "required": [
                                      "usernameSecretName",
                                      "passwordSecretName"
                                    ]
                                  },
                                  "x509Credentials": {
                                    "description": "Defines the certificate reference when Certificate user authentication mode is selected.",
                                    "type": "object",
                                    "properties": {
                                      "certificateSecretName": {
                                        "type": "string",
                                        "description": "The name of the secret containing the certificate and private key (e.g. stored as .der/.pem or .der/.pfx)."
                                      },
                                      "keySecretName": {
                                        "type": "string",
                                        "description": "The name of the secret containing the certificate private key in PEM or DER format."
                                      },
                                      "intermediateCertificatesSecretName": {
                                        "type": "string",
                                        "description": "The name of the secret containing the combined intermediate certificates in PEM format."
                                      }
                                    },
                                    "required": [
                                      "certificateSecretName"
                                    ]
                                  }
                                },
                                "required": [
                                  "method"
                                ]
                              },
                              "trustSettings": {
                                "description": "Defines server trust settings for the endpoint.",
                                "type": "object",
                                "properties": {
                                  "trustList": {
                                    "type": "string",
                                    "description": "Defines a secret reference for certificates to trust."
                                  }
                                }
                              },
                              "additionalConfiguration": {
                                "type": "string",
                                "description": "Stringified JSON that contains configuration to be used by the connector (e.g., OPC UA, ONVIF)."
                              }
                            },
                            "required": [
                              "endpointType",
                              "address"
                            ]
                          }
                        },
                        "outbound": {
                          "description": "Set of endpoints a device can connect to.",
                          "type": "object",
                          "properties": {
                            "assigned": {
                              "type": "object",
                              "description": "Endpoints the device can connect to.",
                              "additionalProperties": {
                                "type": "object",
                                "description": "Device messaging endpoint model.",
                                "properties": {
                                  "endpointType": {
                                    "type": "string",
                                    "description": "Type of connection used for the messaging endpoint."
                                  },
                                  "address": {
                                    "type": "string",
                                    "description": "The endpoint address to connect to."
                                  }
                                },
                                "required": [
                                  "address"
                                ]
                              }
                            },
                            "unassigned": {
                              "type": "object",
                              "description": "Set of most recently removed endpoints.",
                              "additionalProperties": {
                                "type": "object",
                                "description": "Device messaging endpoint model.",
                                "properties": {
                                  "endpointType": {
                                    "type": "string",
                                    "description": "Type of connection used for the messaging endpoint."
                                  },
                                  "address": {
                                    "type": "string",
                                    "description": "The endpoint address to connect to."
                                  }
                                },
                                "required": [
                                  "address"
                                ]
                              }
                            }
                          },
                          "required": [
                            "assigned"
                          ]
                        }
                      }
                    },
                    "attributes": {
                      "type": "object",
                      "description": "A set of key-value pairs that contain custom attributes set by the customer.",
                      "additionalProperties": {}
                    },
                    "status": {
                      "description": "Device status updates.",
                      "readOnly": true,
                      "type": "object",
                      "properties": {
                        "config": {
                          "description": "Defines the device status config properties.",
                          "readOnly": true,
                          "type": "object",
                          "properties": {
                            "version": {
                              "type": "integer",
                              "format": "int64",
                              "description": "A read-only incremental counter indicating the number of times the configuration has been modified from the perspective of the current actual (edge) state of the CRD. Edge would be the only writer of this value and would sync back up to the cloud. In steady state, this should equal version.",
                              "readOnly": true
                            },
                            "lastTransitionTime": {
                              "type": "string",
                              "format": "date-time",
                              "description": "A read-only timestamp indicating the last time the configuration has been modified from the perspective of the current actual (edge) state of the CRD. Edge would be the only writer of this value and would sync back up to the cloud.",
                              "readOnly": true
                            },
                            "error": {
                              "description": "Object to transfer and persist errors that originate from the edge.",
                              "readOnly": true,
                              "type": "object",
                              "properties": {
                                "code": {
                                  "type": "string",
                                  "description": "Error code for classification of errors (ex: '400', '404', '500', etc.).",
                                  "readOnly": true
                                },
                                "message": {
                                  "type": "string",
                                  "description": "Human-readable helpful error message to provide additional context for error (e.g.,: “Capability ID 'foo' does not exist”).",
                                  "readOnly": true
                                },
                                "details": {
                                  "type": "array",
                                  "description": "Array of error details that describe the status of each error.",
                                  "items": {
                                    "type": "object",
                                    "description": "Defines the error details properties.",
                                    "properties": {
                                      "code": {
                                        "type": "string",
                                        "description": "Multi-part error code for classification and root causing of errors (ex: 400.200.100.432).",
                                        "readOnly": true
                                      },
                                      "message": {
                                        "type": "string",
                                        "description": "Human-readable helpful error message to provide additional context for error (ex: “Authentication method not supported”).",
                                        "readOnly": true
                                      },
                                      "info": {
                                        "type": "string",
                                        "description": "Human-readable helpful detailed text context for debugging (ex: “The following mechanisms are supported...”).",
                                        "readOnly": true
                                      },
                                      "correlationId": {
                                        "type": "string",
                                        "description": "Unique identifier for the transaction to aid in debugging.",
                                        "readOnly": true
                                      }
                                    }
                                  },
                                  "readOnly": true,
                                  "x-ms-identifiers": []
                                }
                              }
                            }
                          }
                        },
                        "endpoints": {
                          "description": "Defines the device status for inbound/outbound endpoints.",
                          "readOnly": true,
                          "type": "object",
                          "properties": {
                            "inbound": {
                              "type": "object",
                              "description": "KeyValue pair representing status of inbound endpoints.",
                              "additionalProperties": {
                                "type": "object",
                                "description": "Defines the device status properties.",
                                "properties": {
                                  "error": {
                                    "description": "Defines the error related to this endpoint.",
                                    "readOnly": true,
                                    "type": "object",
                                    "properties": {
                                      "code": {
                                        "type": "string",
                                        "description": "Error code for classification of errors (ex: '400', '404', '500', etc.).",
                                        "readOnly": true
                                      },
                                      "message": {
                                        "type": "string",
                                        "description": "Human-readable helpful error message to provide additional context for error (e.g.,: “Capability ID 'foo' does not exist”).",
                                        "readOnly": true
                                      },
                                      "details": {
                                        "type": "array",
                                        "description": "Array of error details that describe the status of each error.",
                                        "items": {
                                          "type": "object",
                                          "description": "Defines the error details properties.",
                                          "properties": {
                                            "code": {
                                              "type": "string",
                                              "description": "Multi-part error code for classification and root causing of errors (ex: 400.200.100.432).",
                                              "readOnly": true
                                            },
                                            "message": {
                                              "type": "string",
                                              "description": "Human-readable helpful error message to provide additional context for error (ex: “Authentication method not supported”).",
                                              "readOnly": true
                                            },
                                            "info": {
                                              "type": "string",
                                              "description": "Human-readable helpful detailed text context for debugging (ex: “The following mechanisms are supported...”).",
                                              "readOnly": true
                                            },
                                            "correlationId": {
                                              "type": "string",
                                              "description": "Unique identifier for the transaction to aid in debugging.",
                                              "readOnly": true
                                            }
                                          }
                                        },
                                        "readOnly": true,
                                        "x-ms-identifiers": []
                                      }
                                    }
                                  }
                                }
                              },
                              "readOnly": true
                            }
                          }
                        }
                      }
                    },
                    "version": {
                      "type": "integer",
                      "format": "int64",
                      "description": "An integer that is incremented each time the resource is modified.",
                      "readOnly": true
                    },
                    "lastTransitionTime": {
                      "type": "string",
                      "format": "date-time",
                      "description": "A timestamp (in UTC) that is updated each time the resource is modified.",
                      "readOnly": true
                    },
                    "provisioningState": {
                      "description": "Provisioning state of the resource.",
                      "readOnly": true,
                      "type": "string",
                      "enum": [
                        "Succeeded",
                        "Failed",
                        "Canceled",
                        "Accepted",
                        "Deleting"
                      ],
                      "x-ms-enum": {
                        "name": "ProvisioningState",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Succeeded",
                            "value": "Succeeded",
                            "description": "Resource has been created."
                          },
                          {
                            "name": "Failed",
                            "value": "Failed",
                            "description": "Resource creation failed."
                          },
                          {
                            "name": "Canceled",
                            "value": "Canceled",
                            "description": "Resource creation was canceled."
                          },
                          {
                            "name": "Accepted",
                            "value": "Accepted",
                            "description": "Resource has been accepted by the server."
                          },
                          {
                            "name": "Deleting",
                            "value": "Deleting",
                            "description": "Resource is deleting."
                          }
                        ]
                      }
                    }
                  }
                },
                "etag": {
                  "type": "string",
                  "description": "Resource Tag.",
                  "readOnly": true
                },
                "extendedLocation": {
                  "description": "The extended location.",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ],
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "description": "The extended location type."
                    },
                    "name": {
                      "type": "string",
                      "description": "The extended location name."
                    }
                  },
                  "required": [
                    "type",
                    "name"
                  ]
                }
              }
            },
            "headers": {
              "Azure-AsyncOperation": {
                "type": "string",
                "description": "A link to the status monitor"
              },
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "NamespaceDevices_Update",
        "tags": [
          "NamespaceDevices"
        ],
        "description": "Update a NamespaceDevice",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription. The value must be an UUID.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group. The name is case insensitive.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "x-ms-parameter-location": "method"
          },
          {
            "name": "namespaceName",
            "in": "path",
            "description": "The name of the namespace.",
            "required": true,
            "type": "string",
            "minLength": 3,
            "maxLength": 64,
            "pattern": "^[a-z0-9][a-z0-9-]*[a-z0-9]$"
          },
          {
            "name": "deviceName",
            "in": "path",
            "description": "The name of the device.",
            "required": true,
            "type": "string",
            "minLength": 3,
            "maxLength": 63,
            "pattern": "^[0-9a-zA-Z][a-zA-Z0-9-]*$"
          },
          {
            "name": "properties",
            "in": "body",
            "description": "The resource properties to be updated.",
            "required": true,
            "schema": {
              "type": "object",
              "description": "The type used for update operations of the NamespaceDevice.",
              "properties": {
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "operatingSystemVersion": {
                      "type": "string",
                      "description": "Device operating system version."
                    },
                    "endpoints": {
                      "description": "Property bag containing the device's unassigned and assigned endpoints.",
                      "type": "object",
                      "properties": {
                        "inbound": {
                          "type": "object",
                          "description": "Set of endpoints to connect to the device.",
                          "additionalProperties": {
                            "type": "object",
                            "description": "An endpoint to connect to the device.",
                            "properties": {
                              "endpointType": {
                                "type": "string",
                                "description": "Type of connection endpoint."
                              },
                              "address": {
                                "type": "string",
                                "description": "The endpoint address & port. This can be either an IP address (e.g., 192.168.1.1) or a fully qualified domain name (FQDN, e.g., server.example.com)."
                              },
                              "version": {
                                "type": "string",
                                "description": "Protocol version associated with the endpoint e.g. 1 or 2 for endpointType Microsoft.HTTP, and 3.5 or 5.0 for endpointType Microsoft.Mqtt etc."
                              },
                              "authentication": {
                                "description": "Defines the client authentication mechanism to the server.",
                                "type": "object",
                                "properties": {
                                  "method": {
                                    "type": "string",
                                    "description": "Defines the method to authenticate the user of the client at the server.",
                                    "default": "Certificate",
                                    "enum": [
                                      "Anonymous",
                                      "Certificate",
                                      "UsernamePassword"
                                    ],
                                    "x-ms-enum": {
                                      "name": "AuthenticationMethod",
                                      "modelAsString": true,
                                      "values": [
                                        {
                                          "name": "Anonymous",
                                          "value": "Anonymous",
                                          "description": "The user authentication method is anonymous."
                                        },
                                        {
                                          "name": "Certificate",
                                          "value": "Certificate",
                                          "description": "The user authentication method is an x509 certificate."
                                        },
                                        {
                                          "name": "UsernamePassword",
                                          "value": "UsernamePassword",
                                          "description": "The user authentication method is a username and password."
                                        }
                                      ]
                                    }
                                  },
                                  "usernamePasswordCredentials": {
                                    "description": "Defines the username and password references when UsernamePassword user authentication mode is selected.",
                                    "type": "object",
                                    "properties": {
                                      "usernameSecretName": {
                                        "type": "string",
                                        "description": "The name of the secret containing the username."
                                      },
                                      "passwordSecretName": {
                                        "type": "string",
                                        "description": "The name of the secret containing the password."
                                      }
                                    }
                                  },
                                  "x509Credentials": {
                                    "description": "Defines the certificate reference when Certificate user authentication mode is selected.",
                                    "type": "object",
                                    "properties": {
                                      "certificateSecretName": {
                                        "type": "string",
                                        "description": "The name of the secret containing the certificate and private key (e.g. stored as .der/.pem or .der/.pfx)."
                                      },
                                      "keySecretName": {
                                        "type": "string",
                                        "description": "The name of the secret containing the certificate private key in PEM or DER format."
                                      },
                                      "intermediateCertificatesSecretName": {
                                        "type": "string",
                                        "description": "The name of the secret containing the combined intermediate certificates in PEM format."
                                      }
                                    }
                                  }
                                }
                              },
                              "trustSettings": {
                                "description": "Defines server trust settings for the endpoint.",
                                "type": "object",
                                "properties": {
                                  "trustList": {
                                    "type": "string",
                                    "description": "Defines a secret reference for certificates to trust."
                                  }
                                }
                              },
                              "additionalConfiguration": {
                                "type": "string",
                                "description": "Stringified JSON that contains configuration to be used by the connector (e.g., OPC UA, ONVIF)."
                              }
                            }
                          }
                        },
                        "outbound": {
                          "description": "Set of endpoints a device can connect to.",
                          "type": "object",
                          "properties": {
                            "assigned": {
                              "type": "object",
                              "description": "Endpoints the device can connect to.",
                              "additionalProperties": {
                                "type": "object",
                                "description": "Device messaging endpoint model.",
                                "properties": {
                                  "endpointType": {
                                    "type": "string",
                                    "description": "Type of connection used for the messaging endpoint."
                                  },
                                  "address": {
                                    "type": "string",
                                    "description": "The endpoint address to connect to."
                                  }
                                }
                              }
                            },
                            "unassigned": {
                              "type": "object",
                              "description": "Set of most recently removed endpoints.",
                              "additionalProperties": {
                                "type": "object",
                                "description": "Device messaging endpoint model.",
                                "properties": {
                                  "endpointType": {
                                    "type": "string",
                                    "description": "Type of connection used for the messaging endpoint."
                                  },
                                  "address": {
                                    "type": "string",
                                    "description": "The endpoint address to connect to."
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "attributes": {
                      "type": "object",
                      "description": "A set of key-value pairs that contain custom attributes set by the customer.",
                      "additionalProperties": {}
                    },
                    "enabled": {
                      "type": "boolean",
                      "description": "Indicates if the resource and identity are enabled or not. A disabled device cannot authenticate with Microsoft Entra ID."
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "type": "object",
              "description": "Device definition.",
              "properties": {
                "id": {
                  "type": "string",
                  "format": "arm-id",
                  "description": "Fully qualified resource ID for the resource. E.g. \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}\"",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "description": "The name of the resource",
                  "readOnly": true
                },
                "type": {
                  "type": "string",
                  "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                  "readOnly": true
                },
                "systemData": {
                  "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                  "readOnly": true,
                  "type": "object",
                  "properties": {
                    "createdBy": {
                      "type": "string",
                      "description": "The identity that created the resource."
                    },
                    "createdByType": {
                      "type": "string",
                      "description": "The type of identity that created the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource creation (UTC)."
                    },
                    "lastModifiedBy": {
                      "type": "string",
                      "description": "The identity that last modified the resource."
                    },
                    "lastModifiedByType": {
                      "type": "string",
                      "description": "The type of identity that last modified the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "lastModifiedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource last modification (UTC)"
                    }
                  }
                },
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "x-ms-mutability": [
                    "read",
                    "create",
                    "update"
                  ]
                },
                "location": {
                  "type": "string",
                  "description": "The geo-location where the resource lives",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ]
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "uuid": {
                      "type": "string",
                      "description": "A unique identifier for the device.",
                      "readOnly": true
                    },
                    "enabled": {
                      "type": "boolean",
                      "description": "Indicates if the resource is enabled or not.",
                      "default": true
                    },
                    "externalDeviceId": {
                      "type": "string",
                      "description": "The Device ID provided by the customer.",
                      "x-ms-mutability": [
                        "read",
                        "create"
                      ]
                    },
                    "discoveredDeviceRef": {
                      "type": "string",
                      "description": "Reference to a device. Populated only if the device had been created from discovery flow. Discovered device name must be provided.",
                      "x-ms-mutability": [
                        "read",
                        "create"
                      ]
                    },
                    "manufacturer": {
                      "type": "string",
                      "description": "Device manufacturer.",
                      "x-ms-mutability": [
                        "read",
                        "create"
                      ]
                    },
                    "model": {
                      "type": "string",
                      "description": "Device model.",
                      "x-ms-mutability": [
                        "read",
                        "create"
                      ]
                    },
                    "operatingSystem": {
                      "type": "string",
                      "description": "Device operating system.",
                      "x-ms-mutability": [
                        "read",
                        "create"
                      ]
                    },
                    "operatingSystemVersion": {
                      "type": "string",
                      "description": "Device operating system version."
                    },
                    "endpoints": {
                      "description": "Property bag containing the device's unassigned and assigned endpoints.",
                      "type": "object",
                      "properties": {
                        "inbound": {
                          "type": "object",
                          "description": "Set of endpoints to connect to the device.",
                          "additionalProperties": {
                            "type": "object",
                            "description": "An endpoint to connect to the device.",
                            "properties": {
                              "endpointType": {
                                "type": "string",
                                "description": "Type of connection endpoint."
                              },
                              "address": {
                                "type": "string",
                                "description": "The endpoint address & port. This can be either an IP address (e.g., 192.168.1.1) or a fully qualified domain name (FQDN, e.g., server.example.com)."
                              },
                              "version": {
                                "type": "string",
                                "description": "Protocol version associated with the endpoint e.g. 1 or 2 for endpointType Microsoft.HTTP, and 3.5 or 5.0 for endpointType Microsoft.Mqtt etc."
                              },
                              "authentication": {
                                "description": "Defines the client authentication mechanism to the server.",
                                "type": "object",
                                "properties": {
                                  "method": {
                                    "type": "string",
                                    "description": "Defines the method to authenticate the user of the client at the server.",
                                    "default": "Certificate",
                                    "enum": [
                                      "Anonymous",
                                      "Certificate",
                                      "UsernamePassword"
                                    ],
                                    "x-ms-enum": {
                                      "name": "AuthenticationMethod",
                                      "modelAsString": true,
                                      "values": [
                                        {
                                          "name": "Anonymous",
                                          "value": "Anonymous",
                                          "description": "The user authentication method is anonymous."
                                        },
                                        {
                                          "name": "Certificate",
                                          "value": "Certificate",
                                          "description": "The user authentication method is an x509 certificate."
                                        },
                                        {
                                          "name": "UsernamePassword",
                                          "value": "UsernamePassword",
                                          "description": "The user authentication method is a username and password."
                                        }
                                      ]
                                    }
                                  },
                                  "usernamePasswordCredentials": {
                                    "description": "Defines the username and password references when UsernamePassword user authentication mode is selected.",
                                    "type": "object",
                                    "properties": {
                                      "usernameSecretName": {
                                        "type": "string",
                                        "description": "The name of the secret containing the username."
                                      },
                                      "passwordSecretName": {
                                        "type": "string",
                                        "description": "The name of the secret containing the password."
                                      }
                                    },
                                    "required": [
                                      "usernameSecretName",
                                      "passwordSecretName"
                                    ]
                                  },
                                  "x509Credentials": {
                                    "description": "Defines the certificate reference when Certificate user authentication mode is selected.",
                                    "type": "object",
                                    "properties": {
                                      "certificateSecretName": {
                                        "type": "string",
                                        "description": "The name of the secret containing the certificate and private key (e.g. stored as .der/.pem or .der/.pfx)."
                                      },
                                      "keySecretName": {
                                        "type": "string",
                                        "description": "The name of the secret containing the certificate private key in PEM or DER format."
                                      },
                                      "intermediateCertificatesSecretName": {
                                        "type": "string",
                                        "description": "The name of the secret containing the combined intermediate certificates in PEM format."
                                      }
                                    },
                                    "required": [
                                      "certificateSecretName"
                                    ]
                                  }
                                },
                                "required": [
                                  "method"
                                ]
                              },
                              "trustSettings": {
                                "description": "Defines server trust settings for the endpoint.",
                                "type": "object",
                                "properties": {
                                  "trustList": {
                                    "type": "string",
                                    "description": "Defines a secret reference for certificates to trust."
                                  }
                                }
                              },
                              "additionalConfiguration": {
                                "type": "string",
                                "description": "Stringified JSON that contains configuration to be used by the connector (e.g., OPC UA, ONVIF)."
                              }
                            },
                            "required": [
                              "endpointType",
                              "address"
                            ]
                          }
                        },
                        "outbound": {
                          "description": "Set of endpoints a device can connect to.",
                          "type": "object",
                          "properties": {
                            "assigned": {
                              "type": "object",
                              "description": "Endpoints the device can connect to.",
                              "additionalProperties": {
                                "type": "object",
                                "description": "Device messaging endpoint model.",
                                "properties": {
                                  "endpointType": {
                                    "type": "string",
                                    "description": "Type of connection used for the messaging endpoint."
                                  },
                                  "address": {
                                    "type": "string",
                                    "description": "The endpoint address to connect to."
                                  }
                                },
                                "required": [
                                  "address"
                                ]
                              }
                            },
                            "unassigned": {
                              "type": "object",
                              "description": "Set of most recently removed endpoints.",
                              "additionalProperties": {
                                "type": "object",
                                "description": "Device messaging endpoint model.",
                                "properties": {
                                  "endpointType": {
                                    "type": "string",
                                    "description": "Type of connection used for the messaging endpoint."
                                  },
                                  "address": {
                                    "type": "string",
                                    "description": "The endpoint address to connect to."
                                  }
                                },
                                "required": [
                                  "address"
                                ]
                              }
                            }
                          },
                          "required": [
                            "assigned"
                          ]
                        }
                      }
                    },
                    "attributes": {
                      "type": "object",
                      "description": "A set of key-value pairs that contain custom attributes set by the customer.",
                      "additionalProperties": {}
                    },
                    "status": {
                      "description": "Device status updates.",
                      "readOnly": true,
                      "type": "object",
                      "properties": {
                        "config": {
                          "description": "Defines the device status config properties.",
                          "readOnly": true,
                          "type": "object",
                          "properties": {
                            "version": {
                              "type": "integer",
                              "format": "int64",
                              "description": "A read-only incremental counter indicating the number of times the configuration has been modified from the perspective of the current actual (edge) state of the CRD. Edge would be the only writer of this value and would sync back up to the cloud. In steady state, this should equal version.",
                              "readOnly": true
                            },
                            "lastTransitionTime": {
                              "type": "string",
                              "format": "date-time",
                              "description": "A read-only timestamp indicating the last time the configuration has been modified from the perspective of the current actual (edge) state of the CRD. Edge would be the only writer of this value and would sync back up to the cloud.",
                              "readOnly": true
                            },
                            "error": {
                              "description": "Object to transfer and persist errors that originate from the edge.",
                              "readOnly": true,
                              "type": "object",
                              "properties": {
                                "code": {
                                  "type": "string",
                                  "description": "Error code for classification of errors (ex: '400', '404', '500', etc.).",
                                  "readOnly": true
                                },
                                "message": {
                                  "type": "string",
                                  "description": "Human-readable helpful error message to provide additional context for error (e.g.,: “Capability ID 'foo' does not exist”).",
                                  "readOnly": true
                                },
                                "details": {
                                  "type": "array",
                                  "description": "Array of error details that describe the status of each error.",
                                  "items": {
                                    "type": "object",
                                    "description": "Defines the error details properties.",
                                    "properties": {
                                      "code": {
                                        "type": "string",
                                        "description": "Multi-part error code for classification and root causing of errors (ex: 400.200.100.432).",
                                        "readOnly": true
                                      },
                                      "message": {
                                        "type": "string",
                                        "description": "Human-readable helpful error message to provide additional context for error (ex: “Authentication method not supported”).",
                                        "readOnly": true
                                      },
                                      "info": {
                                        "type": "string",
                                        "description": "Human-readable helpful detailed text context for debugging (ex: “The following mechanisms are supported...”).",
                                        "readOnly": true
                                      },
                                      "correlationId": {
                                        "type": "string",
                                        "description": "Unique identifier for the transaction to aid in debugging.",
                                        "readOnly": true
                                      }
                                    }
                                  },
                                  "readOnly": true,
                                  "x-ms-identifiers": []
                                }
                              }
                            }
                          }
                        },
                        "endpoints": {
                          "description": "Defines the device status for inbound/outbound endpoints.",
                          "readOnly": true,
                          "type": "object",
                          "properties": {
                            "inbound": {
                              "type": "object",
                              "description": "KeyValue pair representing status of inbound endpoints.",
                              "additionalProperties": {
                                "type": "object",
                                "description": "Defines the device status properties.",
                                "properties": {
                                  "error": {
                                    "description": "Defines the error related to this endpoint.",
                                    "readOnly": true,
                                    "type": "object",
                                    "properties": {
                                      "code": {
                                        "type": "string",
                                        "description": "Error code for classification of errors (ex: '400', '404', '500', etc.).",
                                        "readOnly": true
                                      },
                                      "message": {
                                        "type": "string",
                                        "description": "Human-readable helpful error message to provide additional context for error (e.g.,: “Capability ID 'foo' does not exist”).",
                                        "readOnly": true
                                      },
                                      "details": {
                                        "type": "array",
                                        "description": "Array of error details that describe the status of each error.",
                                        "items": {
                                          "type": "object",
                                          "description": "Defines the error details properties.",
                                          "properties": {
                                            "code": {
                                              "type": "string",
                                              "description": "Multi-part error code for classification and root causing of errors (ex: 400.200.100.432).",
                                              "readOnly": true
                                            },
                                            "message": {
                                              "type": "string",
                                              "description": "Human-readable helpful error message to provide additional context for error (ex: “Authentication method not supported”).",
                                              "readOnly": true
                                            },
                                            "info": {
                                              "type": "string",
                                              "description": "Human-readable helpful detailed text context for debugging (ex: “The following mechanisms are supported...”).",
                                              "readOnly": true
                                            },
                                            "correlationId": {
                                              "type": "string",
                                              "description": "Unique identifier for the transaction to aid in debugging.",
                                              "readOnly": true
                                            }
                                          }
                                        },
                                        "readOnly": true,
                                        "x-ms-identifiers": []
                                      }
                                    }
                                  }
                                }
                              },
                              "readOnly": true
                            }
                          }
                        }
                      }
                    },
                    "version": {
                      "type": "integer",
                      "format": "int64",
                      "description": "An integer that is incremented each time the resource is modified.",
                      "readOnly": true
                    },
                    "lastTransitionTime": {
                      "type": "string",
                      "format": "date-time",
                      "description": "A timestamp (in UTC) that is updated each time the resource is modified.",
                      "readOnly": true
                    },
                    "provisioningState": {
                      "description": "Provisioning state of the resource.",
                      "readOnly": true,
                      "type": "string",
                      "enum": [
                        "Succeeded",
                        "Failed",
                        "Canceled",
                        "Accepted",
                        "Deleting"
                      ],
                      "x-ms-enum": {
                        "name": "ProvisioningState",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Succeeded",
                            "value": "Succeeded",
                            "description": "Resource has been created."
                          },
                          {
                            "name": "Failed",
                            "value": "Failed",
                            "description": "Resource creation failed."
                          },
                          {
                            "name": "Canceled",
                            "value": "Canceled",
                            "description": "Resource creation was canceled."
                          },
                          {
                            "name": "Accepted",
                            "value": "Accepted",
                            "description": "Resource has been accepted by the server."
                          },
                          {
                            "name": "Deleting",
                            "value": "Deleting",
                            "description": "Resource is deleting."
                          }
                        ]
                      }
                    }
                  }
                },
                "etag": {
                  "type": "string",
                  "description": "Resource Tag.",
                  "readOnly": true
                },
                "extendedLocation": {
                  "description": "The extended location.",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ],
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "description": "The extended location type."
                    },
                    "name": {
                      "type": "string",
                      "description": "The extended location name."
                    }
                  },
                  "required": [
                    "type",
                    "name"
                  ]
                }
              }
            }
          },
          "202": {
            "description": "Resource update request accepted.",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              },
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "NamespaceDevices_Delete",
        "tags": [
          "NamespaceDevices"
        ],
        "description": "Delete a NamespaceDevice",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription. The value must be an UUID.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group. The name is case insensitive.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "x-ms-parameter-location": "method"
          },
          {
            "name": "namespaceName",
            "in": "path",
            "description": "The name of the namespace.",
            "required": true,
            "type": "string",
            "minLength": 3,
            "maxLength": 64,
            "pattern": "^[a-z0-9][a-z0-9-]*[a-z0-9]$"
          },
          {
            "name": "deviceName",
            "in": "path",
            "description": "The name of the device.",
            "required": true,
            "type": "string",
            "minLength": 3,
            "maxLength": 63,
            "pattern": "^[0-9a-zA-Z][a-zA-Z0-9-]*$"
          }
        ],
        "responses": {
          "202": {
            "description": "Resource deletion accepted.",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              },
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "204": {
            "description": "Resource does not exist."
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeviceRegistry/namespaces/{namespaceName}/discoveredAssets": {
      "get": {
        "operationId": "NamespaceDiscoveredAssets_ListByResourceGroup",
        "tags": [
          "NamespaceDiscoveredAssets"
        ],
        "description": "List NamespaceDiscoveredAsset resources by Namespace",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription. The value must be an UUID.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group. The name is case insensitive.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "x-ms-parameter-location": "method"
          },
          {
            "name": "namespaceName",
            "in": "path",
            "description": "The name of the namespace.",
            "required": true,
            "type": "string",
            "minLength": 3,
            "maxLength": 64,
            "pattern": "^[a-z0-9][a-z0-9-]*[a-z0-9]$"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "type": "object",
              "description": "The response of a NamespaceDiscoveredAsset list operation.",
              "properties": {
                "value": {
                  "type": "array",
                  "description": "The NamespaceDiscoveredAsset items on this page",
                  "items": {
                    "type": "object",
                    "description": "Discovered asset definition.",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "arm-id",
                        "description": "Fully qualified resource ID for the resource. E.g. \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}\"",
                        "readOnly": true
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the resource",
                        "readOnly": true
                      },
                      "type": {
                        "type": "string",
                        "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                        "readOnly": true
                      },
                      "systemData": {
                        "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                        "readOnly": true,
                        "type": "object",
                        "properties": {
                          "createdBy": {
                            "type": "string",
                            "description": "The identity that created the resource."
                          },
                          "createdByType": {
                            "type": "string",
                            "description": "The type of identity that created the resource.",
                            "enum": [
                              "User",
                              "Application",
                              "ManagedIdentity",
                              "Key"
                            ],
                            "x-ms-enum": {
                              "name": "createdByType",
                              "modelAsString": true
                            }
                          },
                          "createdAt": {
                            "type": "string",
                            "format": "date-time",
                            "description": "The timestamp of resource creation (UTC)."
                          },
                          "lastModifiedBy": {
                            "type": "string",
                            "description": "The identity that last modified the resource."
                          },
                          "lastModifiedByType": {
                            "type": "string",
                            "description": "The type of identity that last modified the resource.",
                            "enum": [
                              "User",
                              "Application",
                              "ManagedIdentity",
                              "Key"
                            ],
                            "x-ms-enum": {
                              "name": "createdByType",
                              "modelAsString": true
                            }
                          },
                          "lastModifiedAt": {
                            "type": "string",
                            "format": "date-time",
                            "description": "The timestamp of resource last modification (UTC)"
                          }
                        }
                      },
                      "tags": {
                        "type": "object",
                        "description": "Resource tags.",
                        "additionalProperties": {
                          "type": "string"
                        },
                        "x-ms-mutability": [
                          "read",
                          "create",
                          "update"
                        ]
                      },
                      "location": {
                        "type": "string",
                        "description": "The geo-location where the resource lives",
                        "x-ms-mutability": [
                          "read",
                          "create"
                        ]
                      },
                      "properties": {
                        "description": "The resource-specific properties for this resource.",
                        "x-ms-client-flatten": true,
                        "type": "object",
                        "properties": {
                          "deviceRef": {
                            "description": "Reference to the device that provides data for this asset. Must provide device name & endpoint on the device to use.",
                            "type": "object",
                            "properties": {
                              "deviceName": {
                                "type": "string",
                                "description": "Name of the device resource"
                              },
                              "endpointName": {
                                "type": "string",
                                "description": "The name of endpoint to use"
                              }
                            },
                            "required": [
                              "deviceName",
                              "endpointName"
                            ]
                          },
                          "displayName": {
                            "type": "string",
                            "description": "Human-readable display name."
                          },
                          "assetTypeRefs": {
                            "type": "array",
                            "description": "URIs or type definition IDs.",
                            "items": {
                              "type": "string"
                            }
                          },
                          "description": {
                            "type": "string",
                            "description": "Human-readable description of the asset."
                          },
                          "discoveryId": {
                            "type": "string",
                            "description": "Identifier used to detect changes in the asset."
                          },
                          "externalAssetId": {
                            "type": "string",
                            "description": "Asset ID provided by the customer.",
                            "x-ms-mutability": [
                              "read",
                              "create"
                            ]
                          },
                          "version": {
                            "type": "integer",
                            "format": "int64",
                            "description": "An integer that is incremented each time the resource is modified."
                          },
                          "manufacturer": {
                            "type": "string",
                            "description": "Asset manufacturer."
                          },
                          "manufacturerUri": {
                            "type": "string",
                            "description": "Asset manufacturer URI."
                          },
                          "model": {
                            "type": "string",
                            "description": "Asset model."
                          },
                          "productCode": {
                            "type": "string",
                            "description": "Asset product code."
                          },
                          "hardwareRevision": {
                            "type": "string",
                            "description": "Asset hardware revision number."
                          },
                          "softwareRevision": {
                            "type": "string",
                            "description": "Asset software revision number."
                          },
                          "documentationUri": {
                            "type": "string",
                            "description": "Asset documentation reference."
                          },
                          "serialNumber": {
                            "type": "string",
                            "description": "Asset serial number."
                          },
                          "attributes": {
                            "type": "object",
                            "description": "A set of key-value pairs that contain custom attributes.",
                            "additionalProperties": {}
                          },
                          "defaultDatasetsConfiguration": {
                            "type": "string",
                            "description": "Stringified JSON that contains connector-specific default configuration for all datasets. Each dataset can have its own configuration that overrides the default settings here."
                          },
                          "defaultEventsConfiguration": {
                            "type": "string",
                            "description": "Stringified JSON that contains connector-specific default configuration for all events. Each event can have its own configuration that overrides the default settings here."
                          },
                          "defaultStreamsConfiguration": {
                            "type": "string",
                            "description": "Stringified JSON that contains connector-specific default configuration for all streams. Each stream can have its own configuration that overrides the default settings here."
                          },
                          "defaultManagementGroupsConfiguration": {
                            "type": "string",
                            "description": "Stringified JSON that contains connector-specific default configuration for all management groups. Each management group can have its own configuration that overrides the default settings here."
                          },
                          "defaultDatasetsDestinations": {
                            "type": "array",
                            "description": "Default destinations for a dataset.",
                            "items": {
                              "type": "object",
                              "description": "The type of the destination.",
                              "properties": {
                                "target": {
                                  "description": "Target destination.",
                                  "type": "string",
                                  "enum": [
                                    "Mqtt",
                                    "BrokerStateStore",
                                    "Storage"
                                  ],
                                  "x-ms-enum": {
                                    "name": "DatasetDestinationTarget",
                                    "modelAsString": true,
                                    "values": [
                                      {
                                        "name": "Mqtt",
                                        "value": "Mqtt",
                                        "description": "MQTT target."
                                      },
                                      {
                                        "name": "BrokerStateStore",
                                        "value": "BrokerStateStore",
                                        "description": "Broker State Store target."
                                      },
                                      {
                                        "name": "Storage",
                                        "value": "Storage",
                                        "description": "Storage target."
                                      }
                                    ]
                                  }
                                }
                              },
                              "discriminator": "target",
                              "required": [
                                "target"
                              ]
                            },
                            "x-ms-identifiers": []
                          },
                          "defaultEventsDestinations": {
                            "type": "array",
                            "description": "Default destinations for an event.",
                            "items": {
                              "type": "object",
                              "description": "The type of the destination.",
                              "properties": {
                                "target": {
                                  "description": "Target destination.",
                                  "type": "string",
                                  "enum": [
                                    "Mqtt",
                                    "Storage"
                                  ],
                                  "x-ms-enum": {
                                    "name": "EventDestinationTarget",
                                    "modelAsString": true,
                                    "values": [
                                      {
                                        "name": "Mqtt",
                                        "value": "Mqtt",
                                        "description": "MQTT target."
                                      },
                                      {
                                        "name": "Storage",
                                        "value": "Storage",
                                        "description": "Storage target."
                                      }
                                    ]
                                  }
                                }
                              },
                              "discriminator": "target",
                              "required": [
                                "target"
                              ]
                            },
                            "x-ms-identifiers": []
                          },
                          "defaultStreamsDestinations": {
                            "type": "array",
                            "description": "Default destinations for a stream.",
                            "items": {
                              "type": "object",
                              "description": "The type of the destination.",
                              "properties": {
                                "target": {
                                  "description": "Target destination.",
                                  "type": "string",
                                  "enum": [
                                    "Mqtt",
                                    "Storage"
                                  ],
                                  "x-ms-enum": {
                                    "name": "StreamDestinationTarget",
                                    "modelAsString": true,
                                    "values": [
                                      {
                                        "name": "Mqtt",
                                        "value": "Mqtt",
                                        "description": "MQTT target."
                                      },
                                      {
                                        "name": "Storage",
                                        "value": "Storage",
                                        "description": "Storage target."
                                      }
                                    ]
                                  }
                                }
                              },
                              "discriminator": "target",
                              "required": [
                                "target"
                              ]
                            },
                            "x-ms-identifiers": []
                          },
                          "datasets": {
                            "type": "array",
                            "description": "Array of datasets that are part of the asset. Each dataset spec describes the data points that make up the set.",
                            "items": {
                              "type": "object",
                              "description": "Defines the dataset properties.",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "Name of the dataset."
                                },
                                "dataSource": {
                                  "type": "string",
                                  "description": "Reference to a data source for a given dataset."
                                },
                                "typeRef": {
                                  "type": "string",
                                  "description": "URI or type definition ID."
                                },
                                "datasetConfiguration": {
                                  "type": "string",
                                  "description": "Stringified JSON that contains connector-specific properties that describes configuration for the specific dataset."
                                },
                                "destinations": {
                                  "type": "array",
                                  "description": "Destinations for a dataset.",
                                  "items": {
                                    "type": "object",
                                    "description": "The type of the destination.",
                                    "properties": {
                                      "target": {
                                        "description": "Target destination.",
                                        "type": "string",
                                        "enum": [
                                          "Mqtt",
                                          "BrokerStateStore",
                                          "Storage"
                                        ],
                                        "x-ms-enum": {
                                          "name": "DatasetDestinationTarget",
                                          "modelAsString": true,
                                          "values": [
                                            {
                                              "name": "Mqtt",
                                              "value": "Mqtt",
                                              "description": "MQTT target."
                                            },
                                            {
                                              "name": "BrokerStateStore",
                                              "value": "BrokerStateStore",
                                              "description": "Broker State Store target."
                                            },
                                            {
                                              "name": "Storage",
                                              "value": "Storage",
                                              "description": "Storage target."
                                            }
                                          ]
                                        }
                                      }
                                    },
                                    "discriminator": "target",
                                    "required": [
                                      "target"
                                    ]
                                  },
                                  "x-ms-identifiers": []
                                },
                                "dataPoints": {
                                  "type": "array",
                                  "description": "Array of data points that are part of the dataset. Each data point can have per-data point configuration.",
                                  "items": {
                                    "type": "object",
                                    "description": "Defines the discovered dataset data point properties.",
                                    "properties": {
                                      "name": {
                                        "type": "string",
                                        "description": "The name of the data point."
                                      },
                                      "dataSource": {
                                        "type": "string",
                                        "description": "The address of the source of the data in the asset (e.g. URL) so that a client can access the data source on the asset."
                                      },
                                      "dataPointConfiguration": {
                                        "type": "string",
                                        "description": "Stringified JSON that contains connector-specific configuration for the data point. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize."
                                      },
                                      "lastUpdatedOn": {
                                        "type": "string",
                                        "format": "date-time",
                                        "description": "UTC timestamp indicating when the data point was added or modified."
                                      },
                                      "typeRef": {
                                        "type": "string",
                                        "description": "URI or type definition ID."
                                      }
                                    },
                                    "required": [
                                      "name",
                                      "dataSource"
                                    ]
                                  },
                                  "x-ms-identifiers": []
                                },
                                "lastUpdatedOn": {
                                  "type": "string",
                                  "format": "date-time",
                                  "description": "Timestamp (in UTC) indicating when the dataset was added or modified."
                                }
                              },
                              "required": [
                                "name"
                              ]
                            },
                            "x-ms-identifiers": []
                          },
                          "eventGroups": {
                            "type": "array",
                            "description": "Array of event groups that are part of the asset. Each event group can have per-event group configuration.",
                            "items": {
                              "type": "object",
                              "description": "Defines the discovered event group properties.",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "The name of the event group."
                                },
                                "dataSource": {
                                  "type": "string",
                                  "description": "The address of the notifier of the event group in the asset (e.g. URL) so that a client can access the event group on the asset."
                                },
                                "eventGroupConfiguration": {
                                  "type": "string",
                                  "description": "Stringified JSON that contains connector-specific configuration for the event group. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize."
                                },
                                "defaultDestinations": {
                                  "type": "array",
                                  "description": "Destinations for events. Default destinations when destinations is not defined at the event level.",
                                  "items": {
                                    "type": "object",
                                    "description": "The type of the destination.",
                                    "properties": {
                                      "target": {
                                        "description": "Target destination.",
                                        "type": "string",
                                        "enum": [
                                          "Mqtt",
                                          "Storage"
                                        ],
                                        "x-ms-enum": {
                                          "name": "EventDestinationTarget",
                                          "modelAsString": true,
                                          "values": [
                                            {
                                              "name": "Mqtt",
                                              "value": "Mqtt",
                                              "description": "MQTT target."
                                            },
                                            {
                                              "name": "Storage",
                                              "value": "Storage",
                                              "description": "Storage target."
                                            }
                                          ]
                                        }
                                      }
                                    },
                                    "discriminator": "target",
                                    "required": [
                                      "target"
                                    ]
                                  },
                                  "x-ms-identifiers": []
                                },
                                "typeRef": {
                                  "type": "string",
                                  "description": "URI or type definition ID."
                                },
                                "events": {
                                  "type": "array",
                                  "description": "Array of events that are part of the event group.",
                                  "items": {
                                    "type": "object",
                                    "description": "Defines the event properties.",
                                    "properties": {
                                      "name": {
                                        "type": "string",
                                        "description": "The name of the event."
                                      },
                                      "dataSource": {
                                        "type": "string",
                                        "description": "Reference to a data source for a given event."
                                      },
                                      "eventConfiguration": {
                                        "type": "string",
                                        "description": "Stringified JSON that contains connector-specific configuration for the event. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize."
                                      },
                                      "destinations": {
                                        "type": "array",
                                        "description": "Destinations for an event.",
                                        "items": {
                                          "type": "object",
                                          "description": "The type of the destination.",
                                          "properties": {
                                            "target": {
                                              "description": "Target destination.",
                                              "type": "string",
                                              "enum": [
                                                "Mqtt",
                                                "Storage"
                                              ],
                                              "x-ms-enum": {
                                                "name": "EventDestinationTarget",
                                                "modelAsString": true,
                                                "values": [
                                                  {
                                                    "name": "Mqtt",
                                                    "value": "Mqtt",
                                                    "description": "MQTT target."
                                                  },
                                                  {
                                                    "name": "Storage",
                                                    "value": "Storage",
                                                    "description": "Storage target."
                                                  }
                                                ]
                                              }
                                            }
                                          },
                                          "discriminator": "target",
                                          "required": [
                                            "target"
                                          ]
                                        },
                                        "x-ms-identifiers": []
                                      },
                                      "typeRef": {
                                        "type": "string",
                                        "description": "URI or type definition ID."
                                      },
                                      "lastUpdatedOn": {
                                        "type": "string",
                                        "format": "date-time",
                                        "description": "UTC timestamp indicating when the event was added or modified."
                                      }
                                    },
                                    "required": [
                                      "name"
                                    ]
                                  },
                                  "x-ms-identifiers": []
                                }
                              },
                              "required": [
                                "name"
                              ]
                            },
                            "x-ms-identifiers": []
                          },
                          "streams": {
                            "type": "array",
                            "description": "Array of streams that are part of the asset. Each stream can have a per-stream configuration.",
                            "items": {
                              "type": "object",
                              "description": "Defines the stream properties.",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "Name of the stream definition."
                                },
                                "streamConfiguration": {
                                  "type": "string",
                                  "description": "Stringified JSON that contains connector-specific configuration for the specific stream."
                                },
                                "typeRef": {
                                  "type": "string",
                                  "description": "URI or type definition ID."
                                },
                                "destinations": {
                                  "type": "array",
                                  "description": "Destinations for a stream.",
                                  "items": {
                                    "type": "object",
                                    "description": "The type of the destination.",
                                    "properties": {
                                      "target": {
                                        "description": "Target destination.",
                                        "type": "string",
                                        "enum": [
                                          "Mqtt",
                                          "Storage"
                                        ],
                                        "x-ms-enum": {
                                          "name": "StreamDestinationTarget",
                                          "modelAsString": true,
                                          "values": [
                                            {
                                              "name": "Mqtt",
                                              "value": "Mqtt",
                                              "description": "MQTT target."
                                            },
                                            {
                                              "name": "Storage",
                                              "value": "Storage",
                                              "description": "Storage target."
                                            }
                                          ]
                                        }
                                      }
                                    },
                                    "discriminator": "target",
                                    "required": [
                                      "target"
                                    ]
                                  },
                                  "x-ms-identifiers": []
                                },
                                "lastUpdatedOn": {
                                  "type": "string",
                                  "format": "date-time",
                                  "description": "Timestamp (in UTC) indicating when the stream was added or modified."
                                }
                              },
                              "required": [
                                "name"
                              ]
                            },
                            "x-ms-identifiers": []
                          },
                          "managementGroups": {
                            "type": "array",
                            "description": "Array of management groups that are part of the asset. Each management group can have a per-group configuration.",
                            "items": {
                              "type": "object",
                              "description": "Defines the management group properties.",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "Name of the management group."
                                },
                                "managementGroupConfiguration": {
                                  "type": "string",
                                  "description": "Stringified JSON that contains connector-specific configuration for the management group."
                                },
                                "typeRef": {
                                  "type": "string",
                                  "description": "URI or type definition ID."
                                },
                                "dataSource": {
                                  "type": "string",
                                  "description": "Reference to a data source for a given management group."
                                },
                                "defaultTopic": {
                                  "type": "string",
                                  "description": "Default MQTT topic path on which a client will receive the request for all actions that are part of the management group."
                                },
                                "defaultTimeoutInSeconds": {
                                  "type": "integer",
                                  "format": "int32",
                                  "description": "Default response timeout for all actions that are part of the management group.",
                                  "default": 100
                                },
                                "actions": {
                                  "type": "array",
                                  "description": "Array of actions that are part of the management group. Each action can have an individual configuration.",
                                  "items": {
                                    "type": "object",
                                    "description": "Defines the action properties.",
                                    "properties": {
                                      "name": {
                                        "type": "string",
                                        "description": "Name of the action."
                                      },
                                      "actionConfiguration": {
                                        "type": "string",
                                        "description": "Stringified JSON that contains connector-specific configuration for the action."
                                      },
                                      "targetUri": {
                                        "type": "string",
                                        "description": "The target URI on which a client can invoke the specific action."
                                      },
                                      "typeRef": {
                                        "type": "string",
                                        "description": "URI or type definition ID."
                                      },
                                      "topic": {
                                        "type": "string",
                                        "description": "The MQTT topic path on which a client will receive the request for the action."
                                      },
                                      "actionType": {
                                        "type": "string",
                                        "description": "The type of the action.",
                                        "default": "Call",
                                        "enum": [
                                          "Call",
                                          "Read",
                                          "Write"
                                        ],
                                        "x-ms-enum": {
                                          "name": "NamespaceDiscoveredManagementActionType",
                                          "modelAsString": true,
                                          "values": [
                                            {
                                              "name": "Call",
                                              "value": "Call",
                                              "description": "Call action type."
                                            },
                                            {
                                              "name": "Read",
                                              "value": "Read",
                                              "description": "Read action type."
                                            },
                                            {
                                              "name": "Write",
                                              "value": "Write",
                                              "description": "Write action type."
                                            }
                                          ]
                                        }
                                      },
                                      "timeoutInSeconds": {
                                        "type": "integer",
                                        "format": "int32",
                                        "description": "Response timeout for the action."
                                      },
                                      "lastUpdatedOn": {
                                        "type": "string",
                                        "format": "date-time",
                                        "description": "Timestamp (in UTC) indicating when the management action was added or modified."
                                      }
                                    },
                                    "required": [
                                      "name",
                                      "targetUri"
                                    ]
                                  },
                                  "x-ms-identifiers": []
                                },
                                "lastUpdatedOn": {
                                  "type": "string",
                                  "format": "date-time",
                                  "description": "Timestamp (in UTC) indicating when the management group was added or modified."
                                }
                              },
                              "required": [
                                "name"
                              ]
                            },
                            "x-ms-identifiers": []
                          },
                          "provisioningState": {
                            "description": "Provisioning state of the resource.",
                            "readOnly": true,
                            "type": "string",
                            "enum": [
                              "Succeeded",
                              "Failed",
                              "Canceled",
                              "Accepted",
                              "Deleting"
                            ],
                            "x-ms-enum": {
                              "name": "ProvisioningState",
                              "modelAsString": true,
                              "values": [
                                {
                                  "name": "Succeeded",
                                  "value": "Succeeded",
                                  "description": "Resource has been created."
                                },
                                {
                                  "name": "Failed",
                                  "value": "Failed",
                                  "description": "Resource creation failed."
                                },
                                {
                                  "name": "Canceled",
                                  "value": "Canceled",
                                  "description": "Resource creation was canceled."
                                },
                                {
                                  "name": "Accepted",
                                  "value": "Accepted",
                                  "description": "Resource has been accepted by the server."
                                },
                                {
                                  "name": "Deleting",
                                  "value": "Deleting",
                                  "description": "Resource is deleting."
                                }
                              ]
                            }
                          }
                        },
                        "required": [
                          "deviceRef",
                          "discoveryId",
                          "version"
                        ]
                      },
                      "extendedLocation": {
                        "description": "The extended location.",
                        "x-ms-mutability": [
                          "read",
                          "create"
                        ],
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "description": "The extended location type."
                          },
                          "name": {
                            "type": "string",
                            "description": "The extended location name."
                          }
                        },
                        "required": [
                          "type",
                          "name"
                        ]
                      }
                    },
                    "required": [
                      "extendedLocation"
                    ]
                  }
                },
                "nextLink": {
                  "type": "string",
                  "format": "uri",
                  "description": "The link to the next page of items"
                }
              },
              "required": [
                "value"
              ]
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeviceRegistry/namespaces/{namespaceName}/discoveredAssets/{discoveredAssetName}": {
      "get": {
        "operationId": "NamespaceDiscoveredAssets_Get",
        "tags": [
          "NamespaceDiscoveredAssets"
        ],
        "description": "Get a NamespaceDiscoveredAsset",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription. The value must be an UUID.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group. The name is case insensitive.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "x-ms-parameter-location": "method"
          },
          {
            "name": "namespaceName",
            "in": "path",
            "description": "The name of the namespace.",
            "required": true,
            "type": "string",
            "minLength": 3,
            "maxLength": 64,
            "pattern": "^[a-z0-9][a-z0-9-]*[a-z0-9]$"
          },
          {
            "name": "discoveredAssetName",
            "in": "path",
            "description": "The name of the discovered asset.",
            "required": true,
            "type": "string",
            "minLength": 3,
            "maxLength": 63,
            "pattern": "^[a-z0-9][a-z0-9-]*[a-z0-9]$"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "type": "object",
              "description": "Discovered asset definition.",
              "properties": {
                "id": {
                  "type": "string",
                  "format": "arm-id",
                  "description": "Fully qualified resource ID for the resource. E.g. \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}\"",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "description": "The name of the resource",
                  "readOnly": true
                },
                "type": {
                  "type": "string",
                  "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                  "readOnly": true
                },
                "systemData": {
                  "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                  "readOnly": true,
                  "type": "object",
                  "properties": {
                    "createdBy": {
                      "type": "string",
                      "description": "The identity that created the resource."
                    },
                    "createdByType": {
                      "type": "string",
                      "description": "The type of identity that created the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource creation (UTC)."
                    },
                    "lastModifiedBy": {
                      "type": "string",
                      "description": "The identity that last modified the resource."
                    },
                    "lastModifiedByType": {
                      "type": "string",
                      "description": "The type of identity that last modified the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "lastModifiedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource last modification (UTC)"
                    }
                  }
                },
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "x-ms-mutability": [
                    "read",
                    "create",
                    "update"
                  ]
                },
                "location": {
                  "type": "string",
                  "description": "The geo-location where the resource lives",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ]
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "deviceRef": {
                      "description": "Reference to the device that provides data for this asset. Must provide device name & endpoint on the device to use.",
                      "type": "object",
                      "properties": {
                        "deviceName": {
                          "type": "string",
                          "description": "Name of the device resource"
                        },
                        "endpointName": {
                          "type": "string",
                          "description": "The name of endpoint to use"
                        }
                      },
                      "required": [
                        "deviceName",
                        "endpointName"
                      ]
                    },
                    "displayName": {
                      "type": "string",
                      "description": "Human-readable display name."
                    },
                    "assetTypeRefs": {
                      "type": "array",
                      "description": "URIs or type definition IDs.",
                      "items": {
                        "type": "string"
                      }
                    },
                    "description": {
                      "type": "string",
                      "description": "Human-readable description of the asset."
                    },
                    "discoveryId": {
                      "type": "string",
                      "description": "Identifier used to detect changes in the asset."
                    },
                    "externalAssetId": {
                      "type": "string",
                      "description": "Asset ID provided by the customer.",
                      "x-ms-mutability": [
                        "read",
                        "create"
                      ]
                    },
                    "version": {
                      "type": "integer",
                      "format": "int64",
                      "description": "An integer that is incremented each time the resource is modified."
                    },
                    "manufacturer": {
                      "type": "string",
                      "description": "Asset manufacturer."
                    },
                    "manufacturerUri": {
                      "type": "string",
                      "description": "Asset manufacturer URI."
                    },
                    "model": {
                      "type": "string",
                      "description": "Asset model."
                    },
                    "productCode": {
                      "type": "string",
                      "description": "Asset product code."
                    },
                    "hardwareRevision": {
                      "type": "string",
                      "description": "Asset hardware revision number."
                    },
                    "softwareRevision": {
                      "type": "string",
                      "description": "Asset software revision number."
                    },
                    "documentationUri": {
                      "type": "string",
                      "description": "Asset documentation reference."
                    },
                    "serialNumber": {
                      "type": "string",
                      "description": "Asset serial number."
                    },
                    "attributes": {
                      "type": "object",
                      "description": "A set of key-value pairs that contain custom attributes.",
                      "additionalProperties": {}
                    },
                    "defaultDatasetsConfiguration": {
                      "type": "string",
                      "description": "Stringified JSON that contains connector-specific default configuration for all datasets. Each dataset can have its own configuration that overrides the default settings here."
                    },
                    "defaultEventsConfiguration": {
                      "type": "string",
                      "description": "Stringified JSON that contains connector-specific default configuration for all events. Each event can have its own configuration that overrides the default settings here."
                    },
                    "defaultStreamsConfiguration": {
                      "type": "string",
                      "description": "Stringified JSON that contains connector-specific default configuration for all streams. Each stream can have its own configuration that overrides the default settings here."
                    },
                    "defaultManagementGroupsConfiguration": {
                      "type": "string",
                      "description": "Stringified JSON that contains connector-specific default configuration for all management groups. Each management group can have its own configuration that overrides the default settings here."
                    },
                    "defaultDatasetsDestinations": {
                      "type": "array",
                      "description": "Default destinations for a dataset.",
                      "items": {
                        "type": "object",
                        "description": "The type of the destination.",
                        "properties": {
                          "target": {
                            "description": "Target destination.",
                            "type": "string",
                            "enum": [
                              "Mqtt",
                              "BrokerStateStore",
                              "Storage"
                            ],
                            "x-ms-enum": {
                              "name": "DatasetDestinationTarget",
                              "modelAsString": true,
                              "values": [
                                {
                                  "name": "Mqtt",
                                  "value": "Mqtt",
                                  "description": "MQTT target."
                                },
                                {
                                  "name": "BrokerStateStore",
                                  "value": "BrokerStateStore",
                                  "description": "Broker State Store target."
                                },
                                {
                                  "name": "Storage",
                                  "value": "Storage",
                                  "description": "Storage target."
                                }
                              ]
                            }
                          }
                        },
                        "discriminator": "target",
                        "required": [
                          "target"
                        ]
                      },
                      "x-ms-identifiers": []
                    },
                    "defaultEventsDestinations": {
                      "type": "array",
                      "description": "Default destinations for an event.",
                      "items": {
                        "type": "object",
                        "description": "The type of the destination.",
                        "properties": {
                          "target": {
                            "description": "Target destination.",
                            "type": "string",
                            "enum": [
                              "Mqtt",
                              "Storage"
                            ],
                            "x-ms-enum": {
                              "name": "EventDestinationTarget",
                              "modelAsString": true,
                              "values": [
                                {
                                  "name": "Mqtt",
                                  "value": "Mqtt",
                                  "description": "MQTT target."
                                },
                                {
                                  "name": "Storage",
                                  "value": "Storage",
                                  "description": "Storage target."
                                }
                              ]
                            }
                          }
                        },
                        "discriminator": "target",
                        "required": [
                          "target"
                        ]
                      },
                      "x-ms-identifiers": []
                    },
                    "defaultStreamsDestinations": {
                      "type": "array",
                      "description": "Default destinations for a stream.",
                      "items": {
                        "type": "object",
                        "description": "The type of the destination.",
                        "properties": {
                          "target": {
                            "description": "Target destination.",
                            "type": "string",
                            "enum": [
                              "Mqtt",
                              "Storage"
                            ],
                            "x-ms-enum": {
                              "name": "StreamDestinationTarget",
                              "modelAsString": true,
                              "values": [
                                {
                                  "name": "Mqtt",
                                  "value": "Mqtt",
                                  "description": "MQTT target."
                                },
                                {
                                  "name": "Storage",
                                  "value": "Storage",
                                  "description": "Storage target."
                                }
                              ]
                            }
                          }
                        },
                        "discriminator": "target",
                        "required": [
                          "target"
                        ]
                      },
                      "x-ms-identifiers": []
                    },
                    "datasets": {
                      "type": "array",
                      "description": "Array of datasets that are part of the asset. Each dataset spec describes the data points that make up the set.",
                      "items": {
                        "type": "object",
                        "description": "Defines the dataset properties.",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "Name of the dataset."
                          },
                          "dataSource": {
                            "type": "string",
                            "description": "Reference to a data source for a given dataset."
                          },
                          "typeRef": {
                            "type": "string",
                            "description": "URI or type definition ID."
                          },
                          "datasetConfiguration": {
                            "type": "string",
                            "description": "Stringified JSON that contains connector-specific properties that describes configuration for the specific dataset."
                          },
                          "destinations": {
                            "type": "array",
                            "description": "Destinations for a dataset.",
                            "items": {
                              "type": "object",
                              "description": "The type of the destination.",
                              "properties": {
                                "target": {
                                  "description": "Target destination.",
                                  "type": "string",
                                  "enum": [
                                    "Mqtt",
                                    "BrokerStateStore",
                                    "Storage"
                                  ],
                                  "x-ms-enum": {
                                    "name": "DatasetDestinationTarget",
                                    "modelAsString": true,
                                    "values": [
                                      {
                                        "name": "Mqtt",
                                        "value": "Mqtt",
                                        "description": "MQTT target."
                                      },
                                      {
                                        "name": "BrokerStateStore",
                                        "value": "BrokerStateStore",
                                        "description": "Broker State Store target."
                                      },
                                      {
                                        "name": "Storage",
                                        "value": "Storage",
                                        "description": "Storage target."
                                      }
                                    ]
                                  }
                                }
                              },
                              "discriminator": "target",
                              "required": [
                                "target"
                              ]
                            },
                            "x-ms-identifiers": []
                          },
                          "dataPoints": {
                            "type": "array",
                            "description": "Array of data points that are part of the dataset. Each data point can have per-data point configuration.",
                            "items": {
                              "type": "object",
                              "description": "Defines the discovered dataset data point properties.",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "The name of the data point."
                                },
                                "dataSource": {
                                  "type": "string",
                                  "description": "The address of the source of the data in the asset (e.g. URL) so that a client can access the data source on the asset."
                                },
                                "dataPointConfiguration": {
                                  "type": "string",
                                  "description": "Stringified JSON that contains connector-specific configuration for the data point. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize."
                                },
                                "lastUpdatedOn": {
                                  "type": "string",
                                  "format": "date-time",
                                  "description": "UTC timestamp indicating when the data point was added or modified."
                                },
                                "typeRef": {
                                  "type": "string",
                                  "description": "URI or type definition ID."
                                }
                              },
                              "required": [
                                "name",
                                "dataSource"
                              ]
                            },
                            "x-ms-identifiers": []
                          },
                          "lastUpdatedOn": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Timestamp (in UTC) indicating when the dataset was added or modified."
                          }
                        },
                        "required": [
                          "name"
                        ]
                      },
                      "x-ms-identifiers": []
                    },
                    "eventGroups": {
                      "type": "array",
                      "description": "Array of event groups that are part of the asset. Each event group can have per-event group configuration.",
                      "items": {
                        "type": "object",
                        "description": "Defines the discovered event group properties.",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "The name of the event group."
                          },
                          "dataSource": {
                            "type": "string",
                            "description": "The address of the notifier of the event group in the asset (e.g. URL) so that a client can access the event group on the asset."
                          },
                          "eventGroupConfiguration": {
                            "type": "string",
                            "description": "Stringified JSON that contains connector-specific configuration for the event group. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize."
                          },
                          "defaultDestinations": {
                            "type": "array",
                            "description": "Destinations for events. Default destinations when destinations is not defined at the event level.",
                            "items": {
                              "type": "object",
                              "description": "The type of the destination.",
                              "properties": {
                                "target": {
                                  "description": "Target destination.",
                                  "type": "string",
                                  "enum": [
                                    "Mqtt",
                                    "Storage"
                                  ],
                                  "x-ms-enum": {
                                    "name": "EventDestinationTarget",
                                    "modelAsString": true,
                                    "values": [
                                      {
                                        "name": "Mqtt",
                                        "value": "Mqtt",
                                        "description": "MQTT target."
                                      },
                                      {
                                        "name": "Storage",
                                        "value": "Storage",
                                        "description": "Storage target."
                                      }
                                    ]
                                  }
                                }
                              },
                              "discriminator": "target",
                              "required": [
                                "target"
                              ]
                            },
                            "x-ms-identifiers": []
                          },
                          "typeRef": {
                            "type": "string",
                            "description": "URI or type definition ID."
                          },
                          "events": {
                            "type": "array",
                            "description": "Array of events that are part of the event group.",
                            "items": {
                              "type": "object",
                              "description": "Defines the event properties.",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "The name of the event."
                                },
                                "dataSource": {
                                  "type": "string",
                                  "description": "Reference to a data source for a given event."
                                },
                                "eventConfiguration": {
                                  "type": "string",
                                  "description": "Stringified JSON that contains connector-specific configuration for the event. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize."
                                },
                                "destinations": {
                                  "type": "array",
                                  "description": "Destinations for an event.",
                                  "items": {
                                    "type": "object",
                                    "description": "The type of the destination.",
                                    "properties": {
                                      "target": {
                                        "description": "Target destination.",
                                        "type": "string",
                                        "enum": [
                                          "Mqtt",
                                          "Storage"
                                        ],
                                        "x-ms-enum": {
                                          "name": "EventDestinationTarget",
                                          "modelAsString": true,
                                          "values": [
                                            {
                                              "name": "Mqtt",
                                              "value": "Mqtt",
                                              "description": "MQTT target."
                                            },
                                            {
                                              "name": "Storage",
                                              "value": "Storage",
                                              "description": "Storage target."
                                            }
                                          ]
                                        }
                                      }
                                    },
                                    "discriminator": "target",
                                    "required": [
                                      "target"
                                    ]
                                  },
                                  "x-ms-identifiers": []
                                },
                                "typeRef": {
                                  "type": "string",
                                  "description": "URI or type definition ID."
                                },
                                "lastUpdatedOn": {
                                  "type": "string",
                                  "format": "date-time",
                                  "description": "UTC timestamp indicating when the event was added or modified."
                                }
                              },
                              "required": [
                                "name"
                              ]
                            },
                            "x-ms-identifiers": []
                          }
                        },
                        "required": [
                          "name"
                        ]
                      },
                      "x-ms-identifiers": []
                    },
                    "streams": {
                      "type": "array",
                      "description": "Array of streams that are part of the asset. Each stream can have a per-stream configuration.",
                      "items": {
                        "type": "object",
                        "description": "Defines the stream properties.",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "Name of the stream definition."
                          },
                          "streamConfiguration": {
                            "type": "string",
                            "description": "Stringified JSON that contains connector-specific configuration for the specific stream."
                          },
                          "typeRef": {
                            "type": "string",
                            "description": "URI or type definition ID."
                          },
                          "destinations": {
                            "type": "array",
                            "description": "Destinations for a stream.",
                            "items": {
                              "type": "object",
                              "description": "The type of the destination.",
                              "properties": {
                                "target": {
                                  "description": "Target destination.",
                                  "type": "string",
                                  "enum": [
                                    "Mqtt",
                                    "Storage"
                                  ],
                                  "x-ms-enum": {
                                    "name": "StreamDestinationTarget",
                                    "modelAsString": true,
                                    "values": [
                                      {
                                        "name": "Mqtt",
                                        "value": "Mqtt",
                                        "description": "MQTT target."
                                      },
                                      {
                                        "name": "Storage",
                                        "value": "Storage",
                                        "description": "Storage target."
                                      }
                                    ]
                                  }
                                }
                              },
                              "discriminator": "target",
                              "required": [
                                "target"
                              ]
                            },
                            "x-ms-identifiers": []
                          },
                          "lastUpdatedOn": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Timestamp (in UTC) indicating when the stream was added or modified."
                          }
                        },
                        "required": [
                          "name"
                        ]
                      },
                      "x-ms-identifiers": []
                    },
                    "managementGroups": {
                      "type": "array",
                      "description": "Array of management groups that are part of the asset. Each management group can have a per-group configuration.",
                      "items": {
                        "type": "object",
                        "description": "Defines the management group properties.",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "Name of the management group."
                          },
                          "managementGroupConfiguration": {
                            "type": "string",
                            "description": "Stringified JSON that contains connector-specific configuration for the management group."
                          },
                          "typeRef": {
                            "type": "string",
                            "description": "URI or type definition ID."
                          },
                          "dataSource": {
                            "type": "string",
                            "description": "Reference to a data source for a given management group."
                          },
                          "defaultTopic": {
                            "type": "string",
                            "description": "Default MQTT topic path on which a client will receive the request for all actions that are part of the management group."
                          },
                          "defaultTimeoutInSeconds": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Default response timeout for all actions that are part of the management group.",
                            "default": 100
                          },
                          "actions": {
                            "type": "array",
                            "description": "Array of actions that are part of the management group. Each action can have an individual configuration.",
                            "items": {
                              "type": "object",
                              "description": "Defines the action properties.",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "Name of the action."
                                },
                                "actionConfiguration": {
                                  "type": "string",
                                  "description": "Stringified JSON that contains connector-specific configuration for the action."
                                },
                                "targetUri": {
                                  "type": "string",
                                  "description": "The target URI on which a client can invoke the specific action."
                                },
                                "typeRef": {
                                  "type": "string",
                                  "description": "URI or type definition ID."
                                },
                                "topic": {
                                  "type": "string",
                                  "description": "The MQTT topic path on which a client will receive the request for the action."
                                },
                                "actionType": {
                                  "type": "string",
                                  "description": "The type of the action.",
                                  "default": "Call",
                                  "enum": [
                                    "Call",
                                    "Read",
                                    "Write"
                                  ],
                                  "x-ms-enum": {
                                    "name": "NamespaceDiscoveredManagementActionType",
                                    "modelAsString": true,
                                    "values": [
                                      {
                                        "name": "Call",
                                        "value": "Call",
                                        "description": "Call action type."
                                      },
                                      {
                                        "name": "Read",
                                        "value": "Read",
                                        "description": "Read action type."
                                      },
                                      {
                                        "name": "Write",
                                        "value": "Write",
                                        "description": "Write action type."
                                      }
                                    ]
                                  }
                                },
                                "timeoutInSeconds": {
                                  "type": "integer",
                                  "format": "int32",
                                  "description": "Response timeout for the action."
                                },
                                "lastUpdatedOn": {
                                  "type": "string",
                                  "format": "date-time",
                                  "description": "Timestamp (in UTC) indicating when the management action was added or modified."
                                }
                              },
                              "required": [
                                "name",
                                "targetUri"
                              ]
                            },
                            "x-ms-identifiers": []
                          },
                          "lastUpdatedOn": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Timestamp (in UTC) indicating when the management group was added or modified."
                          }
                        },
                        "required": [
                          "name"
                        ]
                      },
                      "x-ms-identifiers": []
                    },
                    "provisioningState": {
                      "description": "Provisioning state of the resource.",
                      "readOnly": true,
                      "type": "string",
                      "enum": [
                        "Succeeded",
                        "Failed",
                        "Canceled",
                        "Accepted",
                        "Deleting"
                      ],
                      "x-ms-enum": {
                        "name": "ProvisioningState",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Succeeded",
                            "value": "Succeeded",
                            "description": "Resource has been created."
                          },
                          {
                            "name": "Failed",
                            "value": "Failed",
                            "description": "Resource creation failed."
                          },
                          {
                            "name": "Canceled",
                            "value": "Canceled",
                            "description": "Resource creation was canceled."
                          },
                          {
                            "name": "Accepted",
                            "value": "Accepted",
                            "description": "Resource has been accepted by the server."
                          },
                          {
                            "name": "Deleting",
                            "value": "Deleting",
                            "description": "Resource is deleting."
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "deviceRef",
                    "discoveryId",
                    "version"
                  ]
                },
                "extendedLocation": {
                  "description": "The extended location.",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ],
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "description": "The extended location type."
                    },
                    "name": {
                      "type": "string",
                      "description": "The extended location name."
                    }
                  },
                  "required": [
                    "type",
                    "name"
                  ]
                }
              },
              "required": [
                "extendedLocation"
              ]
            }
          }
        }
      },
      "put": {
        "operationId": "NamespaceDiscoveredAssets_CreateOrReplace",
        "tags": [
          "NamespaceDiscoveredAssets"
        ],
        "description": "Create a NamespaceDiscoveredAsset",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription. The value must be an UUID.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group. The name is case insensitive.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "x-ms-parameter-location": "method"
          },
          {
            "name": "namespaceName",
            "in": "path",
            "description": "The name of the namespace.",
            "required": true,
            "type": "string",
            "minLength": 3,
            "maxLength": 64,
            "pattern": "^[a-z0-9][a-z0-9-]*[a-z0-9]$"
          },
          {
            "name": "discoveredAssetName",
            "in": "path",
            "description": "The name of the discovered asset.",
            "required": true,
            "type": "string",
            "minLength": 3,
            "maxLength": 63,
            "pattern": "^[a-z0-9][a-z0-9-]*[a-z0-9]$"
          },
          {
            "name": "resource",
            "in": "body",
            "description": "Resource create parameters.",
            "required": true,
            "schema": {
              "type": "object",
              "description": "Discovered asset definition.",
              "properties": {
                "id": {
                  "type": "string",
                  "format": "arm-id",
                  "description": "Fully qualified resource ID for the resource. E.g. \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}\"",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "description": "The name of the resource",
                  "readOnly": true
                },
                "type": {
                  "type": "string",
                  "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                  "readOnly": true
                },
                "systemData": {
                  "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                  "readOnly": true,
                  "type": "object",
                  "properties": {
                    "createdBy": {
                      "type": "string",
                      "description": "The identity that created the resource."
                    },
                    "createdByType": {
                      "type": "string",
                      "description": "The type of identity that created the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource creation (UTC)."
                    },
                    "lastModifiedBy": {
                      "type": "string",
                      "description": "The identity that last modified the resource."
                    },
                    "lastModifiedByType": {
                      "type": "string",
                      "description": "The type of identity that last modified the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "lastModifiedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource last modification (UTC)"
                    }
                  }
                },
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "x-ms-mutability": [
                    "read",
                    "create",
                    "update"
                  ]
                },
                "location": {
                  "type": "string",
                  "description": "The geo-location where the resource lives",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ]
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "deviceRef": {
                      "description": "Reference to the device that provides data for this asset. Must provide device name & endpoint on the device to use.",
                      "type": "object",
                      "properties": {
                        "deviceName": {
                          "type": "string",
                          "description": "Name of the device resource"
                        },
                        "endpointName": {
                          "type": "string",
                          "description": "The name of endpoint to use"
                        }
                      },
                      "required": [
                        "deviceName",
                        "endpointName"
                      ]
                    },
                    "displayName": {
                      "type": "string",
                      "description": "Human-readable display name."
                    },
                    "assetTypeRefs": {
                      "type": "array",
                      "description": "URIs or type definition IDs.",
                      "items": {
                        "type": "string"
                      }
                    },
                    "description": {
                      "type": "string",
                      "description": "Human-readable description of the asset."
                    },
                    "discoveryId": {
                      "type": "string",
                      "description": "Identifier used to detect changes in the asset."
                    },
                    "externalAssetId": {
                      "type": "string",
                      "description": "Asset ID provided by the customer.",
                      "x-ms-mutability": [
                        "read",
                        "create"
                      ]
                    },
                    "version": {
                      "type": "integer",
                      "format": "int64",
                      "description": "An integer that is incremented each time the resource is modified."
                    },
                    "manufacturer": {
                      "type": "string",
                      "description": "Asset manufacturer."
                    },
                    "manufacturerUri": {
                      "type": "string",
                      "description": "Asset manufacturer URI."
                    },
                    "model": {
                      "type": "string",
                      "description": "Asset model."
                    },
                    "productCode": {
                      "type": "string",
                      "description": "Asset product code."
                    },
                    "hardwareRevision": {
                      "type": "string",
                      "description": "Asset hardware revision number."
                    },
                    "softwareRevision": {
                      "type": "string",
                      "description": "Asset software revision number."
                    },
                    "documentationUri": {
                      "type": "string",
                      "description": "Asset documentation reference."
                    },
                    "serialNumber": {
                      "type": "string",
                      "description": "Asset serial number."
                    },
                    "attributes": {
                      "type": "object",
                      "description": "A set of key-value pairs that contain custom attributes.",
                      "additionalProperties": {}
                    },
                    "defaultDatasetsConfiguration": {
                      "type": "string",
                      "description": "Stringified JSON that contains connector-specific default configuration for all datasets. Each dataset can have its own configuration that overrides the default settings here."
                    },
                    "defaultEventsConfiguration": {
                      "type": "string",
                      "description": "Stringified JSON that contains connector-specific default configuration for all events. Each event can have its own configuration that overrides the default settings here."
                    },
                    "defaultStreamsConfiguration": {
                      "type": "string",
                      "description": "Stringified JSON that contains connector-specific default configuration for all streams. Each stream can have its own configuration that overrides the default settings here."
                    },
                    "defaultManagementGroupsConfiguration": {
                      "type": "string",
                      "description": "Stringified JSON that contains connector-specific default configuration for all management groups. Each management group can have its own configuration that overrides the default settings here."
                    },
                    "defaultDatasetsDestinations": {
                      "type": "array",
                      "description": "Default destinations for a dataset.",
                      "items": {
                        "type": "object",
                        "description": "The type of the destination.",
                        "properties": {
                          "target": {
                            "description": "Target destination.",
                            "type": "string",
                            "enum": [
                              "Mqtt",
                              "BrokerStateStore",
                              "Storage"
                            ],
                            "x-ms-enum": {
                              "name": "DatasetDestinationTarget",
                              "modelAsString": true,
                              "values": [
                                {
                                  "name": "Mqtt",
                                  "value": "Mqtt",
                                  "description": "MQTT target."
                                },
                                {
                                  "name": "BrokerStateStore",
                                  "value": "BrokerStateStore",
                                  "description": "Broker State Store target."
                                },
                                {
                                  "name": "Storage",
                                  "value": "Storage",
                                  "description": "Storage target."
                                }
                              ]
                            }
                          }
                        },
                        "discriminator": "target",
                        "required": [
                          "target"
                        ]
                      },
                      "x-ms-identifiers": []
                    },
                    "defaultEventsDestinations": {
                      "type": "array",
                      "description": "Default destinations for an event.",
                      "items": {
                        "type": "object",
                        "description": "The type of the destination.",
                        "properties": {
                          "target": {
                            "description": "Target destination.",
                            "type": "string",
                            "enum": [
                              "Mqtt",
                              "Storage"
                            ],
                            "x-ms-enum": {
                              "name": "EventDestinationTarget",
                              "modelAsString": true,
                              "values": [
                                {
                                  "name": "Mqtt",
                                  "value": "Mqtt",
                                  "description": "MQTT target."
                                },
                                {
                                  "name": "Storage",
                                  "value": "Storage",
                                  "description": "Storage target."
                                }
                              ]
                            }
                          }
                        },
                        "discriminator": "target",
                        "required": [
                          "target"
                        ]
                      },
                      "x-ms-identifiers": []
                    },
                    "defaultStreamsDestinations": {
                      "type": "array",
                      "description": "Default destinations for a stream.",
                      "items": {
                        "type": "object",
                        "description": "The type of the destination.",
                        "properties": {
                          "target": {
                            "description": "Target destination.",
                            "type": "string",
                            "enum": [
                              "Mqtt",
                              "Storage"
                            ],
                            "x-ms-enum": {
                              "name": "StreamDestinationTarget",
                              "modelAsString": true,
                              "values": [
                                {
                                  "name": "Mqtt",
                                  "value": "Mqtt",
                                  "description": "MQTT target."
                                },
                                {
                                  "name": "Storage",
                                  "value": "Storage",
                                  "description": "Storage target."
                                }
                              ]
                            }
                          }
                        },
                        "discriminator": "target",
                        "required": [
                          "target"
                        ]
                      },
                      "x-ms-identifiers": []
                    },
                    "datasets": {
                      "type": "array",
                      "description": "Array of datasets that are part of the asset. Each dataset spec describes the data points that make up the set.",
                      "items": {
                        "type": "object",
                        "description": "Defines the dataset properties.",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "Name of the dataset."
                          },
                          "dataSource": {
                            "type": "string",
                            "description": "Reference to a data source for a given dataset."
                          },
                          "typeRef": {
                            "type": "string",
                            "description": "URI or type definition ID."
                          },
                          "datasetConfiguration": {
                            "type": "string",
                            "description": "Stringified JSON that contains connector-specific properties that describes configuration for the specific dataset."
                          },
                          "destinations": {
                            "type": "array",
                            "description": "Destinations for a dataset.",
                            "items": {
                              "type": "object",
                              "description": "The type of the destination.",
                              "properties": {
                                "target": {
                                  "description": "Target destination.",
                                  "type": "string",
                                  "enum": [
                                    "Mqtt",
                                    "BrokerStateStore",
                                    "Storage"
                                  ],
                                  "x-ms-enum": {
                                    "name": "DatasetDestinationTarget",
                                    "modelAsString": true,
                                    "values": [
                                      {
                                        "name": "Mqtt",
                                        "value": "Mqtt",
                                        "description": "MQTT target."
                                      },
                                      {
                                        "name": "BrokerStateStore",
                                        "value": "BrokerStateStore",
                                        "description": "Broker State Store target."
                                      },
                                      {
                                        "name": "Storage",
                                        "value": "Storage",
                                        "description": "Storage target."
                                      }
                                    ]
                                  }
                                }
                              },
                              "discriminator": "target",
                              "required": [
                                "target"
                              ]
                            },
                            "x-ms-identifiers": []
                          },
                          "dataPoints": {
                            "type": "array",
                            "description": "Array of data points that are part of the dataset. Each data point can have per-data point configuration.",
                            "items": {
                              "type": "object",
                              "description": "Defines the discovered dataset data point properties.",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "The name of the data point."
                                },
                                "dataSource": {
                                  "type": "string",
                                  "description": "The address of the source of the data in the asset (e.g. URL) so that a client can access the data source on the asset."
                                },
                                "dataPointConfiguration": {
                                  "type": "string",
                                  "description": "Stringified JSON that contains connector-specific configuration for the data point. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize."
                                },
                                "lastUpdatedOn": {
                                  "type": "string",
                                  "format": "date-time",
                                  "description": "UTC timestamp indicating when the data point was added or modified."
                                },
                                "typeRef": {
                                  "type": "string",
                                  "description": "URI or type definition ID."
                                }
                              },
                              "required": [
                                "name",
                                "dataSource"
                              ]
                            },
                            "x-ms-identifiers": []
                          },
                          "lastUpdatedOn": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Timestamp (in UTC) indicating when the dataset was added or modified."
                          }
                        },
                        "required": [
                          "name"
                        ]
                      },
                      "x-ms-identifiers": []
                    },
                    "eventGroups": {
                      "type": "array",
                      "description": "Array of event groups that are part of the asset. Each event group can have per-event group configuration.",
                      "items": {
                        "type": "object",
                        "description": "Defines the discovered event group properties.",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "The name of the event group."
                          },
                          "dataSource": {
                            "type": "string",
                            "description": "The address of the notifier of the event group in the asset (e.g. URL) so that a client can access the event group on the asset."
                          },
                          "eventGroupConfiguration": {
                            "type": "string",
                            "description": "Stringified JSON that contains connector-specific configuration for the event group. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize."
                          },
                          "defaultDestinations": {
                            "type": "array",
                            "description": "Destinations for events. Default destinations when destinations is not defined at the event level.",
                            "items": {
                              "type": "object",
                              "description": "The type of the destination.",
                              "properties": {
                                "target": {
                                  "description": "Target destination.",
                                  "type": "string",
                                  "enum": [
                                    "Mqtt",
                                    "Storage"
                                  ],
                                  "x-ms-enum": {
                                    "name": "EventDestinationTarget",
                                    "modelAsString": true,
                                    "values": [
                                      {
                                        "name": "Mqtt",
                                        "value": "Mqtt",
                                        "description": "MQTT target."
                                      },
                                      {
                                        "name": "Storage",
                                        "value": "Storage",
                                        "description": "Storage target."
                                      }
                                    ]
                                  }
                                }
                              },
                              "discriminator": "target",
                              "required": [
                                "target"
                              ]
                            },
                            "x-ms-identifiers": []
                          },
                          "typeRef": {
                            "type": "string",
                            "description": "URI or type definition ID."
                          },
                          "events": {
                            "type": "array",
                            "description": "Array of events that are part of the event group.",
                            "items": {
                              "type": "object",
                              "description": "Defines the event properties.",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "The name of the event."
                                },
                                "dataSource": {
                                  "type": "string",
                                  "description": "Reference to a data source for a given event."
                                },
                                "eventConfiguration": {
                                  "type": "string",
                                  "description": "Stringified JSON that contains connector-specific configuration for the event. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize."
                                },
                                "destinations": {
                                  "type": "array",
                                  "description": "Destinations for an event.",
                                  "items": {
                                    "type": "object",
                                    "description": "The type of the destination.",
                                    "properties": {
                                      "target": {
                                        "description": "Target destination.",
                                        "type": "string",
                                        "enum": [
                                          "Mqtt",
                                          "Storage"
                                        ],
                                        "x-ms-enum": {
                                          "name": "EventDestinationTarget",
                                          "modelAsString": true,
                                          "values": [
                                            {
                                              "name": "Mqtt",
                                              "value": "Mqtt",
                                              "description": "MQTT target."
                                            },
                                            {
                                              "name": "Storage",
                                              "value": "Storage",
                                              "description": "Storage target."
                                            }
                                          ]
                                        }
                                      }
                                    },
                                    "discriminator": "target",
                                    "required": [
                                      "target"
                                    ]
                                  },
                                  "x-ms-identifiers": []
                                },
                                "typeRef": {
                                  "type": "string",
                                  "description": "URI or type definition ID."
                                },
                                "lastUpdatedOn": {
                                  "type": "string",
                                  "format": "date-time",
                                  "description": "UTC timestamp indicating when the event was added or modified."
                                }
                              },
                              "required": [
                                "name"
                              ]
                            },
                            "x-ms-identifiers": []
                          }
                        },
                        "required": [
                          "name"
                        ]
                      },
                      "x-ms-identifiers": []
                    },
                    "streams": {
                      "type": "array",
                      "description": "Array of streams that are part of the asset. Each stream can have a per-stream configuration.",
                      "items": {
                        "type": "object",
                        "description": "Defines the stream properties.",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "Name of the stream definition."
                          },
                          "streamConfiguration": {
                            "type": "string",
                            "description": "Stringified JSON that contains connector-specific configuration for the specific stream."
                          },
                          "typeRef": {
                            "type": "string",
                            "description": "URI or type definition ID."
                          },
                          "destinations": {
                            "type": "array",
                            "description": "Destinations for a stream.",
                            "items": {
                              "type": "object",
                              "description": "The type of the destination.",
                              "properties": {
                                "target": {
                                  "description": "Target destination.",
                                  "type": "string",
                                  "enum": [
                                    "Mqtt",
                                    "Storage"
                                  ],
                                  "x-ms-enum": {
                                    "name": "StreamDestinationTarget",
                                    "modelAsString": true,
                                    "values": [
                                      {
                                        "name": "Mqtt",
                                        "value": "Mqtt",
                                        "description": "MQTT target."
                                      },
                                      {
                                        "name": "Storage",
                                        "value": "Storage",
                                        "description": "Storage target."
                                      }
                                    ]
                                  }
                                }
                              },
                              "discriminator": "target",
                              "required": [
                                "target"
                              ]
                            },
                            "x-ms-identifiers": []
                          },
                          "lastUpdatedOn": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Timestamp (in UTC) indicating when the stream was added or modified."
                          }
                        },
                        "required": [
                          "name"
                        ]
                      },
                      "x-ms-identifiers": []
                    },
                    "managementGroups": {
                      "type": "array",
                      "description": "Array of management groups that are part of the asset. Each management group can have a per-group configuration.",
                      "items": {
                        "type": "object",
                        "description": "Defines the management group properties.",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "Name of the management group."
                          },
                          "managementGroupConfiguration": {
                            "type": "string",
                            "description": "Stringified JSON that contains connector-specific configuration for the management group."
                          },
                          "typeRef": {
                            "type": "string",
                            "description": "URI or type definition ID."
                          },
                          "dataSource": {
                            "type": "string",
                            "description": "Reference to a data source for a given management group."
                          },
                          "defaultTopic": {
                            "type": "string",
                            "description": "Default MQTT topic path on which a client will receive the request for all actions that are part of the management group."
                          },
                          "defaultTimeoutInSeconds": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Default response timeout for all actions that are part of the management group.",
                            "default": 100
                          },
                          "actions": {
                            "type": "array",
                            "description": "Array of actions that are part of the management group. Each action can have an individual configuration.",
                            "items": {
                              "type": "object",
                              "description": "Defines the action properties.",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "Name of the action."
                                },
                                "actionConfiguration": {
                                  "type": "string",
                                  "description": "Stringified JSON that contains connector-specific configuration for the action."
                                },
                                "targetUri": {
                                  "type": "string",
                                  "description": "The target URI on which a client can invoke the specific action."
                                },
                                "typeRef": {
                                  "type": "string",
                                  "description": "URI or type definition ID."
                                },
                                "topic": {
                                  "type": "string",
                                  "description": "The MQTT topic path on which a client will receive the request for the action."
                                },
                                "actionType": {
                                  "type": "string",
                                  "description": "The type of the action.",
                                  "default": "Call",
                                  "enum": [
                                    "Call",
                                    "Read",
                                    "Write"
                                  ],
                                  "x-ms-enum": {
                                    "name": "NamespaceDiscoveredManagementActionType",
                                    "modelAsString": true,
                                    "values": [
                                      {
                                        "name": "Call",
                                        "value": "Call",
                                        "description": "Call action type."
                                      },
                                      {
                                        "name": "Read",
                                        "value": "Read",
                                        "description": "Read action type."
                                      },
                                      {
                                        "name": "Write",
                                        "value": "Write",
                                        "description": "Write action type."
                                      }
                                    ]
                                  }
                                },
                                "timeoutInSeconds": {
                                  "type": "integer",
                                  "format": "int32",
                                  "description": "Response timeout for the action."
                                },
                                "lastUpdatedOn": {
                                  "type": "string",
                                  "format": "date-time",
                                  "description": "Timestamp (in UTC) indicating when the management action was added or modified."
                                }
                              },
                              "required": [
                                "name",
                                "targetUri"
                              ]
                            },
                            "x-ms-identifiers": []
                          },
                          "lastUpdatedOn": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Timestamp (in UTC) indicating when the management group was added or modified."
                          }
                        },
                        "required": [
                          "name"
                        ]
                      },
                      "x-ms-identifiers": []
                    },
                    "provisioningState": {
                      "description": "Provisioning state of the resource.",
                      "readOnly": true,
                      "type": "string",
                      "enum": [
                        "Succeeded",
                        "Failed",
                        "Canceled",
                        "Accepted",
                        "Deleting"
                      ],
                      "x-ms-enum": {
                        "name": "ProvisioningState",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Succeeded",
                            "value": "Succeeded",
                            "description": "Resource has been created."
                          },
                          {
                            "name": "Failed",
                            "value": "Failed",
                            "description": "Resource creation failed."
                          },
                          {
                            "name": "Canceled",
                            "value": "Canceled",
                            "description": "Resource creation was canceled."
                          },
                          {
                            "name": "Accepted",
                            "value": "Accepted",
                            "description": "Resource has been accepted by the server."
                          },
                          {
                            "name": "Deleting",
                            "value": "Deleting",
                            "description": "Resource is deleting."
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "deviceRef",
                    "discoveryId",
                    "version"
                  ]
                },
                "extendedLocation": {
                  "description": "The extended location.",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ],
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "description": "The extended location type."
                    },
                    "name": {
                      "type": "string",
                      "description": "The extended location name."
                    }
                  },
                  "required": [
                    "type",
                    "name"
                  ]
                }
              },
              "required": [
                "extendedLocation"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resource 'NamespaceDiscoveredAsset' update operation succeeded",
            "schema": {
              "type": "object",
              "description": "Discovered asset definition.",
              "properties": {
                "id": {
                  "type": "string",
                  "format": "arm-id",
                  "description": "Fully qualified resource ID for the resource. E.g. \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}\"",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "description": "The name of the resource",
                  "readOnly": true
                },
                "type": {
                  "type": "string",
                  "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                  "readOnly": true
                },
                "systemData": {
                  "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                  "readOnly": true,
                  "type": "object",
                  "properties": {
                    "createdBy": {
                      "type": "string",
                      "description": "The identity that created the resource."
                    },
                    "createdByType": {
                      "type": "string",
                      "description": "The type of identity that created the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource creation (UTC)."
                    },
                    "lastModifiedBy": {
                      "type": "string",
                      "description": "The identity that last modified the resource."
                    },
                    "lastModifiedByType": {
                      "type": "string",
                      "description": "The type of identity that last modified the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "lastModifiedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource last modification (UTC)"
                    }
                  }
                },
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "x-ms-mutability": [
                    "read",
                    "create",
                    "update"
                  ]
                },
                "location": {
                  "type": "string",
                  "description": "The geo-location where the resource lives",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ]
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "deviceRef": {
                      "description": "Reference to the device that provides data for this asset. Must provide device name & endpoint on the device to use.",
                      "type": "object",
                      "properties": {
                        "deviceName": {
                          "type": "string",
                          "description": "Name of the device resource"
                        },
                        "endpointName": {
                          "type": "string",
                          "description": "The name of endpoint to use"
                        }
                      },
                      "required": [
                        "deviceName",
                        "endpointName"
                      ]
                    },
                    "displayName": {
                      "type": "string",
                      "description": "Human-readable display name."
                    },
                    "assetTypeRefs": {
                      "type": "array",
                      "description": "URIs or type definition IDs.",
                      "items": {
                        "type": "string"
                      }
                    },
                    "description": {
                      "type": "string",
                      "description": "Human-readable description of the asset."
                    },
                    "discoveryId": {
                      "type": "string",
                      "description": "Identifier used to detect changes in the asset."
                    },
                    "externalAssetId": {
                      "type": "string",
                      "description": "Asset ID provided by the customer.",
                      "x-ms-mutability": [
                        "read",
                        "create"
                      ]
                    },
                    "version": {
                      "type": "integer",
                      "format": "int64",
                      "description": "An integer that is incremented each time the resource is modified."
                    },
                    "manufacturer": {
                      "type": "string",
                      "description": "Asset manufacturer."
                    },
                    "manufacturerUri": {
                      "type": "string",
                      "description": "Asset manufacturer URI."
                    },
                    "model": {
                      "type": "string",
                      "description": "Asset model."
                    },
                    "productCode": {
                      "type": "string",
                      "description": "Asset product code."
                    },
                    "hardwareRevision": {
                      "type": "string",
                      "description": "Asset hardware revision number."
                    },
                    "softwareRevision": {
                      "type": "string",
                      "description": "Asset software revision number."
                    },
                    "documentationUri": {
                      "type": "string",
                      "description": "Asset documentation reference."
                    },
                    "serialNumber": {
                      "type": "string",
                      "description": "Asset serial number."
                    },
                    "attributes": {
                      "type": "object",
                      "description": "A set of key-value pairs that contain custom attributes.",
                      "additionalProperties": {}
                    },
                    "defaultDatasetsConfiguration": {
                      "type": "string",
                      "description": "Stringified JSON that contains connector-specific default configuration for all datasets. Each dataset can have its own configuration that overrides the default settings here."
                    },
                    "defaultEventsConfiguration": {
                      "type": "string",
                      "description": "Stringified JSON that contains connector-specific default configuration for all events. Each event can have its own configuration that overrides the default settings here."
                    },
                    "defaultStreamsConfiguration": {
                      "type": "string",
                      "description": "Stringified JSON that contains connector-specific default configuration for all streams. Each stream can have its own configuration that overrides the default settings here."
                    },
                    "defaultManagementGroupsConfiguration": {
                      "type": "string",
                      "description": "Stringified JSON that contains connector-specific default configuration for all management groups. Each management group can have its own configuration that overrides the default settings here."
                    },
                    "defaultDatasetsDestinations": {
                      "type": "array",
                      "description": "Default destinations for a dataset.",
                      "items": {
                        "type": "object",
                        "description": "The type of the destination.",
                        "properties": {
                          "target": {
                            "description": "Target destination.",
                            "type": "string",
                            "enum": [
                              "Mqtt",
                              "BrokerStateStore",
                              "Storage"
                            ],
                            "x-ms-enum": {
                              "name": "DatasetDestinationTarget",
                              "modelAsString": true,
                              "values": [
                                {
                                  "name": "Mqtt",
                                  "value": "Mqtt",
                                  "description": "MQTT target."
                                },
                                {
                                  "name": "BrokerStateStore",
                                  "value": "BrokerStateStore",
                                  "description": "Broker State Store target."
                                },
                                {
                                  "name": "Storage",
                                  "value": "Storage",
                                  "description": "Storage target."
                                }
                              ]
                            }
                          }
                        },
                        "discriminator": "target",
                        "required": [
                          "target"
                        ]
                      },
                      "x-ms-identifiers": []
                    },
                    "defaultEventsDestinations": {
                      "type": "array",
                      "description": "Default destinations for an event.",
                      "items": {
                        "type": "object",
                        "description": "The type of the destination.",
                        "properties": {
                          "target": {
                            "description": "Target destination.",
                            "type": "string",
                            "enum": [
                              "Mqtt",
                              "Storage"
                            ],
                            "x-ms-enum": {
                              "name": "EventDestinationTarget",
                              "modelAsString": true,
                              "values": [
                                {
                                  "name": "Mqtt",
                                  "value": "Mqtt",
                                  "description": "MQTT target."
                                },
                                {
                                  "name": "Storage",
                                  "value": "Storage",
                                  "description": "Storage target."
                                }
                              ]
                            }
                          }
                        },
                        "discriminator": "target",
                        "required": [
                          "target"
                        ]
                      },
                      "x-ms-identifiers": []
                    },
                    "defaultStreamsDestinations": {
                      "type": "array",
                      "description": "Default destinations for a stream.",
                      "items": {
                        "type": "object",
                        "description": "The type of the destination.",
                        "properties": {
                          "target": {
                            "description": "Target destination.",
                            "type": "string",
                            "enum": [
                              "Mqtt",
                              "Storage"
                            ],
                            "x-ms-enum": {
                              "name": "StreamDestinationTarget",
                              "modelAsString": true,
                              "values": [
                                {
                                  "name": "Mqtt",
                                  "value": "Mqtt",
                                  "description": "MQTT target."
                                },
                                {
                                  "name": "Storage",
                                  "value": "Storage",
                                  "description": "Storage target."
                                }
                              ]
                            }
                          }
                        },
                        "discriminator": "target",
                        "required": [
                          "target"
                        ]
                      },
                      "x-ms-identifiers": []
                    },
                    "datasets": {
                      "type": "array",
                      "description": "Array of datasets that are part of the asset. Each dataset spec describes the data points that make up the set.",
                      "items": {
                        "type": "object",
                        "description": "Defines the dataset properties.",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "Name of the dataset."
                          },
                          "dataSource": {
                            "type": "string",
                            "description": "Reference to a data source for a given dataset."
                          },
                          "typeRef": {
                            "type": "string",
                            "description": "URI or type definition ID."
                          },
                          "datasetConfiguration": {
                            "type": "string",
                            "description": "Stringified JSON that contains connector-specific properties that describes configuration for the specific dataset."
                          },
                          "destinations": {
                            "type": "array",
                            "description": "Destinations for a dataset.",
                            "items": {
                              "type": "object",
                              "description": "The type of the destination.",
                              "properties": {
                                "target": {
                                  "description": "Target destination.",
                                  "type": "string",
                                  "enum": [
                                    "Mqtt",
                                    "BrokerStateStore",
                                    "Storage"
                                  ],
                                  "x-ms-enum": {
                                    "name": "DatasetDestinationTarget",
                                    "modelAsString": true,
                                    "values": [
                                      {
                                        "name": "Mqtt",
                                        "value": "Mqtt",
                                        "description": "MQTT target."
                                      },
                                      {
                                        "name": "BrokerStateStore",
                                        "value": "BrokerStateStore",
                                        "description": "Broker State Store target."
                                      },
                                      {
                                        "name": "Storage",
                                        "value": "Storage",
                                        "description": "Storage target."
                                      }
                                    ]
                                  }
                                }
                              },
                              "discriminator": "target",
                              "required": [
                                "target"
                              ]
                            },
                            "x-ms-identifiers": []
                          },
                          "dataPoints": {
                            "type": "array",
                            "description": "Array of data points that are part of the dataset. Each data point can have per-data point configuration.",
                            "items": {
                              "type": "object",
                              "description": "Defines the discovered dataset data point properties.",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "The name of the data point."
                                },
                                "dataSource": {
                                  "type": "string",
                                  "description": "The address of the source of the data in the asset (e.g. URL) so that a client can access the data source on the asset."
                                },
                                "dataPointConfiguration": {
                                  "type": "string",
                                  "description": "Stringified JSON that contains connector-specific configuration for the data point. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize."
                                },
                                "lastUpdatedOn": {
                                  "type": "string",
                                  "format": "date-time",
                                  "description": "UTC timestamp indicating when the data point was added or modified."
                                },
                                "typeRef": {
                                  "type": "string",
                                  "description": "URI or type definition ID."
                                }
                              },
                              "required": [
                                "name",
                                "dataSource"
                              ]
                            },
                            "x-ms-identifiers": []
                          },
                          "lastUpdatedOn": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Timestamp (in UTC) indicating when the dataset was added or modified."
                          }
                        },
                        "required": [
                          "name"
                        ]
                      },
                      "x-ms-identifiers": []
                    },
                    "eventGroups": {
                      "type": "array",
                      "description": "Array of event groups that are part of the asset. Each event group can have per-event group configuration.",
                      "items": {
                        "type": "object",
                        "description": "Defines the discovered event group properties.",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "The name of the event group."
                          },
                          "dataSource": {
                            "type": "string",
                            "description": "The address of the notifier of the event group in the asset (e.g. URL) so that a client can access the event group on the asset."
                          },
                          "eventGroupConfiguration": {
                            "type": "string",
                            "description": "Stringified JSON that contains connector-specific configuration for the event group. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize."
                          },
                          "defaultDestinations": {
                            "type": "array",
                            "description": "Destinations for events. Default destinations when destinations is not defined at the event level.",
                            "items": {
                              "type": "object",
                              "description": "The type of the destination.",
                              "properties": {
                                "target": {
                                  "description": "Target destination.",
                                  "type": "string",
                                  "enum": [
                                    "Mqtt",
                                    "Storage"
                                  ],
                                  "x-ms-enum": {
                                    "name": "EventDestinationTarget",
                                    "modelAsString": true,
                                    "values": [
                                      {
                                        "name": "Mqtt",
                                        "value": "Mqtt",
                                        "description": "MQTT target."
                                      },
                                      {
                                        "name": "Storage",
                                        "value": "Storage",
                                        "description": "Storage target."
                                      }
                                    ]
                                  }
                                }
                              },
                              "discriminator": "target",
                              "required": [
                                "target"
                              ]
                            },
                            "x-ms-identifiers": []
                          },
                          "typeRef": {
                            "type": "string",
                            "description": "URI or type definition ID."
                          },
                          "events": {
                            "type": "array",
                            "description": "Array of events that are part of the event group.",
                            "items": {
                              "type": "object",
                              "description": "Defines the event properties.",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "The name of the event."
                                },
                                "dataSource": {
                                  "type": "string",
                                  "description": "Reference to a data source for a given event."
                                },
                                "eventConfiguration": {
                                  "type": "string",
                                  "description": "Stringified JSON that contains connector-specific configuration for the event. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize."
                                },
                                "destinations": {
                                  "type": "array",
                                  "description": "Destinations for an event.",
                                  "items": {
                                    "type": "object",
                                    "description": "The type of the destination.",
                                    "properties": {
                                      "target": {
                                        "description": "Target destination.",
                                        "type": "string",
                                        "enum": [
                                          "Mqtt",
                                          "Storage"
                                        ],
                                        "x-ms-enum": {
                                          "name": "EventDestinationTarget",
                                          "modelAsString": true,
                                          "values": [
                                            {
                                              "name": "Mqtt",
                                              "value": "Mqtt",
                                              "description": "MQTT target."
                                            },
                                            {
                                              "name": "Storage",
                                              "value": "Storage",
                                              "description": "Storage target."
                                            }
                                          ]
                                        }
                                      }
                                    },
                                    "discriminator": "target",
                                    "required": [
                                      "target"
                                    ]
                                  },
                                  "x-ms-identifiers": []
                                },
                                "typeRef": {
                                  "type": "string",
                                  "description": "URI or type definition ID."
                                },
                                "lastUpdatedOn": {
                                  "type": "string",
                                  "format": "date-time",
                                  "description": "UTC timestamp indicating when the event was added or modified."
                                }
                              },
                              "required": [
                                "name"
                              ]
                            },
                            "x-ms-identifiers": []
                          }
                        },
                        "required": [
                          "name"
                        ]
                      },
                      "x-ms-identifiers": []
                    },
                    "streams": {
                      "type": "array",
                      "description": "Array of streams that are part of the asset. Each stream can have a per-stream configuration.",
                      "items": {
                        "type": "object",
                        "description": "Defines the stream properties.",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "Name of the stream definition."
                          },
                          "streamConfiguration": {
                            "type": "string",
                            "description": "Stringified JSON that contains connector-specific configuration for the specific stream."
                          },
                          "typeRef": {
                            "type": "string",
                            "description": "URI or type definition ID."
                          },
                          "destinations": {
                            "type": "array",
                            "description": "Destinations for a stream.",
                            "items": {
                              "type": "object",
                              "description": "The type of the destination.",
                              "properties": {
                                "target": {
                                  "description": "Target destination.",
                                  "type": "string",
                                  "enum": [
                                    "Mqtt",
                                    "Storage"
                                  ],
                                  "x-ms-enum": {
                                    "name": "StreamDestinationTarget",
                                    "modelAsString": true,
                                    "values": [
                                      {
                                        "name": "Mqtt",
                                        "value": "Mqtt",
                                        "description": "MQTT target."
                                      },
                                      {
                                        "name": "Storage",
                                        "value": "Storage",
                                        "description": "Storage target."
                                      }
                                    ]
                                  }
                                }
                              },
                              "discriminator": "target",
                              "required": [
                                "target"
                              ]
                            },
                            "x-ms-identifiers": []
                          },
                          "lastUpdatedOn": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Timestamp (in UTC) indicating when the stream was added or modified."
                          }
                        },
                        "required": [
                          "name"
                        ]
                      },
                      "x-ms-identifiers": []
                    },
                    "managementGroups": {
                      "type": "array",
                      "description": "Array of management groups that are part of the asset. Each management group can have a per-group configuration.",
                      "items": {
                        "type": "object",
                        "description": "Defines the management group properties.",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "Name of the management group."
                          },
                          "managementGroupConfiguration": {
                            "type": "string",
                            "description": "Stringified JSON that contains connector-specific configuration for the management group."
                          },
                          "typeRef": {
                            "type": "string",
                            "description": "URI or type definition ID."
                          },
                          "dataSource": {
                            "type": "string",
                            "description": "Reference to a data source for a given management group."
                          },
                          "defaultTopic": {
                            "type": "string",
                            "description": "Default MQTT topic path on which a client will receive the request for all actions that are part of the management group."
                          },
                          "defaultTimeoutInSeconds": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Default response timeout for all actions that are part of the management group.",
                            "default": 100
                          },
                          "actions": {
                            "type": "array",
                            "description": "Array of actions that are part of the management group. Each action can have an individual configuration.",
                            "items": {
                              "type": "object",
                              "description": "Defines the action properties.",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "Name of the action."
                                },
                                "actionConfiguration": {
                                  "type": "string",
                                  "description": "Stringified JSON that contains connector-specific configuration for the action."
                                },
                                "targetUri": {
                                  "type": "string",
                                  "description": "The target URI on which a client can invoke the specific action."
                                },
                                "typeRef": {
                                  "type": "string",
                                  "description": "URI or type definition ID."
                                },
                                "topic": {
                                  "type": "string",
                                  "description": "The MQTT topic path on which a client will receive the request for the action."
                                },
                                "actionType": {
                                  "type": "string",
                                  "description": "The type of the action.",
                                  "default": "Call",
                                  "enum": [
                                    "Call",
                                    "Read",
                                    "Write"
                                  ],
                                  "x-ms-enum": {
                                    "name": "NamespaceDiscoveredManagementActionType",
                                    "modelAsString": true,
                                    "values": [
                                      {
                                        "name": "Call",
                                        "value": "Call",
                                        "description": "Call action type."
                                      },
                                      {
                                        "name": "Read",
                                        "value": "Read",
                                        "description": "Read action type."
                                      },
                                      {
                                        "name": "Write",
                                        "value": "Write",
                                        "description": "Write action type."
                                      }
                                    ]
                                  }
                                },
                                "timeoutInSeconds": {
                                  "type": "integer",
                                  "format": "int32",
                                  "description": "Response timeout for the action."
                                },
                                "lastUpdatedOn": {
                                  "type": "string",
                                  "format": "date-time",
                                  "description": "Timestamp (in UTC) indicating when the management action was added or modified."
                                }
                              },
                              "required": [
                                "name",
                                "targetUri"
                              ]
                            },
                            "x-ms-identifiers": []
                          },
                          "lastUpdatedOn": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Timestamp (in UTC) indicating when the management group was added or modified."
                          }
                        },
                        "required": [
                          "name"
                        ]
                      },
                      "x-ms-identifiers": []
                    },
                    "provisioningState": {
                      "description": "Provisioning state of the resource.",
                      "readOnly": true,
                      "type": "string",
                      "enum": [
                        "Succeeded",
                        "Failed",
                        "Canceled",
                        "Accepted",
                        "Deleting"
                      ],
                      "x-ms-enum": {
                        "name": "ProvisioningState",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Succeeded",
                            "value": "Succeeded",
                            "description": "Resource has been created."
                          },
                          {
                            "name": "Failed",
                            "value": "Failed",
                            "description": "Resource creation failed."
                          },
                          {
                            "name": "Canceled",
                            "value": "Canceled",
                            "description": "Resource creation was canceled."
                          },
                          {
                            "name": "Accepted",
                            "value": "Accepted",
                            "description": "Resource has been accepted by the server."
                          },
                          {
                            "name": "Deleting",
                            "value": "Deleting",
                            "description": "Resource is deleting."
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "deviceRef",
                    "discoveryId",
                    "version"
                  ]
                },
                "extendedLocation": {
                  "description": "The extended location.",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ],
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "description": "The extended location type."
                    },
                    "name": {
                      "type": "string",
                      "description": "The extended location name."
                    }
                  },
                  "required": [
                    "type",
                    "name"
                  ]
                }
              },
              "required": [
                "extendedLocation"
              ]
            }
          },
          "201": {
            "description": "Resource 'NamespaceDiscoveredAsset' create operation succeeded",
            "schema": {
              "type": "object",
              "description": "Discovered asset definition.",
              "properties": {
                "id": {
                  "type": "string",
                  "format": "arm-id",
                  "description": "Fully qualified resource ID for the resource. E.g. \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}\"",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "description": "The name of the resource",
                  "readOnly": true
                },
                "type": {
                  "type": "string",
                  "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                  "readOnly": true
                },
                "systemData": {
                  "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                  "readOnly": true,
                  "type": "object",
                  "properties": {
                    "createdBy": {
                      "type": "string",
                      "description": "The identity that created the resource."
                    },
                    "createdByType": {
                      "type": "string",
                      "description": "The type of identity that created the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource creation (UTC)."
                    },
                    "lastModifiedBy": {
                      "type": "string",
                      "description": "The identity that last modified the resource."
                    },
                    "lastModifiedByType": {
                      "type": "string",
                      "description": "The type of identity that last modified the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "lastModifiedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource last modification (UTC)"
                    }
                  }
                },
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "x-ms-mutability": [
                    "read",
                    "create",
                    "update"
                  ]
                },
                "location": {
                  "type": "string",
                  "description": "The geo-location where the resource lives",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ]
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "deviceRef": {
                      "description": "Reference to the device that provides data for this asset. Must provide device name & endpoint on the device to use.",
                      "type": "object",
                      "properties": {
                        "deviceName": {
                          "type": "string",
                          "description": "Name of the device resource"
                        },
                        "endpointName": {
                          "type": "string",
                          "description": "The name of endpoint to use"
                        }
                      },
                      "required": [
                        "deviceName",
                        "endpointName"
                      ]
                    },
                    "displayName": {
                      "type": "string",
                      "description": "Human-readable display name."
                    },
                    "assetTypeRefs": {
                      "type": "array",
                      "description": "URIs or type definition IDs.",
                      "items": {
                        "type": "string"
                      }
                    },
                    "description": {
                      "type": "string",
                      "description": "Human-readable description of the asset."
                    },
                    "discoveryId": {
                      "type": "string",
                      "description": "Identifier used to detect changes in the asset."
                    },
                    "externalAssetId": {
                      "type": "string",
                      "description": "Asset ID provided by the customer.",
                      "x-ms-mutability": [
                        "read",
                        "create"
                      ]
                    },
                    "version": {
                      "type": "integer",
                      "format": "int64",
                      "description": "An integer that is incremented each time the resource is modified."
                    },
                    "manufacturer": {
                      "type": "string",
                      "description": "Asset manufacturer."
                    },
                    "manufacturerUri": {
                      "type": "string",
                      "description": "Asset manufacturer URI."
                    },
                    "model": {
                      "type": "string",
                      "description": "Asset model."
                    },
                    "productCode": {
                      "type": "string",
                      "description": "Asset product code."
                    },
                    "hardwareRevision": {
                      "type": "string",
                      "description": "Asset hardware revision number."
                    },
                    "softwareRevision": {
                      "type": "string",
                      "description": "Asset software revision number."
                    },
                    "documentationUri": {
                      "type": "string",
                      "description": "Asset documentation reference."
                    },
                    "serialNumber": {
                      "type": "string",
                      "description": "Asset serial number."
                    },
                    "attributes": {
                      "type": "object",
                      "description": "A set of key-value pairs that contain custom attributes.",
                      "additionalProperties": {}
                    },
                    "defaultDatasetsConfiguration": {
                      "type": "string",
                      "description": "Stringified JSON that contains connector-specific default configuration for all datasets. Each dataset can have its own configuration that overrides the default settings here."
                    },
                    "defaultEventsConfiguration": {
                      "type": "string",
                      "description": "Stringified JSON that contains connector-specific default configuration for all events. Each event can have its own configuration that overrides the default settings here."
                    },
                    "defaultStreamsConfiguration": {
                      "type": "string",
                      "description": "Stringified JSON that contains connector-specific default configuration for all streams. Each stream can have its own configuration that overrides the default settings here."
                    },
                    "defaultManagementGroupsConfiguration": {
                      "type": "string",
                      "description": "Stringified JSON that contains connector-specific default configuration for all management groups. Each management group can have its own configuration that overrides the default settings here."
                    },
                    "defaultDatasetsDestinations": {
                      "type": "array",
                      "description": "Default destinations for a dataset.",
                      "items": {
                        "type": "object",
                        "description": "The type of the destination.",
                        "properties": {
                          "target": {
                            "description": "Target destination.",
                            "type": "string",
                            "enum": [
                              "Mqtt",
                              "BrokerStateStore",
                              "Storage"
                            ],
                            "x-ms-enum": {
                              "name": "DatasetDestinationTarget",
                              "modelAsString": true,
                              "values": [
                                {
                                  "name": "Mqtt",
                                  "value": "Mqtt",
                                  "description": "MQTT target."
                                },
                                {
                                  "name": "BrokerStateStore",
                                  "value": "BrokerStateStore",
                                  "description": "Broker State Store target."
                                },
                                {
                                  "name": "Storage",
                                  "value": "Storage",
                                  "description": "Storage target."
                                }
                              ]
                            }
                          }
                        },
                        "discriminator": "target",
                        "required": [
                          "target"
                        ]
                      },
                      "x-ms-identifiers": []
                    },
                    "defaultEventsDestinations": {
                      "type": "array",
                      "description": "Default destinations for an event.",
                      "items": {
                        "type": "object",
                        "description": "The type of the destination.",
                        "properties": {
                          "target": {
                            "description": "Target destination.",
                            "type": "string",
                            "enum": [
                              "Mqtt",
                              "Storage"
                            ],
                            "x-ms-enum": {
                              "name": "EventDestinationTarget",
                              "modelAsString": true,
                              "values": [
                                {
                                  "name": "Mqtt",
                                  "value": "Mqtt",
                                  "description": "MQTT target."
                                },
                                {
                                  "name": "Storage",
                                  "value": "Storage",
                                  "description": "Storage target."
                                }
                              ]
                            }
                          }
                        },
                        "discriminator": "target",
                        "required": [
                          "target"
                        ]
                      },
                      "x-ms-identifiers": []
                    },
                    "defaultStreamsDestinations": {
                      "type": "array",
                      "description": "Default destinations for a stream.",
                      "items": {
                        "type": "object",
                        "description": "The type of the destination.",
                        "properties": {
                          "target": {
                            "description": "Target destination.",
                            "type": "string",
                            "enum": [
                              "Mqtt",
                              "Storage"
                            ],
                            "x-ms-enum": {
                              "name": "StreamDestinationTarget",
                              "modelAsString": true,
                              "values": [
                                {
                                  "name": "Mqtt",
                                  "value": "Mqtt",
                                  "description": "MQTT target."
                                },
                                {
                                  "name": "Storage",
                                  "value": "Storage",
                                  "description": "Storage target."
                                }
                              ]
                            }
                          }
                        },
                        "discriminator": "target",
                        "required": [
                          "target"
                        ]
                      },
                      "x-ms-identifiers": []
                    },
                    "datasets": {
                      "type": "array",
                      "description": "Array of datasets that are part of the asset. Each dataset spec describes the data points that make up the set.",
                      "items": {
                        "type": "object",
                        "description": "Defines the dataset properties.",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "Name of the dataset."
                          },
                          "dataSource": {
                            "type": "string",
                            "description": "Reference to a data source for a given dataset."
                          },
                          "typeRef": {
                            "type": "string",
                            "description": "URI or type definition ID."
                          },
                          "datasetConfiguration": {
                            "type": "string",
                            "description": "Stringified JSON that contains connector-specific properties that describes configuration for the specific dataset."
                          },
                          "destinations": {
                            "type": "array",
                            "description": "Destinations for a dataset.",
                            "items": {
                              "type": "object",
                              "description": "The type of the destination.",
                              "properties": {
                                "target": {
                                  "description": "Target destination.",
                                  "type": "string",
                                  "enum": [
                                    "Mqtt",
                                    "BrokerStateStore",
                                    "Storage"
                                  ],
                                  "x-ms-enum": {
                                    "name": "DatasetDestinationTarget",
                                    "modelAsString": true,
                                    "values": [
                                      {
                                        "name": "Mqtt",
                                        "value": "Mqtt",
                                        "description": "MQTT target."
                                      },
                                      {
                                        "name": "BrokerStateStore",
                                        "value": "BrokerStateStore",
                                        "description": "Broker State Store target."
                                      },
                                      {
                                        "name": "Storage",
                                        "value": "Storage",
                                        "description": "Storage target."
                                      }
                                    ]
                                  }
                                }
                              },
                              "discriminator": "target",
                              "required": [
                                "target"
                              ]
                            },
                            "x-ms-identifiers": []
                          },
                          "dataPoints": {
                            "type": "array",
                            "description": "Array of data points that are part of the dataset. Each data point can have per-data point configuration.",
                            "items": {
                              "type": "object",
                              "description": "Defines the discovered dataset data point properties.",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "The name of the data point."
                                },
                                "dataSource": {
                                  "type": "string",
                                  "description": "The address of the source of the data in the asset (e.g. URL) so that a client can access the data source on the asset."
                                },
                                "dataPointConfiguration": {
                                  "type": "string",
                                  "description": "Stringified JSON that contains connector-specific configuration for the data point. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize."
                                },
                                "lastUpdatedOn": {
                                  "type": "string",
                                  "format": "date-time",
                                  "description": "UTC timestamp indicating when the data point was added or modified."
                                },
                                "typeRef": {
                                  "type": "string",
                                  "description": "URI or type definition ID."
                                }
                              },
                              "required": [
                                "name",
                                "dataSource"
                              ]
                            },
                            "x-ms-identifiers": []
                          },
                          "lastUpdatedOn": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Timestamp (in UTC) indicating when the dataset was added or modified."
                          }
                        },
                        "required": [
                          "name"
                        ]
                      },
                      "x-ms-identifiers": []
                    },
                    "eventGroups": {
                      "type": "array",
                      "description": "Array of event groups that are part of the asset. Each event group can have per-event group configuration.",
                      "items": {
                        "type": "object",
                        "description": "Defines the discovered event group properties.",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "The name of the event group."
                          },
                          "dataSource": {
                            "type": "string",
                            "description": "The address of the notifier of the event group in the asset (e.g. URL) so that a client can access the event group on the asset."
                          },
                          "eventGroupConfiguration": {
                            "type": "string",
                            "description": "Stringified JSON that contains connector-specific configuration for the event group. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize."
                          },
                          "defaultDestinations": {
                            "type": "array",
                            "description": "Destinations for events. Default destinations when destinations is not defined at the event level.",
                            "items": {
                              "type": "object",
                              "description": "The type of the destination.",
                              "properties": {
                                "target": {
                                  "description": "Target destination.",
                                  "type": "string",
                                  "enum": [
                                    "Mqtt",
                                    "Storage"
                                  ],
                                  "x-ms-enum": {
                                    "name": "EventDestinationTarget",
                                    "modelAsString": true,
                                    "values": [
                                      {
                                        "name": "Mqtt",
                                        "value": "Mqtt",
                                        "description": "MQTT target."
                                      },
                                      {
                                        "name": "Storage",
                                        "value": "Storage",
                                        "description": "Storage target."
                                      }
                                    ]
                                  }
                                }
                              },
                              "discriminator": "target",
                              "required": [
                                "target"
                              ]
                            },
                            "x-ms-identifiers": []
                          },
                          "typeRef": {
                            "type": "string",
                            "description": "URI or type definition ID."
                          },
                          "events": {
                            "type": "array",
                            "description": "Array of events that are part of the event group.",
                            "items": {
                              "type": "object",
                              "description": "Defines the event properties.",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "The name of the event."
                                },
                                "dataSource": {
                                  "type": "string",
                                  "description": "Reference to a data source for a given event."
                                },
                                "eventConfiguration": {
                                  "type": "string",
                                  "description": "Stringified JSON that contains connector-specific configuration for the event. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize."
                                },
                                "destinations": {
                                  "type": "array",
                                  "description": "Destinations for an event.",
                                  "items": {
                                    "type": "object",
                                    "description": "The type of the destination.",
                                    "properties": {
                                      "target": {
                                        "description": "Target destination.",
                                        "type": "string",
                                        "enum": [
                                          "Mqtt",
                                          "Storage"
                                        ],
                                        "x-ms-enum": {
                                          "name": "EventDestinationTarget",
                                          "modelAsString": true,
                                          "values": [
                                            {
                                              "name": "Mqtt",
                                              "value": "Mqtt",
                                              "description": "MQTT target."
                                            },
                                            {
                                              "name": "Storage",
                                              "value": "Storage",
                                              "description": "Storage target."
                                            }
                                          ]
                                        }
                                      }
                                    },
                                    "discriminator": "target",
                                    "required": [
                                      "target"
                                    ]
                                  },
                                  "x-ms-identifiers": []
                                },
                                "typeRef": {
                                  "type": "string",
                                  "description": "URI or type definition ID."
                                },
                                "lastUpdatedOn": {
                                  "type": "string",
                                  "format": "date-time",
                                  "description": "UTC timestamp indicating when the event was added or modified."
                                }
                              },
                              "required": [
                                "name"
                              ]
                            },
                            "x-ms-identifiers": []
                          }
                        },
                        "required": [
                          "name"
                        ]
                      },
                      "x-ms-identifiers": []
                    },
                    "streams": {
                      "type": "array",
                      "description": "Array of streams that are part of the asset. Each stream can have a per-stream configuration.",
                      "items": {
                        "type": "object",
                        "description": "Defines the stream properties.",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "Name of the stream definition."
                          },
                          "streamConfiguration": {
                            "type": "string",
                            "description": "Stringified JSON that contains connector-specific configuration for the specific stream."
                          },
                          "typeRef": {
                            "type": "string",
                            "description": "URI or type definition ID."
                          },
                          "destinations": {
                            "type": "array",
                            "description": "Destinations for a stream.",
                            "items": {
                              "type": "object",
                              "description": "The type of the destination.",
                              "properties": {
                                "target": {
                                  "description": "Target destination.",
                                  "type": "string",
                                  "enum": [
                                    "Mqtt",
                                    "Storage"
                                  ],
                                  "x-ms-enum": {
                                    "name": "StreamDestinationTarget",
                                    "modelAsString": true,
                                    "values": [
                                      {
                                        "name": "Mqtt",
                                        "value": "Mqtt",
                                        "description": "MQTT target."
                                      },
                                      {
                                        "name": "Storage",
                                        "value": "Storage",
                                        "description": "Storage target."
                                      }
                                    ]
                                  }
                                }
                              },
                              "discriminator": "target",
                              "required": [
                                "target"
                              ]
                            },
                            "x-ms-identifiers": []
                          },
                          "lastUpdatedOn": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Timestamp (in UTC) indicating when the stream was added or modified."
                          }
                        },
                        "required": [
                          "name"
                        ]
                      },
                      "x-ms-identifiers": []
                    },
                    "managementGroups": {
                      "type": "array",
                      "description": "Array of management groups that are part of the asset. Each management group can have a per-group configuration.",
                      "items": {
                        "type": "object",
                        "description": "Defines the management group properties.",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "Name of the management group."
                          },
                          "managementGroupConfiguration": {
                            "type": "string",
                            "description": "Stringified JSON that contains connector-specific configuration for the management group."
                          },
                          "typeRef": {
                            "type": "string",
                            "description": "URI or type definition ID."
                          },
                          "dataSource": {
                            "type": "string",
                            "description": "Reference to a data source for a given management group."
                          },
                          "defaultTopic": {
                            "type": "string",
                            "description": "Default MQTT topic path on which a client will receive the request for all actions that are part of the management group."
                          },
                          "defaultTimeoutInSeconds": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Default response timeout for all actions that are part of the management group.",
                            "default": 100
                          },
                          "actions": {
                            "type": "array",
                            "description": "Array of actions that are part of the management group. Each action can have an individual configuration.",
                            "items": {
                              "type": "object",
                              "description": "Defines the action properties.",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "Name of the action."
                                },
                                "actionConfiguration": {
                                  "type": "string",
                                  "description": "Stringified JSON that contains connector-specific configuration for the action."
                                },
                                "targetUri": {
                                  "type": "string",
                                  "description": "The target URI on which a client can invoke the specific action."
                                },
                                "typeRef": {
                                  "type": "string",
                                  "description": "URI or type definition ID."
                                },
                                "topic": {
                                  "type": "string",
                                  "description": "The MQTT topic path on which a client will receive the request for the action."
                                },
                                "actionType": {
                                  "type": "string",
                                  "description": "The type of the action.",
                                  "default": "Call",
                                  "enum": [
                                    "Call",
                                    "Read",
                                    "Write"
                                  ],
                                  "x-ms-enum": {
                                    "name": "NamespaceDiscoveredManagementActionType",
                                    "modelAsString": true,
                                    "values": [
                                      {
                                        "name": "Call",
                                        "value": "Call",
                                        "description": "Call action type."
                                      },
                                      {
                                        "name": "Read",
                                        "value": "Read",
                                        "description": "Read action type."
                                      },
                                      {
                                        "name": "Write",
                                        "value": "Write",
                                        "description": "Write action type."
                                      }
                                    ]
                                  }
                                },
                                "timeoutInSeconds": {
                                  "type": "integer",
                                  "format": "int32",
                                  "description": "Response timeout for the action."
                                },
                                "lastUpdatedOn": {
                                  "type": "string",
                                  "format": "date-time",
                                  "description": "Timestamp (in UTC) indicating when the management action was added or modified."
                                }
                              },
                              "required": [
                                "name",
                                "targetUri"
                              ]
                            },
                            "x-ms-identifiers": []
                          },
                          "lastUpdatedOn": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Timestamp (in UTC) indicating when the management group was added or modified."
                          }
                        },
                        "required": [
                          "name"
                        ]
                      },
                      "x-ms-identifiers": []
                    },
                    "provisioningState": {
                      "description": "Provisioning state of the resource.",
                      "readOnly": true,
                      "type": "string",
                      "enum": [
                        "Succeeded",
                        "Failed",
                        "Canceled",
                        "Accepted",
                        "Deleting"
                      ],
                      "x-ms-enum": {
                        "name": "ProvisioningState",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Succeeded",
                            "value": "Succeeded",
                            "description": "Resource has been created."
                          },
                          {
                            "name": "Failed",
                            "value": "Failed",
                            "description": "Resource creation failed."
                          },
                          {
                            "name": "Canceled",
                            "value": "Canceled",
                            "description": "Resource creation was canceled."
                          },
                          {
                            "name": "Accepted",
                            "value": "Accepted",
                            "description": "Resource has been accepted by the server."
                          },
                          {
                            "name": "Deleting",
                            "value": "Deleting",
                            "description": "Resource is deleting."
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "deviceRef",
                    "discoveryId",
                    "version"
                  ]
                },
                "extendedLocation": {
                  "description": "The extended location.",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ],
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "description": "The extended location type."
                    },
                    "name": {
                      "type": "string",
                      "description": "The extended location name."
                    }
                  },
                  "required": [
                    "type",
                    "name"
                  ]
                }
              },
              "required": [
                "extendedLocation"
              ]
            },
            "headers": {
              "Azure-AsyncOperation": {
                "type": "string",
                "description": "A link to the status monitor"
              },
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "NamespaceDiscoveredAssets_Update",
        "tags": [
          "NamespaceDiscoveredAssets"
        ],
        "description": "Update a NamespaceDiscoveredAsset",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription. The value must be an UUID.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group. The name is case insensitive.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "x-ms-parameter-location": "method"
          },
          {
            "name": "namespaceName",
            "in": "path",
            "description": "The name of the namespace.",
            "required": true,
            "type": "string",
            "minLength": 3,
            "maxLength": 64,
            "pattern": "^[a-z0-9][a-z0-9-]*[a-z0-9]$"
          },
          {
            "name": "discoveredAssetName",
            "in": "path",
            "description": "The name of the discovered asset.",
            "required": true,
            "type": "string",
            "minLength": 3,
            "maxLength": 63,
            "pattern": "^[a-z0-9][a-z0-9-]*[a-z0-9]$"
          },
          {
            "name": "properties",
            "in": "body",
            "description": "The resource properties to be updated.",
            "required": true,
            "schema": {
              "type": "object",
              "description": "The type used for update operations of the NamespaceDiscoveredAsset.",
              "properties": {
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "deviceRef": {
                      "description": "Reference to the device that provides data for this asset. Must provide device name & endpoint on the device to use.",
                      "type": "object",
                      "properties": {
                        "deviceName": {
                          "type": "string",
                          "description": "Name of the device resource"
                        },
                        "endpointName": {
                          "type": "string",
                          "description": "The name of endpoint to use"
                        }
                      }
                    },
                    "displayName": {
                      "type": "string",
                      "description": "Human-readable display name."
                    },
                    "assetTypeRefs": {
                      "type": "array",
                      "description": "URIs or type definition IDs.",
                      "items": {
                        "type": "string"
                      }
                    },
                    "description": {
                      "type": "string",
                      "description": "Human-readable description of the asset."
                    },
                    "discoveryId": {
                      "type": "string",
                      "description": "Identifier used to detect changes in the asset."
                    },
                    "version": {
                      "type": "integer",
                      "format": "int64",
                      "description": "An integer that is incremented each time the resource is modified."
                    },
                    "manufacturer": {
                      "type": "string",
                      "description": "Asset manufacturer."
                    },
                    "manufacturerUri": {
                      "type": "string",
                      "description": "Asset manufacturer URI."
                    },
                    "model": {
                      "type": "string",
                      "description": "Asset model."
                    },
                    "productCode": {
                      "type": "string",
                      "description": "Asset product code."
                    },
                    "hardwareRevision": {
                      "type": "string",
                      "description": "Asset hardware revision number."
                    },
                    "softwareRevision": {
                      "type": "string",
                      "description": "Asset software revision number."
                    },
                    "documentationUri": {
                      "type": "string",
                      "description": "Asset documentation reference."
                    },
                    "serialNumber": {
                      "type": "string",
                      "description": "Asset serial number."
                    },
                    "attributes": {
                      "type": "object",
                      "description": "A set of key-value pairs that contain custom attributes.",
                      "additionalProperties": {}
                    },
                    "defaultDatasetsConfiguration": {
                      "type": "string",
                      "description": "Stringified JSON that contains connector-specific default configuration for all datasets. Each dataset can have its own configuration that overrides the default settings here."
                    },
                    "defaultEventsConfiguration": {
                      "type": "string",
                      "description": "Stringified JSON that contains connector-specific default configuration for all events. Each event can have its own configuration that overrides the default settings here."
                    },
                    "defaultStreamsConfiguration": {
                      "type": "string",
                      "description": "Stringified JSON that contains connector-specific default configuration for all streams. Each stream can have its own configuration that overrides the default settings here."
                    },
                    "defaultManagementGroupsConfiguration": {
                      "type": "string",
                      "description": "Stringified JSON that contains connector-specific default configuration for all management groups. Each management group can have its own configuration that overrides the default settings here."
                    },
                    "defaultDatasetsDestinations": {
                      "type": "array",
                      "description": "Default destinations for a dataset.",
                      "items": {
                        "type": "object",
                        "description": "The type of the destination.",
                        "properties": {
                          "target": {
                            "description": "Target destination.",
                            "type": "string",
                            "enum": [
                              "Mqtt",
                              "BrokerStateStore",
                              "Storage"
                            ],
                            "x-ms-enum": {
                              "name": "DatasetDestinationTarget",
                              "modelAsString": true,
                              "values": [
                                {
                                  "name": "Mqtt",
                                  "value": "Mqtt",
                                  "description": "MQTT target."
                                },
                                {
                                  "name": "BrokerStateStore",
                                  "value": "BrokerStateStore",
                                  "description": "Broker State Store target."
                                },
                                {
                                  "name": "Storage",
                                  "value": "Storage",
                                  "description": "Storage target."
                                }
                              ]
                            }
                          }
                        },
                        "discriminator": "target",
                        "required": [
                          "target"
                        ]
                      },
                      "x-ms-identifiers": []
                    },
                    "defaultEventsDestinations": {
                      "type": "array",
                      "description": "Default destinations for an event.",
                      "items": {
                        "type": "object",
                        "description": "The type of the destination.",
                        "properties": {
                          "target": {
                            "description": "Target destination.",
                            "type": "string",
                            "enum": [
                              "Mqtt",
                              "Storage"
                            ],
                            "x-ms-enum": {
                              "name": "EventDestinationTarget",
                              "modelAsString": true,
                              "values": [
                                {
                                  "name": "Mqtt",
                                  "value": "Mqtt",
                                  "description": "MQTT target."
                                },
                                {
                                  "name": "Storage",
                                  "value": "Storage",
                                  "description": "Storage target."
                                }
                              ]
                            }
                          }
                        },
                        "discriminator": "target",
                        "required": [
                          "target"
                        ]
                      },
                      "x-ms-identifiers": []
                    },
                    "defaultStreamsDestinations": {
                      "type": "array",
                      "description": "Default destinations for a stream.",
                      "items": {
                        "type": "object",
                        "description": "The type of the destination.",
                        "properties": {
                          "target": {
                            "description": "Target destination.",
                            "type": "string",
                            "enum": [
                              "Mqtt",
                              "Storage"
                            ],
                            "x-ms-enum": {
                              "name": "StreamDestinationTarget",
                              "modelAsString": true,
                              "values": [
                                {
                                  "name": "Mqtt",
                                  "value": "Mqtt",
                                  "description": "MQTT target."
                                },
                                {
                                  "name": "Storage",
                                  "value": "Storage",
                                  "description": "Storage target."
                                }
                              ]
                            }
                          }
                        },
                        "discriminator": "target",
                        "required": [
                          "target"
                        ]
                      },
                      "x-ms-identifiers": []
                    },
                    "datasets": {
                      "type": "array",
                      "description": "Array of datasets that are part of the asset. Each dataset spec describes the data points that make up the set.",
                      "items": {
                        "type": "object",
                        "description": "Defines the dataset properties.",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "Name of the dataset."
                          },
                          "dataSource": {
                            "type": "string",
                            "description": "Reference to a data source for a given dataset."
                          },
                          "typeRef": {
                            "type": "string",
                            "description": "URI or type definition ID."
                          },
                          "datasetConfiguration": {
                            "type": "string",
                            "description": "Stringified JSON that contains connector-specific properties that describes configuration for the specific dataset."
                          },
                          "destinations": {
                            "type": "array",
                            "description": "Destinations for a dataset.",
                            "items": {
                              "type": "object",
                              "description": "The type of the destination.",
                              "properties": {
                                "target": {
                                  "description": "Target destination.",
                                  "type": "string",
                                  "enum": [
                                    "Mqtt",
                                    "BrokerStateStore",
                                    "Storage"
                                  ],
                                  "x-ms-enum": {
                                    "name": "DatasetDestinationTarget",
                                    "modelAsString": true,
                                    "values": [
                                      {
                                        "name": "Mqtt",
                                        "value": "Mqtt",
                                        "description": "MQTT target."
                                      },
                                      {
                                        "name": "BrokerStateStore",
                                        "value": "BrokerStateStore",
                                        "description": "Broker State Store target."
                                      },
                                      {
                                        "name": "Storage",
                                        "value": "Storage",
                                        "description": "Storage target."
                                      }
                                    ]
                                  }
                                }
                              },
                              "discriminator": "target",
                              "required": [
                                "target"
                              ]
                            },
                            "x-ms-identifiers": []
                          },
                          "dataPoints": {
                            "type": "array",
                            "description": "Array of data points that are part of the dataset. Each data point can have per-data point configuration.",
                            "items": {
                              "type": "object",
                              "description": "Defines the discovered dataset data point properties.",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "The name of the data point."
                                },
                                "dataSource": {
                                  "type": "string",
                                  "description": "The address of the source of the data in the asset (e.g. URL) so that a client can access the data source on the asset."
                                },
                                "dataPointConfiguration": {
                                  "type": "string",
                                  "description": "Stringified JSON that contains connector-specific configuration for the data point. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize."
                                },
                                "lastUpdatedOn": {
                                  "type": "string",
                                  "format": "date-time",
                                  "description": "UTC timestamp indicating when the data point was added or modified."
                                },
                                "typeRef": {
                                  "type": "string",
                                  "description": "URI or type definition ID."
                                }
                              },
                              "required": [
                                "name",
                                "dataSource"
                              ]
                            },
                            "x-ms-identifiers": []
                          },
                          "lastUpdatedOn": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Timestamp (in UTC) indicating when the dataset was added or modified."
                          }
                        },
                        "required": [
                          "name"
                        ]
                      },
                      "x-ms-identifiers": []
                    },
                    "eventGroups": {
                      "type": "array",
                      "description": "Array of event groups that are part of the asset. Each event group can have per-event group configuration.",
                      "items": {
                        "type": "object",
                        "description": "Defines the discovered event group properties.",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "The name of the event group."
                          },
                          "dataSource": {
                            "type": "string",
                            "description": "The address of the notifier of the event group in the asset (e.g. URL) so that a client can access the event group on the asset."
                          },
                          "eventGroupConfiguration": {
                            "type": "string",
                            "description": "Stringified JSON that contains connector-specific configuration for the event group. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize."
                          },
                          "defaultDestinations": {
                            "type": "array",
                            "description": "Destinations for events. Default destinations when destinations is not defined at the event level.",
                            "items": {
                              "type": "object",
                              "description": "The type of the destination.",
                              "properties": {
                                "target": {
                                  "description": "Target destination.",
                                  "type": "string",
                                  "enum": [
                                    "Mqtt",
                                    "Storage"
                                  ],
                                  "x-ms-enum": {
                                    "name": "EventDestinationTarget",
                                    "modelAsString": true,
                                    "values": [
                                      {
                                        "name": "Mqtt",
                                        "value": "Mqtt",
                                        "description": "MQTT target."
                                      },
                                      {
                                        "name": "Storage",
                                        "value": "Storage",
                                        "description": "Storage target."
                                      }
                                    ]
                                  }
                                }
                              },
                              "discriminator": "target",
                              "required": [
                                "target"
                              ]
                            },
                            "x-ms-identifiers": []
                          },
                          "typeRef": {
                            "type": "string",
                            "description": "URI or type definition ID."
                          },
                          "events": {
                            "type": "array",
                            "description": "Array of events that are part of the event group.",
                            "items": {
                              "type": "object",
                              "description": "Defines the event properties.",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "The name of the event."
                                },
                                "dataSource": {
                                  "type": "string",
                                  "description": "Reference to a data source for a given event."
                                },
                                "eventConfiguration": {
                                  "type": "string",
                                  "description": "Stringified JSON that contains connector-specific configuration for the event. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize."
                                },
                                "destinations": {
                                  "type": "array",
                                  "description": "Destinations for an event.",
                                  "items": {
                                    "type": "object",
                                    "description": "The type of the destination.",
                                    "properties": {
                                      "target": {
                                        "description": "Target destination.",
                                        "type": "string",
                                        "enum": [
                                          "Mqtt",
                                          "Storage"
                                        ],
                                        "x-ms-enum": {
                                          "name": "EventDestinationTarget",
                                          "modelAsString": true,
                                          "values": [
                                            {
                                              "name": "Mqtt",
                                              "value": "Mqtt",
                                              "description": "MQTT target."
                                            },
                                            {
                                              "name": "Storage",
                                              "value": "Storage",
                                              "description": "Storage target."
                                            }
                                          ]
                                        }
                                      }
                                    },
                                    "discriminator": "target",
                                    "required": [
                                      "target"
                                    ]
                                  },
                                  "x-ms-identifiers": []
                                },
                                "typeRef": {
                                  "type": "string",
                                  "description": "URI or type definition ID."
                                },
                                "lastUpdatedOn": {
                                  "type": "string",
                                  "format": "date-time",
                                  "description": "UTC timestamp indicating when the event was added or modified."
                                }
                              },
                              "required": [
                                "name"
                              ]
                            },
                            "x-ms-identifiers": []
                          }
                        },
                        "required": [
                          "name"
                        ]
                      },
                      "x-ms-identifiers": []
                    },
                    "streams": {
                      "type": "array",
                      "description": "Array of streams that are part of the asset. Each stream can have a per-stream configuration.",
                      "items": {
                        "type": "object",
                        "description": "Defines the stream properties.",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "Name of the stream definition."
                          },
                          "streamConfiguration": {
                            "type": "string",
                            "description": "Stringified JSON that contains connector-specific configuration for the specific stream."
                          },
                          "typeRef": {
                            "type": "string",
                            "description": "URI or type definition ID."
                          },
                          "destinations": {
                            "type": "array",
                            "description": "Destinations for a stream.",
                            "items": {
                              "type": "object",
                              "description": "The type of the destination.",
                              "properties": {
                                "target": {
                                  "description": "Target destination.",
                                  "type": "string",
                                  "enum": [
                                    "Mqtt",
                                    "Storage"
                                  ],
                                  "x-ms-enum": {
                                    "name": "StreamDestinationTarget",
                                    "modelAsString": true,
                                    "values": [
                                      {
                                        "name": "Mqtt",
                                        "value": "Mqtt",
                                        "description": "MQTT target."
                                      },
                                      {
                                        "name": "Storage",
                                        "value": "Storage",
                                        "description": "Storage target."
                                      }
                                    ]
                                  }
                                }
                              },
                              "discriminator": "target",
                              "required": [
                                "target"
                              ]
                            },
                            "x-ms-identifiers": []
                          },
                          "lastUpdatedOn": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Timestamp (in UTC) indicating when the stream was added or modified."
                          }
                        },
                        "required": [
                          "name"
                        ]
                      },
                      "x-ms-identifiers": []
                    },
                    "managementGroups": {
                      "type": "array",
                      "description": "Array of management groups that are part of the asset. Each management group can have a per-group configuration.",
                      "items": {
                        "type": "object",
                        "description": "Defines the management group properties.",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "Name of the management group."
                          },
                          "managementGroupConfiguration": {
                            "type": "string",
                            "description": "Stringified JSON that contains connector-specific configuration for the management group."
                          },
                          "typeRef": {
                            "type": "string",
                            "description": "URI or type definition ID."
                          },
                          "dataSource": {
                            "type": "string",
                            "description": "Reference to a data source for a given management group."
                          },
                          "defaultTopic": {
                            "type": "string",
                            "description": "Default MQTT topic path on which a client will receive the request for all actions that are part of the management group."
                          },
                          "defaultTimeoutInSeconds": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Default response timeout for all actions that are part of the management group.",
                            "default": 100
                          },
                          "actions": {
                            "type": "array",
                            "description": "Array of actions that are part of the management group. Each action can have an individual configuration.",
                            "items": {
                              "type": "object",
                              "description": "Defines the action properties.",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "Name of the action."
                                },
                                "actionConfiguration": {
                                  "type": "string",
                                  "description": "Stringified JSON that contains connector-specific configuration for the action."
                                },
                                "targetUri": {
                                  "type": "string",
                                  "description": "The target URI on which a client can invoke the specific action."
                                },
                                "typeRef": {
                                  "type": "string",
                                  "description": "URI or type definition ID."
                                },
                                "topic": {
                                  "type": "string",
                                  "description": "The MQTT topic path on which a client will receive the request for the action."
                                },
                                "actionType": {
                                  "type": "string",
                                  "description": "The type of the action.",
                                  "default": "Call",
                                  "enum": [
                                    "Call",
                                    "Read",
                                    "Write"
                                  ],
                                  "x-ms-enum": {
                                    "name": "NamespaceDiscoveredManagementActionType",
                                    "modelAsString": true,
                                    "values": [
                                      {
                                        "name": "Call",
                                        "value": "Call",
                                        "description": "Call action type."
                                      },
                                      {
                                        "name": "Read",
                                        "value": "Read",
                                        "description": "Read action type."
                                      },
                                      {
                                        "name": "Write",
                                        "value": "Write",
                                        "description": "Write action type."
                                      }
                                    ]
                                  }
                                },
                                "timeoutInSeconds": {
                                  "type": "integer",
                                  "format": "int32",
                                  "description": "Response timeout for the action."
                                },
                                "lastUpdatedOn": {
                                  "type": "string",
                                  "format": "date-time",
                                  "description": "Timestamp (in UTC) indicating when the management action was added or modified."
                                }
                              },
                              "required": [
                                "name",
                                "targetUri"
                              ]
                            },
                            "x-ms-identifiers": []
                          },
                          "lastUpdatedOn": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Timestamp (in UTC) indicating when the management group was added or modified."
                          }
                        },
                        "required": [
                          "name"
                        ]
                      },
                      "x-ms-identifiers": []
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "type": "object",
              "description": "Discovered asset definition.",
              "properties": {
                "id": {
                  "type": "string",
                  "format": "arm-id",
                  "description": "Fully qualified resource ID for the resource. E.g. \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}\"",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "description": "The name of the resource",
                  "readOnly": true
                },
                "type": {
                  "type": "string",
                  "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                  "readOnly": true
                },
                "systemData": {
                  "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                  "readOnly": true,
                  "type": "object",
                  "properties": {
                    "createdBy": {
                      "type": "string",
                      "description": "The identity that created the resource."
                    },
                    "createdByType": {
                      "type": "string",
                      "description": "The type of identity that created the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource creation (UTC)."
                    },
                    "lastModifiedBy": {
                      "type": "string",
                      "description": "The identity that last modified the resource."
                    },
                    "lastModifiedByType": {
                      "type": "string",
                      "description": "The type of identity that last modified the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "lastModifiedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource last modification (UTC)"
                    }
                  }
                },
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "x-ms-mutability": [
                    "read",
                    "create",
                    "update"
                  ]
                },
                "location": {
                  "type": "string",
                  "description": "The geo-location where the resource lives",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ]
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "deviceRef": {
                      "description": "Reference to the device that provides data for this asset. Must provide device name & endpoint on the device to use.",
                      "type": "object",
                      "properties": {
                        "deviceName": {
                          "type": "string",
                          "description": "Name of the device resource"
                        },
                        "endpointName": {
                          "type": "string",
                          "description": "The name of endpoint to use"
                        }
                      },
                      "required": [
                        "deviceName",
                        "endpointName"
                      ]
                    },
                    "displayName": {
                      "type": "string",
                      "description": "Human-readable display name."
                    },
                    "assetTypeRefs": {
                      "type": "array",
                      "description": "URIs or type definition IDs.",
                      "items": {
                        "type": "string"
                      }
                    },
                    "description": {
                      "type": "string",
                      "description": "Human-readable description of the asset."
                    },
                    "discoveryId": {
                      "type": "string",
                      "description": "Identifier used to detect changes in the asset."
                    },
                    "externalAssetId": {
                      "type": "string",
                      "description": "Asset ID provided by the customer.",
                      "x-ms-mutability": [
                        "read",
                        "create"
                      ]
                    },
                    "version": {
                      "type": "integer",
                      "format": "int64",
                      "description": "An integer that is incremented each time the resource is modified."
                    },
                    "manufacturer": {
                      "type": "string",
                      "description": "Asset manufacturer."
                    },
                    "manufacturerUri": {
                      "type": "string",
                      "description": "Asset manufacturer URI."
                    },
                    "model": {
                      "type": "string",
                      "description": "Asset model."
                    },
                    "productCode": {
                      "type": "string",
                      "description": "Asset product code."
                    },
                    "hardwareRevision": {
                      "type": "string",
                      "description": "Asset hardware revision number."
                    },
                    "softwareRevision": {
                      "type": "string",
                      "description": "Asset software revision number."
                    },
                    "documentationUri": {
                      "type": "string",
                      "description": "Asset documentation reference."
                    },
                    "serialNumber": {
                      "type": "string",
                      "description": "Asset serial number."
                    },
                    "attributes": {
                      "type": "object",
                      "description": "A set of key-value pairs that contain custom attributes.",
                      "additionalProperties": {}
                    },
                    "defaultDatasetsConfiguration": {
                      "type": "string",
                      "description": "Stringified JSON that contains connector-specific default configuration for all datasets. Each dataset can have its own configuration that overrides the default settings here."
                    },
                    "defaultEventsConfiguration": {
                      "type": "string",
                      "description": "Stringified JSON that contains connector-specific default configuration for all events. Each event can have its own configuration that overrides the default settings here."
                    },
                    "defaultStreamsConfiguration": {
                      "type": "string",
                      "description": "Stringified JSON that contains connector-specific default configuration for all streams. Each stream can have its own configuration that overrides the default settings here."
                    },
                    "defaultManagementGroupsConfiguration": {
                      "type": "string",
                      "description": "Stringified JSON that contains connector-specific default configuration for all management groups. Each management group can have its own configuration that overrides the default settings here."
                    },
                    "defaultDatasetsDestinations": {
                      "type": "array",
                      "description": "Default destinations for a dataset.",
                      "items": {
                        "type": "object",
                        "description": "The type of the destination.",
                        "properties": {
                          "target": {
                            "description": "Target destination.",
                            "type": "string",
                            "enum": [
                              "Mqtt",
                              "BrokerStateStore",
                              "Storage"
                            ],
                            "x-ms-enum": {
                              "name": "DatasetDestinationTarget",
                              "modelAsString": true,
                              "values": [
                                {
                                  "name": "Mqtt",
                                  "value": "Mqtt",
                                  "description": "MQTT target."
                                },
                                {
                                  "name": "BrokerStateStore",
                                  "value": "BrokerStateStore",
                                  "description": "Broker State Store target."
                                },
                                {
                                  "name": "Storage",
                                  "value": "Storage",
                                  "description": "Storage target."
                                }
                              ]
                            }
                          }
                        },
                        "discriminator": "target",
                        "required": [
                          "target"
                        ]
                      },
                      "x-ms-identifiers": []
                    },
                    "defaultEventsDestinations": {
                      "type": "array",
                      "description": "Default destinations for an event.",
                      "items": {
                        "type": "object",
                        "description": "The type of the destination.",
                        "properties": {
                          "target": {
                            "description": "Target destination.",
                            "type": "string",
                            "enum": [
                              "Mqtt",
                              "Storage"
                            ],
                            "x-ms-enum": {
                              "name": "EventDestinationTarget",
                              "modelAsString": true,
                              "values": [
                                {
                                  "name": "Mqtt",
                                  "value": "Mqtt",
                                  "description": "MQTT target."
                                },
                                {
                                  "name": "Storage",
                                  "value": "Storage",
                                  "description": "Storage target."
                                }
                              ]
                            }
                          }
                        },
                        "discriminator": "target",
                        "required": [
                          "target"
                        ]
                      },
                      "x-ms-identifiers": []
                    },
                    "defaultStreamsDestinations": {
                      "type": "array",
                      "description": "Default destinations for a stream.",
                      "items": {
                        "type": "object",
                        "description": "The type of the destination.",
                        "properties": {
                          "target": {
                            "description": "Target destination.",
                            "type": "string",
                            "enum": [
                              "Mqtt",
                              "Storage"
                            ],
                            "x-ms-enum": {
                              "name": "StreamDestinationTarget",
                              "modelAsString": true,
                              "values": [
                                {
                                  "name": "Mqtt",
                                  "value": "Mqtt",
                                  "description": "MQTT target."
                                },
                                {
                                  "name": "Storage",
                                  "value": "Storage",
                                  "description": "Storage target."
                                }
                              ]
                            }
                          }
                        },
                        "discriminator": "target",
                        "required": [
                          "target"
                        ]
                      },
                      "x-ms-identifiers": []
                    },
                    "datasets": {
                      "type": "array",
                      "description": "Array of datasets that are part of the asset. Each dataset spec describes the data points that make up the set.",
                      "items": {
                        "type": "object",
                        "description": "Defines the dataset properties.",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "Name of the dataset."
                          },
                          "dataSource": {
                            "type": "string",
                            "description": "Reference to a data source for a given dataset."
                          },
                          "typeRef": {
                            "type": "string",
                            "description": "URI or type definition ID."
                          },
                          "datasetConfiguration": {
                            "type": "string",
                            "description": "Stringified JSON that contains connector-specific properties that describes configuration for the specific dataset."
                          },
                          "destinations": {
                            "type": "array",
                            "description": "Destinations for a dataset.",
                            "items": {
                              "type": "object",
                              "description": "The type of the destination.",
                              "properties": {
                                "target": {
                                  "description": "Target destination.",
                                  "type": "string",
                                  "enum": [
                                    "Mqtt",
                                    "BrokerStateStore",
                                    "Storage"
                                  ],
                                  "x-ms-enum": {
                                    "name": "DatasetDestinationTarget",
                                    "modelAsString": true,
                                    "values": [
                                      {
                                        "name": "Mqtt",
                                        "value": "Mqtt",
                                        "description": "MQTT target."
                                      },
                                      {
                                        "name": "BrokerStateStore",
                                        "value": "BrokerStateStore",
                                        "description": "Broker State Store target."
                                      },
                                      {
                                        "name": "Storage",
                                        "value": "Storage",
                                        "description": "Storage target."
                                      }
                                    ]
                                  }
                                }
                              },
                              "discriminator": "target",
                              "required": [
                                "target"
                              ]
                            },
                            "x-ms-identifiers": []
                          },
                          "dataPoints": {
                            "type": "array",
                            "description": "Array of data points that are part of the dataset. Each data point can have per-data point configuration.",
                            "items": {
                              "type": "object",
                              "description": "Defines the discovered dataset data point properties.",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "The name of the data point."
                                },
                                "dataSource": {
                                  "type": "string",
                                  "description": "The address of the source of the data in the asset (e.g. URL) so that a client can access the data source on the asset."
                                },
                                "dataPointConfiguration": {
                                  "type": "string",
                                  "description": "Stringified JSON that contains connector-specific configuration for the data point. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize."
                                },
                                "lastUpdatedOn": {
                                  "type": "string",
                                  "format": "date-time",
                                  "description": "UTC timestamp indicating when the data point was added or modified."
                                },
                                "typeRef": {
                                  "type": "string",
                                  "description": "URI or type definition ID."
                                }
                              },
                              "required": [
                                "name",
                                "dataSource"
                              ]
                            },
                            "x-ms-identifiers": []
                          },
                          "lastUpdatedOn": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Timestamp (in UTC) indicating when the dataset was added or modified."
                          }
                        },
                        "required": [
                          "name"
                        ]
                      },
                      "x-ms-identifiers": []
                    },
                    "eventGroups": {
                      "type": "array",
                      "description": "Array of event groups that are part of the asset. Each event group can have per-event group configuration.",
                      "items": {
                        "type": "object",
                        "description": "Defines the discovered event group properties.",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "The name of the event group."
                          },
                          "dataSource": {
                            "type": "string",
                            "description": "The address of the notifier of the event group in the asset (e.g. URL) so that a client can access the event group on the asset."
                          },
                          "eventGroupConfiguration": {
                            "type": "string",
                            "description": "Stringified JSON that contains connector-specific configuration for the event group. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize."
                          },
                          "defaultDestinations": {
                            "type": "array",
                            "description": "Destinations for events. Default destinations when destinations is not defined at the event level.",
                            "items": {
                              "type": "object",
                              "description": "The type of the destination.",
                              "properties": {
                                "target": {
                                  "description": "Target destination.",
                                  "type": "string",
                                  "enum": [
                                    "Mqtt",
                                    "Storage"
                                  ],
                                  "x-ms-enum": {
                                    "name": "EventDestinationTarget",
                                    "modelAsString": true,
                                    "values": [
                                      {
                                        "name": "Mqtt",
                                        "value": "Mqtt",
                                        "description": "MQTT target."
                                      },
                                      {
                                        "name": "Storage",
                                        "value": "Storage",
                                        "description": "Storage target."
                                      }
                                    ]
                                  }
                                }
                              },
                              "discriminator": "target",
                              "required": [
                                "target"
                              ]
                            },
                            "x-ms-identifiers": []
                          },
                          "typeRef": {
                            "type": "string",
                            "description": "URI or type definition ID."
                          },
                          "events": {
                            "type": "array",
                            "description": "Array of events that are part of the event group.",
                            "items": {
                              "type": "object",
                              "description": "Defines the event properties.",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "The name of the event."
                                },
                                "dataSource": {
                                  "type": "string",
                                  "description": "Reference to a data source for a given event."
                                },
                                "eventConfiguration": {
                                  "type": "string",
                                  "description": "Stringified JSON that contains connector-specific configuration for the event. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize."
                                },
                                "destinations": {
                                  "type": "array",
                                  "description": "Destinations for an event.",
                                  "items": {
                                    "type": "object",
                                    "description": "The type of the destination.",
                                    "properties": {
                                      "target": {
                                        "description": "Target destination.",
                                        "type": "string",
                                        "enum": [
                                          "Mqtt",
                                          "Storage"
                                        ],
                                        "x-ms-enum": {
                                          "name": "EventDestinationTarget",
                                          "modelAsString": true,
                                          "values": [
                                            {
                                              "name": "Mqtt",
                                              "value": "Mqtt",
                                              "description": "MQTT target."
                                            },
                                            {
                                              "name": "Storage",
                                              "value": "Storage",
                                              "description": "Storage target."
                                            }
                                          ]
                                        }
                                      }
                                    },
                                    "discriminator": "target",
                                    "required": [
                                      "target"
                                    ]
                                  },
                                  "x-ms-identifiers": []
                                },
                                "typeRef": {
                                  "type": "string",
                                  "description": "URI or type definition ID."
                                },
                                "lastUpdatedOn": {
                                  "type": "string",
                                  "format": "date-time",
                                  "description": "UTC timestamp indicating when the event was added or modified."
                                }
                              },
                              "required": [
                                "name"
                              ]
                            },
                            "x-ms-identifiers": []
                          }
                        },
                        "required": [
                          "name"
                        ]
                      },
                      "x-ms-identifiers": []
                    },
                    "streams": {
                      "type": "array",
                      "description": "Array of streams that are part of the asset. Each stream can have a per-stream configuration.",
                      "items": {
                        "type": "object",
                        "description": "Defines the stream properties.",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "Name of the stream definition."
                          },
                          "streamConfiguration": {
                            "type": "string",
                            "description": "Stringified JSON that contains connector-specific configuration for the specific stream."
                          },
                          "typeRef": {
                            "type": "string",
                            "description": "URI or type definition ID."
                          },
                          "destinations": {
                            "type": "array",
                            "description": "Destinations for a stream.",
                            "items": {
                              "type": "object",
                              "description": "The type of the destination.",
                              "properties": {
                                "target": {
                                  "description": "Target destination.",
                                  "type": "string",
                                  "enum": [
                                    "Mqtt",
                                    "Storage"
                                  ],
                                  "x-ms-enum": {
                                    "name": "StreamDestinationTarget",
                                    "modelAsString": true,
                                    "values": [
                                      {
                                        "name": "Mqtt",
                                        "value": "Mqtt",
                                        "description": "MQTT target."
                                      },
                                      {
                                        "name": "Storage",
                                        "value": "Storage",
                                        "description": "Storage target."
                                      }
                                    ]
                                  }
                                }
                              },
                              "discriminator": "target",
                              "required": [
                                "target"
                              ]
                            },
                            "x-ms-identifiers": []
                          },
                          "lastUpdatedOn": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Timestamp (in UTC) indicating when the stream was added or modified."
                          }
                        },
                        "required": [
                          "name"
                        ]
                      },
                      "x-ms-identifiers": []
                    },
                    "managementGroups": {
                      "type": "array",
                      "description": "Array of management groups that are part of the asset. Each management group can have a per-group configuration.",
                      "items": {
                        "type": "object",
                        "description": "Defines the management group properties.",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "Name of the management group."
                          },
                          "managementGroupConfiguration": {
                            "type": "string",
                            "description": "Stringified JSON that contains connector-specific configuration for the management group."
                          },
                          "typeRef": {
                            "type": "string",
                            "description": "URI or type definition ID."
                          },
                          "dataSource": {
                            "type": "string",
                            "description": "Reference to a data source for a given management group."
                          },
                          "defaultTopic": {
                            "type": "string",
                            "description": "Default MQTT topic path on which a client will receive the request for all actions that are part of the management group."
                          },
                          "defaultTimeoutInSeconds": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Default response timeout for all actions that are part of the management group.",
                            "default": 100
                          },
                          "actions": {
                            "type": "array",
                            "description": "Array of actions that are part of the management group. Each action can have an individual configuration.",
                            "items": {
                              "type": "object",
                              "description": "Defines the action properties.",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "Name of the action."
                                },
                                "actionConfiguration": {
                                  "type": "string",
                                  "description": "Stringified JSON that contains connector-specific configuration for the action."
                                },
                                "targetUri": {
                                  "type": "string",
                                  "description": "The target URI on which a client can invoke the specific action."
                                },
                                "typeRef": {
                                  "type": "string",
                                  "description": "URI or type definition ID."
                                },
                                "topic": {
                                  "type": "string",
                                  "description": "The MQTT topic path on which a client will receive the request for the action."
                                },
                                "actionType": {
                                  "type": "string",
                                  "description": "The type of the action.",
                                  "default": "Call",
                                  "enum": [
                                    "Call",
                                    "Read",
                                    "Write"
                                  ],
                                  "x-ms-enum": {
                                    "name": "NamespaceDiscoveredManagementActionType",
                                    "modelAsString": true,
                                    "values": [
                                      {
                                        "name": "Call",
                                        "value": "Call",
                                        "description": "Call action type."
                                      },
                                      {
                                        "name": "Read",
                                        "value": "Read",
                                        "description": "Read action type."
                                      },
                                      {
                                        "name": "Write",
                                        "value": "Write",
                                        "description": "Write action type."
                                      }
                                    ]
                                  }
                                },
                                "timeoutInSeconds": {
                                  "type": "integer",
                                  "format": "int32",
                                  "description": "Response timeout for the action."
                                },
                                "lastUpdatedOn": {
                                  "type": "string",
                                  "format": "date-time",
                                  "description": "Timestamp (in UTC) indicating when the management action was added or modified."
                                }
                              },
                              "required": [
                                "name",
                                "targetUri"
                              ]
                            },
                            "x-ms-identifiers": []
                          },
                          "lastUpdatedOn": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Timestamp (in UTC) indicating when the management group was added or modified."
                          }
                        },
                        "required": [
                          "name"
                        ]
                      },
                      "x-ms-identifiers": []
                    },
                    "provisioningState": {
                      "description": "Provisioning state of the resource.",
                      "readOnly": true,
                      "type": "string",
                      "enum": [
                        "Succeeded",
                        "Failed",
                        "Canceled",
                        "Accepted",
                        "Deleting"
                      ],
                      "x-ms-enum": {
                        "name": "ProvisioningState",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Succeeded",
                            "value": "Succeeded",
                            "description": "Resource has been created."
                          },
                          {
                            "name": "Failed",
                            "value": "Failed",
                            "description": "Resource creation failed."
                          },
                          {
                            "name": "Canceled",
                            "value": "Canceled",
                            "description": "Resource creation was canceled."
                          },
                          {
                            "name": "Accepted",
                            "value": "Accepted",
                            "description": "Resource has been accepted by the server."
                          },
                          {
                            "name": "Deleting",
                            "value": "Deleting",
                            "description": "Resource is deleting."
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "deviceRef",
                    "discoveryId",
                    "version"
                  ]
                },
                "extendedLocation": {
                  "description": "The extended location.",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ],
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "description": "The extended location type."
                    },
                    "name": {
                      "type": "string",
                      "description": "The extended location name."
                    }
                  },
                  "required": [
                    "type",
                    "name"
                  ]
                }
              },
              "required": [
                "extendedLocation"
              ]
            }
          },
          "202": {
            "description": "Resource update request accepted.",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              },
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "NamespaceDiscoveredAssets_Delete",
        "tags": [
          "NamespaceDiscoveredAssets"
        ],
        "description": "Delete a NamespaceDiscoveredAsset",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription. The value must be an UUID.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group. The name is case insensitive.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "x-ms-parameter-location": "method"
          },
          {
            "name": "namespaceName",
            "in": "path",
            "description": "The name of the namespace.",
            "required": true,
            "type": "string",
            "minLength": 3,
            "maxLength": 64,
            "pattern": "^[a-z0-9][a-z0-9-]*[a-z0-9]$"
          },
          {
            "name": "discoveredAssetName",
            "in": "path",
            "description": "The name of the discovered asset.",
            "required": true,
            "type": "string",
            "minLength": 3,
            "maxLength": 63,
            "pattern": "^[a-z0-9][a-z0-9-]*[a-z0-9]$"
          }
        ],
        "responses": {
          "202": {
            "description": "Resource deletion accepted.",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              },
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "204": {
            "description": "Resource does not exist."
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeviceRegistry/namespaces/{namespaceName}/discoveredDevices": {
      "get": {
        "operationId": "NamespaceDiscoveredDevices_ListByResourceGroup",
        "tags": [
          "NamespaceDiscoveredDevices"
        ],
        "description": "List NamespaceDiscoveredDevice resources by Namespace",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription. The value must be an UUID.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group. The name is case insensitive.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "x-ms-parameter-location": "method"
          },
          {
            "name": "namespaceName",
            "in": "path",
            "description": "The name of the namespace.",
            "required": true,
            "type": "string",
            "minLength": 3,
            "maxLength": 64,
            "pattern": "^[a-z0-9][a-z0-9-]*[a-z0-9]$"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "type": "object",
              "description": "The response of a NamespaceDiscoveredDevice list operation.",
              "properties": {
                "value": {
                  "type": "array",
                  "description": "The NamespaceDiscoveredDevice items on this page",
                  "items": {
                    "type": "object",
                    "description": "Discovered device definition.",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "arm-id",
                        "description": "Fully qualified resource ID for the resource. E.g. \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}\"",
                        "readOnly": true
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the resource",
                        "readOnly": true
                      },
                      "type": {
                        "type": "string",
                        "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                        "readOnly": true
                      },
                      "systemData": {
                        "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                        "readOnly": true,
                        "type": "object",
                        "properties": {
                          "createdBy": {
                            "type": "string",
                            "description": "The identity that created the resource."
                          },
                          "createdByType": {
                            "type": "string",
                            "description": "The type of identity that created the resource.",
                            "enum": [
                              "User",
                              "Application",
                              "ManagedIdentity",
                              "Key"
                            ],
                            "x-ms-enum": {
                              "name": "createdByType",
                              "modelAsString": true
                            }
                          },
                          "createdAt": {
                            "type": "string",
                            "format": "date-time",
                            "description": "The timestamp of resource creation (UTC)."
                          },
                          "lastModifiedBy": {
                            "type": "string",
                            "description": "The identity that last modified the resource."
                          },
                          "lastModifiedByType": {
                            "type": "string",
                            "description": "The type of identity that last modified the resource.",
                            "enum": [
                              "User",
                              "Application",
                              "ManagedIdentity",
                              "Key"
                            ],
                            "x-ms-enum": {
                              "name": "createdByType",
                              "modelAsString": true
                            }
                          },
                          "lastModifiedAt": {
                            "type": "string",
                            "format": "date-time",
                            "description": "The timestamp of resource last modification (UTC)"
                          }
                        }
                      },
                      "tags": {
                        "type": "object",
                        "description": "Resource tags.",
                        "additionalProperties": {
                          "type": "string"
                        },
                        "x-ms-mutability": [
                          "read",
                          "create",
                          "update"
                        ]
                      },
                      "location": {
                        "type": "string",
                        "description": "The geo-location where the resource lives",
                        "x-ms-mutability": [
                          "read",
                          "create"
                        ]
                      },
                      "properties": {
                        "description": "The resource-specific properties for this resource.",
                        "x-ms-client-flatten": true,
                        "type": "object",
                        "properties": {
                          "externalDeviceId": {
                            "type": "string",
                            "description": "A device ID that represents the device in a system external to Azure. Unique within scope of an Azure tenant."
                          },
                          "endpoints": {
                            "description": "Endpoints for discovered devices.",
                            "type": "object",
                            "properties": {
                              "inbound": {
                                "type": "object",
                                "description": "Set of endpoints to connect to the device.",
                                "additionalProperties": {
                                  "type": "object",
                                  "description": "An endpoint to connect to the device.",
                                  "properties": {
                                    "endpointType": {
                                      "type": "string",
                                      "description": "Type of connection endpoint."
                                    },
                                    "address": {
                                      "type": "string",
                                      "description": "The endpoint address & port. This can be either an IP address (e.g., 192.168.1.1) or a fully qualified domain name (FQDN, e.g., server.example.com)."
                                    },
                                    "version": {
                                      "type": "string",
                                      "description": "Protocol version associated with the endpoint e.g. 1 or 2 for endpointType Microsoft.HTTP, and 3.5 or 5.0 for endpointType Microsoft.Mqtt etc."
                                    },
                                    "supportedAuthenticationMethods": {
                                      "type": "array",
                                      "description": "List of supported authentication methods supported by device for Inbound connections.",
                                      "items": {
                                        "type": "string",
                                        "description": "The method to authenticate the user of the client at the server.",
                                        "enum": [
                                          "Anonymous",
                                          "Certificate",
                                          "UsernamePassword"
                                        ],
                                        "x-ms-enum": {
                                          "name": "AuthenticationMethod",
                                          "modelAsString": true,
                                          "values": [
                                            {
                                              "name": "Anonymous",
                                              "value": "Anonymous",
                                              "description": "The user authentication method is anonymous."
                                            },
                                            {
                                              "name": "Certificate",
                                              "value": "Certificate",
                                              "description": "The user authentication method is an x509 certificate."
                                            },
                                            {
                                              "name": "UsernamePassword",
                                              "value": "UsernamePassword",
                                              "description": "The user authentication method is a username and password."
                                            }
                                          ]
                                        }
                                      }
                                    },
                                    "additionalConfiguration": {
                                      "type": "string",
                                      "description": "Stringified JSON that contains configuration to be used by the connector (e.g., OPC UA, ONVIF)."
                                    },
                                    "lastUpdatedOn": {
                                      "type": "string",
                                      "format": "date-time",
                                      "description": "The timestamp (in UTC) when the endpoint was discovered."
                                    }
                                  },
                                  "required": [
                                    "endpointType",
                                    "address"
                                  ]
                                }
                              },
                              "outbound": {
                                "description": "Set of endpoints a device can connect to.",
                                "type": "object",
                                "properties": {
                                  "assigned": {
                                    "type": "object",
                                    "description": "Endpoints the device can connect to.",
                                    "additionalProperties": {
                                      "type": "object",
                                      "description": "Device messaging endpoint model.",
                                      "properties": {
                                        "endpointType": {
                                          "type": "string",
                                          "description": "Type of connection used for the messaging endpoint."
                                        },
                                        "address": {
                                          "type": "string",
                                          "description": "The endpoint address to connect to."
                                        }
                                      },
                                      "required": [
                                        "address"
                                      ]
                                    }
                                  }
                                },
                                "required": [
                                  "assigned"
                                ]
                              }
                            }
                          },
                          "manufacturer": {
                            "type": "string",
                            "description": "Device manufacturer.",
                            "x-ms-mutability": [
                              "read",
                              "create"
                            ]
                          },
                          "model": {
                            "type": "string",
                            "description": "Device model.",
                            "x-ms-mutability": [
                              "read",
                              "create"
                            ]
                          },
                          "operatingSystem": {
                            "type": "string",
                            "description": "Device operating system name.",
                            "x-ms-mutability": [
                              "read",
                              "create"
                            ]
                          },
                          "operatingSystemVersion": {
                            "type": "string",
                            "description": "Device operating system version."
                          },
                          "attributes": {
                            "type": "object",
                            "description": "A set of key-value pairs that contain custom attributes.",
                            "additionalProperties": {}
                          },
                          "discoveryId": {
                            "type": "string",
                            "description": "Identifier used to detect changes in the discovered device."
                          },
                          "version": {
                            "type": "integer",
                            "format": "int64",
                            "description": "An integer that is incremented each time the resource is modified."
                          },
                          "provisioningState": {
                            "description": "Provisioning state of the resource.",
                            "readOnly": true,
                            "type": "string",
                            "enum": [
                              "Succeeded",
                              "Failed",
                              "Canceled",
                              "Accepted",
                              "Deleting"
                            ],
                            "x-ms-enum": {
                              "name": "ProvisioningState",
                              "modelAsString": true,
                              "values": [
                                {
                                  "name": "Succeeded",
                                  "value": "Succeeded",
                                  "description": "Resource has been created."
                                },
                                {
                                  "name": "Failed",
                                  "value": "Failed",
                                  "description": "Resource creation failed."
                                },
                                {
                                  "name": "Canceled",
                                  "value": "Canceled",
                                  "description": "Resource creation was canceled."
                                },
                                {
                                  "name": "Accepted",
                                  "value": "Accepted",
                                  "description": "Resource has been accepted by the server."
                                },
                                {
                                  "name": "Deleting",
                                  "value": "Deleting",
                                  "description": "Resource is deleting."
                                }
                              ]
                            }
                          }
                        },
                        "required": [
                          "discoveryId",
                          "version"
                        ]
                      },
                      "extendedLocation": {
                        "description": "The extended location.",
                        "x-ms-mutability": [
                          "read",
                          "create"
                        ],
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "description": "The extended location type."
                          },
                          "name": {
                            "type": "string",
                            "description": "The extended location name."
                          }
                        },
                        "required": [
                          "type",
                          "name"
                        ]
                      }
                    },
                    "required": [
                      "extendedLocation"
                    ]
                  }
                },
                "nextLink": {
                  "type": "string",
                  "format": "uri",
                  "description": "The link to the next page of items"
                }
              },
              "required": [
                "value"
              ]
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeviceRegistry/namespaces/{namespaceName}/discoveredDevices/{discoveredDeviceName}": {
      "get": {
        "operationId": "NamespaceDiscoveredDevices_Get",
        "tags": [
          "NamespaceDiscoveredDevices"
        ],
        "description": "Get a NamespaceDiscoveredDevice",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription. The value must be an UUID.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group. The name is case insensitive.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "x-ms-parameter-location": "method"
          },
          {
            "name": "namespaceName",
            "in": "path",
            "description": "The name of the namespace.",
            "required": true,
            "type": "string",
            "minLength": 3,
            "maxLength": 64,
            "pattern": "^[a-z0-9][a-z0-9-]*[a-z0-9]$"
          },
          {
            "name": "discoveredDeviceName",
            "in": "path",
            "description": "The name of the discovered device.",
            "required": true,
            "type": "string",
            "minLength": 3,
            "maxLength": 63,
            "pattern": "^[a-z0-9][a-z0-9-]*[a-z0-9]$"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "type": "object",
              "description": "Discovered device definition.",
              "properties": {
                "id": {
                  "type": "string",
                  "format": "arm-id",
                  "description": "Fully qualified resource ID for the resource. E.g. \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}\"",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "description": "The name of the resource",
                  "readOnly": true
                },
                "type": {
                  "type": "string",
                  "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                  "readOnly": true
                },
                "systemData": {
                  "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                  "readOnly": true,
                  "type": "object",
                  "properties": {
                    "createdBy": {
                      "type": "string",
                      "description": "The identity that created the resource."
                    },
                    "createdByType": {
                      "type": "string",
                      "description": "The type of identity that created the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource creation (UTC)."
                    },
                    "lastModifiedBy": {
                      "type": "string",
                      "description": "The identity that last modified the resource."
                    },
                    "lastModifiedByType": {
                      "type": "string",
                      "description": "The type of identity that last modified the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "lastModifiedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource last modification (UTC)"
                    }
                  }
                },
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "x-ms-mutability": [
                    "read",
                    "create",
                    "update"
                  ]
                },
                "location": {
                  "type": "string",
                  "description": "The geo-location where the resource lives",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ]
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "externalDeviceId": {
                      "type": "string",
                      "description": "A device ID that represents the device in a system external to Azure. Unique within scope of an Azure tenant."
                    },
                    "endpoints": {
                      "description": "Endpoints for discovered devices.",
                      "type": "object",
                      "properties": {
                        "inbound": {
                          "type": "object",
                          "description": "Set of endpoints to connect to the device.",
                          "additionalProperties": {
                            "type": "object",
                            "description": "An endpoint to connect to the device.",
                            "properties": {
                              "endpointType": {
                                "type": "string",
                                "description": "Type of connection endpoint."
                              },
                              "address": {
                                "type": "string",
                                "description": "The endpoint address & port. This can be either an IP address (e.g., 192.168.1.1) or a fully qualified domain name (FQDN, e.g., server.example.com)."
                              },
                              "version": {
                                "type": "string",
                                "description": "Protocol version associated with the endpoint e.g. 1 or 2 for endpointType Microsoft.HTTP, and 3.5 or 5.0 for endpointType Microsoft.Mqtt etc."
                              },
                              "supportedAuthenticationMethods": {
                                "type": "array",
                                "description": "List of supported authentication methods supported by device for Inbound connections.",
                                "items": {
                                  "type": "string",
                                  "description": "The method to authenticate the user of the client at the server.",
                                  "enum": [
                                    "Anonymous",
                                    "Certificate",
                                    "UsernamePassword"
                                  ],
                                  "x-ms-enum": {
                                    "name": "AuthenticationMethod",
                                    "modelAsString": true,
                                    "values": [
                                      {
                                        "name": "Anonymous",
                                        "value": "Anonymous",
                                        "description": "The user authentication method is anonymous."
                                      },
                                      {
                                        "name": "Certificate",
                                        "value": "Certificate",
                                        "description": "The user authentication method is an x509 certificate."
                                      },
                                      {
                                        "name": "UsernamePassword",
                                        "value": "UsernamePassword",
                                        "description": "The user authentication method is a username and password."
                                      }
                                    ]
                                  }
                                }
                              },
                              "additionalConfiguration": {
                                "type": "string",
                                "description": "Stringified JSON that contains configuration to be used by the connector (e.g., OPC UA, ONVIF)."
                              },
                              "lastUpdatedOn": {
                                "type": "string",
                                "format": "date-time",
                                "description": "The timestamp (in UTC) when the endpoint was discovered."
                              }
                            },
                            "required": [
                              "endpointType",
                              "address"
                            ]
                          }
                        },
                        "outbound": {
                          "description": "Set of endpoints a device can connect to.",
                          "type": "object",
                          "properties": {
                            "assigned": {
                              "type": "object",
                              "description": "Endpoints the device can connect to.",
                              "additionalProperties": {
                                "type": "object",
                                "description": "Device messaging endpoint model.",
                                "properties": {
                                  "endpointType": {
                                    "type": "string",
                                    "description": "Type of connection used for the messaging endpoint."
                                  },
                                  "address": {
                                    "type": "string",
                                    "description": "The endpoint address to connect to."
                                  }
                                },
                                "required": [
                                  "address"
                                ]
                              }
                            }
                          },
                          "required": [
                            "assigned"
                          ]
                        }
                      }
                    },
                    "manufacturer": {
                      "type": "string",
                      "description": "Device manufacturer.",
                      "x-ms-mutability": [
                        "read",
                        "create"
                      ]
                    },
                    "model": {
                      "type": "string",
                      "description": "Device model.",
                      "x-ms-mutability": [
                        "read",
                        "create"
                      ]
                    },
                    "operatingSystem": {
                      "type": "string",
                      "description": "Device operating system name.",
                      "x-ms-mutability": [
                        "read",
                        "create"
                      ]
                    },
                    "operatingSystemVersion": {
                      "type": "string",
                      "description": "Device operating system version."
                    },
                    "attributes": {
                      "type": "object",
                      "description": "A set of key-value pairs that contain custom attributes.",
                      "additionalProperties": {}
                    },
                    "discoveryId": {
                      "type": "string",
                      "description": "Identifier used to detect changes in the discovered device."
                    },
                    "version": {
                      "type": "integer",
                      "format": "int64",
                      "description": "An integer that is incremented each time the resource is modified."
                    },
                    "provisioningState": {
                      "description": "Provisioning state of the resource.",
                      "readOnly": true,
                      "type": "string",
                      "enum": [
                        "Succeeded",
                        "Failed",
                        "Canceled",
                        "Accepted",
                        "Deleting"
                      ],
                      "x-ms-enum": {
                        "name": "ProvisioningState",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Succeeded",
                            "value": "Succeeded",
                            "description": "Resource has been created."
                          },
                          {
                            "name": "Failed",
                            "value": "Failed",
                            "description": "Resource creation failed."
                          },
                          {
                            "name": "Canceled",
                            "value": "Canceled",
                            "description": "Resource creation was canceled."
                          },
                          {
                            "name": "Accepted",
                            "value": "Accepted",
                            "description": "Resource has been accepted by the server."
                          },
                          {
                            "name": "Deleting",
                            "value": "Deleting",
                            "description": "Resource is deleting."
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "discoveryId",
                    "version"
                  ]
                },
                "extendedLocation": {
                  "description": "The extended location.",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ],
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "description": "The extended location type."
                    },
                    "name": {
                      "type": "string",
                      "description": "The extended location name."
                    }
                  },
                  "required": [
                    "type",
                    "name"
                  ]
                }
              },
              "required": [
                "extendedLocation"
              ]
            }
          }
        }
      },
      "put": {
        "operationId": "NamespaceDiscoveredDevices_CreateOrReplace",
        "tags": [
          "NamespaceDiscoveredDevices"
        ],
        "description": "Create a NamespaceDiscoveredDevice",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription. The value must be an UUID.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group. The name is case insensitive.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "x-ms-parameter-location": "method"
          },
          {
            "name": "namespaceName",
            "in": "path",
            "description": "The name of the namespace.",
            "required": true,
            "type": "string",
            "minLength": 3,
            "maxLength": 64,
            "pattern": "^[a-z0-9][a-z0-9-]*[a-z0-9]$"
          },
          {
            "name": "discoveredDeviceName",
            "in": "path",
            "description": "The name of the discovered device.",
            "required": true,
            "type": "string",
            "minLength": 3,
            "maxLength": 63,
            "pattern": "^[a-z0-9][a-z0-9-]*[a-z0-9]$"
          },
          {
            "name": "resource",
            "in": "body",
            "description": "Resource create parameters.",
            "required": true,
            "schema": {
              "type": "object",
              "description": "Discovered device definition.",
              "properties": {
                "id": {
                  "type": "string",
                  "format": "arm-id",
                  "description": "Fully qualified resource ID for the resource. E.g. \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}\"",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "description": "The name of the resource",
                  "readOnly": true
                },
                "type": {
                  "type": "string",
                  "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                  "readOnly": true
                },
                "systemData": {
                  "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                  "readOnly": true,
                  "type": "object",
                  "properties": {
                    "createdBy": {
                      "type": "string",
                      "description": "The identity that created the resource."
                    },
                    "createdByType": {
                      "type": "string",
                      "description": "The type of identity that created the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource creation (UTC)."
                    },
                    "lastModifiedBy": {
                      "type": "string",
                      "description": "The identity that last modified the resource."
                    },
                    "lastModifiedByType": {
                      "type": "string",
                      "description": "The type of identity that last modified the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "lastModifiedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource last modification (UTC)"
                    }
                  }
                },
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "x-ms-mutability": [
                    "read",
                    "create",
                    "update"
                  ]
                },
                "location": {
                  "type": "string",
                  "description": "The geo-location where the resource lives",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ]
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "externalDeviceId": {
                      "type": "string",
                      "description": "A device ID that represents the device in a system external to Azure. Unique within scope of an Azure tenant."
                    },
                    "endpoints": {
                      "description": "Endpoints for discovered devices.",
                      "type": "object",
                      "properties": {
                        "inbound": {
                          "type": "object",
                          "description": "Set of endpoints to connect to the device.",
                          "additionalProperties": {
                            "type": "object",
                            "description": "An endpoint to connect to the device.",
                            "properties": {
                              "endpointType": {
                                "type": "string",
                                "description": "Type of connection endpoint."
                              },
                              "address": {
                                "type": "string",
                                "description": "The endpoint address & port. This can be either an IP address (e.g., 192.168.1.1) or a fully qualified domain name (FQDN, e.g., server.example.com)."
                              },
                              "version": {
                                "type": "string",
                                "description": "Protocol version associated with the endpoint e.g. 1 or 2 for endpointType Microsoft.HTTP, and 3.5 or 5.0 for endpointType Microsoft.Mqtt etc."
                              },
                              "supportedAuthenticationMethods": {
                                "type": "array",
                                "description": "List of supported authentication methods supported by device for Inbound connections.",
                                "items": {
                                  "type": "string",
                                  "description": "The method to authenticate the user of the client at the server.",
                                  "enum": [
                                    "Anonymous",
                                    "Certificate",
                                    "UsernamePassword"
                                  ],
                                  "x-ms-enum": {
                                    "name": "AuthenticationMethod",
                                    "modelAsString": true,
                                    "values": [
                                      {
                                        "name": "Anonymous",
                                        "value": "Anonymous",
                                        "description": "The user authentication method is anonymous."
                                      },
                                      {
                                        "name": "Certificate",
                                        "value": "Certificate",
                                        "description": "The user authentication method is an x509 certificate."
                                      },
                                      {
                                        "name": "UsernamePassword",
                                        "value": "UsernamePassword",
                                        "description": "The user authentication method is a username and password."
                                      }
                                    ]
                                  }
                                }
                              },
                              "additionalConfiguration": {
                                "type": "string",
                                "description": "Stringified JSON that contains configuration to be used by the connector (e.g., OPC UA, ONVIF)."
                              },
                              "lastUpdatedOn": {
                                "type": "string",
                                "format": "date-time",
                                "description": "The timestamp (in UTC) when the endpoint was discovered."
                              }
                            },
                            "required": [
                              "endpointType",
                              "address"
                            ]
                          }
                        },
                        "outbound": {
                          "description": "Set of endpoints a device can connect to.",
                          "type": "object",
                          "properties": {
                            "assigned": {
                              "type": "object",
                              "description": "Endpoints the device can connect to.",
                              "additionalProperties": {
                                "type": "object",
                                "description": "Device messaging endpoint model.",
                                "properties": {
                                  "endpointType": {
                                    "type": "string",
                                    "description": "Type of connection used for the messaging endpoint."
                                  },
                                  "address": {
                                    "type": "string",
                                    "description": "The endpoint address to connect to."
                                  }
                                },
                                "required": [
                                  "address"
                                ]
                              }
                            }
                          },
                          "required": [
                            "assigned"
                          ]
                        }
                      }
                    },
                    "manufacturer": {
                      "type": "string",
                      "description": "Device manufacturer.",
                      "x-ms-mutability": [
                        "read",
                        "create"
                      ]
                    },
                    "model": {
                      "type": "string",
                      "description": "Device model.",
                      "x-ms-mutability": [
                        "read",
                        "create"
                      ]
                    },
                    "operatingSystem": {
                      "type": "string",
                      "description": "Device operating system name.",
                      "x-ms-mutability": [
                        "read",
                        "create"
                      ]
                    },
                    "operatingSystemVersion": {
                      "type": "string",
                      "description": "Device operating system version."
                    },
                    "attributes": {
                      "type": "object",
                      "description": "A set of key-value pairs that contain custom attributes.",
                      "additionalProperties": {}
                    },
                    "discoveryId": {
                      "type": "string",
                      "description": "Identifier used to detect changes in the discovered device."
                    },
                    "version": {
                      "type": "integer",
                      "format": "int64",
                      "description": "An integer that is incremented each time the resource is modified."
                    },
                    "provisioningState": {
                      "description": "Provisioning state of the resource.",
                      "readOnly": true,
                      "type": "string",
                      "enum": [
                        "Succeeded",
                        "Failed",
                        "Canceled",
                        "Accepted",
                        "Deleting"
                      ],
                      "x-ms-enum": {
                        "name": "ProvisioningState",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Succeeded",
                            "value": "Succeeded",
                            "description": "Resource has been created."
                          },
                          {
                            "name": "Failed",
                            "value": "Failed",
                            "description": "Resource creation failed."
                          },
                          {
                            "name": "Canceled",
                            "value": "Canceled",
                            "description": "Resource creation was canceled."
                          },
                          {
                            "name": "Accepted",
                            "value": "Accepted",
                            "description": "Resource has been accepted by the server."
                          },
                          {
                            "name": "Deleting",
                            "value": "Deleting",
                            "description": "Resource is deleting."
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "discoveryId",
                    "version"
                  ]
                },
                "extendedLocation": {
                  "description": "The extended location.",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ],
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "description": "The extended location type."
                    },
                    "name": {
                      "type": "string",
                      "description": "The extended location name."
                    }
                  },
                  "required": [
                    "type",
                    "name"
                  ]
                }
              },
              "required": [
                "extendedLocation"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resource 'NamespaceDiscoveredDevice' update operation succeeded",
            "schema": {
              "type": "object",
              "description": "Discovered device definition.",
              "properties": {
                "id": {
                  "type": "string",
                  "format": "arm-id",
                  "description": "Fully qualified resource ID for the resource. E.g. \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}\"",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "description": "The name of the resource",
                  "readOnly": true
                },
                "type": {
                  "type": "string",
                  "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                  "readOnly": true
                },
                "systemData": {
                  "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                  "readOnly": true,
                  "type": "object",
                  "properties": {
                    "createdBy": {
                      "type": "string",
                      "description": "The identity that created the resource."
                    },
                    "createdByType": {
                      "type": "string",
                      "description": "The type of identity that created the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource creation (UTC)."
                    },
                    "lastModifiedBy": {
                      "type": "string",
                      "description": "The identity that last modified the resource."
                    },
                    "lastModifiedByType": {
                      "type": "string",
                      "description": "The type of identity that last modified the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "lastModifiedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource last modification (UTC)"
                    }
                  }
                },
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "x-ms-mutability": [
                    "read",
                    "create",
                    "update"
                  ]
                },
                "location": {
                  "type": "string",
                  "description": "The geo-location where the resource lives",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ]
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "externalDeviceId": {
                      "type": "string",
                      "description": "A device ID that represents the device in a system external to Azure. Unique within scope of an Azure tenant."
                    },
                    "endpoints": {
                      "description": "Endpoints for discovered devices.",
                      "type": "object",
                      "properties": {
                        "inbound": {
                          "type": "object",
                          "description": "Set of endpoints to connect to the device.",
                          "additionalProperties": {
                            "type": "object",
                            "description": "An endpoint to connect to the device.",
                            "properties": {
                              "endpointType": {
                                "type": "string",
                                "description": "Type of connection endpoint."
                              },
                              "address": {
                                "type": "string",
                                "description": "The endpoint address & port. This can be either an IP address (e.g., 192.168.1.1) or a fully qualified domain name (FQDN, e.g., server.example.com)."
                              },
                              "version": {
                                "type": "string",
                                "description": "Protocol version associated with the endpoint e.g. 1 or 2 for endpointType Microsoft.HTTP, and 3.5 or 5.0 for endpointType Microsoft.Mqtt etc."
                              },
                              "supportedAuthenticationMethods": {
                                "type": "array",
                                "description": "List of supported authentication methods supported by device for Inbound connections.",
                                "items": {
                                  "type": "string",
                                  "description": "The method to authenticate the user of the client at the server.",
                                  "enum": [
                                    "Anonymous",
                                    "Certificate",
                                    "UsernamePassword"
                                  ],
                                  "x-ms-enum": {
                                    "name": "AuthenticationMethod",
                                    "modelAsString": true,
                                    "values": [
                                      {
                                        "name": "Anonymous",
                                        "value": "Anonymous",
                                        "description": "The user authentication method is anonymous."
                                      },
                                      {
                                        "name": "Certificate",
                                        "value": "Certificate",
                                        "description": "The user authentication method is an x509 certificate."
                                      },
                                      {
                                        "name": "UsernamePassword",
                                        "value": "UsernamePassword",
                                        "description": "The user authentication method is a username and password."
                                      }
                                    ]
                                  }
                                }
                              },
                              "additionalConfiguration": {
                                "type": "string",
                                "description": "Stringified JSON that contains configuration to be used by the connector (e.g., OPC UA, ONVIF)."
                              },
                              "lastUpdatedOn": {
                                "type": "string",
                                "format": "date-time",
                                "description": "The timestamp (in UTC) when the endpoint was discovered."
                              }
                            },
                            "required": [
                              "endpointType",
                              "address"
                            ]
                          }
                        },
                        "outbound": {
                          "description": "Set of endpoints a device can connect to.",
                          "type": "object",
                          "properties": {
                            "assigned": {
                              "type": "object",
                              "description": "Endpoints the device can connect to.",
                              "additionalProperties": {
                                "type": "object",
                                "description": "Device messaging endpoint model.",
                                "properties": {
                                  "endpointType": {
                                    "type": "string",
                                    "description": "Type of connection used for the messaging endpoint."
                                  },
                                  "address": {
                                    "type": "string",
                                    "description": "The endpoint address to connect to."
                                  }
                                },
                                "required": [
                                  "address"
                                ]
                              }
                            }
                          },
                          "required": [
                            "assigned"
                          ]
                        }
                      }
                    },
                    "manufacturer": {
                      "type": "string",
                      "description": "Device manufacturer.",
                      "x-ms-mutability": [
                        "read",
                        "create"
                      ]
                    },
                    "model": {
                      "type": "string",
                      "description": "Device model.",
                      "x-ms-mutability": [
                        "read",
                        "create"
                      ]
                    },
                    "operatingSystem": {
                      "type": "string",
                      "description": "Device operating system name.",
                      "x-ms-mutability": [
                        "read",
                        "create"
                      ]
                    },
                    "operatingSystemVersion": {
                      "type": "string",
                      "description": "Device operating system version."
                    },
                    "attributes": {
                      "type": "object",
                      "description": "A set of key-value pairs that contain custom attributes.",
                      "additionalProperties": {}
                    },
                    "discoveryId": {
                      "type": "string",
                      "description": "Identifier used to detect changes in the discovered device."
                    },
                    "version": {
                      "type": "integer",
                      "format": "int64",
                      "description": "An integer that is incremented each time the resource is modified."
                    },
                    "provisioningState": {
                      "description": "Provisioning state of the resource.",
                      "readOnly": true,
                      "type": "string",
                      "enum": [
                        "Succeeded",
                        "Failed",
                        "Canceled",
                        "Accepted",
                        "Deleting"
                      ],
                      "x-ms-enum": {
                        "name": "ProvisioningState",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Succeeded",
                            "value": "Succeeded",
                            "description": "Resource has been created."
                          },
                          {
                            "name": "Failed",
                            "value": "Failed",
                            "description": "Resource creation failed."
                          },
                          {
                            "name": "Canceled",
                            "value": "Canceled",
                            "description": "Resource creation was canceled."
                          },
                          {
                            "name": "Accepted",
                            "value": "Accepted",
                            "description": "Resource has been accepted by the server."
                          },
                          {
                            "name": "Deleting",
                            "value": "Deleting",
                            "description": "Resource is deleting."
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "discoveryId",
                    "version"
                  ]
                },
                "extendedLocation": {
                  "description": "The extended location.",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ],
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "description": "The extended location type."
                    },
                    "name": {
                      "type": "string",
                      "description": "The extended location name."
                    }
                  },
                  "required": [
                    "type",
                    "name"
                  ]
                }
              },
              "required": [
                "extendedLocation"
              ]
            }
          },
          "201": {
            "description": "Resource 'NamespaceDiscoveredDevice' create operation succeeded",
            "schema": {
              "type": "object",
              "description": "Discovered device definition.",
              "properties": {
                "id": {
                  "type": "string",
                  "format": "arm-id",
                  "description": "Fully qualified resource ID for the resource. E.g. \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}\"",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "description": "The name of the resource",
                  "readOnly": true
                },
                "type": {
                  "type": "string",
                  "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                  "readOnly": true
                },
                "systemData": {
                  "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                  "readOnly": true,
                  "type": "object",
                  "properties": {
                    "createdBy": {
                      "type": "string",
                      "description": "The identity that created the resource."
                    },
                    "createdByType": {
                      "type": "string",
                      "description": "The type of identity that created the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource creation (UTC)."
                    },
                    "lastModifiedBy": {
                      "type": "string",
                      "description": "The identity that last modified the resource."
                    },
                    "lastModifiedByType": {
                      "type": "string",
                      "description": "The type of identity that last modified the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "lastModifiedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource last modification (UTC)"
                    }
                  }
                },
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "x-ms-mutability": [
                    "read",
                    "create",
                    "update"
                  ]
                },
                "location": {
                  "type": "string",
                  "description": "The geo-location where the resource lives",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ]
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "externalDeviceId": {
                      "type": "string",
                      "description": "A device ID that represents the device in a system external to Azure. Unique within scope of an Azure tenant."
                    },
                    "endpoints": {
                      "description": "Endpoints for discovered devices.",
                      "type": "object",
                      "properties": {
                        "inbound": {
                          "type": "object",
                          "description": "Set of endpoints to connect to the device.",
                          "additionalProperties": {
                            "type": "object",
                            "description": "An endpoint to connect to the device.",
                            "properties": {
                              "endpointType": {
                                "type": "string",
                                "description": "Type of connection endpoint."
                              },
                              "address": {
                                "type": "string",
                                "description": "The endpoint address & port. This can be either an IP address (e.g., 192.168.1.1) or a fully qualified domain name (FQDN, e.g., server.example.com)."
                              },
                              "version": {
                                "type": "string",
                                "description": "Protocol version associated with the endpoint e.g. 1 or 2 for endpointType Microsoft.HTTP, and 3.5 or 5.0 for endpointType Microsoft.Mqtt etc."
                              },
                              "supportedAuthenticationMethods": {
                                "type": "array",
                                "description": "List of supported authentication methods supported by device for Inbound connections.",
                                "items": {
                                  "type": "string",
                                  "description": "The method to authenticate the user of the client at the server.",
                                  "enum": [
                                    "Anonymous",
                                    "Certificate",
                                    "UsernamePassword"
                                  ],
                                  "x-ms-enum": {
                                    "name": "AuthenticationMethod",
                                    "modelAsString": true,
                                    "values": [
                                      {
                                        "name": "Anonymous",
                                        "value": "Anonymous",
                                        "description": "The user authentication method is anonymous."
                                      },
                                      {
                                        "name": "Certificate",
                                        "value": "Certificate",
                                        "description": "The user authentication method is an x509 certificate."
                                      },
                                      {
                                        "name": "UsernamePassword",
                                        "value": "UsernamePassword",
                                        "description": "The user authentication method is a username and password."
                                      }
                                    ]
                                  }
                                }
                              },
                              "additionalConfiguration": {
                                "type": "string",
                                "description": "Stringified JSON that contains configuration to be used by the connector (e.g., OPC UA, ONVIF)."
                              },
                              "lastUpdatedOn": {
                                "type": "string",
                                "format": "date-time",
                                "description": "The timestamp (in UTC) when the endpoint was discovered."
                              }
                            },
                            "required": [
                              "endpointType",
                              "address"
                            ]
                          }
                        },
                        "outbound": {
                          "description": "Set of endpoints a device can connect to.",
                          "type": "object",
                          "properties": {
                            "assigned": {
                              "type": "object",
                              "description": "Endpoints the device can connect to.",
                              "additionalProperties": {
                                "type": "object",
                                "description": "Device messaging endpoint model.",
                                "properties": {
                                  "endpointType": {
                                    "type": "string",
                                    "description": "Type of connection used for the messaging endpoint."
                                  },
                                  "address": {
                                    "type": "string",
                                    "description": "The endpoint address to connect to."
                                  }
                                },
                                "required": [
                                  "address"
                                ]
                              }
                            }
                          },
                          "required": [
                            "assigned"
                          ]
                        }
                      }
                    },
                    "manufacturer": {
                      "type": "string",
                      "description": "Device manufacturer.",
                      "x-ms-mutability": [
                        "read",
                        "create"
                      ]
                    },
                    "model": {
                      "type": "string",
                      "description": "Device model.",
                      "x-ms-mutability": [
                        "read",
                        "create"
                      ]
                    },
                    "operatingSystem": {
                      "type": "string",
                      "description": "Device operating system name.",
                      "x-ms-mutability": [
                        "read",
                        "create"
                      ]
                    },
                    "operatingSystemVersion": {
                      "type": "string",
                      "description": "Device operating system version."
                    },
                    "attributes": {
                      "type": "object",
                      "description": "A set of key-value pairs that contain custom attributes.",
                      "additionalProperties": {}
                    },
                    "discoveryId": {
                      "type": "string",
                      "description": "Identifier used to detect changes in the discovered device."
                    },
                    "version": {
                      "type": "integer",
                      "format": "int64",
                      "description": "An integer that is incremented each time the resource is modified."
                    },
                    "provisioningState": {
                      "description": "Provisioning state of the resource.",
                      "readOnly": true,
                      "type": "string",
                      "enum": [
                        "Succeeded",
                        "Failed",
                        "Canceled",
                        "Accepted",
                        "Deleting"
                      ],
                      "x-ms-enum": {
                        "name": "ProvisioningState",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Succeeded",
                            "value": "Succeeded",
                            "description": "Resource has been created."
                          },
                          {
                            "name": "Failed",
                            "value": "Failed",
                            "description": "Resource creation failed."
                          },
                          {
                            "name": "Canceled",
                            "value": "Canceled",
                            "description": "Resource creation was canceled."
                          },
                          {
                            "name": "Accepted",
                            "value": "Accepted",
                            "description": "Resource has been accepted by the server."
                          },
                          {
                            "name": "Deleting",
                            "value": "Deleting",
                            "description": "Resource is deleting."
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "discoveryId",
                    "version"
                  ]
                },
                "extendedLocation": {
                  "description": "The extended location.",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ],
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "description": "The extended location type."
                    },
                    "name": {
                      "type": "string",
                      "description": "The extended location name."
                    }
                  },
                  "required": [
                    "type",
                    "name"
                  ]
                }
              },
              "required": [
                "extendedLocation"
              ]
            },
            "headers": {
              "Azure-AsyncOperation": {
                "type": "string",
                "description": "A link to the status monitor"
              },
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "NamespaceDiscoveredDevices_Update",
        "tags": [
          "NamespaceDiscoveredDevices"
        ],
        "description": "Update a NamespaceDiscoveredDevice",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription. The value must be an UUID.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group. The name is case insensitive.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "x-ms-parameter-location": "method"
          },
          {
            "name": "namespaceName",
            "in": "path",
            "description": "The name of the namespace.",
            "required": true,
            "type": "string",
            "minLength": 3,
            "maxLength": 64,
            "pattern": "^[a-z0-9][a-z0-9-]*[a-z0-9]$"
          },
          {
            "name": "discoveredDeviceName",
            "in": "path",
            "description": "The name of the discovered device.",
            "required": true,
            "type": "string",
            "minLength": 3,
            "maxLength": 63,
            "pattern": "^[a-z0-9][a-z0-9-]*[a-z0-9]$"
          },
          {
            "name": "properties",
            "in": "body",
            "description": "The resource properties to be updated.",
            "required": true,
            "schema": {
              "type": "object",
              "description": "The type used for update operations of the NamespaceDiscoveredDevice.",
              "properties": {
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "externalDeviceId": {
                      "type": "string",
                      "description": "A device ID that represents the device in a system external to Azure. Unique within scope of an Azure tenant."
                    },
                    "endpoints": {
                      "description": "Endpoints for discovered devices.",
                      "type": "object",
                      "properties": {
                        "inbound": {
                          "type": "object",
                          "description": "Set of endpoints to connect to the device.",
                          "additionalProperties": {
                            "type": "object",
                            "description": "An endpoint to connect to the device.",
                            "properties": {
                              "endpointType": {
                                "type": "string",
                                "description": "Type of connection endpoint."
                              },
                              "address": {
                                "type": "string",
                                "description": "The endpoint address & port. This can be either an IP address (e.g., 192.168.1.1) or a fully qualified domain name (FQDN, e.g., server.example.com)."
                              },
                              "version": {
                                "type": "string",
                                "description": "Protocol version associated with the endpoint e.g. 1 or 2 for endpointType Microsoft.HTTP, and 3.5 or 5.0 for endpointType Microsoft.Mqtt etc."
                              },
                              "supportedAuthenticationMethods": {
                                "type": "array",
                                "description": "List of supported authentication methods supported by device for Inbound connections.",
                                "items": {
                                  "type": "string",
                                  "description": "The method to authenticate the user of the client at the server.",
                                  "enum": [
                                    "Anonymous",
                                    "Certificate",
                                    "UsernamePassword"
                                  ],
                                  "x-ms-enum": {
                                    "name": "AuthenticationMethod",
                                    "modelAsString": true,
                                    "values": [
                                      {
                                        "name": "Anonymous",
                                        "value": "Anonymous",
                                        "description": "The user authentication method is anonymous."
                                      },
                                      {
                                        "name": "Certificate",
                                        "value": "Certificate",
                                        "description": "The user authentication method is an x509 certificate."
                                      },
                                      {
                                        "name": "UsernamePassword",
                                        "value": "UsernamePassword",
                                        "description": "The user authentication method is a username and password."
                                      }
                                    ]
                                  }
                                }
                              },
                              "additionalConfiguration": {
                                "type": "string",
                                "description": "Stringified JSON that contains configuration to be used by the connector (e.g., OPC UA, ONVIF)."
                              },
                              "lastUpdatedOn": {
                                "type": "string",
                                "format": "date-time",
                                "description": "The timestamp (in UTC) when the endpoint was discovered."
                              }
                            }
                          }
                        },
                        "outbound": {
                          "description": "Set of endpoints a device can connect to.",
                          "type": "object",
                          "properties": {
                            "assigned": {
                              "type": "object",
                              "description": "Endpoints the device can connect to.",
                              "additionalProperties": {
                                "type": "object",
                                "description": "Device messaging endpoint model.",
                                "properties": {
                                  "endpointType": {
                                    "type": "string",
                                    "description": "Type of connection used for the messaging endpoint."
                                  },
                                  "address": {
                                    "type": "string",
                                    "description": "The endpoint address to connect to."
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "operatingSystemVersion": {
                      "type": "string",
                      "description": "Device operating system version."
                    },
                    "attributes": {
                      "type": "object",
                      "description": "A set of key-value pairs that contain custom attributes.",
                      "additionalProperties": {}
                    },
                    "discoveryId": {
                      "type": "string",
                      "description": "Identifier used to detect changes in the discovered device."
                    },
                    "version": {
                      "type": "integer",
                      "format": "int64",
                      "description": "An integer that is incremented each time the resource is modified."
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "type": "object",
              "description": "Discovered device definition.",
              "properties": {
                "id": {
                  "type": "string",
                  "format": "arm-id",
                  "description": "Fully qualified resource ID for the resource. E.g. \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}\"",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "description": "The name of the resource",
                  "readOnly": true
                },
                "type": {
                  "type": "string",
                  "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                  "readOnly": true
                },
                "systemData": {
                  "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                  "readOnly": true,
                  "type": "object",
                  "properties": {
                    "createdBy": {
                      "type": "string",
                      "description": "The identity that created the resource."
                    },
                    "createdByType": {
                      "type": "string",
                      "description": "The type of identity that created the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource creation (UTC)."
                    },
                    "lastModifiedBy": {
                      "type": "string",
                      "description": "The identity that last modified the resource."
                    },
                    "lastModifiedByType": {
                      "type": "string",
                      "description": "The type of identity that last modified the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "lastModifiedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource last modification (UTC)"
                    }
                  }
                },
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "x-ms-mutability": [
                    "read",
                    "create",
                    "update"
                  ]
                },
                "location": {
                  "type": "string",
                  "description": "The geo-location where the resource lives",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ]
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "externalDeviceId": {
                      "type": "string",
                      "description": "A device ID that represents the device in a system external to Azure. Unique within scope of an Azure tenant."
                    },
                    "endpoints": {
                      "description": "Endpoints for discovered devices.",
                      "type": "object",
                      "properties": {
                        "inbound": {
                          "type": "object",
                          "description": "Set of endpoints to connect to the device.",
                          "additionalProperties": {
                            "type": "object",
                            "description": "An endpoint to connect to the device.",
                            "properties": {
                              "endpointType": {
                                "type": "string",
                                "description": "Type of connection endpoint."
                              },
                              "address": {
                                "type": "string",
                                "description": "The endpoint address & port. This can be either an IP address (e.g., 192.168.1.1) or a fully qualified domain name (FQDN, e.g., server.example.com)."
                              },
                              "version": {
                                "type": "string",
                                "description": "Protocol version associated with the endpoint e.g. 1 or 2 for endpointType Microsoft.HTTP, and 3.5 or 5.0 for endpointType Microsoft.Mqtt etc."
                              },
                              "supportedAuthenticationMethods": {
                                "type": "array",
                                "description": "List of supported authentication methods supported by device for Inbound connections.",
                                "items": {
                                  "type": "string",
                                  "description": "The method to authenticate the user of the client at the server.",
                                  "enum": [
                                    "Anonymous",
                                    "Certificate",
                                    "UsernamePassword"
                                  ],
                                  "x-ms-enum": {
                                    "name": "AuthenticationMethod",
                                    "modelAsString": true,
                                    "values": [
                                      {
                                        "name": "Anonymous",
                                        "value": "Anonymous",
                                        "description": "The user authentication method is anonymous."
                                      },
                                      {
                                        "name": "Certificate",
                                        "value": "Certificate",
                                        "description": "The user authentication method is an x509 certificate."
                                      },
                                      {
                                        "name": "UsernamePassword",
                                        "value": "UsernamePassword",
                                        "description": "The user authentication method is a username and password."
                                      }
                                    ]
                                  }
                                }
                              },
                              "additionalConfiguration": {
                                "type": "string",
                                "description": "Stringified JSON that contains configuration to be used by the connector (e.g., OPC UA, ONVIF)."
                              },
                              "lastUpdatedOn": {
                                "type": "string",
                                "format": "date-time",
                                "description": "The timestamp (in UTC) when the endpoint was discovered."
                              }
                            },
                            "required": [
                              "endpointType",
                              "address"
                            ]
                          }
                        },
                        "outbound": {
                          "description": "Set of endpoints a device can connect to.",
                          "type": "object",
                          "properties": {
                            "assigned": {
                              "type": "object",
                              "description": "Endpoints the device can connect to.",
                              "additionalProperties": {
                                "type": "object",
                                "description": "Device messaging endpoint model.",
                                "properties": {
                                  "endpointType": {
                                    "type": "string",
                                    "description": "Type of connection used for the messaging endpoint."
                                  },
                                  "address": {
                                    "type": "string",
                                    "description": "The endpoint address to connect to."
                                  }
                                },
                                "required": [
                                  "address"
                                ]
                              }
                            }
                          },
                          "required": [
                            "assigned"
                          ]
                        }
                      }
                    },
                    "manufacturer": {
                      "type": "string",
                      "description": "Device manufacturer.",
                      "x-ms-mutability": [
                        "read",
                        "create"
                      ]
                    },
                    "model": {
                      "type": "string",
                      "description": "Device model.",
                      "x-ms-mutability": [
                        "read",
                        "create"
                      ]
                    },
                    "operatingSystem": {
                      "type": "string",
                      "description": "Device operating system name.",
                      "x-ms-mutability": [
                        "read",
                        "create"
                      ]
                    },
                    "operatingSystemVersion": {
                      "type": "string",
                      "description": "Device operating system version."
                    },
                    "attributes": {
                      "type": "object",
                      "description": "A set of key-value pairs that contain custom attributes.",
                      "additionalProperties": {}
                    },
                    "discoveryId": {
                      "type": "string",
                      "description": "Identifier used to detect changes in the discovered device."
                    },
                    "version": {
                      "type": "integer",
                      "format": "int64",
                      "description": "An integer that is incremented each time the resource is modified."
                    },
                    "provisioningState": {
                      "description": "Provisioning state of the resource.",
                      "readOnly": true,
                      "type": "string",
                      "enum": [
                        "Succeeded",
                        "Failed",
                        "Canceled",
                        "Accepted",
                        "Deleting"
                      ],
                      "x-ms-enum": {
                        "name": "ProvisioningState",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Succeeded",
                            "value": "Succeeded",
                            "description": "Resource has been created."
                          },
                          {
                            "name": "Failed",
                            "value": "Failed",
                            "description": "Resource creation failed."
                          },
                          {
                            "name": "Canceled",
                            "value": "Canceled",
                            "description": "Resource creation was canceled."
                          },
                          {
                            "name": "Accepted",
                            "value": "Accepted",
                            "description": "Resource has been accepted by the server."
                          },
                          {
                            "name": "Deleting",
                            "value": "Deleting",
                            "description": "Resource is deleting."
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "discoveryId",
                    "version"
                  ]
                },
                "extendedLocation": {
                  "description": "The extended location.",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ],
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "description": "The extended location type."
                    },
                    "name": {
                      "type": "string",
                      "description": "The extended location name."
                    }
                  },
                  "required": [
                    "type",
                    "name"
                  ]
                }
              },
              "required": [
                "extendedLocation"
              ]
            }
          },
          "202": {
            "description": "Resource update request accepted.",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              },
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "NamespaceDiscoveredDevices_Delete",
        "tags": [
          "NamespaceDiscoveredDevices"
        ],
        "description": "Delete a NamespaceDiscoveredDevice",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription. The value must be an UUID.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group. The name is case insensitive.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "x-ms-parameter-location": "method"
          },
          {
            "name": "namespaceName",
            "in": "path",
            "description": "The name of the namespace.",
            "required": true,
            "type": "string",
            "minLength": 3,
            "maxLength": 64,
            "pattern": "^[a-z0-9][a-z0-9-]*[a-z0-9]$"
          },
          {
            "name": "discoveredDeviceName",
            "in": "path",
            "description": "The name of the discovered device.",
            "required": true,
            "type": "string",
            "minLength": 3,
            "maxLength": 63,
            "pattern": "^[a-z0-9][a-z0-9-]*[a-z0-9]$"
          }
        ],
        "responses": {
          "202": {
            "description": "Resource deletion accepted.",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              },
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "204": {
            "description": "Resource does not exist."
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeviceRegistry/namespaces/{namespaceName}/migrate": {
      "post": {
        "operationId": "Namespaces_Migrate",
        "tags": [
          "Namespaces"
        ],
        "description": "Migrate the resources into Namespace",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription. The value must be an UUID.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group. The name is case insensitive.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "x-ms-parameter-location": "method"
          },
          {
            "name": "namespaceName",
            "in": "path",
            "description": "The name of the namespace.",
            "required": true,
            "type": "string",
            "minLength": 3,
            "maxLength": 64,
            "pattern": "^[a-z0-9][a-z0-9-]*[a-z0-9]$"
          },
          {
            "name": "body",
            "in": "body",
            "description": "The content of the action request",
            "required": true,
            "schema": {
              "type": "object",
              "description": "Request body for the migrate resources operation in to Namespace resource.",
              "properties": {
                "scope": {
                  "description": "Scope of the migrate resources operation.",
                  "type": "string",
                  "enum": [
                    "Resources"
                  ],
                  "x-ms-enum": {
                    "name": "Scope",
                    "modelAsString": true,
                    "values": [
                      {
                        "name": "Resources",
                        "value": "Resources",
                        "description": "Scoping the migration to resourceIds provided"
                      }
                    ]
                  }
                },
                "resourceIds": {
                  "type": "array",
                  "description": "List of asset resources to be migrated.",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "type": "object",
              "description": "Response for the migrate asset resources operation into Namespace resource.",
              "properties": {
                "migrateResults": {
                  "type": "array",
                  "description": "List of migrate results containing result of each asset migrate operation.",
                  "items": {
                    "type": "object",
                    "description": "Result of Migrate operation of asset resource into Namespace resource.",
                    "properties": {
                      "resourceId": {
                        "type": "string",
                        "description": "The resource Id of the asset resource."
                      },
                      "result": {
                        "description": "The result of the migrate operation.",
                        "type": "string",
                        "enum": [
                          "Succeeded",
                          "Failed"
                        ],
                        "x-ms-enum": {
                          "name": "MigrateResultType",
                          "modelAsString": true,
                          "values": [
                            {
                              "name": "Succeeded",
                              "value": "Succeeded",
                              "description": "Resource Migrate operation is successful."
                            },
                            {
                              "name": "Failed",
                              "value": "Failed",
                              "description": "Resource Migrate operation is not successful."
                            }
                          ]
                        },
                        "readOnly": true
                      },
                      "error": {
                        "description": "The error if the migrate operation is not successful.",
                        "type": "object",
                        "properties": {
                          "code": {
                            "type": "string",
                            "description": "Error code for classification of errors (ex: '400', '404', '500', etc.).",
                            "readOnly": true
                          },
                          "message": {
                            "type": "string",
                            "description": "Human-readable helpful error message to provide additional context for error (e.g.,: “Capability ID 'foo' does not exist”).",
                            "readOnly": true
                          },
                          "details": {
                            "type": "array",
                            "description": "Array of error details that describe the status of each error.",
                            "items": {
                              "type": "object",
                              "description": "Defines the error details properties.",
                              "properties": {
                                "code": {
                                  "type": "string",
                                  "description": "Multi-part error code for classification and root causing of errors (ex: 400.200.100.432).",
                                  "readOnly": true
                                },
                                "message": {
                                  "type": "string",
                                  "description": "Human-readable helpful error message to provide additional context for error (ex: “Authentication method not supported”).",
                                  "readOnly": true
                                },
                                "info": {
                                  "type": "string",
                                  "description": "Human-readable helpful detailed text context for debugging (ex: “The following mechanisms are supported...”).",
                                  "readOnly": true
                                },
                                "correlationId": {
                                  "type": "string",
                                  "description": "Unique identifier for the transaction to aid in debugging.",
                                  "readOnly": true
                                }
                              }
                            },
                            "readOnly": true,
                            "x-ms-identifiers": []
                          }
                        }
                      }
                    }
                  },
                  "x-ms-identifiers": [
                    "resourceId"
                  ]
                }
              }
            }
          },
          "202": {
            "description": "Resource operation accepted.",
            "headers": {
              "Azure-AsyncOperation": {
                "type": "string",
                "description": "A link to the status monitor"
              },
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              },
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeviceRegistry/schemaRegistries": {
      "get": {
        "operationId": "SchemaRegistries_ListByResourceGroup",
        "tags": [
          "SchemaRegistries"
        ],
        "description": "List SchemaRegistry resources by resource group",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription. The value must be an UUID.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group. The name is case insensitive.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "type": "object",
              "description": "The response of a SchemaRegistry list operation.",
              "properties": {
                "value": {
                  "type": "array",
                  "description": "The SchemaRegistry items on this page",
                  "items": {
                    "type": "object",
                    "description": "Schema registry definition.",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "arm-id",
                        "description": "Fully qualified resource ID for the resource. E.g. \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}\"",
                        "readOnly": true
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the resource",
                        "readOnly": true
                      },
                      "type": {
                        "type": "string",
                        "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                        "readOnly": true
                      },
                      "systemData": {
                        "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                        "readOnly": true,
                        "type": "object",
                        "properties": {
                          "createdBy": {
                            "type": "string",
                            "description": "The identity that created the resource."
                          },
                          "createdByType": {
                            "type": "string",
                            "description": "The type of identity that created the resource.",
                            "enum": [
                              "User",
                              "Application",
                              "ManagedIdentity",
                              "Key"
                            ],
                            "x-ms-enum": {
                              "name": "createdByType",
                              "modelAsString": true
                            }
                          },
                          "createdAt": {
                            "type": "string",
                            "format": "date-time",
                            "description": "The timestamp of resource creation (UTC)."
                          },
                          "lastModifiedBy": {
                            "type": "string",
                            "description": "The identity that last modified the resource."
                          },
                          "lastModifiedByType": {
                            "type": "string",
                            "description": "The type of identity that last modified the resource.",
                            "enum": [
                              "User",
                              "Application",
                              "ManagedIdentity",
                              "Key"
                            ],
                            "x-ms-enum": {
                              "name": "createdByType",
                              "modelAsString": true
                            }
                          },
                          "lastModifiedAt": {
                            "type": "string",
                            "format": "date-time",
                            "description": "The timestamp of resource last modification (UTC)"
                          }
                        }
                      },
                      "tags": {
                        "type": "object",
                        "description": "Resource tags.",
                        "additionalProperties": {
                          "type": "string"
                        },
                        "x-ms-mutability": [
                          "read",
                          "create",
                          "update"
                        ]
                      },
                      "location": {
                        "type": "string",
                        "description": "The geo-location where the resource lives",
                        "x-ms-mutability": [
                          "read",
                          "create"
                        ]
                      },
                      "properties": {
                        "description": "The resource-specific properties for this resource.",
                        "x-ms-client-flatten": true,
                        "type": "object",
                        "properties": {
                          "uuid": {
                            "type": "string",
                            "description": "Globally unique, immutable, non-reusable id.",
                            "readOnly": true
                          },
                          "namespace": {
                            "type": "string",
                            "description": "Schema registry namespace. Uniquely identifies a schema registry within a tenant.",
                            "maxLength": 32,
                            "pattern": "^[a-z0-9][a-z0-9-]*[a-z0-9]$",
                            "x-ms-mutability": [
                              "read",
                              "create"
                            ]
                          },
                          "displayName": {
                            "type": "string",
                            "description": "Human-readable display name."
                          },
                          "description": {
                            "type": "string",
                            "description": "Human-readable description of the schema registry."
                          },
                          "storageAccountContainerUrl": {
                            "type": "string",
                            "description": "The Storage Account's Container URL where schemas will be stored.",
                            "x-ms-mutability": [
                              "read",
                              "create"
                            ]
                          },
                          "provisioningState": {
                            "description": "Provisioning state of the resource.",
                            "readOnly": true,
                            "type": "string",
                            "enum": [
                              "Succeeded",
                              "Failed",
                              "Canceled",
                              "Accepted",
                              "Deleting"
                            ],
                            "x-ms-enum": {
                              "name": "ProvisioningState",
                              "modelAsString": true,
                              "values": [
                                {
                                  "name": "Succeeded",
                                  "value": "Succeeded",
                                  "description": "Resource has been created."
                                },
                                {
                                  "name": "Failed",
                                  "value": "Failed",
                                  "description": "Resource creation failed."
                                },
                                {
                                  "name": "Canceled",
                                  "value": "Canceled",
                                  "description": "Resource creation was canceled."
                                },
                                {
                                  "name": "Accepted",
                                  "value": "Accepted",
                                  "description": "Resource has been accepted by the server."
                                },
                                {
                                  "name": "Deleting",
                                  "value": "Deleting",
                                  "description": "Resource is deleting."
                                }
                              ]
                            }
                          }
                        },
                        "required": [
                          "namespace",
                          "storageAccountContainerUrl"
                        ]
                      },
                      "identity": {
                        "description": "The managed service identities assigned to this resource.",
                        "type": "object",
                        "properties": {
                          "principalId": {
                            "type": "string",
                            "format": "uuid",
                            "description": "The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.",
                            "readOnly": true
                          },
                          "tenantId": {
                            "type": "string",
                            "format": "uuid",
                            "description": "The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.",
                            "readOnly": true
                          },
                          "type": {
                            "type": "string",
                            "description": "Type of managed service identity (either system assigned, or none).",
                            "enum": [
                              "None",
                              "SystemAssigned"
                            ],
                            "x-ms-enum": {
                              "name": "SystemAssignedServiceIdentityType",
                              "modelAsString": true
                            }
                          }
                        },
                        "required": [
                          "type"
                        ]
                      }
                    }
                  }
                },
                "nextLink": {
                  "type": "string",
                  "format": "uri",
                  "description": "The link to the next page of items"
                }
              },
              "required": [
                "value"
              ]
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeviceRegistry/schemaRegistries/{schemaRegistryName}": {
      "get": {
        "operationId": "SchemaRegistries_Get",
        "tags": [
          "SchemaRegistries"
        ],
        "description": "Get a SchemaRegistry",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription. The value must be an UUID.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group. The name is case insensitive.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "x-ms-parameter-location": "method"
          },
          {
            "name": "schemaRegistryName",
            "in": "path",
            "description": "Schema registry name parameter.",
            "required": true,
            "type": "string",
            "minLength": 3,
            "maxLength": 63,
            "pattern": "^[a-z0-9][a-z0-9-]*[a-z0-9]$"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "type": "object",
              "description": "Schema registry definition.",
              "properties": {
                "id": {
                  "type": "string",
                  "format": "arm-id",
                  "description": "Fully qualified resource ID for the resource. E.g. \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}\"",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "description": "The name of the resource",
                  "readOnly": true
                },
                "type": {
                  "type": "string",
                  "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                  "readOnly": true
                },
                "systemData": {
                  "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                  "readOnly": true,
                  "type": "object",
                  "properties": {
                    "createdBy": {
                      "type": "string",
                      "description": "The identity that created the resource."
                    },
                    "createdByType": {
                      "type": "string",
                      "description": "The type of identity that created the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource creation (UTC)."
                    },
                    "lastModifiedBy": {
                      "type": "string",
                      "description": "The identity that last modified the resource."
                    },
                    "lastModifiedByType": {
                      "type": "string",
                      "description": "The type of identity that last modified the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "lastModifiedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource last modification (UTC)"
                    }
                  }
                },
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "x-ms-mutability": [
                    "read",
                    "create",
                    "update"
                  ]
                },
                "location": {
                  "type": "string",
                  "description": "The geo-location where the resource lives",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ]
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "uuid": {
                      "type": "string",
                      "description": "Globally unique, immutable, non-reusable id.",
                      "readOnly": true
                    },
                    "namespace": {
                      "type": "string",
                      "description": "Schema registry namespace. Uniquely identifies a schema registry within a tenant.",
                      "maxLength": 32,
                      "pattern": "^[a-z0-9][a-z0-9-]*[a-z0-9]$",
                      "x-ms-mutability": [
                        "read",
                        "create"
                      ]
                    },
                    "displayName": {
                      "type": "string",
                      "description": "Human-readable display name."
                    },
                    "description": {
                      "type": "string",
                      "description": "Human-readable description of the schema registry."
                    },
                    "storageAccountContainerUrl": {
                      "type": "string",
                      "description": "The Storage Account's Container URL where schemas will be stored.",
                      "x-ms-mutability": [
                        "read",
                        "create"
                      ]
                    },
                    "provisioningState": {
                      "description": "Provisioning state of the resource.",
                      "readOnly": true,
                      "type": "string",
                      "enum": [
                        "Succeeded",
                        "Failed",
                        "Canceled",
                        "Accepted",
                        "Deleting"
                      ],
                      "x-ms-enum": {
                        "name": "ProvisioningState",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Succeeded",
                            "value": "Succeeded",
                            "description": "Resource has been created."
                          },
                          {
                            "name": "Failed",
                            "value": "Failed",
                            "description": "Resource creation failed."
                          },
                          {
                            "name": "Canceled",
                            "value": "Canceled",
                            "description": "Resource creation was canceled."
                          },
                          {
                            "name": "Accepted",
                            "value": "Accepted",
                            "description": "Resource has been accepted by the server."
                          },
                          {
                            "name": "Deleting",
                            "value": "Deleting",
                            "description": "Resource is deleting."
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "namespace",
                    "storageAccountContainerUrl"
                  ]
                },
                "identity": {
                  "description": "The managed service identities assigned to this resource.",
                  "type": "object",
                  "properties": {
                    "principalId": {
                      "type": "string",
                      "format": "uuid",
                      "description": "The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.",
                      "readOnly": true
                    },
                    "tenantId": {
                      "type": "string",
                      "format": "uuid",
                      "description": "The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.",
                      "readOnly": true
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of managed service identity (either system assigned, or none).",
                      "enum": [
                        "None",
                        "SystemAssigned"
                      ],
                      "x-ms-enum": {
                        "name": "SystemAssignedServiceIdentityType",
                        "modelAsString": true
                      }
                    }
                  },
                  "required": [
                    "type"
                  ]
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "SchemaRegistries_CreateOrReplace",
        "tags": [
          "SchemaRegistries"
        ],
        "description": "Create a SchemaRegistry",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription. The value must be an UUID.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group. The name is case insensitive.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "x-ms-parameter-location": "method"
          },
          {
            "name": "schemaRegistryName",
            "in": "path",
            "description": "Schema registry name parameter.",
            "required": true,
            "type": "string",
            "minLength": 3,
            "maxLength": 63,
            "pattern": "^[a-z0-9][a-z0-9-]*[a-z0-9]$"
          },
          {
            "name": "resource",
            "in": "body",
            "description": "Resource create parameters.",
            "required": true,
            "schema": {
              "type": "object",
              "description": "Schema registry definition.",
              "properties": {
                "id": {
                  "type": "string",
                  "format": "arm-id",
                  "description": "Fully qualified resource ID for the resource. E.g. \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}\"",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "description": "The name of the resource",
                  "readOnly": true
                },
                "type": {
                  "type": "string",
                  "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                  "readOnly": true
                },
                "systemData": {
                  "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                  "readOnly": true,
                  "type": "object",
                  "properties": {
                    "createdBy": {
                      "type": "string",
                      "description": "The identity that created the resource."
                    },
                    "createdByType": {
                      "type": "string",
                      "description": "The type of identity that created the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource creation (UTC)."
                    },
                    "lastModifiedBy": {
                      "type": "string",
                      "description": "The identity that last modified the resource."
                    },
                    "lastModifiedByType": {
                      "type": "string",
                      "description": "The type of identity that last modified the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "lastModifiedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource last modification (UTC)"
                    }
                  }
                },
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "x-ms-mutability": [
                    "read",
                    "create",
                    "update"
                  ]
                },
                "location": {
                  "type": "string",
                  "description": "The geo-location where the resource lives",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ]
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "uuid": {
                      "type": "string",
                      "description": "Globally unique, immutable, non-reusable id.",
                      "readOnly": true
                    },
                    "namespace": {
                      "type": "string",
                      "description": "Schema registry namespace. Uniquely identifies a schema registry within a tenant.",
                      "maxLength": 32,
                      "pattern": "^[a-z0-9][a-z0-9-]*[a-z0-9]$",
                      "x-ms-mutability": [
                        "read",
                        "create"
                      ]
                    },
                    "displayName": {
                      "type": "string",
                      "description": "Human-readable display name."
                    },
                    "description": {
                      "type": "string",
                      "description": "Human-readable description of the schema registry."
                    },
                    "storageAccountContainerUrl": {
                      "type": "string",
                      "description": "The Storage Account's Container URL where schemas will be stored.",
                      "x-ms-mutability": [
                        "read",
                        "create"
                      ]
                    },
                    "provisioningState": {
                      "description": "Provisioning state of the resource.",
                      "readOnly": true,
                      "type": "string",
                      "enum": [
                        "Succeeded",
                        "Failed",
                        "Canceled",
                        "Accepted",
                        "Deleting"
                      ],
                      "x-ms-enum": {
                        "name": "ProvisioningState",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Succeeded",
                            "value": "Succeeded",
                            "description": "Resource has been created."
                          },
                          {
                            "name": "Failed",
                            "value": "Failed",
                            "description": "Resource creation failed."
                          },
                          {
                            "name": "Canceled",
                            "value": "Canceled",
                            "description": "Resource creation was canceled."
                          },
                          {
                            "name": "Accepted",
                            "value": "Accepted",
                            "description": "Resource has been accepted by the server."
                          },
                          {
                            "name": "Deleting",
                            "value": "Deleting",
                            "description": "Resource is deleting."
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "namespace",
                    "storageAccountContainerUrl"
                  ]
                },
                "identity": {
                  "description": "The managed service identities assigned to this resource.",
                  "type": "object",
                  "properties": {
                    "principalId": {
                      "type": "string",
                      "format": "uuid",
                      "description": "The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.",
                      "readOnly": true
                    },
                    "tenantId": {
                      "type": "string",
                      "format": "uuid",
                      "description": "The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.",
                      "readOnly": true
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of managed service identity (either system assigned, or none).",
                      "enum": [
                        "None",
                        "SystemAssigned"
                      ],
                      "x-ms-enum": {
                        "name": "SystemAssignedServiceIdentityType",
                        "modelAsString": true
                      }
                    }
                  },
                  "required": [
                    "type"
                  ]
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resource 'SchemaRegistry' update operation succeeded",
            "schema": {
              "type": "object",
              "description": "Schema registry definition.",
              "properties": {
                "id": {
                  "type": "string",
                  "format": "arm-id",
                  "description": "Fully qualified resource ID for the resource. E.g. \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}\"",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "description": "The name of the resource",
                  "readOnly": true
                },
                "type": {
                  "type": "string",
                  "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                  "readOnly": true
                },
                "systemData": {
                  "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                  "readOnly": true,
                  "type": "object",
                  "properties": {
                    "createdBy": {
                      "type": "string",
                      "description": "The identity that created the resource."
                    },
                    "createdByType": {
                      "type": "string",
                      "description": "The type of identity that created the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource creation (UTC)."
                    },
                    "lastModifiedBy": {
                      "type": "string",
                      "description": "The identity that last modified the resource."
                    },
                    "lastModifiedByType": {
                      "type": "string",
                      "description": "The type of identity that last modified the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "lastModifiedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource last modification (UTC)"
                    }
                  }
                },
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "x-ms-mutability": [
                    "read",
                    "create",
                    "update"
                  ]
                },
                "location": {
                  "type": "string",
                  "description": "The geo-location where the resource lives",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ]
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "uuid": {
                      "type": "string",
                      "description": "Globally unique, immutable, non-reusable id.",
                      "readOnly": true
                    },
                    "namespace": {
                      "type": "string",
                      "description": "Schema registry namespace. Uniquely identifies a schema registry within a tenant.",
                      "maxLength": 32,
                      "pattern": "^[a-z0-9][a-z0-9-]*[a-z0-9]$",
                      "x-ms-mutability": [
                        "read",
                        "create"
                      ]
                    },
                    "displayName": {
                      "type": "string",
                      "description": "Human-readable display name."
                    },
                    "description": {
                      "type": "string",
                      "description": "Human-readable description of the schema registry."
                    },
                    "storageAccountContainerUrl": {
                      "type": "string",
                      "description": "The Storage Account's Container URL where schemas will be stored.",
                      "x-ms-mutability": [
                        "read",
                        "create"
                      ]
                    },
                    "provisioningState": {
                      "description": "Provisioning state of the resource.",
                      "readOnly": true,
                      "type": "string",
                      "enum": [
                        "Succeeded",
                        "Failed",
                        "Canceled",
                        "Accepted",
                        "Deleting"
                      ],
                      "x-ms-enum": {
                        "name": "ProvisioningState",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Succeeded",
                            "value": "Succeeded",
                            "description": "Resource has been created."
                          },
                          {
                            "name": "Failed",
                            "value": "Failed",
                            "description": "Resource creation failed."
                          },
                          {
                            "name": "Canceled",
                            "value": "Canceled",
                            "description": "Resource creation was canceled."
                          },
                          {
                            "name": "Accepted",
                            "value": "Accepted",
                            "description": "Resource has been accepted by the server."
                          },
                          {
                            "name": "Deleting",
                            "value": "Deleting",
                            "description": "Resource is deleting."
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "namespace",
                    "storageAccountContainerUrl"
                  ]
                },
                "identity": {
                  "description": "The managed service identities assigned to this resource.",
                  "type": "object",
                  "properties": {
                    "principalId": {
                      "type": "string",
                      "format": "uuid",
                      "description": "The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.",
                      "readOnly": true
                    },
                    "tenantId": {
                      "type": "string",
                      "format": "uuid",
                      "description": "The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.",
                      "readOnly": true
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of managed service identity (either system assigned, or none).",
                      "enum": [
                        "None",
                        "SystemAssigned"
                      ],
                      "x-ms-enum": {
                        "name": "SystemAssignedServiceIdentityType",
                        "modelAsString": true
                      }
                    }
                  },
                  "required": [
                    "type"
                  ]
                }
              }
            }
          },
          "201": {
            "description": "Resource 'SchemaRegistry' create operation succeeded",
            "schema": {
              "type": "object",
              "description": "Schema registry definition.",
              "properties": {
                "id": {
                  "type": "string",
                  "format": "arm-id",
                  "description": "Fully qualified resource ID for the resource. E.g. \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}\"",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "description": "The name of the resource",
                  "readOnly": true
                },
                "type": {
                  "type": "string",
                  "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                  "readOnly": true
                },
                "systemData": {
                  "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                  "readOnly": true,
                  "type": "object",
                  "properties": {
                    "createdBy": {
                      "type": "string",
                      "description": "The identity that created the resource."
                    },
                    "createdByType": {
                      "type": "string",
                      "description": "The type of identity that created the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource creation (UTC)."
                    },
                    "lastModifiedBy": {
                      "type": "string",
                      "description": "The identity that last modified the resource."
                    },
                    "lastModifiedByType": {
                      "type": "string",
                      "description": "The type of identity that last modified the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "lastModifiedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource last modification (UTC)"
                    }
                  }
                },
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "x-ms-mutability": [
                    "read",
                    "create",
                    "update"
                  ]
                },
                "location": {
                  "type": "string",
                  "description": "The geo-location where the resource lives",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ]
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "uuid": {
                      "type": "string",
                      "description": "Globally unique, immutable, non-reusable id.",
                      "readOnly": true
                    },
                    "namespace": {
                      "type": "string",
                      "description": "Schema registry namespace. Uniquely identifies a schema registry within a tenant.",
                      "maxLength": 32,
                      "pattern": "^[a-z0-9][a-z0-9-]*[a-z0-9]$",
                      "x-ms-mutability": [
                        "read",
                        "create"
                      ]
                    },
                    "displayName": {
                      "type": "string",
                      "description": "Human-readable display name."
                    },
                    "description": {
                      "type": "string",
                      "description": "Human-readable description of the schema registry."
                    },
                    "storageAccountContainerUrl": {
                      "type": "string",
                      "description": "The Storage Account's Container URL where schemas will be stored.",
                      "x-ms-mutability": [
                        "read",
                        "create"
                      ]
                    },
                    "provisioningState": {
                      "description": "Provisioning state of the resource.",
                      "readOnly": true,
                      "type": "string",
                      "enum": [
                        "Succeeded",
                        "Failed",
                        "Canceled",
                        "Accepted",
                        "Deleting"
                      ],
                      "x-ms-enum": {
                        "name": "ProvisioningState",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Succeeded",
                            "value": "Succeeded",
                            "description": "Resource has been created."
                          },
                          {
                            "name": "Failed",
                            "value": "Failed",
                            "description": "Resource creation failed."
                          },
                          {
                            "name": "Canceled",
                            "value": "Canceled",
                            "description": "Resource creation was canceled."
                          },
                          {
                            "name": "Accepted",
                            "value": "Accepted",
                            "description": "Resource has been accepted by the server."
                          },
                          {
                            "name": "Deleting",
                            "value": "Deleting",
                            "description": "Resource is deleting."
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "namespace",
                    "storageAccountContainerUrl"
                  ]
                },
                "identity": {
                  "description": "The managed service identities assigned to this resource.",
                  "type": "object",
                  "properties": {
                    "principalId": {
                      "type": "string",
                      "format": "uuid",
                      "description": "The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.",
                      "readOnly": true
                    },
                    "tenantId": {
                      "type": "string",
                      "format": "uuid",
                      "description": "The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.",
                      "readOnly": true
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of managed service identity (either system assigned, or none).",
                      "enum": [
                        "None",
                        "SystemAssigned"
                      ],
                      "x-ms-enum": {
                        "name": "SystemAssignedServiceIdentityType",
                        "modelAsString": true
                      }
                    }
                  },
                  "required": [
                    "type"
                  ]
                }
              }
            },
            "headers": {
              "Azure-AsyncOperation": {
                "type": "string",
                "description": "A link to the status monitor"
              },
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "SchemaRegistries_Update",
        "tags": [
          "SchemaRegistries"
        ],
        "description": "Update a SchemaRegistry",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription. The value must be an UUID.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group. The name is case insensitive.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "x-ms-parameter-location": "method"
          },
          {
            "name": "schemaRegistryName",
            "in": "path",
            "description": "Schema registry name parameter.",
            "required": true,
            "type": "string",
            "minLength": 3,
            "maxLength": 63,
            "pattern": "^[a-z0-9][a-z0-9-]*[a-z0-9]$"
          },
          {
            "name": "properties",
            "in": "body",
            "description": "The resource properties to be updated.",
            "required": true,
            "schema": {
              "type": "object",
              "description": "The type used for update operations of the SchemaRegistry.",
              "properties": {
                "identity": {
                  "description": "The managed service identities assigned to this resource.",
                  "type": "object",
                  "properties": {
                    "principalId": {
                      "type": "string",
                      "format": "uuid",
                      "description": "The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.",
                      "readOnly": true
                    },
                    "tenantId": {
                      "type": "string",
                      "format": "uuid",
                      "description": "The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.",
                      "readOnly": true
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of managed service identity (either system assigned, or none).",
                      "enum": [
                        "None",
                        "SystemAssigned"
                      ],
                      "x-ms-enum": {
                        "name": "SystemAssignedServiceIdentityType",
                        "modelAsString": true
                      }
                    }
                  },
                  "required": [
                    "type"
                  ]
                },
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "displayName": {
                      "type": "string",
                      "description": "Human-readable display name."
                    },
                    "description": {
                      "type": "string",
                      "description": "Human-readable description of the schema registry."
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "type": "object",
              "description": "Schema registry definition.",
              "properties": {
                "id": {
                  "type": "string",
                  "format": "arm-id",
                  "description": "Fully qualified resource ID for the resource. E.g. \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}\"",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "description": "The name of the resource",
                  "readOnly": true
                },
                "type": {
                  "type": "string",
                  "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                  "readOnly": true
                },
                "systemData": {
                  "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                  "readOnly": true,
                  "type": "object",
                  "properties": {
                    "createdBy": {
                      "type": "string",
                      "description": "The identity that created the resource."
                    },
                    "createdByType": {
                      "type": "string",
                      "description": "The type of identity that created the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource creation (UTC)."
                    },
                    "lastModifiedBy": {
                      "type": "string",
                      "description": "The identity that last modified the resource."
                    },
                    "lastModifiedByType": {
                      "type": "string",
                      "description": "The type of identity that last modified the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "lastModifiedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource last modification (UTC)"
                    }
                  }
                },
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "x-ms-mutability": [
                    "read",
                    "create",
                    "update"
                  ]
                },
                "location": {
                  "type": "string",
                  "description": "The geo-location where the resource lives",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ]
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "uuid": {
                      "type": "string",
                      "description": "Globally unique, immutable, non-reusable id.",
                      "readOnly": true
                    },
                    "namespace": {
                      "type": "string",
                      "description": "Schema registry namespace. Uniquely identifies a schema registry within a tenant.",
                      "maxLength": 32,
                      "pattern": "^[a-z0-9][a-z0-9-]*[a-z0-9]$",
                      "x-ms-mutability": [
                        "read",
                        "create"
                      ]
                    },
                    "displayName": {
                      "type": "string",
                      "description": "Human-readable display name."
                    },
                    "description": {
                      "type": "string",
                      "description": "Human-readable description of the schema registry."
                    },
                    "storageAccountContainerUrl": {
                      "type": "string",
                      "description": "The Storage Account's Container URL where schemas will be stored.",
                      "x-ms-mutability": [
                        "read",
                        "create"
                      ]
                    },
                    "provisioningState": {
                      "description": "Provisioning state of the resource.",
                      "readOnly": true,
                      "type": "string",
                      "enum": [
                        "Succeeded",
                        "Failed",
                        "Canceled",
                        "Accepted",
                        "Deleting"
                      ],
                      "x-ms-enum": {
                        "name": "ProvisioningState",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Succeeded",
                            "value": "Succeeded",
                            "description": "Resource has been created."
                          },
                          {
                            "name": "Failed",
                            "value": "Failed",
                            "description": "Resource creation failed."
                          },
                          {
                            "name": "Canceled",
                            "value": "Canceled",
                            "description": "Resource creation was canceled."
                          },
                          {
                            "name": "Accepted",
                            "value": "Accepted",
                            "description": "Resource has been accepted by the server."
                          },
                          {
                            "name": "Deleting",
                            "value": "Deleting",
                            "description": "Resource is deleting."
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "namespace",
                    "storageAccountContainerUrl"
                  ]
                },
                "identity": {
                  "description": "The managed service identities assigned to this resource.",
                  "type": "object",
                  "properties": {
                    "principalId": {
                      "type": "string",
                      "format": "uuid",
                      "description": "The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.",
                      "readOnly": true
                    },
                    "tenantId": {
                      "type": "string",
                      "format": "uuid",
                      "description": "The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.",
                      "readOnly": true
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of managed service identity (either system assigned, or none).",
                      "enum": [
                        "None",
                        "SystemAssigned"
                      ],
                      "x-ms-enum": {
                        "name": "SystemAssignedServiceIdentityType",
                        "modelAsString": true
                      }
                    }
                  },
                  "required": [
                    "type"
                  ]
                }
              }
            }
          },
          "202": {
            "description": "Resource update request accepted.",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              },
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "SchemaRegistries_Delete",
        "tags": [
          "SchemaRegistries"
        ],
        "description": "Delete a SchemaRegistry",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription. The value must be an UUID.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group. The name is case insensitive.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "x-ms-parameter-location": "method"
          },
          {
            "name": "schemaRegistryName",
            "in": "path",
            "description": "Schema registry name parameter.",
            "required": true,
            "type": "string",
            "minLength": 3,
            "maxLength": 63,
            "pattern": "^[a-z0-9][a-z0-9-]*[a-z0-9]$"
          }
        ],
        "responses": {
          "202": {
            "description": "Resource deletion accepted.",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              },
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "204": {
            "description": "Resource does not exist."
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeviceRegistry/schemaRegistries/{schemaRegistryName}/schemas": {
      "get": {
        "operationId": "Schemas_ListBySchemaRegistry",
        "tags": [
          "Schemas"
        ],
        "description": "List Schema resources by SchemaRegistry",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription. The value must be an UUID.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group. The name is case insensitive.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "x-ms-parameter-location": "method"
          },
          {
            "name": "schemaRegistryName",
            "in": "path",
            "description": "Schema registry name parameter.",
            "required": true,
            "type": "string",
            "minLength": 3,
            "maxLength": 63,
            "pattern": "^[a-z0-9][a-z0-9-]*[a-z0-9]$"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "type": "object",
              "description": "The response of a Schema list operation.",
              "properties": {
                "value": {
                  "type": "array",
                  "description": "The Schema items on this page",
                  "items": {
                    "type": "object",
                    "description": "Schema definition.",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "arm-id",
                        "description": "Fully qualified resource ID for the resource. E.g. \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}\"",
                        "readOnly": true
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the resource",
                        "readOnly": true
                      },
                      "type": {
                        "type": "string",
                        "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                        "readOnly": true
                      },
                      "systemData": {
                        "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                        "readOnly": true,
                        "type": "object",
                        "properties": {
                          "createdBy": {
                            "type": "string",
                            "description": "The identity that created the resource."
                          },
                          "createdByType": {
                            "type": "string",
                            "description": "The type of identity that created the resource.",
                            "enum": [
                              "User",
                              "Application",
                              "ManagedIdentity",
                              "Key"
                            ],
                            "x-ms-enum": {
                              "name": "createdByType",
                              "modelAsString": true
                            }
                          },
                          "createdAt": {
                            "type": "string",
                            "format": "date-time",
                            "description": "The timestamp of resource creation (UTC)."
                          },
                          "lastModifiedBy": {
                            "type": "string",
                            "description": "The identity that last modified the resource."
                          },
                          "lastModifiedByType": {
                            "type": "string",
                            "description": "The type of identity that last modified the resource.",
                            "enum": [
                              "User",
                              "Application",
                              "ManagedIdentity",
                              "Key"
                            ],
                            "x-ms-enum": {
                              "name": "createdByType",
                              "modelAsString": true
                            }
                          },
                          "lastModifiedAt": {
                            "type": "string",
                            "format": "date-time",
                            "description": "The timestamp of resource last modification (UTC)"
                          }
                        }
                      },
                      "properties": {
                        "description": "The resource-specific properties for this resource.",
                        "x-ms-client-flatten": true,
                        "type": "object",
                        "properties": {
                          "uuid": {
                            "type": "string",
                            "description": "Globally unique, immutable, non-reusable id.",
                            "readOnly": true
                          },
                          "displayName": {
                            "type": "string",
                            "description": "Human-readable display name."
                          },
                          "description": {
                            "type": "string",
                            "description": "Human-readable description of the schema."
                          },
                          "format": {
                            "description": "Format of the schema.",
                            "x-ms-mutability": [
                              "read",
                              "create"
                            ],
                            "type": "string",
                            "enum": [
                              "JsonSchema/draft-07",
                              "Delta/1.0"
                            ],
                            "x-ms-enum": {
                              "name": "Format",
                              "modelAsString": true,
                              "values": [
                                {
                                  "name": "JsonSchema_draft7",
                                  "value": "JsonSchema/draft-07",
                                  "description": "JSON Schema version draft 7 format"
                                },
                                {
                                  "name": "Delta_1_0",
                                  "value": "Delta/1.0",
                                  "description": "Delta format"
                                }
                              ]
                            }
                          },
                          "schemaType": {
                            "description": "Type of the schema.",
                            "x-ms-mutability": [
                              "read",
                              "create"
                            ],
                            "type": "string",
                            "enum": [
                              "MessageSchema"
                            ],
                            "x-ms-enum": {
                              "name": "SchemaType",
                              "modelAsString": true,
                              "values": [
                                {
                                  "name": "MessageSchema",
                                  "value": "MessageSchema",
                                  "description": "Message Schema schema type"
                                }
                              ]
                            }
                          },
                          "provisioningState": {
                            "description": "Provisioning state of the resource.",
                            "readOnly": true,
                            "type": "string",
                            "enum": [
                              "Succeeded",
                              "Failed",
                              "Canceled",
                              "Accepted",
                              "Deleting"
                            ],
                            "x-ms-enum": {
                              "name": "ProvisioningState",
                              "modelAsString": true,
                              "values": [
                                {
                                  "name": "Succeeded",
                                  "value": "Succeeded",
                                  "description": "Resource has been created."
                                },
                                {
                                  "name": "Failed",
                                  "value": "Failed",
                                  "description": "Resource creation failed."
                                },
                                {
                                  "name": "Canceled",
                                  "value": "Canceled",
                                  "description": "Resource creation was canceled."
                                },
                                {
                                  "name": "Accepted",
                                  "value": "Accepted",
                                  "description": "Resource has been accepted by the server."
                                },
                                {
                                  "name": "Deleting",
                                  "value": "Deleting",
                                  "description": "Resource is deleting."
                                }
                              ]
                            }
                          },
                          "tags": {
                            "type": "object",
                            "description": "Schema tags.",
                            "additionalProperties": {
                              "type": "string"
                            }
                          }
                        },
                        "required": [
                          "format",
                          "schemaType"
                        ]
                      }
                    }
                  }
                },
                "nextLink": {
                  "type": "string",
                  "format": "uri",
                  "description": "The link to the next page of items"
                }
              },
              "required": [
                "value"
              ]
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeviceRegistry/schemaRegistries/{schemaRegistryName}/schemas/{schemaName}": {
      "get": {
        "operationId": "Schemas_Get",
        "tags": [
          "Schemas"
        ],
        "description": "Get a Schema",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription. The value must be an UUID.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group. The name is case insensitive.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "x-ms-parameter-location": "method"
          },
          {
            "name": "schemaRegistryName",
            "in": "path",
            "description": "Schema registry name parameter.",
            "required": true,
            "type": "string",
            "minLength": 3,
            "maxLength": 63,
            "pattern": "^[a-z0-9][a-z0-9-]*[a-z0-9]$"
          },
          {
            "name": "schemaName",
            "in": "path",
            "description": "Schema name parameter.",
            "required": true,
            "type": "string",
            "minLength": 3,
            "maxLength": 64,
            "pattern": "^[a-z0-9][a-z0-9-]*[a-z0-9]$"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "type": "object",
              "description": "Schema definition.",
              "properties": {
                "id": {
                  "type": "string",
                  "format": "arm-id",
                  "description": "Fully qualified resource ID for the resource. E.g. \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}\"",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "description": "The name of the resource",
                  "readOnly": true
                },
                "type": {
                  "type": "string",
                  "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                  "readOnly": true
                },
                "systemData": {
                  "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                  "readOnly": true,
                  "type": "object",
                  "properties": {
                    "createdBy": {
                      "type": "string",
                      "description": "The identity that created the resource."
                    },
                    "createdByType": {
                      "type": "string",
                      "description": "The type of identity that created the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource creation (UTC)."
                    },
                    "lastModifiedBy": {
                      "type": "string",
                      "description": "The identity that last modified the resource."
                    },
                    "lastModifiedByType": {
                      "type": "string",
                      "description": "The type of identity that last modified the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "lastModifiedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource last modification (UTC)"
                    }
                  }
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "uuid": {
                      "type": "string",
                      "description": "Globally unique, immutable, non-reusable id.",
                      "readOnly": true
                    },
                    "displayName": {
                      "type": "string",
                      "description": "Human-readable display name."
                    },
                    "description": {
                      "type": "string",
                      "description": "Human-readable description of the schema."
                    },
                    "format": {
                      "description": "Format of the schema.",
                      "x-ms-mutability": [
                        "read",
                        "create"
                      ],
                      "type": "string",
                      "enum": [
                        "JsonSchema/draft-07",
                        "Delta/1.0"
                      ],
                      "x-ms-enum": {
                        "name": "Format",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "JsonSchema_draft7",
                            "value": "JsonSchema/draft-07",
                            "description": "JSON Schema version draft 7 format"
                          },
                          {
                            "name": "Delta_1_0",
                            "value": "Delta/1.0",
                            "description": "Delta format"
                          }
                        ]
                      }
                    },
                    "schemaType": {
                      "description": "Type of the schema.",
                      "x-ms-mutability": [
                        "read",
                        "create"
                      ],
                      "type": "string",
                      "enum": [
                        "MessageSchema"
                      ],
                      "x-ms-enum": {
                        "name": "SchemaType",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "MessageSchema",
                            "value": "MessageSchema",
                            "description": "Message Schema schema type"
                          }
                        ]
                      }
                    },
                    "provisioningState": {
                      "description": "Provisioning state of the resource.",
                      "readOnly": true,
                      "type": "string",
                      "enum": [
                        "Succeeded",
                        "Failed",
                        "Canceled",
                        "Accepted",
                        "Deleting"
                      ],
                      "x-ms-enum": {
                        "name": "ProvisioningState",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Succeeded",
                            "value": "Succeeded",
                            "description": "Resource has been created."
                          },
                          {
                            "name": "Failed",
                            "value": "Failed",
                            "description": "Resource creation failed."
                          },
                          {
                            "name": "Canceled",
                            "value": "Canceled",
                            "description": "Resource creation was canceled."
                          },
                          {
                            "name": "Accepted",
                            "value": "Accepted",
                            "description": "Resource has been accepted by the server."
                          },
                          {
                            "name": "Deleting",
                            "value": "Deleting",
                            "description": "Resource is deleting."
                          }
                        ]
                      }
                    },
                    "tags": {
                      "type": "object",
                      "description": "Schema tags.",
                      "additionalProperties": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "format",
                    "schemaType"
                  ]
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "Schemas_CreateOrReplace",
        "tags": [
          "Schemas"
        ],
        "description": "Create a Schema",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription. The value must be an UUID.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group. The name is case insensitive.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "x-ms-parameter-location": "method"
          },
          {
            "name": "schemaRegistryName",
            "in": "path",
            "description": "Schema registry name parameter.",
            "required": true,
            "type": "string",
            "minLength": 3,
            "maxLength": 63,
            "pattern": "^[a-z0-9][a-z0-9-]*[a-z0-9]$"
          },
          {
            "name": "schemaName",
            "in": "path",
            "description": "Schema name parameter.",
            "required": true,
            "type": "string",
            "minLength": 3,
            "maxLength": 64,
            "pattern": "^[a-z0-9][a-z0-9-]*[a-z0-9]$"
          },
          {
            "name": "resource",
            "in": "body",
            "description": "Resource create parameters.",
            "required": true,
            "schema": {
              "type": "object",
              "description": "Schema definition.",
              "properties": {
                "id": {
                  "type": "string",
                  "format": "arm-id",
                  "description": "Fully qualified resource ID for the resource. E.g. \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}\"",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "description": "The name of the resource",
                  "readOnly": true
                },
                "type": {
                  "type": "string",
                  "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                  "readOnly": true
                },
                "systemData": {
                  "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                  "readOnly": true,
                  "type": "object",
                  "properties": {
                    "createdBy": {
                      "type": "string",
                      "description": "The identity that created the resource."
                    },
                    "createdByType": {
                      "type": "string",
                      "description": "The type of identity that created the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource creation (UTC)."
                    },
                    "lastModifiedBy": {
                      "type": "string",
                      "description": "The identity that last modified the resource."
                    },
                    "lastModifiedByType": {
                      "type": "string",
                      "description": "The type of identity that last modified the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "lastModifiedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource last modification (UTC)"
                    }
                  }
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "uuid": {
                      "type": "string",
                      "description": "Globally unique, immutable, non-reusable id.",
                      "readOnly": true
                    },
                    "displayName": {
                      "type": "string",
                      "description": "Human-readable display name."
                    },
                    "description": {
                      "type": "string",
                      "description": "Human-readable description of the schema."
                    },
                    "format": {
                      "description": "Format of the schema.",
                      "x-ms-mutability": [
                        "read",
                        "create"
                      ],
                      "type": "string",
                      "enum": [
                        "JsonSchema/draft-07",
                        "Delta/1.0"
                      ],
                      "x-ms-enum": {
                        "name": "Format",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "JsonSchema_draft7",
                            "value": "JsonSchema/draft-07",
                            "description": "JSON Schema version draft 7 format"
                          },
                          {
                            "name": "Delta_1_0",
                            "value": "Delta/1.0",
                            "description": "Delta format"
                          }
                        ]
                      }
                    },
                    "schemaType": {
                      "description": "Type of the schema.",
                      "x-ms-mutability": [
                        "read",
                        "create"
                      ],
                      "type": "string",
                      "enum": [
                        "MessageSchema"
                      ],
                      "x-ms-enum": {
                        "name": "SchemaType",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "MessageSchema",
                            "value": "MessageSchema",
                            "description": "Message Schema schema type"
                          }
                        ]
                      }
                    },
                    "provisioningState": {
                      "description": "Provisioning state of the resource.",
                      "readOnly": true,
                      "type": "string",
                      "enum": [
                        "Succeeded",
                        "Failed",
                        "Canceled",
                        "Accepted",
                        "Deleting"
                      ],
                      "x-ms-enum": {
                        "name": "ProvisioningState",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Succeeded",
                            "value": "Succeeded",
                            "description": "Resource has been created."
                          },
                          {
                            "name": "Failed",
                            "value": "Failed",
                            "description": "Resource creation failed."
                          },
                          {
                            "name": "Canceled",
                            "value": "Canceled",
                            "description": "Resource creation was canceled."
                          },
                          {
                            "name": "Accepted",
                            "value": "Accepted",
                            "description": "Resource has been accepted by the server."
                          },
                          {
                            "name": "Deleting",
                            "value": "Deleting",
                            "description": "Resource is deleting."
                          }
                        ]
                      }
                    },
                    "tags": {
                      "type": "object",
                      "description": "Schema tags.",
                      "additionalProperties": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "format",
                    "schemaType"
                  ]
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resource 'Schema' update operation succeeded",
            "schema": {
              "type": "object",
              "description": "Schema definition.",
              "properties": {
                "id": {
                  "type": "string",
                  "format": "arm-id",
                  "description": "Fully qualified resource ID for the resource. E.g. \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}\"",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "description": "The name of the resource",
                  "readOnly": true
                },
                "type": {
                  "type": "string",
                  "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                  "readOnly": true
                },
                "systemData": {
                  "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                  "readOnly": true,
                  "type": "object",
                  "properties": {
                    "createdBy": {
                      "type": "string",
                      "description": "The identity that created the resource."
                    },
                    "createdByType": {
                      "type": "string",
                      "description": "The type of identity that created the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource creation (UTC)."
                    },
                    "lastModifiedBy": {
                      "type": "string",
                      "description": "The identity that last modified the resource."
                    },
                    "lastModifiedByType": {
                      "type": "string",
                      "description": "The type of identity that last modified the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "lastModifiedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource last modification (UTC)"
                    }
                  }
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "uuid": {
                      "type": "string",
                      "description": "Globally unique, immutable, non-reusable id.",
                      "readOnly": true
                    },
                    "displayName": {
                      "type": "string",
                      "description": "Human-readable display name."
                    },
                    "description": {
                      "type": "string",
                      "description": "Human-readable description of the schema."
                    },
                    "format": {
                      "description": "Format of the schema.",
                      "x-ms-mutability": [
                        "read",
                        "create"
                      ],
                      "type": "string",
                      "enum": [
                        "JsonSchema/draft-07",
                        "Delta/1.0"
                      ],
                      "x-ms-enum": {
                        "name": "Format",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "JsonSchema_draft7",
                            "value": "JsonSchema/draft-07",
                            "description": "JSON Schema version draft 7 format"
                          },
                          {
                            "name": "Delta_1_0",
                            "value": "Delta/1.0",
                            "description": "Delta format"
                          }
                        ]
                      }
                    },
                    "schemaType": {
                      "description": "Type of the schema.",
                      "x-ms-mutability": [
                        "read",
                        "create"
                      ],
                      "type": "string",
                      "enum": [
                        "MessageSchema"
                      ],
                      "x-ms-enum": {
                        "name": "SchemaType",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "MessageSchema",
                            "value": "MessageSchema",
                            "description": "Message Schema schema type"
                          }
                        ]
                      }
                    },
                    "provisioningState": {
                      "description": "Provisioning state of the resource.",
                      "readOnly": true,
                      "type": "string",
                      "enum": [
                        "Succeeded",
                        "Failed",
                        "Canceled",
                        "Accepted",
                        "Deleting"
                      ],
                      "x-ms-enum": {
                        "name": "ProvisioningState",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Succeeded",
                            "value": "Succeeded",
                            "description": "Resource has been created."
                          },
                          {
                            "name": "Failed",
                            "value": "Failed",
                            "description": "Resource creation failed."
                          },
                          {
                            "name": "Canceled",
                            "value": "Canceled",
                            "description": "Resource creation was canceled."
                          },
                          {
                            "name": "Accepted",
                            "value": "Accepted",
                            "description": "Resource has been accepted by the server."
                          },
                          {
                            "name": "Deleting",
                            "value": "Deleting",
                            "description": "Resource is deleting."
                          }
                        ]
                      }
                    },
                    "tags": {
                      "type": "object",
                      "description": "Schema tags.",
                      "additionalProperties": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "format",
                    "schemaType"
                  ]
                }
              }
            }
          },
          "201": {
            "description": "Resource 'Schema' create operation succeeded",
            "schema": {
              "type": "object",
              "description": "Schema definition.",
              "properties": {
                "id": {
                  "type": "string",
                  "format": "arm-id",
                  "description": "Fully qualified resource ID for the resource. E.g. \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}\"",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "description": "The name of the resource",
                  "readOnly": true
                },
                "type": {
                  "type": "string",
                  "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                  "readOnly": true
                },
                "systemData": {
                  "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                  "readOnly": true,
                  "type": "object",
                  "properties": {
                    "createdBy": {
                      "type": "string",
                      "description": "The identity that created the resource."
                    },
                    "createdByType": {
                      "type": "string",
                      "description": "The type of identity that created the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource creation (UTC)."
                    },
                    "lastModifiedBy": {
                      "type": "string",
                      "description": "The identity that last modified the resource."
                    },
                    "lastModifiedByType": {
                      "type": "string",
                      "description": "The type of identity that last modified the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "lastModifiedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource last modification (UTC)"
                    }
                  }
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "uuid": {
                      "type": "string",
                      "description": "Globally unique, immutable, non-reusable id.",
                      "readOnly": true
                    },
                    "displayName": {
                      "type": "string",
                      "description": "Human-readable display name."
                    },
                    "description": {
                      "type": "string",
                      "description": "Human-readable description of the schema."
                    },
                    "format": {
                      "description": "Format of the schema.",
                      "x-ms-mutability": [
                        "read",
                        "create"
                      ],
                      "type": "string",
                      "enum": [
                        "JsonSchema/draft-07",
                        "Delta/1.0"
                      ],
                      "x-ms-enum": {
                        "name": "Format",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "JsonSchema_draft7",
                            "value": "JsonSchema/draft-07",
                            "description": "JSON Schema version draft 7 format"
                          },
                          {
                            "name": "Delta_1_0",
                            "value": "Delta/1.0",
                            "description": "Delta format"
                          }
                        ]
                      }
                    },
                    "schemaType": {
                      "description": "Type of the schema.",
                      "x-ms-mutability": [
                        "read",
                        "create"
                      ],
                      "type": "string",
                      "enum": [
                        "MessageSchema"
                      ],
                      "x-ms-enum": {
                        "name": "SchemaType",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "MessageSchema",
                            "value": "MessageSchema",
                            "description": "Message Schema schema type"
                          }
                        ]
                      }
                    },
                    "provisioningState": {
                      "description": "Provisioning state of the resource.",
                      "readOnly": true,
                      "type": "string",
                      "enum": [
                        "Succeeded",
                        "Failed",
                        "Canceled",
                        "Accepted",
                        "Deleting"
                      ],
                      "x-ms-enum": {
                        "name": "ProvisioningState",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Succeeded",
                            "value": "Succeeded",
                            "description": "Resource has been created."
                          },
                          {
                            "name": "Failed",
                            "value": "Failed",
                            "description": "Resource creation failed."
                          },
                          {
                            "name": "Canceled",
                            "value": "Canceled",
                            "description": "Resource creation was canceled."
                          },
                          {
                            "name": "Accepted",
                            "value": "Accepted",
                            "description": "Resource has been accepted by the server."
                          },
                          {
                            "name": "Deleting",
                            "value": "Deleting",
                            "description": "Resource is deleting."
                          }
                        ]
                      }
                    },
                    "tags": {
                      "type": "object",
                      "description": "Schema tags.",
                      "additionalProperties": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "format",
                    "schemaType"
                  ]
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "Schemas_Delete",
        "tags": [
          "Schemas"
        ],
        "description": "Delete a Schema",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription. The value must be an UUID.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group. The name is case insensitive.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "x-ms-parameter-location": "method"
          },
          {
            "name": "schemaRegistryName",
            "in": "path",
            "description": "Schema registry name parameter.",
            "required": true,
            "type": "string",
            "minLength": 3,
            "maxLength": 63,
            "pattern": "^[a-z0-9][a-z0-9-]*[a-z0-9]$"
          },
          {
            "name": "schemaName",
            "in": "path",
            "description": "Schema name parameter.",
            "required": true,
            "type": "string",
            "minLength": 3,
            "maxLength": 64,
            "pattern": "^[a-z0-9][a-z0-9-]*[a-z0-9]$"
          }
        ],
        "responses": {
          "202": {
            "description": "Resource deletion accepted.",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              },
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "204": {
            "description": "Resource does not exist."
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeviceRegistry/schemaRegistries/{schemaRegistryName}/schemas/{schemaName}/schemaVersions": {
      "get": {
        "operationId": "SchemaVersions_ListBySchema",
        "tags": [
          "SchemaVersions"
        ],
        "description": "List SchemaVersion resources by Schema",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription. The value must be an UUID.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group. The name is case insensitive.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "x-ms-parameter-location": "method"
          },
          {
            "name": "schemaRegistryName",
            "in": "path",
            "description": "Schema registry name parameter.",
            "required": true,
            "type": "string",
            "minLength": 3,
            "maxLength": 63,
            "pattern": "^[a-z0-9][a-z0-9-]*[a-z0-9]$"
          },
          {
            "name": "schemaName",
            "in": "path",
            "description": "Schema name parameter.",
            "required": true,
            "type": "string",
            "minLength": 3,
            "maxLength": 64,
            "pattern": "^[a-z0-9][a-z0-9-]*[a-z0-9]$"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "type": "object",
              "description": "The response of a SchemaVersion list operation.",
              "properties": {
                "value": {
                  "type": "array",
                  "description": "The SchemaVersion items on this page",
                  "items": {
                    "type": "object",
                    "description": "Schema version's definition.",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "arm-id",
                        "description": "Fully qualified resource ID for the resource. E.g. \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}\"",
                        "readOnly": true
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the resource",
                        "readOnly": true
                      },
                      "type": {
                        "type": "string",
                        "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                        "readOnly": true
                      },
                      "systemData": {
                        "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                        "readOnly": true,
                        "type": "object",
                        "properties": {
                          "createdBy": {
                            "type": "string",
                            "description": "The identity that created the resource."
                          },
                          "createdByType": {
                            "type": "string",
                            "description": "The type of identity that created the resource.",
                            "enum": [
                              "User",
                              "Application",
                              "ManagedIdentity",
                              "Key"
                            ],
                            "x-ms-enum": {
                              "name": "createdByType",
                              "modelAsString": true
                            }
                          },
                          "createdAt": {
                            "type": "string",
                            "format": "date-time",
                            "description": "The timestamp of resource creation (UTC)."
                          },
                          "lastModifiedBy": {
                            "type": "string",
                            "description": "The identity that last modified the resource."
                          },
                          "lastModifiedByType": {
                            "type": "string",
                            "description": "The type of identity that last modified the resource.",
                            "enum": [
                              "User",
                              "Application",
                              "ManagedIdentity",
                              "Key"
                            ],
                            "x-ms-enum": {
                              "name": "createdByType",
                              "modelAsString": true
                            }
                          },
                          "lastModifiedAt": {
                            "type": "string",
                            "format": "date-time",
                            "description": "The timestamp of resource last modification (UTC)"
                          }
                        }
                      },
                      "properties": {
                        "description": "The resource-specific properties for this resource.",
                        "x-ms-client-flatten": true,
                        "type": "object",
                        "properties": {
                          "uuid": {
                            "type": "string",
                            "description": "Globally unique, immutable, non-reusable id.",
                            "readOnly": true
                          },
                          "description": {
                            "type": "string",
                            "description": "Human-readable description of the schema."
                          },
                          "schemaContent": {
                            "type": "string",
                            "description": "Schema content.",
                            "x-ms-mutability": [
                              "read",
                              "create"
                            ]
                          },
                          "hash": {
                            "type": "string",
                            "description": "Hash of the schema content.",
                            "readOnly": true
                          },
                          "provisioningState": {
                            "description": "Provisioning state of the resource.",
                            "readOnly": true,
                            "type": "string",
                            "enum": [
                              "Succeeded",
                              "Failed",
                              "Canceled",
                              "Accepted",
                              "Deleting"
                            ],
                            "x-ms-enum": {
                              "name": "ProvisioningState",
                              "modelAsString": true,
                              "values": [
                                {
                                  "name": "Succeeded",
                                  "value": "Succeeded",
                                  "description": "Resource has been created."
                                },
                                {
                                  "name": "Failed",
                                  "value": "Failed",
                                  "description": "Resource creation failed."
                                },
                                {
                                  "name": "Canceled",
                                  "value": "Canceled",
                                  "description": "Resource creation was canceled."
                                },
                                {
                                  "name": "Accepted",
                                  "value": "Accepted",
                                  "description": "Resource has been accepted by the server."
                                },
                                {
                                  "name": "Deleting",
                                  "value": "Deleting",
                                  "description": "Resource is deleting."
                                }
                              ]
                            }
                          }
                        },
                        "required": [
                          "schemaContent"
                        ]
                      }
                    }
                  }
                },
                "nextLink": {
                  "type": "string",
                  "format": "uri",
                  "description": "The link to the next page of items"
                }
              },
              "required": [
                "value"
              ]
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DeviceRegistry/schemaRegistries/{schemaRegistryName}/schemas/{schemaName}/schemaVersions/{schemaVersionName}": {
      "get": {
        "operationId": "SchemaVersions_Get",
        "tags": [
          "SchemaVersions"
        ],
        "description": "Get a SchemaVersion",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription. The value must be an UUID.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group. The name is case insensitive.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "x-ms-parameter-location": "method"
          },
          {
            "name": "schemaRegistryName",
            "in": "path",
            "description": "Schema registry name parameter.",
            "required": true,
            "type": "string",
            "minLength": 3,
            "maxLength": 63,
            "pattern": "^[a-z0-9][a-z0-9-]*[a-z0-9]$"
          },
          {
            "name": "schemaName",
            "in": "path",
            "description": "Schema name parameter.",
            "required": true,
            "type": "string",
            "minLength": 3,
            "maxLength": 64,
            "pattern": "^[a-z0-9][a-z0-9-]*[a-z0-9]$"
          },
          {
            "name": "schemaVersionName",
            "in": "path",
            "description": "Schema version name parameter.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 10,
            "pattern": "^[0-9]*$"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "type": "object",
              "description": "Schema version's definition.",
              "properties": {
                "id": {
                  "type": "string",
                  "format": "arm-id",
                  "description": "Fully qualified resource ID for the resource. E.g. \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}\"",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "description": "The name of the resource",
                  "readOnly": true
                },
                "type": {
                  "type": "string",
                  "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                  "readOnly": true
                },
                "systemData": {
                  "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                  "readOnly": true,
                  "type": "object",
                  "properties": {
                    "createdBy": {
                      "type": "string",
                      "description": "The identity that created the resource."
                    },
                    "createdByType": {
                      "type": "string",
                      "description": "The type of identity that created the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource creation (UTC)."
                    },
                    "lastModifiedBy": {
                      "type": "string",
                      "description": "The identity that last modified the resource."
                    },
                    "lastModifiedByType": {
                      "type": "string",
                      "description": "The type of identity that last modified the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "lastModifiedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource last modification (UTC)"
                    }
                  }
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "uuid": {
                      "type": "string",
                      "description": "Globally unique, immutable, non-reusable id.",
                      "readOnly": true
                    },
                    "description": {
                      "type": "string",
                      "description": "Human-readable description of the schema."
                    },
                    "schemaContent": {
                      "type": "string",
                      "description": "Schema content.",
                      "x-ms-mutability": [
                        "read",
                        "create"
                      ]
                    },
                    "hash": {
                      "type": "string",
                      "description": "Hash of the schema content.",
                      "readOnly": true
                    },
                    "provisioningState": {
                      "description": "Provisioning state of the resource.",
                      "readOnly": true,
                      "type": "string",
                      "enum": [
                        "Succeeded",
                        "Failed",
                        "Canceled",
                        "Accepted",
                        "Deleting"
                      ],
                      "x-ms-enum": {
                        "name": "ProvisioningState",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Succeeded",
                            "value": "Succeeded",
                            "description": "Resource has been created."
                          },
                          {
                            "name": "Failed",
                            "value": "Failed",
                            "description": "Resource creation failed."
                          },
                          {
                            "name": "Canceled",
                            "value": "Canceled",
                            "description": "Resource creation was canceled."
                          },
                          {
                            "name": "Accepted",
                            "value": "Accepted",
                            "description": "Resource has been accepted by the server."
                          },
                          {
                            "name": "Deleting",
                            "value": "Deleting",
                            "description": "Resource is deleting."
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "schemaContent"
                  ]
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "SchemaVersions_CreateOrReplace",
        "tags": [
          "SchemaVersions"
        ],
        "description": "Create a SchemaVersion",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription. The value must be an UUID.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group. The name is case insensitive.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "x-ms-parameter-location": "method"
          },
          {
            "name": "schemaRegistryName",
            "in": "path",
            "description": "Schema registry name parameter.",
            "required": true,
            "type": "string",
            "minLength": 3,
            "maxLength": 63,
            "pattern": "^[a-z0-9][a-z0-9-]*[a-z0-9]$"
          },
          {
            "name": "schemaName",
            "in": "path",
            "description": "Schema name parameter.",
            "required": true,
            "type": "string",
            "minLength": 3,
            "maxLength": 64,
            "pattern": "^[a-z0-9][a-z0-9-]*[a-z0-9]$"
          },
          {
            "name": "schemaVersionName",
            "in": "path",
            "description": "Schema version name parameter.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 10,
            "pattern": "^[0-9]*$"
          },
          {
            "name": "resource",
            "in": "body",
            "description": "Resource create parameters.",
            "required": true,
            "schema": {
              "type": "object",
              "description": "Schema version's definition.",
              "properties": {
                "id": {
                  "type": "string",
                  "format": "arm-id",
                  "description": "Fully qualified resource ID for the resource. E.g. \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}\"",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "description": "The name of the resource",
                  "readOnly": true
                },
                "type": {
                  "type": "string",
                  "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                  "readOnly": true
                },
                "systemData": {
                  "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                  "readOnly": true,
                  "type": "object",
                  "properties": {
                    "createdBy": {
                      "type": "string",
                      "description": "The identity that created the resource."
                    },
                    "createdByType": {
                      "type": "string",
                      "description": "The type of identity that created the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource creation (UTC)."
                    },
                    "lastModifiedBy": {
                      "type": "string",
                      "description": "The identity that last modified the resource."
                    },
                    "lastModifiedByType": {
                      "type": "string",
                      "description": "The type of identity that last modified the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "lastModifiedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource last modification (UTC)"
                    }
                  }
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "uuid": {
                      "type": "string",
                      "description": "Globally unique, immutable, non-reusable id.",
                      "readOnly": true
                    },
                    "description": {
                      "type": "string",
                      "description": "Human-readable description of the schema."
                    },
                    "schemaContent": {
                      "type": "string",
                      "description": "Schema content.",
                      "x-ms-mutability": [
                        "read",
                        "create"
                      ]
                    },
                    "hash": {
                      "type": "string",
                      "description": "Hash of the schema content.",
                      "readOnly": true
                    },
                    "provisioningState": {
                      "description": "Provisioning state of the resource.",
                      "readOnly": true,
                      "type": "string",
                      "enum": [
                        "Succeeded",
                        "Failed",
                        "Canceled",
                        "Accepted",
                        "Deleting"
                      ],
                      "x-ms-enum": {
                        "name": "ProvisioningState",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Succeeded",
                            "value": "Succeeded",
                            "description": "Resource has been created."
                          },
                          {
                            "name": "Failed",
                            "value": "Failed",
                            "description": "Resource creation failed."
                          },
                          {
                            "name": "Canceled",
                            "value": "Canceled",
                            "description": "Resource creation was canceled."
                          },
                          {
                            "name": "Accepted",
                            "value": "Accepted",
                            "description": "Resource has been accepted by the server."
                          },
                          {
                            "name": "Deleting",
                            "value": "Deleting",
                            "description": "Resource is deleting."
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "schemaContent"
                  ]
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resource 'SchemaVersion' update operation succeeded",
            "schema": {
              "type": "object",
              "description": "Schema version's definition.",
              "properties": {
                "id": {
                  "type": "string",
                  "format": "arm-id",
                  "description": "Fully qualified resource ID for the resource. E.g. \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}\"",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "description": "The name of the resource",
                  "readOnly": true
                },
                "type": {
                  "type": "string",
                  "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                  "readOnly": true
                },
                "systemData": {
                  "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                  "readOnly": true,
                  "type": "object",
                  "properties": {
                    "createdBy": {
                      "type": "string",
                      "description": "The identity that created the resource."
                    },
                    "createdByType": {
                      "type": "string",
                      "description": "The type of identity that created the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource creation (UTC)."
                    },
                    "lastModifiedBy": {
                      "type": "string",
                      "description": "The identity that last modified the resource."
                    },
                    "lastModifiedByType": {
                      "type": "string",
                      "description": "The type of identity that last modified the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "lastModifiedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource last modification (UTC)"
                    }
                  }
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "uuid": {
                      "type": "string",
                      "description": "Globally unique, immutable, non-reusable id.",
                      "readOnly": true
                    },
                    "description": {
                      "type": "string",
                      "description": "Human-readable description of the schema."
                    },
                    "schemaContent": {
                      "type": "string",
                      "description": "Schema content.",
                      "x-ms-mutability": [
                        "read",
                        "create"
                      ]
                    },
                    "hash": {
                      "type": "string",
                      "description": "Hash of the schema content.",
                      "readOnly": true
                    },
                    "provisioningState": {
                      "description": "Provisioning state of the resource.",
                      "readOnly": true,
                      "type": "string",
                      "enum": [
                        "Succeeded",
                        "Failed",
                        "Canceled",
                        "Accepted",
                        "Deleting"
                      ],
                      "x-ms-enum": {
                        "name": "ProvisioningState",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Succeeded",
                            "value": "Succeeded",
                            "description": "Resource has been created."
                          },
                          {
                            "name": "Failed",
                            "value": "Failed",
                            "description": "Resource creation failed."
                          },
                          {
                            "name": "Canceled",
                            "value": "Canceled",
                            "description": "Resource creation was canceled."
                          },
                          {
                            "name": "Accepted",
                            "value": "Accepted",
                            "description": "Resource has been accepted by the server."
                          },
                          {
                            "name": "Deleting",
                            "value": "Deleting",
                            "description": "Resource is deleting."
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "schemaContent"
                  ]
                }
              }
            }
          },
          "201": {
            "description": "Resource 'SchemaVersion' create operation succeeded",
            "schema": {
              "type": "object",
              "description": "Schema version's definition.",
              "properties": {
                "id": {
                  "type": "string",
                  "format": "arm-id",
                  "description": "Fully qualified resource ID for the resource. E.g. \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}\"",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "description": "The name of the resource",
                  "readOnly": true
                },
                "type": {
                  "type": "string",
                  "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                  "readOnly": true
                },
                "systemData": {
                  "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                  "readOnly": true,
                  "type": "object",
                  "properties": {
                    "createdBy": {
                      "type": "string",
                      "description": "The identity that created the resource."
                    },
                    "createdByType": {
                      "type": "string",
                      "description": "The type of identity that created the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource creation (UTC)."
                    },
                    "lastModifiedBy": {
                      "type": "string",
                      "description": "The identity that last modified the resource."
                    },
                    "lastModifiedByType": {
                      "type": "string",
                      "description": "The type of identity that last modified the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "lastModifiedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource last modification (UTC)"
                    }
                  }
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "uuid": {
                      "type": "string",
                      "description": "Globally unique, immutable, non-reusable id.",
                      "readOnly": true
                    },
                    "description": {
                      "type": "string",
                      "description": "Human-readable description of the schema."
                    },
                    "schemaContent": {
                      "type": "string",
                      "description": "Schema content.",
                      "x-ms-mutability": [
                        "read",
                        "create"
                      ]
                    },
                    "hash": {
                      "type": "string",
                      "description": "Hash of the schema content.",
                      "readOnly": true
                    },
                    "provisioningState": {
                      "description": "Provisioning state of the resource.",
                      "readOnly": true,
                      "type": "string",
                      "enum": [
                        "Succeeded",
                        "Failed",
                        "Canceled",
                        "Accepted",
                        "Deleting"
                      ],
                      "x-ms-enum": {
                        "name": "ProvisioningState",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Succeeded",
                            "value": "Succeeded",
                            "description": "Resource has been created."
                          },
                          {
                            "name": "Failed",
                            "value": "Failed",
                            "description": "Resource creation failed."
                          },
                          {
                            "name": "Canceled",
                            "value": "Canceled",
                            "description": "Resource creation was canceled."
                          },
                          {
                            "name": "Accepted",
                            "value": "Accepted",
                            "description": "Resource has been accepted by the server."
                          },
                          {
                            "name": "Deleting",
                            "value": "Deleting",
                            "description": "Resource is deleting."
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "schemaContent"
                  ]
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "SchemaVersions_Delete",
        "tags": [
          "SchemaVersions"
        ],
        "description": "Delete a SchemaVersion",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription. The value must be an UUID.",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group. The name is case insensitive.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "x-ms-parameter-location": "method"
          },
          {
            "name": "schemaRegistryName",
            "in": "path",
            "description": "Schema registry name parameter.",
            "required": true,
            "type": "string",
            "minLength": 3,
            "maxLength": 63,
            "pattern": "^[a-z0-9][a-z0-9-]*[a-z0-9]$"
          },
          {
            "name": "schemaName",
            "in": "path",
            "description": "Schema name parameter.",
            "required": true,
            "type": "string",
            "minLength": 3,
            "maxLength": 64,
            "pattern": "^[a-z0-9][a-z0-9-]*[a-z0-9]$"
          },
          {
            "name": "schemaVersionName",
            "in": "path",
            "description": "Schema version name parameter.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 10,
            "pattern": "^[0-9]*$"
          }
        ],
        "responses": {
          "202": {
            "description": "Resource deletion accepted.",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              },
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "204": {
            "description": "Resource does not exist."
          }
        }
      }
    }
  },
  "definitions": {
    "Asset": {
      "type": "object",
      "description": "Asset definition.",
      "properties": {
        "id": {
          "type": "string",
          "format": "arm-id",
          "description": "Fully qualified resource ID for the resource. E.g. \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}\"",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "The name of the resource",
          "readOnly": true
        },
        "type": {
          "type": "string",
          "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
          "readOnly": true
        },
        "systemData": {
          "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
          "readOnly": true,
          "type": "object",
          "properties": {
            "createdBy": {
              "type": "string",
              "description": "The identity that created the resource."
            },
            "createdByType": {
              "type": "string",
              "description": "The type of identity that created the resource.",
              "enum": [
                "User",
                "Application",
                "ManagedIdentity",
                "Key"
              ],
              "x-ms-enum": {
                "name": "createdByType",
                "modelAsString": true
              }
            },
            "createdAt": {
              "type": "string",
              "format": "date-time",
              "description": "The timestamp of resource creation (UTC)."
            },
            "lastModifiedBy": {
              "type": "string",
              "description": "The identity that last modified the resource."
            },
            "lastModifiedByType": {
              "type": "string",
              "description": "The type of identity that last modified the resource.",
              "enum": [
                "User",
                "Application",
                "ManagedIdentity",
                "Key"
              ],
              "x-ms-enum": {
                "name": "createdByType",
                "modelAsString": true
              }
            },
            "lastModifiedAt": {
              "type": "string",
              "format": "date-time",
              "description": "The timestamp of resource last modification (UTC)"
            }
          }
        },
        "tags": {
          "type": "object",
          "description": "Resource tags.",
          "additionalProperties": {
            "type": "string"
          },
          "x-ms-mutability": [
            "read",
            "create",
            "update"
          ]
        },
        "location": {
          "type": "string",
          "description": "The geo-location where the resource lives",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "properties": {
          "description": "The resource-specific properties for this resource.",
          "x-ms-client-flatten": true,
          "type": "object",
          "properties": {
            "uuid": {
              "type": "string",
              "description": "Globally unique, immutable, non-reusable id.",
              "readOnly": true
            },
            "enabled": {
              "type": "boolean",
              "description": "Enabled/Disabled status of the asset."
            },
            "externalAssetId": {
              "type": "string",
              "description": "Asset id provided by the customer.",
              "x-ms-mutability": [
                "read",
                "create"
              ]
            },
            "displayName": {
              "type": "string",
              "description": "Human-readable display name."
            },
            "description": {
              "type": "string",
              "description": "Human-readable description of the asset."
            },
            "assetEndpointProfileRef": {
              "type": "string",
              "description": "A reference to the asset endpoint profile (connection information) used by brokers to connect to an endpoint that provides data points for this asset. Must provide asset endpoint profile name.",
              "x-ms-mutability": [
                "read",
                "create"
              ]
            },
            "version": {
              "type": "integer",
              "format": "int64",
              "description": "An integer that is incremented each time the resource is modified.",
              "readOnly": true
            },
            "manufacturer": {
              "type": "string",
              "description": "Asset manufacturer name."
            },
            "manufacturerUri": {
              "type": "string",
              "description": "Asset manufacturer URI."
            },
            "model": {
              "type": "string",
              "description": "Asset model name."
            },
            "productCode": {
              "type": "string",
              "description": "Asset product code."
            },
            "hardwareRevision": {
              "type": "string",
              "description": "Revision number of the hardware."
            },
            "softwareRevision": {
              "type": "string",
              "description": "Revision number of the software."
            },
            "documentationUri": {
              "type": "string",
              "description": "Reference to the documentation."
            },
            "serialNumber": {
              "type": "string",
              "description": "Asset serial number."
            },
            "attributes": {
              "type": "object",
              "description": "A set of key-value pairs that contain custom attributes set by the customer.",
              "additionalProperties": {}
            },
            "discoveredAssetRefs": {
              "type": "array",
              "description": "Reference to a list of discovered assets. Populated only if the asset has been created from discovery flow. Discovered asset names must be provided.",
              "items": {
                "type": "string"
              },
              "x-ms-mutability": [
                "read",
                "create"
              ]
            },
            "defaultDatasetsConfiguration": {
              "type": "string",
              "description": "Stringified JSON that contains connector-specific default configuration for all datasets. Each dataset can have its own configuration that overrides the default settings here."
            },
            "defaultEventsConfiguration": {
              "type": "string",
              "description": "Stringified JSON that contains connector-specific default configuration for all events. Each event can have its own configuration that overrides the default settings here."
            },
            "defaultTopic": {
              "description": "Object that describes the default topic information for the asset.",
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "description": "The topic path for messages published to an MQTT broker."
                },
                "retain": {
                  "type": "string",
                  "description": "When set to 'Keep', messages published to an MQTT broker will have the retain flag set. Default: 'Never'.",
                  "default": "Never",
                  "enum": [
                    "Keep",
                    "Never"
                  ],
                  "x-ms-enum": {
                    "name": "TopicRetainType",
                    "modelAsString": true,
                    "values": [
                      {
                        "name": "Keep",
                        "value": "Keep",
                        "description": "Retain the messages."
                      },
                      {
                        "name": "Never",
                        "value": "Never",
                        "description": "Never retain messages."
                      }
                    ]
                  }
                }
              },
              "required": [
                "path"
              ]
            },
            "datasets": {
              "type": "array",
              "description": "Array of datasets that are part of the asset. Each dataset describes the data points that make up the set.",
              "items": {
                "type": "object",
                "description": "Defines the dataset properties.",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of the dataset."
                  },
                  "datasetConfiguration": {
                    "type": "string",
                    "description": "Stringified JSON that contains connector-specific JSON string that describes configuration for the specific dataset."
                  },
                  "topic": {
                    "description": "Object that describes the topic information for the specific dataset.",
                    "type": "object",
                    "properties": {
                      "path": {
                        "type": "string",
                        "description": "The topic path for messages published to an MQTT broker."
                      },
                      "retain": {
                        "type": "string",
                        "description": "When set to 'Keep', messages published to an MQTT broker will have the retain flag set. Default: 'Never'.",
                        "default": "Never",
                        "enum": [
                          "Keep",
                          "Never"
                        ],
                        "x-ms-enum": {
                          "name": "TopicRetainType",
                          "modelAsString": true,
                          "values": [
                            {
                              "name": "Keep",
                              "value": "Keep",
                              "description": "Retain the messages."
                            },
                            {
                              "name": "Never",
                              "value": "Never",
                              "description": "Never retain messages."
                            }
                          ]
                        }
                      }
                    },
                    "required": [
                      "path"
                    ]
                  },
                  "dataPoints": {
                    "type": "array",
                    "description": "Array of data points that are part of the dataset. Each data point can have per-data point configuration.",
                    "items": {
                      "type": "object",
                      "description": "Defines the data point properties.",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "The name of the data point."
                        },
                        "dataSource": {
                          "type": "string",
                          "description": "The address of the source of the data in the asset (e.g. URL) so that a client can access the data source on the asset."
                        },
                        "dataPointConfiguration": {
                          "type": "string",
                          "description": "Stringified JSON that contains connector-specific configuration for the data point. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize."
                        },
                        "observabilityMode": {
                          "type": "string",
                          "description": "An indication of how the data point should be mapped to OpenTelemetry.",
                          "default": "None",
                          "enum": [
                            "None",
                            "Counter",
                            "Gauge",
                            "Histogram",
                            "Log"
                          ],
                          "x-ms-enum": {
                            "name": "DataPointObservabilityMode",
                            "modelAsString": true,
                            "values": [
                              {
                                "name": "None",
                                "value": "None",
                                "description": "No mapping to OpenTelemetry."
                              },
                              {
                                "name": "Counter",
                                "value": "Counter",
                                "description": "Map as counter to OpenTelemetry."
                              },
                              {
                                "name": "Gauge",
                                "value": "Gauge",
                                "description": "Map as gauge to OpenTelemetry."
                              },
                              {
                                "name": "Histogram",
                                "value": "Histogram",
                                "description": "Map as histogram to OpenTelemetry."
                              },
                              {
                                "name": "Log",
                                "value": "Log",
                                "description": "Map as log to OpenTelemetry."
                              }
                            ]
                          }
                        }
                      }
                    },
                    "x-ms-identifiers": []
                  }
                },
                "required": [
                  "name"
                ]
              },
              "x-ms-identifiers": []
            },
            "events": {
              "type": "array",
              "description": "Array of events that are part of the asset. Each event can have per-event configuration.",
              "items": {
                "type": "object",
                "description": "Defines the event properties.",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the event."
                  },
                  "eventNotifier": {
                    "type": "string",
                    "description": "The address of the notifier of the event in the asset (e.g. URL) so that a client can access the event on the asset."
                  },
                  "eventConfiguration": {
                    "type": "string",
                    "description": "Stringified JSON that contains connector-specific configuration for the event. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize."
                  },
                  "topic": {
                    "description": "Object that describes the topic information for the specific event.",
                    "type": "object",
                    "properties": {
                      "path": {
                        "type": "string",
                        "description": "The topic path for messages published to an MQTT broker."
                      },
                      "retain": {
                        "type": "string",
                        "description": "When set to 'Keep', messages published to an MQTT broker will have the retain flag set. Default: 'Never'.",
                        "default": "Never",
                        "enum": [
                          "Keep",
                          "Never"
                        ],
                        "x-ms-enum": {
                          "name": "TopicRetainType",
                          "modelAsString": true,
                          "values": [
                            {
                              "name": "Keep",
                              "value": "Keep",
                              "description": "Retain the messages."
                            },
                            {
                              "name": "Never",
                              "value": "Never",
                              "description": "Never retain messages."
                            }
                          ]
                        }
                      }
                    },
                    "required": [
                      "path"
                    ]
                  },
                  "observabilityMode": {
                    "type": "string",
                    "description": "An indication of how the event should be mapped to OpenTelemetry.",
                    "default": "None",
                    "enum": [
                      "None",
                      "Log"
                    ],
                    "x-ms-enum": {
                      "name": "EventObservabilityMode",
                      "modelAsString": true,
                      "values": [
                        {
                          "name": "None",
                          "value": "None",
                          "description": "No mapping to OpenTelemetry."
                        },
                        {
                          "name": "Log",
                          "value": "Log",
                          "description": "Map as log to OpenTelemetry."
                        }
                      ]
                    }
                  }
                }
              },
              "x-ms-identifiers": []
            },
            "status": {
              "description": "Read only object to reflect changes that have occurred on the Edge. Similar to Kubernetes status property for custom resources.",
              "readOnly": true,
              "type": "object",
              "properties": {
                "errors": {
                  "type": "array",
                  "description": "Array object to transfer and persist errors that originate from the Edge.",
                  "items": {
                    "type": "object",
                    "description": "Defines the asset status error properties.",
                    "properties": {
                      "code": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Error code for classification of errors (ex: 400, 404, 500, etc.).",
                        "readOnly": true
                      },
                      "message": {
                        "type": "string",
                        "description": "Human readable helpful error message to provide additional context for error (ex: “capability Id 'foo' does not exist”).",
                        "readOnly": true
                      }
                    }
                  },
                  "readOnly": true,
                  "x-ms-identifiers": []
                },
                "version": {
                  "type": "integer",
                  "format": "int64",
                  "description": "A read only incremental counter indicating the number of times the configuration has been modified from the perspective of the current actual (Edge) state of the Asset. Edge would be the only writer of this value and would sync back up to the cloud. In steady state, this should equal version.",
                  "readOnly": true
                },
                "datasets": {
                  "type": "array",
                  "description": "Array of dataset statuses that describe the status of each dataset.",
                  "items": {
                    "type": "object",
                    "description": "Defines the asset status dataset properties.",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "The name of the dataset. Must be unique within the status.datasets array. This name is used to correlate between the spec and status dataset information.",
                        "readOnly": true
                      },
                      "messageSchemaReference": {
                        "description": "The message schema reference object.",
                        "readOnly": true,
                        "type": "object",
                        "properties": {
                          "schemaRegistryNamespace": {
                            "type": "string",
                            "description": "The message schema registry namespace.",
                            "readOnly": true
                          },
                          "schemaName": {
                            "type": "string",
                            "description": "The message schema name.",
                            "readOnly": true
                          },
                          "schemaVersion": {
                            "type": "string",
                            "description": "The message schema version.",
                            "readOnly": true
                          }
                        },
                        "required": [
                          "schemaRegistryNamespace",
                          "schemaName",
                          "schemaVersion"
                        ]
                      }
                    },
                    "required": [
                      "name"
                    ]
                  },
                  "readOnly": true,
                  "x-ms-identifiers": []
                },
                "events": {
                  "type": "array",
                  "description": "Array of event statuses that describe the status of each event.",
                  "items": {
                    "type": "object",
                    "description": "Defines the asset status event properties.",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "The name of the event. Must be unique within the status.events array. This name is used to correlate between the spec and status event information.",
                        "readOnly": true
                      },
                      "messageSchemaReference": {
                        "description": "The message schema reference object.",
                        "readOnly": true,
                        "type": "object",
                        "properties": {
                          "schemaRegistryNamespace": {
                            "type": "string",
                            "description": "The message schema registry namespace.",
                            "readOnly": true
                          },
                          "schemaName": {
                            "type": "string",
                            "description": "The message schema name.",
                            "readOnly": true
                          },
                          "schemaVersion": {
                            "type": "string",
                            "description": "The message schema version.",
                            "readOnly": true
                          }
                        },
                        "required": [
                          "schemaRegistryNamespace",
                          "schemaName",
                          "schemaVersion"
                        ]
                      }
                    },
                    "required": [
                      "name"
                    ]
                  },
                  "readOnly": true,
                  "x-ms-identifiers": []
                }
              }
            },
            "provisioningState": {
              "description": "Provisioning state of the resource.",
              "readOnly": true,
              "type": "string",
              "enum": [
                "Succeeded",
                "Failed",
                "Canceled",
                "Accepted",
                "Deleting"
              ],
              "x-ms-enum": {
                "name": "ProvisioningState",
                "modelAsString": true,
                "values": [
                  {
                    "name": "Succeeded",
                    "value": "Succeeded",
                    "description": "Resource has been created."
                  },
                  {
                    "name": "Failed",
                    "value": "Failed",
                    "description": "Resource creation failed."
                  },
                  {
                    "name": "Canceled",
                    "value": "Canceled",
                    "description": "Resource creation was canceled."
                  },
                  {
                    "name": "Accepted",
                    "value": "Accepted",
                    "description": "Resource has been accepted by the server."
                  },
                  {
                    "name": "Deleting",
                    "value": "Deleting",
                    "description": "Resource is deleting."
                  }
                ]
              }
            }
          },
          "required": [
            "assetEndpointProfileRef"
          ]
        },
        "extendedLocation": {
          "description": "The extended location.",
          "x-ms-mutability": [
            "read",
            "create"
          ],
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "description": "The extended location type."
            },
            "name": {
              "type": "string",
              "description": "The extended location name."
            }
          },
          "required": [
            "type",
            "name"
          ]
        }
      },
      "required": [
        "extendedLocation"
      ]
    },
    "AssetEndpointProfile": {
      "type": "object",
      "description": "Asset Endpoint Profile definition.",
      "properties": {
        "id": {
          "type": "string",
          "format": "arm-id",
          "description": "Fully qualified resource ID for the resource. E.g. \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}\"",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "The name of the resource",
          "readOnly": true
        },
        "type": {
          "type": "string",
          "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
          "readOnly": true
        },
        "systemData": {
          "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
          "readOnly": true,
          "type": "object",
          "properties": {
            "createdBy": {
              "type": "string",
              "description": "The identity that created the resource."
            },
            "createdByType": {
              "type": "string",
              "description": "The type of identity that created the resource.",
              "enum": [
                "User",
                "Application",
                "ManagedIdentity",
                "Key"
              ],
              "x-ms-enum": {
                "name": "createdByType",
                "modelAsString": true
              }
            },
            "createdAt": {
              "type": "string",
              "format": "date-time",
              "description": "The timestamp of resource creation (UTC)."
            },
            "lastModifiedBy": {
              "type": "string",
              "description": "The identity that last modified the resource."
            },
            "lastModifiedByType": {
              "type": "string",
              "description": "The type of identity that last modified the resource.",
              "enum": [
                "User",
                "Application",
                "ManagedIdentity",
                "Key"
              ],
              "x-ms-enum": {
                "name": "createdByType",
                "modelAsString": true
              }
            },
            "lastModifiedAt": {
              "type": "string",
              "format": "date-time",
              "description": "The timestamp of resource last modification (UTC)"
            }
          }
        },
        "tags": {
          "type": "object",
          "description": "Resource tags.",
          "additionalProperties": {
            "type": "string"
          },
          "x-ms-mutability": [
            "read",
            "create",
            "update"
          ]
        },
        "location": {
          "type": "string",
          "description": "The geo-location where the resource lives",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "properties": {
          "description": "The resource-specific properties for this resource.",
          "x-ms-client-flatten": true,
          "type": "object",
          "properties": {
            "uuid": {
              "type": "string",
              "description": "Globally unique, immutable, non-reusable id.",
              "readOnly": true
            },
            "targetAddress": {
              "type": "string",
              "format": "uri",
              "description": "The local valid URI specifying the network address/DNS name of a southbound device. The scheme part of the targetAddress URI specifies the type of the device. The additionalConfiguration field holds further connector type specific configuration."
            },
            "endpointProfileType": {
              "type": "string",
              "description": "Defines the configuration for the connector type that is being used with the endpoint profile."
            },
            "authentication": {
              "description": "Defines the client authentication mechanism to the server.",
              "type": "object",
              "properties": {
                "method": {
                  "type": "string",
                  "description": "Defines the method to authenticate the user of the client at the server.",
                  "default": "Certificate",
                  "enum": [
                    "Anonymous",
                    "Certificate",
                    "UsernamePassword"
                  ],
                  "x-ms-enum": {
                    "name": "AuthenticationMethod",
                    "modelAsString": true,
                    "values": [
                      {
                        "name": "Anonymous",
                        "value": "Anonymous",
                        "description": "The user authentication method is anonymous."
                      },
                      {
                        "name": "Certificate",
                        "value": "Certificate",
                        "description": "The user authentication method is an x509 certificate."
                      },
                      {
                        "name": "UsernamePassword",
                        "value": "UsernamePassword",
                        "description": "The user authentication method is a username and password."
                      }
                    ]
                  }
                },
                "usernamePasswordCredentials": {
                  "description": "Defines the username and password references when UsernamePassword user authentication mode is selected.",
                  "type": "object",
                  "properties": {
                    "usernameSecretName": {
                      "type": "string",
                      "description": "The name of the secret containing the username."
                    },
                    "passwordSecretName": {
                      "type": "string",
                      "description": "The name of the secret containing the password."
                    }
                  },
                  "required": [
                    "usernameSecretName",
                    "passwordSecretName"
                  ]
                },
                "x509Credentials": {
                  "description": "Defines the certificate reference when Certificate user authentication mode is selected.",
                  "type": "object",
                  "properties": {
                    "certificateSecretName": {
                      "type": "string",
                      "description": "The name of the secret containing the certificate and private key (e.g. stored as .der/.pem or .der/.pfx)."
                    }
                  },
                  "required": [
                    "certificateSecretName"
                  ]
                }
              },
              "required": [
                "method"
              ]
            },
            "additionalConfiguration": {
              "type": "string",
              "description": "Stringified JSON that contains connectivity type specific further configuration (e.g. OPC UA, Modbus, ONVIF)."
            },
            "discoveredAssetEndpointProfileRef": {
              "type": "string",
              "description": "Reference to a discovered asset endpoint profile. Populated only if the asset endpoint profile has been created from discovery flow. Discovered asset endpoint profile name must be provided.",
              "x-ms-mutability": [
                "read",
                "create"
              ]
            },
            "status": {
              "description": "Read only object to reflect changes that have occurred on the Edge. Similar to Kubernetes status property for custom resources.",
              "readOnly": true,
              "type": "object",
              "properties": {
                "errors": {
                  "type": "array",
                  "description": "Array object to transfer and persist errors that originate from the Edge.",
                  "items": {
                    "type": "object",
                    "description": "Defines the asset endpoint profile status error properties.",
                    "properties": {
                      "code": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Error code for classification of errors (ex: 400, 404, 500, etc.).",
                        "readOnly": true
                      },
                      "message": {
                        "type": "string",
                        "description": "Human readable helpful error message to provide additional context for error (ex: “targetAddress 'foo' is not a valid url”).",
                        "readOnly": true
                      }
                    }
                  },
                  "readOnly": true,
                  "x-ms-identifiers": []
                }
              }
            },
            "provisioningState": {
              "description": "Provisioning state of the resource.",
              "readOnly": true,
              "type": "string",
              "enum": [
                "Succeeded",
                "Failed",
                "Canceled",
                "Accepted",
                "Deleting"
              ],
              "x-ms-enum": {
                "name": "ProvisioningState",
                "modelAsString": true,
                "values": [
                  {
                    "name": "Succeeded",
                    "value": "Succeeded",
                    "description": "Resource has been created."
                  },
                  {
                    "name": "Failed",
                    "value": "Failed",
                    "description": "Resource creation failed."
                  },
                  {
                    "name": "Canceled",
                    "value": "Canceled",
                    "description": "Resource creation was canceled."
                  },
                  {
                    "name": "Accepted",
                    "value": "Accepted",
                    "description": "Resource has been accepted by the server."
                  },
                  {
                    "name": "Deleting",
                    "value": "Deleting",
                    "description": "Resource is deleting."
                  }
                ]
              }
            }
          },
          "required": [
            "targetAddress",
            "endpointProfileType"
          ]
        },
        "extendedLocation": {
          "description": "The extended location.",
          "x-ms-mutability": [
            "read",
            "create"
          ],
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "description": "The extended location type."
            },
            "name": {
              "type": "string",
              "description": "The extended location name."
            }
          },
          "required": [
            "type",
            "name"
          ]
        }
      },
      "required": [
        "extendedLocation"
      ]
    },
    "AssetEndpointProfileListResult": {
      "type": "object",
      "description": "The response of a AssetEndpointProfile list operation.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The AssetEndpointProfile items on this page",
          "items": {
            "type": "object",
            "description": "Asset Endpoint Profile definition.",
            "properties": {
              "id": {
                "type": "string",
                "format": "arm-id",
                "description": "Fully qualified resource ID for the resource. E.g. \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}\"",
                "readOnly": true
              },
              "name": {
                "type": "string",
                "description": "The name of the resource",
                "readOnly": true
              },
              "type": {
                "type": "string",
                "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                "readOnly": true
              },
              "systemData": {
                "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                "readOnly": true,
                "type": "object",
                "properties": {
                  "createdBy": {
                    "type": "string",
                    "description": "The identity that created the resource."
                  },
                  "createdByType": {
                    "type": "string",
                    "description": "The type of identity that created the resource.",
                    "enum": [
                      "User",
                      "Application",
                      "ManagedIdentity",
                      "Key"
                    ],
                    "x-ms-enum": {
                      "name": "createdByType",
                      "modelAsString": true
                    }
                  },
                  "createdAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp of resource creation (UTC)."
                  },
                  "lastModifiedBy": {
                    "type": "string",
                    "description": "The identity that last modified the resource."
                  },
                  "lastModifiedByType": {
                    "type": "string",
                    "description": "The type of identity that last modified the resource.",
                    "enum": [
                      "User",
                      "Application",
                      "ManagedIdentity",
                      "Key"
                    ],
                    "x-ms-enum": {
                      "name": "createdByType",
                      "modelAsString": true
                    }
                  },
                  "lastModifiedAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp of resource last modification (UTC)"
                  }
                }
              },
              "tags": {
                "type": "object",
                "description": "Resource tags.",
                "additionalProperties": {
                  "type": "string"
                },
                "x-ms-mutability": [
                  "read",
                  "create",
                  "update"
                ]
              },
              "location": {
                "type": "string",
                "description": "The geo-location where the resource lives",
                "x-ms-mutability": [
                  "read",
                  "create"
                ]
              },
              "properties": {
                "description": "The resource-specific properties for this resource.",
                "x-ms-client-flatten": true,
                "type": "object",
                "properties": {
                  "uuid": {
                    "type": "string",
                    "description": "Globally unique, immutable, non-reusable id.",
                    "readOnly": true
                  },
                  "targetAddress": {
                    "type": "string",
                    "format": "uri",
                    "description": "The local valid URI specifying the network address/DNS name of a southbound device. The scheme part of the targetAddress URI specifies the type of the device. The additionalConfiguration field holds further connector type specific configuration."
                  },
                  "endpointProfileType": {
                    "type": "string",
                    "description": "Defines the configuration for the connector type that is being used with the endpoint profile."
                  },
                  "authentication": {
                    "description": "Defines the client authentication mechanism to the server.",
                    "type": "object",
                    "properties": {
                      "method": {
                        "type": "string",
                        "description": "Defines the method to authenticate the user of the client at the server.",
                        "default": "Certificate",
                        "enum": [
                          "Anonymous",
                          "Certificate",
                          "UsernamePassword"
                        ],
                        "x-ms-enum": {
                          "name": "AuthenticationMethod",
                          "modelAsString": true,
                          "values": [
                            {
                              "name": "Anonymous",
                              "value": "Anonymous",
                              "description": "The user authentication method is anonymous."
                            },
                            {
                              "name": "Certificate",
                              "value": "Certificate",
                              "description": "The user authentication method is an x509 certificate."
                            },
                            {
                              "name": "UsernamePassword",
                              "value": "UsernamePassword",
                              "description": "The user authentication method is a username and password."
                            }
                          ]
                        }
                      },
                      "usernamePasswordCredentials": {
                        "description": "Defines the username and password references when UsernamePassword user authentication mode is selected.",
                        "type": "object",
                        "properties": {
                          "usernameSecretName": {
                            "type": "string",
                            "description": "The name of the secret containing the username."
                          },
                          "passwordSecretName": {
                            "type": "string",
                            "description": "The name of the secret containing the password."
                          }
                        },
                        "required": [
                          "usernameSecretName",
                          "passwordSecretName"
                        ]
                      },
                      "x509Credentials": {
                        "description": "Defines the certificate reference when Certificate user authentication mode is selected.",
                        "type": "object",
                        "properties": {
                          "certificateSecretName": {
                            "type": "string",
                            "description": "The name of the secret containing the certificate and private key (e.g. stored as .der/.pem or .der/.pfx)."
                          }
                        },
                        "required": [
                          "certificateSecretName"
                        ]
                      }
                    },
                    "required": [
                      "method"
                    ]
                  },
                  "additionalConfiguration": {
                    "type": "string",
                    "description": "Stringified JSON that contains connectivity type specific further configuration (e.g. OPC UA, Modbus, ONVIF)."
                  },
                  "discoveredAssetEndpointProfileRef": {
                    "type": "string",
                    "description": "Reference to a discovered asset endpoint profile. Populated only if the asset endpoint profile has been created from discovery flow. Discovered asset endpoint profile name must be provided.",
                    "x-ms-mutability": [
                      "read",
                      "create"
                    ]
                  },
                  "status": {
                    "description": "Read only object to reflect changes that have occurred on the Edge. Similar to Kubernetes status property for custom resources.",
                    "readOnly": true,
                    "type": "object",
                    "properties": {
                      "errors": {
                        "type": "array",
                        "description": "Array object to transfer and persist errors that originate from the Edge.",
                        "items": {
                          "type": "object",
                          "description": "Defines the asset endpoint profile status error properties.",
                          "properties": {
                            "code": {
                              "type": "integer",
                              "format": "int32",
                              "description": "Error code for classification of errors (ex: 400, 404, 500, etc.).",
                              "readOnly": true
                            },
                            "message": {
                              "type": "string",
                              "description": "Human readable helpful error message to provide additional context for error (ex: “targetAddress 'foo' is not a valid url”).",
                              "readOnly": true
                            }
                          }
                        },
                        "readOnly": true,
                        "x-ms-identifiers": []
                      }
                    }
                  },
                  "provisioningState": {
                    "description": "Provisioning state of the resource.",
                    "readOnly": true,
                    "type": "string",
                    "enum": [
                      "Succeeded",
                      "Failed",
                      "Canceled",
                      "Accepted",
                      "Deleting"
                    ],
                    "x-ms-enum": {
                      "name": "ProvisioningState",
                      "modelAsString": true,
                      "values": [
                        {
                          "name": "Succeeded",
                          "value": "Succeeded",
                          "description": "Resource has been created."
                        },
                        {
                          "name": "Failed",
                          "value": "Failed",
                          "description": "Resource creation failed."
                        },
                        {
                          "name": "Canceled",
                          "value": "Canceled",
                          "description": "Resource creation was canceled."
                        },
                        {
                          "name": "Accepted",
                          "value": "Accepted",
                          "description": "Resource has been accepted by the server."
                        },
                        {
                          "name": "Deleting",
                          "value": "Deleting",
                          "description": "Resource is deleting."
                        }
                      ]
                    }
                  }
                },
                "required": [
                  "targetAddress",
                  "endpointProfileType"
                ]
              },
              "extendedLocation": {
                "description": "The extended location.",
                "x-ms-mutability": [
                  "read",
                  "create"
                ],
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "description": "The extended location type."
                  },
                  "name": {
                    "type": "string",
                    "description": "The extended location name."
                  }
                },
                "required": [
                  "type",
                  "name"
                ]
              }
            },
            "required": [
              "extendedLocation"
            ]
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "AssetEndpointProfileProperties": {
      "type": "object",
      "description": "Defines the Asset Endpoint Profile properties.",
      "properties": {
        "uuid": {
          "type": "string",
          "description": "Globally unique, immutable, non-reusable id.",
          "readOnly": true
        },
        "targetAddress": {
          "type": "string",
          "format": "uri",
          "description": "The local valid URI specifying the network address/DNS name of a southbound device. The scheme part of the targetAddress URI specifies the type of the device. The additionalConfiguration field holds further connector type specific configuration."
        },
        "endpointProfileType": {
          "type": "string",
          "description": "Defines the configuration for the connector type that is being used with the endpoint profile."
        },
        "authentication": {
          "description": "Defines the client authentication mechanism to the server.",
          "type": "object",
          "properties": {
            "method": {
              "type": "string",
              "description": "Defines the method to authenticate the user of the client at the server.",
              "default": "Certificate",
              "enum": [
                "Anonymous",
                "Certificate",
                "UsernamePassword"
              ],
              "x-ms-enum": {
                "name": "AuthenticationMethod",
                "modelAsString": true,
                "values": [
                  {
                    "name": "Anonymous",
                    "value": "Anonymous",
                    "description": "The user authentication method is anonymous."
                  },
                  {
                    "name": "Certificate",
                    "value": "Certificate",
                    "description": "The user authentication method is an x509 certificate."
                  },
                  {
                    "name": "UsernamePassword",
                    "value": "UsernamePassword",
                    "description": "The user authentication method is a username and password."
                  }
                ]
              }
            },
            "usernamePasswordCredentials": {
              "description": "Defines the username and password references when UsernamePassword user authentication mode is selected.",
              "type": "object",
              "properties": {
                "usernameSecretName": {
                  "type": "string",
                  "description": "The name of the secret containing the username."
                },
                "passwordSecretName": {
                  "type": "string",
                  "description": "The name of the secret containing the password."
                }
              },
              "required": [
                "usernameSecretName",
                "passwordSecretName"
              ]
            },
            "x509Credentials": {
              "description": "Defines the certificate reference when Certificate user authentication mode is selected.",
              "type": "object",
              "properties": {
                "certificateSecretName": {
                  "type": "string",
                  "description": "The name of the secret containing the certificate and private key (e.g. stored as .der/.pem or .der/.pfx)."
                }
              },
              "required": [
                "certificateSecretName"
              ]
            }
          },
          "required": [
            "method"
          ]
        },
        "additionalConfiguration": {
          "type": "string",
          "description": "Stringified JSON that contains connectivity type specific further configuration (e.g. OPC UA, Modbus, ONVIF)."
        },
        "discoveredAssetEndpointProfileRef": {
          "type": "string",
          "description": "Reference to a discovered asset endpoint profile. Populated only if the asset endpoint profile has been created from discovery flow. Discovered asset endpoint profile name must be provided.",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "status": {
          "description": "Read only object to reflect changes that have occurred on the Edge. Similar to Kubernetes status property for custom resources.",
          "readOnly": true,
          "type": "object",
          "properties": {
            "errors": {
              "type": "array",
              "description": "Array object to transfer and persist errors that originate from the Edge.",
              "items": {
                "type": "object",
                "description": "Defines the asset endpoint profile status error properties.",
                "properties": {
                  "code": {
                    "type": "integer",
                    "format": "int32",
                    "description": "Error code for classification of errors (ex: 400, 404, 500, etc.).",
                    "readOnly": true
                  },
                  "message": {
                    "type": "string",
                    "description": "Human readable helpful error message to provide additional context for error (ex: “targetAddress 'foo' is not a valid url”).",
                    "readOnly": true
                  }
                }
              },
              "readOnly": true,
              "x-ms-identifiers": []
            }
          }
        },
        "provisioningState": {
          "description": "Provisioning state of the resource.",
          "readOnly": true,
          "type": "string",
          "enum": [
            "Succeeded",
            "Failed",
            "Canceled",
            "Accepted",
            "Deleting"
          ],
          "x-ms-enum": {
            "name": "ProvisioningState",
            "modelAsString": true,
            "values": [
              {
                "name": "Succeeded",
                "value": "Succeeded",
                "description": "Resource has been created."
              },
              {
                "name": "Failed",
                "value": "Failed",
                "description": "Resource creation failed."
              },
              {
                "name": "Canceled",
                "value": "Canceled",
                "description": "Resource creation was canceled."
              },
              {
                "name": "Accepted",
                "value": "Accepted",
                "description": "Resource has been accepted by the server."
              },
              {
                "name": "Deleting",
                "value": "Deleting",
                "description": "Resource is deleting."
              }
            ]
          }
        }
      },
      "required": [
        "targetAddress",
        "endpointProfileType"
      ]
    },
    "AssetEndpointProfileStatus": {
      "type": "object",
      "description": "Defines the asset endpoint profile status properties.",
      "properties": {
        "errors": {
          "type": "array",
          "description": "Array object to transfer and persist errors that originate from the Edge.",
          "items": {
            "type": "object",
            "description": "Defines the asset endpoint profile status error properties.",
            "properties": {
              "code": {
                "type": "integer",
                "format": "int32",
                "description": "Error code for classification of errors (ex: 400, 404, 500, etc.).",
                "readOnly": true
              },
              "message": {
                "type": "string",
                "description": "Human readable helpful error message to provide additional context for error (ex: “targetAddress 'foo' is not a valid url”).",
                "readOnly": true
              }
            }
          },
          "readOnly": true,
          "x-ms-identifiers": []
        }
      }
    },
    "AssetEndpointProfileStatusError": {
      "type": "object",
      "description": "Defines the asset endpoint profile status error properties.",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32",
          "description": "Error code for classification of errors (ex: 400, 404, 500, etc.).",
          "readOnly": true
        },
        "message": {
          "type": "string",
          "description": "Human readable helpful error message to provide additional context for error (ex: “targetAddress 'foo' is not a valid url”).",
          "readOnly": true
        }
      }
    },
    "AssetEndpointProfileUpdate": {
      "type": "object",
      "description": "The type used for update operations of the AssetEndpointProfile.",
      "properties": {
        "tags": {
          "type": "object",
          "description": "Resource tags.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "properties": {
          "description": "The resource-specific properties for this resource.",
          "x-ms-client-flatten": true,
          "type": "object",
          "properties": {
            "targetAddress": {
              "type": "string",
              "format": "uri",
              "description": "The local valid URI specifying the network address/DNS name of a southbound device. The scheme part of the targetAddress URI specifies the type of the device. The additionalConfiguration field holds further connector type specific configuration."
            },
            "endpointProfileType": {
              "type": "string",
              "description": "Defines the configuration for the connector type that is being used with the endpoint profile."
            },
            "authentication": {
              "description": "Defines the client authentication mechanism to the server.",
              "type": "object",
              "properties": {
                "method": {
                  "type": "string",
                  "description": "Defines the method to authenticate the user of the client at the server.",
                  "default": "Certificate",
                  "enum": [
                    "Anonymous",
                    "Certificate",
                    "UsernamePassword"
                  ],
                  "x-ms-enum": {
                    "name": "AuthenticationMethod",
                    "modelAsString": true,
                    "values": [
                      {
                        "name": "Anonymous",
                        "value": "Anonymous",
                        "description": "The user authentication method is anonymous."
                      },
                      {
                        "name": "Certificate",
                        "value": "Certificate",
                        "description": "The user authentication method is an x509 certificate."
                      },
                      {
                        "name": "UsernamePassword",
                        "value": "UsernamePassword",
                        "description": "The user authentication method is a username and password."
                      }
                    ]
                  }
                },
                "usernamePasswordCredentials": {
                  "description": "Defines the username and password references when UsernamePassword user authentication mode is selected.",
                  "type": "object",
                  "properties": {
                    "usernameSecretName": {
                      "type": "string",
                      "description": "The name of the secret containing the username."
                    },
                    "passwordSecretName": {
                      "type": "string",
                      "description": "The name of the secret containing the password."
                    }
                  }
                },
                "x509Credentials": {
                  "description": "Defines the certificate reference when Certificate user authentication mode is selected.",
                  "type": "object",
                  "properties": {
                    "certificateSecretName": {
                      "type": "string",
                      "description": "The name of the secret containing the certificate and private key (e.g. stored as .der/.pem or .der/.pfx)."
                    }
                  }
                }
              }
            },
            "additionalConfiguration": {
              "type": "string",
              "description": "Stringified JSON that contains connectivity type specific further configuration (e.g. OPC UA, Modbus, ONVIF)."
            }
          }
        }
      }
    },
    "AssetEndpointProfileUpdateProperties": {
      "type": "object",
      "description": "The updatable properties of the AssetEndpointProfile.",
      "properties": {
        "targetAddress": {
          "type": "string",
          "format": "uri",
          "description": "The local valid URI specifying the network address/DNS name of a southbound device. The scheme part of the targetAddress URI specifies the type of the device. The additionalConfiguration field holds further connector type specific configuration."
        },
        "endpointProfileType": {
          "type": "string",
          "description": "Defines the configuration for the connector type that is being used with the endpoint profile."
        },
        "authentication": {
          "description": "Defines the client authentication mechanism to the server.",
          "type": "object",
          "properties": {
            "method": {
              "type": "string",
              "description": "Defines the method to authenticate the user of the client at the server.",
              "default": "Certificate",
              "enum": [
                "Anonymous",
                "Certificate",
                "UsernamePassword"
              ],
              "x-ms-enum": {
                "name": "AuthenticationMethod",
                "modelAsString": true,
                "values": [
                  {
                    "name": "Anonymous",
                    "value": "Anonymous",
                    "description": "The user authentication method is anonymous."
                  },
                  {
                    "name": "Certificate",
                    "value": "Certificate",
                    "description": "The user authentication method is an x509 certificate."
                  },
                  {
                    "name": "UsernamePassword",
                    "value": "UsernamePassword",
                    "description": "The user authentication method is a username and password."
                  }
                ]
              }
            },
            "usernamePasswordCredentials": {
              "description": "Defines the username and password references when UsernamePassword user authentication mode is selected.",
              "type": "object",
              "properties": {
                "usernameSecretName": {
                  "type": "string",
                  "description": "The name of the secret containing the username."
                },
                "passwordSecretName": {
                  "type": "string",
                  "description": "The name of the secret containing the password."
                }
              }
            },
            "x509Credentials": {
              "description": "Defines the certificate reference when Certificate user authentication mode is selected.",
              "type": "object",
              "properties": {
                "certificateSecretName": {
                  "type": "string",
                  "description": "The name of the secret containing the certificate and private key (e.g. stored as .der/.pem or .der/.pfx)."
                }
              }
            }
          }
        },
        "additionalConfiguration": {
          "type": "string",
          "description": "Stringified JSON that contains connectivity type specific further configuration (e.g. OPC UA, Modbus, ONVIF)."
        }
      }
    },
    "AssetListResult": {
      "type": "object",
      "description": "The response of a Asset list operation.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The Asset items on this page",
          "items": {
            "type": "object",
            "description": "Asset definition.",
            "properties": {
              "id": {
                "type": "string",
                "format": "arm-id",
                "description": "Fully qualified resource ID for the resource. E.g. \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}\"",
                "readOnly": true
              },
              "name": {
                "type": "string",
                "description": "The name of the resource",
                "readOnly": true
              },
              "type": {
                "type": "string",
                "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                "readOnly": true
              },
              "systemData": {
                "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                "readOnly": true,
                "type": "object",
                "properties": {
                  "createdBy": {
                    "type": "string",
                    "description": "The identity that created the resource."
                  },
                  "createdByType": {
                    "type": "string",
                    "description": "The type of identity that created the resource.",
                    "enum": [
                      "User",
                      "Application",
                      "ManagedIdentity",
                      "Key"
                    ],
                    "x-ms-enum": {
                      "name": "createdByType",
                      "modelAsString": true
                    }
                  },
                  "createdAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp of resource creation (UTC)."
                  },
                  "lastModifiedBy": {
                    "type": "string",
                    "description": "The identity that last modified the resource."
                  },
                  "lastModifiedByType": {
                    "type": "string",
                    "description": "The type of identity that last modified the resource.",
                    "enum": [
                      "User",
                      "Application",
                      "ManagedIdentity",
                      "Key"
                    ],
                    "x-ms-enum": {
                      "name": "createdByType",
                      "modelAsString": true
                    }
                  },
                  "lastModifiedAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp of resource last modification (UTC)"
                  }
                }
              },
              "tags": {
                "type": "object",
                "description": "Resource tags.",
                "additionalProperties": {
                  "type": "string"
                },
                "x-ms-mutability": [
                  "read",
                  "create",
                  "update"
                ]
              },
              "location": {
                "type": "string",
                "description": "The geo-location where the resource lives",
                "x-ms-mutability": [
                  "read",
                  "create"
                ]
              },
              "properties": {
                "description": "The resource-specific properties for this resource.",
                "x-ms-client-flatten": true,
                "type": "object",
                "properties": {
                  "uuid": {
                    "type": "string",
                    "description": "Globally unique, immutable, non-reusable id.",
                    "readOnly": true
                  },
                  "enabled": {
                    "type": "boolean",
                    "description": "Enabled/Disabled status of the asset."
                  },
                  "externalAssetId": {
                    "type": "string",
                    "description": "Asset id provided by the customer.",
                    "x-ms-mutability": [
                      "read",
                      "create"
                    ]
                  },
                  "displayName": {
                    "type": "string",
                    "description": "Human-readable display name."
                  },
                  "description": {
                    "type": "string",
                    "description": "Human-readable description of the asset."
                  },
                  "assetEndpointProfileRef": {
                    "type": "string",
                    "description": "A reference to the asset endpoint profile (connection information) used by brokers to connect to an endpoint that provides data points for this asset. Must provide asset endpoint profile name.",
                    "x-ms-mutability": [
                      "read",
                      "create"
                    ]
                  },
                  "version": {
                    "type": "integer",
                    "format": "int64",
                    "description": "An integer that is incremented each time the resource is modified.",
                    "readOnly": true
                  },
                  "manufacturer": {
                    "type": "string",
                    "description": "Asset manufacturer name."
                  },
                  "manufacturerUri": {
                    "type": "string",
                    "description": "Asset manufacturer URI."
                  },
                  "model": {
                    "type": "string",
                    "description": "Asset model name."
                  },
                  "productCode": {
                    "type": "string",
                    "description": "Asset product code."
                  },
                  "hardwareRevision": {
                    "type": "string",
                    "description": "Revision number of the hardware."
                  },
                  "softwareRevision": {
                    "type": "string",
                    "description": "Revision number of the software."
                  },
                  "documentationUri": {
                    "type": "string",
                    "description": "Reference to the documentation."
                  },
                  "serialNumber": {
                    "type": "string",
                    "description": "Asset serial number."
                  },
                  "attributes": {
                    "type": "object",
                    "description": "A set of key-value pairs that contain custom attributes set by the customer.",
                    "additionalProperties": {}
                  },
                  "discoveredAssetRefs": {
                    "type": "array",
                    "description": "Reference to a list of discovered assets. Populated only if the asset has been created from discovery flow. Discovered asset names must be provided.",
                    "items": {
                      "type": "string"
                    },
                    "x-ms-mutability": [
                      "read",
                      "create"
                    ]
                  },
                  "defaultDatasetsConfiguration": {
                    "type": "string",
                    "description": "Stringified JSON that contains connector-specific default configuration for all datasets. Each dataset can have its own configuration that overrides the default settings here."
                  },
                  "defaultEventsConfiguration": {
                    "type": "string",
                    "description": "Stringified JSON that contains connector-specific default configuration for all events. Each event can have its own configuration that overrides the default settings here."
                  },
                  "defaultTopic": {
                    "description": "Object that describes the default topic information for the asset.",
                    "type": "object",
                    "properties": {
                      "path": {
                        "type": "string",
                        "description": "The topic path for messages published to an MQTT broker."
                      },
                      "retain": {
                        "type": "string",
                        "description": "When set to 'Keep', messages published to an MQTT broker will have the retain flag set. Default: 'Never'.",
                        "default": "Never",
                        "enum": [
                          "Keep",
                          "Never"
                        ],
                        "x-ms-enum": {
                          "name": "TopicRetainType",
                          "modelAsString": true,
                          "values": [
                            {
                              "name": "Keep",
                              "value": "Keep",
                              "description": "Retain the messages."
                            },
                            {
                              "name": "Never",
                              "value": "Never",
                              "description": "Never retain messages."
                            }
                          ]
                        }
                      }
                    },
                    "required": [
                      "path"
                    ]
                  },
                  "datasets": {
                    "type": "array",
                    "description": "Array of datasets that are part of the asset. Each dataset describes the data points that make up the set.",
                    "items": {
                      "type": "object",
                      "description": "Defines the dataset properties.",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "Name of the dataset."
                        },
                        "datasetConfiguration": {
                          "type": "string",
                          "description": "Stringified JSON that contains connector-specific JSON string that describes configuration for the specific dataset."
                        },
                        "topic": {
                          "description": "Object that describes the topic information for the specific dataset.",
                          "type": "object",
                          "properties": {
                            "path": {
                              "type": "string",
                              "description": "The topic path for messages published to an MQTT broker."
                            },
                            "retain": {
                              "type": "string",
                              "description": "When set to 'Keep', messages published to an MQTT broker will have the retain flag set. Default: 'Never'.",
                              "default": "Never",
                              "enum": [
                                "Keep",
                                "Never"
                              ],
                              "x-ms-enum": {
                                "name": "TopicRetainType",
                                "modelAsString": true,
                                "values": [
                                  {
                                    "name": "Keep",
                                    "value": "Keep",
                                    "description": "Retain the messages."
                                  },
                                  {
                                    "name": "Never",
                                    "value": "Never",
                                    "description": "Never retain messages."
                                  }
                                ]
                              }
                            }
                          },
                          "required": [
                            "path"
                          ]
                        },
                        "dataPoints": {
                          "type": "array",
                          "description": "Array of data points that are part of the dataset. Each data point can have per-data point configuration.",
                          "items": {
                            "type": "object",
                            "description": "Defines the data point properties.",
                            "properties": {
                              "name": {
                                "type": "string",
                                "description": "The name of the data point."
                              },
                              "dataSource": {
                                "type": "string",
                                "description": "The address of the source of the data in the asset (e.g. URL) so that a client can access the data source on the asset."
                              },
                              "dataPointConfiguration": {
                                "type": "string",
                                "description": "Stringified JSON that contains connector-specific configuration for the data point. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize."
                              },
                              "observabilityMode": {
                                "type": "string",
                                "description": "An indication of how the data point should be mapped to OpenTelemetry.",
                                "default": "None",
                                "enum": [
                                  "None",
                                  "Counter",
                                  "Gauge",
                                  "Histogram",
                                  "Log"
                                ],
                                "x-ms-enum": {
                                  "name": "DataPointObservabilityMode",
                                  "modelAsString": true,
                                  "values": [
                                    {
                                      "name": "None",
                                      "value": "None",
                                      "description": "No mapping to OpenTelemetry."
                                    },
                                    {
                                      "name": "Counter",
                                      "value": "Counter",
                                      "description": "Map as counter to OpenTelemetry."
                                    },
                                    {
                                      "name": "Gauge",
                                      "value": "Gauge",
                                      "description": "Map as gauge to OpenTelemetry."
                                    },
                                    {
                                      "name": "Histogram",
                                      "value": "Histogram",
                                      "description": "Map as histogram to OpenTelemetry."
                                    },
                                    {
                                      "name": "Log",
                                      "value": "Log",
                                      "description": "Map as log to OpenTelemetry."
                                    }
                                  ]
                                }
                              }
                            }
                          },
                          "x-ms-identifiers": []
                        }
                      },
                      "required": [
                        "name"
                      ]
                    },
                    "x-ms-identifiers": []
                  },
                  "events": {
                    "type": "array",
                    "description": "Array of events that are part of the asset. Each event can have per-event configuration.",
                    "items": {
                      "type": "object",
                      "description": "Defines the event properties.",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "The name of the event."
                        },
                        "eventNotifier": {
                          "type": "string",
                          "description": "The address of the notifier of the event in the asset (e.g. URL) so that a client can access the event on the asset."
                        },
                        "eventConfiguration": {
                          "type": "string",
                          "description": "Stringified JSON that contains connector-specific configuration for the event. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize."
                        },
                        "topic": {
                          "description": "Object that describes the topic information for the specific event.",
                          "type": "object",
                          "properties": {
                            "path": {
                              "type": "string",
                              "description": "The topic path for messages published to an MQTT broker."
                            },
                            "retain": {
                              "type": "string",
                              "description": "When set to 'Keep', messages published to an MQTT broker will have the retain flag set. Default: 'Never'.",
                              "default": "Never",
                              "enum": [
                                "Keep",
                                "Never"
                              ],
                              "x-ms-enum": {
                                "name": "TopicRetainType",
                                "modelAsString": true,
                                "values": [
                                  {
                                    "name": "Keep",
                                    "value": "Keep",
                                    "description": "Retain the messages."
                                  },
                                  {
                                    "name": "Never",
                                    "value": "Never",
                                    "description": "Never retain messages."
                                  }
                                ]
                              }
                            }
                          },
                          "required": [
                            "path"
                          ]
                        },
                        "observabilityMode": {
                          "type": "string",
                          "description": "An indication of how the event should be mapped to OpenTelemetry.",
                          "default": "None",
                          "enum": [
                            "None",
                            "Log"
                          ],
                          "x-ms-enum": {
                            "name": "EventObservabilityMode",
                            "modelAsString": true,
                            "values": [
                              {
                                "name": "None",
                                "value": "None",
                                "description": "No mapping to OpenTelemetry."
                              },
                              {
                                "name": "Log",
                                "value": "Log",
                                "description": "Map as log to OpenTelemetry."
                              }
                            ]
                          }
                        }
                      }
                    },
                    "x-ms-identifiers": []
                  },
                  "status": {
                    "description": "Read only object to reflect changes that have occurred on the Edge. Similar to Kubernetes status property for custom resources.",
                    "readOnly": true,
                    "type": "object",
                    "properties": {
                      "errors": {
                        "type": "array",
                        "description": "Array object to transfer and persist errors that originate from the Edge.",
                        "items": {
                          "type": "object",
                          "description": "Defines the asset status error properties.",
                          "properties": {
                            "code": {
                              "type": "integer",
                              "format": "int32",
                              "description": "Error code for classification of errors (ex: 400, 404, 500, etc.).",
                              "readOnly": true
                            },
                            "message": {
                              "type": "string",
                              "description": "Human readable helpful error message to provide additional context for error (ex: “capability Id 'foo' does not exist”).",
                              "readOnly": true
                            }
                          }
                        },
                        "readOnly": true,
                        "x-ms-identifiers": []
                      },
                      "version": {
                        "type": "integer",
                        "format": "int64",
                        "description": "A read only incremental counter indicating the number of times the configuration has been modified from the perspective of the current actual (Edge) state of the Asset. Edge would be the only writer of this value and would sync back up to the cloud. In steady state, this should equal version.",
                        "readOnly": true
                      },
                      "datasets": {
                        "type": "array",
                        "description": "Array of dataset statuses that describe the status of each dataset.",
                        "items": {
                          "type": "object",
                          "description": "Defines the asset status dataset properties.",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "The name of the dataset. Must be unique within the status.datasets array. This name is used to correlate between the spec and status dataset information.",
                              "readOnly": true
                            },
                            "messageSchemaReference": {
                              "description": "The message schema reference object.",
                              "readOnly": true,
                              "type": "object",
                              "properties": {
                                "schemaRegistryNamespace": {
                                  "type": "string",
                                  "description": "The message schema registry namespace.",
                                  "readOnly": true
                                },
                                "schemaName": {
                                  "type": "string",
                                  "description": "The message schema name.",
                                  "readOnly": true
                                },
                                "schemaVersion": {
                                  "type": "string",
                                  "description": "The message schema version.",
                                  "readOnly": true
                                }
                              },
                              "required": [
                                "schemaRegistryNamespace",
                                "schemaName",
                                "schemaVersion"
                              ]
                            }
                          },
                          "required": [
                            "name"
                          ]
                        },
                        "readOnly": true,
                        "x-ms-identifiers": []
                      },
                      "events": {
                        "type": "array",
                        "description": "Array of event statuses that describe the status of each event.",
                        "items": {
                          "type": "object",
                          "description": "Defines the asset status event properties.",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "The name of the event. Must be unique within the status.events array. This name is used to correlate between the spec and status event information.",
                              "readOnly": true
                            },
                            "messageSchemaReference": {
                              "description": "The message schema reference object.",
                              "readOnly": true,
                              "type": "object",
                              "properties": {
                                "schemaRegistryNamespace": {
                                  "type": "string",
                                  "description": "The message schema registry namespace.",
                                  "readOnly": true
                                },
                                "schemaName": {
                                  "type": "string",
                                  "description": "The message schema name.",
                                  "readOnly": true
                                },
                                "schemaVersion": {
                                  "type": "string",
                                  "description": "The message schema version.",
                                  "readOnly": true
                                }
                              },
                              "required": [
                                "schemaRegistryNamespace",
                                "schemaName",
                                "schemaVersion"
                              ]
                            }
                          },
                          "required": [
                            "name"
                          ]
                        },
                        "readOnly": true,
                        "x-ms-identifiers": []
                      }
                    }
                  },
                  "provisioningState": {
                    "description": "Provisioning state of the resource.",
                    "readOnly": true,
                    "type": "string",
                    "enum": [
                      "Succeeded",
                      "Failed",
                      "Canceled",
                      "Accepted",
                      "Deleting"
                    ],
                    "x-ms-enum": {
                      "name": "ProvisioningState",
                      "modelAsString": true,
                      "values": [
                        {
                          "name": "Succeeded",
                          "value": "Succeeded",
                          "description": "Resource has been created."
                        },
                        {
                          "name": "Failed",
                          "value": "Failed",
                          "description": "Resource creation failed."
                        },
                        {
                          "name": "Canceled",
                          "value": "Canceled",
                          "description": "Resource creation was canceled."
                        },
                        {
                          "name": "Accepted",
                          "value": "Accepted",
                          "description": "Resource has been accepted by the server."
                        },
                        {
                          "name": "Deleting",
                          "value": "Deleting",
                          "description": "Resource is deleting."
                        }
                      ]
                    }
                  }
                },
                "required": [
                  "assetEndpointProfileRef"
                ]
              },
              "extendedLocation": {
                "description": "The extended location.",
                "x-ms-mutability": [
                  "read",
                  "create"
                ],
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "description": "The extended location type."
                  },
                  "name": {
                    "type": "string",
                    "description": "The extended location name."
                  }
                },
                "required": [
                  "type",
                  "name"
                ]
              }
            },
            "required": [
              "extendedLocation"
            ]
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "AssetProperties": {
      "type": "object",
      "description": "Defines the asset properties.",
      "properties": {
        "uuid": {
          "type": "string",
          "description": "Globally unique, immutable, non-reusable id.",
          "readOnly": true
        },
        "enabled": {
          "type": "boolean",
          "description": "Enabled/Disabled status of the asset."
        },
        "externalAssetId": {
          "type": "string",
          "description": "Asset id provided by the customer.",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "displayName": {
          "type": "string",
          "description": "Human-readable display name."
        },
        "description": {
          "type": "string",
          "description": "Human-readable description of the asset."
        },
        "assetEndpointProfileRef": {
          "type": "string",
          "description": "A reference to the asset endpoint profile (connection information) used by brokers to connect to an endpoint that provides data points for this asset. Must provide asset endpoint profile name.",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "description": "An integer that is incremented each time the resource is modified.",
          "readOnly": true
        },
        "manufacturer": {
          "type": "string",
          "description": "Asset manufacturer name."
        },
        "manufacturerUri": {
          "type": "string",
          "description": "Asset manufacturer URI."
        },
        "model": {
          "type": "string",
          "description": "Asset model name."
        },
        "productCode": {
          "type": "string",
          "description": "Asset product code."
        },
        "hardwareRevision": {
          "type": "string",
          "description": "Revision number of the hardware."
        },
        "softwareRevision": {
          "type": "string",
          "description": "Revision number of the software."
        },
        "documentationUri": {
          "type": "string",
          "description": "Reference to the documentation."
        },
        "serialNumber": {
          "type": "string",
          "description": "Asset serial number."
        },
        "attributes": {
          "type": "object",
          "description": "A set of key-value pairs that contain custom attributes set by the customer.",
          "additionalProperties": {}
        },
        "discoveredAssetRefs": {
          "type": "array",
          "description": "Reference to a list of discovered assets. Populated only if the asset has been created from discovery flow. Discovered asset names must be provided.",
          "items": {
            "type": "string"
          },
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "defaultDatasetsConfiguration": {
          "type": "string",
          "description": "Stringified JSON that contains connector-specific default configuration for all datasets. Each dataset can have its own configuration that overrides the default settings here."
        },
        "defaultEventsConfiguration": {
          "type": "string",
          "description": "Stringified JSON that contains connector-specific default configuration for all events. Each event can have its own configuration that overrides the default settings here."
        },
        "defaultTopic": {
          "description": "Object that describes the default topic information for the asset.",
          "type": "object",
          "properties": {
            "path": {
              "type": "string",
              "description": "The topic path for messages published to an MQTT broker."
            },
            "retain": {
              "type": "string",
              "description": "When set to 'Keep', messages published to an MQTT broker will have the retain flag set. Default: 'Never'.",
              "default": "Never",
              "enum": [
                "Keep",
                "Never"
              ],
              "x-ms-enum": {
                "name": "TopicRetainType",
                "modelAsString": true,
                "values": [
                  {
                    "name": "Keep",
                    "value": "Keep",
                    "description": "Retain the messages."
                  },
                  {
                    "name": "Never",
                    "value": "Never",
                    "description": "Never retain messages."
                  }
                ]
              }
            }
          },
          "required": [
            "path"
          ]
        },
        "datasets": {
          "type": "array",
          "description": "Array of datasets that are part of the asset. Each dataset describes the data points that make up the set.",
          "items": {
            "type": "object",
            "description": "Defines the dataset properties.",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the dataset."
              },
              "datasetConfiguration": {
                "type": "string",
                "description": "Stringified JSON that contains connector-specific JSON string that describes configuration for the specific dataset."
              },
              "topic": {
                "description": "Object that describes the topic information for the specific dataset.",
                "type": "object",
                "properties": {
                  "path": {
                    "type": "string",
                    "description": "The topic path for messages published to an MQTT broker."
                  },
                  "retain": {
                    "type": "string",
                    "description": "When set to 'Keep', messages published to an MQTT broker will have the retain flag set. Default: 'Never'.",
                    "default": "Never",
                    "enum": [
                      "Keep",
                      "Never"
                    ],
                    "x-ms-enum": {
                      "name": "TopicRetainType",
                      "modelAsString": true,
                      "values": [
                        {
                          "name": "Keep",
                          "value": "Keep",
                          "description": "Retain the messages."
                        },
                        {
                          "name": "Never",
                          "value": "Never",
                          "description": "Never retain messages."
                        }
                      ]
                    }
                  }
                },
                "required": [
                  "path"
                ]
              },
              "dataPoints": {
                "type": "array",
                "description": "Array of data points that are part of the dataset. Each data point can have per-data point configuration.",
                "items": {
                  "type": "object",
                  "description": "Defines the data point properties.",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The name of the data point."
                    },
                    "dataSource": {
                      "type": "string",
                      "description": "The address of the source of the data in the asset (e.g. URL) so that a client can access the data source on the asset."
                    },
                    "dataPointConfiguration": {
                      "type": "string",
                      "description": "Stringified JSON that contains connector-specific configuration for the data point. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize."
                    },
                    "observabilityMode": {
                      "type": "string",
                      "description": "An indication of how the data point should be mapped to OpenTelemetry.",
                      "default": "None",
                      "enum": [
                        "None",
                        "Counter",
                        "Gauge",
                        "Histogram",
                        "Log"
                      ],
                      "x-ms-enum": {
                        "name": "DataPointObservabilityMode",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "None",
                            "value": "None",
                            "description": "No mapping to OpenTelemetry."
                          },
                          {
                            "name": "Counter",
                            "value": "Counter",
                            "description": "Map as counter to OpenTelemetry."
                          },
                          {
                            "name": "Gauge",
                            "value": "Gauge",
                            "description": "Map as gauge to OpenTelemetry."
                          },
                          {
                            "name": "Histogram",
                            "value": "Histogram",
                            "description": "Map as histogram to OpenTelemetry."
                          },
                          {
                            "name": "Log",
                            "value": "Log",
                            "description": "Map as log to OpenTelemetry."
                          }
                        ]
                      }
                    }
                  }
                },
                "x-ms-identifiers": []
              }
            },
            "required": [
              "name"
            ]
          },
          "x-ms-identifiers": []
        },
        "events": {
          "type": "array",
          "description": "Array of events that are part of the asset. Each event can have per-event configuration.",
          "items": {
            "type": "object",
            "description": "Defines the event properties.",
            "properties": {
              "name": {
                "type": "string",
                "description": "The name of the event."
              },
              "eventNotifier": {
                "type": "string",
                "description": "The address of the notifier of the event in the asset (e.g. URL) so that a client can access the event on the asset."
              },
              "eventConfiguration": {
                "type": "string",
                "description": "Stringified JSON that contains connector-specific configuration for the event. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize."
              },
              "topic": {
                "description": "Object that describes the topic information for the specific event.",
                "type": "object",
                "properties": {
                  "path": {
                    "type": "string",
                    "description": "The topic path for messages published to an MQTT broker."
                  },
                  "retain": {
                    "type": "string",
                    "description": "When set to 'Keep', messages published to an MQTT broker will have the retain flag set. Default: 'Never'.",
                    "default": "Never",
                    "enum": [
                      "Keep",
                      "Never"
                    ],
                    "x-ms-enum": {
                      "name": "TopicRetainType",
                      "modelAsString": true,
                      "values": [
                        {
                          "name": "Keep",
                          "value": "Keep",
                          "description": "Retain the messages."
                        },
                        {
                          "name": "Never",
                          "value": "Never",
                          "description": "Never retain messages."
                        }
                      ]
                    }
                  }
                },
                "required": [
                  "path"
                ]
              },
              "observabilityMode": {
                "type": "string",
                "description": "An indication of how the event should be mapped to OpenTelemetry.",
                "default": "None",
                "enum": [
                  "None",
                  "Log"
                ],
                "x-ms-enum": {
                  "name": "EventObservabilityMode",
                  "modelAsString": true,
                  "values": [
                    {
                      "name": "None",
                      "value": "None",
                      "description": "No mapping to OpenTelemetry."
                    },
                    {
                      "name": "Log",
                      "value": "Log",
                      "description": "Map as log to OpenTelemetry."
                    }
                  ]
                }
              }
            }
          },
          "x-ms-identifiers": []
        },
        "status": {
          "description": "Read only object to reflect changes that have occurred on the Edge. Similar to Kubernetes status property for custom resources.",
          "readOnly": true,
          "type": "object",
          "properties": {
            "errors": {
              "type": "array",
              "description": "Array object to transfer and persist errors that originate from the Edge.",
              "items": {
                "type": "object",
                "description": "Defines the asset status error properties.",
                "properties": {
                  "code": {
                    "type": "integer",
                    "format": "int32",
                    "description": "Error code for classification of errors (ex: 400, 404, 500, etc.).",
                    "readOnly": true
                  },
                  "message": {
                    "type": "string",
                    "description": "Human readable helpful error message to provide additional context for error (ex: “capability Id 'foo' does not exist”).",
                    "readOnly": true
                  }
                }
              },
              "readOnly": true,
              "x-ms-identifiers": []
            },
            "version": {
              "type": "integer",
              "format": "int64",
              "description": "A read only incremental counter indicating the number of times the configuration has been modified from the perspective of the current actual (Edge) state of the Asset. Edge would be the only writer of this value and would sync back up to the cloud. In steady state, this should equal version.",
              "readOnly": true
            },
            "datasets": {
              "type": "array",
              "description": "Array of dataset statuses that describe the status of each dataset.",
              "items": {
                "type": "object",
                "description": "Defines the asset status dataset properties.",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the dataset. Must be unique within the status.datasets array. This name is used to correlate between the spec and status dataset information.",
                    "readOnly": true
                  },
                  "messageSchemaReference": {
                    "description": "The message schema reference object.",
                    "readOnly": true,
                    "type": "object",
                    "properties": {
                      "schemaRegistryNamespace": {
                        "type": "string",
                        "description": "The message schema registry namespace.",
                        "readOnly": true
                      },
                      "schemaName": {
                        "type": "string",
                        "description": "The message schema name.",
                        "readOnly": true
                      },
                      "schemaVersion": {
                        "type": "string",
                        "description": "The message schema version.",
                        "readOnly": true
                      }
                    },
                    "required": [
                      "schemaRegistryNamespace",
                      "schemaName",
                      "schemaVersion"
                    ]
                  }
                },
                "required": [
                  "name"
                ]
              },
              "readOnly": true,
              "x-ms-identifiers": []
            },
            "events": {
              "type": "array",
              "description": "Array of event statuses that describe the status of each event.",
              "items": {
                "type": "object",
                "description": "Defines the asset status event properties.",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the event. Must be unique within the status.events array. This name is used to correlate between the spec and status event information.",
                    "readOnly": true
                  },
                  "messageSchemaReference": {
                    "description": "The message schema reference object.",
                    "readOnly": true,
                    "type": "object",
                    "properties": {
                      "schemaRegistryNamespace": {
                        "type": "string",
                        "description": "The message schema registry namespace.",
                        "readOnly": true
                      },
                      "schemaName": {
                        "type": "string",
                        "description": "The message schema name.",
                        "readOnly": true
                      },
                      "schemaVersion": {
                        "type": "string",
                        "description": "The message schema version.",
                        "readOnly": true
                      }
                    },
                    "required": [
                      "schemaRegistryNamespace",
                      "schemaName",
                      "schemaVersion"
                    ]
                  }
                },
                "required": [
                  "name"
                ]
              },
              "readOnly": true,
              "x-ms-identifiers": []
            }
          }
        },
        "provisioningState": {
          "description": "Provisioning state of the resource.",
          "readOnly": true,
          "type": "string",
          "enum": [
            "Succeeded",
            "Failed",
            "Canceled",
            "Accepted",
            "Deleting"
          ],
          "x-ms-enum": {
            "name": "ProvisioningState",
            "modelAsString": true,
            "values": [
              {
                "name": "Succeeded",
                "value": "Succeeded",
                "description": "Resource has been created."
              },
              {
                "name": "Failed",
                "value": "Failed",
                "description": "Resource creation failed."
              },
              {
                "name": "Canceled",
                "value": "Canceled",
                "description": "Resource creation was canceled."
              },
              {
                "name": "Accepted",
                "value": "Accepted",
                "description": "Resource has been accepted by the server."
              },
              {
                "name": "Deleting",
                "value": "Deleting",
                "description": "Resource is deleting."
              }
            ]
          }
        }
      },
      "required": [
        "assetEndpointProfileRef"
      ]
    },
    "AssetStatus": {
      "type": "object",
      "description": "Defines the asset status properties.",
      "properties": {
        "errors": {
          "type": "array",
          "description": "Array object to transfer and persist errors that originate from the Edge.",
          "items": {
            "type": "object",
            "description": "Defines the asset status error properties.",
            "properties": {
              "code": {
                "type": "integer",
                "format": "int32",
                "description": "Error code for classification of errors (ex: 400, 404, 500, etc.).",
                "readOnly": true
              },
              "message": {
                "type": "string",
                "description": "Human readable helpful error message to provide additional context for error (ex: “capability Id 'foo' does not exist”).",
                "readOnly": true
              }
            }
          },
          "readOnly": true,
          "x-ms-identifiers": []
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "description": "A read only incremental counter indicating the number of times the configuration has been modified from the perspective of the current actual (Edge) state of the Asset. Edge would be the only writer of this value and would sync back up to the cloud. In steady state, this should equal version.",
          "readOnly": true
        },
        "datasets": {
          "type": "array",
          "description": "Array of dataset statuses that describe the status of each dataset.",
          "items": {
            "type": "object",
            "description": "Defines the asset status dataset properties.",
            "properties": {
              "name": {
                "type": "string",
                "description": "The name of the dataset. Must be unique within the status.datasets array. This name is used to correlate between the spec and status dataset information.",
                "readOnly": true
              },
              "messageSchemaReference": {
                "description": "The message schema reference object.",
                "readOnly": true,
                "type": "object",
                "properties": {
                  "schemaRegistryNamespace": {
                    "type": "string",
                    "description": "The message schema registry namespace.",
                    "readOnly": true
                  },
                  "schemaName": {
                    "type": "string",
                    "description": "The message schema name.",
                    "readOnly": true
                  },
                  "schemaVersion": {
                    "type": "string",
                    "description": "The message schema version.",
                    "readOnly": true
                  }
                },
                "required": [
                  "schemaRegistryNamespace",
                  "schemaName",
                  "schemaVersion"
                ]
              }
            },
            "required": [
              "name"
            ]
          },
          "readOnly": true,
          "x-ms-identifiers": []
        },
        "events": {
          "type": "array",
          "description": "Array of event statuses that describe the status of each event.",
          "items": {
            "type": "object",
            "description": "Defines the asset status event properties.",
            "properties": {
              "name": {
                "type": "string",
                "description": "The name of the event. Must be unique within the status.events array. This name is used to correlate between the spec and status event information.",
                "readOnly": true
              },
              "messageSchemaReference": {
                "description": "The message schema reference object.",
                "readOnly": true,
                "type": "object",
                "properties": {
                  "schemaRegistryNamespace": {
                    "type": "string",
                    "description": "The message schema registry namespace.",
                    "readOnly": true
                  },
                  "schemaName": {
                    "type": "string",
                    "description": "The message schema name.",
                    "readOnly": true
                  },
                  "schemaVersion": {
                    "type": "string",
                    "description": "The message schema version.",
                    "readOnly": true
                  }
                },
                "required": [
                  "schemaRegistryNamespace",
                  "schemaName",
                  "schemaVersion"
                ]
              }
            },
            "required": [
              "name"
            ]
          },
          "readOnly": true,
          "x-ms-identifiers": []
        }
      }
    },
    "AssetStatusDataset": {
      "type": "object",
      "description": "Defines the asset status dataset properties.",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the dataset. Must be unique within the status.datasets array. This name is used to correlate between the spec and status dataset information.",
          "readOnly": true
        },
        "messageSchemaReference": {
          "description": "The message schema reference object.",
          "readOnly": true,
          "type": "object",
          "properties": {
            "schemaRegistryNamespace": {
              "type": "string",
              "description": "The message schema registry namespace.",
              "readOnly": true
            },
            "schemaName": {
              "type": "string",
              "description": "The message schema name.",
              "readOnly": true
            },
            "schemaVersion": {
              "type": "string",
              "description": "The message schema version.",
              "readOnly": true
            }
          },
          "required": [
            "schemaRegistryNamespace",
            "schemaName",
            "schemaVersion"
          ]
        }
      },
      "required": [
        "name"
      ]
    },
    "AssetStatusError": {
      "type": "object",
      "description": "Defines the asset status error properties.",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32",
          "description": "Error code for classification of errors (ex: 400, 404, 500, etc.).",
          "readOnly": true
        },
        "message": {
          "type": "string",
          "description": "Human readable helpful error message to provide additional context for error (ex: “capability Id 'foo' does not exist”).",
          "readOnly": true
        }
      }
    },
    "AssetStatusEvent": {
      "type": "object",
      "description": "Defines the asset status event properties.",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the event. Must be unique within the status.events array. This name is used to correlate between the spec and status event information.",
          "readOnly": true
        },
        "messageSchemaReference": {
          "description": "The message schema reference object.",
          "readOnly": true,
          "type": "object",
          "properties": {
            "schemaRegistryNamespace": {
              "type": "string",
              "description": "The message schema registry namespace.",
              "readOnly": true
            },
            "schemaName": {
              "type": "string",
              "description": "The message schema name.",
              "readOnly": true
            },
            "schemaVersion": {
              "type": "string",
              "description": "The message schema version.",
              "readOnly": true
            }
          },
          "required": [
            "schemaRegistryNamespace",
            "schemaName",
            "schemaVersion"
          ]
        }
      },
      "required": [
        "name"
      ]
    },
    "AssetUpdate": {
      "type": "object",
      "description": "The type used for update operations of the Asset.",
      "properties": {
        "tags": {
          "type": "object",
          "description": "Resource tags.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "properties": {
          "description": "The resource-specific properties for this resource.",
          "x-ms-client-flatten": true,
          "type": "object",
          "properties": {
            "enabled": {
              "type": "boolean",
              "description": "Enabled/Disabled status of the asset."
            },
            "displayName": {
              "type": "string",
              "description": "Human-readable display name."
            },
            "description": {
              "type": "string",
              "description": "Human-readable description of the asset."
            },
            "manufacturer": {
              "type": "string",
              "description": "Asset manufacturer name."
            },
            "manufacturerUri": {
              "type": "string",
              "description": "Asset manufacturer URI."
            },
            "model": {
              "type": "string",
              "description": "Asset model name."
            },
            "productCode": {
              "type": "string",
              "description": "Asset product code."
            },
            "hardwareRevision": {
              "type": "string",
              "description": "Revision number of the hardware."
            },
            "softwareRevision": {
              "type": "string",
              "description": "Revision number of the software."
            },
            "documentationUri": {
              "type": "string",
              "description": "Reference to the documentation."
            },
            "serialNumber": {
              "type": "string",
              "description": "Asset serial number."
            },
            "attributes": {
              "type": "object",
              "description": "A set of key-value pairs that contain custom attributes set by the customer.",
              "additionalProperties": {}
            },
            "defaultDatasetsConfiguration": {
              "type": "string",
              "description": "Stringified JSON that contains connector-specific default configuration for all datasets. Each dataset can have its own configuration that overrides the default settings here."
            },
            "defaultEventsConfiguration": {
              "type": "string",
              "description": "Stringified JSON that contains connector-specific default configuration for all events. Each event can have its own configuration that overrides the default settings here."
            },
            "defaultTopic": {
              "description": "Object that describes the default topic information for the asset.",
              "type": "object",
              "properties": {
                "path": {
                  "type": "string",
                  "description": "The topic path for messages published to an MQTT broker."
                },
                "retain": {
                  "type": "string",
                  "description": "When set to 'Keep', messages published to an MQTT broker will have the retain flag set. Default: 'Never'.",
                  "default": "Never",
                  "enum": [
                    "Keep",
                    "Never"
                  ],
                  "x-ms-enum": {
                    "name": "TopicRetainType",
                    "modelAsString": true,
                    "values": [
                      {
                        "name": "Keep",
                        "value": "Keep",
                        "description": "Retain the messages."
                      },
                      {
                        "name": "Never",
                        "value": "Never",
                        "description": "Never retain messages."
                      }
                    ]
                  }
                }
              }
            },
            "datasets": {
              "type": "array",
              "description": "Array of datasets that are part of the asset. Each dataset describes the data points that make up the set.",
              "items": {
                "type": "object",
                "description": "Defines the dataset properties.",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of the dataset."
                  },
                  "datasetConfiguration": {
                    "type": "string",
                    "description": "Stringified JSON that contains connector-specific JSON string that describes configuration for the specific dataset."
                  },
                  "topic": {
                    "description": "Object that describes the topic information for the specific dataset.",
                    "type": "object",
                    "properties": {
                      "path": {
                        "type": "string",
                        "description": "The topic path for messages published to an MQTT broker."
                      },
                      "retain": {
                        "type": "string",
                        "description": "When set to 'Keep', messages published to an MQTT broker will have the retain flag set. Default: 'Never'.",
                        "default": "Never",
                        "enum": [
                          "Keep",
                          "Never"
                        ],
                        "x-ms-enum": {
                          "name": "TopicRetainType",
                          "modelAsString": true,
                          "values": [
                            {
                              "name": "Keep",
                              "value": "Keep",
                              "description": "Retain the messages."
                            },
                            {
                              "name": "Never",
                              "value": "Never",
                              "description": "Never retain messages."
                            }
                          ]
                        }
                      }
                    },
                    "required": [
                      "path"
                    ]
                  },
                  "dataPoints": {
                    "type": "array",
                    "description": "Array of data points that are part of the dataset. Each data point can have per-data point configuration.",
                    "items": {
                      "type": "object",
                      "description": "Defines the data point properties.",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "The name of the data point."
                        },
                        "dataSource": {
                          "type": "string",
                          "description": "The address of the source of the data in the asset (e.g. URL) so that a client can access the data source on the asset."
                        },
                        "dataPointConfiguration": {
                          "type": "string",
                          "description": "Stringified JSON that contains connector-specific configuration for the data point. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize."
                        },
                        "observabilityMode": {
                          "type": "string",
                          "description": "An indication of how the data point should be mapped to OpenTelemetry.",
                          "default": "None",
                          "enum": [
                            "None",
                            "Counter",
                            "Gauge",
                            "Histogram",
                            "Log"
                          ],
                          "x-ms-enum": {
                            "name": "DataPointObservabilityMode",
                            "modelAsString": true,
                            "values": [
                              {
                                "name": "None",
                                "value": "None",
                                "description": "No mapping to OpenTelemetry."
                              },
                              {
                                "name": "Counter",
                                "value": "Counter",
                                "description": "Map as counter to OpenTelemetry."
                              },
                              {
                                "name": "Gauge",
                                "value": "Gauge",
                                "description": "Map as gauge to OpenTelemetry."
                              },
                              {
                                "name": "Histogram",
                                "value": "Histogram",
                                "description": "Map as histogram to OpenTelemetry."
                              },
                              {
                                "name": "Log",
                                "value": "Log",
                                "description": "Map as log to OpenTelemetry."
                              }
                            ]
                          }
                        }
                      }
                    },
                    "x-ms-identifiers": []
                  }
                },
                "required": [
                  "name"
                ]
              },
              "x-ms-identifiers": []
            },
            "events": {
              "type": "array",
              "description": "Array of events that are part of the asset. Each event can have per-event configuration.",
              "items": {
                "type": "object",
                "description": "Defines the event properties.",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the event."
                  },
                  "eventNotifier": {
                    "type": "string",
                    "description": "The address of the notifier of the event in the asset (e.g. URL) so that a client can access the event on the asset."
                  },
                  "eventConfiguration": {
                    "type": "string",
                    "description": "Stringified JSON that contains connector-specific configuration for the event. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize."
                  },
                  "topic": {
                    "description": "Object that describes the topic information for the specific event.",
                    "type": "object",
                    "properties": {
                      "path": {
                        "type": "string",
                        "description": "The topic path for messages published to an MQTT broker."
                      },
                      "retain": {
                        "type": "string",
                        "description": "When set to 'Keep', messages published to an MQTT broker will have the retain flag set. Default: 'Never'.",
                        "default": "Never",
                        "enum": [
                          "Keep",
                          "Never"
                        ],
                        "x-ms-enum": {
                          "name": "TopicRetainType",
                          "modelAsString": true,
                          "values": [
                            {
                              "name": "Keep",
                              "value": "Keep",
                              "description": "Retain the messages."
                            },
                            {
                              "name": "Never",
                              "value": "Never",
                              "description": "Never retain messages."
                            }
                          ]
                        }
                      }
                    },
                    "required": [
                      "path"
                    ]
                  },
                  "observabilityMode": {
                    "type": "string",
                    "description": "An indication of how the event should be mapped to OpenTelemetry.",
                    "default": "None",
                    "enum": [
                      "None",
                      "Log"
                    ],
                    "x-ms-enum": {
                      "name": "EventObservabilityMode",
                      "modelAsString": true,
                      "values": [
                        {
                          "name": "None",
                          "value": "None",
                          "description": "No mapping to OpenTelemetry."
                        },
                        {
                          "name": "Log",
                          "value": "Log",
                          "description": "Map as log to OpenTelemetry."
                        }
                      ]
                    }
                  }
                }
              },
              "x-ms-identifiers": []
            }
          }
        }
      }
    },
    "AssetUpdateProperties": {
      "type": "object",
      "description": "The updatable properties of the Asset.",
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "Enabled/Disabled status of the asset."
        },
        "displayName": {
          "type": "string",
          "description": "Human-readable display name."
        },
        "description": {
          "type": "string",
          "description": "Human-readable description of the asset."
        },
        "manufacturer": {
          "type": "string",
          "description": "Asset manufacturer name."
        },
        "manufacturerUri": {
          "type": "string",
          "description": "Asset manufacturer URI."
        },
        "model": {
          "type": "string",
          "description": "Asset model name."
        },
        "productCode": {
          "type": "string",
          "description": "Asset product code."
        },
        "hardwareRevision": {
          "type": "string",
          "description": "Revision number of the hardware."
        },
        "softwareRevision": {
          "type": "string",
          "description": "Revision number of the software."
        },
        "documentationUri": {
          "type": "string",
          "description": "Reference to the documentation."
        },
        "serialNumber": {
          "type": "string",
          "description": "Asset serial number."
        },
        "attributes": {
          "type": "object",
          "description": "A set of key-value pairs that contain custom attributes set by the customer.",
          "additionalProperties": {}
        },
        "defaultDatasetsConfiguration": {
          "type": "string",
          "description": "Stringified JSON that contains connector-specific default configuration for all datasets. Each dataset can have its own configuration that overrides the default settings here."
        },
        "defaultEventsConfiguration": {
          "type": "string",
          "description": "Stringified JSON that contains connector-specific default configuration for all events. Each event can have its own configuration that overrides the default settings here."
        },
        "defaultTopic": {
          "description": "Object that describes the default topic information for the asset.",
          "type": "object",
          "properties": {
            "path": {
              "type": "string",
              "description": "The topic path for messages published to an MQTT broker."
            },
            "retain": {
              "type": "string",
              "description": "When set to 'Keep', messages published to an MQTT broker will have the retain flag set. Default: 'Never'.",
              "default": "Never",
              "enum": [
                "Keep",
                "Never"
              ],
              "x-ms-enum": {
                "name": "TopicRetainType",
                "modelAsString": true,
                "values": [
                  {
                    "name": "Keep",
                    "value": "Keep",
                    "description": "Retain the messages."
                  },
                  {
                    "name": "Never",
                    "value": "Never",
                    "description": "Never retain messages."
                  }
                ]
              }
            }
          }
        },
        "datasets": {
          "type": "array",
          "description": "Array of datasets that are part of the asset. Each dataset describes the data points that make up the set.",
          "items": {
            "type": "object",
            "description": "Defines the dataset properties.",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the dataset."
              },
              "datasetConfiguration": {
                "type": "string",
                "description": "Stringified JSON that contains connector-specific JSON string that describes configuration for the specific dataset."
              },
              "topic": {
                "description": "Object that describes the topic information for the specific dataset.",
                "type": "object",
                "properties": {
                  "path": {
                    "type": "string",
                    "description": "The topic path for messages published to an MQTT broker."
                  },
                  "retain": {
                    "type": "string",
                    "description": "When set to 'Keep', messages published to an MQTT broker will have the retain flag set. Default: 'Never'.",
                    "default": "Never",
                    "enum": [
                      "Keep",
                      "Never"
                    ],
                    "x-ms-enum": {
                      "name": "TopicRetainType",
                      "modelAsString": true,
                      "values": [
                        {
                          "name": "Keep",
                          "value": "Keep",
                          "description": "Retain the messages."
                        },
                        {
                          "name": "Never",
                          "value": "Never",
                          "description": "Never retain messages."
                        }
                      ]
                    }
                  }
                },
                "required": [
                  "path"
                ]
              },
              "dataPoints": {
                "type": "array",
                "description": "Array of data points that are part of the dataset. Each data point can have per-data point configuration.",
                "items": {
                  "type": "object",
                  "description": "Defines the data point properties.",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The name of the data point."
                    },
                    "dataSource": {
                      "type": "string",
                      "description": "The address of the source of the data in the asset (e.g. URL) so that a client can access the data source on the asset."
                    },
                    "dataPointConfiguration": {
                      "type": "string",
                      "description": "Stringified JSON that contains connector-specific configuration for the data point. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize."
                    },
                    "observabilityMode": {
                      "type": "string",
                      "description": "An indication of how the data point should be mapped to OpenTelemetry.",
                      "default": "None",
                      "enum": [
                        "None",
                        "Counter",
                        "Gauge",
                        "Histogram",
                        "Log"
                      ],
                      "x-ms-enum": {
                        "name": "DataPointObservabilityMode",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "None",
                            "value": "None",
                            "description": "No mapping to OpenTelemetry."
                          },
                          {
                            "name": "Counter",
                            "value": "Counter",
                            "description": "Map as counter to OpenTelemetry."
                          },
                          {
                            "name": "Gauge",
                            "value": "Gauge",
                            "description": "Map as gauge to OpenTelemetry."
                          },
                          {
                            "name": "Histogram",
                            "value": "Histogram",
                            "description": "Map as histogram to OpenTelemetry."
                          },
                          {
                            "name": "Log",
                            "value": "Log",
                            "description": "Map as log to OpenTelemetry."
                          }
                        ]
                      }
                    }
                  }
                },
                "x-ms-identifiers": []
              }
            },
            "required": [
              "name"
            ]
          },
          "x-ms-identifiers": []
        },
        "events": {
          "type": "array",
          "description": "Array of events that are part of the asset. Each event can have per-event configuration.",
          "items": {
            "type": "object",
            "description": "Defines the event properties.",
            "properties": {
              "name": {
                "type": "string",
                "description": "The name of the event."
              },
              "eventNotifier": {
                "type": "string",
                "description": "The address of the notifier of the event in the asset (e.g. URL) so that a client can access the event on the asset."
              },
              "eventConfiguration": {
                "type": "string",
                "description": "Stringified JSON that contains connector-specific configuration for the event. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize."
              },
              "topic": {
                "description": "Object that describes the topic information for the specific event.",
                "type": "object",
                "properties": {
                  "path": {
                    "type": "string",
                    "description": "The topic path for messages published to an MQTT broker."
                  },
                  "retain": {
                    "type": "string",
                    "description": "When set to 'Keep', messages published to an MQTT broker will have the retain flag set. Default: 'Never'.",
                    "default": "Never",
                    "enum": [
                      "Keep",
                      "Never"
                    ],
                    "x-ms-enum": {
                      "name": "TopicRetainType",
                      "modelAsString": true,
                      "values": [
                        {
                          "name": "Keep",
                          "value": "Keep",
                          "description": "Retain the messages."
                        },
                        {
                          "name": "Never",
                          "value": "Never",
                          "description": "Never retain messages."
                        }
                      ]
                    }
                  }
                },
                "required": [
                  "path"
                ]
              },
              "observabilityMode": {
                "type": "string",
                "description": "An indication of how the event should be mapped to OpenTelemetry.",
                "default": "None",
                "enum": [
                  "None",
                  "Log"
                ],
                "x-ms-enum": {
                  "name": "EventObservabilityMode",
                  "modelAsString": true,
                  "values": [
                    {
                      "name": "None",
                      "value": "None",
                      "description": "No mapping to OpenTelemetry."
                    },
                    {
                      "name": "Log",
                      "value": "Log",
                      "description": "Map as log to OpenTelemetry."
                    }
                  ]
                }
              }
            }
          },
          "x-ms-identifiers": []
        }
      }
    },
    "Authentication": {
      "type": "object",
      "description": "Definition of the client authentication mechanism to the server.",
      "properties": {
        "method": {
          "type": "string",
          "description": "Defines the method to authenticate the user of the client at the server.",
          "default": "Certificate",
          "enum": [
            "Anonymous",
            "Certificate",
            "UsernamePassword"
          ],
          "x-ms-enum": {
            "name": "AuthenticationMethod",
            "modelAsString": true,
            "values": [
              {
                "name": "Anonymous",
                "value": "Anonymous",
                "description": "The user authentication method is anonymous."
              },
              {
                "name": "Certificate",
                "value": "Certificate",
                "description": "The user authentication method is an x509 certificate."
              },
              {
                "name": "UsernamePassword",
                "value": "UsernamePassword",
                "description": "The user authentication method is a username and password."
              }
            ]
          }
        },
        "usernamePasswordCredentials": {
          "description": "Defines the username and password references when UsernamePassword user authentication mode is selected.",
          "type": "object",
          "properties": {
            "usernameSecretName": {
              "type": "string",
              "description": "The name of the secret containing the username."
            },
            "passwordSecretName": {
              "type": "string",
              "description": "The name of the secret containing the password."
            }
          },
          "required": [
            "usernameSecretName",
            "passwordSecretName"
          ]
        },
        "x509Credentials": {
          "description": "Defines the certificate reference when Certificate user authentication mode is selected.",
          "type": "object",
          "properties": {
            "certificateSecretName": {
              "type": "string",
              "description": "The name of the secret containing the certificate and private key (e.g. stored as .der/.pem or .der/.pfx)."
            }
          },
          "required": [
            "certificateSecretName"
          ]
        }
      },
      "required": [
        "method"
      ]
    },
    "AuthenticationMethod": {
      "type": "string",
      "description": "The method to authenticate the user of the client at the server.",
      "enum": [
        "Anonymous",
        "Certificate",
        "UsernamePassword"
      ],
      "x-ms-enum": {
        "name": "AuthenticationMethod",
        "modelAsString": true,
        "values": [
          {
            "name": "Anonymous",
            "value": "Anonymous",
            "description": "The user authentication method is anonymous."
          },
          {
            "name": "Certificate",
            "value": "Certificate",
            "description": "The user authentication method is an x509 certificate."
          },
          {
            "name": "UsernamePassword",
            "value": "UsernamePassword",
            "description": "The user authentication method is a username and password."
          }
        ]
      }
    },
    "AuthenticationUpdate": {
      "type": "object",
      "description": "Definition of the client authentication mechanism to the server.",
      "properties": {
        "method": {
          "type": "string",
          "description": "Defines the method to authenticate the user of the client at the server.",
          "default": "Certificate",
          "enum": [
            "Anonymous",
            "Certificate",
            "UsernamePassword"
          ],
          "x-ms-enum": {
            "name": "AuthenticationMethod",
            "modelAsString": true,
            "values": [
              {
                "name": "Anonymous",
                "value": "Anonymous",
                "description": "The user authentication method is anonymous."
              },
              {
                "name": "Certificate",
                "value": "Certificate",
                "description": "The user authentication method is an x509 certificate."
              },
              {
                "name": "UsernamePassword",
                "value": "UsernamePassword",
                "description": "The user authentication method is a username and password."
              }
            ]
          }
        },
        "usernamePasswordCredentials": {
          "description": "Defines the username and password references when UsernamePassword user authentication mode is selected.",
          "type": "object",
          "properties": {
            "usernameSecretName": {
              "type": "string",
              "description": "The name of the secret containing the username."
            },
            "passwordSecretName": {
              "type": "string",
              "description": "The name of the secret containing the password."
            }
          }
        },
        "x509Credentials": {
          "description": "Defines the certificate reference when Certificate user authentication mode is selected.",
          "type": "object",
          "properties": {
            "certificateSecretName": {
              "type": "string",
              "description": "The name of the secret containing the certificate and private key (e.g. stored as .der/.pem or .der/.pfx)."
            }
          }
        }
      }
    },
    "BillingContainer": {
      "type": "object",
      "description": "billingContainer Model as Azure resource whose sole purpose is to keep track of billables resources under a subscription.",
      "properties": {
        "id": {
          "type": "string",
          "format": "arm-id",
          "description": "Fully qualified resource ID for the resource. E.g. \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}\"",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "The name of the resource",
          "readOnly": true
        },
        "type": {
          "type": "string",
          "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
          "readOnly": true
        },
        "systemData": {
          "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
          "readOnly": true,
          "type": "object",
          "properties": {
            "createdBy": {
              "type": "string",
              "description": "The identity that created the resource."
            },
            "createdByType": {
              "type": "string",
              "description": "The type of identity that created the resource.",
              "enum": [
                "User",
                "Application",
                "ManagedIdentity",
                "Key"
              ],
              "x-ms-enum": {
                "name": "createdByType",
                "modelAsString": true
              }
            },
            "createdAt": {
              "type": "string",
              "format": "date-time",
              "description": "The timestamp of resource creation (UTC)."
            },
            "lastModifiedBy": {
              "type": "string",
              "description": "The identity that last modified the resource."
            },
            "lastModifiedByType": {
              "type": "string",
              "description": "The type of identity that last modified the resource.",
              "enum": [
                "User",
                "Application",
                "ManagedIdentity",
                "Key"
              ],
              "x-ms-enum": {
                "name": "createdByType",
                "modelAsString": true
              }
            },
            "lastModifiedAt": {
              "type": "string",
              "format": "date-time",
              "description": "The timestamp of resource last modification (UTC)"
            }
          }
        },
        "properties": {
          "description": "The resource-specific properties for this resource.",
          "x-ms-client-flatten": true,
          "type": "object",
          "properties": {
            "provisioningState": {
              "description": "Provisioning state of the resource.",
              "readOnly": true,
              "type": "string",
              "enum": [
                "Succeeded",
                "Failed",
                "Canceled",
                "Accepted",
                "Deleting"
              ],
              "x-ms-enum": {
                "name": "ProvisioningState",
                "modelAsString": true,
                "values": [
                  {
                    "name": "Succeeded",
                    "value": "Succeeded",
                    "description": "Resource has been created."
                  },
                  {
                    "name": "Failed",
                    "value": "Failed",
                    "description": "Resource creation failed."
                  },
                  {
                    "name": "Canceled",
                    "value": "Canceled",
                    "description": "Resource creation was canceled."
                  },
                  {
                    "name": "Accepted",
                    "value": "Accepted",
                    "description": "Resource has been accepted by the server."
                  },
                  {
                    "name": "Deleting",
                    "value": "Deleting",
                    "description": "Resource is deleting."
                  }
                ]
              }
            }
          }
        },
        "etag": {
          "type": "string",
          "description": "Resource ETag",
          "readOnly": true
        }
      }
    },
    "BillingContainerListResult": {
      "type": "object",
      "description": "The response of a BillingContainer list operation.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The BillingContainer items on this page",
          "items": {
            "type": "object",
            "description": "billingContainer Model as Azure resource whose sole purpose is to keep track of billables resources under a subscription.",
            "properties": {
              "id": {
                "type": "string",
                "format": "arm-id",
                "description": "Fully qualified resource ID for the resource. E.g. \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}\"",
                "readOnly": true
              },
              "name": {
                "type": "string",
                "description": "The name of the resource",
                "readOnly": true
              },
              "type": {
                "type": "string",
                "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                "readOnly": true
              },
              "systemData": {
                "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                "readOnly": true,
                "type": "object",
                "properties": {
                  "createdBy": {
                    "type": "string",
                    "description": "The identity that created the resource."
                  },
                  "createdByType": {
                    "type": "string",
                    "description": "The type of identity that created the resource.",
                    "enum": [
                      "User",
                      "Application",
                      "ManagedIdentity",
                      "Key"
                    ],
                    "x-ms-enum": {
                      "name": "createdByType",
                      "modelAsString": true
                    }
                  },
                  "createdAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp of resource creation (UTC)."
                  },
                  "lastModifiedBy": {
                    "type": "string",
                    "description": "The identity that last modified the resource."
                  },
                  "lastModifiedByType": {
                    "type": "string",
                    "description": "The type of identity that last modified the resource.",
                    "enum": [
                      "User",
                      "Application",
                      "ManagedIdentity",
                      "Key"
                    ],
                    "x-ms-enum": {
                      "name": "createdByType",
                      "modelAsString": true
                    }
                  },
                  "lastModifiedAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp of resource last modification (UTC)"
                  }
                }
              },
              "properties": {
                "description": "The resource-specific properties for this resource.",
                "x-ms-client-flatten": true,
                "type": "object",
                "properties": {
                  "provisioningState": {
                    "description": "Provisioning state of the resource.",
                    "readOnly": true,
                    "type": "string",
                    "enum": [
                      "Succeeded",
                      "Failed",
                      "Canceled",
                      "Accepted",
                      "Deleting"
                    ],
                    "x-ms-enum": {
                      "name": "ProvisioningState",
                      "modelAsString": true,
                      "values": [
                        {
                          "name": "Succeeded",
                          "value": "Succeeded",
                          "description": "Resource has been created."
                        },
                        {
                          "name": "Failed",
                          "value": "Failed",
                          "description": "Resource creation failed."
                        },
                        {
                          "name": "Canceled",
                          "value": "Canceled",
                          "description": "Resource creation was canceled."
                        },
                        {
                          "name": "Accepted",
                          "value": "Accepted",
                          "description": "Resource has been accepted by the server."
                        },
                        {
                          "name": "Deleting",
                          "value": "Deleting",
                          "description": "Resource is deleting."
                        }
                      ]
                    }
                  }
                }
              },
              "etag": {
                "type": "string",
                "description": "Resource ETag",
                "readOnly": true
              }
            }
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "BillingContainerProperties": {
      "type": "object",
      "description": "Defines the billingContainer properties.",
      "properties": {
        "provisioningState": {
          "description": "Provisioning state of the resource.",
          "readOnly": true,
          "type": "string",
          "enum": [
            "Succeeded",
            "Failed",
            "Canceled",
            "Accepted",
            "Deleting"
          ],
          "x-ms-enum": {
            "name": "ProvisioningState",
            "modelAsString": true,
            "values": [
              {
                "name": "Succeeded",
                "value": "Succeeded",
                "description": "Resource has been created."
              },
              {
                "name": "Failed",
                "value": "Failed",
                "description": "Resource creation failed."
              },
              {
                "name": "Canceled",
                "value": "Canceled",
                "description": "Resource creation was canceled."
              },
              {
                "name": "Accepted",
                "value": "Accepted",
                "description": "Resource has been accepted by the server."
              },
              {
                "name": "Deleting",
                "value": "Deleting",
                "description": "Resource is deleting."
              }
            ]
          }
        }
      }
    },
    "BrokerStateStoreDestinationConfiguration": {
      "type": "object",
      "description": "The configuration for a MQTT broker state store destination.",
      "properties": {
        "key": {
          "type": "string",
          "description": "The MQTT broker state store destination key."
        }
      },
      "required": [
        "key"
      ]
    },
    "DataPoint": {
      "type": "object",
      "description": "Defines the data point properties.",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the data point."
        },
        "dataSource": {
          "type": "string",
          "description": "The address of the source of the data in the asset (e.g. URL) so that a client can access the data source on the asset."
        },
        "dataPointConfiguration": {
          "type": "string",
          "description": "Stringified JSON that contains connector-specific configuration for the data point. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize."
        },
        "observabilityMode": {
          "type": "string",
          "description": "An indication of how the data point should be mapped to OpenTelemetry.",
          "default": "None",
          "enum": [
            "None",
            "Counter",
            "Gauge",
            "Histogram",
            "Log"
          ],
          "x-ms-enum": {
            "name": "DataPointObservabilityMode",
            "modelAsString": true,
            "values": [
              {
                "name": "None",
                "value": "None",
                "description": "No mapping to OpenTelemetry."
              },
              {
                "name": "Counter",
                "value": "Counter",
                "description": "Map as counter to OpenTelemetry."
              },
              {
                "name": "Gauge",
                "value": "Gauge",
                "description": "Map as gauge to OpenTelemetry."
              },
              {
                "name": "Histogram",
                "value": "Histogram",
                "description": "Map as histogram to OpenTelemetry."
              },
              {
                "name": "Log",
                "value": "Log",
                "description": "Map as log to OpenTelemetry."
              }
            ]
          }
        }
      }
    },
    "DataPointBase": {
      "type": "object",
      "description": "Defines the data point properties.",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the data point."
        },
        "dataSource": {
          "type": "string",
          "description": "The address of the source of the data in the asset (e.g. URL) so that a client can access the data source on the asset."
        },
        "dataPointConfiguration": {
          "type": "string",
          "description": "Stringified JSON that contains connector-specific configuration for the data point. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize."
        }
      },
      "required": [
        "name",
        "dataSource"
      ]
    },
    "Dataset": {
      "type": "object",
      "description": "Defines the dataset properties.",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the dataset."
        },
        "datasetConfiguration": {
          "type": "string",
          "description": "Stringified JSON that contains connector-specific JSON string that describes configuration for the specific dataset."
        },
        "topic": {
          "description": "Object that describes the topic information for the specific dataset.",
          "type": "object",
          "properties": {
            "path": {
              "type": "string",
              "description": "The topic path for messages published to an MQTT broker."
            },
            "retain": {
              "type": "string",
              "description": "When set to 'Keep', messages published to an MQTT broker will have the retain flag set. Default: 'Never'.",
              "default": "Never",
              "enum": [
                "Keep",
                "Never"
              ],
              "x-ms-enum": {
                "name": "TopicRetainType",
                "modelAsString": true,
                "values": [
                  {
                    "name": "Keep",
                    "value": "Keep",
                    "description": "Retain the messages."
                  },
                  {
                    "name": "Never",
                    "value": "Never",
                    "description": "Never retain messages."
                  }
                ]
              }
            }
          },
          "required": [
            "path"
          ]
        },
        "dataPoints": {
          "type": "array",
          "description": "Array of data points that are part of the dataset. Each data point can have per-data point configuration.",
          "items": {
            "type": "object",
            "description": "Defines the data point properties.",
            "properties": {
              "name": {
                "type": "string",
                "description": "The name of the data point."
              },
              "dataSource": {
                "type": "string",
                "description": "The address of the source of the data in the asset (e.g. URL) so that a client can access the data source on the asset."
              },
              "dataPointConfiguration": {
                "type": "string",
                "description": "Stringified JSON that contains connector-specific configuration for the data point. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize."
              },
              "observabilityMode": {
                "type": "string",
                "description": "An indication of how the data point should be mapped to OpenTelemetry.",
                "default": "None",
                "enum": [
                  "None",
                  "Counter",
                  "Gauge",
                  "Histogram",
                  "Log"
                ],
                "x-ms-enum": {
                  "name": "DataPointObservabilityMode",
                  "modelAsString": true,
                  "values": [
                    {
                      "name": "None",
                      "value": "None",
                      "description": "No mapping to OpenTelemetry."
                    },
                    {
                      "name": "Counter",
                      "value": "Counter",
                      "description": "Map as counter to OpenTelemetry."
                    },
                    {
                      "name": "Gauge",
                      "value": "Gauge",
                      "description": "Map as gauge to OpenTelemetry."
                    },
                    {
                      "name": "Histogram",
                      "value": "Histogram",
                      "description": "Map as histogram to OpenTelemetry."
                    },
                    {
                      "name": "Log",
                      "value": "Log",
                      "description": "Map as log to OpenTelemetry."
                    }
                  ]
                }
              }
            }
          },
          "x-ms-identifiers": []
        }
      },
      "required": [
        "name"
      ]
    },
    "DatasetBrokerStateStoreDestination": {
      "type": "object",
      "description": "The type for a MQTT broker state store destination.",
      "properties": {
        "configuration": {
          "description": "The MQTT broker state store destination configuration.",
          "type": "object",
          "properties": {
            "key": {
              "type": "string",
              "description": "The MQTT broker state store destination key."
            }
          },
          "required": [
            "key"
          ]
        }
      },
      "required": [
        "configuration"
      ],
      "allOf": [
        {
          "type": "object",
          "description": "The type of the destination.",
          "properties": {
            "target": {
              "description": "Target destination.",
              "type": "string",
              "enum": [
                "Mqtt",
                "BrokerStateStore",
                "Storage"
              ],
              "x-ms-enum": {
                "name": "DatasetDestinationTarget",
                "modelAsString": true,
                "values": [
                  {
                    "name": "Mqtt",
                    "value": "Mqtt",
                    "description": "MQTT target."
                  },
                  {
                    "name": "BrokerStateStore",
                    "value": "BrokerStateStore",
                    "description": "Broker State Store target."
                  },
                  {
                    "name": "Storage",
                    "value": "Storage",
                    "description": "Storage target."
                  }
                ]
              }
            }
          },
          "discriminator": "target",
          "required": [
            "target"
          ]
        }
      ],
      "x-ms-discriminator-value": "BrokerStateStore"
    },
    "DatasetDestination": {
      "type": "object",
      "description": "The type of the destination.",
      "properties": {
        "target": {
          "description": "Target destination.",
          "type": "string",
          "enum": [
            "Mqtt",
            "BrokerStateStore",
            "Storage"
          ],
          "x-ms-enum": {
            "name": "DatasetDestinationTarget",
            "modelAsString": true,
            "values": [
              {
                "name": "Mqtt",
                "value": "Mqtt",
                "description": "MQTT target."
              },
              {
                "name": "BrokerStateStore",
                "value": "BrokerStateStore",
                "description": "Broker State Store target."
              },
              {
                "name": "Storage",
                "value": "Storage",
                "description": "Storage target."
              }
            ]
          }
        }
      },
      "discriminator": "target",
      "required": [
        "target"
      ]
    },
    "DatasetDestinationTarget": {
      "type": "string",
      "description": "The set of supported dataset destinations for an asset.",
      "enum": [
        "Mqtt",
        "BrokerStateStore",
        "Storage"
      ],
      "x-ms-enum": {
        "name": "DatasetDestinationTarget",
        "modelAsString": true,
        "values": [
          {
            "name": "Mqtt",
            "value": "Mqtt",
            "description": "MQTT target."
          },
          {
            "name": "BrokerStateStore",
            "value": "BrokerStateStore",
            "description": "Broker State Store target."
          },
          {
            "name": "Storage",
            "value": "Storage",
            "description": "Storage target."
          }
        ]
      }
    },
    "DatasetMqttDestination": {
      "type": "object",
      "description": "The type for a MQTT destination.",
      "properties": {
        "configuration": {
          "description": "The MQTT destination configuration.",
          "type": "object",
          "properties": {
            "topic": {
              "type": "string",
              "description": "The MQTT topic."
            },
            "retain": {
              "type": "string",
              "description": "When set to 'Keep', messages published to an MQTT broker will have the retain flag set. Default: 'Never'.",
              "default": "Never",
              "enum": [
                "Keep",
                "Never"
              ],
              "x-ms-enum": {
                "name": "TopicRetainType",
                "modelAsString": true,
                "values": [
                  {
                    "name": "Keep",
                    "value": "Keep",
                    "description": "Retain the messages."
                  },
                  {
                    "name": "Never",
                    "value": "Never",
                    "description": "Never retain messages."
                  }
                ]
              }
            },
            "qos": {
              "type": "string",
              "description": "The MQTT QoS setting. Defaults to QoS 1.",
              "default": "Qos1",
              "enum": [
                "Qos0",
                "Qos1"
              ],
              "x-ms-enum": {
                "name": "MqttDestinationQos",
                "modelAsString": true,
                "values": [
                  {
                    "name": "Qos0",
                    "value": "Qos0",
                    "description": "QoS 0."
                  },
                  {
                    "name": "Qos1",
                    "value": "Qos1",
                    "description": "QoS 1."
                  }
                ]
              }
            },
            "ttl": {
              "type": "integer",
              "format": "int64",
              "description": "The MQTT TTL setting."
            }
          },
          "required": [
            "topic"
          ]
        }
      },
      "required": [
        "configuration"
      ],
      "allOf": [
        {
          "type": "object",
          "description": "The type of the destination.",
          "properties": {
            "target": {
              "description": "Target destination.",
              "type": "string",
              "enum": [
                "Mqtt",
                "BrokerStateStore",
                "Storage"
              ],
              "x-ms-enum": {
                "name": "DatasetDestinationTarget",
                "modelAsString": true,
                "values": [
                  {
                    "name": "Mqtt",
                    "value": "Mqtt",
                    "description": "MQTT target."
                  },
                  {
                    "name": "BrokerStateStore",
                    "value": "BrokerStateStore",
                    "description": "Broker State Store target."
                  },
                  {
                    "name": "Storage",
                    "value": "Storage",
                    "description": "Storage target."
                  }
                ]
              }
            }
          },
          "discriminator": "target",
          "required": [
            "target"
          ]
        }
      ],
      "x-ms-discriminator-value": "Mqtt"
    },
    "DatasetStorageDestination": {
      "type": "object",
      "description": "The type for a storage destination.",
      "properties": {
        "configuration": {
          "description": "The storage destination configuration.",
          "type": "object",
          "properties": {
            "path": {
              "type": "string",
              "description": "The storage destination path."
            }
          },
          "required": [
            "path"
          ]
        }
      },
      "required": [
        "configuration"
      ],
      "allOf": [
        {
          "type": "object",
          "description": "The type of the destination.",
          "properties": {
            "target": {
              "description": "Target destination.",
              "type": "string",
              "enum": [
                "Mqtt",
                "BrokerStateStore",
                "Storage"
              ],
              "x-ms-enum": {
                "name": "DatasetDestinationTarget",
                "modelAsString": true,
                "values": [
                  {
                    "name": "Mqtt",
                    "value": "Mqtt",
                    "description": "MQTT target."
                  },
                  {
                    "name": "BrokerStateStore",
                    "value": "BrokerStateStore",
                    "description": "Broker State Store target."
                  },
                  {
                    "name": "Storage",
                    "value": "Storage",
                    "description": "Storage target."
                  }
                ]
              }
            }
          },
          "discriminator": "target",
          "required": [
            "target"
          ]
        }
      ],
      "x-ms-discriminator-value": "Storage"
    },
    "DeviceMessagingEndpoint": {
      "type": "object",
      "description": "Device messaging endpoint model.",
      "properties": {
        "endpointType": {
          "type": "string",
          "description": "Type of connection used for the messaging endpoint."
        },
        "address": {
          "type": "string",
          "description": "The endpoint address to connect to."
        }
      },
      "required": [
        "address"
      ]
    },
    "DeviceMessagingEndpointUpdate": {
      "type": "object",
      "description": "Device messaging endpoint model.",
      "properties": {
        "endpointType": {
          "type": "string",
          "description": "Type of connection used for the messaging endpoint."
        },
        "address": {
          "type": "string",
          "description": "The endpoint address to connect to."
        }
      }
    },
    "DeviceRef": {
      "type": "object",
      "description": "Defines which device and endpoint to use for this asset",
      "properties": {
        "deviceName": {
          "type": "string",
          "description": "Name of the device resource"
        },
        "endpointName": {
          "type": "string",
          "description": "The name of endpoint to use"
        }
      },
      "required": [
        "deviceName",
        "endpointName"
      ]
    },
    "DeviceRefUpdate": {
      "type": "object",
      "description": "Defines which device and endpoint to use for this asset",
      "properties": {
        "deviceName": {
          "type": "string",
          "description": "Name of the device resource"
        },
        "endpointName": {
          "type": "string",
          "description": "The name of endpoint to use"
        }
      }
    },
    "DeviceStatus": {
      "type": "object",
      "description": "Defines the device status properties.",
      "properties": {
        "config": {
          "description": "Defines the device status config properties.",
          "readOnly": true,
          "type": "object",
          "properties": {
            "version": {
              "type": "integer",
              "format": "int64",
              "description": "A read-only incremental counter indicating the number of times the configuration has been modified from the perspective of the current actual (edge) state of the CRD. Edge would be the only writer of this value and would sync back up to the cloud. In steady state, this should equal version.",
              "readOnly": true
            },
            "lastTransitionTime": {
              "type": "string",
              "format": "date-time",
              "description": "A read-only timestamp indicating the last time the configuration has been modified from the perspective of the current actual (edge) state of the CRD. Edge would be the only writer of this value and would sync back up to the cloud.",
              "readOnly": true
            },
            "error": {
              "description": "Object to transfer and persist errors that originate from the edge.",
              "readOnly": true,
              "type": "object",
              "properties": {
                "code": {
                  "type": "string",
                  "description": "Error code for classification of errors (ex: '400', '404', '500', etc.).",
                  "readOnly": true
                },
                "message": {
                  "type": "string",
                  "description": "Human-readable helpful error message to provide additional context for error (e.g.,: “Capability ID 'foo' does not exist”).",
                  "readOnly": true
                },
                "details": {
                  "type": "array",
                  "description": "Array of error details that describe the status of each error.",
                  "items": {
                    "type": "object",
                    "description": "Defines the error details properties.",
                    "properties": {
                      "code": {
                        "type": "string",
                        "description": "Multi-part error code for classification and root causing of errors (ex: 400.200.100.432).",
                        "readOnly": true
                      },
                      "message": {
                        "type": "string",
                        "description": "Human-readable helpful error message to provide additional context for error (ex: “Authentication method not supported”).",
                        "readOnly": true
                      },
                      "info": {
                        "type": "string",
                        "description": "Human-readable helpful detailed text context for debugging (ex: “The following mechanisms are supported...”).",
                        "readOnly": true
                      },
                      "correlationId": {
                        "type": "string",
                        "description": "Unique identifier for the transaction to aid in debugging.",
                        "readOnly": true
                      }
                    }
                  },
                  "readOnly": true,
                  "x-ms-identifiers": []
                }
              }
            }
          }
        },
        "endpoints": {
          "description": "Defines the device status for inbound/outbound endpoints.",
          "readOnly": true,
          "type": "object",
          "properties": {
            "inbound": {
              "type": "object",
              "description": "KeyValue pair representing status of inbound endpoints.",
              "additionalProperties": {
                "type": "object",
                "description": "Defines the device status properties.",
                "properties": {
                  "error": {
                    "description": "Defines the error related to this endpoint.",
                    "readOnly": true,
                    "type": "object",
                    "properties": {
                      "code": {
                        "type": "string",
                        "description": "Error code for classification of errors (ex: '400', '404', '500', etc.).",
                        "readOnly": true
                      },
                      "message": {
                        "type": "string",
                        "description": "Human-readable helpful error message to provide additional context for error (e.g.,: “Capability ID 'foo' does not exist”).",
                        "readOnly": true
                      },
                      "details": {
                        "type": "array",
                        "description": "Array of error details that describe the status of each error.",
                        "items": {
                          "type": "object",
                          "description": "Defines the error details properties.",
                          "properties": {
                            "code": {
                              "type": "string",
                              "description": "Multi-part error code for classification and root causing of errors (ex: 400.200.100.432).",
                              "readOnly": true
                            },
                            "message": {
                              "type": "string",
                              "description": "Human-readable helpful error message to provide additional context for error (ex: “Authentication method not supported”).",
                              "readOnly": true
                            },
                            "info": {
                              "type": "string",
                              "description": "Human-readable helpful detailed text context for debugging (ex: “The following mechanisms are supported...”).",
                              "readOnly": true
                            },
                            "correlationId": {
                              "type": "string",
                              "description": "Unique identifier for the transaction to aid in debugging.",
                              "readOnly": true
                            }
                          }
                        },
                        "readOnly": true,
                        "x-ms-identifiers": []
                      }
                    }
                  }
                }
              },
              "readOnly": true
            }
          }
        }
      }
    },
    "DeviceStatusEndpoint": {
      "type": "object",
      "description": "Defines the device status properties.",
      "properties": {
        "error": {
          "description": "Defines the error related to this endpoint.",
          "readOnly": true,
          "type": "object",
          "properties": {
            "code": {
              "type": "string",
              "description": "Error code for classification of errors (ex: '400', '404', '500', etc.).",
              "readOnly": true
            },
            "message": {
              "type": "string",
              "description": "Human-readable helpful error message to provide additional context for error (e.g.,: “Capability ID 'foo' does not exist”).",
              "readOnly": true
            },
            "details": {
              "type": "array",
              "description": "Array of error details that describe the status of each error.",
              "items": {
                "type": "object",
                "description": "Defines the error details properties.",
                "properties": {
                  "code": {
                    "type": "string",
                    "description": "Multi-part error code for classification and root causing of errors (ex: 400.200.100.432).",
                    "readOnly": true
                  },
                  "message": {
                    "type": "string",
                    "description": "Human-readable helpful error message to provide additional context for error (ex: “Authentication method not supported”).",
                    "readOnly": true
                  },
                  "info": {
                    "type": "string",
                    "description": "Human-readable helpful detailed text context for debugging (ex: “The following mechanisms are supported...”).",
                    "readOnly": true
                  },
                  "correlationId": {
                    "type": "string",
                    "description": "Unique identifier for the transaction to aid in debugging.",
                    "readOnly": true
                  }
                }
              },
              "readOnly": true,
              "x-ms-identifiers": []
            }
          }
        }
      }
    },
    "DeviceStatusEndpoints": {
      "type": "object",
      "description": "Defines the device status for inbound/outbound endpoints.",
      "properties": {
        "inbound": {
          "type": "object",
          "description": "KeyValue pair representing status of inbound endpoints.",
          "additionalProperties": {
            "type": "object",
            "description": "Defines the device status properties.",
            "properties": {
              "error": {
                "description": "Defines the error related to this endpoint.",
                "readOnly": true,
                "type": "object",
                "properties": {
                  "code": {
                    "type": "string",
                    "description": "Error code for classification of errors (ex: '400', '404', '500', etc.).",
                    "readOnly": true
                  },
                  "message": {
                    "type": "string",
                    "description": "Human-readable helpful error message to provide additional context for error (e.g.,: “Capability ID 'foo' does not exist”).",
                    "readOnly": true
                  },
                  "details": {
                    "type": "array",
                    "description": "Array of error details that describe the status of each error.",
                    "items": {
                      "type": "object",
                      "description": "Defines the error details properties.",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Multi-part error code for classification and root causing of errors (ex: 400.200.100.432).",
                          "readOnly": true
                        },
                        "message": {
                          "type": "string",
                          "description": "Human-readable helpful error message to provide additional context for error (ex: “Authentication method not supported”).",
                          "readOnly": true
                        },
                        "info": {
                          "type": "string",
                          "description": "Human-readable helpful detailed text context for debugging (ex: “The following mechanisms are supported...”).",
                          "readOnly": true
                        },
                        "correlationId": {
                          "type": "string",
                          "description": "Unique identifier for the transaction to aid in debugging.",
                          "readOnly": true
                        }
                      }
                    },
                    "readOnly": true,
                    "x-ms-identifiers": []
                  }
                }
              }
            }
          },
          "readOnly": true
        }
      }
    },
    "DiscoveredInboundEndpoints": {
      "type": "object",
      "description": "An endpoint to connect to the device.",
      "properties": {
        "endpointType": {
          "type": "string",
          "description": "Type of connection endpoint."
        },
        "address": {
          "type": "string",
          "description": "The endpoint address & port. This can be either an IP address (e.g., 192.168.1.1) or a fully qualified domain name (FQDN, e.g., server.example.com)."
        },
        "version": {
          "type": "string",
          "description": "Protocol version associated with the endpoint e.g. 1 or 2 for endpointType Microsoft.HTTP, and 3.5 or 5.0 for endpointType Microsoft.Mqtt etc."
        },
        "supportedAuthenticationMethods": {
          "type": "array",
          "description": "List of supported authentication methods supported by device for Inbound connections.",
          "items": {
            "type": "string",
            "description": "The method to authenticate the user of the client at the server.",
            "enum": [
              "Anonymous",
              "Certificate",
              "UsernamePassword"
            ],
            "x-ms-enum": {
              "name": "AuthenticationMethod",
              "modelAsString": true,
              "values": [
                {
                  "name": "Anonymous",
                  "value": "Anonymous",
                  "description": "The user authentication method is anonymous."
                },
                {
                  "name": "Certificate",
                  "value": "Certificate",
                  "description": "The user authentication method is an x509 certificate."
                },
                {
                  "name": "UsernamePassword",
                  "value": "UsernamePassword",
                  "description": "The user authentication method is a username and password."
                }
              ]
            }
          }
        },
        "additionalConfiguration": {
          "type": "string",
          "description": "Stringified JSON that contains configuration to be used by the connector (e.g., OPC UA, ONVIF)."
        },
        "lastUpdatedOn": {
          "type": "string",
          "format": "date-time",
          "description": "The timestamp (in UTC) when the endpoint was discovered."
        }
      },
      "required": [
        "endpointType",
        "address"
      ]
    },
    "DiscoveredInboundEndpointsUpdate": {
      "type": "object",
      "description": "An endpoint to connect to the device.",
      "properties": {
        "endpointType": {
          "type": "string",
          "description": "Type of connection endpoint."
        },
        "address": {
          "type": "string",
          "description": "The endpoint address & port. This can be either an IP address (e.g., 192.168.1.1) or a fully qualified domain name (FQDN, e.g., server.example.com)."
        },
        "version": {
          "type": "string",
          "description": "Protocol version associated with the endpoint e.g. 1 or 2 for endpointType Microsoft.HTTP, and 3.5 or 5.0 for endpointType Microsoft.Mqtt etc."
        },
        "supportedAuthenticationMethods": {
          "type": "array",
          "description": "List of supported authentication methods supported by device for Inbound connections.",
          "items": {
            "type": "string",
            "description": "The method to authenticate the user of the client at the server.",
            "enum": [
              "Anonymous",
              "Certificate",
              "UsernamePassword"
            ],
            "x-ms-enum": {
              "name": "AuthenticationMethod",
              "modelAsString": true,
              "values": [
                {
                  "name": "Anonymous",
                  "value": "Anonymous",
                  "description": "The user authentication method is anonymous."
                },
                {
                  "name": "Certificate",
                  "value": "Certificate",
                  "description": "The user authentication method is an x509 certificate."
                },
                {
                  "name": "UsernamePassword",
                  "value": "UsernamePassword",
                  "description": "The user authentication method is a username and password."
                }
              ]
            }
          }
        },
        "additionalConfiguration": {
          "type": "string",
          "description": "Stringified JSON that contains configuration to be used by the connector (e.g., OPC UA, ONVIF)."
        },
        "lastUpdatedOn": {
          "type": "string",
          "format": "date-time",
          "description": "The timestamp (in UTC) when the endpoint was discovered."
        }
      }
    },
    "DiscoveredMessagingEndpoints": {
      "type": "object",
      "description": "Connection endpoint URL a device can use to connect to a service.",
      "properties": {
        "inbound": {
          "type": "object",
          "description": "Set of endpoints to connect to the device.",
          "additionalProperties": {
            "type": "object",
            "description": "An endpoint to connect to the device.",
            "properties": {
              "endpointType": {
                "type": "string",
                "description": "Type of connection endpoint."
              },
              "address": {
                "type": "string",
                "description": "The endpoint address & port. This can be either an IP address (e.g., 192.168.1.1) or a fully qualified domain name (FQDN, e.g., server.example.com)."
              },
              "version": {
                "type": "string",
                "description": "Protocol version associated with the endpoint e.g. 1 or 2 for endpointType Microsoft.HTTP, and 3.5 or 5.0 for endpointType Microsoft.Mqtt etc."
              },
              "supportedAuthenticationMethods": {
                "type": "array",
                "description": "List of supported authentication methods supported by device for Inbound connections.",
                "items": {
                  "type": "string",
                  "description": "The method to authenticate the user of the client at the server.",
                  "enum": [
                    "Anonymous",
                    "Certificate",
                    "UsernamePassword"
                  ],
                  "x-ms-enum": {
                    "name": "AuthenticationMethod",
                    "modelAsString": true,
                    "values": [
                      {
                        "name": "Anonymous",
                        "value": "Anonymous",
                        "description": "The user authentication method is anonymous."
                      },
                      {
                        "name": "Certificate",
                        "value": "Certificate",
                        "description": "The user authentication method is an x509 certificate."
                      },
                      {
                        "name": "UsernamePassword",
                        "value": "UsernamePassword",
                        "description": "The user authentication method is a username and password."
                      }
                    ]
                  }
                }
              },
              "additionalConfiguration": {
                "type": "string",
                "description": "Stringified JSON that contains configuration to be used by the connector (e.g., OPC UA, ONVIF)."
              },
              "lastUpdatedOn": {
                "type": "string",
                "format": "date-time",
                "description": "The timestamp (in UTC) when the endpoint was discovered."
              }
            },
            "required": [
              "endpointType",
              "address"
            ]
          }
        },
        "outbound": {
          "description": "Set of endpoints a device can connect to.",
          "type": "object",
          "properties": {
            "assigned": {
              "type": "object",
              "description": "Endpoints the device can connect to.",
              "additionalProperties": {
                "type": "object",
                "description": "Device messaging endpoint model.",
                "properties": {
                  "endpointType": {
                    "type": "string",
                    "description": "Type of connection used for the messaging endpoint."
                  },
                  "address": {
                    "type": "string",
                    "description": "The endpoint address to connect to."
                  }
                },
                "required": [
                  "address"
                ]
              }
            }
          },
          "required": [
            "assigned"
          ]
        }
      }
    },
    "DiscoveredMessagingEndpointsUpdate": {
      "type": "object",
      "description": "Connection endpoint URL a device can use to connect to a service.",
      "properties": {
        "inbound": {
          "type": "object",
          "description": "Set of endpoints to connect to the device.",
          "additionalProperties": {
            "type": "object",
            "description": "An endpoint to connect to the device.",
            "properties": {
              "endpointType": {
                "type": "string",
                "description": "Type of connection endpoint."
              },
              "address": {
                "type": "string",
                "description": "The endpoint address & port. This can be either an IP address (e.g., 192.168.1.1) or a fully qualified domain name (FQDN, e.g., server.example.com)."
              },
              "version": {
                "type": "string",
                "description": "Protocol version associated with the endpoint e.g. 1 or 2 for endpointType Microsoft.HTTP, and 3.5 or 5.0 for endpointType Microsoft.Mqtt etc."
              },
              "supportedAuthenticationMethods": {
                "type": "array",
                "description": "List of supported authentication methods supported by device for Inbound connections.",
                "items": {
                  "type": "string",
                  "description": "The method to authenticate the user of the client at the server.",
                  "enum": [
                    "Anonymous",
                    "Certificate",
                    "UsernamePassword"
                  ],
                  "x-ms-enum": {
                    "name": "AuthenticationMethod",
                    "modelAsString": true,
                    "values": [
                      {
                        "name": "Anonymous",
                        "value": "Anonymous",
                        "description": "The user authentication method is anonymous."
                      },
                      {
                        "name": "Certificate",
                        "value": "Certificate",
                        "description": "The user authentication method is an x509 certificate."
                      },
                      {
                        "name": "UsernamePassword",
                        "value": "UsernamePassword",
                        "description": "The user authentication method is a username and password."
                      }
                    ]
                  }
                }
              },
              "additionalConfiguration": {
                "type": "string",
                "description": "Stringified JSON that contains configuration to be used by the connector (e.g., OPC UA, ONVIF)."
              },
              "lastUpdatedOn": {
                "type": "string",
                "format": "date-time",
                "description": "The timestamp (in UTC) when the endpoint was discovered."
              }
            }
          }
        },
        "outbound": {
          "description": "Set of endpoints a device can connect to.",
          "type": "object",
          "properties": {
            "assigned": {
              "type": "object",
              "description": "Endpoints the device can connect to.",
              "additionalProperties": {
                "type": "object",
                "description": "Device messaging endpoint model.",
                "properties": {
                  "endpointType": {
                    "type": "string",
                    "description": "Type of connection used for the messaging endpoint."
                  },
                  "address": {
                    "type": "string",
                    "description": "The endpoint address to connect to."
                  }
                }
              }
            }
          }
        }
      }
    },
    "DiscoveredOutboundEndpoints": {
      "type": "object",
      "description": "Property bag contains the device's outbound endpoints",
      "properties": {
        "assigned": {
          "type": "object",
          "description": "Endpoints the device can connect to.",
          "additionalProperties": {
            "type": "object",
            "description": "Device messaging endpoint model.",
            "properties": {
              "endpointType": {
                "type": "string",
                "description": "Type of connection used for the messaging endpoint."
              },
              "address": {
                "type": "string",
                "description": "The endpoint address to connect to."
              }
            },
            "required": [
              "address"
            ]
          }
        }
      },
      "required": [
        "assigned"
      ]
    },
    "DiscoveredOutboundEndpointsUpdate": {
      "type": "object",
      "description": "Property bag contains the device's outbound endpoints",
      "properties": {
        "assigned": {
          "type": "object",
          "description": "Endpoints the device can connect to.",
          "additionalProperties": {
            "type": "object",
            "description": "Device messaging endpoint model.",
            "properties": {
              "endpointType": {
                "type": "string",
                "description": "Type of connection used for the messaging endpoint."
              },
              "address": {
                "type": "string",
                "description": "The endpoint address to connect to."
              }
            }
          }
        }
      }
    },
    "Error": {
      "type": "object",
      "description": "Defines the error object with properties.",
      "properties": {
        "code": {
          "type": "string",
          "description": "Error code for classification of errors (ex: '400', '404', '500', etc.).",
          "readOnly": true
        },
        "message": {
          "type": "string",
          "description": "Human-readable helpful error message to provide additional context for error (e.g.,: “Capability ID 'foo' does not exist”).",
          "readOnly": true
        },
        "details": {
          "type": "array",
          "description": "Array of error details that describe the status of each error.",
          "items": {
            "type": "object",
            "description": "Defines the error details properties.",
            "properties": {
              "code": {
                "type": "string",
                "description": "Multi-part error code for classification and root causing of errors (ex: 400.200.100.432).",
                "readOnly": true
              },
              "message": {
                "type": "string",
                "description": "Human-readable helpful error message to provide additional context for error (ex: “Authentication method not supported”).",
                "readOnly": true
              },
              "info": {
                "type": "string",
                "description": "Human-readable helpful detailed text context for debugging (ex: “The following mechanisms are supported...”).",
                "readOnly": true
              },
              "correlationId": {
                "type": "string",
                "description": "Unique identifier for the transaction to aid in debugging.",
                "readOnly": true
              }
            }
          },
          "readOnly": true,
          "x-ms-identifiers": []
        }
      }
    },
    "ErrorDetails": {
      "type": "object",
      "description": "Defines the error details properties.",
      "properties": {
        "code": {
          "type": "string",
          "description": "Multi-part error code for classification and root causing of errors (ex: 400.200.100.432).",
          "readOnly": true
        },
        "message": {
          "type": "string",
          "description": "Human-readable helpful error message to provide additional context for error (ex: “Authentication method not supported”).",
          "readOnly": true
        },
        "info": {
          "type": "string",
          "description": "Human-readable helpful detailed text context for debugging (ex: “The following mechanisms are supported...”).",
          "readOnly": true
        },
        "correlationId": {
          "type": "string",
          "description": "Unique identifier for the transaction to aid in debugging.",
          "readOnly": true
        }
      }
    },
    "Event": {
      "type": "object",
      "description": "Defines the event properties.",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the event."
        },
        "eventNotifier": {
          "type": "string",
          "description": "The address of the notifier of the event in the asset (e.g. URL) so that a client can access the event on the asset."
        },
        "eventConfiguration": {
          "type": "string",
          "description": "Stringified JSON that contains connector-specific configuration for the event. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize."
        },
        "topic": {
          "description": "Object that describes the topic information for the specific event.",
          "type": "object",
          "properties": {
            "path": {
              "type": "string",
              "description": "The topic path for messages published to an MQTT broker."
            },
            "retain": {
              "type": "string",
              "description": "When set to 'Keep', messages published to an MQTT broker will have the retain flag set. Default: 'Never'.",
              "default": "Never",
              "enum": [
                "Keep",
                "Never"
              ],
              "x-ms-enum": {
                "name": "TopicRetainType",
                "modelAsString": true,
                "values": [
                  {
                    "name": "Keep",
                    "value": "Keep",
                    "description": "Retain the messages."
                  },
                  {
                    "name": "Never",
                    "value": "Never",
                    "description": "Never retain messages."
                  }
                ]
              }
            }
          },
          "required": [
            "path"
          ]
        },
        "observabilityMode": {
          "type": "string",
          "description": "An indication of how the event should be mapped to OpenTelemetry.",
          "default": "None",
          "enum": [
            "None",
            "Log"
          ],
          "x-ms-enum": {
            "name": "EventObservabilityMode",
            "modelAsString": true,
            "values": [
              {
                "name": "None",
                "value": "None",
                "description": "No mapping to OpenTelemetry."
              },
              {
                "name": "Log",
                "value": "Log",
                "description": "Map as log to OpenTelemetry."
              }
            ]
          }
        }
      }
    },
    "EventBase": {
      "type": "object",
      "description": "Defines the event properties.",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the event."
        },
        "eventNotifier": {
          "type": "string",
          "description": "The address of the notifier of the event in the asset (e.g. URL) so that a client can access the event on the asset."
        },
        "eventConfiguration": {
          "type": "string",
          "description": "Stringified JSON that contains connector-specific configuration for the event. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize."
        },
        "topic": {
          "description": "Object that describes the topic information for the specific event.",
          "type": "object",
          "properties": {
            "path": {
              "type": "string",
              "description": "The topic path for messages published to an MQTT broker."
            },
            "retain": {
              "type": "string",
              "description": "When set to 'Keep', messages published to an MQTT broker will have the retain flag set. Default: 'Never'.",
              "default": "Never",
              "enum": [
                "Keep",
                "Never"
              ],
              "x-ms-enum": {
                "name": "TopicRetainType",
                "modelAsString": true,
                "values": [
                  {
                    "name": "Keep",
                    "value": "Keep",
                    "description": "Retain the messages."
                  },
                  {
                    "name": "Never",
                    "value": "Never",
                    "description": "Never retain messages."
                  }
                ]
              }
            }
          },
          "required": [
            "path"
          ]
        }
      },
      "required": [
        "name",
        "eventNotifier"
      ]
    },
    "EventDestination": {
      "type": "object",
      "description": "The type of the destination.",
      "properties": {
        "target": {
          "description": "Target destination.",
          "type": "string",
          "enum": [
            "Mqtt",
            "Storage"
          ],
          "x-ms-enum": {
            "name": "EventDestinationTarget",
            "modelAsString": true,
            "values": [
              {
                "name": "Mqtt",
                "value": "Mqtt",
                "description": "MQTT target."
              },
              {
                "name": "Storage",
                "value": "Storage",
                "description": "Storage target."
              }
            ]
          }
        }
      },
      "discriminator": "target",
      "required": [
        "target"
      ]
    },
    "EventDestinationTarget": {
      "type": "string",
      "description": "The set of supported event destinations for an asset.",
      "enum": [
        "Mqtt",
        "Storage"
      ],
      "x-ms-enum": {
        "name": "EventDestinationTarget",
        "modelAsString": true,
        "values": [
          {
            "name": "Mqtt",
            "value": "Mqtt",
            "description": "MQTT target."
          },
          {
            "name": "Storage",
            "value": "Storage",
            "description": "Storage target."
          }
        ]
      }
    },
    "EventMqttDestination": {
      "type": "object",
      "description": "The type for a MQTT destination.",
      "properties": {
        "configuration": {
          "description": "The MQTT destination configuration.",
          "type": "object",
          "properties": {
            "topic": {
              "type": "string",
              "description": "The MQTT topic."
            },
            "retain": {
              "type": "string",
              "description": "When set to 'Keep', messages published to an MQTT broker will have the retain flag set. Default: 'Never'.",
              "default": "Never",
              "enum": [
                "Keep",
                "Never"
              ],
              "x-ms-enum": {
                "name": "TopicRetainType",
                "modelAsString": true,
                "values": [
                  {
                    "name": "Keep",
                    "value": "Keep",
                    "description": "Retain the messages."
                  },
                  {
                    "name": "Never",
                    "value": "Never",
                    "description": "Never retain messages."
                  }
                ]
              }
            },
            "qos": {
              "type": "string",
              "description": "The MQTT QoS setting. Defaults to QoS 1.",
              "default": "Qos1",
              "enum": [
                "Qos0",
                "Qos1"
              ],
              "x-ms-enum": {
                "name": "MqttDestinationQos",
                "modelAsString": true,
                "values": [
                  {
                    "name": "Qos0",
                    "value": "Qos0",
                    "description": "QoS 0."
                  },
                  {
                    "name": "Qos1",
                    "value": "Qos1",
                    "description": "QoS 1."
                  }
                ]
              }
            },
            "ttl": {
              "type": "integer",
              "format": "int64",
              "description": "The MQTT TTL setting."
            }
          },
          "required": [
            "topic"
          ]
        }
      },
      "required": [
        "configuration"
      ],
      "allOf": [
        {
          "type": "object",
          "description": "The type of the destination.",
          "properties": {
            "target": {
              "description": "Target destination.",
              "type": "string",
              "enum": [
                "Mqtt",
                "Storage"
              ],
              "x-ms-enum": {
                "name": "EventDestinationTarget",
                "modelAsString": true,
                "values": [
                  {
                    "name": "Mqtt",
                    "value": "Mqtt",
                    "description": "MQTT target."
                  },
                  {
                    "name": "Storage",
                    "value": "Storage",
                    "description": "Storage target."
                  }
                ]
              }
            }
          },
          "discriminator": "target",
          "required": [
            "target"
          ]
        }
      ],
      "x-ms-discriminator-value": "Mqtt"
    },
    "EventStorageDestination": {
      "type": "object",
      "description": "The type for a storage destination.",
      "properties": {
        "configuration": {
          "description": "The storage destination configuration.",
          "type": "object",
          "properties": {
            "path": {
              "type": "string",
              "description": "The storage destination path."
            }
          },
          "required": [
            "path"
          ]
        }
      },
      "required": [
        "configuration"
      ],
      "allOf": [
        {
          "type": "object",
          "description": "The type of the destination.",
          "properties": {
            "target": {
              "description": "Target destination.",
              "type": "string",
              "enum": [
                "Mqtt",
                "Storage"
              ],
              "x-ms-enum": {
                "name": "EventDestinationTarget",
                "modelAsString": true,
                "values": [
                  {
                    "name": "Mqtt",
                    "value": "Mqtt",
                    "description": "MQTT target."
                  },
                  {
                    "name": "Storage",
                    "value": "Storage",
                    "description": "Storage target."
                  }
                ]
              }
            }
          },
          "discriminator": "target",
          "required": [
            "target"
          ]
        }
      ],
      "x-ms-discriminator-value": "Storage"
    },
    "ExtendedLocation": {
      "type": "object",
      "description": "The extended location.",
      "properties": {
        "type": {
          "type": "string",
          "description": "The extended location type."
        },
        "name": {
          "type": "string",
          "description": "The extended location name."
        }
      },
      "required": [
        "type",
        "name"
      ]
    },
    "Format": {
      "type": "string",
      "description": "Defines the schema format.",
      "enum": [
        "JsonSchema/draft-07",
        "Delta/1.0"
      ],
      "x-ms-enum": {
        "name": "Format",
        "modelAsString": true,
        "values": [
          {
            "name": "JsonSchema_draft7",
            "value": "JsonSchema/draft-07",
            "description": "JSON Schema version draft 7 format"
          },
          {
            "name": "Delta_1_0",
            "value": "Delta/1.0",
            "description": "Delta format"
          }
        ]
      }
    },
    "HostAuthentication": {
      "type": "object",
      "description": "Definition of the client authentication mechanism to the host.",
      "properties": {
        "method": {
          "type": "string",
          "description": "Defines the method to authenticate the user of the client at the server.",
          "default": "Certificate",
          "enum": [
            "Anonymous",
            "Certificate",
            "UsernamePassword"
          ],
          "x-ms-enum": {
            "name": "AuthenticationMethod",
            "modelAsString": true,
            "values": [
              {
                "name": "Anonymous",
                "value": "Anonymous",
                "description": "The user authentication method is anonymous."
              },
              {
                "name": "Certificate",
                "value": "Certificate",
                "description": "The user authentication method is an x509 certificate."
              },
              {
                "name": "UsernamePassword",
                "value": "UsernamePassword",
                "description": "The user authentication method is a username and password."
              }
            ]
          }
        },
        "usernamePasswordCredentials": {
          "description": "Defines the username and password references when UsernamePassword user authentication mode is selected.",
          "type": "object",
          "properties": {
            "usernameSecretName": {
              "type": "string",
              "description": "The name of the secret containing the username."
            },
            "passwordSecretName": {
              "type": "string",
              "description": "The name of the secret containing the password."
            }
          },
          "required": [
            "usernameSecretName",
            "passwordSecretName"
          ]
        },
        "x509Credentials": {
          "description": "Defines the certificate reference when Certificate user authentication mode is selected.",
          "type": "object",
          "properties": {
            "certificateSecretName": {
              "type": "string",
              "description": "The name of the secret containing the certificate and private key (e.g. stored as .der/.pem or .der/.pfx)."
            },
            "keySecretName": {
              "type": "string",
              "description": "The name of the secret containing the certificate private key in PEM or DER format."
            },
            "intermediateCertificatesSecretName": {
              "type": "string",
              "description": "The name of the secret containing the combined intermediate certificates in PEM format."
            }
          },
          "required": [
            "certificateSecretName"
          ]
        }
      },
      "required": [
        "method"
      ]
    },
    "HostAuthenticationUpdate": {
      "type": "object",
      "description": "Definition of the client authentication mechanism to the host.",
      "properties": {
        "method": {
          "type": "string",
          "description": "Defines the method to authenticate the user of the client at the server.",
          "default": "Certificate",
          "enum": [
            "Anonymous",
            "Certificate",
            "UsernamePassword"
          ],
          "x-ms-enum": {
            "name": "AuthenticationMethod",
            "modelAsString": true,
            "values": [
              {
                "name": "Anonymous",
                "value": "Anonymous",
                "description": "The user authentication method is anonymous."
              },
              {
                "name": "Certificate",
                "value": "Certificate",
                "description": "The user authentication method is an x509 certificate."
              },
              {
                "name": "UsernamePassword",
                "value": "UsernamePassword",
                "description": "The user authentication method is a username and password."
              }
            ]
          }
        },
        "usernamePasswordCredentials": {
          "description": "Defines the username and password references when UsernamePassword user authentication mode is selected.",
          "type": "object",
          "properties": {
            "usernameSecretName": {
              "type": "string",
              "description": "The name of the secret containing the username."
            },
            "passwordSecretName": {
              "type": "string",
              "description": "The name of the secret containing the password."
            }
          }
        },
        "x509Credentials": {
          "description": "Defines the certificate reference when Certificate user authentication mode is selected.",
          "type": "object",
          "properties": {
            "certificateSecretName": {
              "type": "string",
              "description": "The name of the secret containing the certificate and private key (e.g. stored as .der/.pem or .der/.pfx)."
            },
            "keySecretName": {
              "type": "string",
              "description": "The name of the secret containing the certificate private key in PEM or DER format."
            },
            "intermediateCertificatesSecretName": {
              "type": "string",
              "description": "The name of the secret containing the combined intermediate certificates in PEM format."
            }
          }
        }
      }
    },
    "InboundEndpoints": {
      "type": "object",
      "description": "An endpoint to connect to the device.",
      "properties": {
        "endpointType": {
          "type": "string",
          "description": "Type of connection endpoint."
        },
        "address": {
          "type": "string",
          "description": "The endpoint address & port. This can be either an IP address (e.g., 192.168.1.1) or a fully qualified domain name (FQDN, e.g., server.example.com)."
        },
        "version": {
          "type": "string",
          "description": "Protocol version associated with the endpoint e.g. 1 or 2 for endpointType Microsoft.HTTP, and 3.5 or 5.0 for endpointType Microsoft.Mqtt etc."
        },
        "authentication": {
          "description": "Defines the client authentication mechanism to the server.",
          "type": "object",
          "properties": {
            "method": {
              "type": "string",
              "description": "Defines the method to authenticate the user of the client at the server.",
              "default": "Certificate",
              "enum": [
                "Anonymous",
                "Certificate",
                "UsernamePassword"
              ],
              "x-ms-enum": {
                "name": "AuthenticationMethod",
                "modelAsString": true,
                "values": [
                  {
                    "name": "Anonymous",
                    "value": "Anonymous",
                    "description": "The user authentication method is anonymous."
                  },
                  {
                    "name": "Certificate",
                    "value": "Certificate",
                    "description": "The user authentication method is an x509 certificate."
                  },
                  {
                    "name": "UsernamePassword",
                    "value": "UsernamePassword",
                    "description": "The user authentication method is a username and password."
                  }
                ]
              }
            },
            "usernamePasswordCredentials": {
              "description": "Defines the username and password references when UsernamePassword user authentication mode is selected.",
              "type": "object",
              "properties": {
                "usernameSecretName": {
                  "type": "string",
                  "description": "The name of the secret containing the username."
                },
                "passwordSecretName": {
                  "type": "string",
                  "description": "The name of the secret containing the password."
                }
              },
              "required": [
                "usernameSecretName",
                "passwordSecretName"
              ]
            },
            "x509Credentials": {
              "description": "Defines the certificate reference when Certificate user authentication mode is selected.",
              "type": "object",
              "properties": {
                "certificateSecretName": {
                  "type": "string",
                  "description": "The name of the secret containing the certificate and private key (e.g. stored as .der/.pem or .der/.pfx)."
                },
                "keySecretName": {
                  "type": "string",
                  "description": "The name of the secret containing the certificate private key in PEM or DER format."
                },
                "intermediateCertificatesSecretName": {
                  "type": "string",
                  "description": "The name of the secret containing the combined intermediate certificates in PEM format."
                }
              },
              "required": [
                "certificateSecretName"
              ]
            }
          },
          "required": [
            "method"
          ]
        },
        "trustSettings": {
          "description": "Defines server trust settings for the endpoint.",
          "type": "object",
          "properties": {
            "trustList": {
              "type": "string",
              "description": "Defines a secret reference for certificates to trust."
            }
          }
        },
        "additionalConfiguration": {
          "type": "string",
          "description": "Stringified JSON that contains configuration to be used by the connector (e.g., OPC UA, ONVIF)."
        }
      },
      "required": [
        "endpointType",
        "address"
      ]
    },
    "InboundEndpointsUpdate": {
      "type": "object",
      "description": "An endpoint to connect to the device.",
      "properties": {
        "endpointType": {
          "type": "string",
          "description": "Type of connection endpoint."
        },
        "address": {
          "type": "string",
          "description": "The endpoint address & port. This can be either an IP address (e.g., 192.168.1.1) or a fully qualified domain name (FQDN, e.g., server.example.com)."
        },
        "version": {
          "type": "string",
          "description": "Protocol version associated with the endpoint e.g. 1 or 2 for endpointType Microsoft.HTTP, and 3.5 or 5.0 for endpointType Microsoft.Mqtt etc."
        },
        "authentication": {
          "description": "Defines the client authentication mechanism to the server.",
          "type": "object",
          "properties": {
            "method": {
              "type": "string",
              "description": "Defines the method to authenticate the user of the client at the server.",
              "default": "Certificate",
              "enum": [
                "Anonymous",
                "Certificate",
                "UsernamePassword"
              ],
              "x-ms-enum": {
                "name": "AuthenticationMethod",
                "modelAsString": true,
                "values": [
                  {
                    "name": "Anonymous",
                    "value": "Anonymous",
                    "description": "The user authentication method is anonymous."
                  },
                  {
                    "name": "Certificate",
                    "value": "Certificate",
                    "description": "The user authentication method is an x509 certificate."
                  },
                  {
                    "name": "UsernamePassword",
                    "value": "UsernamePassword",
                    "description": "The user authentication method is a username and password."
                  }
                ]
              }
            },
            "usernamePasswordCredentials": {
              "description": "Defines the username and password references when UsernamePassword user authentication mode is selected.",
              "type": "object",
              "properties": {
                "usernameSecretName": {
                  "type": "string",
                  "description": "The name of the secret containing the username."
                },
                "passwordSecretName": {
                  "type": "string",
                  "description": "The name of the secret containing the password."
                }
              }
            },
            "x509Credentials": {
              "description": "Defines the certificate reference when Certificate user authentication mode is selected.",
              "type": "object",
              "properties": {
                "certificateSecretName": {
                  "type": "string",
                  "description": "The name of the secret containing the certificate and private key (e.g. stored as .der/.pem or .der/.pfx)."
                },
                "keySecretName": {
                  "type": "string",
                  "description": "The name of the secret containing the certificate private key in PEM or DER format."
                },
                "intermediateCertificatesSecretName": {
                  "type": "string",
                  "description": "The name of the secret containing the combined intermediate certificates in PEM format."
                }
              }
            }
          }
        },
        "trustSettings": {
          "description": "Defines server trust settings for the endpoint.",
          "type": "object",
          "properties": {
            "trustList": {
              "type": "string",
              "description": "Defines a secret reference for certificates to trust."
            }
          }
        },
        "additionalConfiguration": {
          "type": "string",
          "description": "Stringified JSON that contains configuration to be used by the connector (e.g., OPC UA, ONVIF)."
        }
      }
    },
    "ManagementAction": {
      "type": "object",
      "description": "Defines the action properties.",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the action."
        },
        "actionConfiguration": {
          "type": "string",
          "description": "Stringified JSON that contains connector-specific configuration for the action."
        },
        "targetUri": {
          "type": "string",
          "description": "The target URI on which a client can invoke the specific action."
        },
        "typeRef": {
          "type": "string",
          "description": "URI or type definition ID."
        },
        "topic": {
          "type": "string",
          "description": "The MQTT topic path on which a client will receive the request for the action."
        },
        "actionType": {
          "type": "string",
          "description": "The type of the action.",
          "default": "Call",
          "enum": [
            "Call",
            "Read",
            "Write"
          ],
          "x-ms-enum": {
            "name": "ManagementActionType",
            "modelAsString": true,
            "values": [
              {
                "name": "Call",
                "value": "Call",
                "description": "Call action type."
              },
              {
                "name": "Read",
                "value": "Read",
                "description": "Read action type."
              },
              {
                "name": "Write",
                "value": "Write",
                "description": "Write action type."
              }
            ]
          }
        },
        "timeoutInSeconds": {
          "type": "integer",
          "format": "int32",
          "description": "Response timeout for the action."
        }
      },
      "required": [
        "name",
        "targetUri"
      ]
    },
    "ManagementGroup": {
      "type": "object",
      "description": "Defines the management group properties.",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the management group."
        },
        "dataSource": {
          "type": "string",
          "description": "Reference to a data source for a given management group."
        },
        "managementGroupConfiguration": {
          "type": "string",
          "description": "Stringified JSON that contains connector-specific configuration for the management group."
        },
        "typeRef": {
          "type": "string",
          "description": "URI or type definition ID."
        },
        "defaultTopic": {
          "type": "string",
          "description": "Default MQTT topic path on which a client will receive the request for all actions that are part of the management group."
        },
        "defaultTimeoutInSeconds": {
          "type": "integer",
          "format": "int32",
          "description": "Default response timeout for all actions that are part of the management group.",
          "default": 100
        },
        "actions": {
          "type": "array",
          "description": "Array of actions that are part of the management group. Each action can have an individual configuration.",
          "items": {
            "type": "object",
            "description": "Defines the action properties.",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the action."
              },
              "actionConfiguration": {
                "type": "string",
                "description": "Stringified JSON that contains connector-specific configuration for the action."
              },
              "targetUri": {
                "type": "string",
                "description": "The target URI on which a client can invoke the specific action."
              },
              "typeRef": {
                "type": "string",
                "description": "URI or type definition ID."
              },
              "topic": {
                "type": "string",
                "description": "The MQTT topic path on which a client will receive the request for the action."
              },
              "actionType": {
                "type": "string",
                "description": "The type of the action.",
                "default": "Call",
                "enum": [
                  "Call",
                  "Read",
                  "Write"
                ],
                "x-ms-enum": {
                  "name": "ManagementActionType",
                  "modelAsString": true,
                  "values": [
                    {
                      "name": "Call",
                      "value": "Call",
                      "description": "Call action type."
                    },
                    {
                      "name": "Read",
                      "value": "Read",
                      "description": "Read action type."
                    },
                    {
                      "name": "Write",
                      "value": "Write",
                      "description": "Write action type."
                    }
                  ]
                }
              },
              "timeoutInSeconds": {
                "type": "integer",
                "format": "int32",
                "description": "Response timeout for the action."
              }
            },
            "required": [
              "name",
              "targetUri"
            ]
          },
          "x-ms-identifiers": []
        }
      },
      "required": [
        "name"
      ]
    },
    "MessageSchemaReference": {
      "type": "object",
      "description": "Defines the message schema reference properties.",
      "properties": {
        "schemaRegistryNamespace": {
          "type": "string",
          "description": "The message schema registry namespace.",
          "readOnly": true
        },
        "schemaName": {
          "type": "string",
          "description": "The message schema name.",
          "readOnly": true
        },
        "schemaVersion": {
          "type": "string",
          "description": "The message schema version.",
          "readOnly": true
        }
      },
      "required": [
        "schemaRegistryNamespace",
        "schemaName",
        "schemaVersion"
      ]
    },
    "Messaging": {
      "type": "object",
      "description": "The namespace messaging endpoints model.",
      "properties": {
        "endpoints": {
          "type": "object",
          "description": "Dictionary of messaging endpoints.",
          "additionalProperties": {
            "type": "object",
            "description": "Namespace messaging endpoint model used by a device to connect to a service.",
            "properties": {
              "endpointType": {
                "type": "string",
                "description": "Type of connection used for messaging endpoint."
              },
              "address": {
                "type": "string",
                "description": "The endpoint address to connect to."
              },
              "resourceId": {
                "type": "string",
                "description": "The messaging endpoint Azure resource Id."
              }
            },
            "required": [
              "address"
            ]
          }
        }
      }
    },
    "MessagingEndpoint": {
      "type": "object",
      "description": "Namespace messaging endpoint model used by a device to connect to a service.",
      "properties": {
        "endpointType": {
          "type": "string",
          "description": "Type of connection used for messaging endpoint."
        },
        "address": {
          "type": "string",
          "description": "The endpoint address to connect to."
        },
        "resourceId": {
          "type": "string",
          "description": "The messaging endpoint Azure resource Id."
        }
      },
      "required": [
        "address"
      ]
    },
    "MessagingEndpoints": {
      "type": "object",
      "description": "Connection endpoint URL a device can use to connect to a service.",
      "properties": {
        "inbound": {
          "type": "object",
          "description": "Set of endpoints to connect to the device.",
          "additionalProperties": {
            "type": "object",
            "description": "An endpoint to connect to the device.",
            "properties": {
              "endpointType": {
                "type": "string",
                "description": "Type of connection endpoint."
              },
              "address": {
                "type": "string",
                "description": "The endpoint address & port. This can be either an IP address (e.g., 192.168.1.1) or a fully qualified domain name (FQDN, e.g., server.example.com)."
              },
              "version": {
                "type": "string",
                "description": "Protocol version associated with the endpoint e.g. 1 or 2 for endpointType Microsoft.HTTP, and 3.5 or 5.0 for endpointType Microsoft.Mqtt etc."
              },
              "authentication": {
                "description": "Defines the client authentication mechanism to the server.",
                "type": "object",
                "properties": {
                  "method": {
                    "type": "string",
                    "description": "Defines the method to authenticate the user of the client at the server.",
                    "default": "Certificate",
                    "enum": [
                      "Anonymous",
                      "Certificate",
                      "UsernamePassword"
                    ],
                    "x-ms-enum": {
                      "name": "AuthenticationMethod",
                      "modelAsString": true,
                      "values": [
                        {
                          "name": "Anonymous",
                          "value": "Anonymous",
                          "description": "The user authentication method is anonymous."
                        },
                        {
                          "name": "Certificate",
                          "value": "Certificate",
                          "description": "The user authentication method is an x509 certificate."
                        },
                        {
                          "name": "UsernamePassword",
                          "value": "UsernamePassword",
                          "description": "The user authentication method is a username and password."
                        }
                      ]
                    }
                  },
                  "usernamePasswordCredentials": {
                    "description": "Defines the username and password references when UsernamePassword user authentication mode is selected.",
                    "type": "object",
                    "properties": {
                      "usernameSecretName": {
                        "type": "string",
                        "description": "The name of the secret containing the username."
                      },
                      "passwordSecretName": {
                        "type": "string",
                        "description": "The name of the secret containing the password."
                      }
                    },
                    "required": [
                      "usernameSecretName",
                      "passwordSecretName"
                    ]
                  },
                  "x509Credentials": {
                    "description": "Defines the certificate reference when Certificate user authentication mode is selected.",
                    "type": "object",
                    "properties": {
                      "certificateSecretName": {
                        "type": "string",
                        "description": "The name of the secret containing the certificate and private key (e.g. stored as .der/.pem or .der/.pfx)."
                      },
                      "keySecretName": {
                        "type": "string",
                        "description": "The name of the secret containing the certificate private key in PEM or DER format."
                      },
                      "intermediateCertificatesSecretName": {
                        "type": "string",
                        "description": "The name of the secret containing the combined intermediate certificates in PEM format."
                      }
                    },
                    "required": [
                      "certificateSecretName"
                    ]
                  }
                },
                "required": [
                  "method"
                ]
              },
              "trustSettings": {
                "description": "Defines server trust settings for the endpoint.",
                "type": "object",
                "properties": {
                  "trustList": {
                    "type": "string",
                    "description": "Defines a secret reference for certificates to trust."
                  }
                }
              },
              "additionalConfiguration": {
                "type": "string",
                "description": "Stringified JSON that contains configuration to be used by the connector (e.g., OPC UA, ONVIF)."
              }
            },
            "required": [
              "endpointType",
              "address"
            ]
          }
        },
        "outbound": {
          "description": "Set of endpoints a device can connect to.",
          "type": "object",
          "properties": {
            "assigned": {
              "type": "object",
              "description": "Endpoints the device can connect to.",
              "additionalProperties": {
                "type": "object",
                "description": "Device messaging endpoint model.",
                "properties": {
                  "endpointType": {
                    "type": "string",
                    "description": "Type of connection used for the messaging endpoint."
                  },
                  "address": {
                    "type": "string",
                    "description": "The endpoint address to connect to."
                  }
                },
                "required": [
                  "address"
                ]
              }
            },
            "unassigned": {
              "type": "object",
              "description": "Set of most recently removed endpoints.",
              "additionalProperties": {
                "type": "object",
                "description": "Device messaging endpoint model.",
                "properties": {
                  "endpointType": {
                    "type": "string",
                    "description": "Type of connection used for the messaging endpoint."
                  },
                  "address": {
                    "type": "string",
                    "description": "The endpoint address to connect to."
                  }
                },
                "required": [
                  "address"
                ]
              }
            }
          },
          "required": [
            "assigned"
          ]
        }
      }
    },
    "MessagingEndpointsUpdate": {
      "type": "object",
      "description": "Connection endpoint URL a device can use to connect to a service.",
      "properties": {
        "inbound": {
          "type": "object",
          "description": "Set of endpoints to connect to the device.",
          "additionalProperties": {
            "type": "object",
            "description": "An endpoint to connect to the device.",
            "properties": {
              "endpointType": {
                "type": "string",
                "description": "Type of connection endpoint."
              },
              "address": {
                "type": "string",
                "description": "The endpoint address & port. This can be either an IP address (e.g., 192.168.1.1) or a fully qualified domain name (FQDN, e.g., server.example.com)."
              },
              "version": {
                "type": "string",
                "description": "Protocol version associated with the endpoint e.g. 1 or 2 for endpointType Microsoft.HTTP, and 3.5 or 5.0 for endpointType Microsoft.Mqtt etc."
              },
              "authentication": {
                "description": "Defines the client authentication mechanism to the server.",
                "type": "object",
                "properties": {
                  "method": {
                    "type": "string",
                    "description": "Defines the method to authenticate the user of the client at the server.",
                    "default": "Certificate",
                    "enum": [
                      "Anonymous",
                      "Certificate",
                      "UsernamePassword"
                    ],
                    "x-ms-enum": {
                      "name": "AuthenticationMethod",
                      "modelAsString": true,
                      "values": [
                        {
                          "name": "Anonymous",
                          "value": "Anonymous",
                          "description": "The user authentication method is anonymous."
                        },
                        {
                          "name": "Certificate",
                          "value": "Certificate",
                          "description": "The user authentication method is an x509 certificate."
                        },
                        {
                          "name": "UsernamePassword",
                          "value": "UsernamePassword",
                          "description": "The user authentication method is a username and password."
                        }
                      ]
                    }
                  },
                  "usernamePasswordCredentials": {
                    "description": "Defines the username and password references when UsernamePassword user authentication mode is selected.",
                    "type": "object",
                    "properties": {
                      "usernameSecretName": {
                        "type": "string",
                        "description": "The name of the secret containing the username."
                      },
                      "passwordSecretName": {
                        "type": "string",
                        "description": "The name of the secret containing the password."
                      }
                    }
                  },
                  "x509Credentials": {
                    "description": "Defines the certificate reference when Certificate user authentication mode is selected.",
                    "type": "object",
                    "properties": {
                      "certificateSecretName": {
                        "type": "string",
                        "description": "The name of the secret containing the certificate and private key (e.g. stored as .der/.pem or .der/.pfx)."
                      },
                      "keySecretName": {
                        "type": "string",
                        "description": "The name of the secret containing the certificate private key in PEM or DER format."
                      },
                      "intermediateCertificatesSecretName": {
                        "type": "string",
                        "description": "The name of the secret containing the combined intermediate certificates in PEM format."
                      }
                    }
                  }
                }
              },
              "trustSettings": {
                "description": "Defines server trust settings for the endpoint.",
                "type": "object",
                "properties": {
                  "trustList": {
                    "type": "string",
                    "description": "Defines a secret reference for certificates to trust."
                  }
                }
              },
              "additionalConfiguration": {
                "type": "string",
                "description": "Stringified JSON that contains configuration to be used by the connector (e.g., OPC UA, ONVIF)."
              }
            }
          }
        },
        "outbound": {
          "description": "Set of endpoints a device can connect to.",
          "type": "object",
          "properties": {
            "assigned": {
              "type": "object",
              "description": "Endpoints the device can connect to.",
              "additionalProperties": {
                "type": "object",
                "description": "Device messaging endpoint model.",
                "properties": {
                  "endpointType": {
                    "type": "string",
                    "description": "Type of connection used for the messaging endpoint."
                  },
                  "address": {
                    "type": "string",
                    "description": "The endpoint address to connect to."
                  }
                }
              }
            },
            "unassigned": {
              "type": "object",
              "description": "Set of most recently removed endpoints.",
              "additionalProperties": {
                "type": "object",
                "description": "Device messaging endpoint model.",
                "properties": {
                  "endpointType": {
                    "type": "string",
                    "description": "Type of connection used for the messaging endpoint."
                  },
                  "address": {
                    "type": "string",
                    "description": "The endpoint address to connect to."
                  }
                }
              }
            }
          }
        }
      }
    },
    "MigrateResult": {
      "type": "object",
      "description": "Result of Migrate operation of asset resource into Namespace resource.",
      "properties": {
        "resourceId": {
          "type": "string",
          "description": "The resource Id of the asset resource."
        },
        "result": {
          "description": "The result of the migrate operation.",
          "type": "string",
          "enum": [
            "Succeeded",
            "Failed"
          ],
          "x-ms-enum": {
            "name": "MigrateResultType",
            "modelAsString": true,
            "values": [
              {
                "name": "Succeeded",
                "value": "Succeeded",
                "description": "Resource Migrate operation is successful."
              },
              {
                "name": "Failed",
                "value": "Failed",
                "description": "Resource Migrate operation is not successful."
              }
            ]
          },
          "readOnly": true
        },
        "error": {
          "description": "The error if the migrate operation is not successful.",
          "type": "object",
          "properties": {
            "code": {
              "type": "string",
              "description": "Error code for classification of errors (ex: '400', '404', '500', etc.).",
              "readOnly": true
            },
            "message": {
              "type": "string",
              "description": "Human-readable helpful error message to provide additional context for error (e.g.,: “Capability ID 'foo' does not exist”).",
              "readOnly": true
            },
            "details": {
              "type": "array",
              "description": "Array of error details that describe the status of each error.",
              "items": {
                "type": "object",
                "description": "Defines the error details properties.",
                "properties": {
                  "code": {
                    "type": "string",
                    "description": "Multi-part error code for classification and root causing of errors (ex: 400.200.100.432).",
                    "readOnly": true
                  },
                  "message": {
                    "type": "string",
                    "description": "Human-readable helpful error message to provide additional context for error (ex: “Authentication method not supported”).",
                    "readOnly": true
                  },
                  "info": {
                    "type": "string",
                    "description": "Human-readable helpful detailed text context for debugging (ex: “The following mechanisms are supported...”).",
                    "readOnly": true
                  },
                  "correlationId": {
                    "type": "string",
                    "description": "Unique identifier for the transaction to aid in debugging.",
                    "readOnly": true
                  }
                }
              },
              "readOnly": true,
              "x-ms-identifiers": []
            }
          }
        }
      }
    },
    "MigrateResultType": {
      "type": "string",
      "description": "Result Type of Migrate Operation.",
      "enum": [
        "Succeeded",
        "Failed"
      ],
      "x-ms-enum": {
        "name": "MigrateResultType",
        "modelAsString": true,
        "values": [
          {
            "name": "Succeeded",
            "value": "Succeeded",
            "description": "Resource Migrate operation is successful."
          },
          {
            "name": "Failed",
            "value": "Failed",
            "description": "Resource Migrate operation is not successful."
          }
        ]
      },
      "readOnly": true
    },
    "MqttDestinationConfiguration": {
      "type": "object",
      "description": "The configuration for a MQTT destination.",
      "properties": {
        "topic": {
          "type": "string",
          "description": "The MQTT topic."
        },
        "retain": {
          "type": "string",
          "description": "When set to 'Keep', messages published to an MQTT broker will have the retain flag set. Default: 'Never'.",
          "default": "Never",
          "enum": [
            "Keep",
            "Never"
          ],
          "x-ms-enum": {
            "name": "TopicRetainType",
            "modelAsString": true,
            "values": [
              {
                "name": "Keep",
                "value": "Keep",
                "description": "Retain the messages."
              },
              {
                "name": "Never",
                "value": "Never",
                "description": "Never retain messages."
              }
            ]
          }
        },
        "qos": {
          "type": "string",
          "description": "The MQTT QoS setting. Defaults to QoS 1.",
          "default": "Qos1",
          "enum": [
            "Qos0",
            "Qos1"
          ],
          "x-ms-enum": {
            "name": "MqttDestinationQos",
            "modelAsString": true,
            "values": [
              {
                "name": "Qos0",
                "value": "Qos0",
                "description": "QoS 0."
              },
              {
                "name": "Qos1",
                "value": "Qos1",
                "description": "QoS 1."
              }
            ]
          }
        },
        "ttl": {
          "type": "integer",
          "format": "int64",
          "description": "The MQTT TTL setting."
        }
      },
      "required": [
        "topic"
      ]
    },
    "Namespace": {
      "type": "object",
      "description": "Namespace definition.",
      "properties": {
        "id": {
          "type": "string",
          "format": "arm-id",
          "description": "Fully qualified resource ID for the resource. E.g. \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}\"",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "The name of the resource",
          "readOnly": true
        },
        "type": {
          "type": "string",
          "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
          "readOnly": true
        },
        "systemData": {
          "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
          "readOnly": true,
          "type": "object",
          "properties": {
            "createdBy": {
              "type": "string",
              "description": "The identity that created the resource."
            },
            "createdByType": {
              "type": "string",
              "description": "The type of identity that created the resource.",
              "enum": [
                "User",
                "Application",
                "ManagedIdentity",
                "Key"
              ],
              "x-ms-enum": {
                "name": "createdByType",
                "modelAsString": true
              }
            },
            "createdAt": {
              "type": "string",
              "format": "date-time",
              "description": "The timestamp of resource creation (UTC)."
            },
            "lastModifiedBy": {
              "type": "string",
              "description": "The identity that last modified the resource."
            },
            "lastModifiedByType": {
              "type": "string",
              "description": "The type of identity that last modified the resource.",
              "enum": [
                "User",
                "Application",
                "ManagedIdentity",
                "Key"
              ],
              "x-ms-enum": {
                "name": "createdByType",
                "modelAsString": true
              }
            },
            "lastModifiedAt": {
              "type": "string",
              "format": "date-time",
              "description": "The timestamp of resource last modification (UTC)"
            }
          }
        },
        "tags": {
          "type": "object",
          "description": "Resource tags.",
          "additionalProperties": {
            "type": "string"
          },
          "x-ms-mutability": [
            "read",
            "create",
            "update"
          ]
        },
        "location": {
          "type": "string",
          "description": "The geo-location where the resource lives",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "properties": {
          "description": "The resource-specific properties for this resource.",
          "x-ms-client-flatten": true,
          "type": "object",
          "properties": {
            "uuid": {
              "type": "string",
              "description": "Globally unique, immutable, non-reusable ID.",
              "readOnly": true
            },
            "messaging": {
              "description": "Assigned and unassigned messaging endpoints.",
              "type": "object",
              "properties": {
                "endpoints": {
                  "type": "object",
                  "description": "Dictionary of messaging endpoints.",
                  "additionalProperties": {
                    "type": "object",
                    "description": "Namespace messaging endpoint model used by a device to connect to a service.",
                    "properties": {
                      "endpointType": {
                        "type": "string",
                        "description": "Type of connection used for messaging endpoint."
                      },
                      "address": {
                        "type": "string",
                        "description": "The endpoint address to connect to."
                      },
                      "resourceId": {
                        "type": "string",
                        "description": "The messaging endpoint Azure resource Id."
                      }
                    },
                    "required": [
                      "address"
                    ]
                  }
                }
              }
            },
            "provisioningState": {
              "description": "Provisioning state of the resource.",
              "readOnly": true,
              "type": "string",
              "enum": [
                "Succeeded",
                "Failed",
                "Canceled",
                "Accepted",
                "Deleting"
              ],
              "x-ms-enum": {
                "name": "ProvisioningState",
                "modelAsString": true,
                "values": [
                  {
                    "name": "Succeeded",
                    "value": "Succeeded",
                    "description": "Resource has been created."
                  },
                  {
                    "name": "Failed",
                    "value": "Failed",
                    "description": "Resource creation failed."
                  },
                  {
                    "name": "Canceled",
                    "value": "Canceled",
                    "description": "Resource creation was canceled."
                  },
                  {
                    "name": "Accepted",
                    "value": "Accepted",
                    "description": "Resource has been accepted by the server."
                  },
                  {
                    "name": "Deleting",
                    "value": "Deleting",
                    "description": "Resource is deleting."
                  }
                ]
              }
            }
          }
        },
        "identity": {
          "description": "The managed service identities assigned to this resource.",
          "type": "object",
          "properties": {
            "principalId": {
              "type": "string",
              "format": "uuid",
              "description": "The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.",
              "readOnly": true
            },
            "tenantId": {
              "type": "string",
              "format": "uuid",
              "description": "The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.",
              "readOnly": true
            },
            "type": {
              "type": "string",
              "description": "Type of managed service identity (either system assigned, or none).",
              "enum": [
                "None",
                "SystemAssigned"
              ],
              "x-ms-enum": {
                "name": "SystemAssignedServiceIdentityType",
                "modelAsString": true
              }
            }
          },
          "required": [
            "type"
          ]
        }
      }
    },
    "NamespaceAsset": {
      "type": "object",
      "description": "Asset definition.",
      "properties": {
        "id": {
          "type": "string",
          "format": "arm-id",
          "description": "Fully qualified resource ID for the resource. E.g. \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}\"",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "The name of the resource",
          "readOnly": true
        },
        "type": {
          "type": "string",
          "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
          "readOnly": true
        },
        "systemData": {
          "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
          "readOnly": true,
          "type": "object",
          "properties": {
            "createdBy": {
              "type": "string",
              "description": "The identity that created the resource."
            },
            "createdByType": {
              "type": "string",
              "description": "The type of identity that created the resource.",
              "enum": [
                "User",
                "Application",
                "ManagedIdentity",
                "Key"
              ],
              "x-ms-enum": {
                "name": "createdByType",
                "modelAsString": true
              }
            },
            "createdAt": {
              "type": "string",
              "format": "date-time",
              "description": "The timestamp of resource creation (UTC)."
            },
            "lastModifiedBy": {
              "type": "string",
              "description": "The identity that last modified the resource."
            },
            "lastModifiedByType": {
              "type": "string",
              "description": "The type of identity that last modified the resource.",
              "enum": [
                "User",
                "Application",
                "ManagedIdentity",
                "Key"
              ],
              "x-ms-enum": {
                "name": "createdByType",
                "modelAsString": true
              }
            },
            "lastModifiedAt": {
              "type": "string",
              "format": "date-time",
              "description": "The timestamp of resource last modification (UTC)"
            }
          }
        },
        "tags": {
          "type": "object",
          "description": "Resource tags.",
          "additionalProperties": {
            "type": "string"
          },
          "x-ms-mutability": [
            "read",
            "create",
            "update"
          ]
        },
        "location": {
          "type": "string",
          "description": "The geo-location where the resource lives",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "properties": {
          "description": "The resource-specific properties for this resource.",
          "x-ms-client-flatten": true,
          "type": "object",
          "properties": {
            "uuid": {
              "type": "string",
              "description": "Globally unique, immutable, non-reusable ID.",
              "readOnly": true
            },
            "enabled": {
              "type": "boolean",
              "description": "Enabled/disabled status of the asset."
            },
            "externalAssetId": {
              "type": "string",
              "description": "Asset ID provided by the customer.",
              "x-ms-mutability": [
                "read",
                "create"
              ]
            },
            "displayName": {
              "type": "string",
              "description": "Human-readable display name."
            },
            "description": {
              "type": "string",
              "description": "Human-readable description of the asset."
            },
            "deviceRef": {
              "description": "Reference to the device that provides data for this asset. Must provide device name & endpoint on the device to use.",
              "x-ms-mutability": [
                "read",
                "create"
              ],
              "type": "object",
              "properties": {
                "deviceName": {
                  "type": "string",
                  "description": "Name of the device resource"
                },
                "endpointName": {
                  "type": "string",
                  "description": "The name of endpoint to use"
                }
              },
              "required": [
                "deviceName",
                "endpointName"
              ]
            },
            "assetTypeRefs": {
              "type": "array",
              "description": "URIs or type definition IDs.",
              "items": {
                "type": "string"
              }
            },
            "version": {
              "type": "integer",
              "format": "int64",
              "description": "An integer that is incremented each time the resource is modified.",
              "readOnly": true
            },
            "lastTransitionTime": {
              "type": "string",
              "format": "date-time",
              "description": "A timestamp (in UTC) that is updated each time the resource is modified.",
              "readOnly": true
            },
            "manufacturer": {
              "type": "string",
              "description": "Asset manufacturer."
            },
            "manufacturerUri": {
              "type": "string",
              "description": "Asset manufacturer URI."
            },
            "model": {
              "type": "string",
              "description": "Asset model."
            },
            "productCode": {
              "type": "string",
              "description": "Asset product code."
            },
            "hardwareRevision": {
              "type": "string",
              "description": "Asset hardware revision number."
            },
            "softwareRevision": {
              "type": "string",
              "description": "Asset software revision number."
            },
            "documentationUri": {
              "type": "string",
              "description": "Asset documentation reference."
            },
            "serialNumber": {
              "type": "string",
              "description": "Asset serial number."
            },
            "attributes": {
              "type": "object",
              "description": "A set of key-value pairs that contain custom attributes set by the customer.",
              "additionalProperties": {}
            },
            "discoveredAssetRefs": {
              "type": "array",
              "description": "Reference to a list of discovered assets. Populated only if the asset has been created from discovery flow. Discovered asset names must be provided.",
              "items": {
                "type": "string"
              },
              "x-ms-mutability": [
                "read",
                "create"
              ]
            },
            "defaultDatasetsConfiguration": {
              "type": "string",
              "description": "Stringified JSON that contains connector-specific default configuration for all datasets. Each dataset can have its own configuration that overrides the default settings here."
            },
            "defaultEventsConfiguration": {
              "type": "string",
              "description": "Stringified JSON that contains connector-specific default configuration for all events. Each event can have its own configuration that overrides the default settings here."
            },
            "defaultStreamsConfiguration": {
              "type": "string",
              "description": "Stringified JSON that contains connector-specific default configuration for all streams. Each stream can have its own configuration that overrides the default settings here."
            },
            "defaultManagementGroupsConfiguration": {
              "type": "string",
              "description": "Stringified JSON that contains connector-specific default configuration for all management groups. Each management group can have its own configuration that overrides the default settings here."
            },
            "defaultDatasetsDestinations": {
              "type": "array",
              "description": "Default destinations for a dataset.",
              "items": {
                "type": "object",
                "description": "The type of the destination.",
                "properties": {
                  "target": {
                    "description": "Target destination.",
                    "type": "string",
                    "enum": [
                      "Mqtt",
                      "BrokerStateStore",
                      "Storage"
                    ],
                    "x-ms-enum": {
                      "name": "DatasetDestinationTarget",
                      "modelAsString": true,
                      "values": [
                        {
                          "name": "Mqtt",
                          "value": "Mqtt",
                          "description": "MQTT target."
                        },
                        {
                          "name": "BrokerStateStore",
                          "value": "BrokerStateStore",
                          "description": "Broker State Store target."
                        },
                        {
                          "name": "Storage",
                          "value": "Storage",
                          "description": "Storage target."
                        }
                      ]
                    }
                  }
                },
                "discriminator": "target",
                "required": [
                  "target"
                ]
              },
              "x-ms-identifiers": []
            },
            "defaultEventsDestinations": {
              "type": "array",
              "description": "Default destinations for an event.",
              "items": {
                "type": "object",
                "description": "The type of the destination.",
                "properties": {
                  "target": {
                    "description": "Target destination.",
                    "type": "string",
                    "enum": [
                      "Mqtt",
                      "Storage"
                    ],
                    "x-ms-enum": {
                      "name": "EventDestinationTarget",
                      "modelAsString": true,
                      "values": [
                        {
                          "name": "Mqtt",
                          "value": "Mqtt",
                          "description": "MQTT target."
                        },
                        {
                          "name": "Storage",
                          "value": "Storage",
                          "description": "Storage target."
                        }
                      ]
                    }
                  }
                },
                "discriminator": "target",
                "required": [
                  "target"
                ]
              },
              "x-ms-identifiers": []
            },
            "defaultStreamsDestinations": {
              "type": "array",
              "description": "Default destinations for a stream.",
              "items": {
                "type": "object",
                "description": "The type of the destination.",
                "properties": {
                  "target": {
                    "description": "Target destination.",
                    "type": "string",
                    "enum": [
                      "Mqtt",
                      "Storage"
                    ],
                    "x-ms-enum": {
                      "name": "StreamDestinationTarget",
                      "modelAsString": true,
                      "values": [
                        {
                          "name": "Mqtt",
                          "value": "Mqtt",
                          "description": "MQTT target."
                        },
                        {
                          "name": "Storage",
                          "value": "Storage",
                          "description": "Storage target."
                        }
                      ]
                    }
                  }
                },
                "discriminator": "target",
                "required": [
                  "target"
                ]
              },
              "x-ms-identifiers": []
            },
            "datasets": {
              "type": "array",
              "description": "Array of datasets that are part of the asset. Each dataset describes the data points that make up the set.",
              "items": {
                "type": "object",
                "description": "Defines the dataset properties.",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of the dataset."
                  },
                  "dataSource": {
                    "type": "string",
                    "description": "Reference to a data source for a given dataset."
                  },
                  "typeRef": {
                    "type": "string",
                    "description": "URI or type definition ID."
                  },
                  "datasetConfiguration": {
                    "type": "string",
                    "description": "Stringified JSON that contains connector-specific JSON string that describes configuration for the specific dataset."
                  },
                  "destinations": {
                    "type": "array",
                    "description": "Destinations for a dataset.",
                    "items": {
                      "type": "object",
                      "description": "The type of the destination.",
                      "properties": {
                        "target": {
                          "description": "Target destination.",
                          "type": "string",
                          "enum": [
                            "Mqtt",
                            "BrokerStateStore",
                            "Storage"
                          ],
                          "x-ms-enum": {
                            "name": "DatasetDestinationTarget",
                            "modelAsString": true,
                            "values": [
                              {
                                "name": "Mqtt",
                                "value": "Mqtt",
                                "description": "MQTT target."
                              },
                              {
                                "name": "BrokerStateStore",
                                "value": "BrokerStateStore",
                                "description": "Broker State Store target."
                              },
                              {
                                "name": "Storage",
                                "value": "Storage",
                                "description": "Storage target."
                              }
                            ]
                          }
                        }
                      },
                      "discriminator": "target",
                      "required": [
                        "target"
                      ]
                    },
                    "x-ms-identifiers": []
                  },
                  "dataPoints": {
                    "type": "array",
                    "description": "Array of data points that are part of the dataset. Each data point can have per-data point configuration.",
                    "items": {
                      "type": "object",
                      "description": "Defines the dataset data point properties.",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "The name of the data point."
                        },
                        "dataSource": {
                          "type": "string",
                          "description": "The address of the source of the data in the asset (e.g. URL) so that a client can access the data source on the asset."
                        },
                        "dataPointConfiguration": {
                          "type": "string",
                          "description": "Stringified JSON that contains connector-specific configuration for the data point. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize."
                        },
                        "typeRef": {
                          "type": "string",
                          "description": "URI or type definition ID."
                        }
                      },
                      "required": [
                        "name",
                        "dataSource"
                      ]
                    },
                    "x-ms-identifiers": []
                  }
                },
                "required": [
                  "name"
                ]
              },
              "x-ms-identifiers": []
            },
            "eventGroups": {
              "type": "array",
              "description": "Array of event groups that are part of the asset. Each event group can have per-event group configuration.",
              "items": {
                "type": "object",
                "description": "Defines the event group properties.",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the event group."
                  },
                  "dataSource": {
                    "type": "string",
                    "description": "The address of the notifier of the event group in the asset (e.g. URL) so that a client can access the event group on the asset."
                  },
                  "eventGroupConfiguration": {
                    "type": "string",
                    "description": "Stringified JSON that contains connector-specific configuration for the event group. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize."
                  },
                  "defaultDestinations": {
                    "type": "array",
                    "description": "Destinations for events. Default destinations when destinations is not defined at the event level.",
                    "items": {
                      "type": "object",
                      "description": "The type of the destination.",
                      "properties": {
                        "target": {
                          "description": "Target destination.",
                          "type": "string",
                          "enum": [
                            "Mqtt",
                            "Storage"
                          ],
                          "x-ms-enum": {
                            "name": "EventDestinationTarget",
                            "modelAsString": true,
                            "values": [
                              {
                                "name": "Mqtt",
                                "value": "Mqtt",
                                "description": "MQTT target."
                              },
                              {
                                "name": "Storage",
                                "value": "Storage",
                                "description": "Storage target."
                              }
                            ]
                          }
                        }
                      },
                      "discriminator": "target",
                      "required": [
                        "target"
                      ]
                    },
                    "x-ms-identifiers": []
                  },
                  "typeRef": {
                    "type": "string",
                    "description": "URI or type definition ID."
                  },
                  "events": {
                    "type": "array",
                    "description": "Array of events that are part of the event group.",
                    "items": {
                      "type": "object",
                      "description": "Defines the event properties.",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "The name of the event."
                        },
                        "dataSource": {
                          "type": "string",
                          "description": "Reference to a data source for a given event."
                        },
                        "eventConfiguration": {
                          "type": "string",
                          "description": "Stringified JSON that contains connector-specific configuration for the event. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize."
                        },
                        "destinations": {
                          "type": "array",
                          "description": "Destinations for an event.",
                          "items": {
                            "type": "object",
                            "description": "The type of the destination.",
                            "properties": {
                              "target": {
                                "description": "Target destination.",
                                "type": "string",
                                "enum": [
                                  "Mqtt",
                                  "Storage"
                                ],
                                "x-ms-enum": {
                                  "name": "EventDestinationTarget",
                                  "modelAsString": true,
                                  "values": [
                                    {
                                      "name": "Mqtt",
                                      "value": "Mqtt",
                                      "description": "MQTT target."
                                    },
                                    {
                                      "name": "Storage",
                                      "value": "Storage",
                                      "description": "Storage target."
                                    }
                                  ]
                                }
                              }
                            },
                            "discriminator": "target",
                            "required": [
                              "target"
                            ]
                          },
                          "x-ms-identifiers": []
                        },
                        "typeRef": {
                          "type": "string",
                          "description": "URI or type definition ID."
                        }
                      },
                      "required": [
                        "name"
                      ]
                    },
                    "x-ms-identifiers": []
                  }
                },
                "required": [
                  "name"
                ]
              },
              "x-ms-identifiers": []
            },
            "streams": {
              "type": "array",
              "description": "Array of streams that are part of the asset. Each stream can have a per-stream configuration.",
              "items": {
                "type": "object",
                "description": "Defines the stream properties.",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of the stream definition."
                  },
                  "streamConfiguration": {
                    "type": "string",
                    "description": "Stringified JSON that contains connector-specific configuration for the specific stream."
                  },
                  "typeRef": {
                    "type": "string",
                    "description": "URI or type definition ID."
                  },
                  "destinations": {
                    "type": "array",
                    "description": "Destinations for a stream.",
                    "items": {
                      "type": "object",
                      "description": "The type of the destination.",
                      "properties": {
                        "target": {
                          "description": "Target destination.",
                          "type": "string",
                          "enum": [
                            "Mqtt",
                            "Storage"
                          ],
                          "x-ms-enum": {
                            "name": "StreamDestinationTarget",
                            "modelAsString": true,
                            "values": [
                              {
                                "name": "Mqtt",
                                "value": "Mqtt",
                                "description": "MQTT target."
                              },
                              {
                                "name": "Storage",
                                "value": "Storage",
                                "description": "Storage target."
                              }
                            ]
                          }
                        }
                      },
                      "discriminator": "target",
                      "required": [
                        "target"
                      ]
                    },
                    "x-ms-identifiers": []
                  }
                },
                "required": [
                  "name"
                ]
              },
              "x-ms-identifiers": []
            },
            "managementGroups": {
              "type": "array",
              "description": "Array of management groups that are part of the asset. Each management group can have a per-group configuration.",
              "items": {
                "type": "object",
                "description": "Defines the management group properties.",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of the management group."
                  },
                  "dataSource": {
                    "type": "string",
                    "description": "Reference to a data source for a given management group."
                  },
                  "managementGroupConfiguration": {
                    "type": "string",
                    "description": "Stringified JSON that contains connector-specific configuration for the management group."
                  },
                  "typeRef": {
                    "type": "string",
                    "description": "URI or type definition ID."
                  },
                  "defaultTopic": {
                    "type": "string",
                    "description": "Default MQTT topic path on which a client will receive the request for all actions that are part of the management group."
                  },
                  "defaultTimeoutInSeconds": {
                    "type": "integer",
                    "format": "int32",
                    "description": "Default response timeout for all actions that are part of the management group.",
                    "default": 100
                  },
                  "actions": {
                    "type": "array",
                    "description": "Array of actions that are part of the management group. Each action can have an individual configuration.",
                    "items": {
                      "type": "object",
                      "description": "Defines the action properties.",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "Name of the action."
                        },
                        "actionConfiguration": {
                          "type": "string",
                          "description": "Stringified JSON that contains connector-specific configuration for the action."
                        },
                        "targetUri": {
                          "type": "string",
                          "description": "The target URI on which a client can invoke the specific action."
                        },
                        "typeRef": {
                          "type": "string",
                          "description": "URI or type definition ID."
                        },
                        "topic": {
                          "type": "string",
                          "description": "The MQTT topic path on which a client will receive the request for the action."
                        },
                        "actionType": {
                          "type": "string",
                          "description": "The type of the action.",
                          "default": "Call",
                          "enum": [
                            "Call",
                            "Read",
                            "Write"
                          ],
                          "x-ms-enum": {
                            "name": "ManagementActionType",
                            "modelAsString": true,
                            "values": [
                              {
                                "name": "Call",
                                "value": "Call",
                                "description": "Call action type."
                              },
                              {
                                "name": "Read",
                                "value": "Read",
                                "description": "Read action type."
                              },
                              {
                                "name": "Write",
                                "value": "Write",
                                "description": "Write action type."
                              }
                            ]
                          }
                        },
                        "timeoutInSeconds": {
                          "type": "integer",
                          "format": "int32",
                          "description": "Response timeout for the action."
                        }
                      },
                      "required": [
                        "name",
                        "targetUri"
                      ]
                    },
                    "x-ms-identifiers": []
                  }
                },
                "required": [
                  "name"
                ]
              },
              "x-ms-identifiers": []
            },
            "status": {
              "description": "Read only object to reflect changes that have occurred on the Edge. Similar to Kubernetes status property for custom resources.",
              "readOnly": true,
              "type": "object",
              "properties": {
                "config": {
                  "description": "Defines the asset status config properties.",
                  "readOnly": true,
                  "type": "object",
                  "properties": {
                    "version": {
                      "type": "integer",
                      "format": "int64",
                      "description": "A read-only incremental counter indicating the number of times the configuration has been modified from the perspective of the current actual (edge) state of the CRD. Edge would be the only writer of this value and would sync back up to the cloud. In steady state, this should equal version.",
                      "readOnly": true
                    },
                    "lastTransitionTime": {
                      "type": "string",
                      "format": "date-time",
                      "description": "A read-only timestamp indicating the last time the configuration has been modified from the perspective of the current actual (edge) state of the CRD. Edge would be the only writer of this value and would sync back up to the cloud.",
                      "readOnly": true
                    },
                    "error": {
                      "description": "Object to transfer and persist errors that originate from the edge.",
                      "readOnly": true,
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code for classification of errors (ex: '400', '404', '500', etc.).",
                          "readOnly": true
                        },
                        "message": {
                          "type": "string",
                          "description": "Human-readable helpful error message to provide additional context for error (e.g.,: “Capability ID 'foo' does not exist”).",
                          "readOnly": true
                        },
                        "details": {
                          "type": "array",
                          "description": "Array of error details that describe the status of each error.",
                          "items": {
                            "type": "object",
                            "description": "Defines the error details properties.",
                            "properties": {
                              "code": {
                                "type": "string",
                                "description": "Multi-part error code for classification and root causing of errors (ex: 400.200.100.432).",
                                "readOnly": true
                              },
                              "message": {
                                "type": "string",
                                "description": "Human-readable helpful error message to provide additional context for error (ex: “Authentication method not supported”).",
                                "readOnly": true
                              },
                              "info": {
                                "type": "string",
                                "description": "Human-readable helpful detailed text context for debugging (ex: “The following mechanisms are supported...”).",
                                "readOnly": true
                              },
                              "correlationId": {
                                "type": "string",
                                "description": "Unique identifier for the transaction to aid in debugging.",
                                "readOnly": true
                              }
                            }
                          },
                          "readOnly": true,
                          "x-ms-identifiers": []
                        }
                      }
                    }
                  }
                },
                "datasets": {
                  "type": "array",
                  "description": "Array of dataset statuses that describe the status of each dataset.",
                  "items": {
                    "type": "object",
                    "description": "Defines the asset status dataset properties.",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "The name of the dataset. Must be unique within the status.datasets array. This name is used to correlate between the spec and status dataset information.",
                        "readOnly": true
                      },
                      "messageSchemaReference": {
                        "description": "The message schema reference object.",
                        "readOnly": true,
                        "type": "object",
                        "properties": {
                          "schemaRegistryNamespace": {
                            "type": "string",
                            "description": "The message schema registry namespace.",
                            "readOnly": true
                          },
                          "schemaName": {
                            "type": "string",
                            "description": "The message schema name.",
                            "readOnly": true
                          },
                          "schemaVersion": {
                            "type": "string",
                            "description": "The message schema version.",
                            "readOnly": true
                          }
                        },
                        "required": [
                          "schemaRegistryNamespace",
                          "schemaName",
                          "schemaVersion"
                        ]
                      },
                      "error": {
                        "description": "Object to transfer and persist errors that originate from the edge.",
                        "readOnly": true,
                        "type": "object",
                        "properties": {
                          "code": {
                            "type": "string",
                            "description": "Error code for classification of errors (ex: '400', '404', '500', etc.).",
                            "readOnly": true
                          },
                          "message": {
                            "type": "string",
                            "description": "Human-readable helpful error message to provide additional context for error (e.g.,: “Capability ID 'foo' does not exist”).",
                            "readOnly": true
                          },
                          "details": {
                            "type": "array",
                            "description": "Array of error details that describe the status of each error.",
                            "items": {
                              "type": "object",
                              "description": "Defines the error details properties.",
                              "properties": {
                                "code": {
                                  "type": "string",
                                  "description": "Multi-part error code for classification and root causing of errors (ex: 400.200.100.432).",
                                  "readOnly": true
                                },
                                "message": {
                                  "type": "string",
                                  "description": "Human-readable helpful error message to provide additional context for error (ex: “Authentication method not supported”).",
                                  "readOnly": true
                                },
                                "info": {
                                  "type": "string",
                                  "description": "Human-readable helpful detailed text context for debugging (ex: “The following mechanisms are supported...”).",
                                  "readOnly": true
                                },
                                "correlationId": {
                                  "type": "string",
                                  "description": "Unique identifier for the transaction to aid in debugging.",
                                  "readOnly": true
                                }
                              }
                            },
                            "readOnly": true,
                            "x-ms-identifiers": []
                          }
                        }
                      }
                    },
                    "required": [
                      "name"
                    ]
                  },
                  "readOnly": true,
                  "x-ms-identifiers": []
                },
                "eventGroups": {
                  "type": "array",
                  "description": "Array of event group statuses that describe the status of each event group.",
                  "items": {
                    "type": "object",
                    "description": "Defines the asset status event group properties.",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "The name of the event group. Must be unique within the status.eventGroups array. This name is used to correlate between the spec and status event group information.",
                        "readOnly": true
                      },
                      "events": {
                        "type": "array",
                        "description": "Array of event statuses that describe the status of each event in the event group.",
                        "items": {
                          "type": "object",
                          "description": "Defines the asset status event properties.",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "The name of the event. Must be unique within the status.events array. This name is used to correlate between the spec and status event information.",
                              "readOnly": true
                            },
                            "messageSchemaReference": {
                              "description": "The message schema reference object.",
                              "readOnly": true,
                              "type": "object",
                              "properties": {
                                "schemaRegistryNamespace": {
                                  "type": "string",
                                  "description": "The message schema registry namespace.",
                                  "readOnly": true
                                },
                                "schemaName": {
                                  "type": "string",
                                  "description": "The message schema name.",
                                  "readOnly": true
                                },
                                "schemaVersion": {
                                  "type": "string",
                                  "description": "The message schema version.",
                                  "readOnly": true
                                }
                              },
                              "required": [
                                "schemaRegistryNamespace",
                                "schemaName",
                                "schemaVersion"
                              ]
                            },
                            "error": {
                              "description": "Object to transfer and persist errors that originate from the edge.",
                              "readOnly": true,
                              "type": "object",
                              "properties": {
                                "code": {
                                  "type": "string",
                                  "description": "Error code for classification of errors (ex: '400', '404', '500', etc.).",
                                  "readOnly": true
                                },
                                "message": {
                                  "type": "string",
                                  "description": "Human-readable helpful error message to provide additional context for error (e.g.,: “Capability ID 'foo' does not exist”).",
                                  "readOnly": true
                                },
                                "details": {
                                  "type": "array",
                                  "description": "Array of error details that describe the status of each error.",
                                  "items": {
                                    "type": "object",
                                    "description": "Defines the error details properties.",
                                    "properties": {
                                      "code": {
                                        "type": "string",
                                        "description": "Multi-part error code for classification and root causing of errors (ex: 400.200.100.432).",
                                        "readOnly": true
                                      },
                                      "message": {
                                        "type": "string",
                                        "description": "Human-readable helpful error message to provide additional context for error (ex: “Authentication method not supported”).",
                                        "readOnly": true
                                      },
                                      "info": {
                                        "type": "string",
                                        "description": "Human-readable helpful detailed text context for debugging (ex: “The following mechanisms are supported...”).",
                                        "readOnly": true
                                      },
                                      "correlationId": {
                                        "type": "string",
                                        "description": "Unique identifier for the transaction to aid in debugging.",
                                        "readOnly": true
                                      }
                                    }
                                  },
                                  "readOnly": true,
                                  "x-ms-identifiers": []
                                }
                              }
                            }
                          },
                          "required": [
                            "name"
                          ]
                        },
                        "readOnly": true,
                        "x-ms-identifiers": []
                      }
                    },
                    "required": [
                      "name"
                    ]
                  },
                  "readOnly": true,
                  "x-ms-identifiers": []
                },
                "streams": {
                  "type": "array",
                  "description": "Array of stream statuses that describe the status of each stream.",
                  "items": {
                    "type": "object",
                    "description": "Defines the asset status stream properties.",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "The name of the stream. Must be unique within the status.streams array. This name is used to correlate between the spec and status event information.",
                        "readOnly": true
                      },
                      "messageSchemaReference": {
                        "description": "The message schema reference object.",
                        "readOnly": true,
                        "type": "object",
                        "properties": {
                          "schemaRegistryNamespace": {
                            "type": "string",
                            "description": "The message schema registry namespace.",
                            "readOnly": true
                          },
                          "schemaName": {
                            "type": "string",
                            "description": "The message schema name.",
                            "readOnly": true
                          },
                          "schemaVersion": {
                            "type": "string",
                            "description": "The message schema version.",
                            "readOnly": true
                          }
                        },
                        "required": [
                          "schemaRegistryNamespace",
                          "schemaName",
                          "schemaVersion"
                        ]
                      },
                      "error": {
                        "description": "Object to transfer and persist errors that originate from the edge.",
                        "readOnly": true,
                        "type": "object",
                        "properties": {
                          "code": {
                            "type": "string",
                            "description": "Error code for classification of errors (ex: '400', '404', '500', etc.).",
                            "readOnly": true
                          },
                          "message": {
                            "type": "string",
                            "description": "Human-readable helpful error message to provide additional context for error (e.g.,: “Capability ID 'foo' does not exist”).",
                            "readOnly": true
                          },
                          "details": {
                            "type": "array",
                            "description": "Array of error details that describe the status of each error.",
                            "items": {
                              "type": "object",
                              "description": "Defines the error details properties.",
                              "properties": {
                                "code": {
                                  "type": "string",
                                  "description": "Multi-part error code for classification and root causing of errors (ex: 400.200.100.432).",
                                  "readOnly": true
                                },
                                "message": {
                                  "type": "string",
                                  "description": "Human-readable helpful error message to provide additional context for error (ex: “Authentication method not supported”).",
                                  "readOnly": true
                                },
                                "info": {
                                  "type": "string",
                                  "description": "Human-readable helpful detailed text context for debugging (ex: “The following mechanisms are supported...”).",
                                  "readOnly": true
                                },
                                "correlationId": {
                                  "type": "string",
                                  "description": "Unique identifier for the transaction to aid in debugging.",
                                  "readOnly": true
                                }
                              }
                            },
                            "readOnly": true,
                            "x-ms-identifiers": []
                          }
                        }
                      }
                    },
                    "required": [
                      "name"
                    ]
                  },
                  "readOnly": true,
                  "x-ms-identifiers": []
                },
                "managementGroups": {
                  "type": "array",
                  "description": "Array of management group statuses that describe the status of each management group.",
                  "items": {
                    "type": "object",
                    "description": "Defines the asset status management group properties.",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "The name of the management group. Must be unique within the status.managementGroups array. This name is used to correlate between the spec and status event information.",
                        "readOnly": true
                      },
                      "actions": {
                        "type": "array",
                        "description": "Array of action statuses that describe the status of each action.",
                        "items": {
                          "type": "object",
                          "description": "Defines the asset status action properties.",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "The name of the action. Must be unique within the status.actions array. This name is used to correlate between the spec and status event information.",
                              "readOnly": true
                            },
                            "requestMessageSchemaReference": {
                              "description": "The request message schema reference object for the action.",
                              "readOnly": true,
                              "type": "object",
                              "properties": {
                                "schemaRegistryNamespace": {
                                  "type": "string",
                                  "description": "The message schema registry namespace.",
                                  "readOnly": true
                                },
                                "schemaName": {
                                  "type": "string",
                                  "description": "The message schema name.",
                                  "readOnly": true
                                },
                                "schemaVersion": {
                                  "type": "string",
                                  "description": "The message schema version.",
                                  "readOnly": true
                                }
                              },
                              "required": [
                                "schemaRegistryNamespace",
                                "schemaName",
                                "schemaVersion"
                              ]
                            },
                            "responseMessageSchemaReference": {
                              "description": "The response message schema reference object for the action.",
                              "readOnly": true,
                              "type": "object",
                              "properties": {
                                "schemaRegistryNamespace": {
                                  "type": "string",
                                  "description": "The message schema registry namespace.",
                                  "readOnly": true
                                },
                                "schemaName": {
                                  "type": "string",
                                  "description": "The message schema name.",
                                  "readOnly": true
                                },
                                "schemaVersion": {
                                  "type": "string",
                                  "description": "The message schema version.",
                                  "readOnly": true
                                }
                              },
                              "required": [
                                "schemaRegistryNamespace",
                                "schemaName",
                                "schemaVersion"
                              ]
                            },
                            "error": {
                              "description": "Object to transfer and persist errors that originate from the edge.",
                              "readOnly": true,
                              "type": "object",
                              "properties": {
                                "code": {
                                  "type": "string",
                                  "description": "Error code for classification of errors (ex: '400', '404', '500', etc.).",
                                  "readOnly": true
                                },
                                "message": {
                                  "type": "string",
                                  "description": "Human-readable helpful error message to provide additional context for error (e.g.,: “Capability ID 'foo' does not exist”).",
                                  "readOnly": true
                                },
                                "details": {
                                  "type": "array",
                                  "description": "Array of error details that describe the status of each error.",
                                  "items": {
                                    "type": "object",
                                    "description": "Defines the error details properties.",
                                    "properties": {
                                      "code": {
                                        "type": "string",
                                        "description": "Multi-part error code for classification and root causing of errors (ex: 400.200.100.432).",
                                        "readOnly": true
                                      },
                                      "message": {
                                        "type": "string",
                                        "description": "Human-readable helpful error message to provide additional context for error (ex: “Authentication method not supported”).",
                                        "readOnly": true
                                      },
                                      "info": {
                                        "type": "string",
                                        "description": "Human-readable helpful detailed text context for debugging (ex: “The following mechanisms are supported...”).",
                                        "readOnly": true
                                      },
                                      "correlationId": {
                                        "type": "string",
                                        "description": "Unique identifier for the transaction to aid in debugging.",
                                        "readOnly": true
                                      }
                                    }
                                  },
                                  "readOnly": true,
                                  "x-ms-identifiers": []
                                }
                              }
                            }
                          },
                          "required": [
                            "name"
                          ]
                        },
                        "readOnly": true,
                        "x-ms-identifiers": []
                      }
                    },
                    "required": [
                      "name"
                    ]
                  },
                  "readOnly": true,
                  "x-ms-identifiers": []
                }
              }
            },
            "provisioningState": {
              "description": "Provisioning state of the resource.",
              "readOnly": true,
              "type": "string",
              "enum": [
                "Succeeded",
                "Failed",
                "Canceled",
                "Accepted",
                "Deleting"
              ],
              "x-ms-enum": {
                "name": "ProvisioningState",
                "modelAsString": true,
                "values": [
                  {
                    "name": "Succeeded",
                    "value": "Succeeded",
                    "description": "Resource has been created."
                  },
                  {
                    "name": "Failed",
                    "value": "Failed",
                    "description": "Resource creation failed."
                  },
                  {
                    "name": "Canceled",
                    "value": "Canceled",
                    "description": "Resource creation was canceled."
                  },
                  {
                    "name": "Accepted",
                    "value": "Accepted",
                    "description": "Resource has been accepted by the server."
                  },
                  {
                    "name": "Deleting",
                    "value": "Deleting",
                    "description": "Resource is deleting."
                  }
                ]
              }
            }
          },
          "required": [
            "deviceRef"
          ]
        },
        "extendedLocation": {
          "description": "The extended location.",
          "x-ms-mutability": [
            "read",
            "create"
          ],
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "description": "The extended location type."
            },
            "name": {
              "type": "string",
              "description": "The extended location name."
            }
          },
          "required": [
            "type",
            "name"
          ]
        }
      },
      "required": [
        "extendedLocation"
      ]
    },
    "NamespaceAssetListResult": {
      "type": "object",
      "description": "The response of a NamespaceAsset list operation.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The NamespaceAsset items on this page",
          "items": {
            "type": "object",
            "description": "Asset definition.",
            "properties": {
              "id": {
                "type": "string",
                "format": "arm-id",
                "description": "Fully qualified resource ID for the resource. E.g. \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}\"",
                "readOnly": true
              },
              "name": {
                "type": "string",
                "description": "The name of the resource",
                "readOnly": true
              },
              "type": {
                "type": "string",
                "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                "readOnly": true
              },
              "systemData": {
                "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                "readOnly": true,
                "type": "object",
                "properties": {
                  "createdBy": {
                    "type": "string",
                    "description": "The identity that created the resource."
                  },
                  "createdByType": {
                    "type": "string",
                    "description": "The type of identity that created the resource.",
                    "enum": [
                      "User",
                      "Application",
                      "ManagedIdentity",
                      "Key"
                    ],
                    "x-ms-enum": {
                      "name": "createdByType",
                      "modelAsString": true
                    }
                  },
                  "createdAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp of resource creation (UTC)."
                  },
                  "lastModifiedBy": {
                    "type": "string",
                    "description": "The identity that last modified the resource."
                  },
                  "lastModifiedByType": {
                    "type": "string",
                    "description": "The type of identity that last modified the resource.",
                    "enum": [
                      "User",
                      "Application",
                      "ManagedIdentity",
                      "Key"
                    ],
                    "x-ms-enum": {
                      "name": "createdByType",
                      "modelAsString": true
                    }
                  },
                  "lastModifiedAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp of resource last modification (UTC)"
                  }
                }
              },
              "tags": {
                "type": "object",
                "description": "Resource tags.",
                "additionalProperties": {
                  "type": "string"
                },
                "x-ms-mutability": [
                  "read",
                  "create",
                  "update"
                ]
              },
              "location": {
                "type": "string",
                "description": "The geo-location where the resource lives",
                "x-ms-mutability": [
                  "read",
                  "create"
                ]
              },
              "properties": {
                "description": "The resource-specific properties for this resource.",
                "x-ms-client-flatten": true,
                "type": "object",
                "properties": {
                  "uuid": {
                    "type": "string",
                    "description": "Globally unique, immutable, non-reusable ID.",
                    "readOnly": true
                  },
                  "enabled": {
                    "type": "boolean",
                    "description": "Enabled/disabled status of the asset."
                  },
                  "externalAssetId": {
                    "type": "string",
                    "description": "Asset ID provided by the customer.",
                    "x-ms-mutability": [
                      "read",
                      "create"
                    ]
                  },
                  "displayName": {
                    "type": "string",
                    "description": "Human-readable display name."
                  },
                  "description": {
                    "type": "string",
                    "description": "Human-readable description of the asset."
                  },
                  "deviceRef": {
                    "description": "Reference to the device that provides data for this asset. Must provide device name & endpoint on the device to use.",
                    "x-ms-mutability": [
                      "read",
                      "create"
                    ],
                    "type": "object",
                    "properties": {
                      "deviceName": {
                        "type": "string",
                        "description": "Name of the device resource"
                      },
                      "endpointName": {
                        "type": "string",
                        "description": "The name of endpoint to use"
                      }
                    },
                    "required": [
                      "deviceName",
                      "endpointName"
                    ]
                  },
                  "assetTypeRefs": {
                    "type": "array",
                    "description": "URIs or type definition IDs.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "version": {
                    "type": "integer",
                    "format": "int64",
                    "description": "An integer that is incremented each time the resource is modified.",
                    "readOnly": true
                  },
                  "lastTransitionTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "A timestamp (in UTC) that is updated each time the resource is modified.",
                    "readOnly": true
                  },
                  "manufacturer": {
                    "type": "string",
                    "description": "Asset manufacturer."
                  },
                  "manufacturerUri": {
                    "type": "string",
                    "description": "Asset manufacturer URI."
                  },
                  "model": {
                    "type": "string",
                    "description": "Asset model."
                  },
                  "productCode": {
                    "type": "string",
                    "description": "Asset product code."
                  },
                  "hardwareRevision": {
                    "type": "string",
                    "description": "Asset hardware revision number."
                  },
                  "softwareRevision": {
                    "type": "string",
                    "description": "Asset software revision number."
                  },
                  "documentationUri": {
                    "type": "string",
                    "description": "Asset documentation reference."
                  },
                  "serialNumber": {
                    "type": "string",
                    "description": "Asset serial number."
                  },
                  "attributes": {
                    "type": "object",
                    "description": "A set of key-value pairs that contain custom attributes set by the customer.",
                    "additionalProperties": {}
                  },
                  "discoveredAssetRefs": {
                    "type": "array",
                    "description": "Reference to a list of discovered assets. Populated only if the asset has been created from discovery flow. Discovered asset names must be provided.",
                    "items": {
                      "type": "string"
                    },
                    "x-ms-mutability": [
                      "read",
                      "create"
                    ]
                  },
                  "defaultDatasetsConfiguration": {
                    "type": "string",
                    "description": "Stringified JSON that contains connector-specific default configuration for all datasets. Each dataset can have its own configuration that overrides the default settings here."
                  },
                  "defaultEventsConfiguration": {
                    "type": "string",
                    "description": "Stringified JSON that contains connector-specific default configuration for all events. Each event can have its own configuration that overrides the default settings here."
                  },
                  "defaultStreamsConfiguration": {
                    "type": "string",
                    "description": "Stringified JSON that contains connector-specific default configuration for all streams. Each stream can have its own configuration that overrides the default settings here."
                  },
                  "defaultManagementGroupsConfiguration": {
                    "type": "string",
                    "description": "Stringified JSON that contains connector-specific default configuration for all management groups. Each management group can have its own configuration that overrides the default settings here."
                  },
                  "defaultDatasetsDestinations": {
                    "type": "array",
                    "description": "Default destinations for a dataset.",
                    "items": {
                      "type": "object",
                      "description": "The type of the destination.",
                      "properties": {
                        "target": {
                          "description": "Target destination.",
                          "type": "string",
                          "enum": [
                            "Mqtt",
                            "BrokerStateStore",
                            "Storage"
                          ],
                          "x-ms-enum": {
                            "name": "DatasetDestinationTarget",
                            "modelAsString": true,
                            "values": [
                              {
                                "name": "Mqtt",
                                "value": "Mqtt",
                                "description": "MQTT target."
                              },
                              {
                                "name": "BrokerStateStore",
                                "value": "BrokerStateStore",
                                "description": "Broker State Store target."
                              },
                              {
                                "name": "Storage",
                                "value": "Storage",
                                "description": "Storage target."
                              }
                            ]
                          }
                        }
                      },
                      "discriminator": "target",
                      "required": [
                        "target"
                      ]
                    },
                    "x-ms-identifiers": []
                  },
                  "defaultEventsDestinations": {
                    "type": "array",
                    "description": "Default destinations for an event.",
                    "items": {
                      "type": "object",
                      "description": "The type of the destination.",
                      "properties": {
                        "target": {
                          "description": "Target destination.",
                          "type": "string",
                          "enum": [
                            "Mqtt",
                            "Storage"
                          ],
                          "x-ms-enum": {
                            "name": "EventDestinationTarget",
                            "modelAsString": true,
                            "values": [
                              {
                                "name": "Mqtt",
                                "value": "Mqtt",
                                "description": "MQTT target."
                              },
                              {
                                "name": "Storage",
                                "value": "Storage",
                                "description": "Storage target."
                              }
                            ]
                          }
                        }
                      },
                      "discriminator": "target",
                      "required": [
                        "target"
                      ]
                    },
                    "x-ms-identifiers": []
                  },
                  "defaultStreamsDestinations": {
                    "type": "array",
                    "description": "Default destinations for a stream.",
                    "items": {
                      "type": "object",
                      "description": "The type of the destination.",
                      "properties": {
                        "target": {
                          "description": "Target destination.",
                          "type": "string",
                          "enum": [
                            "Mqtt",
                            "Storage"
                          ],
                          "x-ms-enum": {
                            "name": "StreamDestinationTarget",
                            "modelAsString": true,
                            "values": [
                              {
                                "name": "Mqtt",
                                "value": "Mqtt",
                                "description": "MQTT target."
                              },
                              {
                                "name": "Storage",
                                "value": "Storage",
                                "description": "Storage target."
                              }
                            ]
                          }
                        }
                      },
                      "discriminator": "target",
                      "required": [
                        "target"
                      ]
                    },
                    "x-ms-identifiers": []
                  },
                  "datasets": {
                    "type": "array",
                    "description": "Array of datasets that are part of the asset. Each dataset describes the data points that make up the set.",
                    "items": {
                      "type": "object",
                      "description": "Defines the dataset properties.",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "Name of the dataset."
                        },
                        "dataSource": {
                          "type": "string",
                          "description": "Reference to a data source for a given dataset."
                        },
                        "typeRef": {
                          "type": "string",
                          "description": "URI or type definition ID."
                        },
                        "datasetConfiguration": {
                          "type": "string",
                          "description": "Stringified JSON that contains connector-specific JSON string that describes configuration for the specific dataset."
                        },
                        "destinations": {
                          "type": "array",
                          "description": "Destinations for a dataset.",
                          "items": {
                            "type": "object",
                            "description": "The type of the destination.",
                            "properties": {
                              "target": {
                                "description": "Target destination.",
                                "type": "string",
                                "enum": [
                                  "Mqtt",
                                  "BrokerStateStore",
                                  "Storage"
                                ],
                                "x-ms-enum": {
                                  "name": "DatasetDestinationTarget",
                                  "modelAsString": true,
                                  "values": [
                                    {
                                      "name": "Mqtt",
                                      "value": "Mqtt",
                                      "description": "MQTT target."
                                    },
                                    {
                                      "name": "BrokerStateStore",
                                      "value": "BrokerStateStore",
                                      "description": "Broker State Store target."
                                    },
                                    {
                                      "name": "Storage",
                                      "value": "Storage",
                                      "description": "Storage target."
                                    }
                                  ]
                                }
                              }
                            },
                            "discriminator": "target",
                            "required": [
                              "target"
                            ]
                          },
                          "x-ms-identifiers": []
                        },
                        "dataPoints": {
                          "type": "array",
                          "description": "Array of data points that are part of the dataset. Each data point can have per-data point configuration.",
                          "items": {
                            "type": "object",
                            "description": "Defines the dataset data point properties.",
                            "properties": {
                              "name": {
                                "type": "string",
                                "description": "The name of the data point."
                              },
                              "dataSource": {
                                "type": "string",
                                "description": "The address of the source of the data in the asset (e.g. URL) so that a client can access the data source on the asset."
                              },
                              "dataPointConfiguration": {
                                "type": "string",
                                "description": "Stringified JSON that contains connector-specific configuration for the data point. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize."
                              },
                              "typeRef": {
                                "type": "string",
                                "description": "URI or type definition ID."
                              }
                            },
                            "required": [
                              "name",
                              "dataSource"
                            ]
                          },
                          "x-ms-identifiers": []
                        }
                      },
                      "required": [
                        "name"
                      ]
                    },
                    "x-ms-identifiers": []
                  },
                  "eventGroups": {
                    "type": "array",
                    "description": "Array of event groups that are part of the asset. Each event group can have per-event group configuration.",
                    "items": {
                      "type": "object",
                      "description": "Defines the event group properties.",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "The name of the event group."
                        },
                        "dataSource": {
                          "type": "string",
                          "description": "The address of the notifier of the event group in the asset (e.g. URL) so that a client can access the event group on the asset."
                        },
                        "eventGroupConfiguration": {
                          "type": "string",
                          "description": "Stringified JSON that contains connector-specific configuration for the event group. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize."
                        },
                        "defaultDestinations": {
                          "type": "array",
                          "description": "Destinations for events. Default destinations when destinations is not defined at the event level.",
                          "items": {
                            "type": "object",
                            "description": "The type of the destination.",
                            "properties": {
                              "target": {
                                "description": "Target destination.",
                                "type": "string",
                                "enum": [
                                  "Mqtt",
                                  "Storage"
                                ],
                                "x-ms-enum": {
                                  "name": "EventDestinationTarget",
                                  "modelAsString": true,
                                  "values": [
                                    {
                                      "name": "Mqtt",
                                      "value": "Mqtt",
                                      "description": "MQTT target."
                                    },
                                    {
                                      "name": "Storage",
                                      "value": "Storage",
                                      "description": "Storage target."
                                    }
                                  ]
                                }
                              }
                            },
                            "discriminator": "target",
                            "required": [
                              "target"
                            ]
                          },
                          "x-ms-identifiers": []
                        },
                        "typeRef": {
                          "type": "string",
                          "description": "URI or type definition ID."
                        },
                        "events": {
                          "type": "array",
                          "description": "Array of events that are part of the event group.",
                          "items": {
                            "type": "object",
                            "description": "Defines the event properties.",
                            "properties": {
                              "name": {
                                "type": "string",
                                "description": "The name of the event."
                              },
                              "dataSource": {
                                "type": "string",
                                "description": "Reference to a data source for a given event."
                              },
                              "eventConfiguration": {
                                "type": "string",
                                "description": "Stringified JSON that contains connector-specific configuration for the event. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize."
                              },
                              "destinations": {
                                "type": "array",
                                "description": "Destinations for an event.",
                                "items": {
                                  "type": "object",
                                  "description": "The type of the destination.",
                                  "properties": {
                                    "target": {
                                      "description": "Target destination.",
                                      "type": "string",
                                      "enum": [
                                        "Mqtt",
                                        "Storage"
                                      ],
                                      "x-ms-enum": {
                                        "name": "EventDestinationTarget",
                                        "modelAsString": true,
                                        "values": [
                                          {
                                            "name": "Mqtt",
                                            "value": "Mqtt",
                                            "description": "MQTT target."
                                          },
                                          {
                                            "name": "Storage",
                                            "value": "Storage",
                                            "description": "Storage target."
                                          }
                                        ]
                                      }
                                    }
                                  },
                                  "discriminator": "target",
                                  "required": [
                                    "target"
                                  ]
                                },
                                "x-ms-identifiers": []
                              },
                              "typeRef": {
                                "type": "string",
                                "description": "URI or type definition ID."
                              }
                            },
                            "required": [
                              "name"
                            ]
                          },
                          "x-ms-identifiers": []
                        }
                      },
                      "required": [
                        "name"
                      ]
                    },
                    "x-ms-identifiers": []
                  },
                  "streams": {
                    "type": "array",
                    "description": "Array of streams that are part of the asset. Each stream can have a per-stream configuration.",
                    "items": {
                      "type": "object",
                      "description": "Defines the stream properties.",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "Name of the stream definition."
                        },
                        "streamConfiguration": {
                          "type": "string",
                          "description": "Stringified JSON that contains connector-specific configuration for the specific stream."
                        },
                        "typeRef": {
                          "type": "string",
                          "description": "URI or type definition ID."
                        },
                        "destinations": {
                          "type": "array",
                          "description": "Destinations for a stream.",
                          "items": {
                            "type": "object",
                            "description": "The type of the destination.",
                            "properties": {
                              "target": {
                                "description": "Target destination.",
                                "type": "string",
                                "enum": [
                                  "Mqtt",
                                  "Storage"
                                ],
                                "x-ms-enum": {
                                  "name": "StreamDestinationTarget",
                                  "modelAsString": true,
                                  "values": [
                                    {
                                      "name": "Mqtt",
                                      "value": "Mqtt",
                                      "description": "MQTT target."
                                    },
                                    {
                                      "name": "Storage",
                                      "value": "Storage",
                                      "description": "Storage target."
                                    }
                                  ]
                                }
                              }
                            },
                            "discriminator": "target",
                            "required": [
                              "target"
                            ]
                          },
                          "x-ms-identifiers": []
                        }
                      },
                      "required": [
                        "name"
                      ]
                    },
                    "x-ms-identifiers": []
                  },
                  "managementGroups": {
                    "type": "array",
                    "description": "Array of management groups that are part of the asset. Each management group can have a per-group configuration.",
                    "items": {
                      "type": "object",
                      "description": "Defines the management group properties.",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "Name of the management group."
                        },
                        "dataSource": {
                          "type": "string",
                          "description": "Reference to a data source for a given management group."
                        },
                        "managementGroupConfiguration": {
                          "type": "string",
                          "description": "Stringified JSON that contains connector-specific configuration for the management group."
                        },
                        "typeRef": {
                          "type": "string",
                          "description": "URI or type definition ID."
                        },
                        "defaultTopic": {
                          "type": "string",
                          "description": "Default MQTT topic path on which a client will receive the request for all actions that are part of the management group."
                        },
                        "defaultTimeoutInSeconds": {
                          "type": "integer",
                          "format": "int32",
                          "description": "Default response timeout for all actions that are part of the management group.",
                          "default": 100
                        },
                        "actions": {
                          "type": "array",
                          "description": "Array of actions that are part of the management group. Each action can have an individual configuration.",
                          "items": {
                            "type": "object",
                            "description": "Defines the action properties.",
                            "properties": {
                              "name": {
                                "type": "string",
                                "description": "Name of the action."
                              },
                              "actionConfiguration": {
                                "type": "string",
                                "description": "Stringified JSON that contains connector-specific configuration for the action."
                              },
                              "targetUri": {
                                "type": "string",
                                "description": "The target URI on which a client can invoke the specific action."
                              },
                              "typeRef": {
                                "type": "string",
                                "description": "URI or type definition ID."
                              },
                              "topic": {
                                "type": "string",
                                "description": "The MQTT topic path on which a client will receive the request for the action."
                              },
                              "actionType": {
                                "type": "string",
                                "description": "The type of the action.",
                                "default": "Call",
                                "enum": [
                                  "Call",
                                  "Read",
                                  "Write"
                                ],
                                "x-ms-enum": {
                                  "name": "ManagementActionType",
                                  "modelAsString": true,
                                  "values": [
                                    {
                                      "name": "Call",
                                      "value": "Call",
                                      "description": "Call action type."
                                    },
                                    {
                                      "name": "Read",
                                      "value": "Read",
                                      "description": "Read action type."
                                    },
                                    {
                                      "name": "Write",
                                      "value": "Write",
                                      "description": "Write action type."
                                    }
                                  ]
                                }
                              },
                              "timeoutInSeconds": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Response timeout for the action."
                              }
                            },
                            "required": [
                              "name",
                              "targetUri"
                            ]
                          },
                          "x-ms-identifiers": []
                        }
                      },
                      "required": [
                        "name"
                      ]
                    },
                    "x-ms-identifiers": []
                  },
                  "status": {
                    "description": "Read only object to reflect changes that have occurred on the Edge. Similar to Kubernetes status property for custom resources.",
                    "readOnly": true,
                    "type": "object",
                    "properties": {
                      "config": {
                        "description": "Defines the asset status config properties.",
                        "readOnly": true,
                        "type": "object",
                        "properties": {
                          "version": {
                            "type": "integer",
                            "format": "int64",
                            "description": "A read-only incremental counter indicating the number of times the configuration has been modified from the perspective of the current actual (edge) state of the CRD. Edge would be the only writer of this value and would sync back up to the cloud. In steady state, this should equal version.",
                            "readOnly": true
                          },
                          "lastTransitionTime": {
                            "type": "string",
                            "format": "date-time",
                            "description": "A read-only timestamp indicating the last time the configuration has been modified from the perspective of the current actual (edge) state of the CRD. Edge would be the only writer of this value and would sync back up to the cloud.",
                            "readOnly": true
                          },
                          "error": {
                            "description": "Object to transfer and persist errors that originate from the edge.",
                            "readOnly": true,
                            "type": "object",
                            "properties": {
                              "code": {
                                "type": "string",
                                "description": "Error code for classification of errors (ex: '400', '404', '500', etc.).",
                                "readOnly": true
                              },
                              "message": {
                                "type": "string",
                                "description": "Human-readable helpful error message to provide additional context for error (e.g.,: “Capability ID 'foo' does not exist”).",
                                "readOnly": true
                              },
                              "details": {
                                "type": "array",
                                "description": "Array of error details that describe the status of each error.",
                                "items": {
                                  "type": "object",
                                  "description": "Defines the error details properties.",
                                  "properties": {
                                    "code": {
                                      "type": "string",
                                      "description": "Multi-part error code for classification and root causing of errors (ex: 400.200.100.432).",
                                      "readOnly": true
                                    },
                                    "message": {
                                      "type": "string",
                                      "description": "Human-readable helpful error message to provide additional context for error (ex: “Authentication method not supported”).",
                                      "readOnly": true
                                    },
                                    "info": {
                                      "type": "string",
                                      "description": "Human-readable helpful detailed text context for debugging (ex: “The following mechanisms are supported...”).",
                                      "readOnly": true
                                    },
                                    "correlationId": {
                                      "type": "string",
                                      "description": "Unique identifier for the transaction to aid in debugging.",
                                      "readOnly": true
                                    }
                                  }
                                },
                                "readOnly": true,
                                "x-ms-identifiers": []
                              }
                            }
                          }
                        }
                      },
                      "datasets": {
                        "type": "array",
                        "description": "Array of dataset statuses that describe the status of each dataset.",
                        "items": {
                          "type": "object",
                          "description": "Defines the asset status dataset properties.",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "The name of the dataset. Must be unique within the status.datasets array. This name is used to correlate between the spec and status dataset information.",
                              "readOnly": true
                            },
                            "messageSchemaReference": {
                              "description": "The message schema reference object.",
                              "readOnly": true,
                              "type": "object",
                              "properties": {
                                "schemaRegistryNamespace": {
                                  "type": "string",
                                  "description": "The message schema registry namespace.",
                                  "readOnly": true
                                },
                                "schemaName": {
                                  "type": "string",
                                  "description": "The message schema name.",
                                  "readOnly": true
                                },
                                "schemaVersion": {
                                  "type": "string",
                                  "description": "The message schema version.",
                                  "readOnly": true
                                }
                              },
                              "required": [
                                "schemaRegistryNamespace",
                                "schemaName",
                                "schemaVersion"
                              ]
                            },
                            "error": {
                              "description": "Object to transfer and persist errors that originate from the edge.",
                              "readOnly": true,
                              "type": "object",
                              "properties": {
                                "code": {
                                  "type": "string",
                                  "description": "Error code for classification of errors (ex: '400', '404', '500', etc.).",
                                  "readOnly": true
                                },
                                "message": {
                                  "type": "string",
                                  "description": "Human-readable helpful error message to provide additional context for error (e.g.,: “Capability ID 'foo' does not exist”).",
                                  "readOnly": true
                                },
                                "details": {
                                  "type": "array",
                                  "description": "Array of error details that describe the status of each error.",
                                  "items": {
                                    "type": "object",
                                    "description": "Defines the error details properties.",
                                    "properties": {
                                      "code": {
                                        "type": "string",
                                        "description": "Multi-part error code for classification and root causing of errors (ex: 400.200.100.432).",
                                        "readOnly": true
                                      },
                                      "message": {
                                        "type": "string",
                                        "description": "Human-readable helpful error message to provide additional context for error (ex: “Authentication method not supported”).",
                                        "readOnly": true
                                      },
                                      "info": {
                                        "type": "string",
                                        "description": "Human-readable helpful detailed text context for debugging (ex: “The following mechanisms are supported...”).",
                                        "readOnly": true
                                      },
                                      "correlationId": {
                                        "type": "string",
                                        "description": "Unique identifier for the transaction to aid in debugging.",
                                        "readOnly": true
                                      }
                                    }
                                  },
                                  "readOnly": true,
                                  "x-ms-identifiers": []
                                }
                              }
                            }
                          },
                          "required": [
                            "name"
                          ]
                        },
                        "readOnly": true,
                        "x-ms-identifiers": []
                      },
                      "eventGroups": {
                        "type": "array",
                        "description": "Array of event group statuses that describe the status of each event group.",
                        "items": {
                          "type": "object",
                          "description": "Defines the asset status event group properties.",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "The name of the event group. Must be unique within the status.eventGroups array. This name is used to correlate between the spec and status event group information.",
                              "readOnly": true
                            },
                            "events": {
                              "type": "array",
                              "description": "Array of event statuses that describe the status of each event in the event group.",
                              "items": {
                                "type": "object",
                                "description": "Defines the asset status event properties.",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "description": "The name of the event. Must be unique within the status.events array. This name is used to correlate between the spec and status event information.",
                                    "readOnly": true
                                  },
                                  "messageSchemaReference": {
                                    "description": "The message schema reference object.",
                                    "readOnly": true,
                                    "type": "object",
                                    "properties": {
                                      "schemaRegistryNamespace": {
                                        "type": "string",
                                        "description": "The message schema registry namespace.",
                                        "readOnly": true
                                      },
                                      "schemaName": {
                                        "type": "string",
                                        "description": "The message schema name.",
                                        "readOnly": true
                                      },
                                      "schemaVersion": {
                                        "type": "string",
                                        "description": "The message schema version.",
                                        "readOnly": true
                                      }
                                    },
                                    "required": [
                                      "schemaRegistryNamespace",
                                      "schemaName",
                                      "schemaVersion"
                                    ]
                                  },
                                  "error": {
                                    "description": "Object to transfer and persist errors that originate from the edge.",
                                    "readOnly": true,
                                    "type": "object",
                                    "properties": {
                                      "code": {
                                        "type": "string",
                                        "description": "Error code for classification of errors (ex: '400', '404', '500', etc.).",
                                        "readOnly": true
                                      },
                                      "message": {
                                        "type": "string",
                                        "description": "Human-readable helpful error message to provide additional context for error (e.g.,: “Capability ID 'foo' does not exist”).",
                                        "readOnly": true
                                      },
                                      "details": {
                                        "type": "array",
                                        "description": "Array of error details that describe the status of each error.",
                                        "items": {
                                          "type": "object",
                                          "description": "Defines the error details properties.",
                                          "properties": {
                                            "code": {
                                              "type": "string",
                                              "description": "Multi-part error code for classification and root causing of errors (ex: 400.200.100.432).",
                                              "readOnly": true
                                            },
                                            "message": {
                                              "type": "string",
                                              "description": "Human-readable helpful error message to provide additional context for error (ex: “Authentication method not supported”).",
                                              "readOnly": true
                                            },
                                            "info": {
                                              "type": "string",
                                              "description": "Human-readable helpful detailed text context for debugging (ex: “The following mechanisms are supported...”).",
                                              "readOnly": true
                                            },
                                            "correlationId": {
                                              "type": "string",
                                              "description": "Unique identifier for the transaction to aid in debugging.",
                                              "readOnly": true
                                            }
                                          }
                                        },
                                        "readOnly": true,
                                        "x-ms-identifiers": []
                                      }
                                    }
                                  }
                                },
                                "required": [
                                  "name"
                                ]
                              },
                              "readOnly": true,
                              "x-ms-identifiers": []
                            }
                          },
                          "required": [
                            "name"
                          ]
                        },
                        "readOnly": true,
                        "x-ms-identifiers": []
                      },
                      "streams": {
                        "type": "array",
                        "description": "Array of stream statuses that describe the status of each stream.",
                        "items": {
                          "type": "object",
                          "description": "Defines the asset status stream properties.",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "The name of the stream. Must be unique within the status.streams array. This name is used to correlate between the spec and status event information.",
                              "readOnly": true
                            },
                            "messageSchemaReference": {
                              "description": "The message schema reference object.",
                              "readOnly": true,
                              "type": "object",
                              "properties": {
                                "schemaRegistryNamespace": {
                                  "type": "string",
                                  "description": "The message schema registry namespace.",
                                  "readOnly": true
                                },
                                "schemaName": {
                                  "type": "string",
                                  "description": "The message schema name.",
                                  "readOnly": true
                                },
                                "schemaVersion": {
                                  "type": "string",
                                  "description": "The message schema version.",
                                  "readOnly": true
                                }
                              },
                              "required": [
                                "schemaRegistryNamespace",
                                "schemaName",
                                "schemaVersion"
                              ]
                            },
                            "error": {
                              "description": "Object to transfer and persist errors that originate from the edge.",
                              "readOnly": true,
                              "type": "object",
                              "properties": {
                                "code": {
                                  "type": "string",
                                  "description": "Error code for classification of errors (ex: '400', '404', '500', etc.).",
                                  "readOnly": true
                                },
                                "message": {
                                  "type": "string",
                                  "description": "Human-readable helpful error message to provide additional context for error (e.g.,: “Capability ID 'foo' does not exist”).",
                                  "readOnly": true
                                },
                                "details": {
                                  "type": "array",
                                  "description": "Array of error details that describe the status of each error.",
                                  "items": {
                                    "type": "object",
                                    "description": "Defines the error details properties.",
                                    "properties": {
                                      "code": {
                                        "type": "string",
                                        "description": "Multi-part error code for classification and root causing of errors (ex: 400.200.100.432).",
                                        "readOnly": true
                                      },
                                      "message": {
                                        "type": "string",
                                        "description": "Human-readable helpful error message to provide additional context for error (ex: “Authentication method not supported”).",
                                        "readOnly": true
                                      },
                                      "info": {
                                        "type": "string",
                                        "description": "Human-readable helpful detailed text context for debugging (ex: “The following mechanisms are supported...”).",
                                        "readOnly": true
                                      },
                                      "correlationId": {
                                        "type": "string",
                                        "description": "Unique identifier for the transaction to aid in debugging.",
                                        "readOnly": true
                                      }
                                    }
                                  },
                                  "readOnly": true,
                                  "x-ms-identifiers": []
                                }
                              }
                            }
                          },
                          "required": [
                            "name"
                          ]
                        },
                        "readOnly": true,
                        "x-ms-identifiers": []
                      },
                      "managementGroups": {
                        "type": "array",
                        "description": "Array of management group statuses that describe the status of each management group.",
                        "items": {
                          "type": "object",
                          "description": "Defines the asset status management group properties.",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "The name of the management group. Must be unique within the status.managementGroups array. This name is used to correlate between the spec and status event information.",
                              "readOnly": true
                            },
                            "actions": {
                              "type": "array",
                              "description": "Array of action statuses that describe the status of each action.",
                              "items": {
                                "type": "object",
                                "description": "Defines the asset status action properties.",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "description": "The name of the action. Must be unique within the status.actions array. This name is used to correlate between the spec and status event information.",
                                    "readOnly": true
                                  },
                                  "requestMessageSchemaReference": {
                                    "description": "The request message schema reference object for the action.",
                                    "readOnly": true,
                                    "type": "object",
                                    "properties": {
                                      "schemaRegistryNamespace": {
                                        "type": "string",
                                        "description": "The message schema registry namespace.",
                                        "readOnly": true
                                      },
                                      "schemaName": {
                                        "type": "string",
                                        "description": "The message schema name.",
                                        "readOnly": true
                                      },
                                      "schemaVersion": {
                                        "type": "string",
                                        "description": "The message schema version.",
                                        "readOnly": true
                                      }
                                    },
                                    "required": [
                                      "schemaRegistryNamespace",
                                      "schemaName",
                                      "schemaVersion"
                                    ]
                                  },
                                  "responseMessageSchemaReference": {
                                    "description": "The response message schema reference object for the action.",
                                    "readOnly": true,
                                    "type": "object",
                                    "properties": {
                                      "schemaRegistryNamespace": {
                                        "type": "string",
                                        "description": "The message schema registry namespace.",
                                        "readOnly": true
                                      },
                                      "schemaName": {
                                        "type": "string",
                                        "description": "The message schema name.",
                                        "readOnly": true
                                      },
                                      "schemaVersion": {
                                        "type": "string",
                                        "description": "The message schema version.",
                                        "readOnly": true
                                      }
                                    },
                                    "required": [
                                      "schemaRegistryNamespace",
                                      "schemaName",
                                      "schemaVersion"
                                    ]
                                  },
                                  "error": {
                                    "description": "Object to transfer and persist errors that originate from the edge.",
                                    "readOnly": true,
                                    "type": "object",
                                    "properties": {
                                      "code": {
                                        "type": "string",
                                        "description": "Error code for classification of errors (ex: '400', '404', '500', etc.).",
                                        "readOnly": true
                                      },
                                      "message": {
                                        "type": "string",
                                        "description": "Human-readable helpful error message to provide additional context for error (e.g.,: “Capability ID 'foo' does not exist”).",
                                        "readOnly": true
                                      },
                                      "details": {
                                        "type": "array",
                                        "description": "Array of error details that describe the status of each error.",
                                        "items": {
                                          "type": "object",
                                          "description": "Defines the error details properties.",
                                          "properties": {
                                            "code": {
                                              "type": "string",
                                              "description": "Multi-part error code for classification and root causing of errors (ex: 400.200.100.432).",
                                              "readOnly": true
                                            },
                                            "message": {
                                              "type": "string",
                                              "description": "Human-readable helpful error message to provide additional context for error (ex: “Authentication method not supported”).",
                                              "readOnly": true
                                            },
                                            "info": {
                                              "type": "string",
                                              "description": "Human-readable helpful detailed text context for debugging (ex: “The following mechanisms are supported...”).",
                                              "readOnly": true
                                            },
                                            "correlationId": {
                                              "type": "string",
                                              "description": "Unique identifier for the transaction to aid in debugging.",
                                              "readOnly": true
                                            }
                                          }
                                        },
                                        "readOnly": true,
                                        "x-ms-identifiers": []
                                      }
                                    }
                                  }
                                },
                                "required": [
                                  "name"
                                ]
                              },
                              "readOnly": true,
                              "x-ms-identifiers": []
                            }
                          },
                          "required": [
                            "name"
                          ]
                        },
                        "readOnly": true,
                        "x-ms-identifiers": []
                      }
                    }
                  },
                  "provisioningState": {
                    "description": "Provisioning state of the resource.",
                    "readOnly": true,
                    "type": "string",
                    "enum": [
                      "Succeeded",
                      "Failed",
                      "Canceled",
                      "Accepted",
                      "Deleting"
                    ],
                    "x-ms-enum": {
                      "name": "ProvisioningState",
                      "modelAsString": true,
                      "values": [
                        {
                          "name": "Succeeded",
                          "value": "Succeeded",
                          "description": "Resource has been created."
                        },
                        {
                          "name": "Failed",
                          "value": "Failed",
                          "description": "Resource creation failed."
                        },
                        {
                          "name": "Canceled",
                          "value": "Canceled",
                          "description": "Resource creation was canceled."
                        },
                        {
                          "name": "Accepted",
                          "value": "Accepted",
                          "description": "Resource has been accepted by the server."
                        },
                        {
                          "name": "Deleting",
                          "value": "Deleting",
                          "description": "Resource is deleting."
                        }
                      ]
                    }
                  }
                },
                "required": [
                  "deviceRef"
                ]
              },
              "extendedLocation": {
                "description": "The extended location.",
                "x-ms-mutability": [
                  "read",
                  "create"
                ],
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "description": "The extended location type."
                  },
                  "name": {
                    "type": "string",
                    "description": "The extended location name."
                  }
                },
                "required": [
                  "type",
                  "name"
                ]
              }
            },
            "required": [
              "extendedLocation"
            ]
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "NamespaceAssetProperties": {
      "type": "object",
      "description": "Defines the asset properties.",
      "properties": {
        "uuid": {
          "type": "string",
          "description": "Globally unique, immutable, non-reusable ID.",
          "readOnly": true
        },
        "enabled": {
          "type": "boolean",
          "description": "Enabled/disabled status of the asset."
        },
        "externalAssetId": {
          "type": "string",
          "description": "Asset ID provided by the customer.",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "displayName": {
          "type": "string",
          "description": "Human-readable display name."
        },
        "description": {
          "type": "string",
          "description": "Human-readable description of the asset."
        },
        "deviceRef": {
          "description": "Reference to the device that provides data for this asset. Must provide device name & endpoint on the device to use.",
          "x-ms-mutability": [
            "read",
            "create"
          ],
          "type": "object",
          "properties": {
            "deviceName": {
              "type": "string",
              "description": "Name of the device resource"
            },
            "endpointName": {
              "type": "string",
              "description": "The name of endpoint to use"
            }
          },
          "required": [
            "deviceName",
            "endpointName"
          ]
        },
        "assetTypeRefs": {
          "type": "array",
          "description": "URIs or type definition IDs.",
          "items": {
            "type": "string"
          }
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "description": "An integer that is incremented each time the resource is modified.",
          "readOnly": true
        },
        "lastTransitionTime": {
          "type": "string",
          "format": "date-time",
          "description": "A timestamp (in UTC) that is updated each time the resource is modified.",
          "readOnly": true
        },
        "manufacturer": {
          "type": "string",
          "description": "Asset manufacturer."
        },
        "manufacturerUri": {
          "type": "string",
          "description": "Asset manufacturer URI."
        },
        "model": {
          "type": "string",
          "description": "Asset model."
        },
        "productCode": {
          "type": "string",
          "description": "Asset product code."
        },
        "hardwareRevision": {
          "type": "string",
          "description": "Asset hardware revision number."
        },
        "softwareRevision": {
          "type": "string",
          "description": "Asset software revision number."
        },
        "documentationUri": {
          "type": "string",
          "description": "Asset documentation reference."
        },
        "serialNumber": {
          "type": "string",
          "description": "Asset serial number."
        },
        "attributes": {
          "type": "object",
          "description": "A set of key-value pairs that contain custom attributes set by the customer.",
          "additionalProperties": {}
        },
        "discoveredAssetRefs": {
          "type": "array",
          "description": "Reference to a list of discovered assets. Populated only if the asset has been created from discovery flow. Discovered asset names must be provided.",
          "items": {
            "type": "string"
          },
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "defaultDatasetsConfiguration": {
          "type": "string",
          "description": "Stringified JSON that contains connector-specific default configuration for all datasets. Each dataset can have its own configuration that overrides the default settings here."
        },
        "defaultEventsConfiguration": {
          "type": "string",
          "description": "Stringified JSON that contains connector-specific default configuration for all events. Each event can have its own configuration that overrides the default settings here."
        },
        "defaultStreamsConfiguration": {
          "type": "string",
          "description": "Stringified JSON that contains connector-specific default configuration for all streams. Each stream can have its own configuration that overrides the default settings here."
        },
        "defaultManagementGroupsConfiguration": {
          "type": "string",
          "description": "Stringified JSON that contains connector-specific default configuration for all management groups. Each management group can have its own configuration that overrides the default settings here."
        },
        "defaultDatasetsDestinations": {
          "type": "array",
          "description": "Default destinations for a dataset.",
          "items": {
            "type": "object",
            "description": "The type of the destination.",
            "properties": {
              "target": {
                "description": "Target destination.",
                "type": "string",
                "enum": [
                  "Mqtt",
                  "BrokerStateStore",
                  "Storage"
                ],
                "x-ms-enum": {
                  "name": "DatasetDestinationTarget",
                  "modelAsString": true,
                  "values": [
                    {
                      "name": "Mqtt",
                      "value": "Mqtt",
                      "description": "MQTT target."
                    },
                    {
                      "name": "BrokerStateStore",
                      "value": "BrokerStateStore",
                      "description": "Broker State Store target."
                    },
                    {
                      "name": "Storage",
                      "value": "Storage",
                      "description": "Storage target."
                    }
                  ]
                }
              }
            },
            "discriminator": "target",
            "required": [
              "target"
            ]
          },
          "x-ms-identifiers": []
        },
        "defaultEventsDestinations": {
          "type": "array",
          "description": "Default destinations for an event.",
          "items": {
            "type": "object",
            "description": "The type of the destination.",
            "properties": {
              "target": {
                "description": "Target destination.",
                "type": "string",
                "enum": [
                  "Mqtt",
                  "Storage"
                ],
                "x-ms-enum": {
                  "name": "EventDestinationTarget",
                  "modelAsString": true,
                  "values": [
                    {
                      "name": "Mqtt",
                      "value": "Mqtt",
                      "description": "MQTT target."
                    },
                    {
                      "name": "Storage",
                      "value": "Storage",
                      "description": "Storage target."
                    }
                  ]
                }
              }
            },
            "discriminator": "target",
            "required": [
              "target"
            ]
          },
          "x-ms-identifiers": []
        },
        "defaultStreamsDestinations": {
          "type": "array",
          "description": "Default destinations for a stream.",
          "items": {
            "type": "object",
            "description": "The type of the destination.",
            "properties": {
              "target": {
                "description": "Target destination.",
                "type": "string",
                "enum": [
                  "Mqtt",
                  "Storage"
                ],
                "x-ms-enum": {
                  "name": "StreamDestinationTarget",
                  "modelAsString": true,
                  "values": [
                    {
                      "name": "Mqtt",
                      "value": "Mqtt",
                      "description": "MQTT target."
                    },
                    {
                      "name": "Storage",
                      "value": "Storage",
                      "description": "Storage target."
                    }
                  ]
                }
              }
            },
            "discriminator": "target",
            "required": [
              "target"
            ]
          },
          "x-ms-identifiers": []
        },
        "datasets": {
          "type": "array",
          "description": "Array of datasets that are part of the asset. Each dataset describes the data points that make up the set.",
          "items": {
            "type": "object",
            "description": "Defines the dataset properties.",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the dataset."
              },
              "dataSource": {
                "type": "string",
                "description": "Reference to a data source for a given dataset."
              },
              "typeRef": {
                "type": "string",
                "description": "URI or type definition ID."
              },
              "datasetConfiguration": {
                "type": "string",
                "description": "Stringified JSON that contains connector-specific JSON string that describes configuration for the specific dataset."
              },
              "destinations": {
                "type": "array",
                "description": "Destinations for a dataset.",
                "items": {
                  "type": "object",
                  "description": "The type of the destination.",
                  "properties": {
                    "target": {
                      "description": "Target destination.",
                      "type": "string",
                      "enum": [
                        "Mqtt",
                        "BrokerStateStore",
                        "Storage"
                      ],
                      "x-ms-enum": {
                        "name": "DatasetDestinationTarget",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Mqtt",
                            "value": "Mqtt",
                            "description": "MQTT target."
                          },
                          {
                            "name": "BrokerStateStore",
                            "value": "BrokerStateStore",
                            "description": "Broker State Store target."
                          },
                          {
                            "name": "Storage",
                            "value": "Storage",
                            "description": "Storage target."
                          }
                        ]
                      }
                    }
                  },
                  "discriminator": "target",
                  "required": [
                    "target"
                  ]
                },
                "x-ms-identifiers": []
              },
              "dataPoints": {
                "type": "array",
                "description": "Array of data points that are part of the dataset. Each data point can have per-data point configuration.",
                "items": {
                  "type": "object",
                  "description": "Defines the dataset data point properties.",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The name of the data point."
                    },
                    "dataSource": {
                      "type": "string",
                      "description": "The address of the source of the data in the asset (e.g. URL) so that a client can access the data source on the asset."
                    },
                    "dataPointConfiguration": {
                      "type": "string",
                      "description": "Stringified JSON that contains connector-specific configuration for the data point. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize."
                    },
                    "typeRef": {
                      "type": "string",
                      "description": "URI or type definition ID."
                    }
                  },
                  "required": [
                    "name",
                    "dataSource"
                  ]
                },
                "x-ms-identifiers": []
              }
            },
            "required": [
              "name"
            ]
          },
          "x-ms-identifiers": []
        },
        "eventGroups": {
          "type": "array",
          "description": "Array of event groups that are part of the asset. Each event group can have per-event group configuration.",
          "items": {
            "type": "object",
            "description": "Defines the event group properties.",
            "properties": {
              "name": {
                "type": "string",
                "description": "The name of the event group."
              },
              "dataSource": {
                "type": "string",
                "description": "The address of the notifier of the event group in the asset (e.g. URL) so that a client can access the event group on the asset."
              },
              "eventGroupConfiguration": {
                "type": "string",
                "description": "Stringified JSON that contains connector-specific configuration for the event group. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize."
              },
              "defaultDestinations": {
                "type": "array",
                "description": "Destinations for events. Default destinations when destinations is not defined at the event level.",
                "items": {
                  "type": "object",
                  "description": "The type of the destination.",
                  "properties": {
                    "target": {
                      "description": "Target destination.",
                      "type": "string",
                      "enum": [
                        "Mqtt",
                        "Storage"
                      ],
                      "x-ms-enum": {
                        "name": "EventDestinationTarget",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Mqtt",
                            "value": "Mqtt",
                            "description": "MQTT target."
                          },
                          {
                            "name": "Storage",
                            "value": "Storage",
                            "description": "Storage target."
                          }
                        ]
                      }
                    }
                  },
                  "discriminator": "target",
                  "required": [
                    "target"
                  ]
                },
                "x-ms-identifiers": []
              },
              "typeRef": {
                "type": "string",
                "description": "URI or type definition ID."
              },
              "events": {
                "type": "array",
                "description": "Array of events that are part of the event group.",
                "items": {
                  "type": "object",
                  "description": "Defines the event properties.",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The name of the event."
                    },
                    "dataSource": {
                      "type": "string",
                      "description": "Reference to a data source for a given event."
                    },
                    "eventConfiguration": {
                      "type": "string",
                      "description": "Stringified JSON that contains connector-specific configuration for the event. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize."
                    },
                    "destinations": {
                      "type": "array",
                      "description": "Destinations for an event.",
                      "items": {
                        "type": "object",
                        "description": "The type of the destination.",
                        "properties": {
                          "target": {
                            "description": "Target destination.",
                            "type": "string",
                            "enum": [
                              "Mqtt",
                              "Storage"
                            ],
                            "x-ms-enum": {
                              "name": "EventDestinationTarget",
                              "modelAsString": true,
                              "values": [
                                {
                                  "name": "Mqtt",
                                  "value": "Mqtt",
                                  "description": "MQTT target."
                                },
                                {
                                  "name": "Storage",
                                  "value": "Storage",
                                  "description": "Storage target."
                                }
                              ]
                            }
                          }
                        },
                        "discriminator": "target",
                        "required": [
                          "target"
                        ]
                      },
                      "x-ms-identifiers": []
                    },
                    "typeRef": {
                      "type": "string",
                      "description": "URI or type definition ID."
                    }
                  },
                  "required": [
                    "name"
                  ]
                },
                "x-ms-identifiers": []
              }
            },
            "required": [
              "name"
            ]
          },
          "x-ms-identifiers": []
        },
        "streams": {
          "type": "array",
          "description": "Array of streams that are part of the asset. Each stream can have a per-stream configuration.",
          "items": {
            "type": "object",
            "description": "Defines the stream properties.",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the stream definition."
              },
              "streamConfiguration": {
                "type": "string",
                "description": "Stringified JSON that contains connector-specific configuration for the specific stream."
              },
              "typeRef": {
                "type": "string",
                "description": "URI or type definition ID."
              },
              "destinations": {
                "type": "array",
                "description": "Destinations for a stream.",
                "items": {
                  "type": "object",
                  "description": "The type of the destination.",
                  "properties": {
                    "target": {
                      "description": "Target destination.",
                      "type": "string",
                      "enum": [
                        "Mqtt",
                        "Storage"
                      ],
                      "x-ms-enum": {
                        "name": "StreamDestinationTarget",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Mqtt",
                            "value": "Mqtt",
                            "description": "MQTT target."
                          },
                          {
                            "name": "Storage",
                            "value": "Storage",
                            "description": "Storage target."
                          }
                        ]
                      }
                    }
                  },
                  "discriminator": "target",
                  "required": [
                    "target"
                  ]
                },
                "x-ms-identifiers": []
              }
            },
            "required": [
              "name"
            ]
          },
          "x-ms-identifiers": []
        },
        "managementGroups": {
          "type": "array",
          "description": "Array of management groups that are part of the asset. Each management group can have a per-group configuration.",
          "items": {
            "type": "object",
            "description": "Defines the management group properties.",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the management group."
              },
              "dataSource": {
                "type": "string",
                "description": "Reference to a data source for a given management group."
              },
              "managementGroupConfiguration": {
                "type": "string",
                "description": "Stringified JSON that contains connector-specific configuration for the management group."
              },
              "typeRef": {
                "type": "string",
                "description": "URI or type definition ID."
              },
              "defaultTopic": {
                "type": "string",
                "description": "Default MQTT topic path on which a client will receive the request for all actions that are part of the management group."
              },
              "defaultTimeoutInSeconds": {
                "type": "integer",
                "format": "int32",
                "description": "Default response timeout for all actions that are part of the management group.",
                "default": 100
              },
              "actions": {
                "type": "array",
                "description": "Array of actions that are part of the management group. Each action can have an individual configuration.",
                "items": {
                  "type": "object",
                  "description": "Defines the action properties.",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Name of the action."
                    },
                    "actionConfiguration": {
                      "type": "string",
                      "description": "Stringified JSON that contains connector-specific configuration for the action."
                    },
                    "targetUri": {
                      "type": "string",
                      "description": "The target URI on which a client can invoke the specific action."
                    },
                    "typeRef": {
                      "type": "string",
                      "description": "URI or type definition ID."
                    },
                    "topic": {
                      "type": "string",
                      "description": "The MQTT topic path on which a client will receive the request for the action."
                    },
                    "actionType": {
                      "type": "string",
                      "description": "The type of the action.",
                      "default": "Call",
                      "enum": [
                        "Call",
                        "Read",
                        "Write"
                      ],
                      "x-ms-enum": {
                        "name": "ManagementActionType",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Call",
                            "value": "Call",
                            "description": "Call action type."
                          },
                          {
                            "name": "Read",
                            "value": "Read",
                            "description": "Read action type."
                          },
                          {
                            "name": "Write",
                            "value": "Write",
                            "description": "Write action type."
                          }
                        ]
                      }
                    },
                    "timeoutInSeconds": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Response timeout for the action."
                    }
                  },
                  "required": [
                    "name",
                    "targetUri"
                  ]
                },
                "x-ms-identifiers": []
              }
            },
            "required": [
              "name"
            ]
          },
          "x-ms-identifiers": []
        },
        "status": {
          "description": "Read only object to reflect changes that have occurred on the Edge. Similar to Kubernetes status property for custom resources.",
          "readOnly": true,
          "type": "object",
          "properties": {
            "config": {
              "description": "Defines the asset status config properties.",
              "readOnly": true,
              "type": "object",
              "properties": {
                "version": {
                  "type": "integer",
                  "format": "int64",
                  "description": "A read-only incremental counter indicating the number of times the configuration has been modified from the perspective of the current actual (edge) state of the CRD. Edge would be the only writer of this value and would sync back up to the cloud. In steady state, this should equal version.",
                  "readOnly": true
                },
                "lastTransitionTime": {
                  "type": "string",
                  "format": "date-time",
                  "description": "A read-only timestamp indicating the last time the configuration has been modified from the perspective of the current actual (edge) state of the CRD. Edge would be the only writer of this value and would sync back up to the cloud.",
                  "readOnly": true
                },
                "error": {
                  "description": "Object to transfer and persist errors that originate from the edge.",
                  "readOnly": true,
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Error code for classification of errors (ex: '400', '404', '500', etc.).",
                      "readOnly": true
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable helpful error message to provide additional context for error (e.g.,: “Capability ID 'foo' does not exist”).",
                      "readOnly": true
                    },
                    "details": {
                      "type": "array",
                      "description": "Array of error details that describe the status of each error.",
                      "items": {
                        "type": "object",
                        "description": "Defines the error details properties.",
                        "properties": {
                          "code": {
                            "type": "string",
                            "description": "Multi-part error code for classification and root causing of errors (ex: 400.200.100.432).",
                            "readOnly": true
                          },
                          "message": {
                            "type": "string",
                            "description": "Human-readable helpful error message to provide additional context for error (ex: “Authentication method not supported”).",
                            "readOnly": true
                          },
                          "info": {
                            "type": "string",
                            "description": "Human-readable helpful detailed text context for debugging (ex: “The following mechanisms are supported...”).",
                            "readOnly": true
                          },
                          "correlationId": {
                            "type": "string",
                            "description": "Unique identifier for the transaction to aid in debugging.",
                            "readOnly": true
                          }
                        }
                      },
                      "readOnly": true,
                      "x-ms-identifiers": []
                    }
                  }
                }
              }
            },
            "datasets": {
              "type": "array",
              "description": "Array of dataset statuses that describe the status of each dataset.",
              "items": {
                "type": "object",
                "description": "Defines the asset status dataset properties.",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the dataset. Must be unique within the status.datasets array. This name is used to correlate between the spec and status dataset information.",
                    "readOnly": true
                  },
                  "messageSchemaReference": {
                    "description": "The message schema reference object.",
                    "readOnly": true,
                    "type": "object",
                    "properties": {
                      "schemaRegistryNamespace": {
                        "type": "string",
                        "description": "The message schema registry namespace.",
                        "readOnly": true
                      },
                      "schemaName": {
                        "type": "string",
                        "description": "The message schema name.",
                        "readOnly": true
                      },
                      "schemaVersion": {
                        "type": "string",
                        "description": "The message schema version.",
                        "readOnly": true
                      }
                    },
                    "required": [
                      "schemaRegistryNamespace",
                      "schemaName",
                      "schemaVersion"
                    ]
                  },
                  "error": {
                    "description": "Object to transfer and persist errors that originate from the edge.",
                    "readOnly": true,
                    "type": "object",
                    "properties": {
                      "code": {
                        "type": "string",
                        "description": "Error code for classification of errors (ex: '400', '404', '500', etc.).",
                        "readOnly": true
                      },
                      "message": {
                        "type": "string",
                        "description": "Human-readable helpful error message to provide additional context for error (e.g.,: “Capability ID 'foo' does not exist”).",
                        "readOnly": true
                      },
                      "details": {
                        "type": "array",
                        "description": "Array of error details that describe the status of each error.",
                        "items": {
                          "type": "object",
                          "description": "Defines the error details properties.",
                          "properties": {
                            "code": {
                              "type": "string",
                              "description": "Multi-part error code for classification and root causing of errors (ex: 400.200.100.432).",
                              "readOnly": true
                            },
                            "message": {
                              "type": "string",
                              "description": "Human-readable helpful error message to provide additional context for error (ex: “Authentication method not supported”).",
                              "readOnly": true
                            },
                            "info": {
                              "type": "string",
                              "description": "Human-readable helpful detailed text context for debugging (ex: “The following mechanisms are supported...”).",
                              "readOnly": true
                            },
                            "correlationId": {
                              "type": "string",
                              "description": "Unique identifier for the transaction to aid in debugging.",
                              "readOnly": true
                            }
                          }
                        },
                        "readOnly": true,
                        "x-ms-identifiers": []
                      }
                    }
                  }
                },
                "required": [
                  "name"
                ]
              },
              "readOnly": true,
              "x-ms-identifiers": []
            },
            "eventGroups": {
              "type": "array",
              "description": "Array of event group statuses that describe the status of each event group.",
              "items": {
                "type": "object",
                "description": "Defines the asset status event group properties.",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the event group. Must be unique within the status.eventGroups array. This name is used to correlate between the spec and status event group information.",
                    "readOnly": true
                  },
                  "events": {
                    "type": "array",
                    "description": "Array of event statuses that describe the status of each event in the event group.",
                    "items": {
                      "type": "object",
                      "description": "Defines the asset status event properties.",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "The name of the event. Must be unique within the status.events array. This name is used to correlate between the spec and status event information.",
                          "readOnly": true
                        },
                        "messageSchemaReference": {
                          "description": "The message schema reference object.",
                          "readOnly": true,
                          "type": "object",
                          "properties": {
                            "schemaRegistryNamespace": {
                              "type": "string",
                              "description": "The message schema registry namespace.",
                              "readOnly": true
                            },
                            "schemaName": {
                              "type": "string",
                              "description": "The message schema name.",
                              "readOnly": true
                            },
                            "schemaVersion": {
                              "type": "string",
                              "description": "The message schema version.",
                              "readOnly": true
                            }
                          },
                          "required": [
                            "schemaRegistryNamespace",
                            "schemaName",
                            "schemaVersion"
                          ]
                        },
                        "error": {
                          "description": "Object to transfer and persist errors that originate from the edge.",
                          "readOnly": true,
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string",
                              "description": "Error code for classification of errors (ex: '400', '404', '500', etc.).",
                              "readOnly": true
                            },
                            "message": {
                              "type": "string",
                              "description": "Human-readable helpful error message to provide additional context for error (e.g.,: “Capability ID 'foo' does not exist”).",
                              "readOnly": true
                            },
                            "details": {
                              "type": "array",
                              "description": "Array of error details that describe the status of each error.",
                              "items": {
                                "type": "object",
                                "description": "Defines the error details properties.",
                                "properties": {
                                  "code": {
                                    "type": "string",
                                    "description": "Multi-part error code for classification and root causing of errors (ex: 400.200.100.432).",
                                    "readOnly": true
                                  },
                                  "message": {
                                    "type": "string",
                                    "description": "Human-readable helpful error message to provide additional context for error (ex: “Authentication method not supported”).",
                                    "readOnly": true
                                  },
                                  "info": {
                                    "type": "string",
                                    "description": "Human-readable helpful detailed text context for debugging (ex: “The following mechanisms are supported...”).",
                                    "readOnly": true
                                  },
                                  "correlationId": {
                                    "type": "string",
                                    "description": "Unique identifier for the transaction to aid in debugging.",
                                    "readOnly": true
                                  }
                                }
                              },
                              "readOnly": true,
                              "x-ms-identifiers": []
                            }
                          }
                        }
                      },
                      "required": [
                        "name"
                      ]
                    },
                    "readOnly": true,
                    "x-ms-identifiers": []
                  }
                },
                "required": [
                  "name"
                ]
              },
              "readOnly": true,
              "x-ms-identifiers": []
            },
            "streams": {
              "type": "array",
              "description": "Array of stream statuses that describe the status of each stream.",
              "items": {
                "type": "object",
                "description": "Defines the asset status stream properties.",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the stream. Must be unique within the status.streams array. This name is used to correlate between the spec and status event information.",
                    "readOnly": true
                  },
                  "messageSchemaReference": {
                    "description": "The message schema reference object.",
                    "readOnly": true,
                    "type": "object",
                    "properties": {
                      "schemaRegistryNamespace": {
                        "type": "string",
                        "description": "The message schema registry namespace.",
                        "readOnly": true
                      },
                      "schemaName": {
                        "type": "string",
                        "description": "The message schema name.",
                        "readOnly": true
                      },
                      "schemaVersion": {
                        "type": "string",
                        "description": "The message schema version.",
                        "readOnly": true
                      }
                    },
                    "required": [
                      "schemaRegistryNamespace",
                      "schemaName",
                      "schemaVersion"
                    ]
                  },
                  "error": {
                    "description": "Object to transfer and persist errors that originate from the edge.",
                    "readOnly": true,
                    "type": "object",
                    "properties": {
                      "code": {
                        "type": "string",
                        "description": "Error code for classification of errors (ex: '400', '404', '500', etc.).",
                        "readOnly": true
                      },
                      "message": {
                        "type": "string",
                        "description": "Human-readable helpful error message to provide additional context for error (e.g.,: “Capability ID 'foo' does not exist”).",
                        "readOnly": true
                      },
                      "details": {
                        "type": "array",
                        "description": "Array of error details that describe the status of each error.",
                        "items": {
                          "type": "object",
                          "description": "Defines the error details properties.",
                          "properties": {
                            "code": {
                              "type": "string",
                              "description": "Multi-part error code for classification and root causing of errors (ex: 400.200.100.432).",
                              "readOnly": true
                            },
                            "message": {
                              "type": "string",
                              "description": "Human-readable helpful error message to provide additional context for error (ex: “Authentication method not supported”).",
                              "readOnly": true
                            },
                            "info": {
                              "type": "string",
                              "description": "Human-readable helpful detailed text context for debugging (ex: “The following mechanisms are supported...”).",
                              "readOnly": true
                            },
                            "correlationId": {
                              "type": "string",
                              "description": "Unique identifier for the transaction to aid in debugging.",
                              "readOnly": true
                            }
                          }
                        },
                        "readOnly": true,
                        "x-ms-identifiers": []
                      }
                    }
                  }
                },
                "required": [
                  "name"
                ]
              },
              "readOnly": true,
              "x-ms-identifiers": []
            },
            "managementGroups": {
              "type": "array",
              "description": "Array of management group statuses that describe the status of each management group.",
              "items": {
                "type": "object",
                "description": "Defines the asset status management group properties.",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the management group. Must be unique within the status.managementGroups array. This name is used to correlate between the spec and status event information.",
                    "readOnly": true
                  },
                  "actions": {
                    "type": "array",
                    "description": "Array of action statuses that describe the status of each action.",
                    "items": {
                      "type": "object",
                      "description": "Defines the asset status action properties.",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "The name of the action. Must be unique within the status.actions array. This name is used to correlate between the spec and status event information.",
                          "readOnly": true
                        },
                        "requestMessageSchemaReference": {
                          "description": "The request message schema reference object for the action.",
                          "readOnly": true,
                          "type": "object",
                          "properties": {
                            "schemaRegistryNamespace": {
                              "type": "string",
                              "description": "The message schema registry namespace.",
                              "readOnly": true
                            },
                            "schemaName": {
                              "type": "string",
                              "description": "The message schema name.",
                              "readOnly": true
                            },
                            "schemaVersion": {
                              "type": "string",
                              "description": "The message schema version.",
                              "readOnly": true
                            }
                          },
                          "required": [
                            "schemaRegistryNamespace",
                            "schemaName",
                            "schemaVersion"
                          ]
                        },
                        "responseMessageSchemaReference": {
                          "description": "The response message schema reference object for the action.",
                          "readOnly": true,
                          "type": "object",
                          "properties": {
                            "schemaRegistryNamespace": {
                              "type": "string",
                              "description": "The message schema registry namespace.",
                              "readOnly": true
                            },
                            "schemaName": {
                              "type": "string",
                              "description": "The message schema name.",
                              "readOnly": true
                            },
                            "schemaVersion": {
                              "type": "string",
                              "description": "The message schema version.",
                              "readOnly": true
                            }
                          },
                          "required": [
                            "schemaRegistryNamespace",
                            "schemaName",
                            "schemaVersion"
                          ]
                        },
                        "error": {
                          "description": "Object to transfer and persist errors that originate from the edge.",
                          "readOnly": true,
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string",
                              "description": "Error code for classification of errors (ex: '400', '404', '500', etc.).",
                              "readOnly": true
                            },
                            "message": {
                              "type": "string",
                              "description": "Human-readable helpful error message to provide additional context for error (e.g.,: “Capability ID 'foo' does not exist”).",
                              "readOnly": true
                            },
                            "details": {
                              "type": "array",
                              "description": "Array of error details that describe the status of each error.",
                              "items": {
                                "type": "object",
                                "description": "Defines the error details properties.",
                                "properties": {
                                  "code": {
                                    "type": "string",
                                    "description": "Multi-part error code for classification and root causing of errors (ex: 400.200.100.432).",
                                    "readOnly": true
                                  },
                                  "message": {
                                    "type": "string",
                                    "description": "Human-readable helpful error message to provide additional context for error (ex: “Authentication method not supported”).",
                                    "readOnly": true
                                  },
                                  "info": {
                                    "type": "string",
                                    "description": "Human-readable helpful detailed text context for debugging (ex: “The following mechanisms are supported...”).",
                                    "readOnly": true
                                  },
                                  "correlationId": {
                                    "type": "string",
                                    "description": "Unique identifier for the transaction to aid in debugging.",
                                    "readOnly": true
                                  }
                                }
                              },
                              "readOnly": true,
                              "x-ms-identifiers": []
                            }
                          }
                        }
                      },
                      "required": [
                        "name"
                      ]
                    },
                    "readOnly": true,
                    "x-ms-identifiers": []
                  }
                },
                "required": [
                  "name"
                ]
              },
              "readOnly": true,
              "x-ms-identifiers": []
            }
          }
        },
        "provisioningState": {
          "description": "Provisioning state of the resource.",
          "readOnly": true,
          "type": "string",
          "enum": [
            "Succeeded",
            "Failed",
            "Canceled",
            "Accepted",
            "Deleting"
          ],
          "x-ms-enum": {
            "name": "ProvisioningState",
            "modelAsString": true,
            "values": [
              {
                "name": "Succeeded",
                "value": "Succeeded",
                "description": "Resource has been created."
              },
              {
                "name": "Failed",
                "value": "Failed",
                "description": "Resource creation failed."
              },
              {
                "name": "Canceled",
                "value": "Canceled",
                "description": "Resource creation was canceled."
              },
              {
                "name": "Accepted",
                "value": "Accepted",
                "description": "Resource has been accepted by the server."
              },
              {
                "name": "Deleting",
                "value": "Deleting",
                "description": "Resource is deleting."
              }
            ]
          }
        }
      },
      "required": [
        "deviceRef"
      ]
    },
    "NamespaceAssetStatus": {
      "type": "object",
      "description": "Defines the asset status properties.",
      "properties": {
        "config": {
          "description": "Defines the asset status config properties.",
          "readOnly": true,
          "type": "object",
          "properties": {
            "version": {
              "type": "integer",
              "format": "int64",
              "description": "A read-only incremental counter indicating the number of times the configuration has been modified from the perspective of the current actual (edge) state of the CRD. Edge would be the only writer of this value and would sync back up to the cloud. In steady state, this should equal version.",
              "readOnly": true
            },
            "lastTransitionTime": {
              "type": "string",
              "format": "date-time",
              "description": "A read-only timestamp indicating the last time the configuration has been modified from the perspective of the current actual (edge) state of the CRD. Edge would be the only writer of this value and would sync back up to the cloud.",
              "readOnly": true
            },
            "error": {
              "description": "Object to transfer and persist errors that originate from the edge.",
              "readOnly": true,
              "type": "object",
              "properties": {
                "code": {
                  "type": "string",
                  "description": "Error code for classification of errors (ex: '400', '404', '500', etc.).",
                  "readOnly": true
                },
                "message": {
                  "type": "string",
                  "description": "Human-readable helpful error message to provide additional context for error (e.g.,: “Capability ID 'foo' does not exist”).",
                  "readOnly": true
                },
                "details": {
                  "type": "array",
                  "description": "Array of error details that describe the status of each error.",
                  "items": {
                    "type": "object",
                    "description": "Defines the error details properties.",
                    "properties": {
                      "code": {
                        "type": "string",
                        "description": "Multi-part error code for classification and root causing of errors (ex: 400.200.100.432).",
                        "readOnly": true
                      },
                      "message": {
                        "type": "string",
                        "description": "Human-readable helpful error message to provide additional context for error (ex: “Authentication method not supported”).",
                        "readOnly": true
                      },
                      "info": {
                        "type": "string",
                        "description": "Human-readable helpful detailed text context for debugging (ex: “The following mechanisms are supported...”).",
                        "readOnly": true
                      },
                      "correlationId": {
                        "type": "string",
                        "description": "Unique identifier for the transaction to aid in debugging.",
                        "readOnly": true
                      }
                    }
                  },
                  "readOnly": true,
                  "x-ms-identifiers": []
                }
              }
            }
          }
        },
        "datasets": {
          "type": "array",
          "description": "Array of dataset statuses that describe the status of each dataset.",
          "items": {
            "type": "object",
            "description": "Defines the asset status dataset properties.",
            "properties": {
              "name": {
                "type": "string",
                "description": "The name of the dataset. Must be unique within the status.datasets array. This name is used to correlate between the spec and status dataset information.",
                "readOnly": true
              },
              "messageSchemaReference": {
                "description": "The message schema reference object.",
                "readOnly": true,
                "type": "object",
                "properties": {
                  "schemaRegistryNamespace": {
                    "type": "string",
                    "description": "The message schema registry namespace.",
                    "readOnly": true
                  },
                  "schemaName": {
                    "type": "string",
                    "description": "The message schema name.",
                    "readOnly": true
                  },
                  "schemaVersion": {
                    "type": "string",
                    "description": "The message schema version.",
                    "readOnly": true
                  }
                },
                "required": [
                  "schemaRegistryNamespace",
                  "schemaName",
                  "schemaVersion"
                ]
              },
              "error": {
                "description": "Object to transfer and persist errors that originate from the edge.",
                "readOnly": true,
                "type": "object",
                "properties": {
                  "code": {
                    "type": "string",
                    "description": "Error code for classification of errors (ex: '400', '404', '500', etc.).",
                    "readOnly": true
                  },
                  "message": {
                    "type": "string",
                    "description": "Human-readable helpful error message to provide additional context for error (e.g.,: “Capability ID 'foo' does not exist”).",
                    "readOnly": true
                  },
                  "details": {
                    "type": "array",
                    "description": "Array of error details that describe the status of each error.",
                    "items": {
                      "type": "object",
                      "description": "Defines the error details properties.",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Multi-part error code for classification and root causing of errors (ex: 400.200.100.432).",
                          "readOnly": true
                        },
                        "message": {
                          "type": "string",
                          "description": "Human-readable helpful error message to provide additional context for error (ex: “Authentication method not supported”).",
                          "readOnly": true
                        },
                        "info": {
                          "type": "string",
                          "description": "Human-readable helpful detailed text context for debugging (ex: “The following mechanisms are supported...”).",
                          "readOnly": true
                        },
                        "correlationId": {
                          "type": "string",
                          "description": "Unique identifier for the transaction to aid in debugging.",
                          "readOnly": true
                        }
                      }
                    },
                    "readOnly": true,
                    "x-ms-identifiers": []
                  }
                }
              }
            },
            "required": [
              "name"
            ]
          },
          "readOnly": true,
          "x-ms-identifiers": []
        },
        "eventGroups": {
          "type": "array",
          "description": "Array of event group statuses that describe the status of each event group.",
          "items": {
            "type": "object",
            "description": "Defines the asset status event group properties.",
            "properties": {
              "name": {
                "type": "string",
                "description": "The name of the event group. Must be unique within the status.eventGroups array. This name is used to correlate between the spec and status event group information.",
                "readOnly": true
              },
              "events": {
                "type": "array",
                "description": "Array of event statuses that describe the status of each event in the event group.",
                "items": {
                  "type": "object",
                  "description": "Defines the asset status event properties.",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The name of the event. Must be unique within the status.events array. This name is used to correlate between the spec and status event information.",
                      "readOnly": true
                    },
                    "messageSchemaReference": {
                      "description": "The message schema reference object.",
                      "readOnly": true,
                      "type": "object",
                      "properties": {
                        "schemaRegistryNamespace": {
                          "type": "string",
                          "description": "The message schema registry namespace.",
                          "readOnly": true
                        },
                        "schemaName": {
                          "type": "string",
                          "description": "The message schema name.",
                          "readOnly": true
                        },
                        "schemaVersion": {
                          "type": "string",
                          "description": "The message schema version.",
                          "readOnly": true
                        }
                      },
                      "required": [
                        "schemaRegistryNamespace",
                        "schemaName",
                        "schemaVersion"
                      ]
                    },
                    "error": {
                      "description": "Object to transfer and persist errors that originate from the edge.",
                      "readOnly": true,
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code for classification of errors (ex: '400', '404', '500', etc.).",
                          "readOnly": true
                        },
                        "message": {
                          "type": "string",
                          "description": "Human-readable helpful error message to provide additional context for error (e.g.,: “Capability ID 'foo' does not exist”).",
                          "readOnly": true
                        },
                        "details": {
                          "type": "array",
                          "description": "Array of error details that describe the status of each error.",
                          "items": {
                            "type": "object",
                            "description": "Defines the error details properties.",
                            "properties": {
                              "code": {
                                "type": "string",
                                "description": "Multi-part error code for classification and root causing of errors (ex: 400.200.100.432).",
                                "readOnly": true
                              },
                              "message": {
                                "type": "string",
                                "description": "Human-readable helpful error message to provide additional context for error (ex: “Authentication method not supported”).",
                                "readOnly": true
                              },
                              "info": {
                                "type": "string",
                                "description": "Human-readable helpful detailed text context for debugging (ex: “The following mechanisms are supported...”).",
                                "readOnly": true
                              },
                              "correlationId": {
                                "type": "string",
                                "description": "Unique identifier for the transaction to aid in debugging.",
                                "readOnly": true
                              }
                            }
                          },
                          "readOnly": true,
                          "x-ms-identifiers": []
                        }
                      }
                    }
                  },
                  "required": [
                    "name"
                  ]
                },
                "readOnly": true,
                "x-ms-identifiers": []
              }
            },
            "required": [
              "name"
            ]
          },
          "readOnly": true,
          "x-ms-identifiers": []
        },
        "streams": {
          "type": "array",
          "description": "Array of stream statuses that describe the status of each stream.",
          "items": {
            "type": "object",
            "description": "Defines the asset status stream properties.",
            "properties": {
              "name": {
                "type": "string",
                "description": "The name of the stream. Must be unique within the status.streams array. This name is used to correlate between the spec and status event information.",
                "readOnly": true
              },
              "messageSchemaReference": {
                "description": "The message schema reference object.",
                "readOnly": true,
                "type": "object",
                "properties": {
                  "schemaRegistryNamespace": {
                    "type": "string",
                    "description": "The message schema registry namespace.",
                    "readOnly": true
                  },
                  "schemaName": {
                    "type": "string",
                    "description": "The message schema name.",
                    "readOnly": true
                  },
                  "schemaVersion": {
                    "type": "string",
                    "description": "The message schema version.",
                    "readOnly": true
                  }
                },
                "required": [
                  "schemaRegistryNamespace",
                  "schemaName",
                  "schemaVersion"
                ]
              },
              "error": {
                "description": "Object to transfer and persist errors that originate from the edge.",
                "readOnly": true,
                "type": "object",
                "properties": {
                  "code": {
                    "type": "string",
                    "description": "Error code for classification of errors (ex: '400', '404', '500', etc.).",
                    "readOnly": true
                  },
                  "message": {
                    "type": "string",
                    "description": "Human-readable helpful error message to provide additional context for error (e.g.,: “Capability ID 'foo' does not exist”).",
                    "readOnly": true
                  },
                  "details": {
                    "type": "array",
                    "description": "Array of error details that describe the status of each error.",
                    "items": {
                      "type": "object",
                      "description": "Defines the error details properties.",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Multi-part error code for classification and root causing of errors (ex: 400.200.100.432).",
                          "readOnly": true
                        },
                        "message": {
                          "type": "string",
                          "description": "Human-readable helpful error message to provide additional context for error (ex: “Authentication method not supported”).",
                          "readOnly": true
                        },
                        "info": {
                          "type": "string",
                          "description": "Human-readable helpful detailed text context for debugging (ex: “The following mechanisms are supported...”).",
                          "readOnly": true
                        },
                        "correlationId": {
                          "type": "string",
                          "description": "Unique identifier for the transaction to aid in debugging.",
                          "readOnly": true
                        }
                      }
                    },
                    "readOnly": true,
                    "x-ms-identifiers": []
                  }
                }
              }
            },
            "required": [
              "name"
            ]
          },
          "readOnly": true,
          "x-ms-identifiers": []
        },
        "managementGroups": {
          "type": "array",
          "description": "Array of management group statuses that describe the status of each management group.",
          "items": {
            "type": "object",
            "description": "Defines the asset status management group properties.",
            "properties": {
              "name": {
                "type": "string",
                "description": "The name of the management group. Must be unique within the status.managementGroups array. This name is used to correlate between the spec and status event information.",
                "readOnly": true
              },
              "actions": {
                "type": "array",
                "description": "Array of action statuses that describe the status of each action.",
                "items": {
                  "type": "object",
                  "description": "Defines the asset status action properties.",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The name of the action. Must be unique within the status.actions array. This name is used to correlate between the spec and status event information.",
                      "readOnly": true
                    },
                    "requestMessageSchemaReference": {
                      "description": "The request message schema reference object for the action.",
                      "readOnly": true,
                      "type": "object",
                      "properties": {
                        "schemaRegistryNamespace": {
                          "type": "string",
                          "description": "The message schema registry namespace.",
                          "readOnly": true
                        },
                        "schemaName": {
                          "type": "string",
                          "description": "The message schema name.",
                          "readOnly": true
                        },
                        "schemaVersion": {
                          "type": "string",
                          "description": "The message schema version.",
                          "readOnly": true
                        }
                      },
                      "required": [
                        "schemaRegistryNamespace",
                        "schemaName",
                        "schemaVersion"
                      ]
                    },
                    "responseMessageSchemaReference": {
                      "description": "The response message schema reference object for the action.",
                      "readOnly": true,
                      "type": "object",
                      "properties": {
                        "schemaRegistryNamespace": {
                          "type": "string",
                          "description": "The message schema registry namespace.",
                          "readOnly": true
                        },
                        "schemaName": {
                          "type": "string",
                          "description": "The message schema name.",
                          "readOnly": true
                        },
                        "schemaVersion": {
                          "type": "string",
                          "description": "The message schema version.",
                          "readOnly": true
                        }
                      },
                      "required": [
                        "schemaRegistryNamespace",
                        "schemaName",
                        "schemaVersion"
                      ]
                    },
                    "error": {
                      "description": "Object to transfer and persist errors that originate from the edge.",
                      "readOnly": true,
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code for classification of errors (ex: '400', '404', '500', etc.).",
                          "readOnly": true
                        },
                        "message": {
                          "type": "string",
                          "description": "Human-readable helpful error message to provide additional context for error (e.g.,: “Capability ID 'foo' does not exist”).",
                          "readOnly": true
                        },
                        "details": {
                          "type": "array",
                          "description": "Array of error details that describe the status of each error.",
                          "items": {
                            "type": "object",
                            "description": "Defines the error details properties.",
                            "properties": {
                              "code": {
                                "type": "string",
                                "description": "Multi-part error code for classification and root causing of errors (ex: 400.200.100.432).",
                                "readOnly": true
                              },
                              "message": {
                                "type": "string",
                                "description": "Human-readable helpful error message to provide additional context for error (ex: “Authentication method not supported”).",
                                "readOnly": true
                              },
                              "info": {
                                "type": "string",
                                "description": "Human-readable helpful detailed text context for debugging (ex: “The following mechanisms are supported...”).",
                                "readOnly": true
                              },
                              "correlationId": {
                                "type": "string",
                                "description": "Unique identifier for the transaction to aid in debugging.",
                                "readOnly": true
                              }
                            }
                          },
                          "readOnly": true,
                          "x-ms-identifiers": []
                        }
                      }
                    }
                  },
                  "required": [
                    "name"
                  ]
                },
                "readOnly": true,
                "x-ms-identifiers": []
              }
            },
            "required": [
              "name"
            ]
          },
          "readOnly": true,
          "x-ms-identifiers": []
        }
      }
    },
    "NamespaceAssetStatusDataset": {
      "type": "object",
      "description": "Defines the asset status dataset properties.",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the dataset. Must be unique within the status.datasets array. This name is used to correlate between the spec and status dataset information.",
          "readOnly": true
        },
        "messageSchemaReference": {
          "description": "The message schema reference object.",
          "readOnly": true,
          "type": "object",
          "properties": {
            "schemaRegistryNamespace": {
              "type": "string",
              "description": "The message schema registry namespace.",
              "readOnly": true
            },
            "schemaName": {
              "type": "string",
              "description": "The message schema name.",
              "readOnly": true
            },
            "schemaVersion": {
              "type": "string",
              "description": "The message schema version.",
              "readOnly": true
            }
          },
          "required": [
            "schemaRegistryNamespace",
            "schemaName",
            "schemaVersion"
          ]
        },
        "error": {
          "description": "Object to transfer and persist errors that originate from the edge.",
          "readOnly": true,
          "type": "object",
          "properties": {
            "code": {
              "type": "string",
              "description": "Error code for classification of errors (ex: '400', '404', '500', etc.).",
              "readOnly": true
            },
            "message": {
              "type": "string",
              "description": "Human-readable helpful error message to provide additional context for error (e.g.,: “Capability ID 'foo' does not exist”).",
              "readOnly": true
            },
            "details": {
              "type": "array",
              "description": "Array of error details that describe the status of each error.",
              "items": {
                "type": "object",
                "description": "Defines the error details properties.",
                "properties": {
                  "code": {
                    "type": "string",
                    "description": "Multi-part error code for classification and root causing of errors (ex: 400.200.100.432).",
                    "readOnly": true
                  },
                  "message": {
                    "type": "string",
                    "description": "Human-readable helpful error message to provide additional context for error (ex: “Authentication method not supported”).",
                    "readOnly": true
                  },
                  "info": {
                    "type": "string",
                    "description": "Human-readable helpful detailed text context for debugging (ex: “The following mechanisms are supported...”).",
                    "readOnly": true
                  },
                  "correlationId": {
                    "type": "string",
                    "description": "Unique identifier for the transaction to aid in debugging.",
                    "readOnly": true
                  }
                }
              },
              "readOnly": true,
              "x-ms-identifiers": []
            }
          }
        }
      },
      "required": [
        "name"
      ]
    },
    "NamespaceAssetStatusEvent": {
      "type": "object",
      "description": "Defines the asset status event properties.",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the event. Must be unique within the status.events array. This name is used to correlate between the spec and status event information.",
          "readOnly": true
        },
        "messageSchemaReference": {
          "description": "The message schema reference object.",
          "readOnly": true,
          "type": "object",
          "properties": {
            "schemaRegistryNamespace": {
              "type": "string",
              "description": "The message schema registry namespace.",
              "readOnly": true
            },
            "schemaName": {
              "type": "string",
              "description": "The message schema name.",
              "readOnly": true
            },
            "schemaVersion": {
              "type": "string",
              "description": "The message schema version.",
              "readOnly": true
            }
          },
          "required": [
            "schemaRegistryNamespace",
            "schemaName",
            "schemaVersion"
          ]
        },
        "error": {
          "description": "Object to transfer and persist errors that originate from the edge.",
          "readOnly": true,
          "type": "object",
          "properties": {
            "code": {
              "type": "string",
              "description": "Error code for classification of errors (ex: '400', '404', '500', etc.).",
              "readOnly": true
            },
            "message": {
              "type": "string",
              "description": "Human-readable helpful error message to provide additional context for error (e.g.,: “Capability ID 'foo' does not exist”).",
              "readOnly": true
            },
            "details": {
              "type": "array",
              "description": "Array of error details that describe the status of each error.",
              "items": {
                "type": "object",
                "description": "Defines the error details properties.",
                "properties": {
                  "code": {
                    "type": "string",
                    "description": "Multi-part error code for classification and root causing of errors (ex: 400.200.100.432).",
                    "readOnly": true
                  },
                  "message": {
                    "type": "string",
                    "description": "Human-readable helpful error message to provide additional context for error (ex: “Authentication method not supported”).",
                    "readOnly": true
                  },
                  "info": {
                    "type": "string",
                    "description": "Human-readable helpful detailed text context for debugging (ex: “The following mechanisms are supported...”).",
                    "readOnly": true
                  },
                  "correlationId": {
                    "type": "string",
                    "description": "Unique identifier for the transaction to aid in debugging.",
                    "readOnly": true
                  }
                }
              },
              "readOnly": true,
              "x-ms-identifiers": []
            }
          }
        }
      },
      "required": [
        "name"
      ]
    },
    "NamespaceAssetStatusEventGroup": {
      "type": "object",
      "description": "Defines the asset status event group properties.",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the event group. Must be unique within the status.eventGroups array. This name is used to correlate between the spec and status event group information.",
          "readOnly": true
        },
        "events": {
          "type": "array",
          "description": "Array of event statuses that describe the status of each event in the event group.",
          "items": {
            "type": "object",
            "description": "Defines the asset status event properties.",
            "properties": {
              "name": {
                "type": "string",
                "description": "The name of the event. Must be unique within the status.events array. This name is used to correlate between the spec and status event information.",
                "readOnly": true
              },
              "messageSchemaReference": {
                "description": "The message schema reference object.",
                "readOnly": true,
                "type": "object",
                "properties": {
                  "schemaRegistryNamespace": {
                    "type": "string",
                    "description": "The message schema registry namespace.",
                    "readOnly": true
                  },
                  "schemaName": {
                    "type": "string",
                    "description": "The message schema name.",
                    "readOnly": true
                  },
                  "schemaVersion": {
                    "type": "string",
                    "description": "The message schema version.",
                    "readOnly": true
                  }
                },
                "required": [
                  "schemaRegistryNamespace",
                  "schemaName",
                  "schemaVersion"
                ]
              },
              "error": {
                "description": "Object to transfer and persist errors that originate from the edge.",
                "readOnly": true,
                "type": "object",
                "properties": {
                  "code": {
                    "type": "string",
                    "description": "Error code for classification of errors (ex: '400', '404', '500', etc.).",
                    "readOnly": true
                  },
                  "message": {
                    "type": "string",
                    "description": "Human-readable helpful error message to provide additional context for error (e.g.,: “Capability ID 'foo' does not exist”).",
                    "readOnly": true
                  },
                  "details": {
                    "type": "array",
                    "description": "Array of error details that describe the status of each error.",
                    "items": {
                      "type": "object",
                      "description": "Defines the error details properties.",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Multi-part error code for classification and root causing of errors (ex: 400.200.100.432).",
                          "readOnly": true
                        },
                        "message": {
                          "type": "string",
                          "description": "Human-readable helpful error message to provide additional context for error (ex: “Authentication method not supported”).",
                          "readOnly": true
                        },
                        "info": {
                          "type": "string",
                          "description": "Human-readable helpful detailed text context for debugging (ex: “The following mechanisms are supported...”).",
                          "readOnly": true
                        },
                        "correlationId": {
                          "type": "string",
                          "description": "Unique identifier for the transaction to aid in debugging.",
                          "readOnly": true
                        }
                      }
                    },
                    "readOnly": true,
                    "x-ms-identifiers": []
                  }
                }
              }
            },
            "required": [
              "name"
            ]
          },
          "readOnly": true,
          "x-ms-identifiers": []
        }
      },
      "required": [
        "name"
      ]
    },
    "NamespaceAssetStatusManagementAction": {
      "type": "object",
      "description": "Defines the asset status action properties.",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the action. Must be unique within the status.actions array. This name is used to correlate between the spec and status event information.",
          "readOnly": true
        },
        "requestMessageSchemaReference": {
          "description": "The request message schema reference object for the action.",
          "readOnly": true,
          "type": "object",
          "properties": {
            "schemaRegistryNamespace": {
              "type": "string",
              "description": "The message schema registry namespace.",
              "readOnly": true
            },
            "schemaName": {
              "type": "string",
              "description": "The message schema name.",
              "readOnly": true
            },
            "schemaVersion": {
              "type": "string",
              "description": "The message schema version.",
              "readOnly": true
            }
          },
          "required": [
            "schemaRegistryNamespace",
            "schemaName",
            "schemaVersion"
          ]
        },
        "responseMessageSchemaReference": {
          "description": "The response message schema reference object for the action.",
          "readOnly": true,
          "type": "object",
          "properties": {
            "schemaRegistryNamespace": {
              "type": "string",
              "description": "The message schema registry namespace.",
              "readOnly": true
            },
            "schemaName": {
              "type": "string",
              "description": "The message schema name.",
              "readOnly": true
            },
            "schemaVersion": {
              "type": "string",
              "description": "The message schema version.",
              "readOnly": true
            }
          },
          "required": [
            "schemaRegistryNamespace",
            "schemaName",
            "schemaVersion"
          ]
        },
        "error": {
          "description": "Object to transfer and persist errors that originate from the edge.",
          "readOnly": true,
          "type": "object",
          "properties": {
            "code": {
              "type": "string",
              "description": "Error code for classification of errors (ex: '400', '404', '500', etc.).",
              "readOnly": true
            },
            "message": {
              "type": "string",
              "description": "Human-readable helpful error message to provide additional context for error (e.g.,: “Capability ID 'foo' does not exist”).",
              "readOnly": true
            },
            "details": {
              "type": "array",
              "description": "Array of error details that describe the status of each error.",
              "items": {
                "type": "object",
                "description": "Defines the error details properties.",
                "properties": {
                  "code": {
                    "type": "string",
                    "description": "Multi-part error code for classification and root causing of errors (ex: 400.200.100.432).",
                    "readOnly": true
                  },
                  "message": {
                    "type": "string",
                    "description": "Human-readable helpful error message to provide additional context for error (ex: “Authentication method not supported”).",
                    "readOnly": true
                  },
                  "info": {
                    "type": "string",
                    "description": "Human-readable helpful detailed text context for debugging (ex: “The following mechanisms are supported...”).",
                    "readOnly": true
                  },
                  "correlationId": {
                    "type": "string",
                    "description": "Unique identifier for the transaction to aid in debugging.",
                    "readOnly": true
                  }
                }
              },
              "readOnly": true,
              "x-ms-identifiers": []
            }
          }
        }
      },
      "required": [
        "name"
      ]
    },
    "NamespaceAssetStatusManagementGroup": {
      "type": "object",
      "description": "Defines the asset status management group properties.",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the management group. Must be unique within the status.managementGroups array. This name is used to correlate between the spec and status event information.",
          "readOnly": true
        },
        "actions": {
          "type": "array",
          "description": "Array of action statuses that describe the status of each action.",
          "items": {
            "type": "object",
            "description": "Defines the asset status action properties.",
            "properties": {
              "name": {
                "type": "string",
                "description": "The name of the action. Must be unique within the status.actions array. This name is used to correlate between the spec and status event information.",
                "readOnly": true
              },
              "requestMessageSchemaReference": {
                "description": "The request message schema reference object for the action.",
                "readOnly": true,
                "type": "object",
                "properties": {
                  "schemaRegistryNamespace": {
                    "type": "string",
                    "description": "The message schema registry namespace.",
                    "readOnly": true
                  },
                  "schemaName": {
                    "type": "string",
                    "description": "The message schema name.",
                    "readOnly": true
                  },
                  "schemaVersion": {
                    "type": "string",
                    "description": "The message schema version.",
                    "readOnly": true
                  }
                },
                "required": [
                  "schemaRegistryNamespace",
                  "schemaName",
                  "schemaVersion"
                ]
              },
              "responseMessageSchemaReference": {
                "description": "The response message schema reference object for the action.",
                "readOnly": true,
                "type": "object",
                "properties": {
                  "schemaRegistryNamespace": {
                    "type": "string",
                    "description": "The message schema registry namespace.",
                    "readOnly": true
                  },
                  "schemaName": {
                    "type": "string",
                    "description": "The message schema name.",
                    "readOnly": true
                  },
                  "schemaVersion": {
                    "type": "string",
                    "description": "The message schema version.",
                    "readOnly": true
                  }
                },
                "required": [
                  "schemaRegistryNamespace",
                  "schemaName",
                  "schemaVersion"
                ]
              },
              "error": {
                "description": "Object to transfer and persist errors that originate from the edge.",
                "readOnly": true,
                "type": "object",
                "properties": {
                  "code": {
                    "type": "string",
                    "description": "Error code for classification of errors (ex: '400', '404', '500', etc.).",
                    "readOnly": true
                  },
                  "message": {
                    "type": "string",
                    "description": "Human-readable helpful error message to provide additional context for error (e.g.,: “Capability ID 'foo' does not exist”).",
                    "readOnly": true
                  },
                  "details": {
                    "type": "array",
                    "description": "Array of error details that describe the status of each error.",
                    "items": {
                      "type": "object",
                      "description": "Defines the error details properties.",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Multi-part error code for classification and root causing of errors (ex: 400.200.100.432).",
                          "readOnly": true
                        },
                        "message": {
                          "type": "string",
                          "description": "Human-readable helpful error message to provide additional context for error (ex: “Authentication method not supported”).",
                          "readOnly": true
                        },
                        "info": {
                          "type": "string",
                          "description": "Human-readable helpful detailed text context for debugging (ex: “The following mechanisms are supported...”).",
                          "readOnly": true
                        },
                        "correlationId": {
                          "type": "string",
                          "description": "Unique identifier for the transaction to aid in debugging.",
                          "readOnly": true
                        }
                      }
                    },
                    "readOnly": true,
                    "x-ms-identifiers": []
                  }
                }
              }
            },
            "required": [
              "name"
            ]
          },
          "readOnly": true,
          "x-ms-identifiers": []
        }
      },
      "required": [
        "name"
      ]
    },
    "NamespaceAssetStatusStream": {
      "type": "object",
      "description": "Defines the asset status stream properties.",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the stream. Must be unique within the status.streams array. This name is used to correlate between the spec and status event information.",
          "readOnly": true
        },
        "messageSchemaReference": {
          "description": "The message schema reference object.",
          "readOnly": true,
          "type": "object",
          "properties": {
            "schemaRegistryNamespace": {
              "type": "string",
              "description": "The message schema registry namespace.",
              "readOnly": true
            },
            "schemaName": {
              "type": "string",
              "description": "The message schema name.",
              "readOnly": true
            },
            "schemaVersion": {
              "type": "string",
              "description": "The message schema version.",
              "readOnly": true
            }
          },
          "required": [
            "schemaRegistryNamespace",
            "schemaName",
            "schemaVersion"
          ]
        },
        "error": {
          "description": "Object to transfer and persist errors that originate from the edge.",
          "readOnly": true,
          "type": "object",
          "properties": {
            "code": {
              "type": "string",
              "description": "Error code for classification of errors (ex: '400', '404', '500', etc.).",
              "readOnly": true
            },
            "message": {
              "type": "string",
              "description": "Human-readable helpful error message to provide additional context for error (e.g.,: “Capability ID 'foo' does not exist”).",
              "readOnly": true
            },
            "details": {
              "type": "array",
              "description": "Array of error details that describe the status of each error.",
              "items": {
                "type": "object",
                "description": "Defines the error details properties.",
                "properties": {
                  "code": {
                    "type": "string",
                    "description": "Multi-part error code for classification and root causing of errors (ex: 400.200.100.432).",
                    "readOnly": true
                  },
                  "message": {
                    "type": "string",
                    "description": "Human-readable helpful error message to provide additional context for error (ex: “Authentication method not supported”).",
                    "readOnly": true
                  },
                  "info": {
                    "type": "string",
                    "description": "Human-readable helpful detailed text context for debugging (ex: “The following mechanisms are supported...”).",
                    "readOnly": true
                  },
                  "correlationId": {
                    "type": "string",
                    "description": "Unique identifier for the transaction to aid in debugging.",
                    "readOnly": true
                  }
                }
              },
              "readOnly": true,
              "x-ms-identifiers": []
            }
          }
        }
      },
      "required": [
        "name"
      ]
    },
    "NamespaceAssetUpdate": {
      "type": "object",
      "description": "The type used for update operations of the NamespaceAsset.",
      "properties": {
        "tags": {
          "type": "object",
          "description": "Resource tags.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "properties": {
          "description": "The resource-specific properties for this resource.",
          "x-ms-client-flatten": true,
          "type": "object",
          "properties": {
            "enabled": {
              "type": "boolean",
              "description": "Enabled/disabled status of the asset."
            },
            "displayName": {
              "type": "string",
              "description": "Human-readable display name."
            },
            "description": {
              "type": "string",
              "description": "Human-readable description of the asset."
            },
            "assetTypeRefs": {
              "type": "array",
              "description": "URIs or type definition IDs.",
              "items": {
                "type": "string"
              }
            },
            "manufacturer": {
              "type": "string",
              "description": "Asset manufacturer."
            },
            "manufacturerUri": {
              "type": "string",
              "description": "Asset manufacturer URI."
            },
            "model": {
              "type": "string",
              "description": "Asset model."
            },
            "productCode": {
              "type": "string",
              "description": "Asset product code."
            },
            "hardwareRevision": {
              "type": "string",
              "description": "Asset hardware revision number."
            },
            "softwareRevision": {
              "type": "string",
              "description": "Asset software revision number."
            },
            "documentationUri": {
              "type": "string",
              "description": "Asset documentation reference."
            },
            "serialNumber": {
              "type": "string",
              "description": "Asset serial number."
            },
            "attributes": {
              "type": "object",
              "description": "A set of key-value pairs that contain custom attributes set by the customer.",
              "additionalProperties": {}
            },
            "defaultDatasetsConfiguration": {
              "type": "string",
              "description": "Stringified JSON that contains connector-specific default configuration for all datasets. Each dataset can have its own configuration that overrides the default settings here."
            },
            "defaultEventsConfiguration": {
              "type": "string",
              "description": "Stringified JSON that contains connector-specific default configuration for all events. Each event can have its own configuration that overrides the default settings here."
            },
            "defaultStreamsConfiguration": {
              "type": "string",
              "description": "Stringified JSON that contains connector-specific default configuration for all streams. Each stream can have its own configuration that overrides the default settings here."
            },
            "defaultManagementGroupsConfiguration": {
              "type": "string",
              "description": "Stringified JSON that contains connector-specific default configuration for all management groups. Each management group can have its own configuration that overrides the default settings here."
            },
            "defaultDatasetsDestinations": {
              "type": "array",
              "description": "Default destinations for a dataset.",
              "items": {
                "type": "object",
                "description": "The type of the destination.",
                "properties": {
                  "target": {
                    "description": "Target destination.",
                    "type": "string",
                    "enum": [
                      "Mqtt",
                      "BrokerStateStore",
                      "Storage"
                    ],
                    "x-ms-enum": {
                      "name": "DatasetDestinationTarget",
                      "modelAsString": true,
                      "values": [
                        {
                          "name": "Mqtt",
                          "value": "Mqtt",
                          "description": "MQTT target."
                        },
                        {
                          "name": "BrokerStateStore",
                          "value": "BrokerStateStore",
                          "description": "Broker State Store target."
                        },
                        {
                          "name": "Storage",
                          "value": "Storage",
                          "description": "Storage target."
                        }
                      ]
                    }
                  }
                },
                "discriminator": "target",
                "required": [
                  "target"
                ]
              },
              "x-ms-identifiers": []
            },
            "defaultEventsDestinations": {
              "type": "array",
              "description": "Default destinations for an event.",
              "items": {
                "type": "object",
                "description": "The type of the destination.",
                "properties": {
                  "target": {
                    "description": "Target destination.",
                    "type": "string",
                    "enum": [
                      "Mqtt",
                      "Storage"
                    ],
                    "x-ms-enum": {
                      "name": "EventDestinationTarget",
                      "modelAsString": true,
                      "values": [
                        {
                          "name": "Mqtt",
                          "value": "Mqtt",
                          "description": "MQTT target."
                        },
                        {
                          "name": "Storage",
                          "value": "Storage",
                          "description": "Storage target."
                        }
                      ]
                    }
                  }
                },
                "discriminator": "target",
                "required": [
                  "target"
                ]
              },
              "x-ms-identifiers": []
            },
            "defaultStreamsDestinations": {
              "type": "array",
              "description": "Default destinations for a stream.",
              "items": {
                "type": "object",
                "description": "The type of the destination.",
                "properties": {
                  "target": {
                    "description": "Target destination.",
                    "type": "string",
                    "enum": [
                      "Mqtt",
                      "Storage"
                    ],
                    "x-ms-enum": {
                      "name": "StreamDestinationTarget",
                      "modelAsString": true,
                      "values": [
                        {
                          "name": "Mqtt",
                          "value": "Mqtt",
                          "description": "MQTT target."
                        },
                        {
                          "name": "Storage",
                          "value": "Storage",
                          "description": "Storage target."
                        }
                      ]
                    }
                  }
                },
                "discriminator": "target",
                "required": [
                  "target"
                ]
              },
              "x-ms-identifiers": []
            },
            "datasets": {
              "type": "array",
              "description": "Array of datasets that are part of the asset. Each dataset describes the data points that make up the set.",
              "items": {
                "type": "object",
                "description": "Defines the dataset properties.",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of the dataset."
                  },
                  "dataSource": {
                    "type": "string",
                    "description": "Reference to a data source for a given dataset."
                  },
                  "typeRef": {
                    "type": "string",
                    "description": "URI or type definition ID."
                  },
                  "datasetConfiguration": {
                    "type": "string",
                    "description": "Stringified JSON that contains connector-specific JSON string that describes configuration for the specific dataset."
                  },
                  "destinations": {
                    "type": "array",
                    "description": "Destinations for a dataset.",
                    "items": {
                      "type": "object",
                      "description": "The type of the destination.",
                      "properties": {
                        "target": {
                          "description": "Target destination.",
                          "type": "string",
                          "enum": [
                            "Mqtt",
                            "BrokerStateStore",
                            "Storage"
                          ],
                          "x-ms-enum": {
                            "name": "DatasetDestinationTarget",
                            "modelAsString": true,
                            "values": [
                              {
                                "name": "Mqtt",
                                "value": "Mqtt",
                                "description": "MQTT target."
                              },
                              {
                                "name": "BrokerStateStore",
                                "value": "BrokerStateStore",
                                "description": "Broker State Store target."
                              },
                              {
                                "name": "Storage",
                                "value": "Storage",
                                "description": "Storage target."
                              }
                            ]
                          }
                        }
                      },
                      "discriminator": "target",
                      "required": [
                        "target"
                      ]
                    },
                    "x-ms-identifiers": []
                  },
                  "dataPoints": {
                    "type": "array",
                    "description": "Array of data points that are part of the dataset. Each data point can have per-data point configuration.",
                    "items": {
                      "type": "object",
                      "description": "Defines the dataset data point properties.",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "The name of the data point."
                        },
                        "dataSource": {
                          "type": "string",
                          "description": "The address of the source of the data in the asset (e.g. URL) so that a client can access the data source on the asset."
                        },
                        "dataPointConfiguration": {
                          "type": "string",
                          "description": "Stringified JSON that contains connector-specific configuration for the data point. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize."
                        },
                        "typeRef": {
                          "type": "string",
                          "description": "URI or type definition ID."
                        }
                      },
                      "required": [
                        "name",
                        "dataSource"
                      ]
                    },
                    "x-ms-identifiers": []
                  }
                },
                "required": [
                  "name"
                ]
              },
              "x-ms-identifiers": []
            },
            "eventGroups": {
              "type": "array",
              "description": "Array of event groups that are part of the asset. Each event group can have per-event group configuration.",
              "items": {
                "type": "object",
                "description": "Defines the event group properties.",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the event group."
                  },
                  "dataSource": {
                    "type": "string",
                    "description": "The address of the notifier of the event group in the asset (e.g. URL) so that a client can access the event group on the asset."
                  },
                  "eventGroupConfiguration": {
                    "type": "string",
                    "description": "Stringified JSON that contains connector-specific configuration for the event group. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize."
                  },
                  "defaultDestinations": {
                    "type": "array",
                    "description": "Destinations for events. Default destinations when destinations is not defined at the event level.",
                    "items": {
                      "type": "object",
                      "description": "The type of the destination.",
                      "properties": {
                        "target": {
                          "description": "Target destination.",
                          "type": "string",
                          "enum": [
                            "Mqtt",
                            "Storage"
                          ],
                          "x-ms-enum": {
                            "name": "EventDestinationTarget",
                            "modelAsString": true,
                            "values": [
                              {
                                "name": "Mqtt",
                                "value": "Mqtt",
                                "description": "MQTT target."
                              },
                              {
                                "name": "Storage",
                                "value": "Storage",
                                "description": "Storage target."
                              }
                            ]
                          }
                        }
                      },
                      "discriminator": "target",
                      "required": [
                        "target"
                      ]
                    },
                    "x-ms-identifiers": []
                  },
                  "typeRef": {
                    "type": "string",
                    "description": "URI or type definition ID."
                  },
                  "events": {
                    "type": "array",
                    "description": "Array of events that are part of the event group.",
                    "items": {
                      "type": "object",
                      "description": "Defines the event properties.",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "The name of the event."
                        },
                        "dataSource": {
                          "type": "string",
                          "description": "Reference to a data source for a given event."
                        },
                        "eventConfiguration": {
                          "type": "string",
                          "description": "Stringified JSON that contains connector-specific configuration for the event. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize."
                        },
                        "destinations": {
                          "type": "array",
                          "description": "Destinations for an event.",
                          "items": {
                            "type": "object",
                            "description": "The type of the destination.",
                            "properties": {
                              "target": {
                                "description": "Target destination.",
                                "type": "string",
                                "enum": [
                                  "Mqtt",
                                  "Storage"
                                ],
                                "x-ms-enum": {
                                  "name": "EventDestinationTarget",
                                  "modelAsString": true,
                                  "values": [
                                    {
                                      "name": "Mqtt",
                                      "value": "Mqtt",
                                      "description": "MQTT target."
                                    },
                                    {
                                      "name": "Storage",
                                      "value": "Storage",
                                      "description": "Storage target."
                                    }
                                  ]
                                }
                              }
                            },
                            "discriminator": "target",
                            "required": [
                              "target"
                            ]
                          },
                          "x-ms-identifiers": []
                        },
                        "typeRef": {
                          "type": "string",
                          "description": "URI or type definition ID."
                        }
                      },
                      "required": [
                        "name"
                      ]
                    },
                    "x-ms-identifiers": []
                  }
                },
                "required": [
                  "name"
                ]
              },
              "x-ms-identifiers": []
            },
            "streams": {
              "type": "array",
              "description": "Array of streams that are part of the asset. Each stream can have a per-stream configuration.",
              "items": {
                "type": "object",
                "description": "Defines the stream properties.",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of the stream definition."
                  },
                  "streamConfiguration": {
                    "type": "string",
                    "description": "Stringified JSON that contains connector-specific configuration for the specific stream."
                  },
                  "typeRef": {
                    "type": "string",
                    "description": "URI or type definition ID."
                  },
                  "destinations": {
                    "type": "array",
                    "description": "Destinations for a stream.",
                    "items": {
                      "type": "object",
                      "description": "The type of the destination.",
                      "properties": {
                        "target": {
                          "description": "Target destination.",
                          "type": "string",
                          "enum": [
                            "Mqtt",
                            "Storage"
                          ],
                          "x-ms-enum": {
                            "name": "StreamDestinationTarget",
                            "modelAsString": true,
                            "values": [
                              {
                                "name": "Mqtt",
                                "value": "Mqtt",
                                "description": "MQTT target."
                              },
                              {
                                "name": "Storage",
                                "value": "Storage",
                                "description": "Storage target."
                              }
                            ]
                          }
                        }
                      },
                      "discriminator": "target",
                      "required": [
                        "target"
                      ]
                    },
                    "x-ms-identifiers": []
                  }
                },
                "required": [
                  "name"
                ]
              },
              "x-ms-identifiers": []
            },
            "managementGroups": {
              "type": "array",
              "description": "Array of management groups that are part of the asset. Each management group can have a per-group configuration.",
              "items": {
                "type": "object",
                "description": "Defines the management group properties.",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of the management group."
                  },
                  "dataSource": {
                    "type": "string",
                    "description": "Reference to a data source for a given management group."
                  },
                  "managementGroupConfiguration": {
                    "type": "string",
                    "description": "Stringified JSON that contains connector-specific configuration for the management group."
                  },
                  "typeRef": {
                    "type": "string",
                    "description": "URI or type definition ID."
                  },
                  "defaultTopic": {
                    "type": "string",
                    "description": "Default MQTT topic path on which a client will receive the request for all actions that are part of the management group."
                  },
                  "defaultTimeoutInSeconds": {
                    "type": "integer",
                    "format": "int32",
                    "description": "Default response timeout for all actions that are part of the management group.",
                    "default": 100
                  },
                  "actions": {
                    "type": "array",
                    "description": "Array of actions that are part of the management group. Each action can have an individual configuration.",
                    "items": {
                      "type": "object",
                      "description": "Defines the action properties.",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "Name of the action."
                        },
                        "actionConfiguration": {
                          "type": "string",
                          "description": "Stringified JSON that contains connector-specific configuration for the action."
                        },
                        "targetUri": {
                          "type": "string",
                          "description": "The target URI on which a client can invoke the specific action."
                        },
                        "typeRef": {
                          "type": "string",
                          "description": "URI or type definition ID."
                        },
                        "topic": {
                          "type": "string",
                          "description": "The MQTT topic path on which a client will receive the request for the action."
                        },
                        "actionType": {
                          "type": "string",
                          "description": "The type of the action.",
                          "default": "Call",
                          "enum": [
                            "Call",
                            "Read",
                            "Write"
                          ],
                          "x-ms-enum": {
                            "name": "ManagementActionType",
                            "modelAsString": true,
                            "values": [
                              {
                                "name": "Call",
                                "value": "Call",
                                "description": "Call action type."
                              },
                              {
                                "name": "Read",
                                "value": "Read",
                                "description": "Read action type."
                              },
                              {
                                "name": "Write",
                                "value": "Write",
                                "description": "Write action type."
                              }
                            ]
                          }
                        },
                        "timeoutInSeconds": {
                          "type": "integer",
                          "format": "int32",
                          "description": "Response timeout for the action."
                        }
                      },
                      "required": [
                        "name",
                        "targetUri"
                      ]
                    },
                    "x-ms-identifiers": []
                  }
                },
                "required": [
                  "name"
                ]
              },
              "x-ms-identifiers": []
            }
          }
        }
      }
    },
    "NamespaceAssetUpdateProperties": {
      "type": "object",
      "description": "The updatable properties of the NamespaceAsset.",
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "Enabled/disabled status of the asset."
        },
        "displayName": {
          "type": "string",
          "description": "Human-readable display name."
        },
        "description": {
          "type": "string",
          "description": "Human-readable description of the asset."
        },
        "assetTypeRefs": {
          "type": "array",
          "description": "URIs or type definition IDs.",
          "items": {
            "type": "string"
          }
        },
        "manufacturer": {
          "type": "string",
          "description": "Asset manufacturer."
        },
        "manufacturerUri": {
          "type": "string",
          "description": "Asset manufacturer URI."
        },
        "model": {
          "type": "string",
          "description": "Asset model."
        },
        "productCode": {
          "type": "string",
          "description": "Asset product code."
        },
        "hardwareRevision": {
          "type": "string",
          "description": "Asset hardware revision number."
        },
        "softwareRevision": {
          "type": "string",
          "description": "Asset software revision number."
        },
        "documentationUri": {
          "type": "string",
          "description": "Asset documentation reference."
        },
        "serialNumber": {
          "type": "string",
          "description": "Asset serial number."
        },
        "attributes": {
          "type": "object",
          "description": "A set of key-value pairs that contain custom attributes set by the customer.",
          "additionalProperties": {}
        },
        "defaultDatasetsConfiguration": {
          "type": "string",
          "description": "Stringified JSON that contains connector-specific default configuration for all datasets. Each dataset can have its own configuration that overrides the default settings here."
        },
        "defaultEventsConfiguration": {
          "type": "string",
          "description": "Stringified JSON that contains connector-specific default configuration for all events. Each event can have its own configuration that overrides the default settings here."
        },
        "defaultStreamsConfiguration": {
          "type": "string",
          "description": "Stringified JSON that contains connector-specific default configuration for all streams. Each stream can have its own configuration that overrides the default settings here."
        },
        "defaultManagementGroupsConfiguration": {
          "type": "string",
          "description": "Stringified JSON that contains connector-specific default configuration for all management groups. Each management group can have its own configuration that overrides the default settings here."
        },
        "defaultDatasetsDestinations": {
          "type": "array",
          "description": "Default destinations for a dataset.",
          "items": {
            "type": "object",
            "description": "The type of the destination.",
            "properties": {
              "target": {
                "description": "Target destination.",
                "type": "string",
                "enum": [
                  "Mqtt",
                  "BrokerStateStore",
                  "Storage"
                ],
                "x-ms-enum": {
                  "name": "DatasetDestinationTarget",
                  "modelAsString": true,
                  "values": [
                    {
                      "name": "Mqtt",
                      "value": "Mqtt",
                      "description": "MQTT target."
                    },
                    {
                      "name": "BrokerStateStore",
                      "value": "BrokerStateStore",
                      "description": "Broker State Store target."
                    },
                    {
                      "name": "Storage",
                      "value": "Storage",
                      "description": "Storage target."
                    }
                  ]
                }
              }
            },
            "discriminator": "target",
            "required": [
              "target"
            ]
          },
          "x-ms-identifiers": []
        },
        "defaultEventsDestinations": {
          "type": "array",
          "description": "Default destinations for an event.",
          "items": {
            "type": "object",
            "description": "The type of the destination.",
            "properties": {
              "target": {
                "description": "Target destination.",
                "type": "string",
                "enum": [
                  "Mqtt",
                  "Storage"
                ],
                "x-ms-enum": {
                  "name": "EventDestinationTarget",
                  "modelAsString": true,
                  "values": [
                    {
                      "name": "Mqtt",
                      "value": "Mqtt",
                      "description": "MQTT target."
                    },
                    {
                      "name": "Storage",
                      "value": "Storage",
                      "description": "Storage target."
                    }
                  ]
                }
              }
            },
            "discriminator": "target",
            "required": [
              "target"
            ]
          },
          "x-ms-identifiers": []
        },
        "defaultStreamsDestinations": {
          "type": "array",
          "description": "Default destinations for a stream.",
          "items": {
            "type": "object",
            "description": "The type of the destination.",
            "properties": {
              "target": {
                "description": "Target destination.",
                "type": "string",
                "enum": [
                  "Mqtt",
                  "Storage"
                ],
                "x-ms-enum": {
                  "name": "StreamDestinationTarget",
                  "modelAsString": true,
                  "values": [
                    {
                      "name": "Mqtt",
                      "value": "Mqtt",
                      "description": "MQTT target."
                    },
                    {
                      "name": "Storage",
                      "value": "Storage",
                      "description": "Storage target."
                    }
                  ]
                }
              }
            },
            "discriminator": "target",
            "required": [
              "target"
            ]
          },
          "x-ms-identifiers": []
        },
        "datasets": {
          "type": "array",
          "description": "Array of datasets that are part of the asset. Each dataset describes the data points that make up the set.",
          "items": {
            "type": "object",
            "description": "Defines the dataset properties.",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the dataset."
              },
              "dataSource": {
                "type": "string",
                "description": "Reference to a data source for a given dataset."
              },
              "typeRef": {
                "type": "string",
                "description": "URI or type definition ID."
              },
              "datasetConfiguration": {
                "type": "string",
                "description": "Stringified JSON that contains connector-specific JSON string that describes configuration for the specific dataset."
              },
              "destinations": {
                "type": "array",
                "description": "Destinations for a dataset.",
                "items": {
                  "type": "object",
                  "description": "The type of the destination.",
                  "properties": {
                    "target": {
                      "description": "Target destination.",
                      "type": "string",
                      "enum": [
                        "Mqtt",
                        "BrokerStateStore",
                        "Storage"
                      ],
                      "x-ms-enum": {
                        "name": "DatasetDestinationTarget",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Mqtt",
                            "value": "Mqtt",
                            "description": "MQTT target."
                          },
                          {
                            "name": "BrokerStateStore",
                            "value": "BrokerStateStore",
                            "description": "Broker State Store target."
                          },
                          {
                            "name": "Storage",
                            "value": "Storage",
                            "description": "Storage target."
                          }
                        ]
                      }
                    }
                  },
                  "discriminator": "target",
                  "required": [
                    "target"
                  ]
                },
                "x-ms-identifiers": []
              },
              "dataPoints": {
                "type": "array",
                "description": "Array of data points that are part of the dataset. Each data point can have per-data point configuration.",
                "items": {
                  "type": "object",
                  "description": "Defines the dataset data point properties.",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The name of the data point."
                    },
                    "dataSource": {
                      "type": "string",
                      "description": "The address of the source of the data in the asset (e.g. URL) so that a client can access the data source on the asset."
                    },
                    "dataPointConfiguration": {
                      "type": "string",
                      "description": "Stringified JSON that contains connector-specific configuration for the data point. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize."
                    },
                    "typeRef": {
                      "type": "string",
                      "description": "URI or type definition ID."
                    }
                  },
                  "required": [
                    "name",
                    "dataSource"
                  ]
                },
                "x-ms-identifiers": []
              }
            },
            "required": [
              "name"
            ]
          },
          "x-ms-identifiers": []
        },
        "eventGroups": {
          "type": "array",
          "description": "Array of event groups that are part of the asset. Each event group can have per-event group configuration.",
          "items": {
            "type": "object",
            "description": "Defines the event group properties.",
            "properties": {
              "name": {
                "type": "string",
                "description": "The name of the event group."
              },
              "dataSource": {
                "type": "string",
                "description": "The address of the notifier of the event group in the asset (e.g. URL) so that a client can access the event group on the asset."
              },
              "eventGroupConfiguration": {
                "type": "string",
                "description": "Stringified JSON that contains connector-specific configuration for the event group. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize."
              },
              "defaultDestinations": {
                "type": "array",
                "description": "Destinations for events. Default destinations when destinations is not defined at the event level.",
                "items": {
                  "type": "object",
                  "description": "The type of the destination.",
                  "properties": {
                    "target": {
                      "description": "Target destination.",
                      "type": "string",
                      "enum": [
                        "Mqtt",
                        "Storage"
                      ],
                      "x-ms-enum": {
                        "name": "EventDestinationTarget",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Mqtt",
                            "value": "Mqtt",
                            "description": "MQTT target."
                          },
                          {
                            "name": "Storage",
                            "value": "Storage",
                            "description": "Storage target."
                          }
                        ]
                      }
                    }
                  },
                  "discriminator": "target",
                  "required": [
                    "target"
                  ]
                },
                "x-ms-identifiers": []
              },
              "typeRef": {
                "type": "string",
                "description": "URI or type definition ID."
              },
              "events": {
                "type": "array",
                "description": "Array of events that are part of the event group.",
                "items": {
                  "type": "object",
                  "description": "Defines the event properties.",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The name of the event."
                    },
                    "dataSource": {
                      "type": "string",
                      "description": "Reference to a data source for a given event."
                    },
                    "eventConfiguration": {
                      "type": "string",
                      "description": "Stringified JSON that contains connector-specific configuration for the event. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize."
                    },
                    "destinations": {
                      "type": "array",
                      "description": "Destinations for an event.",
                      "items": {
                        "type": "object",
                        "description": "The type of the destination.",
                        "properties": {
                          "target": {
                            "description": "Target destination.",
                            "type": "string",
                            "enum": [
                              "Mqtt",
                              "Storage"
                            ],
                            "x-ms-enum": {
                              "name": "EventDestinationTarget",
                              "modelAsString": true,
                              "values": [
                                {
                                  "name": "Mqtt",
                                  "value": "Mqtt",
                                  "description": "MQTT target."
                                },
                                {
                                  "name": "Storage",
                                  "value": "Storage",
                                  "description": "Storage target."
                                }
                              ]
                            }
                          }
                        },
                        "discriminator": "target",
                        "required": [
                          "target"
                        ]
                      },
                      "x-ms-identifiers": []
                    },
                    "typeRef": {
                      "type": "string",
                      "description": "URI or type definition ID."
                    }
                  },
                  "required": [
                    "name"
                  ]
                },
                "x-ms-identifiers": []
              }
            },
            "required": [
              "name"
            ]
          },
          "x-ms-identifiers": []
        },
        "streams": {
          "type": "array",
          "description": "Array of streams that are part of the asset. Each stream can have a per-stream configuration.",
          "items": {
            "type": "object",
            "description": "Defines the stream properties.",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the stream definition."
              },
              "streamConfiguration": {
                "type": "string",
                "description": "Stringified JSON that contains connector-specific configuration for the specific stream."
              },
              "typeRef": {
                "type": "string",
                "description": "URI or type definition ID."
              },
              "destinations": {
                "type": "array",
                "description": "Destinations for a stream.",
                "items": {
                  "type": "object",
                  "description": "The type of the destination.",
                  "properties": {
                    "target": {
                      "description": "Target destination.",
                      "type": "string",
                      "enum": [
                        "Mqtt",
                        "Storage"
                      ],
                      "x-ms-enum": {
                        "name": "StreamDestinationTarget",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Mqtt",
                            "value": "Mqtt",
                            "description": "MQTT target."
                          },
                          {
                            "name": "Storage",
                            "value": "Storage",
                            "description": "Storage target."
                          }
                        ]
                      }
                    }
                  },
                  "discriminator": "target",
                  "required": [
                    "target"
                  ]
                },
                "x-ms-identifiers": []
              }
            },
            "required": [
              "name"
            ]
          },
          "x-ms-identifiers": []
        },
        "managementGroups": {
          "type": "array",
          "description": "Array of management groups that are part of the asset. Each management group can have a per-group configuration.",
          "items": {
            "type": "object",
            "description": "Defines the management group properties.",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the management group."
              },
              "dataSource": {
                "type": "string",
                "description": "Reference to a data source for a given management group."
              },
              "managementGroupConfiguration": {
                "type": "string",
                "description": "Stringified JSON that contains connector-specific configuration for the management group."
              },
              "typeRef": {
                "type": "string",
                "description": "URI or type definition ID."
              },
              "defaultTopic": {
                "type": "string",
                "description": "Default MQTT topic path on which a client will receive the request for all actions that are part of the management group."
              },
              "defaultTimeoutInSeconds": {
                "type": "integer",
                "format": "int32",
                "description": "Default response timeout for all actions that are part of the management group.",
                "default": 100
              },
              "actions": {
                "type": "array",
                "description": "Array of actions that are part of the management group. Each action can have an individual configuration.",
                "items": {
                  "type": "object",
                  "description": "Defines the action properties.",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Name of the action."
                    },
                    "actionConfiguration": {
                      "type": "string",
                      "description": "Stringified JSON that contains connector-specific configuration for the action."
                    },
                    "targetUri": {
                      "type": "string",
                      "description": "The target URI on which a client can invoke the specific action."
                    },
                    "typeRef": {
                      "type": "string",
                      "description": "URI or type definition ID."
                    },
                    "topic": {
                      "type": "string",
                      "description": "The MQTT topic path on which a client will receive the request for the action."
                    },
                    "actionType": {
                      "type": "string",
                      "description": "The type of the action.",
                      "default": "Call",
                      "enum": [
                        "Call",
                        "Read",
                        "Write"
                      ],
                      "x-ms-enum": {
                        "name": "ManagementActionType",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Call",
                            "value": "Call",
                            "description": "Call action type."
                          },
                          {
                            "name": "Read",
                            "value": "Read",
                            "description": "Read action type."
                          },
                          {
                            "name": "Write",
                            "value": "Write",
                            "description": "Write action type."
                          }
                        ]
                      }
                    },
                    "timeoutInSeconds": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Response timeout for the action."
                    }
                  },
                  "required": [
                    "name",
                    "targetUri"
                  ]
                },
                "x-ms-identifiers": []
              }
            },
            "required": [
              "name"
            ]
          },
          "x-ms-identifiers": []
        }
      }
    },
    "NamespaceDataset": {
      "type": "object",
      "description": "Defines the dataset properties.",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the dataset."
        },
        "dataSource": {
          "type": "string",
          "description": "Reference to a data source for a given dataset."
        },
        "typeRef": {
          "type": "string",
          "description": "URI or type definition ID."
        },
        "datasetConfiguration": {
          "type": "string",
          "description": "Stringified JSON that contains connector-specific JSON string that describes configuration for the specific dataset."
        },
        "destinations": {
          "type": "array",
          "description": "Destinations for a dataset.",
          "items": {
            "type": "object",
            "description": "The type of the destination.",
            "properties": {
              "target": {
                "description": "Target destination.",
                "type": "string",
                "enum": [
                  "Mqtt",
                  "BrokerStateStore",
                  "Storage"
                ],
                "x-ms-enum": {
                  "name": "DatasetDestinationTarget",
                  "modelAsString": true,
                  "values": [
                    {
                      "name": "Mqtt",
                      "value": "Mqtt",
                      "description": "MQTT target."
                    },
                    {
                      "name": "BrokerStateStore",
                      "value": "BrokerStateStore",
                      "description": "Broker State Store target."
                    },
                    {
                      "name": "Storage",
                      "value": "Storage",
                      "description": "Storage target."
                    }
                  ]
                }
              }
            },
            "discriminator": "target",
            "required": [
              "target"
            ]
          },
          "x-ms-identifiers": []
        },
        "dataPoints": {
          "type": "array",
          "description": "Array of data points that are part of the dataset. Each data point can have per-data point configuration.",
          "items": {
            "type": "object",
            "description": "Defines the dataset data point properties.",
            "properties": {
              "name": {
                "type": "string",
                "description": "The name of the data point."
              },
              "dataSource": {
                "type": "string",
                "description": "The address of the source of the data in the asset (e.g. URL) so that a client can access the data source on the asset."
              },
              "dataPointConfiguration": {
                "type": "string",
                "description": "Stringified JSON that contains connector-specific configuration for the data point. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize."
              },
              "typeRef": {
                "type": "string",
                "description": "URI or type definition ID."
              }
            },
            "required": [
              "name",
              "dataSource"
            ]
          },
          "x-ms-identifiers": []
        }
      },
      "required": [
        "name"
      ]
    },
    "NamespaceDatasetDataPoint": {
      "type": "object",
      "description": "Defines the dataset data point properties.",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the data point."
        },
        "dataSource": {
          "type": "string",
          "description": "The address of the source of the data in the asset (e.g. URL) so that a client can access the data source on the asset."
        },
        "dataPointConfiguration": {
          "type": "string",
          "description": "Stringified JSON that contains connector-specific configuration for the data point. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize."
        },
        "typeRef": {
          "type": "string",
          "description": "URI or type definition ID."
        }
      },
      "required": [
        "name",
        "dataSource"
      ]
    },
    "NamespaceDevice": {
      "type": "object",
      "description": "Device definition.",
      "properties": {
        "id": {
          "type": "string",
          "format": "arm-id",
          "description": "Fully qualified resource ID for the resource. E.g. \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}\"",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "The name of the resource",
          "readOnly": true
        },
        "type": {
          "type": "string",
          "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
          "readOnly": true
        },
        "systemData": {
          "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
          "readOnly": true,
          "type": "object",
          "properties": {
            "createdBy": {
              "type": "string",
              "description": "The identity that created the resource."
            },
            "createdByType": {
              "type": "string",
              "description": "The type of identity that created the resource.",
              "enum": [
                "User",
                "Application",
                "ManagedIdentity",
                "Key"
              ],
              "x-ms-enum": {
                "name": "createdByType",
                "modelAsString": true
              }
            },
            "createdAt": {
              "type": "string",
              "format": "date-time",
              "description": "The timestamp of resource creation (UTC)."
            },
            "lastModifiedBy": {
              "type": "string",
              "description": "The identity that last modified the resource."
            },
            "lastModifiedByType": {
              "type": "string",
              "description": "The type of identity that last modified the resource.",
              "enum": [
                "User",
                "Application",
                "ManagedIdentity",
                "Key"
              ],
              "x-ms-enum": {
                "name": "createdByType",
                "modelAsString": true
              }
            },
            "lastModifiedAt": {
              "type": "string",
              "format": "date-time",
              "description": "The timestamp of resource last modification (UTC)"
            }
          }
        },
        "tags": {
          "type": "object",
          "description": "Resource tags.",
          "additionalProperties": {
            "type": "string"
          },
          "x-ms-mutability": [
            "read",
            "create",
            "update"
          ]
        },
        "location": {
          "type": "string",
          "description": "The geo-location where the resource lives",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "properties": {
          "description": "The resource-specific properties for this resource.",
          "x-ms-client-flatten": true,
          "type": "object",
          "properties": {
            "uuid": {
              "type": "string",
              "description": "A unique identifier for the device.",
              "readOnly": true
            },
            "enabled": {
              "type": "boolean",
              "description": "Indicates if the resource is enabled or not.",
              "default": true
            },
            "externalDeviceId": {
              "type": "string",
              "description": "The Device ID provided by the customer.",
              "x-ms-mutability": [
                "read",
                "create"
              ]
            },
            "discoveredDeviceRef": {
              "type": "string",
              "description": "Reference to a device. Populated only if the device had been created from discovery flow. Discovered device name must be provided.",
              "x-ms-mutability": [
                "read",
                "create"
              ]
            },
            "manufacturer": {
              "type": "string",
              "description": "Device manufacturer.",
              "x-ms-mutability": [
                "read",
                "create"
              ]
            },
            "model": {
              "type": "string",
              "description": "Device model.",
              "x-ms-mutability": [
                "read",
                "create"
              ]
            },
            "operatingSystem": {
              "type": "string",
              "description": "Device operating system.",
              "x-ms-mutability": [
                "read",
                "create"
              ]
            },
            "operatingSystemVersion": {
              "type": "string",
              "description": "Device operating system version."
            },
            "endpoints": {
              "description": "Property bag containing the device's unassigned and assigned endpoints.",
              "type": "object",
              "properties": {
                "inbound": {
                  "type": "object",
                  "description": "Set of endpoints to connect to the device.",
                  "additionalProperties": {
                    "type": "object",
                    "description": "An endpoint to connect to the device.",
                    "properties": {
                      "endpointType": {
                        "type": "string",
                        "description": "Type of connection endpoint."
                      },
                      "address": {
                        "type": "string",
                        "description": "The endpoint address & port. This can be either an IP address (e.g., 192.168.1.1) or a fully qualified domain name (FQDN, e.g., server.example.com)."
                      },
                      "version": {
                        "type": "string",
                        "description": "Protocol version associated with the endpoint e.g. 1 or 2 for endpointType Microsoft.HTTP, and 3.5 or 5.0 for endpointType Microsoft.Mqtt etc."
                      },
                      "authentication": {
                        "description": "Defines the client authentication mechanism to the server.",
                        "type": "object",
                        "properties": {
                          "method": {
                            "type": "string",
                            "description": "Defines the method to authenticate the user of the client at the server.",
                            "default": "Certificate",
                            "enum": [
                              "Anonymous",
                              "Certificate",
                              "UsernamePassword"
                            ],
                            "x-ms-enum": {
                              "name": "AuthenticationMethod",
                              "modelAsString": true,
                              "values": [
                                {
                                  "name": "Anonymous",
                                  "value": "Anonymous",
                                  "description": "The user authentication method is anonymous."
                                },
                                {
                                  "name": "Certificate",
                                  "value": "Certificate",
                                  "description": "The user authentication method is an x509 certificate."
                                },
                                {
                                  "name": "UsernamePassword",
                                  "value": "UsernamePassword",
                                  "description": "The user authentication method is a username and password."
                                }
                              ]
                            }
                          },
                          "usernamePasswordCredentials": {
                            "description": "Defines the username and password references when UsernamePassword user authentication mode is selected.",
                            "type": "object",
                            "properties": {
                              "usernameSecretName": {
                                "type": "string",
                                "description": "The name of the secret containing the username."
                              },
                              "passwordSecretName": {
                                "type": "string",
                                "description": "The name of the secret containing the password."
                              }
                            },
                            "required": [
                              "usernameSecretName",
                              "passwordSecretName"
                            ]
                          },
                          "x509Credentials": {
                            "description": "Defines the certificate reference when Certificate user authentication mode is selected.",
                            "type": "object",
                            "properties": {
                              "certificateSecretName": {
                                "type": "string",
                                "description": "The name of the secret containing the certificate and private key (e.g. stored as .der/.pem or .der/.pfx)."
                              },
                              "keySecretName": {
                                "type": "string",
                                "description": "The name of the secret containing the certificate private key in PEM or DER format."
                              },
                              "intermediateCertificatesSecretName": {
                                "type": "string",
                                "description": "The name of the secret containing the combined intermediate certificates in PEM format."
                              }
                            },
                            "required": [
                              "certificateSecretName"
                            ]
                          }
                        },
                        "required": [
                          "method"
                        ]
                      },
                      "trustSettings": {
                        "description": "Defines server trust settings for the endpoint.",
                        "type": "object",
                        "properties": {
                          "trustList": {
                            "type": "string",
                            "description": "Defines a secret reference for certificates to trust."
                          }
                        }
                      },
                      "additionalConfiguration": {
                        "type": "string",
                        "description": "Stringified JSON that contains configuration to be used by the connector (e.g., OPC UA, ONVIF)."
                      }
                    },
                    "required": [
                      "endpointType",
                      "address"
                    ]
                  }
                },
                "outbound": {
                  "description": "Set of endpoints a device can connect to.",
                  "type": "object",
                  "properties": {
                    "assigned": {
                      "type": "object",
                      "description": "Endpoints the device can connect to.",
                      "additionalProperties": {
                        "type": "object",
                        "description": "Device messaging endpoint model.",
                        "properties": {
                          "endpointType": {
                            "type": "string",
                            "description": "Type of connection used for the messaging endpoint."
                          },
                          "address": {
                            "type": "string",
                            "description": "The endpoint address to connect to."
                          }
                        },
                        "required": [
                          "address"
                        ]
                      }
                    },
                    "unassigned": {
                      "type": "object",
                      "description": "Set of most recently removed endpoints.",
                      "additionalProperties": {
                        "type": "object",
                        "description": "Device messaging endpoint model.",
                        "properties": {
                          "endpointType": {
                            "type": "string",
                            "description": "Type of connection used for the messaging endpoint."
                          },
                          "address": {
                            "type": "string",
                            "description": "The endpoint address to connect to."
                          }
                        },
                        "required": [
                          "address"
                        ]
                      }
                    }
                  },
                  "required": [
                    "assigned"
                  ]
                }
              }
            },
            "attributes": {
              "type": "object",
              "description": "A set of key-value pairs that contain custom attributes set by the customer.",
              "additionalProperties": {}
            },
            "status": {
              "description": "Device status updates.",
              "readOnly": true,
              "type": "object",
              "properties": {
                "config": {
                  "description": "Defines the device status config properties.",
                  "readOnly": true,
                  "type": "object",
                  "properties": {
                    "version": {
                      "type": "integer",
                      "format": "int64",
                      "description": "A read-only incremental counter indicating the number of times the configuration has been modified from the perspective of the current actual (edge) state of the CRD. Edge would be the only writer of this value and would sync back up to the cloud. In steady state, this should equal version.",
                      "readOnly": true
                    },
                    "lastTransitionTime": {
                      "type": "string",
                      "format": "date-time",
                      "description": "A read-only timestamp indicating the last time the configuration has been modified from the perspective of the current actual (edge) state of the CRD. Edge would be the only writer of this value and would sync back up to the cloud.",
                      "readOnly": true
                    },
                    "error": {
                      "description": "Object to transfer and persist errors that originate from the edge.",
                      "readOnly": true,
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Error code for classification of errors (ex: '400', '404', '500', etc.).",
                          "readOnly": true
                        },
                        "message": {
                          "type": "string",
                          "description": "Human-readable helpful error message to provide additional context for error (e.g.,: “Capability ID 'foo' does not exist”).",
                          "readOnly": true
                        },
                        "details": {
                          "type": "array",
                          "description": "Array of error details that describe the status of each error.",
                          "items": {
                            "type": "object",
                            "description": "Defines the error details properties.",
                            "properties": {
                              "code": {
                                "type": "string",
                                "description": "Multi-part error code for classification and root causing of errors (ex: 400.200.100.432).",
                                "readOnly": true
                              },
                              "message": {
                                "type": "string",
                                "description": "Human-readable helpful error message to provide additional context for error (ex: “Authentication method not supported”).",
                                "readOnly": true
                              },
                              "info": {
                                "type": "string",
                                "description": "Human-readable helpful detailed text context for debugging (ex: “The following mechanisms are supported...”).",
                                "readOnly": true
                              },
                              "correlationId": {
                                "type": "string",
                                "description": "Unique identifier for the transaction to aid in debugging.",
                                "readOnly": true
                              }
                            }
                          },
                          "readOnly": true,
                          "x-ms-identifiers": []
                        }
                      }
                    }
                  }
                },
                "endpoints": {
                  "description": "Defines the device status for inbound/outbound endpoints.",
                  "readOnly": true,
                  "type": "object",
                  "properties": {
                    "inbound": {
                      "type": "object",
                      "description": "KeyValue pair representing status of inbound endpoints.",
                      "additionalProperties": {
                        "type": "object",
                        "description": "Defines the device status properties.",
                        "properties": {
                          "error": {
                            "description": "Defines the error related to this endpoint.",
                            "readOnly": true,
                            "type": "object",
                            "properties": {
                              "code": {
                                "type": "string",
                                "description": "Error code for classification of errors (ex: '400', '404', '500', etc.).",
                                "readOnly": true
                              },
                              "message": {
                                "type": "string",
                                "description": "Human-readable helpful error message to provide additional context for error (e.g.,: “Capability ID 'foo' does not exist”).",
                                "readOnly": true
                              },
                              "details": {
                                "type": "array",
                                "description": "Array of error details that describe the status of each error.",
                                "items": {
                                  "type": "object",
                                  "description": "Defines the error details properties.",
                                  "properties": {
                                    "code": {
                                      "type": "string",
                                      "description": "Multi-part error code for classification and root causing of errors (ex: 400.200.100.432).",
                                      "readOnly": true
                                    },
                                    "message": {
                                      "type": "string",
                                      "description": "Human-readable helpful error message to provide additional context for error (ex: “Authentication method not supported”).",
                                      "readOnly": true
                                    },
                                    "info": {
                                      "type": "string",
                                      "description": "Human-readable helpful detailed text context for debugging (ex: “The following mechanisms are supported...”).",
                                      "readOnly": true
                                    },
                                    "correlationId": {
                                      "type": "string",
                                      "description": "Unique identifier for the transaction to aid in debugging.",
                                      "readOnly": true
                                    }
                                  }
                                },
                                "readOnly": true,
                                "x-ms-identifiers": []
                              }
                            }
                          }
                        }
                      },
                      "readOnly": true
                    }
                  }
                }
              }
            },
            "version": {
              "type": "integer",
              "format": "int64",
              "description": "An integer that is incremented each time the resource is modified.",
              "readOnly": true
            },
            "lastTransitionTime": {
              "type": "string",
              "format": "date-time",
              "description": "A timestamp (in UTC) that is updated each time the resource is modified.",
              "readOnly": true
            },
            "provisioningState": {
              "description": "Provisioning state of the resource.",
              "readOnly": true,
              "type": "string",
              "enum": [
                "Succeeded",
                "Failed",
                "Canceled",
                "Accepted",
                "Deleting"
              ],
              "x-ms-enum": {
                "name": "ProvisioningState",
                "modelAsString": true,
                "values": [
                  {
                    "name": "Succeeded",
                    "value": "Succeeded",
                    "description": "Resource has been created."
                  },
                  {
                    "name": "Failed",
                    "value": "Failed",
                    "description": "Resource creation failed."
                  },
                  {
                    "name": "Canceled",
                    "value": "Canceled",
                    "description": "Resource creation was canceled."
                  },
                  {
                    "name": "Accepted",
                    "value": "Accepted",
                    "description": "Resource has been accepted by the server."
                  },
                  {
                    "name": "Deleting",
                    "value": "Deleting",
                    "description": "Resource is deleting."
                  }
                ]
              }
            }
          }
        },
        "etag": {
          "type": "string",
          "description": "Resource Tag.",
          "readOnly": true
        },
        "extendedLocation": {
          "description": "The extended location.",
          "x-ms-mutability": [
            "read",
            "create"
          ],
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "description": "The extended location type."
            },
            "name": {
              "type": "string",
              "description": "The extended location name."
            }
          },
          "required": [
            "type",
            "name"
          ]
        }
      }
    },
    "NamespaceDeviceListResult": {
      "type": "object",
      "description": "The response of a NamespaceDevice list operation.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The NamespaceDevice items on this page",
          "items": {
            "type": "object",
            "description": "Device definition.",
            "properties": {
              "id": {
                "type": "string",
                "format": "arm-id",
                "description": "Fully qualified resource ID for the resource. E.g. \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}\"",
                "readOnly": true
              },
              "name": {
                "type": "string",
                "description": "The name of the resource",
                "readOnly": true
              },
              "type": {
                "type": "string",
                "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                "readOnly": true
              },
              "systemData": {
                "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                "readOnly": true,
                "type": "object",
                "properties": {
                  "createdBy": {
                    "type": "string",
                    "description": "The identity that created the resource."
                  },
                  "createdByType": {
                    "type": "string",
                    "description": "The type of identity that created the resource.",
                    "enum": [
                      "User",
                      "Application",
                      "ManagedIdentity",
                      "Key"
                    ],
                    "x-ms-enum": {
                      "name": "createdByType",
                      "modelAsString": true
                    }
                  },
                  "createdAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp of resource creation (UTC)."
                  },
                  "lastModifiedBy": {
                    "type": "string",
                    "description": "The identity that last modified the resource."
                  },
                  "lastModifiedByType": {
                    "type": "string",
                    "description": "The type of identity that last modified the resource.",
                    "enum": [
                      "User",
                      "Application",
                      "ManagedIdentity",
                      "Key"
                    ],
                    "x-ms-enum": {
                      "name": "createdByType",
                      "modelAsString": true
                    }
                  },
                  "lastModifiedAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp of resource last modification (UTC)"
                  }
                }
              },
              "tags": {
                "type": "object",
                "description": "Resource tags.",
                "additionalProperties": {
                  "type": "string"
                },
                "x-ms-mutability": [
                  "read",
                  "create",
                  "update"
                ]
              },
              "location": {
                "type": "string",
                "description": "The geo-location where the resource lives",
                "x-ms-mutability": [
                  "read",
                  "create"
                ]
              },
              "properties": {
                "description": "The resource-specific properties for this resource.",
                "x-ms-client-flatten": true,
                "type": "object",
                "properties": {
                  "uuid": {
                    "type": "string",
                    "description": "A unique identifier for the device.",
                    "readOnly": true
                  },
                  "enabled": {
                    "type": "boolean",
                    "description": "Indicates if the resource is enabled or not.",
                    "default": true
                  },
                  "externalDeviceId": {
                    "type": "string",
                    "description": "The Device ID provided by the customer.",
                    "x-ms-mutability": [
                      "read",
                      "create"
                    ]
                  },
                  "discoveredDeviceRef": {
                    "type": "string",
                    "description": "Reference to a device. Populated only if the device had been created from discovery flow. Discovered device name must be provided.",
                    "x-ms-mutability": [
                      "read",
                      "create"
                    ]
                  },
                  "manufacturer": {
                    "type": "string",
                    "description": "Device manufacturer.",
                    "x-ms-mutability": [
                      "read",
                      "create"
                    ]
                  },
                  "model": {
                    "type": "string",
                    "description": "Device model.",
                    "x-ms-mutability": [
                      "read",
                      "create"
                    ]
                  },
                  "operatingSystem": {
                    "type": "string",
                    "description": "Device operating system.",
                    "x-ms-mutability": [
                      "read",
                      "create"
                    ]
                  },
                  "operatingSystemVersion": {
                    "type": "string",
                    "description": "Device operating system version."
                  },
                  "endpoints": {
                    "description": "Property bag containing the device's unassigned and assigned endpoints.",
                    "type": "object",
                    "properties": {
                      "inbound": {
                        "type": "object",
                        "description": "Set of endpoints to connect to the device.",
                        "additionalProperties": {
                          "type": "object",
                          "description": "An endpoint to connect to the device.",
                          "properties": {
                            "endpointType": {
                              "type": "string",
                              "description": "Type of connection endpoint."
                            },
                            "address": {
                              "type": "string",
                              "description": "The endpoint address & port. This can be either an IP address (e.g., 192.168.1.1) or a fully qualified domain name (FQDN, e.g., server.example.com)."
                            },
                            "version": {
                              "type": "string",
                              "description": "Protocol version associated with the endpoint e.g. 1 or 2 for endpointType Microsoft.HTTP, and 3.5 or 5.0 for endpointType Microsoft.Mqtt etc."
                            },
                            "authentication": {
                              "description": "Defines the client authentication mechanism to the server.",
                              "type": "object",
                              "properties": {
                                "method": {
                                  "type": "string",
                                  "description": "Defines the method to authenticate the user of the client at the server.",
                                  "default": "Certificate",
                                  "enum": [
                                    "Anonymous",
                                    "Certificate",
                                    "UsernamePassword"
                                  ],
                                  "x-ms-enum": {
                                    "name": "AuthenticationMethod",
                                    "modelAsString": true,
                                    "values": [
                                      {
                                        "name": "Anonymous",
                                        "value": "Anonymous",
                                        "description": "The user authentication method is anonymous."
                                      },
                                      {
                                        "name": "Certificate",
                                        "value": "Certificate",
                                        "description": "The user authentication method is an x509 certificate."
                                      },
                                      {
                                        "name": "UsernamePassword",
                                        "value": "UsernamePassword",
                                        "description": "The user authentication method is a username and password."
                                      }
                                    ]
                                  }
                                },
                                "usernamePasswordCredentials": {
                                  "description": "Defines the username and password references when UsernamePassword user authentication mode is selected.",
                                  "type": "object",
                                  "properties": {
                                    "usernameSecretName": {
                                      "type": "string",
                                      "description": "The name of the secret containing the username."
                                    },
                                    "passwordSecretName": {
                                      "type": "string",
                                      "description": "The name of the secret containing the password."
                                    }
                                  },
                                  "required": [
                                    "usernameSecretName",
                                    "passwordSecretName"
                                  ]
                                },
                                "x509Credentials": {
                                  "description": "Defines the certificate reference when Certificate user authentication mode is selected.",
                                  "type": "object",
                                  "properties": {
                                    "certificateSecretName": {
                                      "type": "string",
                                      "description": "The name of the secret containing the certificate and private key (e.g. stored as .der/.pem or .der/.pfx)."
                                    },
                                    "keySecretName": {
                                      "type": "string",
                                      "description": "The name of the secret containing the certificate private key in PEM or DER format."
                                    },
                                    "intermediateCertificatesSecretName": {
                                      "type": "string",
                                      "description": "The name of the secret containing the combined intermediate certificates in PEM format."
                                    }
                                  },
                                  "required": [
                                    "certificateSecretName"
                                  ]
                                }
                              },
                              "required": [
                                "method"
                              ]
                            },
                            "trustSettings": {
                              "description": "Defines server trust settings for the endpoint.",
                              "type": "object",
                              "properties": {
                                "trustList": {
                                  "type": "string",
                                  "description": "Defines a secret reference for certificates to trust."
                                }
                              }
                            },
                            "additionalConfiguration": {
                              "type": "string",
                              "description": "Stringified JSON that contains configuration to be used by the connector (e.g., OPC UA, ONVIF)."
                            }
                          },
                          "required": [
                            "endpointType",
                            "address"
                          ]
                        }
                      },
                      "outbound": {
                        "description": "Set of endpoints a device can connect to.",
                        "type": "object",
                        "properties": {
                          "assigned": {
                            "type": "object",
                            "description": "Endpoints the device can connect to.",
                            "additionalProperties": {
                              "type": "object",
                              "description": "Device messaging endpoint model.",
                              "properties": {
                                "endpointType": {
                                  "type": "string",
                                  "description": "Type of connection used for the messaging endpoint."
                                },
                                "address": {
                                  "type": "string",
                                  "description": "The endpoint address to connect to."
                                }
                              },
                              "required": [
                                "address"
                              ]
                            }
                          },
                          "unassigned": {
                            "type": "object",
                            "description": "Set of most recently removed endpoints.",
                            "additionalProperties": {
                              "type": "object",
                              "description": "Device messaging endpoint model.",
                              "properties": {
                                "endpointType": {
                                  "type": "string",
                                  "description": "Type of connection used for the messaging endpoint."
                                },
                                "address": {
                                  "type": "string",
                                  "description": "The endpoint address to connect to."
                                }
                              },
                              "required": [
                                "address"
                              ]
                            }
                          }
                        },
                        "required": [
                          "assigned"
                        ]
                      }
                    }
                  },
                  "attributes": {
                    "type": "object",
                    "description": "A set of key-value pairs that contain custom attributes set by the customer.",
                    "additionalProperties": {}
                  },
                  "status": {
                    "description": "Device status updates.",
                    "readOnly": true,
                    "type": "object",
                    "properties": {
                      "config": {
                        "description": "Defines the device status config properties.",
                        "readOnly": true,
                        "type": "object",
                        "properties": {
                          "version": {
                            "type": "integer",
                            "format": "int64",
                            "description": "A read-only incremental counter indicating the number of times the configuration has been modified from the perspective of the current actual (edge) state of the CRD. Edge would be the only writer of this value and would sync back up to the cloud. In steady state, this should equal version.",
                            "readOnly": true
                          },
                          "lastTransitionTime": {
                            "type": "string",
                            "format": "date-time",
                            "description": "A read-only timestamp indicating the last time the configuration has been modified from the perspective of the current actual (edge) state of the CRD. Edge would be the only writer of this value and would sync back up to the cloud.",
                            "readOnly": true
                          },
                          "error": {
                            "description": "Object to transfer and persist errors that originate from the edge.",
                            "readOnly": true,
                            "type": "object",
                            "properties": {
                              "code": {
                                "type": "string",
                                "description": "Error code for classification of errors (ex: '400', '404', '500', etc.).",
                                "readOnly": true
                              },
                              "message": {
                                "type": "string",
                                "description": "Human-readable helpful error message to provide additional context for error (e.g.,: “Capability ID 'foo' does not exist”).",
                                "readOnly": true
                              },
                              "details": {
                                "type": "array",
                                "description": "Array of error details that describe the status of each error.",
                                "items": {
                                  "type": "object",
                                  "description": "Defines the error details properties.",
                                  "properties": {
                                    "code": {
                                      "type": "string",
                                      "description": "Multi-part error code for classification and root causing of errors (ex: 400.200.100.432).",
                                      "readOnly": true
                                    },
                                    "message": {
                                      "type": "string",
                                      "description": "Human-readable helpful error message to provide additional context for error (ex: “Authentication method not supported”).",
                                      "readOnly": true
                                    },
                                    "info": {
                                      "type": "string",
                                      "description": "Human-readable helpful detailed text context for debugging (ex: “The following mechanisms are supported...”).",
                                      "readOnly": true
                                    },
                                    "correlationId": {
                                      "type": "string",
                                      "description": "Unique identifier for the transaction to aid in debugging.",
                                      "readOnly": true
                                    }
                                  }
                                },
                                "readOnly": true,
                                "x-ms-identifiers": []
                              }
                            }
                          }
                        }
                      },
                      "endpoints": {
                        "description": "Defines the device status for inbound/outbound endpoints.",
                        "readOnly": true,
                        "type": "object",
                        "properties": {
                          "inbound": {
                            "type": "object",
                            "description": "KeyValue pair representing status of inbound endpoints.",
                            "additionalProperties": {
                              "type": "object",
                              "description": "Defines the device status properties.",
                              "properties": {
                                "error": {
                                  "description": "Defines the error related to this endpoint.",
                                  "readOnly": true,
                                  "type": "object",
                                  "properties": {
                                    "code": {
                                      "type": "string",
                                      "description": "Error code for classification of errors (ex: '400', '404', '500', etc.).",
                                      "readOnly": true
                                    },
                                    "message": {
                                      "type": "string",
                                      "description": "Human-readable helpful error message to provide additional context for error (e.g.,: “Capability ID 'foo' does not exist”).",
                                      "readOnly": true
                                    },
                                    "details": {
                                      "type": "array",
                                      "description": "Array of error details that describe the status of each error.",
                                      "items": {
                                        "type": "object",
                                        "description": "Defines the error details properties.",
                                        "properties": {
                                          "code": {
                                            "type": "string",
                                            "description": "Multi-part error code for classification and root causing of errors (ex: 400.200.100.432).",
                                            "readOnly": true
                                          },
                                          "message": {
                                            "type": "string",
                                            "description": "Human-readable helpful error message to provide additional context for error (ex: “Authentication method not supported”).",
                                            "readOnly": true
                                          },
                                          "info": {
                                            "type": "string",
                                            "description": "Human-readable helpful detailed text context for debugging (ex: “The following mechanisms are supported...”).",
                                            "readOnly": true
                                          },
                                          "correlationId": {
                                            "type": "string",
                                            "description": "Unique identifier for the transaction to aid in debugging.",
                                            "readOnly": true
                                          }
                                        }
                                      },
                                      "readOnly": true,
                                      "x-ms-identifiers": []
                                    }
                                  }
                                }
                              }
                            },
                            "readOnly": true
                          }
                        }
                      }
                    }
                  },
                  "version": {
                    "type": "integer",
                    "format": "int64",
                    "description": "An integer that is incremented each time the resource is modified.",
                    "readOnly": true
                  },
                  "lastTransitionTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "A timestamp (in UTC) that is updated each time the resource is modified.",
                    "readOnly": true
                  },
                  "provisioningState": {
                    "description": "Provisioning state of the resource.",
                    "readOnly": true,
                    "type": "string",
                    "enum": [
                      "Succeeded",
                      "Failed",
                      "Canceled",
                      "Accepted",
                      "Deleting"
                    ],
                    "x-ms-enum": {
                      "name": "ProvisioningState",
                      "modelAsString": true,
                      "values": [
                        {
                          "name": "Succeeded",
                          "value": "Succeeded",
                          "description": "Resource has been created."
                        },
                        {
                          "name": "Failed",
                          "value": "Failed",
                          "description": "Resource creation failed."
                        },
                        {
                          "name": "Canceled",
                          "value": "Canceled",
                          "description": "Resource creation was canceled."
                        },
                        {
                          "name": "Accepted",
                          "value": "Accepted",
                          "description": "Resource has been accepted by the server."
                        },
                        {
                          "name": "Deleting",
                          "value": "Deleting",
                          "description": "Resource is deleting."
                        }
                      ]
                    }
                  }
                }
              },
              "etag": {
                "type": "string",
                "description": "Resource Tag.",
                "readOnly": true
              },
              "extendedLocation": {
                "description": "The extended location.",
                "x-ms-mutability": [
                  "read",
                  "create"
                ],
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "description": "The extended location type."
                  },
                  "name": {
                    "type": "string",
                    "description": "The extended location name."
                  }
                },
                "required": [
                  "type",
                  "name"
                ]
              }
            }
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "NamespaceDeviceProperties": {
      "type": "object",
      "description": "Defines the device properties.",
      "properties": {
        "uuid": {
          "type": "string",
          "description": "A unique identifier for the device.",
          "readOnly": true
        },
        "enabled": {
          "type": "boolean",
          "description": "Indicates if the resource is enabled or not.",
          "default": true
        },
        "externalDeviceId": {
          "type": "string",
          "description": "The Device ID provided by the customer.",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "discoveredDeviceRef": {
          "type": "string",
          "description": "Reference to a device. Populated only if the device had been created from discovery flow. Discovered device name must be provided.",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "manufacturer": {
          "type": "string",
          "description": "Device manufacturer.",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "model": {
          "type": "string",
          "description": "Device model.",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "operatingSystem": {
          "type": "string",
          "description": "Device operating system.",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "operatingSystemVersion": {
          "type": "string",
          "description": "Device operating system version."
        },
        "endpoints": {
          "description": "Property bag containing the device's unassigned and assigned endpoints.",
          "type": "object",
          "properties": {
            "inbound": {
              "type": "object",
              "description": "Set of endpoints to connect to the device.",
              "additionalProperties": {
                "type": "object",
                "description": "An endpoint to connect to the device.",
                "properties": {
                  "endpointType": {
                    "type": "string",
                    "description": "Type of connection endpoint."
                  },
                  "address": {
                    "type": "string",
                    "description": "The endpoint address & port. This can be either an IP address (e.g., 192.168.1.1) or a fully qualified domain name (FQDN, e.g., server.example.com)."
                  },
                  "version": {
                    "type": "string",
                    "description": "Protocol version associated with the endpoint e.g. 1 or 2 for endpointType Microsoft.HTTP, and 3.5 or 5.0 for endpointType Microsoft.Mqtt etc."
                  },
                  "authentication": {
                    "description": "Defines the client authentication mechanism to the server.",
                    "type": "object",
                    "properties": {
                      "method": {
                        "type": "string",
                        "description": "Defines the method to authenticate the user of the client at the server.",
                        "default": "Certificate",
                        "enum": [
                          "Anonymous",
                          "Certificate",
                          "UsernamePassword"
                        ],
                        "x-ms-enum": {
                          "name": "AuthenticationMethod",
                          "modelAsString": true,
                          "values": [
                            {
                              "name": "Anonymous",
                              "value": "Anonymous",
                              "description": "The user authentication method is anonymous."
                            },
                            {
                              "name": "Certificate",
                              "value": "Certificate",
                              "description": "The user authentication method is an x509 certificate."
                            },
                            {
                              "name": "UsernamePassword",
                              "value": "UsernamePassword",
                              "description": "The user authentication method is a username and password."
                            }
                          ]
                        }
                      },
                      "usernamePasswordCredentials": {
                        "description": "Defines the username and password references when UsernamePassword user authentication mode is selected.",
                        "type": "object",
                        "properties": {
                          "usernameSecretName": {
                            "type": "string",
                            "description": "The name of the secret containing the username."
                          },
                          "passwordSecretName": {
                            "type": "string",
                            "description": "The name of the secret containing the password."
                          }
                        },
                        "required": [
                          "usernameSecretName",
                          "passwordSecretName"
                        ]
                      },
                      "x509Credentials": {
                        "description": "Defines the certificate reference when Certificate user authentication mode is selected.",
                        "type": "object",
                        "properties": {
                          "certificateSecretName": {
                            "type": "string",
                            "description": "The name of the secret containing the certificate and private key (e.g. stored as .der/.pem or .der/.pfx)."
                          },
                          "keySecretName": {
                            "type": "string",
                            "description": "The name of the secret containing the certificate private key in PEM or DER format."
                          },
                          "intermediateCertificatesSecretName": {
                            "type": "string",
                            "description": "The name of the secret containing the combined intermediate certificates in PEM format."
                          }
                        },
                        "required": [
                          "certificateSecretName"
                        ]
                      }
                    },
                    "required": [
                      "method"
                    ]
                  },
                  "trustSettings": {
                    "description": "Defines server trust settings for the endpoint.",
                    "type": "object",
                    "properties": {
                      "trustList": {
                        "type": "string",
                        "description": "Defines a secret reference for certificates to trust."
                      }
                    }
                  },
                  "additionalConfiguration": {
                    "type": "string",
                    "description": "Stringified JSON that contains configuration to be used by the connector (e.g., OPC UA, ONVIF)."
                  }
                },
                "required": [
                  "endpointType",
                  "address"
                ]
              }
            },
            "outbound": {
              "description": "Set of endpoints a device can connect to.",
              "type": "object",
              "properties": {
                "assigned": {
                  "type": "object",
                  "description": "Endpoints the device can connect to.",
                  "additionalProperties": {
                    "type": "object",
                    "description": "Device messaging endpoint model.",
                    "properties": {
                      "endpointType": {
                        "type": "string",
                        "description": "Type of connection used for the messaging endpoint."
                      },
                      "address": {
                        "type": "string",
                        "description": "The endpoint address to connect to."
                      }
                    },
                    "required": [
                      "address"
                    ]
                  }
                },
                "unassigned": {
                  "type": "object",
                  "description": "Set of most recently removed endpoints.",
                  "additionalProperties": {
                    "type": "object",
                    "description": "Device messaging endpoint model.",
                    "properties": {
                      "endpointType": {
                        "type": "string",
                        "description": "Type of connection used for the messaging endpoint."
                      },
                      "address": {
                        "type": "string",
                        "description": "The endpoint address to connect to."
                      }
                    },
                    "required": [
                      "address"
                    ]
                  }
                }
              },
              "required": [
                "assigned"
              ]
            }
          }
        },
        "attributes": {
          "type": "object",
          "description": "A set of key-value pairs that contain custom attributes set by the customer.",
          "additionalProperties": {}
        },
        "status": {
          "description": "Device status updates.",
          "readOnly": true,
          "type": "object",
          "properties": {
            "config": {
              "description": "Defines the device status config properties.",
              "readOnly": true,
              "type": "object",
              "properties": {
                "version": {
                  "type": "integer",
                  "format": "int64",
                  "description": "A read-only incremental counter indicating the number of times the configuration has been modified from the perspective of the current actual (edge) state of the CRD. Edge would be the only writer of this value and would sync back up to the cloud. In steady state, this should equal version.",
                  "readOnly": true
                },
                "lastTransitionTime": {
                  "type": "string",
                  "format": "date-time",
                  "description": "A read-only timestamp indicating the last time the configuration has been modified from the perspective of the current actual (edge) state of the CRD. Edge would be the only writer of this value and would sync back up to the cloud.",
                  "readOnly": true
                },
                "error": {
                  "description": "Object to transfer and persist errors that originate from the edge.",
                  "readOnly": true,
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Error code for classification of errors (ex: '400', '404', '500', etc.).",
                      "readOnly": true
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable helpful error message to provide additional context for error (e.g.,: “Capability ID 'foo' does not exist”).",
                      "readOnly": true
                    },
                    "details": {
                      "type": "array",
                      "description": "Array of error details that describe the status of each error.",
                      "items": {
                        "type": "object",
                        "description": "Defines the error details properties.",
                        "properties": {
                          "code": {
                            "type": "string",
                            "description": "Multi-part error code for classification and root causing of errors (ex: 400.200.100.432).",
                            "readOnly": true
                          },
                          "message": {
                            "type": "string",
                            "description": "Human-readable helpful error message to provide additional context for error (ex: “Authentication method not supported”).",
                            "readOnly": true
                          },
                          "info": {
                            "type": "string",
                            "description": "Human-readable helpful detailed text context for debugging (ex: “The following mechanisms are supported...”).",
                            "readOnly": true
                          },
                          "correlationId": {
                            "type": "string",
                            "description": "Unique identifier for the transaction to aid in debugging.",
                            "readOnly": true
                          }
                        }
                      },
                      "readOnly": true,
                      "x-ms-identifiers": []
                    }
                  }
                }
              }
            },
            "endpoints": {
              "description": "Defines the device status for inbound/outbound endpoints.",
              "readOnly": true,
              "type": "object",
              "properties": {
                "inbound": {
                  "type": "object",
                  "description": "KeyValue pair representing status of inbound endpoints.",
                  "additionalProperties": {
                    "type": "object",
                    "description": "Defines the device status properties.",
                    "properties": {
                      "error": {
                        "description": "Defines the error related to this endpoint.",
                        "readOnly": true,
                        "type": "object",
                        "properties": {
                          "code": {
                            "type": "string",
                            "description": "Error code for classification of errors (ex: '400', '404', '500', etc.).",
                            "readOnly": true
                          },
                          "message": {
                            "type": "string",
                            "description": "Human-readable helpful error message to provide additional context for error (e.g.,: “Capability ID 'foo' does not exist”).",
                            "readOnly": true
                          },
                          "details": {
                            "type": "array",
                            "description": "Array of error details that describe the status of each error.",
                            "items": {
                              "type": "object",
                              "description": "Defines the error details properties.",
                              "properties": {
                                "code": {
                                  "type": "string",
                                  "description": "Multi-part error code for classification and root causing of errors (ex: 400.200.100.432).",
                                  "readOnly": true
                                },
                                "message": {
                                  "type": "string",
                                  "description": "Human-readable helpful error message to provide additional context for error (ex: “Authentication method not supported”).",
                                  "readOnly": true
                                },
                                "info": {
                                  "type": "string",
                                  "description": "Human-readable helpful detailed text context for debugging (ex: “The following mechanisms are supported...”).",
                                  "readOnly": true
                                },
                                "correlationId": {
                                  "type": "string",
                                  "description": "Unique identifier for the transaction to aid in debugging.",
                                  "readOnly": true
                                }
                              }
                            },
                            "readOnly": true,
                            "x-ms-identifiers": []
                          }
                        }
                      }
                    }
                  },
                  "readOnly": true
                }
              }
            }
          }
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "description": "An integer that is incremented each time the resource is modified.",
          "readOnly": true
        },
        "lastTransitionTime": {
          "type": "string",
          "format": "date-time",
          "description": "A timestamp (in UTC) that is updated each time the resource is modified.",
          "readOnly": true
        },
        "provisioningState": {
          "description": "Provisioning state of the resource.",
          "readOnly": true,
          "type": "string",
          "enum": [
            "Succeeded",
            "Failed",
            "Canceled",
            "Accepted",
            "Deleting"
          ],
          "x-ms-enum": {
            "name": "ProvisioningState",
            "modelAsString": true,
            "values": [
              {
                "name": "Succeeded",
                "value": "Succeeded",
                "description": "Resource has been created."
              },
              {
                "name": "Failed",
                "value": "Failed",
                "description": "Resource creation failed."
              },
              {
                "name": "Canceled",
                "value": "Canceled",
                "description": "Resource creation was canceled."
              },
              {
                "name": "Accepted",
                "value": "Accepted",
                "description": "Resource has been accepted by the server."
              },
              {
                "name": "Deleting",
                "value": "Deleting",
                "description": "Resource is deleting."
              }
            ]
          }
        }
      }
    },
    "NamespaceDeviceUpdate": {
      "type": "object",
      "description": "The type used for update operations of the NamespaceDevice.",
      "properties": {
        "tags": {
          "type": "object",
          "description": "Resource tags.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "properties": {
          "description": "The resource-specific properties for this resource.",
          "x-ms-client-flatten": true,
          "type": "object",
          "properties": {
            "operatingSystemVersion": {
              "type": "string",
              "description": "Device operating system version."
            },
            "endpoints": {
              "description": "Property bag containing the device's unassigned and assigned endpoints.",
              "type": "object",
              "properties": {
                "inbound": {
                  "type": "object",
                  "description": "Set of endpoints to connect to the device.",
                  "additionalProperties": {
                    "type": "object",
                    "description": "An endpoint to connect to the device.",
                    "properties": {
                      "endpointType": {
                        "type": "string",
                        "description": "Type of connection endpoint."
                      },
                      "address": {
                        "type": "string",
                        "description": "The endpoint address & port. This can be either an IP address (e.g., 192.168.1.1) or a fully qualified domain name (FQDN, e.g., server.example.com)."
                      },
                      "version": {
                        "type": "string",
                        "description": "Protocol version associated with the endpoint e.g. 1 or 2 for endpointType Microsoft.HTTP, and 3.5 or 5.0 for endpointType Microsoft.Mqtt etc."
                      },
                      "authentication": {
                        "description": "Defines the client authentication mechanism to the server.",
                        "type": "object",
                        "properties": {
                          "method": {
                            "type": "string",
                            "description": "Defines the method to authenticate the user of the client at the server.",
                            "default": "Certificate",
                            "enum": [
                              "Anonymous",
                              "Certificate",
                              "UsernamePassword"
                            ],
                            "x-ms-enum": {
                              "name": "AuthenticationMethod",
                              "modelAsString": true,
                              "values": [
                                {
                                  "name": "Anonymous",
                                  "value": "Anonymous",
                                  "description": "The user authentication method is anonymous."
                                },
                                {
                                  "name": "Certificate",
                                  "value": "Certificate",
                                  "description": "The user authentication method is an x509 certificate."
                                },
                                {
                                  "name": "UsernamePassword",
                                  "value": "UsernamePassword",
                                  "description": "The user authentication method is a username and password."
                                }
                              ]
                            }
                          },
                          "usernamePasswordCredentials": {
                            "description": "Defines the username and password references when UsernamePassword user authentication mode is selected.",
                            "type": "object",
                            "properties": {
                              "usernameSecretName": {
                                "type": "string",
                                "description": "The name of the secret containing the username."
                              },
                              "passwordSecretName": {
                                "type": "string",
                                "description": "The name of the secret containing the password."
                              }
                            }
                          },
                          "x509Credentials": {
                            "description": "Defines the certificate reference when Certificate user authentication mode is selected.",
                            "type": "object",
                            "properties": {
                              "certificateSecretName": {
                                "type": "string",
                                "description": "The name of the secret containing the certificate and private key (e.g. stored as .der/.pem or .der/.pfx)."
                              },
                              "keySecretName": {
                                "type": "string",
                                "description": "The name of the secret containing the certificate private key in PEM or DER format."
                              },
                              "intermediateCertificatesSecretName": {
                                "type": "string",
                                "description": "The name of the secret containing the combined intermediate certificates in PEM format."
                              }
                            }
                          }
                        }
                      },
                      "trustSettings": {
                        "description": "Defines server trust settings for the endpoint.",
                        "type": "object",
                        "properties": {
                          "trustList": {
                            "type": "string",
                            "description": "Defines a secret reference for certificates to trust."
                          }
                        }
                      },
                      "additionalConfiguration": {
                        "type": "string",
                        "description": "Stringified JSON that contains configuration to be used by the connector (e.g., OPC UA, ONVIF)."
                      }
                    }
                  }
                },
                "outbound": {
                  "description": "Set of endpoints a device can connect to.",
                  "type": "object",
                  "properties": {
                    "assigned": {
                      "type": "object",
                      "description": "Endpoints the device can connect to.",
                      "additionalProperties": {
                        "type": "object",
                        "description": "Device messaging endpoint model.",
                        "properties": {
                          "endpointType": {
                            "type": "string",
                            "description": "Type of connection used for the messaging endpoint."
                          },
                          "address": {
                            "type": "string",
                            "description": "The endpoint address to connect to."
                          }
                        }
                      }
                    },
                    "unassigned": {
                      "type": "object",
                      "description": "Set of most recently removed endpoints.",
                      "additionalProperties": {
                        "type": "object",
                        "description": "Device messaging endpoint model.",
                        "properties": {
                          "endpointType": {
                            "type": "string",
                            "description": "Type of connection used for the messaging endpoint."
                          },
                          "address": {
                            "type": "string",
                            "description": "The endpoint address to connect to."
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "attributes": {
              "type": "object",
              "description": "A set of key-value pairs that contain custom attributes set by the customer.",
              "additionalProperties": {}
            },
            "enabled": {
              "type": "boolean",
              "description": "Indicates if the resource and identity are enabled or not. A disabled device cannot authenticate with Microsoft Entra ID."
            }
          }
        }
      }
    },
    "NamespaceDeviceUpdateProperties": {
      "type": "object",
      "description": "The updatable properties of the NamespaceDevice.",
      "properties": {
        "operatingSystemVersion": {
          "type": "string",
          "description": "Device operating system version."
        },
        "endpoints": {
          "description": "Property bag containing the device's unassigned and assigned endpoints.",
          "type": "object",
          "properties": {
            "inbound": {
              "type": "object",
              "description": "Set of endpoints to connect to the device.",
              "additionalProperties": {
                "type": "object",
                "description": "An endpoint to connect to the device.",
                "properties": {
                  "endpointType": {
                    "type": "string",
                    "description": "Type of connection endpoint."
                  },
                  "address": {
                    "type": "string",
                    "description": "The endpoint address & port. This can be either an IP address (e.g., 192.168.1.1) or a fully qualified domain name (FQDN, e.g., server.example.com)."
                  },
                  "version": {
                    "type": "string",
                    "description": "Protocol version associated with the endpoint e.g. 1 or 2 for endpointType Microsoft.HTTP, and 3.5 or 5.0 for endpointType Microsoft.Mqtt etc."
                  },
                  "authentication": {
                    "description": "Defines the client authentication mechanism to the server.",
                    "type": "object",
                    "properties": {
                      "method": {
                        "type": "string",
                        "description": "Defines the method to authenticate the user of the client at the server.",
                        "default": "Certificate",
                        "enum": [
                          "Anonymous",
                          "Certificate",
                          "UsernamePassword"
                        ],
                        "x-ms-enum": {
                          "name": "AuthenticationMethod",
                          "modelAsString": true,
                          "values": [
                            {
                              "name": "Anonymous",
                              "value": "Anonymous",
                              "description": "The user authentication method is anonymous."
                            },
                            {
                              "name": "Certificate",
                              "value": "Certificate",
                              "description": "The user authentication method is an x509 certificate."
                            },
                            {
                              "name": "UsernamePassword",
                              "value": "UsernamePassword",
                              "description": "The user authentication method is a username and password."
                            }
                          ]
                        }
                      },
                      "usernamePasswordCredentials": {
                        "description": "Defines the username and password references when UsernamePassword user authentication mode is selected.",
                        "type": "object",
                        "properties": {
                          "usernameSecretName": {
                            "type": "string",
                            "description": "The name of the secret containing the username."
                          },
                          "passwordSecretName": {
                            "type": "string",
                            "description": "The name of the secret containing the password."
                          }
                        }
                      },
                      "x509Credentials": {
                        "description": "Defines the certificate reference when Certificate user authentication mode is selected.",
                        "type": "object",
                        "properties": {
                          "certificateSecretName": {
                            "type": "string",
                            "description": "The name of the secret containing the certificate and private key (e.g. stored as .der/.pem or .der/.pfx)."
                          },
                          "keySecretName": {
                            "type": "string",
                            "description": "The name of the secret containing the certificate private key in PEM or DER format."
                          },
                          "intermediateCertificatesSecretName": {
                            "type": "string",
                            "description": "The name of the secret containing the combined intermediate certificates in PEM format."
                          }
                        }
                      }
                    }
                  },
                  "trustSettings": {
                    "description": "Defines server trust settings for the endpoint.",
                    "type": "object",
                    "properties": {
                      "trustList": {
                        "type": "string",
                        "description": "Defines a secret reference for certificates to trust."
                      }
                    }
                  },
                  "additionalConfiguration": {
                    "type": "string",
                    "description": "Stringified JSON that contains configuration to be used by the connector (e.g., OPC UA, ONVIF)."
                  }
                }
              }
            },
            "outbound": {
              "description": "Set of endpoints a device can connect to.",
              "type": "object",
              "properties": {
                "assigned": {
                  "type": "object",
                  "description": "Endpoints the device can connect to.",
                  "additionalProperties": {
                    "type": "object",
                    "description": "Device messaging endpoint model.",
                    "properties": {
                      "endpointType": {
                        "type": "string",
                        "description": "Type of connection used for the messaging endpoint."
                      },
                      "address": {
                        "type": "string",
                        "description": "The endpoint address to connect to."
                      }
                    }
                  }
                },
                "unassigned": {
                  "type": "object",
                  "description": "Set of most recently removed endpoints.",
                  "additionalProperties": {
                    "type": "object",
                    "description": "Device messaging endpoint model.",
                    "properties": {
                      "endpointType": {
                        "type": "string",
                        "description": "Type of connection used for the messaging endpoint."
                      },
                      "address": {
                        "type": "string",
                        "description": "The endpoint address to connect to."
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "attributes": {
          "type": "object",
          "description": "A set of key-value pairs that contain custom attributes set by the customer.",
          "additionalProperties": {}
        },
        "enabled": {
          "type": "boolean",
          "description": "Indicates if the resource and identity are enabled or not. A disabled device cannot authenticate with Microsoft Entra ID."
        }
      }
    },
    "NamespaceDiscoveredAsset": {
      "type": "object",
      "description": "Discovered asset definition.",
      "properties": {
        "id": {
          "type": "string",
          "format": "arm-id",
          "description": "Fully qualified resource ID for the resource. E.g. \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}\"",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "The name of the resource",
          "readOnly": true
        },
        "type": {
          "type": "string",
          "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
          "readOnly": true
        },
        "systemData": {
          "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
          "readOnly": true,
          "type": "object",
          "properties": {
            "createdBy": {
              "type": "string",
              "description": "The identity that created the resource."
            },
            "createdByType": {
              "type": "string",
              "description": "The type of identity that created the resource.",
              "enum": [
                "User",
                "Application",
                "ManagedIdentity",
                "Key"
              ],
              "x-ms-enum": {
                "name": "createdByType",
                "modelAsString": true
              }
            },
            "createdAt": {
              "type": "string",
              "format": "date-time",
              "description": "The timestamp of resource creation (UTC)."
            },
            "lastModifiedBy": {
              "type": "string",
              "description": "The identity that last modified the resource."
            },
            "lastModifiedByType": {
              "type": "string",
              "description": "The type of identity that last modified the resource.",
              "enum": [
                "User",
                "Application",
                "ManagedIdentity",
                "Key"
              ],
              "x-ms-enum": {
                "name": "createdByType",
                "modelAsString": true
              }
            },
            "lastModifiedAt": {
              "type": "string",
              "format": "date-time",
              "description": "The timestamp of resource last modification (UTC)"
            }
          }
        },
        "tags": {
          "type": "object",
          "description": "Resource tags.",
          "additionalProperties": {
            "type": "string"
          },
          "x-ms-mutability": [
            "read",
            "create",
            "update"
          ]
        },
        "location": {
          "type": "string",
          "description": "The geo-location where the resource lives",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "properties": {
          "description": "The resource-specific properties for this resource.",
          "x-ms-client-flatten": true,
          "type": "object",
          "properties": {
            "deviceRef": {
              "description": "Reference to the device that provides data for this asset. Must provide device name & endpoint on the device to use.",
              "type": "object",
              "properties": {
                "deviceName": {
                  "type": "string",
                  "description": "Name of the device resource"
                },
                "endpointName": {
                  "type": "string",
                  "description": "The name of endpoint to use"
                }
              },
              "required": [
                "deviceName",
                "endpointName"
              ]
            },
            "displayName": {
              "type": "string",
              "description": "Human-readable display name."
            },
            "assetTypeRefs": {
              "type": "array",
              "description": "URIs or type definition IDs.",
              "items": {
                "type": "string"
              }
            },
            "description": {
              "type": "string",
              "description": "Human-readable description of the asset."
            },
            "discoveryId": {
              "type": "string",
              "description": "Identifier used to detect changes in the asset."
            },
            "externalAssetId": {
              "type": "string",
              "description": "Asset ID provided by the customer.",
              "x-ms-mutability": [
                "read",
                "create"
              ]
            },
            "version": {
              "type": "integer",
              "format": "int64",
              "description": "An integer that is incremented each time the resource is modified."
            },
            "manufacturer": {
              "type": "string",
              "description": "Asset manufacturer."
            },
            "manufacturerUri": {
              "type": "string",
              "description": "Asset manufacturer URI."
            },
            "model": {
              "type": "string",
              "description": "Asset model."
            },
            "productCode": {
              "type": "string",
              "description": "Asset product code."
            },
            "hardwareRevision": {
              "type": "string",
              "description": "Asset hardware revision number."
            },
            "softwareRevision": {
              "type": "string",
              "description": "Asset software revision number."
            },
            "documentationUri": {
              "type": "string",
              "description": "Asset documentation reference."
            },
            "serialNumber": {
              "type": "string",
              "description": "Asset serial number."
            },
            "attributes": {
              "type": "object",
              "description": "A set of key-value pairs that contain custom attributes.",
              "additionalProperties": {}
            },
            "defaultDatasetsConfiguration": {
              "type": "string",
              "description": "Stringified JSON that contains connector-specific default configuration for all datasets. Each dataset can have its own configuration that overrides the default settings here."
            },
            "defaultEventsConfiguration": {
              "type": "string",
              "description": "Stringified JSON that contains connector-specific default configuration for all events. Each event can have its own configuration that overrides the default settings here."
            },
            "defaultStreamsConfiguration": {
              "type": "string",
              "description": "Stringified JSON that contains connector-specific default configuration for all streams. Each stream can have its own configuration that overrides the default settings here."
            },
            "defaultManagementGroupsConfiguration": {
              "type": "string",
              "description": "Stringified JSON that contains connector-specific default configuration for all management groups. Each management group can have its own configuration that overrides the default settings here."
            },
            "defaultDatasetsDestinations": {
              "type": "array",
              "description": "Default destinations for a dataset.",
              "items": {
                "type": "object",
                "description": "The type of the destination.",
                "properties": {
                  "target": {
                    "description": "Target destination.",
                    "type": "string",
                    "enum": [
                      "Mqtt",
                      "BrokerStateStore",
                      "Storage"
                    ],
                    "x-ms-enum": {
                      "name": "DatasetDestinationTarget",
                      "modelAsString": true,
                      "values": [
                        {
                          "name": "Mqtt",
                          "value": "Mqtt",
                          "description": "MQTT target."
                        },
                        {
                          "name": "BrokerStateStore",
                          "value": "BrokerStateStore",
                          "description": "Broker State Store target."
                        },
                        {
                          "name": "Storage",
                          "value": "Storage",
                          "description": "Storage target."
                        }
                      ]
                    }
                  }
                },
                "discriminator": "target",
                "required": [
                  "target"
                ]
              },
              "x-ms-identifiers": []
            },
            "defaultEventsDestinations": {
              "type": "array",
              "description": "Default destinations for an event.",
              "items": {
                "type": "object",
                "description": "The type of the destination.",
                "properties": {
                  "target": {
                    "description": "Target destination.",
                    "type": "string",
                    "enum": [
                      "Mqtt",
                      "Storage"
                    ],
                    "x-ms-enum": {
                      "name": "EventDestinationTarget",
                      "modelAsString": true,
                      "values": [
                        {
                          "name": "Mqtt",
                          "value": "Mqtt",
                          "description": "MQTT target."
                        },
                        {
                          "name": "Storage",
                          "value": "Storage",
                          "description": "Storage target."
                        }
                      ]
                    }
                  }
                },
                "discriminator": "target",
                "required": [
                  "target"
                ]
              },
              "x-ms-identifiers": []
            },
            "defaultStreamsDestinations": {
              "type": "array",
              "description": "Default destinations for a stream.",
              "items": {
                "type": "object",
                "description": "The type of the destination.",
                "properties": {
                  "target": {
                    "description": "Target destination.",
                    "type": "string",
                    "enum": [
                      "Mqtt",
                      "Storage"
                    ],
                    "x-ms-enum": {
                      "name": "StreamDestinationTarget",
                      "modelAsString": true,
                      "values": [
                        {
                          "name": "Mqtt",
                          "value": "Mqtt",
                          "description": "MQTT target."
                        },
                        {
                          "name": "Storage",
                          "value": "Storage",
                          "description": "Storage target."
                        }
                      ]
                    }
                  }
                },
                "discriminator": "target",
                "required": [
                  "target"
                ]
              },
              "x-ms-identifiers": []
            },
            "datasets": {
              "type": "array",
              "description": "Array of datasets that are part of the asset. Each dataset spec describes the data points that make up the set.",
              "items": {
                "type": "object",
                "description": "Defines the dataset properties.",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of the dataset."
                  },
                  "dataSource": {
                    "type": "string",
                    "description": "Reference to a data source for a given dataset."
                  },
                  "typeRef": {
                    "type": "string",
                    "description": "URI or type definition ID."
                  },
                  "datasetConfiguration": {
                    "type": "string",
                    "description": "Stringified JSON that contains connector-specific properties that describes configuration for the specific dataset."
                  },
                  "destinations": {
                    "type": "array",
                    "description": "Destinations for a dataset.",
                    "items": {
                      "type": "object",
                      "description": "The type of the destination.",
                      "properties": {
                        "target": {
                          "description": "Target destination.",
                          "type": "string",
                          "enum": [
                            "Mqtt",
                            "BrokerStateStore",
                            "Storage"
                          ],
                          "x-ms-enum": {
                            "name": "DatasetDestinationTarget",
                            "modelAsString": true,
                            "values": [
                              {
                                "name": "Mqtt",
                                "value": "Mqtt",
                                "description": "MQTT target."
                              },
                              {
                                "name": "BrokerStateStore",
                                "value": "BrokerStateStore",
                                "description": "Broker State Store target."
                              },
                              {
                                "name": "Storage",
                                "value": "Storage",
                                "description": "Storage target."
                              }
                            ]
                          }
                        }
                      },
                      "discriminator": "target",
                      "required": [
                        "target"
                      ]
                    },
                    "x-ms-identifiers": []
                  },
                  "dataPoints": {
                    "type": "array",
                    "description": "Array of data points that are part of the dataset. Each data point can have per-data point configuration.",
                    "items": {
                      "type": "object",
                      "description": "Defines the discovered dataset data point properties.",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "The name of the data point."
                        },
                        "dataSource": {
                          "type": "string",
                          "description": "The address of the source of the data in the asset (e.g. URL) so that a client can access the data source on the asset."
                        },
                        "dataPointConfiguration": {
                          "type": "string",
                          "description": "Stringified JSON that contains connector-specific configuration for the data point. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize."
                        },
                        "lastUpdatedOn": {
                          "type": "string",
                          "format": "date-time",
                          "description": "UTC timestamp indicating when the data point was added or modified."
                        },
                        "typeRef": {
                          "type": "string",
                          "description": "URI or type definition ID."
                        }
                      },
                      "required": [
                        "name",
                        "dataSource"
                      ]
                    },
                    "x-ms-identifiers": []
                  },
                  "lastUpdatedOn": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Timestamp (in UTC) indicating when the dataset was added or modified."
                  }
                },
                "required": [
                  "name"
                ]
              },
              "x-ms-identifiers": []
            },
            "eventGroups": {
              "type": "array",
              "description": "Array of event groups that are part of the asset. Each event group can have per-event group configuration.",
              "items": {
                "type": "object",
                "description": "Defines the discovered event group properties.",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the event group."
                  },
                  "dataSource": {
                    "type": "string",
                    "description": "The address of the notifier of the event group in the asset (e.g. URL) so that a client can access the event group on the asset."
                  },
                  "eventGroupConfiguration": {
                    "type": "string",
                    "description": "Stringified JSON that contains connector-specific configuration for the event group. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize."
                  },
                  "defaultDestinations": {
                    "type": "array",
                    "description": "Destinations for events. Default destinations when destinations is not defined at the event level.",
                    "items": {
                      "type": "object",
                      "description": "The type of the destination.",
                      "properties": {
                        "target": {
                          "description": "Target destination.",
                          "type": "string",
                          "enum": [
                            "Mqtt",
                            "Storage"
                          ],
                          "x-ms-enum": {
                            "name": "EventDestinationTarget",
                            "modelAsString": true,
                            "values": [
                              {
                                "name": "Mqtt",
                                "value": "Mqtt",
                                "description": "MQTT target."
                              },
                              {
                                "name": "Storage",
                                "value": "Storage",
                                "description": "Storage target."
                              }
                            ]
                          }
                        }
                      },
                      "discriminator": "target",
                      "required": [
                        "target"
                      ]
                    },
                    "x-ms-identifiers": []
                  },
                  "typeRef": {
                    "type": "string",
                    "description": "URI or type definition ID."
                  },
                  "events": {
                    "type": "array",
                    "description": "Array of events that are part of the event group.",
                    "items": {
                      "type": "object",
                      "description": "Defines the event properties.",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "The name of the event."
                        },
                        "dataSource": {
                          "type": "string",
                          "description": "Reference to a data source for a given event."
                        },
                        "eventConfiguration": {
                          "type": "string",
                          "description": "Stringified JSON that contains connector-specific configuration for the event. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize."
                        },
                        "destinations": {
                          "type": "array",
                          "description": "Destinations for an event.",
                          "items": {
                            "type": "object",
                            "description": "The type of the destination.",
                            "properties": {
                              "target": {
                                "description": "Target destination.",
                                "type": "string",
                                "enum": [
                                  "Mqtt",
                                  "Storage"
                                ],
                                "x-ms-enum": {
                                  "name": "EventDestinationTarget",
                                  "modelAsString": true,
                                  "values": [
                                    {
                                      "name": "Mqtt",
                                      "value": "Mqtt",
                                      "description": "MQTT target."
                                    },
                                    {
                                      "name": "Storage",
                                      "value": "Storage",
                                      "description": "Storage target."
                                    }
                                  ]
                                }
                              }
                            },
                            "discriminator": "target",
                            "required": [
                              "target"
                            ]
                          },
                          "x-ms-identifiers": []
                        },
                        "typeRef": {
                          "type": "string",
                          "description": "URI or type definition ID."
                        },
                        "lastUpdatedOn": {
                          "type": "string",
                          "format": "date-time",
                          "description": "UTC timestamp indicating when the event was added or modified."
                        }
                      },
                      "required": [
                        "name"
                      ]
                    },
                    "x-ms-identifiers": []
                  }
                },
                "required": [
                  "name"
                ]
              },
              "x-ms-identifiers": []
            },
            "streams": {
              "type": "array",
              "description": "Array of streams that are part of the asset. Each stream can have a per-stream configuration.",
              "items": {
                "type": "object",
                "description": "Defines the stream properties.",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of the stream definition."
                  },
                  "streamConfiguration": {
                    "type": "string",
                    "description": "Stringified JSON that contains connector-specific configuration for the specific stream."
                  },
                  "typeRef": {
                    "type": "string",
                    "description": "URI or type definition ID."
                  },
                  "destinations": {
                    "type": "array",
                    "description": "Destinations for a stream.",
                    "items": {
                      "type": "object",
                      "description": "The type of the destination.",
                      "properties": {
                        "target": {
                          "description": "Target destination.",
                          "type": "string",
                          "enum": [
                            "Mqtt",
                            "Storage"
                          ],
                          "x-ms-enum": {
                            "name": "StreamDestinationTarget",
                            "modelAsString": true,
                            "values": [
                              {
                                "name": "Mqtt",
                                "value": "Mqtt",
                                "description": "MQTT target."
                              },
                              {
                                "name": "Storage",
                                "value": "Storage",
                                "description": "Storage target."
                              }
                            ]
                          }
                        }
                      },
                      "discriminator": "target",
                      "required": [
                        "target"
                      ]
                    },
                    "x-ms-identifiers": []
                  },
                  "lastUpdatedOn": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Timestamp (in UTC) indicating when the stream was added or modified."
                  }
                },
                "required": [
                  "name"
                ]
              },
              "x-ms-identifiers": []
            },
            "managementGroups": {
              "type": "array",
              "description": "Array of management groups that are part of the asset. Each management group can have a per-group configuration.",
              "items": {
                "type": "object",
                "description": "Defines the management group properties.",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of the management group."
                  },
                  "managementGroupConfiguration": {
                    "type": "string",
                    "description": "Stringified JSON that contains connector-specific configuration for the management group."
                  },
                  "typeRef": {
                    "type": "string",
                    "description": "URI or type definition ID."
                  },
                  "dataSource": {
                    "type": "string",
                    "description": "Reference to a data source for a given management group."
                  },
                  "defaultTopic": {
                    "type": "string",
                    "description": "Default MQTT topic path on which a client will receive the request for all actions that are part of the management group."
                  },
                  "defaultTimeoutInSeconds": {
                    "type": "integer",
                    "format": "int32",
                    "description": "Default response timeout for all actions that are part of the management group.",
                    "default": 100
                  },
                  "actions": {
                    "type": "array",
                    "description": "Array of actions that are part of the management group. Each action can have an individual configuration.",
                    "items": {
                      "type": "object",
                      "description": "Defines the action properties.",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "Name of the action."
                        },
                        "actionConfiguration": {
                          "type": "string",
                          "description": "Stringified JSON that contains connector-specific configuration for the action."
                        },
                        "targetUri": {
                          "type": "string",
                          "description": "The target URI on which a client can invoke the specific action."
                        },
                        "typeRef": {
                          "type": "string",
                          "description": "URI or type definition ID."
                        },
                        "topic": {
                          "type": "string",
                          "description": "The MQTT topic path on which a client will receive the request for the action."
                        },
                        "actionType": {
                          "type": "string",
                          "description": "The type of the action.",
                          "default": "Call",
                          "enum": [
                            "Call",
                            "Read",
                            "Write"
                          ],
                          "x-ms-enum": {
                            "name": "NamespaceDiscoveredManagementActionType",
                            "modelAsString": true,
                            "values": [
                              {
                                "name": "Call",
                                "value": "Call",
                                "description": "Call action type."
                              },
                              {
                                "name": "Read",
                                "value": "Read",
                                "description": "Read action type."
                              },
                              {
                                "name": "Write",
                                "value": "Write",
                                "description": "Write action type."
                              }
                            ]
                          }
                        },
                        "timeoutInSeconds": {
                          "type": "integer",
                          "format": "int32",
                          "description": "Response timeout for the action."
                        },
                        "lastUpdatedOn": {
                          "type": "string",
                          "format": "date-time",
                          "description": "Timestamp (in UTC) indicating when the management action was added or modified."
                        }
                      },
                      "required": [
                        "name",
                        "targetUri"
                      ]
                    },
                    "x-ms-identifiers": []
                  },
                  "lastUpdatedOn": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Timestamp (in UTC) indicating when the management group was added or modified."
                  }
                },
                "required": [
                  "name"
                ]
              },
              "x-ms-identifiers": []
            },
            "provisioningState": {
              "description": "Provisioning state of the resource.",
              "readOnly": true,
              "type": "string",
              "enum": [
                "Succeeded",
                "Failed",
                "Canceled",
                "Accepted",
                "Deleting"
              ],
              "x-ms-enum": {
                "name": "ProvisioningState",
                "modelAsString": true,
                "values": [
                  {
                    "name": "Succeeded",
                    "value": "Succeeded",
                    "description": "Resource has been created."
                  },
                  {
                    "name": "Failed",
                    "value": "Failed",
                    "description": "Resource creation failed."
                  },
                  {
                    "name": "Canceled",
                    "value": "Canceled",
                    "description": "Resource creation was canceled."
                  },
                  {
                    "name": "Accepted",
                    "value": "Accepted",
                    "description": "Resource has been accepted by the server."
                  },
                  {
                    "name": "Deleting",
                    "value": "Deleting",
                    "description": "Resource is deleting."
                  }
                ]
              }
            }
          },
          "required": [
            "deviceRef",
            "discoveryId",
            "version"
          ]
        },
        "extendedLocation": {
          "description": "The extended location.",
          "x-ms-mutability": [
            "read",
            "create"
          ],
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "description": "The extended location type."
            },
            "name": {
              "type": "string",
              "description": "The extended location name."
            }
          },
          "required": [
            "type",
            "name"
          ]
        }
      },
      "required": [
        "extendedLocation"
      ]
    },
    "NamespaceDiscoveredAssetListResult": {
      "type": "object",
      "description": "The response of a NamespaceDiscoveredAsset list operation.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The NamespaceDiscoveredAsset items on this page",
          "items": {
            "type": "object",
            "description": "Discovered asset definition.",
            "properties": {
              "id": {
                "type": "string",
                "format": "arm-id",
                "description": "Fully qualified resource ID for the resource. E.g. \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}\"",
                "readOnly": true
              },
              "name": {
                "type": "string",
                "description": "The name of the resource",
                "readOnly": true
              },
              "type": {
                "type": "string",
                "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                "readOnly": true
              },
              "systemData": {
                "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                "readOnly": true,
                "type": "object",
                "properties": {
                  "createdBy": {
                    "type": "string",
                    "description": "The identity that created the resource."
                  },
                  "createdByType": {
                    "type": "string",
                    "description": "The type of identity that created the resource.",
                    "enum": [
                      "User",
                      "Application",
                      "ManagedIdentity",
                      "Key"
                    ],
                    "x-ms-enum": {
                      "name": "createdByType",
                      "modelAsString": true
                    }
                  },
                  "createdAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp of resource creation (UTC)."
                  },
                  "lastModifiedBy": {
                    "type": "string",
                    "description": "The identity that last modified the resource."
                  },
                  "lastModifiedByType": {
                    "type": "string",
                    "description": "The type of identity that last modified the resource.",
                    "enum": [
                      "User",
                      "Application",
                      "ManagedIdentity",
                      "Key"
                    ],
                    "x-ms-enum": {
                      "name": "createdByType",
                      "modelAsString": true
                    }
                  },
                  "lastModifiedAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp of resource last modification (UTC)"
                  }
                }
              },
              "tags": {
                "type": "object",
                "description": "Resource tags.",
                "additionalProperties": {
                  "type": "string"
                },
                "x-ms-mutability": [
                  "read",
                  "create",
                  "update"
                ]
              },
              "location": {
                "type": "string",
                "description": "The geo-location where the resource lives",
                "x-ms-mutability": [
                  "read",
                  "create"
                ]
              },
              "properties": {
                "description": "The resource-specific properties for this resource.",
                "x-ms-client-flatten": true,
                "type": "object",
                "properties": {
                  "deviceRef": {
                    "description": "Reference to the device that provides data for this asset. Must provide device name & endpoint on the device to use.",
                    "type": "object",
                    "properties": {
                      "deviceName": {
                        "type": "string",
                        "description": "Name of the device resource"
                      },
                      "endpointName": {
                        "type": "string",
                        "description": "The name of endpoint to use"
                      }
                    },
                    "required": [
                      "deviceName",
                      "endpointName"
                    ]
                  },
                  "displayName": {
                    "type": "string",
                    "description": "Human-readable display name."
                  },
                  "assetTypeRefs": {
                    "type": "array",
                    "description": "URIs or type definition IDs.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "description": {
                    "type": "string",
                    "description": "Human-readable description of the asset."
                  },
                  "discoveryId": {
                    "type": "string",
                    "description": "Identifier used to detect changes in the asset."
                  },
                  "externalAssetId": {
                    "type": "string",
                    "description": "Asset ID provided by the customer.",
                    "x-ms-mutability": [
                      "read",
                      "create"
                    ]
                  },
                  "version": {
                    "type": "integer",
                    "format": "int64",
                    "description": "An integer that is incremented each time the resource is modified."
                  },
                  "manufacturer": {
                    "type": "string",
                    "description": "Asset manufacturer."
                  },
                  "manufacturerUri": {
                    "type": "string",
                    "description": "Asset manufacturer URI."
                  },
                  "model": {
                    "type": "string",
                    "description": "Asset model."
                  },
                  "productCode": {
                    "type": "string",
                    "description": "Asset product code."
                  },
                  "hardwareRevision": {
                    "type": "string",
                    "description": "Asset hardware revision number."
                  },
                  "softwareRevision": {
                    "type": "string",
                    "description": "Asset software revision number."
                  },
                  "documentationUri": {
                    "type": "string",
                    "description": "Asset documentation reference."
                  },
                  "serialNumber": {
                    "type": "string",
                    "description": "Asset serial number."
                  },
                  "attributes": {
                    "type": "object",
                    "description": "A set of key-value pairs that contain custom attributes.",
                    "additionalProperties": {}
                  },
                  "defaultDatasetsConfiguration": {
                    "type": "string",
                    "description": "Stringified JSON that contains connector-specific default configuration for all datasets. Each dataset can have its own configuration that overrides the default settings here."
                  },
                  "defaultEventsConfiguration": {
                    "type": "string",
                    "description": "Stringified JSON that contains connector-specific default configuration for all events. Each event can have its own configuration that overrides the default settings here."
                  },
                  "defaultStreamsConfiguration": {
                    "type": "string",
                    "description": "Stringified JSON that contains connector-specific default configuration for all streams. Each stream can have its own configuration that overrides the default settings here."
                  },
                  "defaultManagementGroupsConfiguration": {
                    "type": "string",
                    "description": "Stringified JSON that contains connector-specific default configuration for all management groups. Each management group can have its own configuration that overrides the default settings here."
                  },
                  "defaultDatasetsDestinations": {
                    "type": "array",
                    "description": "Default destinations for a dataset.",
                    "items": {
                      "type": "object",
                      "description": "The type of the destination.",
                      "properties": {
                        "target": {
                          "description": "Target destination.",
                          "type": "string",
                          "enum": [
                            "Mqtt",
                            "BrokerStateStore",
                            "Storage"
                          ],
                          "x-ms-enum": {
                            "name": "DatasetDestinationTarget",
                            "modelAsString": true,
                            "values": [
                              {
                                "name": "Mqtt",
                                "value": "Mqtt",
                                "description": "MQTT target."
                              },
                              {
                                "name": "BrokerStateStore",
                                "value": "BrokerStateStore",
                                "description": "Broker State Store target."
                              },
                              {
                                "name": "Storage",
                                "value": "Storage",
                                "description": "Storage target."
                              }
                            ]
                          }
                        }
                      },
                      "discriminator": "target",
                      "required": [
                        "target"
                      ]
                    },
                    "x-ms-identifiers": []
                  },
                  "defaultEventsDestinations": {
                    "type": "array",
                    "description": "Default destinations for an event.",
                    "items": {
                      "type": "object",
                      "description": "The type of the destination.",
                      "properties": {
                        "target": {
                          "description": "Target destination.",
                          "type": "string",
                          "enum": [
                            "Mqtt",
                            "Storage"
                          ],
                          "x-ms-enum": {
                            "name": "EventDestinationTarget",
                            "modelAsString": true,
                            "values": [
                              {
                                "name": "Mqtt",
                                "value": "Mqtt",
                                "description": "MQTT target."
                              },
                              {
                                "name": "Storage",
                                "value": "Storage",
                                "description": "Storage target."
                              }
                            ]
                          }
                        }
                      },
                      "discriminator": "target",
                      "required": [
                        "target"
                      ]
                    },
                    "x-ms-identifiers": []
                  },
                  "defaultStreamsDestinations": {
                    "type": "array",
                    "description": "Default destinations for a stream.",
                    "items": {
                      "type": "object",
                      "description": "The type of the destination.",
                      "properties": {
                        "target": {
                          "description": "Target destination.",
                          "type": "string",
                          "enum": [
                            "Mqtt",
                            "Storage"
                          ],
                          "x-ms-enum": {
                            "name": "StreamDestinationTarget",
                            "modelAsString": true,
                            "values": [
                              {
                                "name": "Mqtt",
                                "value": "Mqtt",
                                "description": "MQTT target."
                              },
                              {
                                "name": "Storage",
                                "value": "Storage",
                                "description": "Storage target."
                              }
                            ]
                          }
                        }
                      },
                      "discriminator": "target",
                      "required": [
                        "target"
                      ]
                    },
                    "x-ms-identifiers": []
                  },
                  "datasets": {
                    "type": "array",
                    "description": "Array of datasets that are part of the asset. Each dataset spec describes the data points that make up the set.",
                    "items": {
                      "type": "object",
                      "description": "Defines the dataset properties.",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "Name of the dataset."
                        },
                        "dataSource": {
                          "type": "string",
                          "description": "Reference to a data source for a given dataset."
                        },
                        "typeRef": {
                          "type": "string",
                          "description": "URI or type definition ID."
                        },
                        "datasetConfiguration": {
                          "type": "string",
                          "description": "Stringified JSON that contains connector-specific properties that describes configuration for the specific dataset."
                        },
                        "destinations": {
                          "type": "array",
                          "description": "Destinations for a dataset.",
                          "items": {
                            "type": "object",
                            "description": "The type of the destination.",
                            "properties": {
                              "target": {
                                "description": "Target destination.",
                                "type": "string",
                                "enum": [
                                  "Mqtt",
                                  "BrokerStateStore",
                                  "Storage"
                                ],
                                "x-ms-enum": {
                                  "name": "DatasetDestinationTarget",
                                  "modelAsString": true,
                                  "values": [
                                    {
                                      "name": "Mqtt",
                                      "value": "Mqtt",
                                      "description": "MQTT target."
                                    },
                                    {
                                      "name": "BrokerStateStore",
                                      "value": "BrokerStateStore",
                                      "description": "Broker State Store target."
                                    },
                                    {
                                      "name": "Storage",
                                      "value": "Storage",
                                      "description": "Storage target."
                                    }
                                  ]
                                }
                              }
                            },
                            "discriminator": "target",
                            "required": [
                              "target"
                            ]
                          },
                          "x-ms-identifiers": []
                        },
                        "dataPoints": {
                          "type": "array",
                          "description": "Array of data points that are part of the dataset. Each data point can have per-data point configuration.",
                          "items": {
                            "type": "object",
                            "description": "Defines the discovered dataset data point properties.",
                            "properties": {
                              "name": {
                                "type": "string",
                                "description": "The name of the data point."
                              },
                              "dataSource": {
                                "type": "string",
                                "description": "The address of the source of the data in the asset (e.g. URL) so that a client can access the data source on the asset."
                              },
                              "dataPointConfiguration": {
                                "type": "string",
                                "description": "Stringified JSON that contains connector-specific configuration for the data point. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize."
                              },
                              "lastUpdatedOn": {
                                "type": "string",
                                "format": "date-time",
                                "description": "UTC timestamp indicating when the data point was added or modified."
                              },
                              "typeRef": {
                                "type": "string",
                                "description": "URI or type definition ID."
                              }
                            },
                            "required": [
                              "name",
                              "dataSource"
                            ]
                          },
                          "x-ms-identifiers": []
                        },
                        "lastUpdatedOn": {
                          "type": "string",
                          "format": "date-time",
                          "description": "Timestamp (in UTC) indicating when the dataset was added or modified."
                        }
                      },
                      "required": [
                        "name"
                      ]
                    },
                    "x-ms-identifiers": []
                  },
                  "eventGroups": {
                    "type": "array",
                    "description": "Array of event groups that are part of the asset. Each event group can have per-event group configuration.",
                    "items": {
                      "type": "object",
                      "description": "Defines the discovered event group properties.",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "The name of the event group."
                        },
                        "dataSource": {
                          "type": "string",
                          "description": "The address of the notifier of the event group in the asset (e.g. URL) so that a client can access the event group on the asset."
                        },
                        "eventGroupConfiguration": {
                          "type": "string",
                          "description": "Stringified JSON that contains connector-specific configuration for the event group. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize."
                        },
                        "defaultDestinations": {
                          "type": "array",
                          "description": "Destinations for events. Default destinations when destinations is not defined at the event level.",
                          "items": {
                            "type": "object",
                            "description": "The type of the destination.",
                            "properties": {
                              "target": {
                                "description": "Target destination.",
                                "type": "string",
                                "enum": [
                                  "Mqtt",
                                  "Storage"
                                ],
                                "x-ms-enum": {
                                  "name": "EventDestinationTarget",
                                  "modelAsString": true,
                                  "values": [
                                    {
                                      "name": "Mqtt",
                                      "value": "Mqtt",
                                      "description": "MQTT target."
                                    },
                                    {
                                      "name": "Storage",
                                      "value": "Storage",
                                      "description": "Storage target."
                                    }
                                  ]
                                }
                              }
                            },
                            "discriminator": "target",
                            "required": [
                              "target"
                            ]
                          },
                          "x-ms-identifiers": []
                        },
                        "typeRef": {
                          "type": "string",
                          "description": "URI or type definition ID."
                        },
                        "events": {
                          "type": "array",
                          "description": "Array of events that are part of the event group.",
                          "items": {
                            "type": "object",
                            "description": "Defines the event properties.",
                            "properties": {
                              "name": {
                                "type": "string",
                                "description": "The name of the event."
                              },
                              "dataSource": {
                                "type": "string",
                                "description": "Reference to a data source for a given event."
                              },
                              "eventConfiguration": {
                                "type": "string",
                                "description": "Stringified JSON that contains connector-specific configuration for the event. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize."
                              },
                              "destinations": {
                                "type": "array",
                                "description": "Destinations for an event.",
                                "items": {
                                  "type": "object",
                                  "description": "The type of the destination.",
                                  "properties": {
                                    "target": {
                                      "description": "Target destination.",
                                      "type": "string",
                                      "enum": [
                                        "Mqtt",
                                        "Storage"
                                      ],
                                      "x-ms-enum": {
                                        "name": "EventDestinationTarget",
                                        "modelAsString": true,
                                        "values": [
                                          {
                                            "name": "Mqtt",
                                            "value": "Mqtt",
                                            "description": "MQTT target."
                                          },
                                          {
                                            "name": "Storage",
                                            "value": "Storage",
                                            "description": "Storage target."
                                          }
                                        ]
                                      }
                                    }
                                  },
                                  "discriminator": "target",
                                  "required": [
                                    "target"
                                  ]
                                },
                                "x-ms-identifiers": []
                              },
                              "typeRef": {
                                "type": "string",
                                "description": "URI or type definition ID."
                              },
                              "lastUpdatedOn": {
                                "type": "string",
                                "format": "date-time",
                                "description": "UTC timestamp indicating when the event was added or modified."
                              }
                            },
                            "required": [
                              "name"
                            ]
                          },
                          "x-ms-identifiers": []
                        }
                      },
                      "required": [
                        "name"
                      ]
                    },
                    "x-ms-identifiers": []
                  },
                  "streams": {
                    "type": "array",
                    "description": "Array of streams that are part of the asset. Each stream can have a per-stream configuration.",
                    "items": {
                      "type": "object",
                      "description": "Defines the stream properties.",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "Name of the stream definition."
                        },
                        "streamConfiguration": {
                          "type": "string",
                          "description": "Stringified JSON that contains connector-specific configuration for the specific stream."
                        },
                        "typeRef": {
                          "type": "string",
                          "description": "URI or type definition ID."
                        },
                        "destinations": {
                          "type": "array",
                          "description": "Destinations for a stream.",
                          "items": {
                            "type": "object",
                            "description": "The type of the destination.",
                            "properties": {
                              "target": {
                                "description": "Target destination.",
                                "type": "string",
                                "enum": [
                                  "Mqtt",
                                  "Storage"
                                ],
                                "x-ms-enum": {
                                  "name": "StreamDestinationTarget",
                                  "modelAsString": true,
                                  "values": [
                                    {
                                      "name": "Mqtt",
                                      "value": "Mqtt",
                                      "description": "MQTT target."
                                    },
                                    {
                                      "name": "Storage",
                                      "value": "Storage",
                                      "description": "Storage target."
                                    }
                                  ]
                                }
                              }
                            },
                            "discriminator": "target",
                            "required": [
                              "target"
                            ]
                          },
                          "x-ms-identifiers": []
                        },
                        "lastUpdatedOn": {
                          "type": "string",
                          "format": "date-time",
                          "description": "Timestamp (in UTC) indicating when the stream was added or modified."
                        }
                      },
                      "required": [
                        "name"
                      ]
                    },
                    "x-ms-identifiers": []
                  },
                  "managementGroups": {
                    "type": "array",
                    "description": "Array of management groups that are part of the asset. Each management group can have a per-group configuration.",
                    "items": {
                      "type": "object",
                      "description": "Defines the management group properties.",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "Name of the management group."
                        },
                        "managementGroupConfiguration": {
                          "type": "string",
                          "description": "Stringified JSON that contains connector-specific configuration for the management group."
                        },
                        "typeRef": {
                          "type": "string",
                          "description": "URI or type definition ID."
                        },
                        "dataSource": {
                          "type": "string",
                          "description": "Reference to a data source for a given management group."
                        },
                        "defaultTopic": {
                          "type": "string",
                          "description": "Default MQTT topic path on which a client will receive the request for all actions that are part of the management group."
                        },
                        "defaultTimeoutInSeconds": {
                          "type": "integer",
                          "format": "int32",
                          "description": "Default response timeout for all actions that are part of the management group.",
                          "default": 100
                        },
                        "actions": {
                          "type": "array",
                          "description": "Array of actions that are part of the management group. Each action can have an individual configuration.",
                          "items": {
                            "type": "object",
                            "description": "Defines the action properties.",
                            "properties": {
                              "name": {
                                "type": "string",
                                "description": "Name of the action."
                              },
                              "actionConfiguration": {
                                "type": "string",
                                "description": "Stringified JSON that contains connector-specific configuration for the action."
                              },
                              "targetUri": {
                                "type": "string",
                                "description": "The target URI on which a client can invoke the specific action."
                              },
                              "typeRef": {
                                "type": "string",
                                "description": "URI or type definition ID."
                              },
                              "topic": {
                                "type": "string",
                                "description": "The MQTT topic path on which a client will receive the request for the action."
                              },
                              "actionType": {
                                "type": "string",
                                "description": "The type of the action.",
                                "default": "Call",
                                "enum": [
                                  "Call",
                                  "Read",
                                  "Write"
                                ],
                                "x-ms-enum": {
                                  "name": "NamespaceDiscoveredManagementActionType",
                                  "modelAsString": true,
                                  "values": [
                                    {
                                      "name": "Call",
                                      "value": "Call",
                                      "description": "Call action type."
                                    },
                                    {
                                      "name": "Read",
                                      "value": "Read",
                                      "description": "Read action type."
                                    },
                                    {
                                      "name": "Write",
                                      "value": "Write",
                                      "description": "Write action type."
                                    }
                                  ]
                                }
                              },
                              "timeoutInSeconds": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Response timeout for the action."
                              },
                              "lastUpdatedOn": {
                                "type": "string",
                                "format": "date-time",
                                "description": "Timestamp (in UTC) indicating when the management action was added or modified."
                              }
                            },
                            "required": [
                              "name",
                              "targetUri"
                            ]
                          },
                          "x-ms-identifiers": []
                        },
                        "lastUpdatedOn": {
                          "type": "string",
                          "format": "date-time",
                          "description": "Timestamp (in UTC) indicating when the management group was added or modified."
                        }
                      },
                      "required": [
                        "name"
                      ]
                    },
                    "x-ms-identifiers": []
                  },
                  "provisioningState": {
                    "description": "Provisioning state of the resource.",
                    "readOnly": true,
                    "type": "string",
                    "enum": [
                      "Succeeded",
                      "Failed",
                      "Canceled",
                      "Accepted",
                      "Deleting"
                    ],
                    "x-ms-enum": {
                      "name": "ProvisioningState",
                      "modelAsString": true,
                      "values": [
                        {
                          "name": "Succeeded",
                          "value": "Succeeded",
                          "description": "Resource has been created."
                        },
                        {
                          "name": "Failed",
                          "value": "Failed",
                          "description": "Resource creation failed."
                        },
                        {
                          "name": "Canceled",
                          "value": "Canceled",
                          "description": "Resource creation was canceled."
                        },
                        {
                          "name": "Accepted",
                          "value": "Accepted",
                          "description": "Resource has been accepted by the server."
                        },
                        {
                          "name": "Deleting",
                          "value": "Deleting",
                          "description": "Resource is deleting."
                        }
                      ]
                    }
                  }
                },
                "required": [
                  "deviceRef",
                  "discoveryId",
                  "version"
                ]
              },
              "extendedLocation": {
                "description": "The extended location.",
                "x-ms-mutability": [
                  "read",
                  "create"
                ],
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "description": "The extended location type."
                  },
                  "name": {
                    "type": "string",
                    "description": "The extended location name."
                  }
                },
                "required": [
                  "type",
                  "name"
                ]
              }
            },
            "required": [
              "extendedLocation"
            ]
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "NamespaceDiscoveredAssetProperties": {
      "type": "object",
      "description": "Defines the discovered asset properties.",
      "properties": {
        "deviceRef": {
          "description": "Reference to the device that provides data for this asset. Must provide device name & endpoint on the device to use.",
          "type": "object",
          "properties": {
            "deviceName": {
              "type": "string",
              "description": "Name of the device resource"
            },
            "endpointName": {
              "type": "string",
              "description": "The name of endpoint to use"
            }
          },
          "required": [
            "deviceName",
            "endpointName"
          ]
        },
        "displayName": {
          "type": "string",
          "description": "Human-readable display name."
        },
        "assetTypeRefs": {
          "type": "array",
          "description": "URIs or type definition IDs.",
          "items": {
            "type": "string"
          }
        },
        "description": {
          "type": "string",
          "description": "Human-readable description of the asset."
        },
        "discoveryId": {
          "type": "string",
          "description": "Identifier used to detect changes in the asset."
        },
        "externalAssetId": {
          "type": "string",
          "description": "Asset ID provided by the customer.",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "description": "An integer that is incremented each time the resource is modified."
        },
        "manufacturer": {
          "type": "string",
          "description": "Asset manufacturer."
        },
        "manufacturerUri": {
          "type": "string",
          "description": "Asset manufacturer URI."
        },
        "model": {
          "type": "string",
          "description": "Asset model."
        },
        "productCode": {
          "type": "string",
          "description": "Asset product code."
        },
        "hardwareRevision": {
          "type": "string",
          "description": "Asset hardware revision number."
        },
        "softwareRevision": {
          "type": "string",
          "description": "Asset software revision number."
        },
        "documentationUri": {
          "type": "string",
          "description": "Asset documentation reference."
        },
        "serialNumber": {
          "type": "string",
          "description": "Asset serial number."
        },
        "attributes": {
          "type": "object",
          "description": "A set of key-value pairs that contain custom attributes.",
          "additionalProperties": {}
        },
        "defaultDatasetsConfiguration": {
          "type": "string",
          "description": "Stringified JSON that contains connector-specific default configuration for all datasets. Each dataset can have its own configuration that overrides the default settings here."
        },
        "defaultEventsConfiguration": {
          "type": "string",
          "description": "Stringified JSON that contains connector-specific default configuration for all events. Each event can have its own configuration that overrides the default settings here."
        },
        "defaultStreamsConfiguration": {
          "type": "string",
          "description": "Stringified JSON that contains connector-specific default configuration for all streams. Each stream can have its own configuration that overrides the default settings here."
        },
        "defaultManagementGroupsConfiguration": {
          "type": "string",
          "description": "Stringified JSON that contains connector-specific default configuration for all management groups. Each management group can have its own configuration that overrides the default settings here."
        },
        "defaultDatasetsDestinations": {
          "type": "array",
          "description": "Default destinations for a dataset.",
          "items": {
            "type": "object",
            "description": "The type of the destination.",
            "properties": {
              "target": {
                "description": "Target destination.",
                "type": "string",
                "enum": [
                  "Mqtt",
                  "BrokerStateStore",
                  "Storage"
                ],
                "x-ms-enum": {
                  "name": "DatasetDestinationTarget",
                  "modelAsString": true,
                  "values": [
                    {
                      "name": "Mqtt",
                      "value": "Mqtt",
                      "description": "MQTT target."
                    },
                    {
                      "name": "BrokerStateStore",
                      "value": "BrokerStateStore",
                      "description": "Broker State Store target."
                    },
                    {
                      "name": "Storage",
                      "value": "Storage",
                      "description": "Storage target."
                    }
                  ]
                }
              }
            },
            "discriminator": "target",
            "required": [
              "target"
            ]
          },
          "x-ms-identifiers": []
        },
        "defaultEventsDestinations": {
          "type": "array",
          "description": "Default destinations for an event.",
          "items": {
            "type": "object",
            "description": "The type of the destination.",
            "properties": {
              "target": {
                "description": "Target destination.",
                "type": "string",
                "enum": [
                  "Mqtt",
                  "Storage"
                ],
                "x-ms-enum": {
                  "name": "EventDestinationTarget",
                  "modelAsString": true,
                  "values": [
                    {
                      "name": "Mqtt",
                      "value": "Mqtt",
                      "description": "MQTT target."
                    },
                    {
                      "name": "Storage",
                      "value": "Storage",
                      "description": "Storage target."
                    }
                  ]
                }
              }
            },
            "discriminator": "target",
            "required": [
              "target"
            ]
          },
          "x-ms-identifiers": []
        },
        "defaultStreamsDestinations": {
          "type": "array",
          "description": "Default destinations for a stream.",
          "items": {
            "type": "object",
            "description": "The type of the destination.",
            "properties": {
              "target": {
                "description": "Target destination.",
                "type": "string",
                "enum": [
                  "Mqtt",
                  "Storage"
                ],
                "x-ms-enum": {
                  "name": "StreamDestinationTarget",
                  "modelAsString": true,
                  "values": [
                    {
                      "name": "Mqtt",
                      "value": "Mqtt",
                      "description": "MQTT target."
                    },
                    {
                      "name": "Storage",
                      "value": "Storage",
                      "description": "Storage target."
                    }
                  ]
                }
              }
            },
            "discriminator": "target",
            "required": [
              "target"
            ]
          },
          "x-ms-identifiers": []
        },
        "datasets": {
          "type": "array",
          "description": "Array of datasets that are part of the asset. Each dataset spec describes the data points that make up the set.",
          "items": {
            "type": "object",
            "description": "Defines the dataset properties.",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the dataset."
              },
              "dataSource": {
                "type": "string",
                "description": "Reference to a data source for a given dataset."
              },
              "typeRef": {
                "type": "string",
                "description": "URI or type definition ID."
              },
              "datasetConfiguration": {
                "type": "string",
                "description": "Stringified JSON that contains connector-specific properties that describes configuration for the specific dataset."
              },
              "destinations": {
                "type": "array",
                "description": "Destinations for a dataset.",
                "items": {
                  "type": "object",
                  "description": "The type of the destination.",
                  "properties": {
                    "target": {
                      "description": "Target destination.",
                      "type": "string",
                      "enum": [
                        "Mqtt",
                        "BrokerStateStore",
                        "Storage"
                      ],
                      "x-ms-enum": {
                        "name": "DatasetDestinationTarget",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Mqtt",
                            "value": "Mqtt",
                            "description": "MQTT target."
                          },
                          {
                            "name": "BrokerStateStore",
                            "value": "BrokerStateStore",
                            "description": "Broker State Store target."
                          },
                          {
                            "name": "Storage",
                            "value": "Storage",
                            "description": "Storage target."
                          }
                        ]
                      }
                    }
                  },
                  "discriminator": "target",
                  "required": [
                    "target"
                  ]
                },
                "x-ms-identifiers": []
              },
              "dataPoints": {
                "type": "array",
                "description": "Array of data points that are part of the dataset. Each data point can have per-data point configuration.",
                "items": {
                  "type": "object",
                  "description": "Defines the discovered dataset data point properties.",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The name of the data point."
                    },
                    "dataSource": {
                      "type": "string",
                      "description": "The address of the source of the data in the asset (e.g. URL) so that a client can access the data source on the asset."
                    },
                    "dataPointConfiguration": {
                      "type": "string",
                      "description": "Stringified JSON that contains connector-specific configuration for the data point. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize."
                    },
                    "lastUpdatedOn": {
                      "type": "string",
                      "format": "date-time",
                      "description": "UTC timestamp indicating when the data point was added or modified."
                    },
                    "typeRef": {
                      "type": "string",
                      "description": "URI or type definition ID."
                    }
                  },
                  "required": [
                    "name",
                    "dataSource"
                  ]
                },
                "x-ms-identifiers": []
              },
              "lastUpdatedOn": {
                "type": "string",
                "format": "date-time",
                "description": "Timestamp (in UTC) indicating when the dataset was added or modified."
              }
            },
            "required": [
              "name"
            ]
          },
          "x-ms-identifiers": []
        },
        "eventGroups": {
          "type": "array",
          "description": "Array of event groups that are part of the asset. Each event group can have per-event group configuration.",
          "items": {
            "type": "object",
            "description": "Defines the discovered event group properties.",
            "properties": {
              "name": {
                "type": "string",
                "description": "The name of the event group."
              },
              "dataSource": {
                "type": "string",
                "description": "The address of the notifier of the event group in the asset (e.g. URL) so that a client can access the event group on the asset."
              },
              "eventGroupConfiguration": {
                "type": "string",
                "description": "Stringified JSON that contains connector-specific configuration for the event group. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize."
              },
              "defaultDestinations": {
                "type": "array",
                "description": "Destinations for events. Default destinations when destinations is not defined at the event level.",
                "items": {
                  "type": "object",
                  "description": "The type of the destination.",
                  "properties": {
                    "target": {
                      "description": "Target destination.",
                      "type": "string",
                      "enum": [
                        "Mqtt",
                        "Storage"
                      ],
                      "x-ms-enum": {
                        "name": "EventDestinationTarget",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Mqtt",
                            "value": "Mqtt",
                            "description": "MQTT target."
                          },
                          {
                            "name": "Storage",
                            "value": "Storage",
                            "description": "Storage target."
                          }
                        ]
                      }
                    }
                  },
                  "discriminator": "target",
                  "required": [
                    "target"
                  ]
                },
                "x-ms-identifiers": []
              },
              "typeRef": {
                "type": "string",
                "description": "URI or type definition ID."
              },
              "events": {
                "type": "array",
                "description": "Array of events that are part of the event group.",
                "items": {
                  "type": "object",
                  "description": "Defines the event properties.",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The name of the event."
                    },
                    "dataSource": {
                      "type": "string",
                      "description": "Reference to a data source for a given event."
                    },
                    "eventConfiguration": {
                      "type": "string",
                      "description": "Stringified JSON that contains connector-specific configuration for the event. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize."
                    },
                    "destinations": {
                      "type": "array",
                      "description": "Destinations for an event.",
                      "items": {
                        "type": "object",
                        "description": "The type of the destination.",
                        "properties": {
                          "target": {
                            "description": "Target destination.",
                            "type": "string",
                            "enum": [
                              "Mqtt",
                              "Storage"
                            ],
                            "x-ms-enum": {
                              "name": "EventDestinationTarget",
                              "modelAsString": true,
                              "values": [
                                {
                                  "name": "Mqtt",
                                  "value": "Mqtt",
                                  "description": "MQTT target."
                                },
                                {
                                  "name": "Storage",
                                  "value": "Storage",
                                  "description": "Storage target."
                                }
                              ]
                            }
                          }
                        },
                        "discriminator": "target",
                        "required": [
                          "target"
                        ]
                      },
                      "x-ms-identifiers": []
                    },
                    "typeRef": {
                      "type": "string",
                      "description": "URI or type definition ID."
                    },
                    "lastUpdatedOn": {
                      "type": "string",
                      "format": "date-time",
                      "description": "UTC timestamp indicating when the event was added or modified."
                    }
                  },
                  "required": [
                    "name"
                  ]
                },
                "x-ms-identifiers": []
              }
            },
            "required": [
              "name"
            ]
          },
          "x-ms-identifiers": []
        },
        "streams": {
          "type": "array",
          "description": "Array of streams that are part of the asset. Each stream can have a per-stream configuration.",
          "items": {
            "type": "object",
            "description": "Defines the stream properties.",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the stream definition."
              },
              "streamConfiguration": {
                "type": "string",
                "description": "Stringified JSON that contains connector-specific configuration for the specific stream."
              },
              "typeRef": {
                "type": "string",
                "description": "URI or type definition ID."
              },
              "destinations": {
                "type": "array",
                "description": "Destinations for a stream.",
                "items": {
                  "type": "object",
                  "description": "The type of the destination.",
                  "properties": {
                    "target": {
                      "description": "Target destination.",
                      "type": "string",
                      "enum": [
                        "Mqtt",
                        "Storage"
                      ],
                      "x-ms-enum": {
                        "name": "StreamDestinationTarget",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Mqtt",
                            "value": "Mqtt",
                            "description": "MQTT target."
                          },
                          {
                            "name": "Storage",
                            "value": "Storage",
                            "description": "Storage target."
                          }
                        ]
                      }
                    }
                  },
                  "discriminator": "target",
                  "required": [
                    "target"
                  ]
                },
                "x-ms-identifiers": []
              },
              "lastUpdatedOn": {
                "type": "string",
                "format": "date-time",
                "description": "Timestamp (in UTC) indicating when the stream was added or modified."
              }
            },
            "required": [
              "name"
            ]
          },
          "x-ms-identifiers": []
        },
        "managementGroups": {
          "type": "array",
          "description": "Array of management groups that are part of the asset. Each management group can have a per-group configuration.",
          "items": {
            "type": "object",
            "description": "Defines the management group properties.",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the management group."
              },
              "managementGroupConfiguration": {
                "type": "string",
                "description": "Stringified JSON that contains connector-specific configuration for the management group."
              },
              "typeRef": {
                "type": "string",
                "description": "URI or type definition ID."
              },
              "dataSource": {
                "type": "string",
                "description": "Reference to a data source for a given management group."
              },
              "defaultTopic": {
                "type": "string",
                "description": "Default MQTT topic path on which a client will receive the request for all actions that are part of the management group."
              },
              "defaultTimeoutInSeconds": {
                "type": "integer",
                "format": "int32",
                "description": "Default response timeout for all actions that are part of the management group.",
                "default": 100
              },
              "actions": {
                "type": "array",
                "description": "Array of actions that are part of the management group. Each action can have an individual configuration.",
                "items": {
                  "type": "object",
                  "description": "Defines the action properties.",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Name of the action."
                    },
                    "actionConfiguration": {
                      "type": "string",
                      "description": "Stringified JSON that contains connector-specific configuration for the action."
                    },
                    "targetUri": {
                      "type": "string",
                      "description": "The target URI on which a client can invoke the specific action."
                    },
                    "typeRef": {
                      "type": "string",
                      "description": "URI or type definition ID."
                    },
                    "topic": {
                      "type": "string",
                      "description": "The MQTT topic path on which a client will receive the request for the action."
                    },
                    "actionType": {
                      "type": "string",
                      "description": "The type of the action.",
                      "default": "Call",
                      "enum": [
                        "Call",
                        "Read",
                        "Write"
                      ],
                      "x-ms-enum": {
                        "name": "NamespaceDiscoveredManagementActionType",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Call",
                            "value": "Call",
                            "description": "Call action type."
                          },
                          {
                            "name": "Read",
                            "value": "Read",
                            "description": "Read action type."
                          },
                          {
                            "name": "Write",
                            "value": "Write",
                            "description": "Write action type."
                          }
                        ]
                      }
                    },
                    "timeoutInSeconds": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Response timeout for the action."
                    },
                    "lastUpdatedOn": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Timestamp (in UTC) indicating when the management action was added or modified."
                    }
                  },
                  "required": [
                    "name",
                    "targetUri"
                  ]
                },
                "x-ms-identifiers": []
              },
              "lastUpdatedOn": {
                "type": "string",
                "format": "date-time",
                "description": "Timestamp (in UTC) indicating when the management group was added or modified."
              }
            },
            "required": [
              "name"
            ]
          },
          "x-ms-identifiers": []
        },
        "provisioningState": {
          "description": "Provisioning state of the resource.",
          "readOnly": true,
          "type": "string",
          "enum": [
            "Succeeded",
            "Failed",
            "Canceled",
            "Accepted",
            "Deleting"
          ],
          "x-ms-enum": {
            "name": "ProvisioningState",
            "modelAsString": true,
            "values": [
              {
                "name": "Succeeded",
                "value": "Succeeded",
                "description": "Resource has been created."
              },
              {
                "name": "Failed",
                "value": "Failed",
                "description": "Resource creation failed."
              },
              {
                "name": "Canceled",
                "value": "Canceled",
                "description": "Resource creation was canceled."
              },
              {
                "name": "Accepted",
                "value": "Accepted",
                "description": "Resource has been accepted by the server."
              },
              {
                "name": "Deleting",
                "value": "Deleting",
                "description": "Resource is deleting."
              }
            ]
          }
        }
      },
      "required": [
        "deviceRef",
        "discoveryId",
        "version"
      ]
    },
    "NamespaceDiscoveredAssetUpdate": {
      "type": "object",
      "description": "The type used for update operations of the NamespaceDiscoveredAsset.",
      "properties": {
        "tags": {
          "type": "object",
          "description": "Resource tags.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "properties": {
          "description": "The resource-specific properties for this resource.",
          "x-ms-client-flatten": true,
          "type": "object",
          "properties": {
            "deviceRef": {
              "description": "Reference to the device that provides data for this asset. Must provide device name & endpoint on the device to use.",
              "type": "object",
              "properties": {
                "deviceName": {
                  "type": "string",
                  "description": "Name of the device resource"
                },
                "endpointName": {
                  "type": "string",
                  "description": "The name of endpoint to use"
                }
              }
            },
            "displayName": {
              "type": "string",
              "description": "Human-readable display name."
            },
            "assetTypeRefs": {
              "type": "array",
              "description": "URIs or type definition IDs.",
              "items": {
                "type": "string"
              }
            },
            "description": {
              "type": "string",
              "description": "Human-readable description of the asset."
            },
            "discoveryId": {
              "type": "string",
              "description": "Identifier used to detect changes in the asset."
            },
            "version": {
              "type": "integer",
              "format": "int64",
              "description": "An integer that is incremented each time the resource is modified."
            },
            "manufacturer": {
              "type": "string",
              "description": "Asset manufacturer."
            },
            "manufacturerUri": {
              "type": "string",
              "description": "Asset manufacturer URI."
            },
            "model": {
              "type": "string",
              "description": "Asset model."
            },
            "productCode": {
              "type": "string",
              "description": "Asset product code."
            },
            "hardwareRevision": {
              "type": "string",
              "description": "Asset hardware revision number."
            },
            "softwareRevision": {
              "type": "string",
              "description": "Asset software revision number."
            },
            "documentationUri": {
              "type": "string",
              "description": "Asset documentation reference."
            },
            "serialNumber": {
              "type": "string",
              "description": "Asset serial number."
            },
            "attributes": {
              "type": "object",
              "description": "A set of key-value pairs that contain custom attributes.",
              "additionalProperties": {}
            },
            "defaultDatasetsConfiguration": {
              "type": "string",
              "description": "Stringified JSON that contains connector-specific default configuration for all datasets. Each dataset can have its own configuration that overrides the default settings here."
            },
            "defaultEventsConfiguration": {
              "type": "string",
              "description": "Stringified JSON that contains connector-specific default configuration for all events. Each event can have its own configuration that overrides the default settings here."
            },
            "defaultStreamsConfiguration": {
              "type": "string",
              "description": "Stringified JSON that contains connector-specific default configuration for all streams. Each stream can have its own configuration that overrides the default settings here."
            },
            "defaultManagementGroupsConfiguration": {
              "type": "string",
              "description": "Stringified JSON that contains connector-specific default configuration for all management groups. Each management group can have its own configuration that overrides the default settings here."
            },
            "defaultDatasetsDestinations": {
              "type": "array",
              "description": "Default destinations for a dataset.",
              "items": {
                "type": "object",
                "description": "The type of the destination.",
                "properties": {
                  "target": {
                    "description": "Target destination.",
                    "type": "string",
                    "enum": [
                      "Mqtt",
                      "BrokerStateStore",
                      "Storage"
                    ],
                    "x-ms-enum": {
                      "name": "DatasetDestinationTarget",
                      "modelAsString": true,
                      "values": [
                        {
                          "name": "Mqtt",
                          "value": "Mqtt",
                          "description": "MQTT target."
                        },
                        {
                          "name": "BrokerStateStore",
                          "value": "BrokerStateStore",
                          "description": "Broker State Store target."
                        },
                        {
                          "name": "Storage",
                          "value": "Storage",
                          "description": "Storage target."
                        }
                      ]
                    }
                  }
                },
                "discriminator": "target",
                "required": [
                  "target"
                ]
              },
              "x-ms-identifiers": []
            },
            "defaultEventsDestinations": {
              "type": "array",
              "description": "Default destinations for an event.",
              "items": {
                "type": "object",
                "description": "The type of the destination.",
                "properties": {
                  "target": {
                    "description": "Target destination.",
                    "type": "string",
                    "enum": [
                      "Mqtt",
                      "Storage"
                    ],
                    "x-ms-enum": {
                      "name": "EventDestinationTarget",
                      "modelAsString": true,
                      "values": [
                        {
                          "name": "Mqtt",
                          "value": "Mqtt",
                          "description": "MQTT target."
                        },
                        {
                          "name": "Storage",
                          "value": "Storage",
                          "description": "Storage target."
                        }
                      ]
                    }
                  }
                },
                "discriminator": "target",
                "required": [
                  "target"
                ]
              },
              "x-ms-identifiers": []
            },
            "defaultStreamsDestinations": {
              "type": "array",
              "description": "Default destinations for a stream.",
              "items": {
                "type": "object",
                "description": "The type of the destination.",
                "properties": {
                  "target": {
                    "description": "Target destination.",
                    "type": "string",
                    "enum": [
                      "Mqtt",
                      "Storage"
                    ],
                    "x-ms-enum": {
                      "name": "StreamDestinationTarget",
                      "modelAsString": true,
                      "values": [
                        {
                          "name": "Mqtt",
                          "value": "Mqtt",
                          "description": "MQTT target."
                        },
                        {
                          "name": "Storage",
                          "value": "Storage",
                          "description": "Storage target."
                        }
                      ]
                    }
                  }
                },
                "discriminator": "target",
                "required": [
                  "target"
                ]
              },
              "x-ms-identifiers": []
            },
            "datasets": {
              "type": "array",
              "description": "Array of datasets that are part of the asset. Each dataset spec describes the data points that make up the set.",
              "items": {
                "type": "object",
                "description": "Defines the dataset properties.",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of the dataset."
                  },
                  "dataSource": {
                    "type": "string",
                    "description": "Reference to a data source for a given dataset."
                  },
                  "typeRef": {
                    "type": "string",
                    "description": "URI or type definition ID."
                  },
                  "datasetConfiguration": {
                    "type": "string",
                    "description": "Stringified JSON that contains connector-specific properties that describes configuration for the specific dataset."
                  },
                  "destinations": {
                    "type": "array",
                    "description": "Destinations for a dataset.",
                    "items": {
                      "type": "object",
                      "description": "The type of the destination.",
                      "properties": {
                        "target": {
                          "description": "Target destination.",
                          "type": "string",
                          "enum": [
                            "Mqtt",
                            "BrokerStateStore",
                            "Storage"
                          ],
                          "x-ms-enum": {
                            "name": "DatasetDestinationTarget",
                            "modelAsString": true,
                            "values": [
                              {
                                "name": "Mqtt",
                                "value": "Mqtt",
                                "description": "MQTT target."
                              },
                              {
                                "name": "BrokerStateStore",
                                "value": "BrokerStateStore",
                                "description": "Broker State Store target."
                              },
                              {
                                "name": "Storage",
                                "value": "Storage",
                                "description": "Storage target."
                              }
                            ]
                          }
                        }
                      },
                      "discriminator": "target",
                      "required": [
                        "target"
                      ]
                    },
                    "x-ms-identifiers": []
                  },
                  "dataPoints": {
                    "type": "array",
                    "description": "Array of data points that are part of the dataset. Each data point can have per-data point configuration.",
                    "items": {
                      "type": "object",
                      "description": "Defines the discovered dataset data point properties.",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "The name of the data point."
                        },
                        "dataSource": {
                          "type": "string",
                          "description": "The address of the source of the data in the asset (e.g. URL) so that a client can access the data source on the asset."
                        },
                        "dataPointConfiguration": {
                          "type": "string",
                          "description": "Stringified JSON that contains connector-specific configuration for the data point. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize."
                        },
                        "lastUpdatedOn": {
                          "type": "string",
                          "format": "date-time",
                          "description": "UTC timestamp indicating when the data point was added or modified."
                        },
                        "typeRef": {
                          "type": "string",
                          "description": "URI or type definition ID."
                        }
                      },
                      "required": [
                        "name",
                        "dataSource"
                      ]
                    },
                    "x-ms-identifiers": []
                  },
                  "lastUpdatedOn": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Timestamp (in UTC) indicating when the dataset was added or modified."
                  }
                },
                "required": [
                  "name"
                ]
              },
              "x-ms-identifiers": []
            },
            "eventGroups": {
              "type": "array",
              "description": "Array of event groups that are part of the asset. Each event group can have per-event group configuration.",
              "items": {
                "type": "object",
                "description": "Defines the discovered event group properties.",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the event group."
                  },
                  "dataSource": {
                    "type": "string",
                    "description": "The address of the notifier of the event group in the asset (e.g. URL) so that a client can access the event group on the asset."
                  },
                  "eventGroupConfiguration": {
                    "type": "string",
                    "description": "Stringified JSON that contains connector-specific configuration for the event group. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize."
                  },
                  "defaultDestinations": {
                    "type": "array",
                    "description": "Destinations for events. Default destinations when destinations is not defined at the event level.",
                    "items": {
                      "type": "object",
                      "description": "The type of the destination.",
                      "properties": {
                        "target": {
                          "description": "Target destination.",
                          "type": "string",
                          "enum": [
                            "Mqtt",
                            "Storage"
                          ],
                          "x-ms-enum": {
                            "name": "EventDestinationTarget",
                            "modelAsString": true,
                            "values": [
                              {
                                "name": "Mqtt",
                                "value": "Mqtt",
                                "description": "MQTT target."
                              },
                              {
                                "name": "Storage",
                                "value": "Storage",
                                "description": "Storage target."
                              }
                            ]
                          }
                        }
                      },
                      "discriminator": "target",
                      "required": [
                        "target"
                      ]
                    },
                    "x-ms-identifiers": []
                  },
                  "typeRef": {
                    "type": "string",
                    "description": "URI or type definition ID."
                  },
                  "events": {
                    "type": "array",
                    "description": "Array of events that are part of the event group.",
                    "items": {
                      "type": "object",
                      "description": "Defines the event properties.",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "The name of the event."
                        },
                        "dataSource": {
                          "type": "string",
                          "description": "Reference to a data source for a given event."
                        },
                        "eventConfiguration": {
                          "type": "string",
                          "description": "Stringified JSON that contains connector-specific configuration for the event. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize."
                        },
                        "destinations": {
                          "type": "array",
                          "description": "Destinations for an event.",
                          "items": {
                            "type": "object",
                            "description": "The type of the destination.",
                            "properties": {
                              "target": {
                                "description": "Target destination.",
                                "type": "string",
                                "enum": [
                                  "Mqtt",
                                  "Storage"
                                ],
                                "x-ms-enum": {
                                  "name": "EventDestinationTarget",
                                  "modelAsString": true,
                                  "values": [
                                    {
                                      "name": "Mqtt",
                                      "value": "Mqtt",
                                      "description": "MQTT target."
                                    },
                                    {
                                      "name": "Storage",
                                      "value": "Storage",
                                      "description": "Storage target."
                                    }
                                  ]
                                }
                              }
                            },
                            "discriminator": "target",
                            "required": [
                              "target"
                            ]
                          },
                          "x-ms-identifiers": []
                        },
                        "typeRef": {
                          "type": "string",
                          "description": "URI or type definition ID."
                        },
                        "lastUpdatedOn": {
                          "type": "string",
                          "format": "date-time",
                          "description": "UTC timestamp indicating when the event was added or modified."
                        }
                      },
                      "required": [
                        "name"
                      ]
                    },
                    "x-ms-identifiers": []
                  }
                },
                "required": [
                  "name"
                ]
              },
              "x-ms-identifiers": []
            },
            "streams": {
              "type": "array",
              "description": "Array of streams that are part of the asset. Each stream can have a per-stream configuration.",
              "items": {
                "type": "object",
                "description": "Defines the stream properties.",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of the stream definition."
                  },
                  "streamConfiguration": {
                    "type": "string",
                    "description": "Stringified JSON that contains connector-specific configuration for the specific stream."
                  },
                  "typeRef": {
                    "type": "string",
                    "description": "URI or type definition ID."
                  },
                  "destinations": {
                    "type": "array",
                    "description": "Destinations for a stream.",
                    "items": {
                      "type": "object",
                      "description": "The type of the destination.",
                      "properties": {
                        "target": {
                          "description": "Target destination.",
                          "type": "string",
                          "enum": [
                            "Mqtt",
                            "Storage"
                          ],
                          "x-ms-enum": {
                            "name": "StreamDestinationTarget",
                            "modelAsString": true,
                            "values": [
                              {
                                "name": "Mqtt",
                                "value": "Mqtt",
                                "description": "MQTT target."
                              },
                              {
                                "name": "Storage",
                                "value": "Storage",
                                "description": "Storage target."
                              }
                            ]
                          }
                        }
                      },
                      "discriminator": "target",
                      "required": [
                        "target"
                      ]
                    },
                    "x-ms-identifiers": []
                  },
                  "lastUpdatedOn": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Timestamp (in UTC) indicating when the stream was added or modified."
                  }
                },
                "required": [
                  "name"
                ]
              },
              "x-ms-identifiers": []
            },
            "managementGroups": {
              "type": "array",
              "description": "Array of management groups that are part of the asset. Each management group can have a per-group configuration.",
              "items": {
                "type": "object",
                "description": "Defines the management group properties.",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of the management group."
                  },
                  "managementGroupConfiguration": {
                    "type": "string",
                    "description": "Stringified JSON that contains connector-specific configuration for the management group."
                  },
                  "typeRef": {
                    "type": "string",
                    "description": "URI or type definition ID."
                  },
                  "dataSource": {
                    "type": "string",
                    "description": "Reference to a data source for a given management group."
                  },
                  "defaultTopic": {
                    "type": "string",
                    "description": "Default MQTT topic path on which a client will receive the request for all actions that are part of the management group."
                  },
                  "defaultTimeoutInSeconds": {
                    "type": "integer",
                    "format": "int32",
                    "description": "Default response timeout for all actions that are part of the management group.",
                    "default": 100
                  },
                  "actions": {
                    "type": "array",
                    "description": "Array of actions that are part of the management group. Each action can have an individual configuration.",
                    "items": {
                      "type": "object",
                      "description": "Defines the action properties.",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "Name of the action."
                        },
                        "actionConfiguration": {
                          "type": "string",
                          "description": "Stringified JSON that contains connector-specific configuration for the action."
                        },
                        "targetUri": {
                          "type": "string",
                          "description": "The target URI on which a client can invoke the specific action."
                        },
                        "typeRef": {
                          "type": "string",
                          "description": "URI or type definition ID."
                        },
                        "topic": {
                          "type": "string",
                          "description": "The MQTT topic path on which a client will receive the request for the action."
                        },
                        "actionType": {
                          "type": "string",
                          "description": "The type of the action.",
                          "default": "Call",
                          "enum": [
                            "Call",
                            "Read",
                            "Write"
                          ],
                          "x-ms-enum": {
                            "name": "NamespaceDiscoveredManagementActionType",
                            "modelAsString": true,
                            "values": [
                              {
                                "name": "Call",
                                "value": "Call",
                                "description": "Call action type."
                              },
                              {
                                "name": "Read",
                                "value": "Read",
                                "description": "Read action type."
                              },
                              {
                                "name": "Write",
                                "value": "Write",
                                "description": "Write action type."
                              }
                            ]
                          }
                        },
                        "timeoutInSeconds": {
                          "type": "integer",
                          "format": "int32",
                          "description": "Response timeout for the action."
                        },
                        "lastUpdatedOn": {
                          "type": "string",
                          "format": "date-time",
                          "description": "Timestamp (in UTC) indicating when the management action was added or modified."
                        }
                      },
                      "required": [
                        "name",
                        "targetUri"
                      ]
                    },
                    "x-ms-identifiers": []
                  },
                  "lastUpdatedOn": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Timestamp (in UTC) indicating when the management group was added or modified."
                  }
                },
                "required": [
                  "name"
                ]
              },
              "x-ms-identifiers": []
            }
          }
        }
      }
    },
    "NamespaceDiscoveredAssetUpdateProperties": {
      "type": "object",
      "description": "The updatable properties of the NamespaceDiscoveredAsset.",
      "properties": {
        "deviceRef": {
          "description": "Reference to the device that provides data for this asset. Must provide device name & endpoint on the device to use.",
          "type": "object",
          "properties": {
            "deviceName": {
              "type": "string",
              "description": "Name of the device resource"
            },
            "endpointName": {
              "type": "string",
              "description": "The name of endpoint to use"
            }
          }
        },
        "displayName": {
          "type": "string",
          "description": "Human-readable display name."
        },
        "assetTypeRefs": {
          "type": "array",
          "description": "URIs or type definition IDs.",
          "items": {
            "type": "string"
          }
        },
        "description": {
          "type": "string",
          "description": "Human-readable description of the asset."
        },
        "discoveryId": {
          "type": "string",
          "description": "Identifier used to detect changes in the asset."
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "description": "An integer that is incremented each time the resource is modified."
        },
        "manufacturer": {
          "type": "string",
          "description": "Asset manufacturer."
        },
        "manufacturerUri": {
          "type": "string",
          "description": "Asset manufacturer URI."
        },
        "model": {
          "type": "string",
          "description": "Asset model."
        },
        "productCode": {
          "type": "string",
          "description": "Asset product code."
        },
        "hardwareRevision": {
          "type": "string",
          "description": "Asset hardware revision number."
        },
        "softwareRevision": {
          "type": "string",
          "description": "Asset software revision number."
        },
        "documentationUri": {
          "type": "string",
          "description": "Asset documentation reference."
        },
        "serialNumber": {
          "type": "string",
          "description": "Asset serial number."
        },
        "attributes": {
          "type": "object",
          "description": "A set of key-value pairs that contain custom attributes.",
          "additionalProperties": {}
        },
        "defaultDatasetsConfiguration": {
          "type": "string",
          "description": "Stringified JSON that contains connector-specific default configuration for all datasets. Each dataset can have its own configuration that overrides the default settings here."
        },
        "defaultEventsConfiguration": {
          "type": "string",
          "description": "Stringified JSON that contains connector-specific default configuration for all events. Each event can have its own configuration that overrides the default settings here."
        },
        "defaultStreamsConfiguration": {
          "type": "string",
          "description": "Stringified JSON that contains connector-specific default configuration for all streams. Each stream can have its own configuration that overrides the default settings here."
        },
        "defaultManagementGroupsConfiguration": {
          "type": "string",
          "description": "Stringified JSON that contains connector-specific default configuration for all management groups. Each management group can have its own configuration that overrides the default settings here."
        },
        "defaultDatasetsDestinations": {
          "type": "array",
          "description": "Default destinations for a dataset.",
          "items": {
            "type": "object",
            "description": "The type of the destination.",
            "properties": {
              "target": {
                "description": "Target destination.",
                "type": "string",
                "enum": [
                  "Mqtt",
                  "BrokerStateStore",
                  "Storage"
                ],
                "x-ms-enum": {
                  "name": "DatasetDestinationTarget",
                  "modelAsString": true,
                  "values": [
                    {
                      "name": "Mqtt",
                      "value": "Mqtt",
                      "description": "MQTT target."
                    },
                    {
                      "name": "BrokerStateStore",
                      "value": "BrokerStateStore",
                      "description": "Broker State Store target."
                    },
                    {
                      "name": "Storage",
                      "value": "Storage",
                      "description": "Storage target."
                    }
                  ]
                }
              }
            },
            "discriminator": "target",
            "required": [
              "target"
            ]
          },
          "x-ms-identifiers": []
        },
        "defaultEventsDestinations": {
          "type": "array",
          "description": "Default destinations for an event.",
          "items": {
            "type": "object",
            "description": "The type of the destination.",
            "properties": {
              "target": {
                "description": "Target destination.",
                "type": "string",
                "enum": [
                  "Mqtt",
                  "Storage"
                ],
                "x-ms-enum": {
                  "name": "EventDestinationTarget",
                  "modelAsString": true,
                  "values": [
                    {
                      "name": "Mqtt",
                      "value": "Mqtt",
                      "description": "MQTT target."
                    },
                    {
                      "name": "Storage",
                      "value": "Storage",
                      "description": "Storage target."
                    }
                  ]
                }
              }
            },
            "discriminator": "target",
            "required": [
              "target"
            ]
          },
          "x-ms-identifiers": []
        },
        "defaultStreamsDestinations": {
          "type": "array",
          "description": "Default destinations for a stream.",
          "items": {
            "type": "object",
            "description": "The type of the destination.",
            "properties": {
              "target": {
                "description": "Target destination.",
                "type": "string",
                "enum": [
                  "Mqtt",
                  "Storage"
                ],
                "x-ms-enum": {
                  "name": "StreamDestinationTarget",
                  "modelAsString": true,
                  "values": [
                    {
                      "name": "Mqtt",
                      "value": "Mqtt",
                      "description": "MQTT target."
                    },
                    {
                      "name": "Storage",
                      "value": "Storage",
                      "description": "Storage target."
                    }
                  ]
                }
              }
            },
            "discriminator": "target",
            "required": [
              "target"
            ]
          },
          "x-ms-identifiers": []
        },
        "datasets": {
          "type": "array",
          "description": "Array of datasets that are part of the asset. Each dataset spec describes the data points that make up the set.",
          "items": {
            "type": "object",
            "description": "Defines the dataset properties.",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the dataset."
              },
              "dataSource": {
                "type": "string",
                "description": "Reference to a data source for a given dataset."
              },
              "typeRef": {
                "type": "string",
                "description": "URI or type definition ID."
              },
              "datasetConfiguration": {
                "type": "string",
                "description": "Stringified JSON that contains connector-specific properties that describes configuration for the specific dataset."
              },
              "destinations": {
                "type": "array",
                "description": "Destinations for a dataset.",
                "items": {
                  "type": "object",
                  "description": "The type of the destination.",
                  "properties": {
                    "target": {
                      "description": "Target destination.",
                      "type": "string",
                      "enum": [
                        "Mqtt",
                        "BrokerStateStore",
                        "Storage"
                      ],
                      "x-ms-enum": {
                        "name": "DatasetDestinationTarget",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Mqtt",
                            "value": "Mqtt",
                            "description": "MQTT target."
                          },
                          {
                            "name": "BrokerStateStore",
                            "value": "BrokerStateStore",
                            "description": "Broker State Store target."
                          },
                          {
                            "name": "Storage",
                            "value": "Storage",
                            "description": "Storage target."
                          }
                        ]
                      }
                    }
                  },
                  "discriminator": "target",
                  "required": [
                    "target"
                  ]
                },
                "x-ms-identifiers": []
              },
              "dataPoints": {
                "type": "array",
                "description": "Array of data points that are part of the dataset. Each data point can have per-data point configuration.",
                "items": {
                  "type": "object",
                  "description": "Defines the discovered dataset data point properties.",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The name of the data point."
                    },
                    "dataSource": {
                      "type": "string",
                      "description": "The address of the source of the data in the asset (e.g. URL) so that a client can access the data source on the asset."
                    },
                    "dataPointConfiguration": {
                      "type": "string",
                      "description": "Stringified JSON that contains connector-specific configuration for the data point. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize."
                    },
                    "lastUpdatedOn": {
                      "type": "string",
                      "format": "date-time",
                      "description": "UTC timestamp indicating when the data point was added or modified."
                    },
                    "typeRef": {
                      "type": "string",
                      "description": "URI or type definition ID."
                    }
                  },
                  "required": [
                    "name",
                    "dataSource"
                  ]
                },
                "x-ms-identifiers": []
              },
              "lastUpdatedOn": {
                "type": "string",
                "format": "date-time",
                "description": "Timestamp (in UTC) indicating when the dataset was added or modified."
              }
            },
            "required": [
              "name"
            ]
          },
          "x-ms-identifiers": []
        },
        "eventGroups": {
          "type": "array",
          "description": "Array of event groups that are part of the asset. Each event group can have per-event group configuration.",
          "items": {
            "type": "object",
            "description": "Defines the discovered event group properties.",
            "properties": {
              "name": {
                "type": "string",
                "description": "The name of the event group."
              },
              "dataSource": {
                "type": "string",
                "description": "The address of the notifier of the event group in the asset (e.g. URL) so that a client can access the event group on the asset."
              },
              "eventGroupConfiguration": {
                "type": "string",
                "description": "Stringified JSON that contains connector-specific configuration for the event group. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize."
              },
              "defaultDestinations": {
                "type": "array",
                "description": "Destinations for events. Default destinations when destinations is not defined at the event level.",
                "items": {
                  "type": "object",
                  "description": "The type of the destination.",
                  "properties": {
                    "target": {
                      "description": "Target destination.",
                      "type": "string",
                      "enum": [
                        "Mqtt",
                        "Storage"
                      ],
                      "x-ms-enum": {
                        "name": "EventDestinationTarget",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Mqtt",
                            "value": "Mqtt",
                            "description": "MQTT target."
                          },
                          {
                            "name": "Storage",
                            "value": "Storage",
                            "description": "Storage target."
                          }
                        ]
                      }
                    }
                  },
                  "discriminator": "target",
                  "required": [
                    "target"
                  ]
                },
                "x-ms-identifiers": []
              },
              "typeRef": {
                "type": "string",
                "description": "URI or type definition ID."
              },
              "events": {
                "type": "array",
                "description": "Array of events that are part of the event group.",
                "items": {
                  "type": "object",
                  "description": "Defines the event properties.",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The name of the event."
                    },
                    "dataSource": {
                      "type": "string",
                      "description": "Reference to a data source for a given event."
                    },
                    "eventConfiguration": {
                      "type": "string",
                      "description": "Stringified JSON that contains connector-specific configuration for the event. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize."
                    },
                    "destinations": {
                      "type": "array",
                      "description": "Destinations for an event.",
                      "items": {
                        "type": "object",
                        "description": "The type of the destination.",
                        "properties": {
                          "target": {
                            "description": "Target destination.",
                            "type": "string",
                            "enum": [
                              "Mqtt",
                              "Storage"
                            ],
                            "x-ms-enum": {
                              "name": "EventDestinationTarget",
                              "modelAsString": true,
                              "values": [
                                {
                                  "name": "Mqtt",
                                  "value": "Mqtt",
                                  "description": "MQTT target."
                                },
                                {
                                  "name": "Storage",
                                  "value": "Storage",
                                  "description": "Storage target."
                                }
                              ]
                            }
                          }
                        },
                        "discriminator": "target",
                        "required": [
                          "target"
                        ]
                      },
                      "x-ms-identifiers": []
                    },
                    "typeRef": {
                      "type": "string",
                      "description": "URI or type definition ID."
                    },
                    "lastUpdatedOn": {
                      "type": "string",
                      "format": "date-time",
                      "description": "UTC timestamp indicating when the event was added or modified."
                    }
                  },
                  "required": [
                    "name"
                  ]
                },
                "x-ms-identifiers": []
              }
            },
            "required": [
              "name"
            ]
          },
          "x-ms-identifiers": []
        },
        "streams": {
          "type": "array",
          "description": "Array of streams that are part of the asset. Each stream can have a per-stream configuration.",
          "items": {
            "type": "object",
            "description": "Defines the stream properties.",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the stream definition."
              },
              "streamConfiguration": {
                "type": "string",
                "description": "Stringified JSON that contains connector-specific configuration for the specific stream."
              },
              "typeRef": {
                "type": "string",
                "description": "URI or type definition ID."
              },
              "destinations": {
                "type": "array",
                "description": "Destinations for a stream.",
                "items": {
                  "type": "object",
                  "description": "The type of the destination.",
                  "properties": {
                    "target": {
                      "description": "Target destination.",
                      "type": "string",
                      "enum": [
                        "Mqtt",
                        "Storage"
                      ],
                      "x-ms-enum": {
                        "name": "StreamDestinationTarget",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Mqtt",
                            "value": "Mqtt",
                            "description": "MQTT target."
                          },
                          {
                            "name": "Storage",
                            "value": "Storage",
                            "description": "Storage target."
                          }
                        ]
                      }
                    }
                  },
                  "discriminator": "target",
                  "required": [
                    "target"
                  ]
                },
                "x-ms-identifiers": []
              },
              "lastUpdatedOn": {
                "type": "string",
                "format": "date-time",
                "description": "Timestamp (in UTC) indicating when the stream was added or modified."
              }
            },
            "required": [
              "name"
            ]
          },
          "x-ms-identifiers": []
        },
        "managementGroups": {
          "type": "array",
          "description": "Array of management groups that are part of the asset. Each management group can have a per-group configuration.",
          "items": {
            "type": "object",
            "description": "Defines the management group properties.",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the management group."
              },
              "managementGroupConfiguration": {
                "type": "string",
                "description": "Stringified JSON that contains connector-specific configuration for the management group."
              },
              "typeRef": {
                "type": "string",
                "description": "URI or type definition ID."
              },
              "dataSource": {
                "type": "string",
                "description": "Reference to a data source for a given management group."
              },
              "defaultTopic": {
                "type": "string",
                "description": "Default MQTT topic path on which a client will receive the request for all actions that are part of the management group."
              },
              "defaultTimeoutInSeconds": {
                "type": "integer",
                "format": "int32",
                "description": "Default response timeout for all actions that are part of the management group.",
                "default": 100
              },
              "actions": {
                "type": "array",
                "description": "Array of actions that are part of the management group. Each action can have an individual configuration.",
                "items": {
                  "type": "object",
                  "description": "Defines the action properties.",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Name of the action."
                    },
                    "actionConfiguration": {
                      "type": "string",
                      "description": "Stringified JSON that contains connector-specific configuration for the action."
                    },
                    "targetUri": {
                      "type": "string",
                      "description": "The target URI on which a client can invoke the specific action."
                    },
                    "typeRef": {
                      "type": "string",
                      "description": "URI or type definition ID."
                    },
                    "topic": {
                      "type": "string",
                      "description": "The MQTT topic path on which a client will receive the request for the action."
                    },
                    "actionType": {
                      "type": "string",
                      "description": "The type of the action.",
                      "default": "Call",
                      "enum": [
                        "Call",
                        "Read",
                        "Write"
                      ],
                      "x-ms-enum": {
                        "name": "NamespaceDiscoveredManagementActionType",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Call",
                            "value": "Call",
                            "description": "Call action type."
                          },
                          {
                            "name": "Read",
                            "value": "Read",
                            "description": "Read action type."
                          },
                          {
                            "name": "Write",
                            "value": "Write",
                            "description": "Write action type."
                          }
                        ]
                      }
                    },
                    "timeoutInSeconds": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Response timeout for the action."
                    },
                    "lastUpdatedOn": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Timestamp (in UTC) indicating when the management action was added or modified."
                    }
                  },
                  "required": [
                    "name",
                    "targetUri"
                  ]
                },
                "x-ms-identifiers": []
              },
              "lastUpdatedOn": {
                "type": "string",
                "format": "date-time",
                "description": "Timestamp (in UTC) indicating when the management group was added or modified."
              }
            },
            "required": [
              "name"
            ]
          },
          "x-ms-identifiers": []
        }
      }
    },
    "NamespaceDiscoveredDataset": {
      "type": "object",
      "description": "Defines the dataset properties.",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the dataset."
        },
        "dataSource": {
          "type": "string",
          "description": "Reference to a data source for a given dataset."
        },
        "typeRef": {
          "type": "string",
          "description": "URI or type definition ID."
        },
        "datasetConfiguration": {
          "type": "string",
          "description": "Stringified JSON that contains connector-specific properties that describes configuration for the specific dataset."
        },
        "destinations": {
          "type": "array",
          "description": "Destinations for a dataset.",
          "items": {
            "type": "object",
            "description": "The type of the destination.",
            "properties": {
              "target": {
                "description": "Target destination.",
                "type": "string",
                "enum": [
                  "Mqtt",
                  "BrokerStateStore",
                  "Storage"
                ],
                "x-ms-enum": {
                  "name": "DatasetDestinationTarget",
                  "modelAsString": true,
                  "values": [
                    {
                      "name": "Mqtt",
                      "value": "Mqtt",
                      "description": "MQTT target."
                    },
                    {
                      "name": "BrokerStateStore",
                      "value": "BrokerStateStore",
                      "description": "Broker State Store target."
                    },
                    {
                      "name": "Storage",
                      "value": "Storage",
                      "description": "Storage target."
                    }
                  ]
                }
              }
            },
            "discriminator": "target",
            "required": [
              "target"
            ]
          },
          "x-ms-identifiers": []
        },
        "dataPoints": {
          "type": "array",
          "description": "Array of data points that are part of the dataset. Each data point can have per-data point configuration.",
          "items": {
            "type": "object",
            "description": "Defines the discovered dataset data point properties.",
            "properties": {
              "name": {
                "type": "string",
                "description": "The name of the data point."
              },
              "dataSource": {
                "type": "string",
                "description": "The address of the source of the data in the asset (e.g. URL) so that a client can access the data source on the asset."
              },
              "dataPointConfiguration": {
                "type": "string",
                "description": "Stringified JSON that contains connector-specific configuration for the data point. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize."
              },
              "lastUpdatedOn": {
                "type": "string",
                "format": "date-time",
                "description": "UTC timestamp indicating when the data point was added or modified."
              },
              "typeRef": {
                "type": "string",
                "description": "URI or type definition ID."
              }
            },
            "required": [
              "name",
              "dataSource"
            ]
          },
          "x-ms-identifiers": []
        },
        "lastUpdatedOn": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp (in UTC) indicating when the dataset was added or modified."
        }
      },
      "required": [
        "name"
      ]
    },
    "NamespaceDiscoveredDatasetDataPoint": {
      "type": "object",
      "description": "Defines the discovered dataset data point properties.",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the data point."
        },
        "dataSource": {
          "type": "string",
          "description": "The address of the source of the data in the asset (e.g. URL) so that a client can access the data source on the asset."
        },
        "dataPointConfiguration": {
          "type": "string",
          "description": "Stringified JSON that contains connector-specific configuration for the data point. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize."
        },
        "lastUpdatedOn": {
          "type": "string",
          "format": "date-time",
          "description": "UTC timestamp indicating when the data point was added or modified."
        },
        "typeRef": {
          "type": "string",
          "description": "URI or type definition ID."
        }
      },
      "required": [
        "name",
        "dataSource"
      ]
    },
    "NamespaceDiscoveredDevice": {
      "type": "object",
      "description": "Discovered device definition.",
      "properties": {
        "id": {
          "type": "string",
          "format": "arm-id",
          "description": "Fully qualified resource ID for the resource. E.g. \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}\"",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "The name of the resource",
          "readOnly": true
        },
        "type": {
          "type": "string",
          "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
          "readOnly": true
        },
        "systemData": {
          "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
          "readOnly": true,
          "type": "object",
          "properties": {
            "createdBy": {
              "type": "string",
              "description": "The identity that created the resource."
            },
            "createdByType": {
              "type": "string",
              "description": "The type of identity that created the resource.",
              "enum": [
                "User",
                "Application",
                "ManagedIdentity",
                "Key"
              ],
              "x-ms-enum": {
                "name": "createdByType",
                "modelAsString": true
              }
            },
            "createdAt": {
              "type": "string",
              "format": "date-time",
              "description": "The timestamp of resource creation (UTC)."
            },
            "lastModifiedBy": {
              "type": "string",
              "description": "The identity that last modified the resource."
            },
            "lastModifiedByType": {
              "type": "string",
              "description": "The type of identity that last modified the resource.",
              "enum": [
                "User",
                "Application",
                "ManagedIdentity",
                "Key"
              ],
              "x-ms-enum": {
                "name": "createdByType",
                "modelAsString": true
              }
            },
            "lastModifiedAt": {
              "type": "string",
              "format": "date-time",
              "description": "The timestamp of resource last modification (UTC)"
            }
          }
        },
        "tags": {
          "type": "object",
          "description": "Resource tags.",
          "additionalProperties": {
            "type": "string"
          },
          "x-ms-mutability": [
            "read",
            "create",
            "update"
          ]
        },
        "location": {
          "type": "string",
          "description": "The geo-location where the resource lives",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "properties": {
          "description": "The resource-specific properties for this resource.",
          "x-ms-client-flatten": true,
          "type": "object",
          "properties": {
            "externalDeviceId": {
              "type": "string",
              "description": "A device ID that represents the device in a system external to Azure. Unique within scope of an Azure tenant."
            },
            "endpoints": {
              "description": "Endpoints for discovered devices.",
              "type": "object",
              "properties": {
                "inbound": {
                  "type": "object",
                  "description": "Set of endpoints to connect to the device.",
                  "additionalProperties": {
                    "type": "object",
                    "description": "An endpoint to connect to the device.",
                    "properties": {
                      "endpointType": {
                        "type": "string",
                        "description": "Type of connection endpoint."
                      },
                      "address": {
                        "type": "string",
                        "description": "The endpoint address & port. This can be either an IP address (e.g., 192.168.1.1) or a fully qualified domain name (FQDN, e.g., server.example.com)."
                      },
                      "version": {
                        "type": "string",
                        "description": "Protocol version associated with the endpoint e.g. 1 or 2 for endpointType Microsoft.HTTP, and 3.5 or 5.0 for endpointType Microsoft.Mqtt etc."
                      },
                      "supportedAuthenticationMethods": {
                        "type": "array",
                        "description": "List of supported authentication methods supported by device for Inbound connections.",
                        "items": {
                          "type": "string",
                          "description": "The method to authenticate the user of the client at the server.",
                          "enum": [
                            "Anonymous",
                            "Certificate",
                            "UsernamePassword"
                          ],
                          "x-ms-enum": {
                            "name": "AuthenticationMethod",
                            "modelAsString": true,
                            "values": [
                              {
                                "name": "Anonymous",
                                "value": "Anonymous",
                                "description": "The user authentication method is anonymous."
                              },
                              {
                                "name": "Certificate",
                                "value": "Certificate",
                                "description": "The user authentication method is an x509 certificate."
                              },
                              {
                                "name": "UsernamePassword",
                                "value": "UsernamePassword",
                                "description": "The user authentication method is a username and password."
                              }
                            ]
                          }
                        }
                      },
                      "additionalConfiguration": {
                        "type": "string",
                        "description": "Stringified JSON that contains configuration to be used by the connector (e.g., OPC UA, ONVIF)."
                      },
                      "lastUpdatedOn": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The timestamp (in UTC) when the endpoint was discovered."
                      }
                    },
                    "required": [
                      "endpointType",
                      "address"
                    ]
                  }
                },
                "outbound": {
                  "description": "Set of endpoints a device can connect to.",
                  "type": "object",
                  "properties": {
                    "assigned": {
                      "type": "object",
                      "description": "Endpoints the device can connect to.",
                      "additionalProperties": {
                        "type": "object",
                        "description": "Device messaging endpoint model.",
                        "properties": {
                          "endpointType": {
                            "type": "string",
                            "description": "Type of connection used for the messaging endpoint."
                          },
                          "address": {
                            "type": "string",
                            "description": "The endpoint address to connect to."
                          }
                        },
                        "required": [
                          "address"
                        ]
                      }
                    }
                  },
                  "required": [
                    "assigned"
                  ]
                }
              }
            },
            "manufacturer": {
              "type": "string",
              "description": "Device manufacturer.",
              "x-ms-mutability": [
                "read",
                "create"
              ]
            },
            "model": {
              "type": "string",
              "description": "Device model.",
              "x-ms-mutability": [
                "read",
                "create"
              ]
            },
            "operatingSystem": {
              "type": "string",
              "description": "Device operating system name.",
              "x-ms-mutability": [
                "read",
                "create"
              ]
            },
            "operatingSystemVersion": {
              "type": "string",
              "description": "Device operating system version."
            },
            "attributes": {
              "type": "object",
              "description": "A set of key-value pairs that contain custom attributes.",
              "additionalProperties": {}
            },
            "discoveryId": {
              "type": "string",
              "description": "Identifier used to detect changes in the discovered device."
            },
            "version": {
              "type": "integer",
              "format": "int64",
              "description": "An integer that is incremented each time the resource is modified."
            },
            "provisioningState": {
              "description": "Provisioning state of the resource.",
              "readOnly": true,
              "type": "string",
              "enum": [
                "Succeeded",
                "Failed",
                "Canceled",
                "Accepted",
                "Deleting"
              ],
              "x-ms-enum": {
                "name": "ProvisioningState",
                "modelAsString": true,
                "values": [
                  {
                    "name": "Succeeded",
                    "value": "Succeeded",
                    "description": "Resource has been created."
                  },
                  {
                    "name": "Failed",
                    "value": "Failed",
                    "description": "Resource creation failed."
                  },
                  {
                    "name": "Canceled",
                    "value": "Canceled",
                    "description": "Resource creation was canceled."
                  },
                  {
                    "name": "Accepted",
                    "value": "Accepted",
                    "description": "Resource has been accepted by the server."
                  },
                  {
                    "name": "Deleting",
                    "value": "Deleting",
                    "description": "Resource is deleting."
                  }
                ]
              }
            }
          },
          "required": [
            "discoveryId",
            "version"
          ]
        },
        "extendedLocation": {
          "description": "The extended location.",
          "x-ms-mutability": [
            "read",
            "create"
          ],
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "description": "The extended location type."
            },
            "name": {
              "type": "string",
              "description": "The extended location name."
            }
          },
          "required": [
            "type",
            "name"
          ]
        }
      },
      "required": [
        "extendedLocation"
      ]
    },
    "NamespaceDiscoveredDeviceListResult": {
      "type": "object",
      "description": "The response of a NamespaceDiscoveredDevice list operation.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The NamespaceDiscoveredDevice items on this page",
          "items": {
            "type": "object",
            "description": "Discovered device definition.",
            "properties": {
              "id": {
                "type": "string",
                "format": "arm-id",
                "description": "Fully qualified resource ID for the resource. E.g. \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}\"",
                "readOnly": true
              },
              "name": {
                "type": "string",
                "description": "The name of the resource",
                "readOnly": true
              },
              "type": {
                "type": "string",
                "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                "readOnly": true
              },
              "systemData": {
                "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                "readOnly": true,
                "type": "object",
                "properties": {
                  "createdBy": {
                    "type": "string",
                    "description": "The identity that created the resource."
                  },
                  "createdByType": {
                    "type": "string",
                    "description": "The type of identity that created the resource.",
                    "enum": [
                      "User",
                      "Application",
                      "ManagedIdentity",
                      "Key"
                    ],
                    "x-ms-enum": {
                      "name": "createdByType",
                      "modelAsString": true
                    }
                  },
                  "createdAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp of resource creation (UTC)."
                  },
                  "lastModifiedBy": {
                    "type": "string",
                    "description": "The identity that last modified the resource."
                  },
                  "lastModifiedByType": {
                    "type": "string",
                    "description": "The type of identity that last modified the resource.",
                    "enum": [
                      "User",
                      "Application",
                      "ManagedIdentity",
                      "Key"
                    ],
                    "x-ms-enum": {
                      "name": "createdByType",
                      "modelAsString": true
                    }
                  },
                  "lastModifiedAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp of resource last modification (UTC)"
                  }
                }
              },
              "tags": {
                "type": "object",
                "description": "Resource tags.",
                "additionalProperties": {
                  "type": "string"
                },
                "x-ms-mutability": [
                  "read",
                  "create",
                  "update"
                ]
              },
              "location": {
                "type": "string",
                "description": "The geo-location where the resource lives",
                "x-ms-mutability": [
                  "read",
                  "create"
                ]
              },
              "properties": {
                "description": "The resource-specific properties for this resource.",
                "x-ms-client-flatten": true,
                "type": "object",
                "properties": {
                  "externalDeviceId": {
                    "type": "string",
                    "description": "A device ID that represents the device in a system external to Azure. Unique within scope of an Azure tenant."
                  },
                  "endpoints": {
                    "description": "Endpoints for discovered devices.",
                    "type": "object",
                    "properties": {
                      "inbound": {
                        "type": "object",
                        "description": "Set of endpoints to connect to the device.",
                        "additionalProperties": {
                          "type": "object",
                          "description": "An endpoint to connect to the device.",
                          "properties": {
                            "endpointType": {
                              "type": "string",
                              "description": "Type of connection endpoint."
                            },
                            "address": {
                              "type": "string",
                              "description": "The endpoint address & port. This can be either an IP address (e.g., 192.168.1.1) or a fully qualified domain name (FQDN, e.g., server.example.com)."
                            },
                            "version": {
                              "type": "string",
                              "description": "Protocol version associated with the endpoint e.g. 1 or 2 for endpointType Microsoft.HTTP, and 3.5 or 5.0 for endpointType Microsoft.Mqtt etc."
                            },
                            "supportedAuthenticationMethods": {
                              "type": "array",
                              "description": "List of supported authentication methods supported by device for Inbound connections.",
                              "items": {
                                "type": "string",
                                "description": "The method to authenticate the user of the client at the server.",
                                "enum": [
                                  "Anonymous",
                                  "Certificate",
                                  "UsernamePassword"
                                ],
                                "x-ms-enum": {
                                  "name": "AuthenticationMethod",
                                  "modelAsString": true,
                                  "values": [
                                    {
                                      "name": "Anonymous",
                                      "value": "Anonymous",
                                      "description": "The user authentication method is anonymous."
                                    },
                                    {
                                      "name": "Certificate",
                                      "value": "Certificate",
                                      "description": "The user authentication method is an x509 certificate."
                                    },
                                    {
                                      "name": "UsernamePassword",
                                      "value": "UsernamePassword",
                                      "description": "The user authentication method is a username and password."
                                    }
                                  ]
                                }
                              }
                            },
                            "additionalConfiguration": {
                              "type": "string",
                              "description": "Stringified JSON that contains configuration to be used by the connector (e.g., OPC UA, ONVIF)."
                            },
                            "lastUpdatedOn": {
                              "type": "string",
                              "format": "date-time",
                              "description": "The timestamp (in UTC) when the endpoint was discovered."
                            }
                          },
                          "required": [
                            "endpointType",
                            "address"
                          ]
                        }
                      },
                      "outbound": {
                        "description": "Set of endpoints a device can connect to.",
                        "type": "object",
                        "properties": {
                          "assigned": {
                            "type": "object",
                            "description": "Endpoints the device can connect to.",
                            "additionalProperties": {
                              "type": "object",
                              "description": "Device messaging endpoint model.",
                              "properties": {
                                "endpointType": {
                                  "type": "string",
                                  "description": "Type of connection used for the messaging endpoint."
                                },
                                "address": {
                                  "type": "string",
                                  "description": "The endpoint address to connect to."
                                }
                              },
                              "required": [
                                "address"
                              ]
                            }
                          }
                        },
                        "required": [
                          "assigned"
                        ]
                      }
                    }
                  },
                  "manufacturer": {
                    "type": "string",
                    "description": "Device manufacturer.",
                    "x-ms-mutability": [
                      "read",
                      "create"
                    ]
                  },
                  "model": {
                    "type": "string",
                    "description": "Device model.",
                    "x-ms-mutability": [
                      "read",
                      "create"
                    ]
                  },
                  "operatingSystem": {
                    "type": "string",
                    "description": "Device operating system name.",
                    "x-ms-mutability": [
                      "read",
                      "create"
                    ]
                  },
                  "operatingSystemVersion": {
                    "type": "string",
                    "description": "Device operating system version."
                  },
                  "attributes": {
                    "type": "object",
                    "description": "A set of key-value pairs that contain custom attributes.",
                    "additionalProperties": {}
                  },
                  "discoveryId": {
                    "type": "string",
                    "description": "Identifier used to detect changes in the discovered device."
                  },
                  "version": {
                    "type": "integer",
                    "format": "int64",
                    "description": "An integer that is incremented each time the resource is modified."
                  },
                  "provisioningState": {
                    "description": "Provisioning state of the resource.",
                    "readOnly": true,
                    "type": "string",
                    "enum": [
                      "Succeeded",
                      "Failed",
                      "Canceled",
                      "Accepted",
                      "Deleting"
                    ],
                    "x-ms-enum": {
                      "name": "ProvisioningState",
                      "modelAsString": true,
                      "values": [
                        {
                          "name": "Succeeded",
                          "value": "Succeeded",
                          "description": "Resource has been created."
                        },
                        {
                          "name": "Failed",
                          "value": "Failed",
                          "description": "Resource creation failed."
                        },
                        {
                          "name": "Canceled",
                          "value": "Canceled",
                          "description": "Resource creation was canceled."
                        },
                        {
                          "name": "Accepted",
                          "value": "Accepted",
                          "description": "Resource has been accepted by the server."
                        },
                        {
                          "name": "Deleting",
                          "value": "Deleting",
                          "description": "Resource is deleting."
                        }
                      ]
                    }
                  }
                },
                "required": [
                  "discoveryId",
                  "version"
                ]
              },
              "extendedLocation": {
                "description": "The extended location.",
                "x-ms-mutability": [
                  "read",
                  "create"
                ],
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "description": "The extended location type."
                  },
                  "name": {
                    "type": "string",
                    "description": "The extended location name."
                  }
                },
                "required": [
                  "type",
                  "name"
                ]
              }
            },
            "required": [
              "extendedLocation"
            ]
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "NamespaceDiscoveredDeviceProperties": {
      "type": "object",
      "description": "Defines the discovered device properties.",
      "properties": {
        "externalDeviceId": {
          "type": "string",
          "description": "A device ID that represents the device in a system external to Azure. Unique within scope of an Azure tenant."
        },
        "endpoints": {
          "description": "Endpoints for discovered devices.",
          "type": "object",
          "properties": {
            "inbound": {
              "type": "object",
              "description": "Set of endpoints to connect to the device.",
              "additionalProperties": {
                "type": "object",
                "description": "An endpoint to connect to the device.",
                "properties": {
                  "endpointType": {
                    "type": "string",
                    "description": "Type of connection endpoint."
                  },
                  "address": {
                    "type": "string",
                    "description": "The endpoint address & port. This can be either an IP address (e.g., 192.168.1.1) or a fully qualified domain name (FQDN, e.g., server.example.com)."
                  },
                  "version": {
                    "type": "string",
                    "description": "Protocol version associated with the endpoint e.g. 1 or 2 for endpointType Microsoft.HTTP, and 3.5 or 5.0 for endpointType Microsoft.Mqtt etc."
                  },
                  "supportedAuthenticationMethods": {
                    "type": "array",
                    "description": "List of supported authentication methods supported by device for Inbound connections.",
                    "items": {
                      "type": "string",
                      "description": "The method to authenticate the user of the client at the server.",
                      "enum": [
                        "Anonymous",
                        "Certificate",
                        "UsernamePassword"
                      ],
                      "x-ms-enum": {
                        "name": "AuthenticationMethod",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Anonymous",
                            "value": "Anonymous",
                            "description": "The user authentication method is anonymous."
                          },
                          {
                            "name": "Certificate",
                            "value": "Certificate",
                            "description": "The user authentication method is an x509 certificate."
                          },
                          {
                            "name": "UsernamePassword",
                            "value": "UsernamePassword",
                            "description": "The user authentication method is a username and password."
                          }
                        ]
                      }
                    }
                  },
                  "additionalConfiguration": {
                    "type": "string",
                    "description": "Stringified JSON that contains configuration to be used by the connector (e.g., OPC UA, ONVIF)."
                  },
                  "lastUpdatedOn": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp (in UTC) when the endpoint was discovered."
                  }
                },
                "required": [
                  "endpointType",
                  "address"
                ]
              }
            },
            "outbound": {
              "description": "Set of endpoints a device can connect to.",
              "type": "object",
              "properties": {
                "assigned": {
                  "type": "object",
                  "description": "Endpoints the device can connect to.",
                  "additionalProperties": {
                    "type": "object",
                    "description": "Device messaging endpoint model.",
                    "properties": {
                      "endpointType": {
                        "type": "string",
                        "description": "Type of connection used for the messaging endpoint."
                      },
                      "address": {
                        "type": "string",
                        "description": "The endpoint address to connect to."
                      }
                    },
                    "required": [
                      "address"
                    ]
                  }
                }
              },
              "required": [
                "assigned"
              ]
            }
          }
        },
        "manufacturer": {
          "type": "string",
          "description": "Device manufacturer.",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "model": {
          "type": "string",
          "description": "Device model.",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "operatingSystem": {
          "type": "string",
          "description": "Device operating system name.",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "operatingSystemVersion": {
          "type": "string",
          "description": "Device operating system version."
        },
        "attributes": {
          "type": "object",
          "description": "A set of key-value pairs that contain custom attributes.",
          "additionalProperties": {}
        },
        "discoveryId": {
          "type": "string",
          "description": "Identifier used to detect changes in the discovered device."
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "description": "An integer that is incremented each time the resource is modified."
        },
        "provisioningState": {
          "description": "Provisioning state of the resource.",
          "readOnly": true,
          "type": "string",
          "enum": [
            "Succeeded",
            "Failed",
            "Canceled",
            "Accepted",
            "Deleting"
          ],
          "x-ms-enum": {
            "name": "ProvisioningState",
            "modelAsString": true,
            "values": [
              {
                "name": "Succeeded",
                "value": "Succeeded",
                "description": "Resource has been created."
              },
              {
                "name": "Failed",
                "value": "Failed",
                "description": "Resource creation failed."
              },
              {
                "name": "Canceled",
                "value": "Canceled",
                "description": "Resource creation was canceled."
              },
              {
                "name": "Accepted",
                "value": "Accepted",
                "description": "Resource has been accepted by the server."
              },
              {
                "name": "Deleting",
                "value": "Deleting",
                "description": "Resource is deleting."
              }
            ]
          }
        }
      },
      "required": [
        "discoveryId",
        "version"
      ]
    },
    "NamespaceDiscoveredDeviceUpdate": {
      "type": "object",
      "description": "The type used for update operations of the NamespaceDiscoveredDevice.",
      "properties": {
        "tags": {
          "type": "object",
          "description": "Resource tags.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "properties": {
          "description": "The resource-specific properties for this resource.",
          "x-ms-client-flatten": true,
          "type": "object",
          "properties": {
            "externalDeviceId": {
              "type": "string",
              "description": "A device ID that represents the device in a system external to Azure. Unique within scope of an Azure tenant."
            },
            "endpoints": {
              "description": "Endpoints for discovered devices.",
              "type": "object",
              "properties": {
                "inbound": {
                  "type": "object",
                  "description": "Set of endpoints to connect to the device.",
                  "additionalProperties": {
                    "type": "object",
                    "description": "An endpoint to connect to the device.",
                    "properties": {
                      "endpointType": {
                        "type": "string",
                        "description": "Type of connection endpoint."
                      },
                      "address": {
                        "type": "string",
                        "description": "The endpoint address & port. This can be either an IP address (e.g., 192.168.1.1) or a fully qualified domain name (FQDN, e.g., server.example.com)."
                      },
                      "version": {
                        "type": "string",
                        "description": "Protocol version associated with the endpoint e.g. 1 or 2 for endpointType Microsoft.HTTP, and 3.5 or 5.0 for endpointType Microsoft.Mqtt etc."
                      },
                      "supportedAuthenticationMethods": {
                        "type": "array",
                        "description": "List of supported authentication methods supported by device for Inbound connections.",
                        "items": {
                          "type": "string",
                          "description": "The method to authenticate the user of the client at the server.",
                          "enum": [
                            "Anonymous",
                            "Certificate",
                            "UsernamePassword"
                          ],
                          "x-ms-enum": {
                            "name": "AuthenticationMethod",
                            "modelAsString": true,
                            "values": [
                              {
                                "name": "Anonymous",
                                "value": "Anonymous",
                                "description": "The user authentication method is anonymous."
                              },
                              {
                                "name": "Certificate",
                                "value": "Certificate",
                                "description": "The user authentication method is an x509 certificate."
                              },
                              {
                                "name": "UsernamePassword",
                                "value": "UsernamePassword",
                                "description": "The user authentication method is a username and password."
                              }
                            ]
                          }
                        }
                      },
                      "additionalConfiguration": {
                        "type": "string",
                        "description": "Stringified JSON that contains configuration to be used by the connector (e.g., OPC UA, ONVIF)."
                      },
                      "lastUpdatedOn": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The timestamp (in UTC) when the endpoint was discovered."
                      }
                    }
                  }
                },
                "outbound": {
                  "description": "Set of endpoints a device can connect to.",
                  "type": "object",
                  "properties": {
                    "assigned": {
                      "type": "object",
                      "description": "Endpoints the device can connect to.",
                      "additionalProperties": {
                        "type": "object",
                        "description": "Device messaging endpoint model.",
                        "properties": {
                          "endpointType": {
                            "type": "string",
                            "description": "Type of connection used for the messaging endpoint."
                          },
                          "address": {
                            "type": "string",
                            "description": "The endpoint address to connect to."
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "operatingSystemVersion": {
              "type": "string",
              "description": "Device operating system version."
            },
            "attributes": {
              "type": "object",
              "description": "A set of key-value pairs that contain custom attributes.",
              "additionalProperties": {}
            },
            "discoveryId": {
              "type": "string",
              "description": "Identifier used to detect changes in the discovered device."
            },
            "version": {
              "type": "integer",
              "format": "int64",
              "description": "An integer that is incremented each time the resource is modified."
            }
          }
        }
      }
    },
    "NamespaceDiscoveredDeviceUpdateProperties": {
      "type": "object",
      "description": "The updatable properties of the NamespaceDiscoveredDevice.",
      "properties": {
        "externalDeviceId": {
          "type": "string",
          "description": "A device ID that represents the device in a system external to Azure. Unique within scope of an Azure tenant."
        },
        "endpoints": {
          "description": "Endpoints for discovered devices.",
          "type": "object",
          "properties": {
            "inbound": {
              "type": "object",
              "description": "Set of endpoints to connect to the device.",
              "additionalProperties": {
                "type": "object",
                "description": "An endpoint to connect to the device.",
                "properties": {
                  "endpointType": {
                    "type": "string",
                    "description": "Type of connection endpoint."
                  },
                  "address": {
                    "type": "string",
                    "description": "The endpoint address & port. This can be either an IP address (e.g., 192.168.1.1) or a fully qualified domain name (FQDN, e.g., server.example.com)."
                  },
                  "version": {
                    "type": "string",
                    "description": "Protocol version associated with the endpoint e.g. 1 or 2 for endpointType Microsoft.HTTP, and 3.5 or 5.0 for endpointType Microsoft.Mqtt etc."
                  },
                  "supportedAuthenticationMethods": {
                    "type": "array",
                    "description": "List of supported authentication methods supported by device for Inbound connections.",
                    "items": {
                      "type": "string",
                      "description": "The method to authenticate the user of the client at the server.",
                      "enum": [
                        "Anonymous",
                        "Certificate",
                        "UsernamePassword"
                      ],
                      "x-ms-enum": {
                        "name": "AuthenticationMethod",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Anonymous",
                            "value": "Anonymous",
                            "description": "The user authentication method is anonymous."
                          },
                          {
                            "name": "Certificate",
                            "value": "Certificate",
                            "description": "The user authentication method is an x509 certificate."
                          },
                          {
                            "name": "UsernamePassword",
                            "value": "UsernamePassword",
                            "description": "The user authentication method is a username and password."
                          }
                        ]
                      }
                    }
                  },
                  "additionalConfiguration": {
                    "type": "string",
                    "description": "Stringified JSON that contains configuration to be used by the connector (e.g., OPC UA, ONVIF)."
                  },
                  "lastUpdatedOn": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp (in UTC) when the endpoint was discovered."
                  }
                }
              }
            },
            "outbound": {
              "description": "Set of endpoints a device can connect to.",
              "type": "object",
              "properties": {
                "assigned": {
                  "type": "object",
                  "description": "Endpoints the device can connect to.",
                  "additionalProperties": {
                    "type": "object",
                    "description": "Device messaging endpoint model.",
                    "properties": {
                      "endpointType": {
                        "type": "string",
                        "description": "Type of connection used for the messaging endpoint."
                      },
                      "address": {
                        "type": "string",
                        "description": "The endpoint address to connect to."
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "operatingSystemVersion": {
          "type": "string",
          "description": "Device operating system version."
        },
        "attributes": {
          "type": "object",
          "description": "A set of key-value pairs that contain custom attributes.",
          "additionalProperties": {}
        },
        "discoveryId": {
          "type": "string",
          "description": "Identifier used to detect changes in the discovered device."
        },
        "version": {
          "type": "integer",
          "format": "int64",
          "description": "An integer that is incremented each time the resource is modified."
        }
      }
    },
    "NamespaceDiscoveredEvent": {
      "type": "object",
      "description": "Defines the event properties.",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the event."
        },
        "dataSource": {
          "type": "string",
          "description": "Reference to a data source for a given event."
        },
        "eventConfiguration": {
          "type": "string",
          "description": "Stringified JSON that contains connector-specific configuration for the event. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize."
        },
        "destinations": {
          "type": "array",
          "description": "Destinations for an event.",
          "items": {
            "type": "object",
            "description": "The type of the destination.",
            "properties": {
              "target": {
                "description": "Target destination.",
                "type": "string",
                "enum": [
                  "Mqtt",
                  "Storage"
                ],
                "x-ms-enum": {
                  "name": "EventDestinationTarget",
                  "modelAsString": true,
                  "values": [
                    {
                      "name": "Mqtt",
                      "value": "Mqtt",
                      "description": "MQTT target."
                    },
                    {
                      "name": "Storage",
                      "value": "Storage",
                      "description": "Storage target."
                    }
                  ]
                }
              }
            },
            "discriminator": "target",
            "required": [
              "target"
            ]
          },
          "x-ms-identifiers": []
        },
        "typeRef": {
          "type": "string",
          "description": "URI or type definition ID."
        },
        "lastUpdatedOn": {
          "type": "string",
          "format": "date-time",
          "description": "UTC timestamp indicating when the event was added or modified."
        }
      },
      "required": [
        "name"
      ]
    },
    "NamespaceDiscoveredEventGroup": {
      "type": "object",
      "description": "Defines the discovered event group properties.",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the event group."
        },
        "dataSource": {
          "type": "string",
          "description": "The address of the notifier of the event group in the asset (e.g. URL) so that a client can access the event group on the asset."
        },
        "eventGroupConfiguration": {
          "type": "string",
          "description": "Stringified JSON that contains connector-specific configuration for the event group. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize."
        },
        "defaultDestinations": {
          "type": "array",
          "description": "Destinations for events. Default destinations when destinations is not defined at the event level.",
          "items": {
            "type": "object",
            "description": "The type of the destination.",
            "properties": {
              "target": {
                "description": "Target destination.",
                "type": "string",
                "enum": [
                  "Mqtt",
                  "Storage"
                ],
                "x-ms-enum": {
                  "name": "EventDestinationTarget",
                  "modelAsString": true,
                  "values": [
                    {
                      "name": "Mqtt",
                      "value": "Mqtt",
                      "description": "MQTT target."
                    },
                    {
                      "name": "Storage",
                      "value": "Storage",
                      "description": "Storage target."
                    }
                  ]
                }
              }
            },
            "discriminator": "target",
            "required": [
              "target"
            ]
          },
          "x-ms-identifiers": []
        },
        "typeRef": {
          "type": "string",
          "description": "URI or type definition ID."
        },
        "events": {
          "type": "array",
          "description": "Array of events that are part of the event group.",
          "items": {
            "type": "object",
            "description": "Defines the event properties.",
            "properties": {
              "name": {
                "type": "string",
                "description": "The name of the event."
              },
              "dataSource": {
                "type": "string",
                "description": "Reference to a data source for a given event."
              },
              "eventConfiguration": {
                "type": "string",
                "description": "Stringified JSON that contains connector-specific configuration for the event. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize."
              },
              "destinations": {
                "type": "array",
                "description": "Destinations for an event.",
                "items": {
                  "type": "object",
                  "description": "The type of the destination.",
                  "properties": {
                    "target": {
                      "description": "Target destination.",
                      "type": "string",
                      "enum": [
                        "Mqtt",
                        "Storage"
                      ],
                      "x-ms-enum": {
                        "name": "EventDestinationTarget",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Mqtt",
                            "value": "Mqtt",
                            "description": "MQTT target."
                          },
                          {
                            "name": "Storage",
                            "value": "Storage",
                            "description": "Storage target."
                          }
                        ]
                      }
                    }
                  },
                  "discriminator": "target",
                  "required": [
                    "target"
                  ]
                },
                "x-ms-identifiers": []
              },
              "typeRef": {
                "type": "string",
                "description": "URI or type definition ID."
              },
              "lastUpdatedOn": {
                "type": "string",
                "format": "date-time",
                "description": "UTC timestamp indicating when the event was added or modified."
              }
            },
            "required": [
              "name"
            ]
          },
          "x-ms-identifiers": []
        }
      },
      "required": [
        "name"
      ]
    },
    "NamespaceDiscoveredManagementAction": {
      "type": "object",
      "description": "Defines the action properties.",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the action."
        },
        "actionConfiguration": {
          "type": "string",
          "description": "Stringified JSON that contains connector-specific configuration for the action."
        },
        "targetUri": {
          "type": "string",
          "description": "The target URI on which a client can invoke the specific action."
        },
        "typeRef": {
          "type": "string",
          "description": "URI or type definition ID."
        },
        "topic": {
          "type": "string",
          "description": "The MQTT topic path on which a client will receive the request for the action."
        },
        "actionType": {
          "type": "string",
          "description": "The type of the action.",
          "default": "Call",
          "enum": [
            "Call",
            "Read",
            "Write"
          ],
          "x-ms-enum": {
            "name": "NamespaceDiscoveredManagementActionType",
            "modelAsString": true,
            "values": [
              {
                "name": "Call",
                "value": "Call",
                "description": "Call action type."
              },
              {
                "name": "Read",
                "value": "Read",
                "description": "Read action type."
              },
              {
                "name": "Write",
                "value": "Write",
                "description": "Write action type."
              }
            ]
          }
        },
        "timeoutInSeconds": {
          "type": "integer",
          "format": "int32",
          "description": "Response timeout for the action."
        },
        "lastUpdatedOn": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp (in UTC) indicating when the management action was added or modified."
        }
      },
      "required": [
        "name",
        "targetUri"
      ]
    },
    "NamespaceDiscoveredManagementGroup": {
      "type": "object",
      "description": "Defines the management group properties.",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the management group."
        },
        "managementGroupConfiguration": {
          "type": "string",
          "description": "Stringified JSON that contains connector-specific configuration for the management group."
        },
        "typeRef": {
          "type": "string",
          "description": "URI or type definition ID."
        },
        "dataSource": {
          "type": "string",
          "description": "Reference to a data source for a given management group."
        },
        "defaultTopic": {
          "type": "string",
          "description": "Default MQTT topic path on which a client will receive the request for all actions that are part of the management group."
        },
        "defaultTimeoutInSeconds": {
          "type": "integer",
          "format": "int32",
          "description": "Default response timeout for all actions that are part of the management group.",
          "default": 100
        },
        "actions": {
          "type": "array",
          "description": "Array of actions that are part of the management group. Each action can have an individual configuration.",
          "items": {
            "type": "object",
            "description": "Defines the action properties.",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the action."
              },
              "actionConfiguration": {
                "type": "string",
                "description": "Stringified JSON that contains connector-specific configuration for the action."
              },
              "targetUri": {
                "type": "string",
                "description": "The target URI on which a client can invoke the specific action."
              },
              "typeRef": {
                "type": "string",
                "description": "URI or type definition ID."
              },
              "topic": {
                "type": "string",
                "description": "The MQTT topic path on which a client will receive the request for the action."
              },
              "actionType": {
                "type": "string",
                "description": "The type of the action.",
                "default": "Call",
                "enum": [
                  "Call",
                  "Read",
                  "Write"
                ],
                "x-ms-enum": {
                  "name": "NamespaceDiscoveredManagementActionType",
                  "modelAsString": true,
                  "values": [
                    {
                      "name": "Call",
                      "value": "Call",
                      "description": "Call action type."
                    },
                    {
                      "name": "Read",
                      "value": "Read",
                      "description": "Read action type."
                    },
                    {
                      "name": "Write",
                      "value": "Write",
                      "description": "Write action type."
                    }
                  ]
                }
              },
              "timeoutInSeconds": {
                "type": "integer",
                "format": "int32",
                "description": "Response timeout for the action."
              },
              "lastUpdatedOn": {
                "type": "string",
                "format": "date-time",
                "description": "Timestamp (in UTC) indicating when the management action was added or modified."
              }
            },
            "required": [
              "name",
              "targetUri"
            ]
          },
          "x-ms-identifiers": []
        },
        "lastUpdatedOn": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp (in UTC) indicating when the management group was added or modified."
        }
      },
      "required": [
        "name"
      ]
    },
    "NamespaceDiscoveredStream": {
      "type": "object",
      "description": "Defines the stream properties.",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the stream definition."
        },
        "streamConfiguration": {
          "type": "string",
          "description": "Stringified JSON that contains connector-specific configuration for the specific stream."
        },
        "typeRef": {
          "type": "string",
          "description": "URI or type definition ID."
        },
        "destinations": {
          "type": "array",
          "description": "Destinations for a stream.",
          "items": {
            "type": "object",
            "description": "The type of the destination.",
            "properties": {
              "target": {
                "description": "Target destination.",
                "type": "string",
                "enum": [
                  "Mqtt",
                  "Storage"
                ],
                "x-ms-enum": {
                  "name": "StreamDestinationTarget",
                  "modelAsString": true,
                  "values": [
                    {
                      "name": "Mqtt",
                      "value": "Mqtt",
                      "description": "MQTT target."
                    },
                    {
                      "name": "Storage",
                      "value": "Storage",
                      "description": "Storage target."
                    }
                  ]
                }
              }
            },
            "discriminator": "target",
            "required": [
              "target"
            ]
          },
          "x-ms-identifiers": []
        },
        "lastUpdatedOn": {
          "type": "string",
          "format": "date-time",
          "description": "Timestamp (in UTC) indicating when the stream was added or modified."
        }
      },
      "required": [
        "name"
      ]
    },
    "NamespaceEvent": {
      "type": "object",
      "description": "Defines the event properties.",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the event."
        },
        "dataSource": {
          "type": "string",
          "description": "Reference to a data source for a given event."
        },
        "eventConfiguration": {
          "type": "string",
          "description": "Stringified JSON that contains connector-specific configuration for the event. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize."
        },
        "destinations": {
          "type": "array",
          "description": "Destinations for an event.",
          "items": {
            "type": "object",
            "description": "The type of the destination.",
            "properties": {
              "target": {
                "description": "Target destination.",
                "type": "string",
                "enum": [
                  "Mqtt",
                  "Storage"
                ],
                "x-ms-enum": {
                  "name": "EventDestinationTarget",
                  "modelAsString": true,
                  "values": [
                    {
                      "name": "Mqtt",
                      "value": "Mqtt",
                      "description": "MQTT target."
                    },
                    {
                      "name": "Storage",
                      "value": "Storage",
                      "description": "Storage target."
                    }
                  ]
                }
              }
            },
            "discriminator": "target",
            "required": [
              "target"
            ]
          },
          "x-ms-identifiers": []
        },
        "typeRef": {
          "type": "string",
          "description": "URI or type definition ID."
        }
      },
      "required": [
        "name"
      ]
    },
    "NamespaceEventGroup": {
      "type": "object",
      "description": "Defines the event group properties.",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the event group."
        },
        "dataSource": {
          "type": "string",
          "description": "The address of the notifier of the event group in the asset (e.g. URL) so that a client can access the event group on the asset."
        },
        "eventGroupConfiguration": {
          "type": "string",
          "description": "Stringified JSON that contains connector-specific configuration for the event group. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize."
        },
        "defaultDestinations": {
          "type": "array",
          "description": "Destinations for events. Default destinations when destinations is not defined at the event level.",
          "items": {
            "type": "object",
            "description": "The type of the destination.",
            "properties": {
              "target": {
                "description": "Target destination.",
                "type": "string",
                "enum": [
                  "Mqtt",
                  "Storage"
                ],
                "x-ms-enum": {
                  "name": "EventDestinationTarget",
                  "modelAsString": true,
                  "values": [
                    {
                      "name": "Mqtt",
                      "value": "Mqtt",
                      "description": "MQTT target."
                    },
                    {
                      "name": "Storage",
                      "value": "Storage",
                      "description": "Storage target."
                    }
                  ]
                }
              }
            },
            "discriminator": "target",
            "required": [
              "target"
            ]
          },
          "x-ms-identifiers": []
        },
        "typeRef": {
          "type": "string",
          "description": "URI or type definition ID."
        },
        "events": {
          "type": "array",
          "description": "Array of events that are part of the event group.",
          "items": {
            "type": "object",
            "description": "Defines the event properties.",
            "properties": {
              "name": {
                "type": "string",
                "description": "The name of the event."
              },
              "dataSource": {
                "type": "string",
                "description": "Reference to a data source for a given event."
              },
              "eventConfiguration": {
                "type": "string",
                "description": "Stringified JSON that contains connector-specific configuration for the event. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize."
              },
              "destinations": {
                "type": "array",
                "description": "Destinations for an event.",
                "items": {
                  "type": "object",
                  "description": "The type of the destination.",
                  "properties": {
                    "target": {
                      "description": "Target destination.",
                      "type": "string",
                      "enum": [
                        "Mqtt",
                        "Storage"
                      ],
                      "x-ms-enum": {
                        "name": "EventDestinationTarget",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Mqtt",
                            "value": "Mqtt",
                            "description": "MQTT target."
                          },
                          {
                            "name": "Storage",
                            "value": "Storage",
                            "description": "Storage target."
                          }
                        ]
                      }
                    }
                  },
                  "discriminator": "target",
                  "required": [
                    "target"
                  ]
                },
                "x-ms-identifiers": []
              },
              "typeRef": {
                "type": "string",
                "description": "URI or type definition ID."
              }
            },
            "required": [
              "name"
            ]
          },
          "x-ms-identifiers": []
        }
      },
      "required": [
        "name"
      ]
    },
    "NamespaceListResult": {
      "type": "object",
      "description": "The response of a Namespace list operation.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The Namespace items on this page",
          "items": {
            "type": "object",
            "description": "Namespace definition.",
            "properties": {
              "id": {
                "type": "string",
                "format": "arm-id",
                "description": "Fully qualified resource ID for the resource. E.g. \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}\"",
                "readOnly": true
              },
              "name": {
                "type": "string",
                "description": "The name of the resource",
                "readOnly": true
              },
              "type": {
                "type": "string",
                "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                "readOnly": true
              },
              "systemData": {
                "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                "readOnly": true,
                "type": "object",
                "properties": {
                  "createdBy": {
                    "type": "string",
                    "description": "The identity that created the resource."
                  },
                  "createdByType": {
                    "type": "string",
                    "description": "The type of identity that created the resource.",
                    "enum": [
                      "User",
                      "Application",
                      "ManagedIdentity",
                      "Key"
                    ],
                    "x-ms-enum": {
                      "name": "createdByType",
                      "modelAsString": true
                    }
                  },
                  "createdAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp of resource creation (UTC)."
                  },
                  "lastModifiedBy": {
                    "type": "string",
                    "description": "The identity that last modified the resource."
                  },
                  "lastModifiedByType": {
                    "type": "string",
                    "description": "The type of identity that last modified the resource.",
                    "enum": [
                      "User",
                      "Application",
                      "ManagedIdentity",
                      "Key"
                    ],
                    "x-ms-enum": {
                      "name": "createdByType",
                      "modelAsString": true
                    }
                  },
                  "lastModifiedAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp of resource last modification (UTC)"
                  }
                }
              },
              "tags": {
                "type": "object",
                "description": "Resource tags.",
                "additionalProperties": {
                  "type": "string"
                },
                "x-ms-mutability": [
                  "read",
                  "create",
                  "update"
                ]
              },
              "location": {
                "type": "string",
                "description": "The geo-location where the resource lives",
                "x-ms-mutability": [
                  "read",
                  "create"
                ]
              },
              "properties": {
                "description": "The resource-specific properties for this resource.",
                "x-ms-client-flatten": true,
                "type": "object",
                "properties": {
                  "uuid": {
                    "type": "string",
                    "description": "Globally unique, immutable, non-reusable ID.",
                    "readOnly": true
                  },
                  "messaging": {
                    "description": "Assigned and unassigned messaging endpoints.",
                    "type": "object",
                    "properties": {
                      "endpoints": {
                        "type": "object",
                        "description": "Dictionary of messaging endpoints.",
                        "additionalProperties": {
                          "type": "object",
                          "description": "Namespace messaging endpoint model used by a device to connect to a service.",
                          "properties": {
                            "endpointType": {
                              "type": "string",
                              "description": "Type of connection used for messaging endpoint."
                            },
                            "address": {
                              "type": "string",
                              "description": "The endpoint address to connect to."
                            },
                            "resourceId": {
                              "type": "string",
                              "description": "The messaging endpoint Azure resource Id."
                            }
                          },
                          "required": [
                            "address"
                          ]
                        }
                      }
                    }
                  },
                  "provisioningState": {
                    "description": "Provisioning state of the resource.",
                    "readOnly": true,
                    "type": "string",
                    "enum": [
                      "Succeeded",
                      "Failed",
                      "Canceled",
                      "Accepted",
                      "Deleting"
                    ],
                    "x-ms-enum": {
                      "name": "ProvisioningState",
                      "modelAsString": true,
                      "values": [
                        {
                          "name": "Succeeded",
                          "value": "Succeeded",
                          "description": "Resource has been created."
                        },
                        {
                          "name": "Failed",
                          "value": "Failed",
                          "description": "Resource creation failed."
                        },
                        {
                          "name": "Canceled",
                          "value": "Canceled",
                          "description": "Resource creation was canceled."
                        },
                        {
                          "name": "Accepted",
                          "value": "Accepted",
                          "description": "Resource has been accepted by the server."
                        },
                        {
                          "name": "Deleting",
                          "value": "Deleting",
                          "description": "Resource is deleting."
                        }
                      ]
                    }
                  }
                }
              },
              "identity": {
                "description": "The managed service identities assigned to this resource.",
                "type": "object",
                "properties": {
                  "principalId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.",
                    "readOnly": true
                  },
                  "tenantId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.",
                    "readOnly": true
                  },
                  "type": {
                    "type": "string",
                    "description": "Type of managed service identity (either system assigned, or none).",
                    "enum": [
                      "None",
                      "SystemAssigned"
                    ],
                    "x-ms-enum": {
                      "name": "SystemAssignedServiceIdentityType",
                      "modelAsString": true
                    }
                  }
                },
                "required": [
                  "type"
                ]
              }
            }
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "NamespaceMessageSchemaReference": {
      "type": "object",
      "description": "Defines the message schema reference properties.",
      "properties": {
        "schemaRegistryNamespace": {
          "type": "string",
          "description": "The message schema registry namespace.",
          "readOnly": true
        },
        "schemaName": {
          "type": "string",
          "description": "The message schema name.",
          "readOnly": true
        },
        "schemaVersion": {
          "type": "string",
          "description": "The message schema version.",
          "readOnly": true
        }
      },
      "required": [
        "schemaRegistryNamespace",
        "schemaName",
        "schemaVersion"
      ]
    },
    "NamespaceMigrateRequest": {
      "type": "object",
      "description": "Request body for the migrate resources operation in to Namespace resource.",
      "properties": {
        "scope": {
          "description": "Scope of the migrate resources operation.",
          "type": "string",
          "enum": [
            "Resources"
          ],
          "x-ms-enum": {
            "name": "Scope",
            "modelAsString": true,
            "values": [
              {
                "name": "Resources",
                "value": "Resources",
                "description": "Scoping the migration to resourceIds provided"
              }
            ]
          }
        },
        "resourceIds": {
          "type": "array",
          "description": "List of asset resources to be migrated.",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "NamespaceMigrateResponse": {
      "type": "object",
      "description": "Response for the migrate asset resources operation into Namespace resource.",
      "properties": {
        "migrateResults": {
          "type": "array",
          "description": "List of migrate results containing result of each asset migrate operation.",
          "items": {
            "type": "object",
            "description": "Result of Migrate operation of asset resource into Namespace resource.",
            "properties": {
              "resourceId": {
                "type": "string",
                "description": "The resource Id of the asset resource."
              },
              "result": {
                "description": "The result of the migrate operation.",
                "type": "string",
                "enum": [
                  "Succeeded",
                  "Failed"
                ],
                "x-ms-enum": {
                  "name": "MigrateResultType",
                  "modelAsString": true,
                  "values": [
                    {
                      "name": "Succeeded",
                      "value": "Succeeded",
                      "description": "Resource Migrate operation is successful."
                    },
                    {
                      "name": "Failed",
                      "value": "Failed",
                      "description": "Resource Migrate operation is not successful."
                    }
                  ]
                },
                "readOnly": true
              },
              "error": {
                "description": "The error if the migrate operation is not successful.",
                "type": "object",
                "properties": {
                  "code": {
                    "type": "string",
                    "description": "Error code for classification of errors (ex: '400', '404', '500', etc.).",
                    "readOnly": true
                  },
                  "message": {
                    "type": "string",
                    "description": "Human-readable helpful error message to provide additional context for error (e.g.,: “Capability ID 'foo' does not exist”).",
                    "readOnly": true
                  },
                  "details": {
                    "type": "array",
                    "description": "Array of error details that describe the status of each error.",
                    "items": {
                      "type": "object",
                      "description": "Defines the error details properties.",
                      "properties": {
                        "code": {
                          "type": "string",
                          "description": "Multi-part error code for classification and root causing of errors (ex: 400.200.100.432).",
                          "readOnly": true
                        },
                        "message": {
                          "type": "string",
                          "description": "Human-readable helpful error message to provide additional context for error (ex: “Authentication method not supported”).",
                          "readOnly": true
                        },
                        "info": {
                          "type": "string",
                          "description": "Human-readable helpful detailed text context for debugging (ex: “The following mechanisms are supported...”).",
                          "readOnly": true
                        },
                        "correlationId": {
                          "type": "string",
                          "description": "Unique identifier for the transaction to aid in debugging.",
                          "readOnly": true
                        }
                      }
                    },
                    "readOnly": true,
                    "x-ms-identifiers": []
                  }
                }
              }
            }
          },
          "x-ms-identifiers": [
            "resourceId"
          ]
        }
      }
    },
    "NamespaceProperties": {
      "type": "object",
      "description": "The namespace properties model.",
      "properties": {
        "uuid": {
          "type": "string",
          "description": "Globally unique, immutable, non-reusable ID.",
          "readOnly": true
        },
        "messaging": {
          "description": "Assigned and unassigned messaging endpoints.",
          "type": "object",
          "properties": {
            "endpoints": {
              "type": "object",
              "description": "Dictionary of messaging endpoints.",
              "additionalProperties": {
                "type": "object",
                "description": "Namespace messaging endpoint model used by a device to connect to a service.",
                "properties": {
                  "endpointType": {
                    "type": "string",
                    "description": "Type of connection used for messaging endpoint."
                  },
                  "address": {
                    "type": "string",
                    "description": "The endpoint address to connect to."
                  },
                  "resourceId": {
                    "type": "string",
                    "description": "The messaging endpoint Azure resource Id."
                  }
                },
                "required": [
                  "address"
                ]
              }
            }
          }
        },
        "provisioningState": {
          "description": "Provisioning state of the resource.",
          "readOnly": true,
          "type": "string",
          "enum": [
            "Succeeded",
            "Failed",
            "Canceled",
            "Accepted",
            "Deleting"
          ],
          "x-ms-enum": {
            "name": "ProvisioningState",
            "modelAsString": true,
            "values": [
              {
                "name": "Succeeded",
                "value": "Succeeded",
                "description": "Resource has been created."
              },
              {
                "name": "Failed",
                "value": "Failed",
                "description": "Resource creation failed."
              },
              {
                "name": "Canceled",
                "value": "Canceled",
                "description": "Resource creation was canceled."
              },
              {
                "name": "Accepted",
                "value": "Accepted",
                "description": "Resource has been accepted by the server."
              },
              {
                "name": "Deleting",
                "value": "Deleting",
                "description": "Resource is deleting."
              }
            ]
          }
        }
      }
    },
    "NamespaceStream": {
      "type": "object",
      "description": "Defines the stream properties.",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the stream definition."
        },
        "streamConfiguration": {
          "type": "string",
          "description": "Stringified JSON that contains connector-specific configuration for the specific stream."
        },
        "typeRef": {
          "type": "string",
          "description": "URI or type definition ID."
        },
        "destinations": {
          "type": "array",
          "description": "Destinations for a stream.",
          "items": {
            "type": "object",
            "description": "The type of the destination.",
            "properties": {
              "target": {
                "description": "Target destination.",
                "type": "string",
                "enum": [
                  "Mqtt",
                  "Storage"
                ],
                "x-ms-enum": {
                  "name": "StreamDestinationTarget",
                  "modelAsString": true,
                  "values": [
                    {
                      "name": "Mqtt",
                      "value": "Mqtt",
                      "description": "MQTT target."
                    },
                    {
                      "name": "Storage",
                      "value": "Storage",
                      "description": "Storage target."
                    }
                  ]
                }
              }
            },
            "discriminator": "target",
            "required": [
              "target"
            ]
          },
          "x-ms-identifiers": []
        }
      },
      "required": [
        "name"
      ]
    },
    "NamespaceUpdate": {
      "type": "object",
      "description": "The type used for update operations of the Namespace.",
      "properties": {
        "identity": {
          "description": "The managed service identities assigned to this resource.",
          "type": "object",
          "properties": {
            "principalId": {
              "type": "string",
              "format": "uuid",
              "description": "The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.",
              "readOnly": true
            },
            "tenantId": {
              "type": "string",
              "format": "uuid",
              "description": "The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.",
              "readOnly": true
            },
            "type": {
              "type": "string",
              "description": "Type of managed service identity (either system assigned, or none).",
              "enum": [
                "None",
                "SystemAssigned"
              ],
              "x-ms-enum": {
                "name": "SystemAssignedServiceIdentityType",
                "modelAsString": true
              }
            }
          },
          "required": [
            "type"
          ]
        },
        "tags": {
          "type": "object",
          "description": "Resource tags.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "properties": {
          "description": "The resource-specific properties for this resource.",
          "x-ms-client-flatten": true,
          "type": "object",
          "properties": {
            "messaging": {
              "description": "Assigned and unassigned messaging endpoints.",
              "type": "object",
              "properties": {
                "endpoints": {
                  "type": "object",
                  "description": "Dictionary of messaging endpoints.",
                  "additionalProperties": {
                    "type": "object",
                    "description": "Namespace messaging endpoint model used by a device to connect to a service.",
                    "properties": {
                      "endpointType": {
                        "type": "string",
                        "description": "Type of connection used for messaging endpoint."
                      },
                      "address": {
                        "type": "string",
                        "description": "The endpoint address to connect to."
                      },
                      "resourceId": {
                        "type": "string",
                        "description": "The messaging endpoint Azure resource Id."
                      }
                    },
                    "required": [
                      "address"
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "NamespaceUpdateProperties": {
      "type": "object",
      "description": "The updatable properties of the Namespace.",
      "properties": {
        "messaging": {
          "description": "Assigned and unassigned messaging endpoints.",
          "type": "object",
          "properties": {
            "endpoints": {
              "type": "object",
              "description": "Dictionary of messaging endpoints.",
              "additionalProperties": {
                "type": "object",
                "description": "Namespace messaging endpoint model used by a device to connect to a service.",
                "properties": {
                  "endpointType": {
                    "type": "string",
                    "description": "Type of connection used for messaging endpoint."
                  },
                  "address": {
                    "type": "string",
                    "description": "The endpoint address to connect to."
                  },
                  "resourceId": {
                    "type": "string",
                    "description": "The messaging endpoint Azure resource Id."
                  }
                },
                "required": [
                  "address"
                ]
              }
            }
          }
        }
      }
    },
    "OutboundEndpoints": {
      "type": "object",
      "description": "Property bag contains the device's outbound endpoints",
      "properties": {
        "assigned": {
          "type": "object",
          "description": "Endpoints the device can connect to.",
          "additionalProperties": {
            "type": "object",
            "description": "Device messaging endpoint model.",
            "properties": {
              "endpointType": {
                "type": "string",
                "description": "Type of connection used for the messaging endpoint."
              },
              "address": {
                "type": "string",
                "description": "The endpoint address to connect to."
              }
            },
            "required": [
              "address"
            ]
          }
        },
        "unassigned": {
          "type": "object",
          "description": "Set of most recently removed endpoints.",
          "additionalProperties": {
            "type": "object",
            "description": "Device messaging endpoint model.",
            "properties": {
              "endpointType": {
                "type": "string",
                "description": "Type of connection used for the messaging endpoint."
              },
              "address": {
                "type": "string",
                "description": "The endpoint address to connect to."
              }
            },
            "required": [
              "address"
            ]
          }
        }
      },
      "required": [
        "assigned"
      ]
    },
    "OutboundEndpointsUpdate": {
      "type": "object",
      "description": "Property bag contains the device's outbound endpoints",
      "properties": {
        "assigned": {
          "type": "object",
          "description": "Endpoints the device can connect to.",
          "additionalProperties": {
            "type": "object",
            "description": "Device messaging endpoint model.",
            "properties": {
              "endpointType": {
                "type": "string",
                "description": "Type of connection used for the messaging endpoint."
              },
              "address": {
                "type": "string",
                "description": "The endpoint address to connect to."
              }
            }
          }
        },
        "unassigned": {
          "type": "object",
          "description": "Set of most recently removed endpoints.",
          "additionalProperties": {
            "type": "object",
            "description": "Device messaging endpoint model.",
            "properties": {
              "endpointType": {
                "type": "string",
                "description": "Type of connection used for the messaging endpoint."
              },
              "address": {
                "type": "string",
                "description": "The endpoint address to connect to."
              }
            }
          }
        }
      }
    },
    "ProvisioningState": {
      "type": "string",
      "description": "The provisioning status of the resource.",
      "enum": [
        "Succeeded",
        "Failed",
        "Canceled",
        "Accepted",
        "Deleting"
      ],
      "x-ms-enum": {
        "name": "ProvisioningState",
        "modelAsString": true,
        "values": [
          {
            "name": "Succeeded",
            "value": "Succeeded",
            "description": "Resource has been created."
          },
          {
            "name": "Failed",
            "value": "Failed",
            "description": "Resource creation failed."
          },
          {
            "name": "Canceled",
            "value": "Canceled",
            "description": "Resource creation was canceled."
          },
          {
            "name": "Accepted",
            "value": "Accepted",
            "description": "Resource has been accepted by the server."
          },
          {
            "name": "Deleting",
            "value": "Deleting",
            "description": "Resource is deleting."
          }
        ]
      },
      "readOnly": true
    },
    "Schema": {
      "type": "object",
      "description": "Schema definition.",
      "properties": {
        "id": {
          "type": "string",
          "format": "arm-id",
          "description": "Fully qualified resource ID for the resource. E.g. \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}\"",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "The name of the resource",
          "readOnly": true
        },
        "type": {
          "type": "string",
          "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
          "readOnly": true
        },
        "systemData": {
          "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
          "readOnly": true,
          "type": "object",
          "properties": {
            "createdBy": {
              "type": "string",
              "description": "The identity that created the resource."
            },
            "createdByType": {
              "type": "string",
              "description": "The type of identity that created the resource.",
              "enum": [
                "User",
                "Application",
                "ManagedIdentity",
                "Key"
              ],
              "x-ms-enum": {
                "name": "createdByType",
                "modelAsString": true
              }
            },
            "createdAt": {
              "type": "string",
              "format": "date-time",
              "description": "The timestamp of resource creation (UTC)."
            },
            "lastModifiedBy": {
              "type": "string",
              "description": "The identity that last modified the resource."
            },
            "lastModifiedByType": {
              "type": "string",
              "description": "The type of identity that last modified the resource.",
              "enum": [
                "User",
                "Application",
                "ManagedIdentity",
                "Key"
              ],
              "x-ms-enum": {
                "name": "createdByType",
                "modelAsString": true
              }
            },
            "lastModifiedAt": {
              "type": "string",
              "format": "date-time",
              "description": "The timestamp of resource last modification (UTC)"
            }
          }
        },
        "properties": {
          "description": "The resource-specific properties for this resource.",
          "x-ms-client-flatten": true,
          "type": "object",
          "properties": {
            "uuid": {
              "type": "string",
              "description": "Globally unique, immutable, non-reusable id.",
              "readOnly": true
            },
            "displayName": {
              "type": "string",
              "description": "Human-readable display name."
            },
            "description": {
              "type": "string",
              "description": "Human-readable description of the schema."
            },
            "format": {
              "description": "Format of the schema.",
              "x-ms-mutability": [
                "read",
                "create"
              ],
              "type": "string",
              "enum": [
                "JsonSchema/draft-07",
                "Delta/1.0"
              ],
              "x-ms-enum": {
                "name": "Format",
                "modelAsString": true,
                "values": [
                  {
                    "name": "JsonSchema_draft7",
                    "value": "JsonSchema/draft-07",
                    "description": "JSON Schema version draft 7 format"
                  },
                  {
                    "name": "Delta_1_0",
                    "value": "Delta/1.0",
                    "description": "Delta format"
                  }
                ]
              }
            },
            "schemaType": {
              "description": "Type of the schema.",
              "x-ms-mutability": [
                "read",
                "create"
              ],
              "type": "string",
              "enum": [
                "MessageSchema"
              ],
              "x-ms-enum": {
                "name": "SchemaType",
                "modelAsString": true,
                "values": [
                  {
                    "name": "MessageSchema",
                    "value": "MessageSchema",
                    "description": "Message Schema schema type"
                  }
                ]
              }
            },
            "provisioningState": {
              "description": "Provisioning state of the resource.",
              "readOnly": true,
              "type": "string",
              "enum": [
                "Succeeded",
                "Failed",
                "Canceled",
                "Accepted",
                "Deleting"
              ],
              "x-ms-enum": {
                "name": "ProvisioningState",
                "modelAsString": true,
                "values": [
                  {
                    "name": "Succeeded",
                    "value": "Succeeded",
                    "description": "Resource has been created."
                  },
                  {
                    "name": "Failed",
                    "value": "Failed",
                    "description": "Resource creation failed."
                  },
                  {
                    "name": "Canceled",
                    "value": "Canceled",
                    "description": "Resource creation was canceled."
                  },
                  {
                    "name": "Accepted",
                    "value": "Accepted",
                    "description": "Resource has been accepted by the server."
                  },
                  {
                    "name": "Deleting",
                    "value": "Deleting",
                    "description": "Resource is deleting."
                  }
                ]
              }
            },
            "tags": {
              "type": "object",
              "description": "Schema tags.",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          "required": [
            "format",
            "schemaType"
          ]
        }
      }
    },
    "SchemaListResult": {
      "type": "object",
      "description": "The response of a Schema list operation.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The Schema items on this page",
          "items": {
            "type": "object",
            "description": "Schema definition.",
            "properties": {
              "id": {
                "type": "string",
                "format": "arm-id",
                "description": "Fully qualified resource ID for the resource. E.g. \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}\"",
                "readOnly": true
              },
              "name": {
                "type": "string",
                "description": "The name of the resource",
                "readOnly": true
              },
              "type": {
                "type": "string",
                "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                "readOnly": true
              },
              "systemData": {
                "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                "readOnly": true,
                "type": "object",
                "properties": {
                  "createdBy": {
                    "type": "string",
                    "description": "The identity that created the resource."
                  },
                  "createdByType": {
                    "type": "string",
                    "description": "The type of identity that created the resource.",
                    "enum": [
                      "User",
                      "Application",
                      "ManagedIdentity",
                      "Key"
                    ],
                    "x-ms-enum": {
                      "name": "createdByType",
                      "modelAsString": true
                    }
                  },
                  "createdAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp of resource creation (UTC)."
                  },
                  "lastModifiedBy": {
                    "type": "string",
                    "description": "The identity that last modified the resource."
                  },
                  "lastModifiedByType": {
                    "type": "string",
                    "description": "The type of identity that last modified the resource.",
                    "enum": [
                      "User",
                      "Application",
                      "ManagedIdentity",
                      "Key"
                    ],
                    "x-ms-enum": {
                      "name": "createdByType",
                      "modelAsString": true
                    }
                  },
                  "lastModifiedAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp of resource last modification (UTC)"
                  }
                }
              },
              "properties": {
                "description": "The resource-specific properties for this resource.",
                "x-ms-client-flatten": true,
                "type": "object",
                "properties": {
                  "uuid": {
                    "type": "string",
                    "description": "Globally unique, immutable, non-reusable id.",
                    "readOnly": true
                  },
                  "displayName": {
                    "type": "string",
                    "description": "Human-readable display name."
                  },
                  "description": {
                    "type": "string",
                    "description": "Human-readable description of the schema."
                  },
                  "format": {
                    "description": "Format of the schema.",
                    "x-ms-mutability": [
                      "read",
                      "create"
                    ],
                    "type": "string",
                    "enum": [
                      "JsonSchema/draft-07",
                      "Delta/1.0"
                    ],
                    "x-ms-enum": {
                      "name": "Format",
                      "modelAsString": true,
                      "values": [
                        {
                          "name": "JsonSchema_draft7",
                          "value": "JsonSchema/draft-07",
                          "description": "JSON Schema version draft 7 format"
                        },
                        {
                          "name": "Delta_1_0",
                          "value": "Delta/1.0",
                          "description": "Delta format"
                        }
                      ]
                    }
                  },
                  "schemaType": {
                    "description": "Type of the schema.",
                    "x-ms-mutability": [
                      "read",
                      "create"
                    ],
                    "type": "string",
                    "enum": [
                      "MessageSchema"
                    ],
                    "x-ms-enum": {
                      "name": "SchemaType",
                      "modelAsString": true,
                      "values": [
                        {
                          "name": "MessageSchema",
                          "value": "MessageSchema",
                          "description": "Message Schema schema type"
                        }
                      ]
                    }
                  },
                  "provisioningState": {
                    "description": "Provisioning state of the resource.",
                    "readOnly": true,
                    "type": "string",
                    "enum": [
                      "Succeeded",
                      "Failed",
                      "Canceled",
                      "Accepted",
                      "Deleting"
                    ],
                    "x-ms-enum": {
                      "name": "ProvisioningState",
                      "modelAsString": true,
                      "values": [
                        {
                          "name": "Succeeded",
                          "value": "Succeeded",
                          "description": "Resource has been created."
                        },
                        {
                          "name": "Failed",
                          "value": "Failed",
                          "description": "Resource creation failed."
                        },
                        {
                          "name": "Canceled",
                          "value": "Canceled",
                          "description": "Resource creation was canceled."
                        },
                        {
                          "name": "Accepted",
                          "value": "Accepted",
                          "description": "Resource has been accepted by the server."
                        },
                        {
                          "name": "Deleting",
                          "value": "Deleting",
                          "description": "Resource is deleting."
                        }
                      ]
                    }
                  },
                  "tags": {
                    "type": "object",
                    "description": "Schema tags.",
                    "additionalProperties": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "format",
                  "schemaType"
                ]
              }
            }
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "SchemaProperties": {
      "type": "object",
      "description": "Defines the schema properties.",
      "properties": {
        "uuid": {
          "type": "string",
          "description": "Globally unique, immutable, non-reusable id.",
          "readOnly": true
        },
        "displayName": {
          "type": "string",
          "description": "Human-readable display name."
        },
        "description": {
          "type": "string",
          "description": "Human-readable description of the schema."
        },
        "format": {
          "description": "Format of the schema.",
          "x-ms-mutability": [
            "read",
            "create"
          ],
          "type": "string",
          "enum": [
            "JsonSchema/draft-07",
            "Delta/1.0"
          ],
          "x-ms-enum": {
            "name": "Format",
            "modelAsString": true,
            "values": [
              {
                "name": "JsonSchema_draft7",
                "value": "JsonSchema/draft-07",
                "description": "JSON Schema version draft 7 format"
              },
              {
                "name": "Delta_1_0",
                "value": "Delta/1.0",
                "description": "Delta format"
              }
            ]
          }
        },
        "schemaType": {
          "description": "Type of the schema.",
          "x-ms-mutability": [
            "read",
            "create"
          ],
          "type": "string",
          "enum": [
            "MessageSchema"
          ],
          "x-ms-enum": {
            "name": "SchemaType",
            "modelAsString": true,
            "values": [
              {
                "name": "MessageSchema",
                "value": "MessageSchema",
                "description": "Message Schema schema type"
              }
            ]
          }
        },
        "provisioningState": {
          "description": "Provisioning state of the resource.",
          "readOnly": true,
          "type": "string",
          "enum": [
            "Succeeded",
            "Failed",
            "Canceled",
            "Accepted",
            "Deleting"
          ],
          "x-ms-enum": {
            "name": "ProvisioningState",
            "modelAsString": true,
            "values": [
              {
                "name": "Succeeded",
                "value": "Succeeded",
                "description": "Resource has been created."
              },
              {
                "name": "Failed",
                "value": "Failed",
                "description": "Resource creation failed."
              },
              {
                "name": "Canceled",
                "value": "Canceled",
                "description": "Resource creation was canceled."
              },
              {
                "name": "Accepted",
                "value": "Accepted",
                "description": "Resource has been accepted by the server."
              },
              {
                "name": "Deleting",
                "value": "Deleting",
                "description": "Resource is deleting."
              }
            ]
          }
        },
        "tags": {
          "type": "object",
          "description": "Schema tags.",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "required": [
        "format",
        "schemaType"
      ]
    },
    "SchemaRegistry": {
      "type": "object",
      "description": "Schema registry definition.",
      "properties": {
        "id": {
          "type": "string",
          "format": "arm-id",
          "description": "Fully qualified resource ID for the resource. E.g. \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}\"",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "The name of the resource",
          "readOnly": true
        },
        "type": {
          "type": "string",
          "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
          "readOnly": true
        },
        "systemData": {
          "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
          "readOnly": true,
          "type": "object",
          "properties": {
            "createdBy": {
              "type": "string",
              "description": "The identity that created the resource."
            },
            "createdByType": {
              "type": "string",
              "description": "The type of identity that created the resource.",
              "enum": [
                "User",
                "Application",
                "ManagedIdentity",
                "Key"
              ],
              "x-ms-enum": {
                "name": "createdByType",
                "modelAsString": true
              }
            },
            "createdAt": {
              "type": "string",
              "format": "date-time",
              "description": "The timestamp of resource creation (UTC)."
            },
            "lastModifiedBy": {
              "type": "string",
              "description": "The identity that last modified the resource."
            },
            "lastModifiedByType": {
              "type": "string",
              "description": "The type of identity that last modified the resource.",
              "enum": [
                "User",
                "Application",
                "ManagedIdentity",
                "Key"
              ],
              "x-ms-enum": {
                "name": "createdByType",
                "modelAsString": true
              }
            },
            "lastModifiedAt": {
              "type": "string",
              "format": "date-time",
              "description": "The timestamp of resource last modification (UTC)"
            }
          }
        },
        "tags": {
          "type": "object",
          "description": "Resource tags.",
          "additionalProperties": {
            "type": "string"
          },
          "x-ms-mutability": [
            "read",
            "create",
            "update"
          ]
        },
        "location": {
          "type": "string",
          "description": "The geo-location where the resource lives",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "properties": {
          "description": "The resource-specific properties for this resource.",
          "x-ms-client-flatten": true,
          "type": "object",
          "properties": {
            "uuid": {
              "type": "string",
              "description": "Globally unique, immutable, non-reusable id.",
              "readOnly": true
            },
            "namespace": {
              "type": "string",
              "description": "Schema registry namespace. Uniquely identifies a schema registry within a tenant.",
              "maxLength": 32,
              "pattern": "^[a-z0-9][a-z0-9-]*[a-z0-9]$",
              "x-ms-mutability": [
                "read",
                "create"
              ]
            },
            "displayName": {
              "type": "string",
              "description": "Human-readable display name."
            },
            "description": {
              "type": "string",
              "description": "Human-readable description of the schema registry."
            },
            "storageAccountContainerUrl": {
              "type": "string",
              "description": "The Storage Account's Container URL where schemas will be stored.",
              "x-ms-mutability": [
                "read",
                "create"
              ]
            },
            "provisioningState": {
              "description": "Provisioning state of the resource.",
              "readOnly": true,
              "type": "string",
              "enum": [
                "Succeeded",
                "Failed",
                "Canceled",
                "Accepted",
                "Deleting"
              ],
              "x-ms-enum": {
                "name": "ProvisioningState",
                "modelAsString": true,
                "values": [
                  {
                    "name": "Succeeded",
                    "value": "Succeeded",
                    "description": "Resource has been created."
                  },
                  {
                    "name": "Failed",
                    "value": "Failed",
                    "description": "Resource creation failed."
                  },
                  {
                    "name": "Canceled",
                    "value": "Canceled",
                    "description": "Resource creation was canceled."
                  },
                  {
                    "name": "Accepted",
                    "value": "Accepted",
                    "description": "Resource has been accepted by the server."
                  },
                  {
                    "name": "Deleting",
                    "value": "Deleting",
                    "description": "Resource is deleting."
                  }
                ]
              }
            }
          },
          "required": [
            "namespace",
            "storageAccountContainerUrl"
          ]
        },
        "identity": {
          "description": "The managed service identities assigned to this resource.",
          "type": "object",
          "properties": {
            "principalId": {
              "type": "string",
              "format": "uuid",
              "description": "The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.",
              "readOnly": true
            },
            "tenantId": {
              "type": "string",
              "format": "uuid",
              "description": "The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.",
              "readOnly": true
            },
            "type": {
              "type": "string",
              "description": "Type of managed service identity (either system assigned, or none).",
              "enum": [
                "None",
                "SystemAssigned"
              ],
              "x-ms-enum": {
                "name": "SystemAssignedServiceIdentityType",
                "modelAsString": true
              }
            }
          },
          "required": [
            "type"
          ]
        }
      }
    },
    "SchemaRegistryListResult": {
      "type": "object",
      "description": "The response of a SchemaRegistry list operation.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The SchemaRegistry items on this page",
          "items": {
            "type": "object",
            "description": "Schema registry definition.",
            "properties": {
              "id": {
                "type": "string",
                "format": "arm-id",
                "description": "Fully qualified resource ID for the resource. E.g. \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}\"",
                "readOnly": true
              },
              "name": {
                "type": "string",
                "description": "The name of the resource",
                "readOnly": true
              },
              "type": {
                "type": "string",
                "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                "readOnly": true
              },
              "systemData": {
                "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                "readOnly": true,
                "type": "object",
                "properties": {
                  "createdBy": {
                    "type": "string",
                    "description": "The identity that created the resource."
                  },
                  "createdByType": {
                    "type": "string",
                    "description": "The type of identity that created the resource.",
                    "enum": [
                      "User",
                      "Application",
                      "ManagedIdentity",
                      "Key"
                    ],
                    "x-ms-enum": {
                      "name": "createdByType",
                      "modelAsString": true
                    }
                  },
                  "createdAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp of resource creation (UTC)."
                  },
                  "lastModifiedBy": {
                    "type": "string",
                    "description": "The identity that last modified the resource."
                  },
                  "lastModifiedByType": {
                    "type": "string",
                    "description": "The type of identity that last modified the resource.",
                    "enum": [
                      "User",
                      "Application",
                      "ManagedIdentity",
                      "Key"
                    ],
                    "x-ms-enum": {
                      "name": "createdByType",
                      "modelAsString": true
                    }
                  },
                  "lastModifiedAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp of resource last modification (UTC)"
                  }
                }
              },
              "tags": {
                "type": "object",
                "description": "Resource tags.",
                "additionalProperties": {
                  "type": "string"
                },
                "x-ms-mutability": [
                  "read",
                  "create",
                  "update"
                ]
              },
              "location": {
                "type": "string",
                "description": "The geo-location where the resource lives",
                "x-ms-mutability": [
                  "read",
                  "create"
                ]
              },
              "properties": {
                "description": "The resource-specific properties for this resource.",
                "x-ms-client-flatten": true,
                "type": "object",
                "properties": {
                  "uuid": {
                    "type": "string",
                    "description": "Globally unique, immutable, non-reusable id.",
                    "readOnly": true
                  },
                  "namespace": {
                    "type": "string",
                    "description": "Schema registry namespace. Uniquely identifies a schema registry within a tenant.",
                    "maxLength": 32,
                    "pattern": "^[a-z0-9][a-z0-9-]*[a-z0-9]$",
                    "x-ms-mutability": [
                      "read",
                      "create"
                    ]
                  },
                  "displayName": {
                    "type": "string",
                    "description": "Human-readable display name."
                  },
                  "description": {
                    "type": "string",
                    "description": "Human-readable description of the schema registry."
                  },
                  "storageAccountContainerUrl": {
                    "type": "string",
                    "description": "The Storage Account's Container URL where schemas will be stored.",
                    "x-ms-mutability": [
                      "read",
                      "create"
                    ]
                  },
                  "provisioningState": {
                    "description": "Provisioning state of the resource.",
                    "readOnly": true,
                    "type": "string",
                    "enum": [
                      "Succeeded",
                      "Failed",
                      "Canceled",
                      "Accepted",
                      "Deleting"
                    ],
                    "x-ms-enum": {
                      "name": "ProvisioningState",
                      "modelAsString": true,
                      "values": [
                        {
                          "name": "Succeeded",
                          "value": "Succeeded",
                          "description": "Resource has been created."
                        },
                        {
                          "name": "Failed",
                          "value": "Failed",
                          "description": "Resource creation failed."
                        },
                        {
                          "name": "Canceled",
                          "value": "Canceled",
                          "description": "Resource creation was canceled."
                        },
                        {
                          "name": "Accepted",
                          "value": "Accepted",
                          "description": "Resource has been accepted by the server."
                        },
                        {
                          "name": "Deleting",
                          "value": "Deleting",
                          "description": "Resource is deleting."
                        }
                      ]
                    }
                  }
                },
                "required": [
                  "namespace",
                  "storageAccountContainerUrl"
                ]
              },
              "identity": {
                "description": "The managed service identities assigned to this resource.",
                "type": "object",
                "properties": {
                  "principalId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.",
                    "readOnly": true
                  },
                  "tenantId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.",
                    "readOnly": true
                  },
                  "type": {
                    "type": "string",
                    "description": "Type of managed service identity (either system assigned, or none).",
                    "enum": [
                      "None",
                      "SystemAssigned"
                    ],
                    "x-ms-enum": {
                      "name": "SystemAssignedServiceIdentityType",
                      "modelAsString": true
                    }
                  }
                },
                "required": [
                  "type"
                ]
              }
            }
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "SchemaRegistryProperties": {
      "type": "object",
      "description": "Defines the schema registry properties.",
      "properties": {
        "uuid": {
          "type": "string",
          "description": "Globally unique, immutable, non-reusable id.",
          "readOnly": true
        },
        "namespace": {
          "type": "string",
          "description": "Schema registry namespace. Uniquely identifies a schema registry within a tenant.",
          "maxLength": 32,
          "pattern": "^[a-z0-9][a-z0-9-]*[a-z0-9]$",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "displayName": {
          "type": "string",
          "description": "Human-readable display name."
        },
        "description": {
          "type": "string",
          "description": "Human-readable description of the schema registry."
        },
        "storageAccountContainerUrl": {
          "type": "string",
          "description": "The Storage Account's Container URL where schemas will be stored.",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "provisioningState": {
          "description": "Provisioning state of the resource.",
          "readOnly": true,
          "type": "string",
          "enum": [
            "Succeeded",
            "Failed",
            "Canceled",
            "Accepted",
            "Deleting"
          ],
          "x-ms-enum": {
            "name": "ProvisioningState",
            "modelAsString": true,
            "values": [
              {
                "name": "Succeeded",
                "value": "Succeeded",
                "description": "Resource has been created."
              },
              {
                "name": "Failed",
                "value": "Failed",
                "description": "Resource creation failed."
              },
              {
                "name": "Canceled",
                "value": "Canceled",
                "description": "Resource creation was canceled."
              },
              {
                "name": "Accepted",
                "value": "Accepted",
                "description": "Resource has been accepted by the server."
              },
              {
                "name": "Deleting",
                "value": "Deleting",
                "description": "Resource is deleting."
              }
            ]
          }
        }
      },
      "required": [
        "namespace",
        "storageAccountContainerUrl"
      ]
    },
    "SchemaRegistryUpdate": {
      "type": "object",
      "description": "The type used for update operations of the SchemaRegistry.",
      "properties": {
        "identity": {
          "description": "The managed service identities assigned to this resource.",
          "type": "object",
          "properties": {
            "principalId": {
              "type": "string",
              "format": "uuid",
              "description": "The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.",
              "readOnly": true
            },
            "tenantId": {
              "type": "string",
              "format": "uuid",
              "description": "The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.",
              "readOnly": true
            },
            "type": {
              "type": "string",
              "description": "Type of managed service identity (either system assigned, or none).",
              "enum": [
                "None",
                "SystemAssigned"
              ],
              "x-ms-enum": {
                "name": "SystemAssignedServiceIdentityType",
                "modelAsString": true
              }
            }
          },
          "required": [
            "type"
          ]
        },
        "tags": {
          "type": "object",
          "description": "Resource tags.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "properties": {
          "description": "The resource-specific properties for this resource.",
          "x-ms-client-flatten": true,
          "type": "object",
          "properties": {
            "displayName": {
              "type": "string",
              "description": "Human-readable display name."
            },
            "description": {
              "type": "string",
              "description": "Human-readable description of the schema registry."
            }
          }
        }
      }
    },
    "SchemaRegistryUpdateProperties": {
      "type": "object",
      "description": "The updatable properties of the SchemaRegistry.",
      "properties": {
        "displayName": {
          "type": "string",
          "description": "Human-readable display name."
        },
        "description": {
          "type": "string",
          "description": "Human-readable description of the schema registry."
        }
      }
    },
    "SchemaType": {
      "type": "string",
      "description": "Defines the schema type.",
      "enum": [
        "MessageSchema"
      ],
      "x-ms-enum": {
        "name": "SchemaType",
        "modelAsString": true,
        "values": [
          {
            "name": "MessageSchema",
            "value": "MessageSchema",
            "description": "Message Schema schema type"
          }
        ]
      }
    },
    "SchemaVersion": {
      "type": "object",
      "description": "Schema version's definition.",
      "properties": {
        "id": {
          "type": "string",
          "format": "arm-id",
          "description": "Fully qualified resource ID for the resource. E.g. \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}\"",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "The name of the resource",
          "readOnly": true
        },
        "type": {
          "type": "string",
          "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
          "readOnly": true
        },
        "systemData": {
          "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
          "readOnly": true,
          "type": "object",
          "properties": {
            "createdBy": {
              "type": "string",
              "description": "The identity that created the resource."
            },
            "createdByType": {
              "type": "string",
              "description": "The type of identity that created the resource.",
              "enum": [
                "User",
                "Application",
                "ManagedIdentity",
                "Key"
              ],
              "x-ms-enum": {
                "name": "createdByType",
                "modelAsString": true
              }
            },
            "createdAt": {
              "type": "string",
              "format": "date-time",
              "description": "The timestamp of resource creation (UTC)."
            },
            "lastModifiedBy": {
              "type": "string",
              "description": "The identity that last modified the resource."
            },
            "lastModifiedByType": {
              "type": "string",
              "description": "The type of identity that last modified the resource.",
              "enum": [
                "User",
                "Application",
                "ManagedIdentity",
                "Key"
              ],
              "x-ms-enum": {
                "name": "createdByType",
                "modelAsString": true
              }
            },
            "lastModifiedAt": {
              "type": "string",
              "format": "date-time",
              "description": "The timestamp of resource last modification (UTC)"
            }
          }
        },
        "properties": {
          "description": "The resource-specific properties for this resource.",
          "x-ms-client-flatten": true,
          "type": "object",
          "properties": {
            "uuid": {
              "type": "string",
              "description": "Globally unique, immutable, non-reusable id.",
              "readOnly": true
            },
            "description": {
              "type": "string",
              "description": "Human-readable description of the schema."
            },
            "schemaContent": {
              "type": "string",
              "description": "Schema content.",
              "x-ms-mutability": [
                "read",
                "create"
              ]
            },
            "hash": {
              "type": "string",
              "description": "Hash of the schema content.",
              "readOnly": true
            },
            "provisioningState": {
              "description": "Provisioning state of the resource.",
              "readOnly": true,
              "type": "string",
              "enum": [
                "Succeeded",
                "Failed",
                "Canceled",
                "Accepted",
                "Deleting"
              ],
              "x-ms-enum": {
                "name": "ProvisioningState",
                "modelAsString": true,
                "values": [
                  {
                    "name": "Succeeded",
                    "value": "Succeeded",
                    "description": "Resource has been created."
                  },
                  {
                    "name": "Failed",
                    "value": "Failed",
                    "description": "Resource creation failed."
                  },
                  {
                    "name": "Canceled",
                    "value": "Canceled",
                    "description": "Resource creation was canceled."
                  },
                  {
                    "name": "Accepted",
                    "value": "Accepted",
                    "description": "Resource has been accepted by the server."
                  },
                  {
                    "name": "Deleting",
                    "value": "Deleting",
                    "description": "Resource is deleting."
                  }
                ]
              }
            }
          },
          "required": [
            "schemaContent"
          ]
        }
      }
    },
    "SchemaVersionListResult": {
      "type": "object",
      "description": "The response of a SchemaVersion list operation.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The SchemaVersion items on this page",
          "items": {
            "type": "object",
            "description": "Schema version's definition.",
            "properties": {
              "id": {
                "type": "string",
                "format": "arm-id",
                "description": "Fully qualified resource ID for the resource. E.g. \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}\"",
                "readOnly": true
              },
              "name": {
                "type": "string",
                "description": "The name of the resource",
                "readOnly": true
              },
              "type": {
                "type": "string",
                "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                "readOnly": true
              },
              "systemData": {
                "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                "readOnly": true,
                "type": "object",
                "properties": {
                  "createdBy": {
                    "type": "string",
                    "description": "The identity that created the resource."
                  },
                  "createdByType": {
                    "type": "string",
                    "description": "The type of identity that created the resource.",
                    "enum": [
                      "User",
                      "Application",
                      "ManagedIdentity",
                      "Key"
                    ],
                    "x-ms-enum": {
                      "name": "createdByType",
                      "modelAsString": true
                    }
                  },
                  "createdAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp of resource creation (UTC)."
                  },
                  "lastModifiedBy": {
                    "type": "string",
                    "description": "The identity that last modified the resource."
                  },
                  "lastModifiedByType": {
                    "type": "string",
                    "description": "The type of identity that last modified the resource.",
                    "enum": [
                      "User",
                      "Application",
                      "ManagedIdentity",
                      "Key"
                    ],
                    "x-ms-enum": {
                      "name": "createdByType",
                      "modelAsString": true
                    }
                  },
                  "lastModifiedAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp of resource last modification (UTC)"
                  }
                }
              },
              "properties": {
                "description": "The resource-specific properties for this resource.",
                "x-ms-client-flatten": true,
                "type": "object",
                "properties": {
                  "uuid": {
                    "type": "string",
                    "description": "Globally unique, immutable, non-reusable id.",
                    "readOnly": true
                  },
                  "description": {
                    "type": "string",
                    "description": "Human-readable description of the schema."
                  },
                  "schemaContent": {
                    "type": "string",
                    "description": "Schema content.",
                    "x-ms-mutability": [
                      "read",
                      "create"
                    ]
                  },
                  "hash": {
                    "type": "string",
                    "description": "Hash of the schema content.",
                    "readOnly": true
                  },
                  "provisioningState": {
                    "description": "Provisioning state of the resource.",
                    "readOnly": true,
                    "type": "string",
                    "enum": [
                      "Succeeded",
                      "Failed",
                      "Canceled",
                      "Accepted",
                      "Deleting"
                    ],
                    "x-ms-enum": {
                      "name": "ProvisioningState",
                      "modelAsString": true,
                      "values": [
                        {
                          "name": "Succeeded",
                          "value": "Succeeded",
                          "description": "Resource has been created."
                        },
                        {
                          "name": "Failed",
                          "value": "Failed",
                          "description": "Resource creation failed."
                        },
                        {
                          "name": "Canceled",
                          "value": "Canceled",
                          "description": "Resource creation was canceled."
                        },
                        {
                          "name": "Accepted",
                          "value": "Accepted",
                          "description": "Resource has been accepted by the server."
                        },
                        {
                          "name": "Deleting",
                          "value": "Deleting",
                          "description": "Resource is deleting."
                        }
                      ]
                    }
                  }
                },
                "required": [
                  "schemaContent"
                ]
              }
            }
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "SchemaVersionProperties": {
      "type": "object",
      "description": "Defines the schema version properties.",
      "properties": {
        "uuid": {
          "type": "string",
          "description": "Globally unique, immutable, non-reusable id.",
          "readOnly": true
        },
        "description": {
          "type": "string",
          "description": "Human-readable description of the schema."
        },
        "schemaContent": {
          "type": "string",
          "description": "Schema content.",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "hash": {
          "type": "string",
          "description": "Hash of the schema content.",
          "readOnly": true
        },
        "provisioningState": {
          "description": "Provisioning state of the resource.",
          "readOnly": true,
          "type": "string",
          "enum": [
            "Succeeded",
            "Failed",
            "Canceled",
            "Accepted",
            "Deleting"
          ],
          "x-ms-enum": {
            "name": "ProvisioningState",
            "modelAsString": true,
            "values": [
              {
                "name": "Succeeded",
                "value": "Succeeded",
                "description": "Resource has been created."
              },
              {
                "name": "Failed",
                "value": "Failed",
                "description": "Resource creation failed."
              },
              {
                "name": "Canceled",
                "value": "Canceled",
                "description": "Resource creation was canceled."
              },
              {
                "name": "Accepted",
                "value": "Accepted",
                "description": "Resource has been accepted by the server."
              },
              {
                "name": "Deleting",
                "value": "Deleting",
                "description": "Resource is deleting."
              }
            ]
          }
        }
      },
      "required": [
        "schemaContent"
      ]
    },
    "Scope": {
      "type": "string",
      "description": "Scope of the migrate resources operation.",
      "enum": [
        "Resources"
      ],
      "x-ms-enum": {
        "name": "Scope",
        "modelAsString": true,
        "values": [
          {
            "name": "Resources",
            "value": "Resources",
            "description": "Scoping the migration to resourceIds provided"
          }
        ]
      }
    },
    "StatusConfig": {
      "type": "object",
      "description": "Defines the status config properties.",
      "properties": {
        "version": {
          "type": "integer",
          "format": "int64",
          "description": "A read-only incremental counter indicating the number of times the configuration has been modified from the perspective of the current actual (edge) state of the CRD. Edge would be the only writer of this value and would sync back up to the cloud. In steady state, this should equal version.",
          "readOnly": true
        },
        "lastTransitionTime": {
          "type": "string",
          "format": "date-time",
          "description": "A read-only timestamp indicating the last time the configuration has been modified from the perspective of the current actual (edge) state of the CRD. Edge would be the only writer of this value and would sync back up to the cloud.",
          "readOnly": true
        },
        "error": {
          "description": "Object to transfer and persist errors that originate from the edge.",
          "readOnly": true,
          "type": "object",
          "properties": {
            "code": {
              "type": "string",
              "description": "Error code for classification of errors (ex: '400', '404', '500', etc.).",
              "readOnly": true
            },
            "message": {
              "type": "string",
              "description": "Human-readable helpful error message to provide additional context for error (e.g.,: “Capability ID 'foo' does not exist”).",
              "readOnly": true
            },
            "details": {
              "type": "array",
              "description": "Array of error details that describe the status of each error.",
              "items": {
                "type": "object",
                "description": "Defines the error details properties.",
                "properties": {
                  "code": {
                    "type": "string",
                    "description": "Multi-part error code for classification and root causing of errors (ex: 400.200.100.432).",
                    "readOnly": true
                  },
                  "message": {
                    "type": "string",
                    "description": "Human-readable helpful error message to provide additional context for error (ex: “Authentication method not supported”).",
                    "readOnly": true
                  },
                  "info": {
                    "type": "string",
                    "description": "Human-readable helpful detailed text context for debugging (ex: “The following mechanisms are supported...”).",
                    "readOnly": true
                  },
                  "correlationId": {
                    "type": "string",
                    "description": "Unique identifier for the transaction to aid in debugging.",
                    "readOnly": true
                  }
                }
              },
              "readOnly": true,
              "x-ms-identifiers": []
            }
          }
        }
      }
    },
    "StatusError": {
      "type": "object",
      "description": "Defines the status config error properties.",
      "properties": {
        "code": {
          "type": "string",
          "description": "Error code for classification of errors (ex: '400', '404', '500', etc.).",
          "readOnly": true
        },
        "message": {
          "type": "string",
          "description": "Human-readable helpful error message to provide additional context for error (e.g.,: “Capability ID 'foo' does not exist”).",
          "readOnly": true
        },
        "details": {
          "type": "array",
          "description": "Array of error details that describe the status of each error.",
          "items": {
            "type": "object",
            "description": "Defines the error details properties.",
            "properties": {
              "code": {
                "type": "string",
                "description": "Multi-part error code for classification and root causing of errors (ex: 400.200.100.432).",
                "readOnly": true
              },
              "message": {
                "type": "string",
                "description": "Human-readable helpful error message to provide additional context for error (ex: “Authentication method not supported”).",
                "readOnly": true
              },
              "info": {
                "type": "string",
                "description": "Human-readable helpful detailed text context for debugging (ex: “The following mechanisms are supported...”).",
                "readOnly": true
              },
              "correlationId": {
                "type": "string",
                "description": "Unique identifier for the transaction to aid in debugging.",
                "readOnly": true
              }
            }
          },
          "readOnly": true,
          "x-ms-identifiers": []
        }
      }
    },
    "StorageDestinationConfiguration": {
      "type": "object",
      "description": "The configuration for a storage destination.",
      "properties": {
        "path": {
          "type": "string",
          "description": "The storage destination path."
        }
      },
      "required": [
        "path"
      ]
    },
    "StreamDestination": {
      "type": "object",
      "description": "The type of the destination.",
      "properties": {
        "target": {
          "description": "Target destination.",
          "type": "string",
          "enum": [
            "Mqtt",
            "Storage"
          ],
          "x-ms-enum": {
            "name": "StreamDestinationTarget",
            "modelAsString": true,
            "values": [
              {
                "name": "Mqtt",
                "value": "Mqtt",
                "description": "MQTT target."
              },
              {
                "name": "Storage",
                "value": "Storage",
                "description": "Storage target."
              }
            ]
          }
        }
      },
      "discriminator": "target",
      "required": [
        "target"
      ]
    },
    "StreamDestinationTarget": {
      "type": "string",
      "description": "The set of supported stream destinations for an asset.",
      "enum": [
        "Mqtt",
        "Storage"
      ],
      "x-ms-enum": {
        "name": "StreamDestinationTarget",
        "modelAsString": true,
        "values": [
          {
            "name": "Mqtt",
            "value": "Mqtt",
            "description": "MQTT target."
          },
          {
            "name": "Storage",
            "value": "Storage",
            "description": "Storage target."
          }
        ]
      }
    },
    "StreamMqttDestination": {
      "type": "object",
      "description": "The type for a MQTT destination.",
      "properties": {
        "configuration": {
          "description": "The MQTT destination configuration.",
          "type": "object",
          "properties": {
            "topic": {
              "type": "string",
              "description": "The MQTT topic."
            },
            "retain": {
              "type": "string",
              "description": "When set to 'Keep', messages published to an MQTT broker will have the retain flag set. Default: 'Never'.",
              "default": "Never",
              "enum": [
                "Keep",
                "Never"
              ],
              "x-ms-enum": {
                "name": "TopicRetainType",
                "modelAsString": true,
                "values": [
                  {
                    "name": "Keep",
                    "value": "Keep",
                    "description": "Retain the messages."
                  },
                  {
                    "name": "Never",
                    "value": "Never",
                    "description": "Never retain messages."
                  }
                ]
              }
            },
            "qos": {
              "type": "string",
              "description": "The MQTT QoS setting. Defaults to QoS 1.",
              "default": "Qos1",
              "enum": [
                "Qos0",
                "Qos1"
              ],
              "x-ms-enum": {
                "name": "MqttDestinationQos",
                "modelAsString": true,
                "values": [
                  {
                    "name": "Qos0",
                    "value": "Qos0",
                    "description": "QoS 0."
                  },
                  {
                    "name": "Qos1",
                    "value": "Qos1",
                    "description": "QoS 1."
                  }
                ]
              }
            },
            "ttl": {
              "type": "integer",
              "format": "int64",
              "description": "The MQTT TTL setting."
            }
          },
          "required": [
            "topic"
          ]
        }
      },
      "required": [
        "configuration"
      ],
      "allOf": [
        {
          "type": "object",
          "description": "The type of the destination.",
          "properties": {
            "target": {
              "description": "Target destination.",
              "type": "string",
              "enum": [
                "Mqtt",
                "Storage"
              ],
              "x-ms-enum": {
                "name": "StreamDestinationTarget",
                "modelAsString": true,
                "values": [
                  {
                    "name": "Mqtt",
                    "value": "Mqtt",
                    "description": "MQTT target."
                  },
                  {
                    "name": "Storage",
                    "value": "Storage",
                    "description": "Storage target."
                  }
                ]
              }
            }
          },
          "discriminator": "target",
          "required": [
            "target"
          ]
        }
      ],
      "x-ms-discriminator-value": "Mqtt"
    },
    "StreamStorageDestination": {
      "type": "object",
      "description": "The type for a storage destination.",
      "properties": {
        "configuration": {
          "description": "The storage destination configuration.",
          "type": "object",
          "properties": {
            "path": {
              "type": "string",
              "description": "The storage destination path."
            }
          },
          "required": [
            "path"
          ]
        }
      },
      "required": [
        "configuration"
      ],
      "allOf": [
        {
          "type": "object",
          "description": "The type of the destination.",
          "properties": {
            "target": {
              "description": "Target destination.",
              "type": "string",
              "enum": [
                "Mqtt",
                "Storage"
              ],
              "x-ms-enum": {
                "name": "StreamDestinationTarget",
                "modelAsString": true,
                "values": [
                  {
                    "name": "Mqtt",
                    "value": "Mqtt",
                    "description": "MQTT target."
                  },
                  {
                    "name": "Storage",
                    "value": "Storage",
                    "description": "Storage target."
                  }
                ]
              }
            }
          },
          "discriminator": "target",
          "required": [
            "target"
          ]
        }
      ],
      "x-ms-discriminator-value": "Storage"
    },
    "Topic": {
      "type": "object",
      "description": "Object that describes the topic information.",
      "properties": {
        "path": {
          "type": "string",
          "description": "The topic path for messages published to an MQTT broker."
        },
        "retain": {
          "type": "string",
          "description": "When set to 'Keep', messages published to an MQTT broker will have the retain flag set. Default: 'Never'.",
          "default": "Never",
          "enum": [
            "Keep",
            "Never"
          ],
          "x-ms-enum": {
            "name": "TopicRetainType",
            "modelAsString": true,
            "values": [
              {
                "name": "Keep",
                "value": "Keep",
                "description": "Retain the messages."
              },
              {
                "name": "Never",
                "value": "Never",
                "description": "Never retain messages."
              }
            ]
          }
        }
      },
      "required": [
        "path"
      ]
    },
    "TopicUpdate": {
      "type": "object",
      "description": "Object that describes the topic information.",
      "properties": {
        "path": {
          "type": "string",
          "description": "The topic path for messages published to an MQTT broker."
        },
        "retain": {
          "type": "string",
          "description": "When set to 'Keep', messages published to an MQTT broker will have the retain flag set. Default: 'Never'.",
          "default": "Never",
          "enum": [
            "Keep",
            "Never"
          ],
          "x-ms-enum": {
            "name": "TopicRetainType",
            "modelAsString": true,
            "values": [
              {
                "name": "Keep",
                "value": "Keep",
                "description": "Retain the messages."
              },
              {
                "name": "Never",
                "value": "Never",
                "description": "Never retain messages."
              }
            ]
          }
        }
      }
    },
    "TrustSettings": {
      "type": "object",
      "description": "Defines server trust settings for an endpoint.",
      "properties": {
        "trustList": {
          "type": "string",
          "description": "Defines a secret reference for certificates to trust."
        }
      }
    },
    "UsernamePasswordCredentials": {
      "type": "object",
      "description": "The credentials for authentication mode UsernamePassword.",
      "properties": {
        "usernameSecretName": {
          "type": "string",
          "description": "The name of the secret containing the username."
        },
        "passwordSecretName": {
          "type": "string",
          "description": "The name of the secret containing the password."
        }
      },
      "required": [
        "usernameSecretName",
        "passwordSecretName"
      ]
    },
    "UsernamePasswordCredentialsUpdate": {
      "type": "object",
      "description": "The credentials for authentication mode UsernamePassword.",
      "properties": {
        "usernameSecretName": {
          "type": "string",
          "description": "The name of the secret containing the username."
        },
        "passwordSecretName": {
          "type": "string",
          "description": "The name of the secret containing the password."
        }
      }
    },
    "X509CertificateCredentials": {
      "type": "object",
      "description": "The x509 certificate for authentication mode Certificate.",
      "properties": {
        "certificateSecretName": {
          "type": "string",
          "description": "The name of the secret containing the certificate and private key (e.g. stored as .der/.pem or .der/.pfx)."
        },
        "keySecretName": {
          "type": "string",
          "description": "The name of the secret containing the certificate private key in PEM or DER format."
        },
        "intermediateCertificatesSecretName": {
          "type": "string",
          "description": "The name of the secret containing the combined intermediate certificates in PEM format."
        }
      },
      "required": [
        "certificateSecretName"
      ]
    },
    "X509CertificateCredentialsUpdate": {
      "type": "object",
      "description": "The x509 certificate for authentication mode Certificate.",
      "properties": {
        "certificateSecretName": {
          "type": "string",
          "description": "The name of the secret containing the certificate and private key (e.g. stored as .der/.pem or .der/.pfx)."
        },
        "keySecretName": {
          "type": "string",
          "description": "The name of the secret containing the certificate private key in PEM or DER format."
        },
        "intermediateCertificatesSecretName": {
          "type": "string",
          "description": "The name of the secret containing the combined intermediate certificates in PEM format."
        }
      }
    },
    "X509Credentials": {
      "type": "object",
      "description": "The x509 certificate for authentication mode Certificate.",
      "properties": {
        "certificateSecretName": {
          "type": "string",
          "description": "The name of the secret containing the certificate and private key (e.g. stored as .der/.pem or .der/.pfx)."
        }
      },
      "required": [
        "certificateSecretName"
      ]
    },
    "X509CredentialsUpdate": {
      "type": "object",
      "description": "The x509 certificate for authentication mode Certificate.",
      "properties": {
        "certificateSecretName": {
          "type": "string",
          "description": "The name of the secret containing the certificate and private key (e.g. stored as .der/.pem or .der/.pfx)."
        }
      }
    }
  },
  "parameters": {}
}