{
  "swagger": "2.0",
  "info": {
    "title": "Azure iotoperationsmq",
    "version": "2023-10-04-preview-preview",
    "description": "Azure iotoperationsmq service specifications"
  },
  "host": "management.azure.com",
  "schemes": [
    "https"
  ],
  "paths": {
    "/providers/Microsoft.IoTOperationsMQ/operations": {
      "get": {
        "operationId": "Operations_List",
        "tags": [
          "Operations"
        ],
        "description": "List the operations for the provider",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "type": "object",
              "description": "A list of REST API operations supported by an Azure Resource Provider. It contains an URL link to get the next set of results.",
              "properties": {
                "value": {
                  "type": "array",
                  "description": "List of operations supported by the resource provider",
                  "items": {
                    "type": "object",
                    "title": "REST API Operation",
                    "description": "Details of a REST API operation, returned from the Resource Provider Operations API",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "The name of the operation, as per Resource-Based Access Control (RBAC). Examples: \"Microsoft.Compute/virtualMachines/write\", \"Microsoft.Compute/virtualMachines/capture/action\"",
                        "readOnly": true
                      },
                      "isDataAction": {
                        "type": "boolean",
                        "description": "Whether the operation applies to data-plane. This is \"true\" for data-plane operations and \"false\" for ARM/control-plane operations.",
                        "readOnly": true
                      },
                      "display": {
                        "type": "object",
                        "description": "Localized display information for this particular operation.",
                        "properties": {
                          "provider": {
                            "type": "string",
                            "description": "The localized friendly form of the resource provider name, e.g. \"Microsoft Monitoring Insights\" or \"Microsoft Compute\".",
                            "readOnly": true
                          },
                          "resource": {
                            "type": "string",
                            "description": "The localized friendly name of the resource type related to this operation. E.g. \"Virtual Machines\" or \"Job Schedule Collections\".",
                            "readOnly": true
                          },
                          "operation": {
                            "type": "string",
                            "description": "The concise, localized friendly name for the operation; suitable for dropdowns. E.g. \"Create or Update Virtual Machine\", \"Restart Virtual Machine\".",
                            "readOnly": true
                          },
                          "description": {
                            "type": "string",
                            "description": "The short, localized friendly description of the operation; suitable for tool tips and detailed views.",
                            "readOnly": true
                          }
                        }
                      },
                      "origin": {
                        "type": "string",
                        "description": "The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit logs UX. Default value is \"user,system\"",
                        "enum": [
                          "user",
                          "system",
                          "user,system"
                        ],
                        "x-ms-enum": {
                          "name": "Origin",
                          "modelAsString": true
                        },
                        "readOnly": true
                      },
                      "actionType": {
                        "type": "string",
                        "description": "Enum. Indicates the action type. \"Internal\" refers to actions that are for internal only APIs.",
                        "enum": [
                          "Internal"
                        ],
                        "x-ms-enum": {
                          "name": "ActionType",
                          "modelAsString": true
                        },
                        "readOnly": true
                      }
                    }
                  },
                  "readOnly": true,
                  "x-ms-identifiers": [
                    "name"
                  ]
                },
                "nextLink": {
                  "type": "string",
                  "description": "URL to get the next set of operation list results (if there are any).",
                  "readOnly": true
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.IoTOperationsMQ/mq": {
      "get": {
        "operationId": "Mq_ListBySubscription",
        "tags": [
          "Mq"
        ],
        "description": "List MqResource resources by subscription ID",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription.",
            "required": true,
            "type": "string",
            "minLength": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "type": "object",
              "description": "The response of a MqResource list operation.",
              "properties": {
                "value": {
                  "type": "array",
                  "description": "The MqResource items on this page",
                  "items": {
                    "type": "object",
                    "description": "MQ resource",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                        "readOnly": true
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the resource",
                        "readOnly": true
                      },
                      "type": {
                        "type": "string",
                        "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                        "readOnly": true
                      },
                      "systemData": {
                        "type": "object",
                        "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                        "readOnly": true,
                        "properties": {
                          "createdBy": {
                            "type": "string",
                            "description": "The identity that created the resource."
                          },
                          "createdByType": {
                            "type": "string",
                            "description": "The type of identity that created the resource.",
                            "enum": [
                              "User",
                              "Application",
                              "ManagedIdentity",
                              "Key"
                            ],
                            "x-ms-enum": {
                              "name": "createdByType",
                              "modelAsString": true
                            }
                          },
                          "createdAt": {
                            "type": "string",
                            "format": "date-time",
                            "description": "The timestamp of resource creation (UTC)."
                          },
                          "lastModifiedBy": {
                            "type": "string",
                            "description": "The identity that last modified the resource."
                          },
                          "lastModifiedByType": {
                            "type": "string",
                            "description": "The type of identity that last modified the resource.",
                            "enum": [
                              "User",
                              "Application",
                              "ManagedIdentity",
                              "Key"
                            ],
                            "x-ms-enum": {
                              "name": "createdByType",
                              "modelAsString": true
                            }
                          },
                          "lastModifiedAt": {
                            "type": "string",
                            "format": "date-time",
                            "description": "The timestamp of resource last modification (UTC)"
                          }
                        }
                      },
                      "tags": {
                        "type": "object",
                        "description": "Resource tags.",
                        "additionalProperties": {
                          "type": "string"
                        },
                        "x-ms-mutability": [
                          "read",
                          "create",
                          "update"
                        ]
                      },
                      "location": {
                        "type": "string",
                        "description": "The geo-location where the resource lives",
                        "x-ms-mutability": [
                          "read",
                          "create"
                        ]
                      },
                      "properties": {
                        "description": "The resource-specific properties for this resource.",
                        "x-ms-client-flatten": true,
                        "type": "object",
                        "properties": {
                          "provisioningState": {
                            "description": "The status of the last operation.",
                            "readOnly": true,
                            "type": "string",
                            "enum": [
                              "Succeeded",
                              "Failed",
                              "Canceled",
                              "Provisioning",
                              "Updating",
                              "Deleting",
                              "Accepted"
                            ],
                            "x-ms-enum": {
                              "name": "ProvisioningState",
                              "modelAsString": true,
                              "values": [
                                {
                                  "name": "Succeeded",
                                  "value": "Succeeded",
                                  "description": "Resource has been created."
                                },
                                {
                                  "name": "Failed",
                                  "value": "Failed",
                                  "description": "Resource creation failed."
                                },
                                {
                                  "name": "Canceled",
                                  "value": "Canceled",
                                  "description": "Resource creation was canceled."
                                },
                                {
                                  "name": "Provisioning",
                                  "value": "Provisioning",
                                  "description": "Resource is getting provisioned."
                                },
                                {
                                  "name": "Updating",
                                  "value": "Updating",
                                  "description": "Resource is Updating."
                                },
                                {
                                  "name": "Deleting",
                                  "value": "Deleting",
                                  "description": "Resource is Deleting."
                                },
                                {
                                  "name": "Accepted",
                                  "value": "Accepted",
                                  "description": "Resource has been Accepted."
                                }
                              ]
                            }
                          }
                        }
                      },
                      "extendedLocation": {
                        "description": "Extended Location",
                        "x-ms-mutability": [
                          "read",
                          "create"
                        ],
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "The name of the extended location."
                          },
                          "type": {
                            "description": "Type of ExtendedLocation.",
                            "type": "string",
                            "enum": [
                              "CustomLocation"
                            ],
                            "x-ms-enum": {
                              "name": "ExtendedLocationType",
                              "modelAsString": true,
                              "values": [
                                {
                                  "name": "CustomLocation",
                                  "value": "CustomLocation",
                                  "description": "CustomLocation type"
                                }
                              ]
                            }
                          }
                        },
                        "required": [
                          "name",
                          "type"
                        ]
                      }
                    },
                    "required": [
                      "extendedLocation"
                    ]
                  }
                },
                "nextLink": {
                  "type": "string",
                  "format": "uri",
                  "description": "The link to the next page of items"
                }
              },
              "required": [
                "value"
              ]
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTOperationsMQ/mq": {
      "get": {
        "operationId": "Mq_ListByResourceGroup",
        "tags": [
          "Mq"
        ],
        "description": "List MqResource resources by resource group",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group. The name is case insensitive.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "x-ms-parameter-location": "method"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "type": "object",
              "description": "The response of a MqResource list operation.",
              "properties": {
                "value": {
                  "type": "array",
                  "description": "The MqResource items on this page",
                  "items": {
                    "type": "object",
                    "description": "MQ resource",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                        "readOnly": true
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the resource",
                        "readOnly": true
                      },
                      "type": {
                        "type": "string",
                        "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                        "readOnly": true
                      },
                      "systemData": {
                        "type": "object",
                        "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                        "readOnly": true,
                        "properties": {
                          "createdBy": {
                            "type": "string",
                            "description": "The identity that created the resource."
                          },
                          "createdByType": {
                            "type": "string",
                            "description": "The type of identity that created the resource.",
                            "enum": [
                              "User",
                              "Application",
                              "ManagedIdentity",
                              "Key"
                            ],
                            "x-ms-enum": {
                              "name": "createdByType",
                              "modelAsString": true
                            }
                          },
                          "createdAt": {
                            "type": "string",
                            "format": "date-time",
                            "description": "The timestamp of resource creation (UTC)."
                          },
                          "lastModifiedBy": {
                            "type": "string",
                            "description": "The identity that last modified the resource."
                          },
                          "lastModifiedByType": {
                            "type": "string",
                            "description": "The type of identity that last modified the resource.",
                            "enum": [
                              "User",
                              "Application",
                              "ManagedIdentity",
                              "Key"
                            ],
                            "x-ms-enum": {
                              "name": "createdByType",
                              "modelAsString": true
                            }
                          },
                          "lastModifiedAt": {
                            "type": "string",
                            "format": "date-time",
                            "description": "The timestamp of resource last modification (UTC)"
                          }
                        }
                      },
                      "tags": {
                        "type": "object",
                        "description": "Resource tags.",
                        "additionalProperties": {
                          "type": "string"
                        },
                        "x-ms-mutability": [
                          "read",
                          "create",
                          "update"
                        ]
                      },
                      "location": {
                        "type": "string",
                        "description": "The geo-location where the resource lives",
                        "x-ms-mutability": [
                          "read",
                          "create"
                        ]
                      },
                      "properties": {
                        "description": "The resource-specific properties for this resource.",
                        "x-ms-client-flatten": true,
                        "type": "object",
                        "properties": {
                          "provisioningState": {
                            "description": "The status of the last operation.",
                            "readOnly": true,
                            "type": "string",
                            "enum": [
                              "Succeeded",
                              "Failed",
                              "Canceled",
                              "Provisioning",
                              "Updating",
                              "Deleting",
                              "Accepted"
                            ],
                            "x-ms-enum": {
                              "name": "ProvisioningState",
                              "modelAsString": true,
                              "values": [
                                {
                                  "name": "Succeeded",
                                  "value": "Succeeded",
                                  "description": "Resource has been created."
                                },
                                {
                                  "name": "Failed",
                                  "value": "Failed",
                                  "description": "Resource creation failed."
                                },
                                {
                                  "name": "Canceled",
                                  "value": "Canceled",
                                  "description": "Resource creation was canceled."
                                },
                                {
                                  "name": "Provisioning",
                                  "value": "Provisioning",
                                  "description": "Resource is getting provisioned."
                                },
                                {
                                  "name": "Updating",
                                  "value": "Updating",
                                  "description": "Resource is Updating."
                                },
                                {
                                  "name": "Deleting",
                                  "value": "Deleting",
                                  "description": "Resource is Deleting."
                                },
                                {
                                  "name": "Accepted",
                                  "value": "Accepted",
                                  "description": "Resource has been Accepted."
                                }
                              ]
                            }
                          }
                        }
                      },
                      "extendedLocation": {
                        "description": "Extended Location",
                        "x-ms-mutability": [
                          "read",
                          "create"
                        ],
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "The name of the extended location."
                          },
                          "type": {
                            "description": "Type of ExtendedLocation.",
                            "type": "string",
                            "enum": [
                              "CustomLocation"
                            ],
                            "x-ms-enum": {
                              "name": "ExtendedLocationType",
                              "modelAsString": true,
                              "values": [
                                {
                                  "name": "CustomLocation",
                                  "value": "CustomLocation",
                                  "description": "CustomLocation type"
                                }
                              ]
                            }
                          }
                        },
                        "required": [
                          "name",
                          "type"
                        ]
                      }
                    },
                    "required": [
                      "extendedLocation"
                    ]
                  }
                },
                "nextLink": {
                  "type": "string",
                  "format": "uri",
                  "description": "The link to the next page of items"
                }
              },
              "required": [
                "value"
              ]
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTOperationsMQ/mq/{mqName}": {
      "get": {
        "operationId": "Mq_Get",
        "tags": [
          "Mq"
        ],
        "description": "Get a MqResource",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group. The name is case insensitive.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "x-ms-parameter-location": "method"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "type": "object",
              "description": "MQ resource",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "description": "The name of the resource",
                  "readOnly": true
                },
                "type": {
                  "type": "string",
                  "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                  "readOnly": true
                },
                "systemData": {
                  "type": "object",
                  "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                  "readOnly": true,
                  "properties": {
                    "createdBy": {
                      "type": "string",
                      "description": "The identity that created the resource."
                    },
                    "createdByType": {
                      "type": "string",
                      "description": "The type of identity that created the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource creation (UTC)."
                    },
                    "lastModifiedBy": {
                      "type": "string",
                      "description": "The identity that last modified the resource."
                    },
                    "lastModifiedByType": {
                      "type": "string",
                      "description": "The type of identity that last modified the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "lastModifiedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource last modification (UTC)"
                    }
                  }
                },
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "x-ms-mutability": [
                    "read",
                    "create",
                    "update"
                  ]
                },
                "location": {
                  "type": "string",
                  "description": "The geo-location where the resource lives",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ]
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "provisioningState": {
                      "description": "The status of the last operation.",
                      "readOnly": true,
                      "type": "string",
                      "enum": [
                        "Succeeded",
                        "Failed",
                        "Canceled",
                        "Provisioning",
                        "Updating",
                        "Deleting",
                        "Accepted"
                      ],
                      "x-ms-enum": {
                        "name": "ProvisioningState",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Succeeded",
                            "value": "Succeeded",
                            "description": "Resource has been created."
                          },
                          {
                            "name": "Failed",
                            "value": "Failed",
                            "description": "Resource creation failed."
                          },
                          {
                            "name": "Canceled",
                            "value": "Canceled",
                            "description": "Resource creation was canceled."
                          },
                          {
                            "name": "Provisioning",
                            "value": "Provisioning",
                            "description": "Resource is getting provisioned."
                          },
                          {
                            "name": "Updating",
                            "value": "Updating",
                            "description": "Resource is Updating."
                          },
                          {
                            "name": "Deleting",
                            "value": "Deleting",
                            "description": "Resource is Deleting."
                          },
                          {
                            "name": "Accepted",
                            "value": "Accepted",
                            "description": "Resource has been Accepted."
                          }
                        ]
                      }
                    }
                  }
                },
                "extendedLocation": {
                  "description": "Extended Location",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ],
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The name of the extended location."
                    },
                    "type": {
                      "description": "Type of ExtendedLocation.",
                      "type": "string",
                      "enum": [
                        "CustomLocation"
                      ],
                      "x-ms-enum": {
                        "name": "ExtendedLocationType",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "CustomLocation",
                            "value": "CustomLocation",
                            "description": "CustomLocation type"
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "name",
                    "type"
                  ]
                }
              },
              "required": [
                "extendedLocation"
              ]
            }
          }
        }
      },
      "put": {
        "operationId": "Mq_CreateOrUpdate",
        "tags": [
          "Mq"
        ],
        "description": "Create a MqResource",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group. The name is case insensitive.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "x-ms-parameter-location": "method"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "resource",
            "in": "body",
            "description": "Resource create parameters.",
            "required": true,
            "schema": {
              "type": "object",
              "description": "MQ resource",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "description": "The name of the resource",
                  "readOnly": true
                },
                "type": {
                  "type": "string",
                  "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                  "readOnly": true
                },
                "systemData": {
                  "type": "object",
                  "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                  "readOnly": true,
                  "properties": {
                    "createdBy": {
                      "type": "string",
                      "description": "The identity that created the resource."
                    },
                    "createdByType": {
                      "type": "string",
                      "description": "The type of identity that created the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource creation (UTC)."
                    },
                    "lastModifiedBy": {
                      "type": "string",
                      "description": "The identity that last modified the resource."
                    },
                    "lastModifiedByType": {
                      "type": "string",
                      "description": "The type of identity that last modified the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "lastModifiedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource last modification (UTC)"
                    }
                  }
                },
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "x-ms-mutability": [
                    "read",
                    "create",
                    "update"
                  ]
                },
                "location": {
                  "type": "string",
                  "description": "The geo-location where the resource lives",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ]
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "provisioningState": {
                      "description": "The status of the last operation.",
                      "readOnly": true,
                      "type": "string",
                      "enum": [
                        "Succeeded",
                        "Failed",
                        "Canceled",
                        "Provisioning",
                        "Updating",
                        "Deleting",
                        "Accepted"
                      ],
                      "x-ms-enum": {
                        "name": "ProvisioningState",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Succeeded",
                            "value": "Succeeded",
                            "description": "Resource has been created."
                          },
                          {
                            "name": "Failed",
                            "value": "Failed",
                            "description": "Resource creation failed."
                          },
                          {
                            "name": "Canceled",
                            "value": "Canceled",
                            "description": "Resource creation was canceled."
                          },
                          {
                            "name": "Provisioning",
                            "value": "Provisioning",
                            "description": "Resource is getting provisioned."
                          },
                          {
                            "name": "Updating",
                            "value": "Updating",
                            "description": "Resource is Updating."
                          },
                          {
                            "name": "Deleting",
                            "value": "Deleting",
                            "description": "Resource is Deleting."
                          },
                          {
                            "name": "Accepted",
                            "value": "Accepted",
                            "description": "Resource has been Accepted."
                          }
                        ]
                      }
                    }
                  }
                },
                "extendedLocation": {
                  "description": "Extended Location",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ],
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The name of the extended location."
                    },
                    "type": {
                      "description": "Type of ExtendedLocation.",
                      "type": "string",
                      "enum": [
                        "CustomLocation"
                      ],
                      "x-ms-enum": {
                        "name": "ExtendedLocationType",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "CustomLocation",
                            "value": "CustomLocation",
                            "description": "CustomLocation type"
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "name",
                    "type"
                  ]
                }
              },
              "required": [
                "extendedLocation"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resource 'MqResource' update operation succeeded",
            "schema": {
              "type": "object",
              "description": "MQ resource",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "description": "The name of the resource",
                  "readOnly": true
                },
                "type": {
                  "type": "string",
                  "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                  "readOnly": true
                },
                "systemData": {
                  "type": "object",
                  "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                  "readOnly": true,
                  "properties": {
                    "createdBy": {
                      "type": "string",
                      "description": "The identity that created the resource."
                    },
                    "createdByType": {
                      "type": "string",
                      "description": "The type of identity that created the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource creation (UTC)."
                    },
                    "lastModifiedBy": {
                      "type": "string",
                      "description": "The identity that last modified the resource."
                    },
                    "lastModifiedByType": {
                      "type": "string",
                      "description": "The type of identity that last modified the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "lastModifiedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource last modification (UTC)"
                    }
                  }
                },
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "x-ms-mutability": [
                    "read",
                    "create",
                    "update"
                  ]
                },
                "location": {
                  "type": "string",
                  "description": "The geo-location where the resource lives",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ]
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "provisioningState": {
                      "description": "The status of the last operation.",
                      "readOnly": true,
                      "type": "string",
                      "enum": [
                        "Succeeded",
                        "Failed",
                        "Canceled",
                        "Provisioning",
                        "Updating",
                        "Deleting",
                        "Accepted"
                      ],
                      "x-ms-enum": {
                        "name": "ProvisioningState",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Succeeded",
                            "value": "Succeeded",
                            "description": "Resource has been created."
                          },
                          {
                            "name": "Failed",
                            "value": "Failed",
                            "description": "Resource creation failed."
                          },
                          {
                            "name": "Canceled",
                            "value": "Canceled",
                            "description": "Resource creation was canceled."
                          },
                          {
                            "name": "Provisioning",
                            "value": "Provisioning",
                            "description": "Resource is getting provisioned."
                          },
                          {
                            "name": "Updating",
                            "value": "Updating",
                            "description": "Resource is Updating."
                          },
                          {
                            "name": "Deleting",
                            "value": "Deleting",
                            "description": "Resource is Deleting."
                          },
                          {
                            "name": "Accepted",
                            "value": "Accepted",
                            "description": "Resource has been Accepted."
                          }
                        ]
                      }
                    }
                  }
                },
                "extendedLocation": {
                  "description": "Extended Location",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ],
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The name of the extended location."
                    },
                    "type": {
                      "description": "Type of ExtendedLocation.",
                      "type": "string",
                      "enum": [
                        "CustomLocation"
                      ],
                      "x-ms-enum": {
                        "name": "ExtendedLocationType",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "CustomLocation",
                            "value": "CustomLocation",
                            "description": "CustomLocation type"
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "name",
                    "type"
                  ]
                }
              },
              "required": [
                "extendedLocation"
              ]
            }
          },
          "201": {
            "description": "Resource 'MqResource' create operation succeeded",
            "schema": {
              "type": "object",
              "description": "MQ resource",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "description": "The name of the resource",
                  "readOnly": true
                },
                "type": {
                  "type": "string",
                  "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                  "readOnly": true
                },
                "systemData": {
                  "type": "object",
                  "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                  "readOnly": true,
                  "properties": {
                    "createdBy": {
                      "type": "string",
                      "description": "The identity that created the resource."
                    },
                    "createdByType": {
                      "type": "string",
                      "description": "The type of identity that created the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource creation (UTC)."
                    },
                    "lastModifiedBy": {
                      "type": "string",
                      "description": "The identity that last modified the resource."
                    },
                    "lastModifiedByType": {
                      "type": "string",
                      "description": "The type of identity that last modified the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "lastModifiedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource last modification (UTC)"
                    }
                  }
                },
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "x-ms-mutability": [
                    "read",
                    "create",
                    "update"
                  ]
                },
                "location": {
                  "type": "string",
                  "description": "The geo-location where the resource lives",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ]
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "provisioningState": {
                      "description": "The status of the last operation.",
                      "readOnly": true,
                      "type": "string",
                      "enum": [
                        "Succeeded",
                        "Failed",
                        "Canceled",
                        "Provisioning",
                        "Updating",
                        "Deleting",
                        "Accepted"
                      ],
                      "x-ms-enum": {
                        "name": "ProvisioningState",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Succeeded",
                            "value": "Succeeded",
                            "description": "Resource has been created."
                          },
                          {
                            "name": "Failed",
                            "value": "Failed",
                            "description": "Resource creation failed."
                          },
                          {
                            "name": "Canceled",
                            "value": "Canceled",
                            "description": "Resource creation was canceled."
                          },
                          {
                            "name": "Provisioning",
                            "value": "Provisioning",
                            "description": "Resource is getting provisioned."
                          },
                          {
                            "name": "Updating",
                            "value": "Updating",
                            "description": "Resource is Updating."
                          },
                          {
                            "name": "Deleting",
                            "value": "Deleting",
                            "description": "Resource is Deleting."
                          },
                          {
                            "name": "Accepted",
                            "value": "Accepted",
                            "description": "Resource has been Accepted."
                          }
                        ]
                      }
                    }
                  }
                },
                "extendedLocation": {
                  "description": "Extended Location",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ],
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The name of the extended location."
                    },
                    "type": {
                      "description": "Type of ExtendedLocation.",
                      "type": "string",
                      "enum": [
                        "CustomLocation"
                      ],
                      "x-ms-enum": {
                        "name": "ExtendedLocationType",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "CustomLocation",
                            "value": "CustomLocation",
                            "description": "CustomLocation type"
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "name",
                    "type"
                  ]
                }
              },
              "required": [
                "extendedLocation"
              ]
            },
            "headers": {
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "Mq_Update",
        "tags": [
          "Mq"
        ],
        "description": "Update a MqResource",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group. The name is case insensitive.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "x-ms-parameter-location": "method"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "properties",
            "in": "body",
            "description": "The resource properties to be updated.",
            "required": true,
            "schema": {
              "type": "object",
              "description": "The type used for update operations of the MqResource.",
              "properties": {
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "type": "object",
              "description": "MQ resource",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "description": "The name of the resource",
                  "readOnly": true
                },
                "type": {
                  "type": "string",
                  "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                  "readOnly": true
                },
                "systemData": {
                  "type": "object",
                  "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                  "readOnly": true,
                  "properties": {
                    "createdBy": {
                      "type": "string",
                      "description": "The identity that created the resource."
                    },
                    "createdByType": {
                      "type": "string",
                      "description": "The type of identity that created the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource creation (UTC)."
                    },
                    "lastModifiedBy": {
                      "type": "string",
                      "description": "The identity that last modified the resource."
                    },
                    "lastModifiedByType": {
                      "type": "string",
                      "description": "The type of identity that last modified the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "lastModifiedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource last modification (UTC)"
                    }
                  }
                },
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "x-ms-mutability": [
                    "read",
                    "create",
                    "update"
                  ]
                },
                "location": {
                  "type": "string",
                  "description": "The geo-location where the resource lives",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ]
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "provisioningState": {
                      "description": "The status of the last operation.",
                      "readOnly": true,
                      "type": "string",
                      "enum": [
                        "Succeeded",
                        "Failed",
                        "Canceled",
                        "Provisioning",
                        "Updating",
                        "Deleting",
                        "Accepted"
                      ],
                      "x-ms-enum": {
                        "name": "ProvisioningState",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Succeeded",
                            "value": "Succeeded",
                            "description": "Resource has been created."
                          },
                          {
                            "name": "Failed",
                            "value": "Failed",
                            "description": "Resource creation failed."
                          },
                          {
                            "name": "Canceled",
                            "value": "Canceled",
                            "description": "Resource creation was canceled."
                          },
                          {
                            "name": "Provisioning",
                            "value": "Provisioning",
                            "description": "Resource is getting provisioned."
                          },
                          {
                            "name": "Updating",
                            "value": "Updating",
                            "description": "Resource is Updating."
                          },
                          {
                            "name": "Deleting",
                            "value": "Deleting",
                            "description": "Resource is Deleting."
                          },
                          {
                            "name": "Accepted",
                            "value": "Accepted",
                            "description": "Resource has been Accepted."
                          }
                        ]
                      }
                    }
                  }
                },
                "extendedLocation": {
                  "description": "Extended Location",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ],
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The name of the extended location."
                    },
                    "type": {
                      "description": "Type of ExtendedLocation.",
                      "type": "string",
                      "enum": [
                        "CustomLocation"
                      ],
                      "x-ms-enum": {
                        "name": "ExtendedLocationType",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "CustomLocation",
                            "value": "CustomLocation",
                            "description": "CustomLocation type"
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "name",
                    "type"
                  ]
                }
              },
              "required": [
                "extendedLocation"
              ]
            }
          }
        }
      },
      "delete": {
        "operationId": "Mq_Delete",
        "tags": [
          "Mq"
        ],
        "description": "Delete a MqResource",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group. The name is case insensitive.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "x-ms-parameter-location": "method"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          }
        ],
        "responses": {
          "202": {
            "description": "Resource deletion accepted.",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              },
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "204": {
            "description": "Resource does not exist."
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTOperationsMQ/mq/{mqName}/broker": {
      "get": {
        "operationId": "Broker_ListByMqResource",
        "tags": [
          "Broker"
        ],
        "description": "List BrokerResource resources by MqResource",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group. The name is case insensitive.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "x-ms-parameter-location": "method"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "type": "object",
              "description": "The response of a BrokerResource list operation.",
              "properties": {
                "value": {
                  "type": "array",
                  "description": "The BrokerResource items on this page",
                  "items": {
                    "type": "object",
                    "description": "MQ broker resource",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                        "readOnly": true
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the resource",
                        "readOnly": true
                      },
                      "type": {
                        "type": "string",
                        "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                        "readOnly": true
                      },
                      "systemData": {
                        "type": "object",
                        "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                        "readOnly": true,
                        "properties": {
                          "createdBy": {
                            "type": "string",
                            "description": "The identity that created the resource."
                          },
                          "createdByType": {
                            "type": "string",
                            "description": "The type of identity that created the resource.",
                            "enum": [
                              "User",
                              "Application",
                              "ManagedIdentity",
                              "Key"
                            ],
                            "x-ms-enum": {
                              "name": "createdByType",
                              "modelAsString": true
                            }
                          },
                          "createdAt": {
                            "type": "string",
                            "format": "date-time",
                            "description": "The timestamp of resource creation (UTC)."
                          },
                          "lastModifiedBy": {
                            "type": "string",
                            "description": "The identity that last modified the resource."
                          },
                          "lastModifiedByType": {
                            "type": "string",
                            "description": "The type of identity that last modified the resource.",
                            "enum": [
                              "User",
                              "Application",
                              "ManagedIdentity",
                              "Key"
                            ],
                            "x-ms-enum": {
                              "name": "createdByType",
                              "modelAsString": true
                            }
                          },
                          "lastModifiedAt": {
                            "type": "string",
                            "format": "date-time",
                            "description": "The timestamp of resource last modification (UTC)"
                          }
                        }
                      },
                      "tags": {
                        "type": "object",
                        "description": "Resource tags.",
                        "additionalProperties": {
                          "type": "string"
                        },
                        "x-ms-mutability": [
                          "read",
                          "create",
                          "update"
                        ]
                      },
                      "location": {
                        "type": "string",
                        "description": "The geo-location where the resource lives",
                        "x-ms-mutability": [
                          "read",
                          "create"
                        ]
                      },
                      "properties": {
                        "description": "The resource-specific properties for this resource.",
                        "x-ms-client-flatten": true,
                        "type": "object",
                        "properties": {
                          "authImage": {
                            "description": "The details of Authentication Docker Image.",
                            "type": "object",
                            "properties": {
                              "pullPolicy": {
                                "type": "string",
                                "description": "Image pull policy."
                              },
                              "pullSecrets": {
                                "type": "string",
                                "description": "Image pull secrets."
                              },
                              "repository": {
                                "type": "string",
                                "description": "The Docker image name."
                              },
                              "tag": {
                                "type": "string",
                                "description": "The Docker  image tag."
                              }
                            },
                            "required": [
                              "repository",
                              "tag"
                            ]
                          },
                          "brokerImage": {
                            "description": "The details of Broker Docker Image.",
                            "type": "object",
                            "properties": {
                              "pullPolicy": {
                                "type": "string",
                                "description": "Image pull policy."
                              },
                              "pullSecrets": {
                                "type": "string",
                                "description": "Image pull secrets."
                              },
                              "repository": {
                                "type": "string",
                                "description": "The Docker image name."
                              },
                              "tag": {
                                "type": "string",
                                "description": "The Docker  image tag."
                              }
                            },
                            "required": [
                              "repository",
                              "tag"
                            ]
                          },
                          "brokerNodeTolerations": {
                            "description": "The details of Node Tolerations for Broker Pods.",
                            "type": "object",
                            "properties": {
                              "effect": {
                                "type": "string",
                                "description": "Toleration effect."
                              },
                              "key": {
                                "type": "string",
                                "description": "Toleration key."
                              },
                              "operator": {
                                "type": "string",
                                "description": "Toleration operator like 'Exists', 'Equal' etc."
                              },
                              "value": {
                                "type": "string",
                                "description": "Toleration Value."
                              }
                            },
                            "required": [
                              "effect",
                              "key",
                              "operator",
                              "value"
                            ]
                          },
                          "cardinality": {
                            "description": "The cardinality details of the broker.",
                            "type": "object",
                            "properties": {
                              "backendChain": {
                                "description": "The backend broker desired properties",
                                "type": "object",
                                "properties": {
                                  "partitions": {
                                    "type": "integer",
                                    "format": "int32",
                                    "description": "Partitions is desired number of physical backend chains of the given distributed MQTT broker.",
                                    "minimum": 0,
                                    "maximum": 65535
                                  },
                                  "redundancyFactor": {
                                    "type": "integer",
                                    "format": "int32",
                                    "description": "Redundancy Factor is desired numbers of broker instances in one chain.",
                                    "minimum": 0,
                                    "maximum": 65535
                                  },
                                  "temporaryDiskTransferEnabled": {
                                    "type": "boolean",
                                    "description": "Defines whether disk transfer is enabled or not."
                                  },
                                  "temporaryDiskTransferHighWatermarkPercent": {
                                    "type": "integer",
                                    "format": "int32",
                                    "description": "Defines the percentage usage of buffer pool above which disk transfer will start.",
                                    "minimum": 0,
                                    "maximum": 100
                                  },
                                  "temporaryDiskTransferLowWatermarkPercent": {
                                    "type": "integer",
                                    "format": "int32",
                                    "description": "Defines the percentage usage of buffer pool below which disk transfer will stop.",
                                    "minimum": 0,
                                    "maximum": 100
                                  },
                                  "temporaryMaxBackendMemUsagePercent": {
                                    "type": "integer",
                                    "format": "int32",
                                    "description": "Defines the limits for memory usage percent of the backend instances of the MQTT broker.",
                                    "minimum": 0,
                                    "maximum": 100
                                  },
                                  "temporaryResourceLimits": {
                                    "description": "Defines the limits for resources of the backend instances of the MQTT broker.",
                                    "type": "object",
                                    "properties": {
                                      "maxInflightMessages": {
                                        "type": "integer",
                                        "format": "int32",
                                        "description": "Maximum number of messages a client can have inflight.",
                                        "minimum": 0,
                                        "maximum": 65535
                                      },
                                      "maxInflightPatches": {
                                        "type": "integer",
                                        "format": "int32",
                                        "description": "Maximum number of patch inflight per node.",
                                        "minimum": 0,
                                        "maximum": 65535
                                      },
                                      "maxInflightPatchesPerClient": {
                                        "type": "integer",
                                        "format": "int32",
                                        "description": "Maximum number of patch a client can have in flight.",
                                        "minimum": 0,
                                        "maximum": 65535
                                      },
                                      "maxMessageExpirySecs": {
                                        "type": "integer",
                                        "format": "int64",
                                        "description": "Maximum message expiry interval, in seconds.",
                                        "minimum": 0,
                                        "maximum": 4294967295
                                      },
                                      "maxQueuedMessages": {
                                        "type": "integer",
                                        "format": "int64",
                                        "description": "Maximum receive for external clients.",
                                        "minimum": 0,
                                        "maximum": 9223372036854000000
                                      },
                                      "maxQueuedQos0Messages": {
                                        "type": "integer",
                                        "format": "int64",
                                        "description": "Maximum receive QoS0 for external clients.",
                                        "minimum": 0,
                                        "maximum": 9223372036854000000
                                      },
                                      "maxSessionExpirySecs": {
                                        "type": "integer",
                                        "format": "int64",
                                        "description": "Maximum session expiry interval, in seconds.",
                                        "minimum": 0,
                                        "maximum": 4294967295
                                      }
                                    },
                                    "required": [
                                      "maxInflightMessages",
                                      "maxInflightPatches",
                                      "maxInflightPatchesPerClient",
                                      "maxQueuedMessages",
                                      "maxQueuedQos0Messages",
                                      "maxSessionExpirySecs"
                                    ]
                                  },
                                  "workers": {
                                    "type": "integer",
                                    "format": "int32",
                                    "description": "Number of logical backend workers per pod.",
                                    "default": 1,
                                    "minimum": 0,
                                    "maximum": 65535
                                  }
                                },
                                "required": [
                                  "partitions",
                                  "redundancyFactor"
                                ]
                              },
                              "frontend": {
                                "description": "The frontend broker desired properties",
                                "type": "object",
                                "properties": {
                                  "replicas": {
                                    "type": "integer",
                                    "format": "int32",
                                    "description": "Replicas is desired number of frontend replicas of the given distributed MQTT broker.",
                                    "minimum": 0,
                                    "maximum": 65535
                                  },
                                  "temporaryResourceLimits": {
                                    "description": "Defines the limits for resources of the frontend instances of the MQTT broker.",
                                    "type": "object",
                                    "properties": {
                                      "maxInflightMessages": {
                                        "type": "integer",
                                        "format": "int32",
                                        "description": "Maximum number of messages a client can have inflight.",
                                        "minimum": 0,
                                        "maximum": 65535
                                      },
                                      "maxInflightPatches": {
                                        "type": "integer",
                                        "format": "int32",
                                        "description": "Maximum number of patch inflight per node.",
                                        "minimum": 0,
                                        "maximum": 65535
                                      },
                                      "maxInflightPatchesPerClient": {
                                        "type": "integer",
                                        "format": "int32",
                                        "description": "Maximum number of patch a client can have in flight.",
                                        "minimum": 0,
                                        "maximum": 65535
                                      },
                                      "maxMessageExpirySecs": {
                                        "type": "integer",
                                        "format": "int64",
                                        "description": "Maximum message expiry interval, in seconds.",
                                        "minimum": 0,
                                        "maximum": 4294967295
                                      },
                                      "maxQueuedMessages": {
                                        "type": "integer",
                                        "format": "int64",
                                        "description": "Maximum receive for external clients.",
                                        "minimum": 0,
                                        "maximum": 9223372036854000000
                                      },
                                      "maxQueuedQos0Messages": {
                                        "type": "integer",
                                        "format": "int64",
                                        "description": "Maximum receive QoS0 for external clients.",
                                        "minimum": 0,
                                        "maximum": 9223372036854000000
                                      },
                                      "maxSessionExpirySecs": {
                                        "type": "integer",
                                        "format": "int64",
                                        "description": "Maximum session expiry interval, in seconds.",
                                        "minimum": 0,
                                        "maximum": 4294967295
                                      }
                                    },
                                    "required": [
                                      "maxInflightMessages",
                                      "maxInflightPatches",
                                      "maxInflightPatchesPerClient",
                                      "maxQueuedMessages",
                                      "maxQueuedQos0Messages",
                                      "maxSessionExpirySecs"
                                    ]
                                  },
                                  "workers": {
                                    "type": "integer",
                                    "format": "int32",
                                    "description": "Number of logical frontend workers per pod.",
                                    "default": 2,
                                    "minimum": 0,
                                    "maximum": 65535
                                  }
                                },
                                "required": [
                                  "replicas"
                                ]
                              }
                            },
                            "required": [
                              "backendChain",
                              "frontend"
                            ]
                          },
                          "diagnostics": {
                            "description": "The diagnostic details of the broker deployment.",
                            "type": "object",
                            "properties": {
                              "diagnosticServiceEndpoint": {
                                "type": "string",
                                "description": "Diagnostic Service endpoint"
                              },
                              "enableMetrics": {
                                "type": "boolean",
                                "description": "Knob to enable/disable metrics. Default = true",
                                "default": true
                              },
                              "enableSelfCheck": {
                                "type": "boolean",
                                "description": "Enable self check on Broker via Probe.",
                                "default": true
                              },
                              "enableSelfTracing": {
                                "type": "boolean",
                                "description": "Enable self tracing on the Broker so that every selfCheckFrequencySeconds a random message is traced even if it didn't have trace context.",
                                "default": true
                              },
                              "enableTracing": {
                                "type": "boolean",
                                "description": "Knob to enable/disable entire tracing infrastructure.",
                                "default": true
                              },
                              "logFormat": {
                                "type": "string",
                                "description": "Format for the logs generated.",
                                "default": "text"
                              },
                              "logLevel": {
                                "type": "string",
                                "description": "Log level for the Broker.",
                                "default": "info,hyper=off,kube_client=off,tower=off,conhash=off,h2=off"
                              },
                              "maxCellMapLifetime": {
                                "type": "integer",
                                "format": "int64",
                                "description": "Maximum time for the CellMap to live.",
                                "default": 60,
                                "minimum": 0,
                                "maximum": 9223372036854000000
                              },
                              "metricUpdateFrequencySeconds": {
                                "type": "integer",
                                "format": "int64",
                                "description": "Metric update frequency in seconds.",
                                "default": 30,
                                "minimum": 0,
                                "maximum": 9223372036854000000
                              },
                              "probeImage": {
                                "type": "string",
                                "description": "Probe Image to run.",
                                "default": "sample.azurecr.io/diagnostics-probe:0.5.0"
                              },
                              "selfCheckFrequencySeconds": {
                                "type": "integer",
                                "format": "int64",
                                "description": "Frequency for the self check to run.",
                                "default": 30,
                                "minimum": 0,
                                "maximum": 9223372036854000000
                              },
                              "selfCheckTimeoutSeconds": {
                                "type": "integer",
                                "format": "int64",
                                "description": "Time out period of the self check.",
                                "default": 15,
                                "minimum": 0,
                                "maximum": 9223372036854000000
                              },
                              "selfTraceFrequencySeconds": {
                                "type": "integer",
                                "format": "int64",
                                "description": "The frequency at which selfTrace should run.",
                                "default": 30,
                                "minimum": 0,
                                "maximum": 9223372036854000000
                              },
                              "spanChannelCapacity": {
                                "type": "integer",
                                "format": "int64",
                                "description": "The number of the spans generated by the Tracing.",
                                "default": 1000,
                                "minimum": 0,
                                "maximum": 9223372036854000000
                              }
                            }
                          },
                          "diskBackedMessageBufferSettings": {
                            "description": "The settings of the disk-backed message buffer.",
                            "type": "object",
                            "properties": {
                              "ephemeralVolumeClaimSpec": {
                                "description": "Use the specified persistent volume claim template to mount a \"generic ephemeral volume\" for the message buffer. See <https://kubernetes.io/docs/concepts/storage/ephemeral-volumes/#generic-ephemeral-volumes> for details.",
                                "type": "object",
                                "properties": {
                                  "accessModes": {
                                    "type": "array",
                                    "description": "AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
                                    "items": {
                                      "type": "string"
                                    }
                                  },
                                  "dataSource": {
                                    "description": "This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.",
                                    "type": "object",
                                    "properties": {
                                      "apiGroup": {
                                        "type": "string",
                                        "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required."
                                      },
                                      "kind": {
                                        "type": "string",
                                        "description": "Kind is the type of resource being referenced"
                                      },
                                      "name": {
                                        "type": "string",
                                        "description": "Name is the name of resource being referenced"
                                      }
                                    },
                                    "required": [
                                      "kind",
                                      "name"
                                    ]
                                  },
                                  "dataSourceRef": {
                                    "description": "Specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef: * While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified. (Alpha) Using this field requires the AnyVolumeDataSource feature gate to be enabled.",
                                    "type": "object",
                                    "properties": {
                                      "apiGroup": {
                                        "type": "string",
                                        "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required."
                                      },
                                      "kind": {
                                        "type": "string",
                                        "description": "Kind is the type of resource being referenced"
                                      },
                                      "name": {
                                        "type": "string",
                                        "description": "Name is the name of resource being referenced"
                                      }
                                    },
                                    "required": [
                                      "kind",
                                      "name"
                                    ]
                                  },
                                  "resources": {
                                    "description": "Resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources",
                                    "type": "object",
                                    "properties": {
                                      "limits": {
                                        "type": "object",
                                        "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                                        "additionalProperties": {
                                          "type": "string"
                                        }
                                      },
                                      "requests": {
                                        "type": "object",
                                        "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                                        "additionalProperties": {
                                          "type": "string"
                                        }
                                      }
                                    }
                                  },
                                  "selector": {
                                    "description": "A label query over volumes to consider for binding.",
                                    "type": "object",
                                    "properties": {
                                      "matchExpressions": {
                                        "type": "array",
                                        "description": "MatchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                        "items": {
                                          "type": "object",
                                          "description": "VolumeClaimSpecSelectorMatchExpressions properties",
                                          "properties": {
                                            "key": {
                                              "type": "string",
                                              "description": "key is the label key that the selector applies to."
                                            },
                                            "operator": {
                                              "type": "string",
                                              "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist."
                                            },
                                            "values": {
                                              "type": "array",
                                              "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                              "items": {
                                                "type": "string"
                                              }
                                            }
                                          },
                                          "required": [
                                            "key",
                                            "operator"
                                          ]
                                        },
                                        "x-ms-identifiers": []
                                      },
                                      "matchLabels": {
                                        "type": "object",
                                        "description": "MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                        "additionalProperties": {
                                          "type": "string"
                                        }
                                      }
                                    }
                                  },
                                  "storageClassName": {
                                    "type": "string",
                                    "description": "Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1"
                                  },
                                  "volumeMode": {
                                    "type": "string",
                                    "description": "volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec. This is a beta feature."
                                  },
                                  "volumeName": {
                                    "type": "string",
                                    "description": "VolumeName is the binding reference to the PersistentVolume backing this claim."
                                  }
                                }
                              },
                              "maxSize": {
                                "type": "string",
                                "description": "The max size of the message buffer on disk. If a PVC template is specified using one of ephemeralVolumeClaimSpec or persistentVolumeClaimSpec, then this size is used as the request and limit sizes of that template. If neither ephemeralVolumeClaimSpec nor persistentVolumeClaimSpec are specified, then an emptyDir volume is mounted with this size as its limit. See <https://kubernetes.io/docs/concepts/storage/volumes/#emptydir> for details."
                              },
                              "persistentVolumeClaimSpec": {
                                "description": "Use the specified persistent volume claim template to mount a persistent volume for the message buffer.",
                                "type": "object",
                                "properties": {
                                  "accessModes": {
                                    "type": "array",
                                    "description": "AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
                                    "items": {
                                      "type": "string"
                                    }
                                  },
                                  "dataSource": {
                                    "description": "This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.",
                                    "type": "object",
                                    "properties": {
                                      "apiGroup": {
                                        "type": "string",
                                        "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required."
                                      },
                                      "kind": {
                                        "type": "string",
                                        "description": "Kind is the type of resource being referenced"
                                      },
                                      "name": {
                                        "type": "string",
                                        "description": "Name is the name of resource being referenced"
                                      }
                                    },
                                    "required": [
                                      "kind",
                                      "name"
                                    ]
                                  },
                                  "dataSourceRef": {
                                    "description": "Specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef: * While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified. (Alpha) Using this field requires the AnyVolumeDataSource feature gate to be enabled.",
                                    "type": "object",
                                    "properties": {
                                      "apiGroup": {
                                        "type": "string",
                                        "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required."
                                      },
                                      "kind": {
                                        "type": "string",
                                        "description": "Kind is the type of resource being referenced"
                                      },
                                      "name": {
                                        "type": "string",
                                        "description": "Name is the name of resource being referenced"
                                      }
                                    },
                                    "required": [
                                      "kind",
                                      "name"
                                    ]
                                  },
                                  "resources": {
                                    "description": "Resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources",
                                    "type": "object",
                                    "properties": {
                                      "limits": {
                                        "type": "object",
                                        "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                                        "additionalProperties": {
                                          "type": "string"
                                        }
                                      },
                                      "requests": {
                                        "type": "object",
                                        "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                                        "additionalProperties": {
                                          "type": "string"
                                        }
                                      }
                                    }
                                  },
                                  "selector": {
                                    "description": "A label query over volumes to consider for binding.",
                                    "type": "object",
                                    "properties": {
                                      "matchExpressions": {
                                        "type": "array",
                                        "description": "MatchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                        "items": {
                                          "type": "object",
                                          "description": "VolumeClaimSpecSelectorMatchExpressions properties",
                                          "properties": {
                                            "key": {
                                              "type": "string",
                                              "description": "key is the label key that the selector applies to."
                                            },
                                            "operator": {
                                              "type": "string",
                                              "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist."
                                            },
                                            "values": {
                                              "type": "array",
                                              "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                              "items": {
                                                "type": "string"
                                              }
                                            }
                                          },
                                          "required": [
                                            "key",
                                            "operator"
                                          ]
                                        },
                                        "x-ms-identifiers": []
                                      },
                                      "matchLabels": {
                                        "type": "object",
                                        "description": "MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                        "additionalProperties": {
                                          "type": "string"
                                        }
                                      }
                                    }
                                  },
                                  "storageClassName": {
                                    "type": "string",
                                    "description": "Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1"
                                  },
                                  "volumeMode": {
                                    "type": "string",
                                    "description": "volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec. This is a beta feature."
                                  },
                                  "volumeName": {
                                    "type": "string",
                                    "description": "VolumeName is the binding reference to the PersistentVolume backing this claim."
                                  }
                                }
                              }
                            },
                            "required": [
                              "maxSize"
                            ]
                          },
                          "encryptInternalTraffic": {
                            "type": "boolean",
                            "description": "The setting to enable or disable encryption of internal Traffic.",
                            "default": true
                          },
                          "healthManagerImage": {
                            "description": "The details of Health Manager Docker Image.",
                            "type": "object",
                            "properties": {
                              "pullPolicy": {
                                "type": "string",
                                "description": "Image pull policy."
                              },
                              "pullSecrets": {
                                "type": "string",
                                "description": "Image pull secrets."
                              },
                              "repository": {
                                "type": "string",
                                "description": "The Docker image name."
                              },
                              "tag": {
                                "type": "string",
                                "description": "The Docker  image tag."
                              }
                            },
                            "required": [
                              "repository",
                              "tag"
                            ]
                          },
                          "healthManagerNodeTolerations": {
                            "description": "The details of Node Tolerations for Health Manager Pods.",
                            "type": "object",
                            "properties": {
                              "effect": {
                                "type": "string",
                                "description": "Toleration effect."
                              },
                              "key": {
                                "type": "string",
                                "description": "Toleration key."
                              },
                              "operator": {
                                "type": "string",
                                "description": "Toleration operator like 'Exists', 'Equal' etc."
                              },
                              "value": {
                                "type": "string",
                                "description": "Toleration Value."
                              }
                            },
                            "required": [
                              "effect",
                              "key",
                              "operator",
                              "value"
                            ]
                          },
                          "internalCerts": {
                            "description": "Details of the internal CA cert that will be used to secure communication between pods.",
                            "type": "object",
                            "properties": {
                              "duration": {
                                "type": "string",
                                "description": "Duration of CA cert.",
                                "default": "720h"
                              },
                              "privateKey": {
                                "description": "Cert Manager private key.",
                                "type": "object",
                                "properties": {
                                  "algorithm": {
                                    "type": "string",
                                    "description": "algorithm for private key.",
                                    "default": "ECDSA"
                                  },
                                  "rotationPolicy": {
                                    "type": "string",
                                    "description": "cert-manager rotationPolicy.",
                                    "default": "Always"
                                  },
                                  "size": {
                                    "type": "integer",
                                    "format": "int32",
                                    "description": "size of private key.",
                                    "default": 256,
                                    "minimum": 0,
                                    "maximum": 65535
                                  }
                                },
                                "required": [
                                  "algorithm",
                                  "rotationPolicy",
                                  "size"
                                ]
                              },
                              "renewBefore": {
                                "type": "string",
                                "description": "Renew before time of CA cert.",
                                "default": "240h"
                              }
                            },
                            "required": [
                              "duration",
                              "privateKey",
                              "renewBefore"
                            ]
                          },
                          "memoryProfile": {
                            "type": "string",
                            "description": "Memory profile of broker.",
                            "default": "medium",
                            "enum": [
                              "tiny",
                              "low",
                              "medium",
                              "high"
                            ],
                            "x-ms-enum": {
                              "name": "BrokerMemoryProfile",
                              "modelAsString": true,
                              "values": [
                                {
                                  "name": "tiny",
                                  "value": "tiny",
                                  "description": "Tiny memory profile."
                                },
                                {
                                  "name": "low",
                                  "value": "low",
                                  "description": "Low memory profile."
                                },
                                {
                                  "name": "medium",
                                  "value": "medium",
                                  "description": "Medium memory profile."
                                },
                                {
                                  "name": "high",
                                  "value": "high",
                                  "description": "High memory profile."
                                }
                              ]
                            }
                          },
                          "mode": {
                            "description": "The Running Mode of the Broker Deployment.",
                            "type": "string",
                            "enum": [
                              "auto",
                              "distributed"
                            ],
                            "x-ms-enum": {
                              "name": "RunMode",
                              "modelAsString": true,
                              "values": [
                                {
                                  "name": "auto",
                                  "value": "auto",
                                  "description": "Automatically provision Frontend and Backend pods."
                                },
                                {
                                  "name": "distributed",
                                  "value": "distributed",
                                  "description": "Use Cardinality to set Frontend and Backend pods."
                                }
                              ]
                            }
                          },
                          "provisioningState": {
                            "description": "The status of the last operation.",
                            "readOnly": true,
                            "type": "string",
                            "enum": [
                              "Succeeded",
                              "Failed",
                              "Canceled",
                              "Provisioning",
                              "Updating",
                              "Deleting",
                              "Accepted"
                            ],
                            "x-ms-enum": {
                              "name": "ProvisioningState",
                              "modelAsString": true,
                              "values": [
                                {
                                  "name": "Succeeded",
                                  "value": "Succeeded",
                                  "description": "Resource has been created."
                                },
                                {
                                  "name": "Failed",
                                  "value": "Failed",
                                  "description": "Resource creation failed."
                                },
                                {
                                  "name": "Canceled",
                                  "value": "Canceled",
                                  "description": "Resource creation was canceled."
                                },
                                {
                                  "name": "Provisioning",
                                  "value": "Provisioning",
                                  "description": "Resource is getting provisioned."
                                },
                                {
                                  "name": "Updating",
                                  "value": "Updating",
                                  "description": "Resource is Updating."
                                },
                                {
                                  "name": "Deleting",
                                  "value": "Deleting",
                                  "description": "Resource is Deleting."
                                },
                                {
                                  "name": "Accepted",
                                  "value": "Accepted",
                                  "description": "Resource has been Accepted."
                                }
                              ]
                            }
                          }
                        },
                        "required": [
                          "authImage",
                          "brokerImage",
                          "healthManagerImage",
                          "mode"
                        ]
                      },
                      "extendedLocation": {
                        "description": "Extended Location",
                        "x-ms-mutability": [
                          "read",
                          "create"
                        ],
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "The name of the extended location."
                          },
                          "type": {
                            "description": "Type of ExtendedLocation.",
                            "type": "string",
                            "enum": [
                              "CustomLocation"
                            ],
                            "x-ms-enum": {
                              "name": "ExtendedLocationType",
                              "modelAsString": true,
                              "values": [
                                {
                                  "name": "CustomLocation",
                                  "value": "CustomLocation",
                                  "description": "CustomLocation type"
                                }
                              ]
                            }
                          }
                        },
                        "required": [
                          "name",
                          "type"
                        ]
                      }
                    },
                    "required": [
                      "extendedLocation"
                    ]
                  }
                },
                "nextLink": {
                  "type": "string",
                  "format": "uri",
                  "description": "The link to the next page of items"
                }
              },
              "required": [
                "value"
              ]
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTOperationsMQ/mq/{mqName}/broker/{brokerName}": {
      "get": {
        "operationId": "Broker_Get",
        "tags": [
          "Broker"
        ],
        "description": "Get a BrokerResource",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group. The name is case insensitive.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "x-ms-parameter-location": "method"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "brokerName",
            "in": "path",
            "description": "Name of MQ broker resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "type": "object",
              "description": "MQ broker resource",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "description": "The name of the resource",
                  "readOnly": true
                },
                "type": {
                  "type": "string",
                  "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                  "readOnly": true
                },
                "systemData": {
                  "type": "object",
                  "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                  "readOnly": true,
                  "properties": {
                    "createdBy": {
                      "type": "string",
                      "description": "The identity that created the resource."
                    },
                    "createdByType": {
                      "type": "string",
                      "description": "The type of identity that created the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource creation (UTC)."
                    },
                    "lastModifiedBy": {
                      "type": "string",
                      "description": "The identity that last modified the resource."
                    },
                    "lastModifiedByType": {
                      "type": "string",
                      "description": "The type of identity that last modified the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "lastModifiedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource last modification (UTC)"
                    }
                  }
                },
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "x-ms-mutability": [
                    "read",
                    "create",
                    "update"
                  ]
                },
                "location": {
                  "type": "string",
                  "description": "The geo-location where the resource lives",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ]
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "authImage": {
                      "description": "The details of Authentication Docker Image.",
                      "type": "object",
                      "properties": {
                        "pullPolicy": {
                          "type": "string",
                          "description": "Image pull policy."
                        },
                        "pullSecrets": {
                          "type": "string",
                          "description": "Image pull secrets."
                        },
                        "repository": {
                          "type": "string",
                          "description": "The Docker image name."
                        },
                        "tag": {
                          "type": "string",
                          "description": "The Docker  image tag."
                        }
                      },
                      "required": [
                        "repository",
                        "tag"
                      ]
                    },
                    "brokerImage": {
                      "description": "The details of Broker Docker Image.",
                      "type": "object",
                      "properties": {
                        "pullPolicy": {
                          "type": "string",
                          "description": "Image pull policy."
                        },
                        "pullSecrets": {
                          "type": "string",
                          "description": "Image pull secrets."
                        },
                        "repository": {
                          "type": "string",
                          "description": "The Docker image name."
                        },
                        "tag": {
                          "type": "string",
                          "description": "The Docker  image tag."
                        }
                      },
                      "required": [
                        "repository",
                        "tag"
                      ]
                    },
                    "brokerNodeTolerations": {
                      "description": "The details of Node Tolerations for Broker Pods.",
                      "type": "object",
                      "properties": {
                        "effect": {
                          "type": "string",
                          "description": "Toleration effect."
                        },
                        "key": {
                          "type": "string",
                          "description": "Toleration key."
                        },
                        "operator": {
                          "type": "string",
                          "description": "Toleration operator like 'Exists', 'Equal' etc."
                        },
                        "value": {
                          "type": "string",
                          "description": "Toleration Value."
                        }
                      },
                      "required": [
                        "effect",
                        "key",
                        "operator",
                        "value"
                      ]
                    },
                    "cardinality": {
                      "description": "The cardinality details of the broker.",
                      "type": "object",
                      "properties": {
                        "backendChain": {
                          "description": "The backend broker desired properties",
                          "type": "object",
                          "properties": {
                            "partitions": {
                              "type": "integer",
                              "format": "int32",
                              "description": "Partitions is desired number of physical backend chains of the given distributed MQTT broker.",
                              "minimum": 0,
                              "maximum": 65535
                            },
                            "redundancyFactor": {
                              "type": "integer",
                              "format": "int32",
                              "description": "Redundancy Factor is desired numbers of broker instances in one chain.",
                              "minimum": 0,
                              "maximum": 65535
                            },
                            "temporaryDiskTransferEnabled": {
                              "type": "boolean",
                              "description": "Defines whether disk transfer is enabled or not."
                            },
                            "temporaryDiskTransferHighWatermarkPercent": {
                              "type": "integer",
                              "format": "int32",
                              "description": "Defines the percentage usage of buffer pool above which disk transfer will start.",
                              "minimum": 0,
                              "maximum": 100
                            },
                            "temporaryDiskTransferLowWatermarkPercent": {
                              "type": "integer",
                              "format": "int32",
                              "description": "Defines the percentage usage of buffer pool below which disk transfer will stop.",
                              "minimum": 0,
                              "maximum": 100
                            },
                            "temporaryMaxBackendMemUsagePercent": {
                              "type": "integer",
                              "format": "int32",
                              "description": "Defines the limits for memory usage percent of the backend instances of the MQTT broker.",
                              "minimum": 0,
                              "maximum": 100
                            },
                            "temporaryResourceLimits": {
                              "description": "Defines the limits for resources of the backend instances of the MQTT broker.",
                              "type": "object",
                              "properties": {
                                "maxInflightMessages": {
                                  "type": "integer",
                                  "format": "int32",
                                  "description": "Maximum number of messages a client can have inflight.",
                                  "minimum": 0,
                                  "maximum": 65535
                                },
                                "maxInflightPatches": {
                                  "type": "integer",
                                  "format": "int32",
                                  "description": "Maximum number of patch inflight per node.",
                                  "minimum": 0,
                                  "maximum": 65535
                                },
                                "maxInflightPatchesPerClient": {
                                  "type": "integer",
                                  "format": "int32",
                                  "description": "Maximum number of patch a client can have in flight.",
                                  "minimum": 0,
                                  "maximum": 65535
                                },
                                "maxMessageExpirySecs": {
                                  "type": "integer",
                                  "format": "int64",
                                  "description": "Maximum message expiry interval, in seconds.",
                                  "minimum": 0,
                                  "maximum": 4294967295
                                },
                                "maxQueuedMessages": {
                                  "type": "integer",
                                  "format": "int64",
                                  "description": "Maximum receive for external clients.",
                                  "minimum": 0,
                                  "maximum": 9223372036854000000
                                },
                                "maxQueuedQos0Messages": {
                                  "type": "integer",
                                  "format": "int64",
                                  "description": "Maximum receive QoS0 for external clients.",
                                  "minimum": 0,
                                  "maximum": 9223372036854000000
                                },
                                "maxSessionExpirySecs": {
                                  "type": "integer",
                                  "format": "int64",
                                  "description": "Maximum session expiry interval, in seconds.",
                                  "minimum": 0,
                                  "maximum": 4294967295
                                }
                              },
                              "required": [
                                "maxInflightMessages",
                                "maxInflightPatches",
                                "maxInflightPatchesPerClient",
                                "maxQueuedMessages",
                                "maxQueuedQos0Messages",
                                "maxSessionExpirySecs"
                              ]
                            },
                            "workers": {
                              "type": "integer",
                              "format": "int32",
                              "description": "Number of logical backend workers per pod.",
                              "default": 1,
                              "minimum": 0,
                              "maximum": 65535
                            }
                          },
                          "required": [
                            "partitions",
                            "redundancyFactor"
                          ]
                        },
                        "frontend": {
                          "description": "The frontend broker desired properties",
                          "type": "object",
                          "properties": {
                            "replicas": {
                              "type": "integer",
                              "format": "int32",
                              "description": "Replicas is desired number of frontend replicas of the given distributed MQTT broker.",
                              "minimum": 0,
                              "maximum": 65535
                            },
                            "temporaryResourceLimits": {
                              "description": "Defines the limits for resources of the frontend instances of the MQTT broker.",
                              "type": "object",
                              "properties": {
                                "maxInflightMessages": {
                                  "type": "integer",
                                  "format": "int32",
                                  "description": "Maximum number of messages a client can have inflight.",
                                  "minimum": 0,
                                  "maximum": 65535
                                },
                                "maxInflightPatches": {
                                  "type": "integer",
                                  "format": "int32",
                                  "description": "Maximum number of patch inflight per node.",
                                  "minimum": 0,
                                  "maximum": 65535
                                },
                                "maxInflightPatchesPerClient": {
                                  "type": "integer",
                                  "format": "int32",
                                  "description": "Maximum number of patch a client can have in flight.",
                                  "minimum": 0,
                                  "maximum": 65535
                                },
                                "maxMessageExpirySecs": {
                                  "type": "integer",
                                  "format": "int64",
                                  "description": "Maximum message expiry interval, in seconds.",
                                  "minimum": 0,
                                  "maximum": 4294967295
                                },
                                "maxQueuedMessages": {
                                  "type": "integer",
                                  "format": "int64",
                                  "description": "Maximum receive for external clients.",
                                  "minimum": 0,
                                  "maximum": 9223372036854000000
                                },
                                "maxQueuedQos0Messages": {
                                  "type": "integer",
                                  "format": "int64",
                                  "description": "Maximum receive QoS0 for external clients.",
                                  "minimum": 0,
                                  "maximum": 9223372036854000000
                                },
                                "maxSessionExpirySecs": {
                                  "type": "integer",
                                  "format": "int64",
                                  "description": "Maximum session expiry interval, in seconds.",
                                  "minimum": 0,
                                  "maximum": 4294967295
                                }
                              },
                              "required": [
                                "maxInflightMessages",
                                "maxInflightPatches",
                                "maxInflightPatchesPerClient",
                                "maxQueuedMessages",
                                "maxQueuedQos0Messages",
                                "maxSessionExpirySecs"
                              ]
                            },
                            "workers": {
                              "type": "integer",
                              "format": "int32",
                              "description": "Number of logical frontend workers per pod.",
                              "default": 2,
                              "minimum": 0,
                              "maximum": 65535
                            }
                          },
                          "required": [
                            "replicas"
                          ]
                        }
                      },
                      "required": [
                        "backendChain",
                        "frontend"
                      ]
                    },
                    "diagnostics": {
                      "description": "The diagnostic details of the broker deployment.",
                      "type": "object",
                      "properties": {
                        "diagnosticServiceEndpoint": {
                          "type": "string",
                          "description": "Diagnostic Service endpoint"
                        },
                        "enableMetrics": {
                          "type": "boolean",
                          "description": "Knob to enable/disable metrics. Default = true",
                          "default": true
                        },
                        "enableSelfCheck": {
                          "type": "boolean",
                          "description": "Enable self check on Broker via Probe.",
                          "default": true
                        },
                        "enableSelfTracing": {
                          "type": "boolean",
                          "description": "Enable self tracing on the Broker so that every selfCheckFrequencySeconds a random message is traced even if it didn't have trace context.",
                          "default": true
                        },
                        "enableTracing": {
                          "type": "boolean",
                          "description": "Knob to enable/disable entire tracing infrastructure.",
                          "default": true
                        },
                        "logFormat": {
                          "type": "string",
                          "description": "Format for the logs generated.",
                          "default": "text"
                        },
                        "logLevel": {
                          "type": "string",
                          "description": "Log level for the Broker.",
                          "default": "info,hyper=off,kube_client=off,tower=off,conhash=off,h2=off"
                        },
                        "maxCellMapLifetime": {
                          "type": "integer",
                          "format": "int64",
                          "description": "Maximum time for the CellMap to live.",
                          "default": 60,
                          "minimum": 0,
                          "maximum": 9223372036854000000
                        },
                        "metricUpdateFrequencySeconds": {
                          "type": "integer",
                          "format": "int64",
                          "description": "Metric update frequency in seconds.",
                          "default": 30,
                          "minimum": 0,
                          "maximum": 9223372036854000000
                        },
                        "probeImage": {
                          "type": "string",
                          "description": "Probe Image to run.",
                          "default": "sample.azurecr.io/diagnostics-probe:0.5.0"
                        },
                        "selfCheckFrequencySeconds": {
                          "type": "integer",
                          "format": "int64",
                          "description": "Frequency for the self check to run.",
                          "default": 30,
                          "minimum": 0,
                          "maximum": 9223372036854000000
                        },
                        "selfCheckTimeoutSeconds": {
                          "type": "integer",
                          "format": "int64",
                          "description": "Time out period of the self check.",
                          "default": 15,
                          "minimum": 0,
                          "maximum": 9223372036854000000
                        },
                        "selfTraceFrequencySeconds": {
                          "type": "integer",
                          "format": "int64",
                          "description": "The frequency at which selfTrace should run.",
                          "default": 30,
                          "minimum": 0,
                          "maximum": 9223372036854000000
                        },
                        "spanChannelCapacity": {
                          "type": "integer",
                          "format": "int64",
                          "description": "The number of the spans generated by the Tracing.",
                          "default": 1000,
                          "minimum": 0,
                          "maximum": 9223372036854000000
                        }
                      }
                    },
                    "diskBackedMessageBufferSettings": {
                      "description": "The settings of the disk-backed message buffer.",
                      "type": "object",
                      "properties": {
                        "ephemeralVolumeClaimSpec": {
                          "description": "Use the specified persistent volume claim template to mount a \"generic ephemeral volume\" for the message buffer. See <https://kubernetes.io/docs/concepts/storage/ephemeral-volumes/#generic-ephemeral-volumes> for details.",
                          "type": "object",
                          "properties": {
                            "accessModes": {
                              "type": "array",
                              "description": "AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
                              "items": {
                                "type": "string"
                              }
                            },
                            "dataSource": {
                              "description": "This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.",
                              "type": "object",
                              "properties": {
                                "apiGroup": {
                                  "type": "string",
                                  "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required."
                                },
                                "kind": {
                                  "type": "string",
                                  "description": "Kind is the type of resource being referenced"
                                },
                                "name": {
                                  "type": "string",
                                  "description": "Name is the name of resource being referenced"
                                }
                              },
                              "required": [
                                "kind",
                                "name"
                              ]
                            },
                            "dataSourceRef": {
                              "description": "Specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef: * While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified. (Alpha) Using this field requires the AnyVolumeDataSource feature gate to be enabled.",
                              "type": "object",
                              "properties": {
                                "apiGroup": {
                                  "type": "string",
                                  "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required."
                                },
                                "kind": {
                                  "type": "string",
                                  "description": "Kind is the type of resource being referenced"
                                },
                                "name": {
                                  "type": "string",
                                  "description": "Name is the name of resource being referenced"
                                }
                              },
                              "required": [
                                "kind",
                                "name"
                              ]
                            },
                            "resources": {
                              "description": "Resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources",
                              "type": "object",
                              "properties": {
                                "limits": {
                                  "type": "object",
                                  "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                                  "additionalProperties": {
                                    "type": "string"
                                  }
                                },
                                "requests": {
                                  "type": "object",
                                  "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                                  "additionalProperties": {
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "selector": {
                              "description": "A label query over volumes to consider for binding.",
                              "type": "object",
                              "properties": {
                                "matchExpressions": {
                                  "type": "array",
                                  "description": "MatchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                  "items": {
                                    "type": "object",
                                    "description": "VolumeClaimSpecSelectorMatchExpressions properties",
                                    "properties": {
                                      "key": {
                                        "type": "string",
                                        "description": "key is the label key that the selector applies to."
                                      },
                                      "operator": {
                                        "type": "string",
                                        "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist."
                                      },
                                      "values": {
                                        "type": "array",
                                        "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                        "items": {
                                          "type": "string"
                                        }
                                      }
                                    },
                                    "required": [
                                      "key",
                                      "operator"
                                    ]
                                  },
                                  "x-ms-identifiers": []
                                },
                                "matchLabels": {
                                  "type": "object",
                                  "description": "MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                  "additionalProperties": {
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "storageClassName": {
                              "type": "string",
                              "description": "Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1"
                            },
                            "volumeMode": {
                              "type": "string",
                              "description": "volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec. This is a beta feature."
                            },
                            "volumeName": {
                              "type": "string",
                              "description": "VolumeName is the binding reference to the PersistentVolume backing this claim."
                            }
                          }
                        },
                        "maxSize": {
                          "type": "string",
                          "description": "The max size of the message buffer on disk. If a PVC template is specified using one of ephemeralVolumeClaimSpec or persistentVolumeClaimSpec, then this size is used as the request and limit sizes of that template. If neither ephemeralVolumeClaimSpec nor persistentVolumeClaimSpec are specified, then an emptyDir volume is mounted with this size as its limit. See <https://kubernetes.io/docs/concepts/storage/volumes/#emptydir> for details."
                        },
                        "persistentVolumeClaimSpec": {
                          "description": "Use the specified persistent volume claim template to mount a persistent volume for the message buffer.",
                          "type": "object",
                          "properties": {
                            "accessModes": {
                              "type": "array",
                              "description": "AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
                              "items": {
                                "type": "string"
                              }
                            },
                            "dataSource": {
                              "description": "This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.",
                              "type": "object",
                              "properties": {
                                "apiGroup": {
                                  "type": "string",
                                  "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required."
                                },
                                "kind": {
                                  "type": "string",
                                  "description": "Kind is the type of resource being referenced"
                                },
                                "name": {
                                  "type": "string",
                                  "description": "Name is the name of resource being referenced"
                                }
                              },
                              "required": [
                                "kind",
                                "name"
                              ]
                            },
                            "dataSourceRef": {
                              "description": "Specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef: * While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified. (Alpha) Using this field requires the AnyVolumeDataSource feature gate to be enabled.",
                              "type": "object",
                              "properties": {
                                "apiGroup": {
                                  "type": "string",
                                  "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required."
                                },
                                "kind": {
                                  "type": "string",
                                  "description": "Kind is the type of resource being referenced"
                                },
                                "name": {
                                  "type": "string",
                                  "description": "Name is the name of resource being referenced"
                                }
                              },
                              "required": [
                                "kind",
                                "name"
                              ]
                            },
                            "resources": {
                              "description": "Resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources",
                              "type": "object",
                              "properties": {
                                "limits": {
                                  "type": "object",
                                  "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                                  "additionalProperties": {
                                    "type": "string"
                                  }
                                },
                                "requests": {
                                  "type": "object",
                                  "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                                  "additionalProperties": {
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "selector": {
                              "description": "A label query over volumes to consider for binding.",
                              "type": "object",
                              "properties": {
                                "matchExpressions": {
                                  "type": "array",
                                  "description": "MatchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                  "items": {
                                    "type": "object",
                                    "description": "VolumeClaimSpecSelectorMatchExpressions properties",
                                    "properties": {
                                      "key": {
                                        "type": "string",
                                        "description": "key is the label key that the selector applies to."
                                      },
                                      "operator": {
                                        "type": "string",
                                        "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist."
                                      },
                                      "values": {
                                        "type": "array",
                                        "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                        "items": {
                                          "type": "string"
                                        }
                                      }
                                    },
                                    "required": [
                                      "key",
                                      "operator"
                                    ]
                                  },
                                  "x-ms-identifiers": []
                                },
                                "matchLabels": {
                                  "type": "object",
                                  "description": "MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                  "additionalProperties": {
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "storageClassName": {
                              "type": "string",
                              "description": "Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1"
                            },
                            "volumeMode": {
                              "type": "string",
                              "description": "volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec. This is a beta feature."
                            },
                            "volumeName": {
                              "type": "string",
                              "description": "VolumeName is the binding reference to the PersistentVolume backing this claim."
                            }
                          }
                        }
                      },
                      "required": [
                        "maxSize"
                      ]
                    },
                    "encryptInternalTraffic": {
                      "type": "boolean",
                      "description": "The setting to enable or disable encryption of internal Traffic.",
                      "default": true
                    },
                    "healthManagerImage": {
                      "description": "The details of Health Manager Docker Image.",
                      "type": "object",
                      "properties": {
                        "pullPolicy": {
                          "type": "string",
                          "description": "Image pull policy."
                        },
                        "pullSecrets": {
                          "type": "string",
                          "description": "Image pull secrets."
                        },
                        "repository": {
                          "type": "string",
                          "description": "The Docker image name."
                        },
                        "tag": {
                          "type": "string",
                          "description": "The Docker  image tag."
                        }
                      },
                      "required": [
                        "repository",
                        "tag"
                      ]
                    },
                    "healthManagerNodeTolerations": {
                      "description": "The details of Node Tolerations for Health Manager Pods.",
                      "type": "object",
                      "properties": {
                        "effect": {
                          "type": "string",
                          "description": "Toleration effect."
                        },
                        "key": {
                          "type": "string",
                          "description": "Toleration key."
                        },
                        "operator": {
                          "type": "string",
                          "description": "Toleration operator like 'Exists', 'Equal' etc."
                        },
                        "value": {
                          "type": "string",
                          "description": "Toleration Value."
                        }
                      },
                      "required": [
                        "effect",
                        "key",
                        "operator",
                        "value"
                      ]
                    },
                    "internalCerts": {
                      "description": "Details of the internal CA cert that will be used to secure communication between pods.",
                      "type": "object",
                      "properties": {
                        "duration": {
                          "type": "string",
                          "description": "Duration of CA cert.",
                          "default": "720h"
                        },
                        "privateKey": {
                          "description": "Cert Manager private key.",
                          "type": "object",
                          "properties": {
                            "algorithm": {
                              "type": "string",
                              "description": "algorithm for private key.",
                              "default": "ECDSA"
                            },
                            "rotationPolicy": {
                              "type": "string",
                              "description": "cert-manager rotationPolicy.",
                              "default": "Always"
                            },
                            "size": {
                              "type": "integer",
                              "format": "int32",
                              "description": "size of private key.",
                              "default": 256,
                              "minimum": 0,
                              "maximum": 65535
                            }
                          },
                          "required": [
                            "algorithm",
                            "rotationPolicy",
                            "size"
                          ]
                        },
                        "renewBefore": {
                          "type": "string",
                          "description": "Renew before time of CA cert.",
                          "default": "240h"
                        }
                      },
                      "required": [
                        "duration",
                        "privateKey",
                        "renewBefore"
                      ]
                    },
                    "memoryProfile": {
                      "type": "string",
                      "description": "Memory profile of broker.",
                      "default": "medium",
                      "enum": [
                        "tiny",
                        "low",
                        "medium",
                        "high"
                      ],
                      "x-ms-enum": {
                        "name": "BrokerMemoryProfile",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "tiny",
                            "value": "tiny",
                            "description": "Tiny memory profile."
                          },
                          {
                            "name": "low",
                            "value": "low",
                            "description": "Low memory profile."
                          },
                          {
                            "name": "medium",
                            "value": "medium",
                            "description": "Medium memory profile."
                          },
                          {
                            "name": "high",
                            "value": "high",
                            "description": "High memory profile."
                          }
                        ]
                      }
                    },
                    "mode": {
                      "description": "The Running Mode of the Broker Deployment.",
                      "type": "string",
                      "enum": [
                        "auto",
                        "distributed"
                      ],
                      "x-ms-enum": {
                        "name": "RunMode",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "auto",
                            "value": "auto",
                            "description": "Automatically provision Frontend and Backend pods."
                          },
                          {
                            "name": "distributed",
                            "value": "distributed",
                            "description": "Use Cardinality to set Frontend and Backend pods."
                          }
                        ]
                      }
                    },
                    "provisioningState": {
                      "description": "The status of the last operation.",
                      "readOnly": true,
                      "type": "string",
                      "enum": [
                        "Succeeded",
                        "Failed",
                        "Canceled",
                        "Provisioning",
                        "Updating",
                        "Deleting",
                        "Accepted"
                      ],
                      "x-ms-enum": {
                        "name": "ProvisioningState",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Succeeded",
                            "value": "Succeeded",
                            "description": "Resource has been created."
                          },
                          {
                            "name": "Failed",
                            "value": "Failed",
                            "description": "Resource creation failed."
                          },
                          {
                            "name": "Canceled",
                            "value": "Canceled",
                            "description": "Resource creation was canceled."
                          },
                          {
                            "name": "Provisioning",
                            "value": "Provisioning",
                            "description": "Resource is getting provisioned."
                          },
                          {
                            "name": "Updating",
                            "value": "Updating",
                            "description": "Resource is Updating."
                          },
                          {
                            "name": "Deleting",
                            "value": "Deleting",
                            "description": "Resource is Deleting."
                          },
                          {
                            "name": "Accepted",
                            "value": "Accepted",
                            "description": "Resource has been Accepted."
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "authImage",
                    "brokerImage",
                    "healthManagerImage",
                    "mode"
                  ]
                },
                "extendedLocation": {
                  "description": "Extended Location",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ],
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The name of the extended location."
                    },
                    "type": {
                      "description": "Type of ExtendedLocation.",
                      "type": "string",
                      "enum": [
                        "CustomLocation"
                      ],
                      "x-ms-enum": {
                        "name": "ExtendedLocationType",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "CustomLocation",
                            "value": "CustomLocation",
                            "description": "CustomLocation type"
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "name",
                    "type"
                  ]
                }
              },
              "required": [
                "extendedLocation"
              ]
            }
          }
        }
      },
      "put": {
        "operationId": "Broker_CreateOrUpdate",
        "tags": [
          "Broker"
        ],
        "description": "Create a BrokerResource",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group. The name is case insensitive.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "x-ms-parameter-location": "method"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "brokerName",
            "in": "path",
            "description": "Name of MQ broker resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "resource",
            "in": "body",
            "description": "Resource create parameters.",
            "required": true,
            "schema": {
              "type": "object",
              "description": "MQ broker resource",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "description": "The name of the resource",
                  "readOnly": true
                },
                "type": {
                  "type": "string",
                  "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                  "readOnly": true
                },
                "systemData": {
                  "type": "object",
                  "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                  "readOnly": true,
                  "properties": {
                    "createdBy": {
                      "type": "string",
                      "description": "The identity that created the resource."
                    },
                    "createdByType": {
                      "type": "string",
                      "description": "The type of identity that created the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource creation (UTC)."
                    },
                    "lastModifiedBy": {
                      "type": "string",
                      "description": "The identity that last modified the resource."
                    },
                    "lastModifiedByType": {
                      "type": "string",
                      "description": "The type of identity that last modified the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "lastModifiedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource last modification (UTC)"
                    }
                  }
                },
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "x-ms-mutability": [
                    "read",
                    "create",
                    "update"
                  ]
                },
                "location": {
                  "type": "string",
                  "description": "The geo-location where the resource lives",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ]
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "authImage": {
                      "description": "The details of Authentication Docker Image.",
                      "type": "object",
                      "properties": {
                        "pullPolicy": {
                          "type": "string",
                          "description": "Image pull policy."
                        },
                        "pullSecrets": {
                          "type": "string",
                          "description": "Image pull secrets."
                        },
                        "repository": {
                          "type": "string",
                          "description": "The Docker image name."
                        },
                        "tag": {
                          "type": "string",
                          "description": "The Docker  image tag."
                        }
                      },
                      "required": [
                        "repository",
                        "tag"
                      ]
                    },
                    "brokerImage": {
                      "description": "The details of Broker Docker Image.",
                      "type": "object",
                      "properties": {
                        "pullPolicy": {
                          "type": "string",
                          "description": "Image pull policy."
                        },
                        "pullSecrets": {
                          "type": "string",
                          "description": "Image pull secrets."
                        },
                        "repository": {
                          "type": "string",
                          "description": "The Docker image name."
                        },
                        "tag": {
                          "type": "string",
                          "description": "The Docker  image tag."
                        }
                      },
                      "required": [
                        "repository",
                        "tag"
                      ]
                    },
                    "brokerNodeTolerations": {
                      "description": "The details of Node Tolerations for Broker Pods.",
                      "type": "object",
                      "properties": {
                        "effect": {
                          "type": "string",
                          "description": "Toleration effect."
                        },
                        "key": {
                          "type": "string",
                          "description": "Toleration key."
                        },
                        "operator": {
                          "type": "string",
                          "description": "Toleration operator like 'Exists', 'Equal' etc."
                        },
                        "value": {
                          "type": "string",
                          "description": "Toleration Value."
                        }
                      },
                      "required": [
                        "effect",
                        "key",
                        "operator",
                        "value"
                      ]
                    },
                    "cardinality": {
                      "description": "The cardinality details of the broker.",
                      "type": "object",
                      "properties": {
                        "backendChain": {
                          "description": "The backend broker desired properties",
                          "type": "object",
                          "properties": {
                            "partitions": {
                              "type": "integer",
                              "format": "int32",
                              "description": "Partitions is desired number of physical backend chains of the given distributed MQTT broker.",
                              "minimum": 0,
                              "maximum": 65535
                            },
                            "redundancyFactor": {
                              "type": "integer",
                              "format": "int32",
                              "description": "Redundancy Factor is desired numbers of broker instances in one chain.",
                              "minimum": 0,
                              "maximum": 65535
                            },
                            "temporaryDiskTransferEnabled": {
                              "type": "boolean",
                              "description": "Defines whether disk transfer is enabled or not."
                            },
                            "temporaryDiskTransferHighWatermarkPercent": {
                              "type": "integer",
                              "format": "int32",
                              "description": "Defines the percentage usage of buffer pool above which disk transfer will start.",
                              "minimum": 0,
                              "maximum": 100
                            },
                            "temporaryDiskTransferLowWatermarkPercent": {
                              "type": "integer",
                              "format": "int32",
                              "description": "Defines the percentage usage of buffer pool below which disk transfer will stop.",
                              "minimum": 0,
                              "maximum": 100
                            },
                            "temporaryMaxBackendMemUsagePercent": {
                              "type": "integer",
                              "format": "int32",
                              "description": "Defines the limits for memory usage percent of the backend instances of the MQTT broker.",
                              "minimum": 0,
                              "maximum": 100
                            },
                            "temporaryResourceLimits": {
                              "description": "Defines the limits for resources of the backend instances of the MQTT broker.",
                              "type": "object",
                              "properties": {
                                "maxInflightMessages": {
                                  "type": "integer",
                                  "format": "int32",
                                  "description": "Maximum number of messages a client can have inflight.",
                                  "minimum": 0,
                                  "maximum": 65535
                                },
                                "maxInflightPatches": {
                                  "type": "integer",
                                  "format": "int32",
                                  "description": "Maximum number of patch inflight per node.",
                                  "minimum": 0,
                                  "maximum": 65535
                                },
                                "maxInflightPatchesPerClient": {
                                  "type": "integer",
                                  "format": "int32",
                                  "description": "Maximum number of patch a client can have in flight.",
                                  "minimum": 0,
                                  "maximum": 65535
                                },
                                "maxMessageExpirySecs": {
                                  "type": "integer",
                                  "format": "int64",
                                  "description": "Maximum message expiry interval, in seconds.",
                                  "minimum": 0,
                                  "maximum": 4294967295
                                },
                                "maxQueuedMessages": {
                                  "type": "integer",
                                  "format": "int64",
                                  "description": "Maximum receive for external clients.",
                                  "minimum": 0,
                                  "maximum": 9223372036854000000
                                },
                                "maxQueuedQos0Messages": {
                                  "type": "integer",
                                  "format": "int64",
                                  "description": "Maximum receive QoS0 for external clients.",
                                  "minimum": 0,
                                  "maximum": 9223372036854000000
                                },
                                "maxSessionExpirySecs": {
                                  "type": "integer",
                                  "format": "int64",
                                  "description": "Maximum session expiry interval, in seconds.",
                                  "minimum": 0,
                                  "maximum": 4294967295
                                }
                              },
                              "required": [
                                "maxInflightMessages",
                                "maxInflightPatches",
                                "maxInflightPatchesPerClient",
                                "maxQueuedMessages",
                                "maxQueuedQos0Messages",
                                "maxSessionExpirySecs"
                              ]
                            },
                            "workers": {
                              "type": "integer",
                              "format": "int32",
                              "description": "Number of logical backend workers per pod.",
                              "default": 1,
                              "minimum": 0,
                              "maximum": 65535
                            }
                          },
                          "required": [
                            "partitions",
                            "redundancyFactor"
                          ]
                        },
                        "frontend": {
                          "description": "The frontend broker desired properties",
                          "type": "object",
                          "properties": {
                            "replicas": {
                              "type": "integer",
                              "format": "int32",
                              "description": "Replicas is desired number of frontend replicas of the given distributed MQTT broker.",
                              "minimum": 0,
                              "maximum": 65535
                            },
                            "temporaryResourceLimits": {
                              "description": "Defines the limits for resources of the frontend instances of the MQTT broker.",
                              "type": "object",
                              "properties": {
                                "maxInflightMessages": {
                                  "type": "integer",
                                  "format": "int32",
                                  "description": "Maximum number of messages a client can have inflight.",
                                  "minimum": 0,
                                  "maximum": 65535
                                },
                                "maxInflightPatches": {
                                  "type": "integer",
                                  "format": "int32",
                                  "description": "Maximum number of patch inflight per node.",
                                  "minimum": 0,
                                  "maximum": 65535
                                },
                                "maxInflightPatchesPerClient": {
                                  "type": "integer",
                                  "format": "int32",
                                  "description": "Maximum number of patch a client can have in flight.",
                                  "minimum": 0,
                                  "maximum": 65535
                                },
                                "maxMessageExpirySecs": {
                                  "type": "integer",
                                  "format": "int64",
                                  "description": "Maximum message expiry interval, in seconds.",
                                  "minimum": 0,
                                  "maximum": 4294967295
                                },
                                "maxQueuedMessages": {
                                  "type": "integer",
                                  "format": "int64",
                                  "description": "Maximum receive for external clients.",
                                  "minimum": 0,
                                  "maximum": 9223372036854000000
                                },
                                "maxQueuedQos0Messages": {
                                  "type": "integer",
                                  "format": "int64",
                                  "description": "Maximum receive QoS0 for external clients.",
                                  "minimum": 0,
                                  "maximum": 9223372036854000000
                                },
                                "maxSessionExpirySecs": {
                                  "type": "integer",
                                  "format": "int64",
                                  "description": "Maximum session expiry interval, in seconds.",
                                  "minimum": 0,
                                  "maximum": 4294967295
                                }
                              },
                              "required": [
                                "maxInflightMessages",
                                "maxInflightPatches",
                                "maxInflightPatchesPerClient",
                                "maxQueuedMessages",
                                "maxQueuedQos0Messages",
                                "maxSessionExpirySecs"
                              ]
                            },
                            "workers": {
                              "type": "integer",
                              "format": "int32",
                              "description": "Number of logical frontend workers per pod.",
                              "default": 2,
                              "minimum": 0,
                              "maximum": 65535
                            }
                          },
                          "required": [
                            "replicas"
                          ]
                        }
                      },
                      "required": [
                        "backendChain",
                        "frontend"
                      ]
                    },
                    "diagnostics": {
                      "description": "The diagnostic details of the broker deployment.",
                      "type": "object",
                      "properties": {
                        "diagnosticServiceEndpoint": {
                          "type": "string",
                          "description": "Diagnostic Service endpoint"
                        },
                        "enableMetrics": {
                          "type": "boolean",
                          "description": "Knob to enable/disable metrics. Default = true",
                          "default": true
                        },
                        "enableSelfCheck": {
                          "type": "boolean",
                          "description": "Enable self check on Broker via Probe.",
                          "default": true
                        },
                        "enableSelfTracing": {
                          "type": "boolean",
                          "description": "Enable self tracing on the Broker so that every selfCheckFrequencySeconds a random message is traced even if it didn't have trace context.",
                          "default": true
                        },
                        "enableTracing": {
                          "type": "boolean",
                          "description": "Knob to enable/disable entire tracing infrastructure.",
                          "default": true
                        },
                        "logFormat": {
                          "type": "string",
                          "description": "Format for the logs generated.",
                          "default": "text"
                        },
                        "logLevel": {
                          "type": "string",
                          "description": "Log level for the Broker.",
                          "default": "info,hyper=off,kube_client=off,tower=off,conhash=off,h2=off"
                        },
                        "maxCellMapLifetime": {
                          "type": "integer",
                          "format": "int64",
                          "description": "Maximum time for the CellMap to live.",
                          "default": 60,
                          "minimum": 0,
                          "maximum": 9223372036854000000
                        },
                        "metricUpdateFrequencySeconds": {
                          "type": "integer",
                          "format": "int64",
                          "description": "Metric update frequency in seconds.",
                          "default": 30,
                          "minimum": 0,
                          "maximum": 9223372036854000000
                        },
                        "probeImage": {
                          "type": "string",
                          "description": "Probe Image to run.",
                          "default": "sample.azurecr.io/diagnostics-probe:0.5.0"
                        },
                        "selfCheckFrequencySeconds": {
                          "type": "integer",
                          "format": "int64",
                          "description": "Frequency for the self check to run.",
                          "default": 30,
                          "minimum": 0,
                          "maximum": 9223372036854000000
                        },
                        "selfCheckTimeoutSeconds": {
                          "type": "integer",
                          "format": "int64",
                          "description": "Time out period of the self check.",
                          "default": 15,
                          "minimum": 0,
                          "maximum": 9223372036854000000
                        },
                        "selfTraceFrequencySeconds": {
                          "type": "integer",
                          "format": "int64",
                          "description": "The frequency at which selfTrace should run.",
                          "default": 30,
                          "minimum": 0,
                          "maximum": 9223372036854000000
                        },
                        "spanChannelCapacity": {
                          "type": "integer",
                          "format": "int64",
                          "description": "The number of the spans generated by the Tracing.",
                          "default": 1000,
                          "minimum": 0,
                          "maximum": 9223372036854000000
                        }
                      }
                    },
                    "diskBackedMessageBufferSettings": {
                      "description": "The settings of the disk-backed message buffer.",
                      "type": "object",
                      "properties": {
                        "ephemeralVolumeClaimSpec": {
                          "description": "Use the specified persistent volume claim template to mount a \"generic ephemeral volume\" for the message buffer. See <https://kubernetes.io/docs/concepts/storage/ephemeral-volumes/#generic-ephemeral-volumes> for details.",
                          "type": "object",
                          "properties": {
                            "accessModes": {
                              "type": "array",
                              "description": "AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
                              "items": {
                                "type": "string"
                              }
                            },
                            "dataSource": {
                              "description": "This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.",
                              "type": "object",
                              "properties": {
                                "apiGroup": {
                                  "type": "string",
                                  "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required."
                                },
                                "kind": {
                                  "type": "string",
                                  "description": "Kind is the type of resource being referenced"
                                },
                                "name": {
                                  "type": "string",
                                  "description": "Name is the name of resource being referenced"
                                }
                              },
                              "required": [
                                "kind",
                                "name"
                              ]
                            },
                            "dataSourceRef": {
                              "description": "Specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef: * While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified. (Alpha) Using this field requires the AnyVolumeDataSource feature gate to be enabled.",
                              "type": "object",
                              "properties": {
                                "apiGroup": {
                                  "type": "string",
                                  "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required."
                                },
                                "kind": {
                                  "type": "string",
                                  "description": "Kind is the type of resource being referenced"
                                },
                                "name": {
                                  "type": "string",
                                  "description": "Name is the name of resource being referenced"
                                }
                              },
                              "required": [
                                "kind",
                                "name"
                              ]
                            },
                            "resources": {
                              "description": "Resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources",
                              "type": "object",
                              "properties": {
                                "limits": {
                                  "type": "object",
                                  "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                                  "additionalProperties": {
                                    "type": "string"
                                  }
                                },
                                "requests": {
                                  "type": "object",
                                  "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                                  "additionalProperties": {
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "selector": {
                              "description": "A label query over volumes to consider for binding.",
                              "type": "object",
                              "properties": {
                                "matchExpressions": {
                                  "type": "array",
                                  "description": "MatchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                  "items": {
                                    "type": "object",
                                    "description": "VolumeClaimSpecSelectorMatchExpressions properties",
                                    "properties": {
                                      "key": {
                                        "type": "string",
                                        "description": "key is the label key that the selector applies to."
                                      },
                                      "operator": {
                                        "type": "string",
                                        "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist."
                                      },
                                      "values": {
                                        "type": "array",
                                        "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                        "items": {
                                          "type": "string"
                                        }
                                      }
                                    },
                                    "required": [
                                      "key",
                                      "operator"
                                    ]
                                  },
                                  "x-ms-identifiers": []
                                },
                                "matchLabels": {
                                  "type": "object",
                                  "description": "MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                  "additionalProperties": {
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "storageClassName": {
                              "type": "string",
                              "description": "Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1"
                            },
                            "volumeMode": {
                              "type": "string",
                              "description": "volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec. This is a beta feature."
                            },
                            "volumeName": {
                              "type": "string",
                              "description": "VolumeName is the binding reference to the PersistentVolume backing this claim."
                            }
                          }
                        },
                        "maxSize": {
                          "type": "string",
                          "description": "The max size of the message buffer on disk. If a PVC template is specified using one of ephemeralVolumeClaimSpec or persistentVolumeClaimSpec, then this size is used as the request and limit sizes of that template. If neither ephemeralVolumeClaimSpec nor persistentVolumeClaimSpec are specified, then an emptyDir volume is mounted with this size as its limit. See <https://kubernetes.io/docs/concepts/storage/volumes/#emptydir> for details."
                        },
                        "persistentVolumeClaimSpec": {
                          "description": "Use the specified persistent volume claim template to mount a persistent volume for the message buffer.",
                          "type": "object",
                          "properties": {
                            "accessModes": {
                              "type": "array",
                              "description": "AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
                              "items": {
                                "type": "string"
                              }
                            },
                            "dataSource": {
                              "description": "This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.",
                              "type": "object",
                              "properties": {
                                "apiGroup": {
                                  "type": "string",
                                  "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required."
                                },
                                "kind": {
                                  "type": "string",
                                  "description": "Kind is the type of resource being referenced"
                                },
                                "name": {
                                  "type": "string",
                                  "description": "Name is the name of resource being referenced"
                                }
                              },
                              "required": [
                                "kind",
                                "name"
                              ]
                            },
                            "dataSourceRef": {
                              "description": "Specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef: * While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified. (Alpha) Using this field requires the AnyVolumeDataSource feature gate to be enabled.",
                              "type": "object",
                              "properties": {
                                "apiGroup": {
                                  "type": "string",
                                  "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required."
                                },
                                "kind": {
                                  "type": "string",
                                  "description": "Kind is the type of resource being referenced"
                                },
                                "name": {
                                  "type": "string",
                                  "description": "Name is the name of resource being referenced"
                                }
                              },
                              "required": [
                                "kind",
                                "name"
                              ]
                            },
                            "resources": {
                              "description": "Resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources",
                              "type": "object",
                              "properties": {
                                "limits": {
                                  "type": "object",
                                  "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                                  "additionalProperties": {
                                    "type": "string"
                                  }
                                },
                                "requests": {
                                  "type": "object",
                                  "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                                  "additionalProperties": {
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "selector": {
                              "description": "A label query over volumes to consider for binding.",
                              "type": "object",
                              "properties": {
                                "matchExpressions": {
                                  "type": "array",
                                  "description": "MatchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                  "items": {
                                    "type": "object",
                                    "description": "VolumeClaimSpecSelectorMatchExpressions properties",
                                    "properties": {
                                      "key": {
                                        "type": "string",
                                        "description": "key is the label key that the selector applies to."
                                      },
                                      "operator": {
                                        "type": "string",
                                        "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist."
                                      },
                                      "values": {
                                        "type": "array",
                                        "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                        "items": {
                                          "type": "string"
                                        }
                                      }
                                    },
                                    "required": [
                                      "key",
                                      "operator"
                                    ]
                                  },
                                  "x-ms-identifiers": []
                                },
                                "matchLabels": {
                                  "type": "object",
                                  "description": "MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                  "additionalProperties": {
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "storageClassName": {
                              "type": "string",
                              "description": "Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1"
                            },
                            "volumeMode": {
                              "type": "string",
                              "description": "volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec. This is a beta feature."
                            },
                            "volumeName": {
                              "type": "string",
                              "description": "VolumeName is the binding reference to the PersistentVolume backing this claim."
                            }
                          }
                        }
                      },
                      "required": [
                        "maxSize"
                      ]
                    },
                    "encryptInternalTraffic": {
                      "type": "boolean",
                      "description": "The setting to enable or disable encryption of internal Traffic.",
                      "default": true
                    },
                    "healthManagerImage": {
                      "description": "The details of Health Manager Docker Image.",
                      "type": "object",
                      "properties": {
                        "pullPolicy": {
                          "type": "string",
                          "description": "Image pull policy."
                        },
                        "pullSecrets": {
                          "type": "string",
                          "description": "Image pull secrets."
                        },
                        "repository": {
                          "type": "string",
                          "description": "The Docker image name."
                        },
                        "tag": {
                          "type": "string",
                          "description": "The Docker  image tag."
                        }
                      },
                      "required": [
                        "repository",
                        "tag"
                      ]
                    },
                    "healthManagerNodeTolerations": {
                      "description": "The details of Node Tolerations for Health Manager Pods.",
                      "type": "object",
                      "properties": {
                        "effect": {
                          "type": "string",
                          "description": "Toleration effect."
                        },
                        "key": {
                          "type": "string",
                          "description": "Toleration key."
                        },
                        "operator": {
                          "type": "string",
                          "description": "Toleration operator like 'Exists', 'Equal' etc."
                        },
                        "value": {
                          "type": "string",
                          "description": "Toleration Value."
                        }
                      },
                      "required": [
                        "effect",
                        "key",
                        "operator",
                        "value"
                      ]
                    },
                    "internalCerts": {
                      "description": "Details of the internal CA cert that will be used to secure communication between pods.",
                      "type": "object",
                      "properties": {
                        "duration": {
                          "type": "string",
                          "description": "Duration of CA cert.",
                          "default": "720h"
                        },
                        "privateKey": {
                          "description": "Cert Manager private key.",
                          "type": "object",
                          "properties": {
                            "algorithm": {
                              "type": "string",
                              "description": "algorithm for private key.",
                              "default": "ECDSA"
                            },
                            "rotationPolicy": {
                              "type": "string",
                              "description": "cert-manager rotationPolicy.",
                              "default": "Always"
                            },
                            "size": {
                              "type": "integer",
                              "format": "int32",
                              "description": "size of private key.",
                              "default": 256,
                              "minimum": 0,
                              "maximum": 65535
                            }
                          },
                          "required": [
                            "algorithm",
                            "rotationPolicy",
                            "size"
                          ]
                        },
                        "renewBefore": {
                          "type": "string",
                          "description": "Renew before time of CA cert.",
                          "default": "240h"
                        }
                      },
                      "required": [
                        "duration",
                        "privateKey",
                        "renewBefore"
                      ]
                    },
                    "memoryProfile": {
                      "type": "string",
                      "description": "Memory profile of broker.",
                      "default": "medium",
                      "enum": [
                        "tiny",
                        "low",
                        "medium",
                        "high"
                      ],
                      "x-ms-enum": {
                        "name": "BrokerMemoryProfile",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "tiny",
                            "value": "tiny",
                            "description": "Tiny memory profile."
                          },
                          {
                            "name": "low",
                            "value": "low",
                            "description": "Low memory profile."
                          },
                          {
                            "name": "medium",
                            "value": "medium",
                            "description": "Medium memory profile."
                          },
                          {
                            "name": "high",
                            "value": "high",
                            "description": "High memory profile."
                          }
                        ]
                      }
                    },
                    "mode": {
                      "description": "The Running Mode of the Broker Deployment.",
                      "type": "string",
                      "enum": [
                        "auto",
                        "distributed"
                      ],
                      "x-ms-enum": {
                        "name": "RunMode",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "auto",
                            "value": "auto",
                            "description": "Automatically provision Frontend and Backend pods."
                          },
                          {
                            "name": "distributed",
                            "value": "distributed",
                            "description": "Use Cardinality to set Frontend and Backend pods."
                          }
                        ]
                      }
                    },
                    "provisioningState": {
                      "description": "The status of the last operation.",
                      "readOnly": true,
                      "type": "string",
                      "enum": [
                        "Succeeded",
                        "Failed",
                        "Canceled",
                        "Provisioning",
                        "Updating",
                        "Deleting",
                        "Accepted"
                      ],
                      "x-ms-enum": {
                        "name": "ProvisioningState",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Succeeded",
                            "value": "Succeeded",
                            "description": "Resource has been created."
                          },
                          {
                            "name": "Failed",
                            "value": "Failed",
                            "description": "Resource creation failed."
                          },
                          {
                            "name": "Canceled",
                            "value": "Canceled",
                            "description": "Resource creation was canceled."
                          },
                          {
                            "name": "Provisioning",
                            "value": "Provisioning",
                            "description": "Resource is getting provisioned."
                          },
                          {
                            "name": "Updating",
                            "value": "Updating",
                            "description": "Resource is Updating."
                          },
                          {
                            "name": "Deleting",
                            "value": "Deleting",
                            "description": "Resource is Deleting."
                          },
                          {
                            "name": "Accepted",
                            "value": "Accepted",
                            "description": "Resource has been Accepted."
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "authImage",
                    "brokerImage",
                    "healthManagerImage",
                    "mode"
                  ]
                },
                "extendedLocation": {
                  "description": "Extended Location",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ],
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The name of the extended location."
                    },
                    "type": {
                      "description": "Type of ExtendedLocation.",
                      "type": "string",
                      "enum": [
                        "CustomLocation"
                      ],
                      "x-ms-enum": {
                        "name": "ExtendedLocationType",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "CustomLocation",
                            "value": "CustomLocation",
                            "description": "CustomLocation type"
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "name",
                    "type"
                  ]
                }
              },
              "required": [
                "extendedLocation"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resource 'BrokerResource' update operation succeeded",
            "schema": {
              "type": "object",
              "description": "MQ broker resource",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "description": "The name of the resource",
                  "readOnly": true
                },
                "type": {
                  "type": "string",
                  "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                  "readOnly": true
                },
                "systemData": {
                  "type": "object",
                  "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                  "readOnly": true,
                  "properties": {
                    "createdBy": {
                      "type": "string",
                      "description": "The identity that created the resource."
                    },
                    "createdByType": {
                      "type": "string",
                      "description": "The type of identity that created the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource creation (UTC)."
                    },
                    "lastModifiedBy": {
                      "type": "string",
                      "description": "The identity that last modified the resource."
                    },
                    "lastModifiedByType": {
                      "type": "string",
                      "description": "The type of identity that last modified the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "lastModifiedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource last modification (UTC)"
                    }
                  }
                },
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "x-ms-mutability": [
                    "read",
                    "create",
                    "update"
                  ]
                },
                "location": {
                  "type": "string",
                  "description": "The geo-location where the resource lives",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ]
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "authImage": {
                      "description": "The details of Authentication Docker Image.",
                      "type": "object",
                      "properties": {
                        "pullPolicy": {
                          "type": "string",
                          "description": "Image pull policy."
                        },
                        "pullSecrets": {
                          "type": "string",
                          "description": "Image pull secrets."
                        },
                        "repository": {
                          "type": "string",
                          "description": "The Docker image name."
                        },
                        "tag": {
                          "type": "string",
                          "description": "The Docker  image tag."
                        }
                      },
                      "required": [
                        "repository",
                        "tag"
                      ]
                    },
                    "brokerImage": {
                      "description": "The details of Broker Docker Image.",
                      "type": "object",
                      "properties": {
                        "pullPolicy": {
                          "type": "string",
                          "description": "Image pull policy."
                        },
                        "pullSecrets": {
                          "type": "string",
                          "description": "Image pull secrets."
                        },
                        "repository": {
                          "type": "string",
                          "description": "The Docker image name."
                        },
                        "tag": {
                          "type": "string",
                          "description": "The Docker  image tag."
                        }
                      },
                      "required": [
                        "repository",
                        "tag"
                      ]
                    },
                    "brokerNodeTolerations": {
                      "description": "The details of Node Tolerations for Broker Pods.",
                      "type": "object",
                      "properties": {
                        "effect": {
                          "type": "string",
                          "description": "Toleration effect."
                        },
                        "key": {
                          "type": "string",
                          "description": "Toleration key."
                        },
                        "operator": {
                          "type": "string",
                          "description": "Toleration operator like 'Exists', 'Equal' etc."
                        },
                        "value": {
                          "type": "string",
                          "description": "Toleration Value."
                        }
                      },
                      "required": [
                        "effect",
                        "key",
                        "operator",
                        "value"
                      ]
                    },
                    "cardinality": {
                      "description": "The cardinality details of the broker.",
                      "type": "object",
                      "properties": {
                        "backendChain": {
                          "description": "The backend broker desired properties",
                          "type": "object",
                          "properties": {
                            "partitions": {
                              "type": "integer",
                              "format": "int32",
                              "description": "Partitions is desired number of physical backend chains of the given distributed MQTT broker.",
                              "minimum": 0,
                              "maximum": 65535
                            },
                            "redundancyFactor": {
                              "type": "integer",
                              "format": "int32",
                              "description": "Redundancy Factor is desired numbers of broker instances in one chain.",
                              "minimum": 0,
                              "maximum": 65535
                            },
                            "temporaryDiskTransferEnabled": {
                              "type": "boolean",
                              "description": "Defines whether disk transfer is enabled or not."
                            },
                            "temporaryDiskTransferHighWatermarkPercent": {
                              "type": "integer",
                              "format": "int32",
                              "description": "Defines the percentage usage of buffer pool above which disk transfer will start.",
                              "minimum": 0,
                              "maximum": 100
                            },
                            "temporaryDiskTransferLowWatermarkPercent": {
                              "type": "integer",
                              "format": "int32",
                              "description": "Defines the percentage usage of buffer pool below which disk transfer will stop.",
                              "minimum": 0,
                              "maximum": 100
                            },
                            "temporaryMaxBackendMemUsagePercent": {
                              "type": "integer",
                              "format": "int32",
                              "description": "Defines the limits for memory usage percent of the backend instances of the MQTT broker.",
                              "minimum": 0,
                              "maximum": 100
                            },
                            "temporaryResourceLimits": {
                              "description": "Defines the limits for resources of the backend instances of the MQTT broker.",
                              "type": "object",
                              "properties": {
                                "maxInflightMessages": {
                                  "type": "integer",
                                  "format": "int32",
                                  "description": "Maximum number of messages a client can have inflight.",
                                  "minimum": 0,
                                  "maximum": 65535
                                },
                                "maxInflightPatches": {
                                  "type": "integer",
                                  "format": "int32",
                                  "description": "Maximum number of patch inflight per node.",
                                  "minimum": 0,
                                  "maximum": 65535
                                },
                                "maxInflightPatchesPerClient": {
                                  "type": "integer",
                                  "format": "int32",
                                  "description": "Maximum number of patch a client can have in flight.",
                                  "minimum": 0,
                                  "maximum": 65535
                                },
                                "maxMessageExpirySecs": {
                                  "type": "integer",
                                  "format": "int64",
                                  "description": "Maximum message expiry interval, in seconds.",
                                  "minimum": 0,
                                  "maximum": 4294967295
                                },
                                "maxQueuedMessages": {
                                  "type": "integer",
                                  "format": "int64",
                                  "description": "Maximum receive for external clients.",
                                  "minimum": 0,
                                  "maximum": 9223372036854000000
                                },
                                "maxQueuedQos0Messages": {
                                  "type": "integer",
                                  "format": "int64",
                                  "description": "Maximum receive QoS0 for external clients.",
                                  "minimum": 0,
                                  "maximum": 9223372036854000000
                                },
                                "maxSessionExpirySecs": {
                                  "type": "integer",
                                  "format": "int64",
                                  "description": "Maximum session expiry interval, in seconds.",
                                  "minimum": 0,
                                  "maximum": 4294967295
                                }
                              },
                              "required": [
                                "maxInflightMessages",
                                "maxInflightPatches",
                                "maxInflightPatchesPerClient",
                                "maxQueuedMessages",
                                "maxQueuedQos0Messages",
                                "maxSessionExpirySecs"
                              ]
                            },
                            "workers": {
                              "type": "integer",
                              "format": "int32",
                              "description": "Number of logical backend workers per pod.",
                              "default": 1,
                              "minimum": 0,
                              "maximum": 65535
                            }
                          },
                          "required": [
                            "partitions",
                            "redundancyFactor"
                          ]
                        },
                        "frontend": {
                          "description": "The frontend broker desired properties",
                          "type": "object",
                          "properties": {
                            "replicas": {
                              "type": "integer",
                              "format": "int32",
                              "description": "Replicas is desired number of frontend replicas of the given distributed MQTT broker.",
                              "minimum": 0,
                              "maximum": 65535
                            },
                            "temporaryResourceLimits": {
                              "description": "Defines the limits for resources of the frontend instances of the MQTT broker.",
                              "type": "object",
                              "properties": {
                                "maxInflightMessages": {
                                  "type": "integer",
                                  "format": "int32",
                                  "description": "Maximum number of messages a client can have inflight.",
                                  "minimum": 0,
                                  "maximum": 65535
                                },
                                "maxInflightPatches": {
                                  "type": "integer",
                                  "format": "int32",
                                  "description": "Maximum number of patch inflight per node.",
                                  "minimum": 0,
                                  "maximum": 65535
                                },
                                "maxInflightPatchesPerClient": {
                                  "type": "integer",
                                  "format": "int32",
                                  "description": "Maximum number of patch a client can have in flight.",
                                  "minimum": 0,
                                  "maximum": 65535
                                },
                                "maxMessageExpirySecs": {
                                  "type": "integer",
                                  "format": "int64",
                                  "description": "Maximum message expiry interval, in seconds.",
                                  "minimum": 0,
                                  "maximum": 4294967295
                                },
                                "maxQueuedMessages": {
                                  "type": "integer",
                                  "format": "int64",
                                  "description": "Maximum receive for external clients.",
                                  "minimum": 0,
                                  "maximum": 9223372036854000000
                                },
                                "maxQueuedQos0Messages": {
                                  "type": "integer",
                                  "format": "int64",
                                  "description": "Maximum receive QoS0 for external clients.",
                                  "minimum": 0,
                                  "maximum": 9223372036854000000
                                },
                                "maxSessionExpirySecs": {
                                  "type": "integer",
                                  "format": "int64",
                                  "description": "Maximum session expiry interval, in seconds.",
                                  "minimum": 0,
                                  "maximum": 4294967295
                                }
                              },
                              "required": [
                                "maxInflightMessages",
                                "maxInflightPatches",
                                "maxInflightPatchesPerClient",
                                "maxQueuedMessages",
                                "maxQueuedQos0Messages",
                                "maxSessionExpirySecs"
                              ]
                            },
                            "workers": {
                              "type": "integer",
                              "format": "int32",
                              "description": "Number of logical frontend workers per pod.",
                              "default": 2,
                              "minimum": 0,
                              "maximum": 65535
                            }
                          },
                          "required": [
                            "replicas"
                          ]
                        }
                      },
                      "required": [
                        "backendChain",
                        "frontend"
                      ]
                    },
                    "diagnostics": {
                      "description": "The diagnostic details of the broker deployment.",
                      "type": "object",
                      "properties": {
                        "diagnosticServiceEndpoint": {
                          "type": "string",
                          "description": "Diagnostic Service endpoint"
                        },
                        "enableMetrics": {
                          "type": "boolean",
                          "description": "Knob to enable/disable metrics. Default = true",
                          "default": true
                        },
                        "enableSelfCheck": {
                          "type": "boolean",
                          "description": "Enable self check on Broker via Probe.",
                          "default": true
                        },
                        "enableSelfTracing": {
                          "type": "boolean",
                          "description": "Enable self tracing on the Broker so that every selfCheckFrequencySeconds a random message is traced even if it didn't have trace context.",
                          "default": true
                        },
                        "enableTracing": {
                          "type": "boolean",
                          "description": "Knob to enable/disable entire tracing infrastructure.",
                          "default": true
                        },
                        "logFormat": {
                          "type": "string",
                          "description": "Format for the logs generated.",
                          "default": "text"
                        },
                        "logLevel": {
                          "type": "string",
                          "description": "Log level for the Broker.",
                          "default": "info,hyper=off,kube_client=off,tower=off,conhash=off,h2=off"
                        },
                        "maxCellMapLifetime": {
                          "type": "integer",
                          "format": "int64",
                          "description": "Maximum time for the CellMap to live.",
                          "default": 60,
                          "minimum": 0,
                          "maximum": 9223372036854000000
                        },
                        "metricUpdateFrequencySeconds": {
                          "type": "integer",
                          "format": "int64",
                          "description": "Metric update frequency in seconds.",
                          "default": 30,
                          "minimum": 0,
                          "maximum": 9223372036854000000
                        },
                        "probeImage": {
                          "type": "string",
                          "description": "Probe Image to run.",
                          "default": "sample.azurecr.io/diagnostics-probe:0.5.0"
                        },
                        "selfCheckFrequencySeconds": {
                          "type": "integer",
                          "format": "int64",
                          "description": "Frequency for the self check to run.",
                          "default": 30,
                          "minimum": 0,
                          "maximum": 9223372036854000000
                        },
                        "selfCheckTimeoutSeconds": {
                          "type": "integer",
                          "format": "int64",
                          "description": "Time out period of the self check.",
                          "default": 15,
                          "minimum": 0,
                          "maximum": 9223372036854000000
                        },
                        "selfTraceFrequencySeconds": {
                          "type": "integer",
                          "format": "int64",
                          "description": "The frequency at which selfTrace should run.",
                          "default": 30,
                          "minimum": 0,
                          "maximum": 9223372036854000000
                        },
                        "spanChannelCapacity": {
                          "type": "integer",
                          "format": "int64",
                          "description": "The number of the spans generated by the Tracing.",
                          "default": 1000,
                          "minimum": 0,
                          "maximum": 9223372036854000000
                        }
                      }
                    },
                    "diskBackedMessageBufferSettings": {
                      "description": "The settings of the disk-backed message buffer.",
                      "type": "object",
                      "properties": {
                        "ephemeralVolumeClaimSpec": {
                          "description": "Use the specified persistent volume claim template to mount a \"generic ephemeral volume\" for the message buffer. See <https://kubernetes.io/docs/concepts/storage/ephemeral-volumes/#generic-ephemeral-volumes> for details.",
                          "type": "object",
                          "properties": {
                            "accessModes": {
                              "type": "array",
                              "description": "AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
                              "items": {
                                "type": "string"
                              }
                            },
                            "dataSource": {
                              "description": "This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.",
                              "type": "object",
                              "properties": {
                                "apiGroup": {
                                  "type": "string",
                                  "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required."
                                },
                                "kind": {
                                  "type": "string",
                                  "description": "Kind is the type of resource being referenced"
                                },
                                "name": {
                                  "type": "string",
                                  "description": "Name is the name of resource being referenced"
                                }
                              },
                              "required": [
                                "kind",
                                "name"
                              ]
                            },
                            "dataSourceRef": {
                              "description": "Specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef: * While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified. (Alpha) Using this field requires the AnyVolumeDataSource feature gate to be enabled.",
                              "type": "object",
                              "properties": {
                                "apiGroup": {
                                  "type": "string",
                                  "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required."
                                },
                                "kind": {
                                  "type": "string",
                                  "description": "Kind is the type of resource being referenced"
                                },
                                "name": {
                                  "type": "string",
                                  "description": "Name is the name of resource being referenced"
                                }
                              },
                              "required": [
                                "kind",
                                "name"
                              ]
                            },
                            "resources": {
                              "description": "Resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources",
                              "type": "object",
                              "properties": {
                                "limits": {
                                  "type": "object",
                                  "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                                  "additionalProperties": {
                                    "type": "string"
                                  }
                                },
                                "requests": {
                                  "type": "object",
                                  "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                                  "additionalProperties": {
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "selector": {
                              "description": "A label query over volumes to consider for binding.",
                              "type": "object",
                              "properties": {
                                "matchExpressions": {
                                  "type": "array",
                                  "description": "MatchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                  "items": {
                                    "type": "object",
                                    "description": "VolumeClaimSpecSelectorMatchExpressions properties",
                                    "properties": {
                                      "key": {
                                        "type": "string",
                                        "description": "key is the label key that the selector applies to."
                                      },
                                      "operator": {
                                        "type": "string",
                                        "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist."
                                      },
                                      "values": {
                                        "type": "array",
                                        "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                        "items": {
                                          "type": "string"
                                        }
                                      }
                                    },
                                    "required": [
                                      "key",
                                      "operator"
                                    ]
                                  },
                                  "x-ms-identifiers": []
                                },
                                "matchLabels": {
                                  "type": "object",
                                  "description": "MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                  "additionalProperties": {
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "storageClassName": {
                              "type": "string",
                              "description": "Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1"
                            },
                            "volumeMode": {
                              "type": "string",
                              "description": "volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec. This is a beta feature."
                            },
                            "volumeName": {
                              "type": "string",
                              "description": "VolumeName is the binding reference to the PersistentVolume backing this claim."
                            }
                          }
                        },
                        "maxSize": {
                          "type": "string",
                          "description": "The max size of the message buffer on disk. If a PVC template is specified using one of ephemeralVolumeClaimSpec or persistentVolumeClaimSpec, then this size is used as the request and limit sizes of that template. If neither ephemeralVolumeClaimSpec nor persistentVolumeClaimSpec are specified, then an emptyDir volume is mounted with this size as its limit. See <https://kubernetes.io/docs/concepts/storage/volumes/#emptydir> for details."
                        },
                        "persistentVolumeClaimSpec": {
                          "description": "Use the specified persistent volume claim template to mount a persistent volume for the message buffer.",
                          "type": "object",
                          "properties": {
                            "accessModes": {
                              "type": "array",
                              "description": "AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
                              "items": {
                                "type": "string"
                              }
                            },
                            "dataSource": {
                              "description": "This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.",
                              "type": "object",
                              "properties": {
                                "apiGroup": {
                                  "type": "string",
                                  "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required."
                                },
                                "kind": {
                                  "type": "string",
                                  "description": "Kind is the type of resource being referenced"
                                },
                                "name": {
                                  "type": "string",
                                  "description": "Name is the name of resource being referenced"
                                }
                              },
                              "required": [
                                "kind",
                                "name"
                              ]
                            },
                            "dataSourceRef": {
                              "description": "Specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef: * While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified. (Alpha) Using this field requires the AnyVolumeDataSource feature gate to be enabled.",
                              "type": "object",
                              "properties": {
                                "apiGroup": {
                                  "type": "string",
                                  "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required."
                                },
                                "kind": {
                                  "type": "string",
                                  "description": "Kind is the type of resource being referenced"
                                },
                                "name": {
                                  "type": "string",
                                  "description": "Name is the name of resource being referenced"
                                }
                              },
                              "required": [
                                "kind",
                                "name"
                              ]
                            },
                            "resources": {
                              "description": "Resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources",
                              "type": "object",
                              "properties": {
                                "limits": {
                                  "type": "object",
                                  "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                                  "additionalProperties": {
                                    "type": "string"
                                  }
                                },
                                "requests": {
                                  "type": "object",
                                  "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                                  "additionalProperties": {
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "selector": {
                              "description": "A label query over volumes to consider for binding.",
                              "type": "object",
                              "properties": {
                                "matchExpressions": {
                                  "type": "array",
                                  "description": "MatchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                  "items": {
                                    "type": "object",
                                    "description": "VolumeClaimSpecSelectorMatchExpressions properties",
                                    "properties": {
                                      "key": {
                                        "type": "string",
                                        "description": "key is the label key that the selector applies to."
                                      },
                                      "operator": {
                                        "type": "string",
                                        "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist."
                                      },
                                      "values": {
                                        "type": "array",
                                        "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                        "items": {
                                          "type": "string"
                                        }
                                      }
                                    },
                                    "required": [
                                      "key",
                                      "operator"
                                    ]
                                  },
                                  "x-ms-identifiers": []
                                },
                                "matchLabels": {
                                  "type": "object",
                                  "description": "MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                  "additionalProperties": {
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "storageClassName": {
                              "type": "string",
                              "description": "Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1"
                            },
                            "volumeMode": {
                              "type": "string",
                              "description": "volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec. This is a beta feature."
                            },
                            "volumeName": {
                              "type": "string",
                              "description": "VolumeName is the binding reference to the PersistentVolume backing this claim."
                            }
                          }
                        }
                      },
                      "required": [
                        "maxSize"
                      ]
                    },
                    "encryptInternalTraffic": {
                      "type": "boolean",
                      "description": "The setting to enable or disable encryption of internal Traffic.",
                      "default": true
                    },
                    "healthManagerImage": {
                      "description": "The details of Health Manager Docker Image.",
                      "type": "object",
                      "properties": {
                        "pullPolicy": {
                          "type": "string",
                          "description": "Image pull policy."
                        },
                        "pullSecrets": {
                          "type": "string",
                          "description": "Image pull secrets."
                        },
                        "repository": {
                          "type": "string",
                          "description": "The Docker image name."
                        },
                        "tag": {
                          "type": "string",
                          "description": "The Docker  image tag."
                        }
                      },
                      "required": [
                        "repository",
                        "tag"
                      ]
                    },
                    "healthManagerNodeTolerations": {
                      "description": "The details of Node Tolerations for Health Manager Pods.",
                      "type": "object",
                      "properties": {
                        "effect": {
                          "type": "string",
                          "description": "Toleration effect."
                        },
                        "key": {
                          "type": "string",
                          "description": "Toleration key."
                        },
                        "operator": {
                          "type": "string",
                          "description": "Toleration operator like 'Exists', 'Equal' etc."
                        },
                        "value": {
                          "type": "string",
                          "description": "Toleration Value."
                        }
                      },
                      "required": [
                        "effect",
                        "key",
                        "operator",
                        "value"
                      ]
                    },
                    "internalCerts": {
                      "description": "Details of the internal CA cert that will be used to secure communication between pods.",
                      "type": "object",
                      "properties": {
                        "duration": {
                          "type": "string",
                          "description": "Duration of CA cert.",
                          "default": "720h"
                        },
                        "privateKey": {
                          "description": "Cert Manager private key.",
                          "type": "object",
                          "properties": {
                            "algorithm": {
                              "type": "string",
                              "description": "algorithm for private key.",
                              "default": "ECDSA"
                            },
                            "rotationPolicy": {
                              "type": "string",
                              "description": "cert-manager rotationPolicy.",
                              "default": "Always"
                            },
                            "size": {
                              "type": "integer",
                              "format": "int32",
                              "description": "size of private key.",
                              "default": 256,
                              "minimum": 0,
                              "maximum": 65535
                            }
                          },
                          "required": [
                            "algorithm",
                            "rotationPolicy",
                            "size"
                          ]
                        },
                        "renewBefore": {
                          "type": "string",
                          "description": "Renew before time of CA cert.",
                          "default": "240h"
                        }
                      },
                      "required": [
                        "duration",
                        "privateKey",
                        "renewBefore"
                      ]
                    },
                    "memoryProfile": {
                      "type": "string",
                      "description": "Memory profile of broker.",
                      "default": "medium",
                      "enum": [
                        "tiny",
                        "low",
                        "medium",
                        "high"
                      ],
                      "x-ms-enum": {
                        "name": "BrokerMemoryProfile",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "tiny",
                            "value": "tiny",
                            "description": "Tiny memory profile."
                          },
                          {
                            "name": "low",
                            "value": "low",
                            "description": "Low memory profile."
                          },
                          {
                            "name": "medium",
                            "value": "medium",
                            "description": "Medium memory profile."
                          },
                          {
                            "name": "high",
                            "value": "high",
                            "description": "High memory profile."
                          }
                        ]
                      }
                    },
                    "mode": {
                      "description": "The Running Mode of the Broker Deployment.",
                      "type": "string",
                      "enum": [
                        "auto",
                        "distributed"
                      ],
                      "x-ms-enum": {
                        "name": "RunMode",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "auto",
                            "value": "auto",
                            "description": "Automatically provision Frontend and Backend pods."
                          },
                          {
                            "name": "distributed",
                            "value": "distributed",
                            "description": "Use Cardinality to set Frontend and Backend pods."
                          }
                        ]
                      }
                    },
                    "provisioningState": {
                      "description": "The status of the last operation.",
                      "readOnly": true,
                      "type": "string",
                      "enum": [
                        "Succeeded",
                        "Failed",
                        "Canceled",
                        "Provisioning",
                        "Updating",
                        "Deleting",
                        "Accepted"
                      ],
                      "x-ms-enum": {
                        "name": "ProvisioningState",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Succeeded",
                            "value": "Succeeded",
                            "description": "Resource has been created."
                          },
                          {
                            "name": "Failed",
                            "value": "Failed",
                            "description": "Resource creation failed."
                          },
                          {
                            "name": "Canceled",
                            "value": "Canceled",
                            "description": "Resource creation was canceled."
                          },
                          {
                            "name": "Provisioning",
                            "value": "Provisioning",
                            "description": "Resource is getting provisioned."
                          },
                          {
                            "name": "Updating",
                            "value": "Updating",
                            "description": "Resource is Updating."
                          },
                          {
                            "name": "Deleting",
                            "value": "Deleting",
                            "description": "Resource is Deleting."
                          },
                          {
                            "name": "Accepted",
                            "value": "Accepted",
                            "description": "Resource has been Accepted."
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "authImage",
                    "brokerImage",
                    "healthManagerImage",
                    "mode"
                  ]
                },
                "extendedLocation": {
                  "description": "Extended Location",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ],
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The name of the extended location."
                    },
                    "type": {
                      "description": "Type of ExtendedLocation.",
                      "type": "string",
                      "enum": [
                        "CustomLocation"
                      ],
                      "x-ms-enum": {
                        "name": "ExtendedLocationType",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "CustomLocation",
                            "value": "CustomLocation",
                            "description": "CustomLocation type"
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "name",
                    "type"
                  ]
                }
              },
              "required": [
                "extendedLocation"
              ]
            }
          },
          "201": {
            "description": "Resource 'BrokerResource' create operation succeeded",
            "schema": {
              "type": "object",
              "description": "MQ broker resource",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "description": "The name of the resource",
                  "readOnly": true
                },
                "type": {
                  "type": "string",
                  "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                  "readOnly": true
                },
                "systemData": {
                  "type": "object",
                  "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                  "readOnly": true,
                  "properties": {
                    "createdBy": {
                      "type": "string",
                      "description": "The identity that created the resource."
                    },
                    "createdByType": {
                      "type": "string",
                      "description": "The type of identity that created the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource creation (UTC)."
                    },
                    "lastModifiedBy": {
                      "type": "string",
                      "description": "The identity that last modified the resource."
                    },
                    "lastModifiedByType": {
                      "type": "string",
                      "description": "The type of identity that last modified the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "lastModifiedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource last modification (UTC)"
                    }
                  }
                },
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "x-ms-mutability": [
                    "read",
                    "create",
                    "update"
                  ]
                },
                "location": {
                  "type": "string",
                  "description": "The geo-location where the resource lives",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ]
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "authImage": {
                      "description": "The details of Authentication Docker Image.",
                      "type": "object",
                      "properties": {
                        "pullPolicy": {
                          "type": "string",
                          "description": "Image pull policy."
                        },
                        "pullSecrets": {
                          "type": "string",
                          "description": "Image pull secrets."
                        },
                        "repository": {
                          "type": "string",
                          "description": "The Docker image name."
                        },
                        "tag": {
                          "type": "string",
                          "description": "The Docker  image tag."
                        }
                      },
                      "required": [
                        "repository",
                        "tag"
                      ]
                    },
                    "brokerImage": {
                      "description": "The details of Broker Docker Image.",
                      "type": "object",
                      "properties": {
                        "pullPolicy": {
                          "type": "string",
                          "description": "Image pull policy."
                        },
                        "pullSecrets": {
                          "type": "string",
                          "description": "Image pull secrets."
                        },
                        "repository": {
                          "type": "string",
                          "description": "The Docker image name."
                        },
                        "tag": {
                          "type": "string",
                          "description": "The Docker  image tag."
                        }
                      },
                      "required": [
                        "repository",
                        "tag"
                      ]
                    },
                    "brokerNodeTolerations": {
                      "description": "The details of Node Tolerations for Broker Pods.",
                      "type": "object",
                      "properties": {
                        "effect": {
                          "type": "string",
                          "description": "Toleration effect."
                        },
                        "key": {
                          "type": "string",
                          "description": "Toleration key."
                        },
                        "operator": {
                          "type": "string",
                          "description": "Toleration operator like 'Exists', 'Equal' etc."
                        },
                        "value": {
                          "type": "string",
                          "description": "Toleration Value."
                        }
                      },
                      "required": [
                        "effect",
                        "key",
                        "operator",
                        "value"
                      ]
                    },
                    "cardinality": {
                      "description": "The cardinality details of the broker.",
                      "type": "object",
                      "properties": {
                        "backendChain": {
                          "description": "The backend broker desired properties",
                          "type": "object",
                          "properties": {
                            "partitions": {
                              "type": "integer",
                              "format": "int32",
                              "description": "Partitions is desired number of physical backend chains of the given distributed MQTT broker.",
                              "minimum": 0,
                              "maximum": 65535
                            },
                            "redundancyFactor": {
                              "type": "integer",
                              "format": "int32",
                              "description": "Redundancy Factor is desired numbers of broker instances in one chain.",
                              "minimum": 0,
                              "maximum": 65535
                            },
                            "temporaryDiskTransferEnabled": {
                              "type": "boolean",
                              "description": "Defines whether disk transfer is enabled or not."
                            },
                            "temporaryDiskTransferHighWatermarkPercent": {
                              "type": "integer",
                              "format": "int32",
                              "description": "Defines the percentage usage of buffer pool above which disk transfer will start.",
                              "minimum": 0,
                              "maximum": 100
                            },
                            "temporaryDiskTransferLowWatermarkPercent": {
                              "type": "integer",
                              "format": "int32",
                              "description": "Defines the percentage usage of buffer pool below which disk transfer will stop.",
                              "minimum": 0,
                              "maximum": 100
                            },
                            "temporaryMaxBackendMemUsagePercent": {
                              "type": "integer",
                              "format": "int32",
                              "description": "Defines the limits for memory usage percent of the backend instances of the MQTT broker.",
                              "minimum": 0,
                              "maximum": 100
                            },
                            "temporaryResourceLimits": {
                              "description": "Defines the limits for resources of the backend instances of the MQTT broker.",
                              "type": "object",
                              "properties": {
                                "maxInflightMessages": {
                                  "type": "integer",
                                  "format": "int32",
                                  "description": "Maximum number of messages a client can have inflight.",
                                  "minimum": 0,
                                  "maximum": 65535
                                },
                                "maxInflightPatches": {
                                  "type": "integer",
                                  "format": "int32",
                                  "description": "Maximum number of patch inflight per node.",
                                  "minimum": 0,
                                  "maximum": 65535
                                },
                                "maxInflightPatchesPerClient": {
                                  "type": "integer",
                                  "format": "int32",
                                  "description": "Maximum number of patch a client can have in flight.",
                                  "minimum": 0,
                                  "maximum": 65535
                                },
                                "maxMessageExpirySecs": {
                                  "type": "integer",
                                  "format": "int64",
                                  "description": "Maximum message expiry interval, in seconds.",
                                  "minimum": 0,
                                  "maximum": 4294967295
                                },
                                "maxQueuedMessages": {
                                  "type": "integer",
                                  "format": "int64",
                                  "description": "Maximum receive for external clients.",
                                  "minimum": 0,
                                  "maximum": 9223372036854000000
                                },
                                "maxQueuedQos0Messages": {
                                  "type": "integer",
                                  "format": "int64",
                                  "description": "Maximum receive QoS0 for external clients.",
                                  "minimum": 0,
                                  "maximum": 9223372036854000000
                                },
                                "maxSessionExpirySecs": {
                                  "type": "integer",
                                  "format": "int64",
                                  "description": "Maximum session expiry interval, in seconds.",
                                  "minimum": 0,
                                  "maximum": 4294967295
                                }
                              },
                              "required": [
                                "maxInflightMessages",
                                "maxInflightPatches",
                                "maxInflightPatchesPerClient",
                                "maxQueuedMessages",
                                "maxQueuedQos0Messages",
                                "maxSessionExpirySecs"
                              ]
                            },
                            "workers": {
                              "type": "integer",
                              "format": "int32",
                              "description": "Number of logical backend workers per pod.",
                              "default": 1,
                              "minimum": 0,
                              "maximum": 65535
                            }
                          },
                          "required": [
                            "partitions",
                            "redundancyFactor"
                          ]
                        },
                        "frontend": {
                          "description": "The frontend broker desired properties",
                          "type": "object",
                          "properties": {
                            "replicas": {
                              "type": "integer",
                              "format": "int32",
                              "description": "Replicas is desired number of frontend replicas of the given distributed MQTT broker.",
                              "minimum": 0,
                              "maximum": 65535
                            },
                            "temporaryResourceLimits": {
                              "description": "Defines the limits for resources of the frontend instances of the MQTT broker.",
                              "type": "object",
                              "properties": {
                                "maxInflightMessages": {
                                  "type": "integer",
                                  "format": "int32",
                                  "description": "Maximum number of messages a client can have inflight.",
                                  "minimum": 0,
                                  "maximum": 65535
                                },
                                "maxInflightPatches": {
                                  "type": "integer",
                                  "format": "int32",
                                  "description": "Maximum number of patch inflight per node.",
                                  "minimum": 0,
                                  "maximum": 65535
                                },
                                "maxInflightPatchesPerClient": {
                                  "type": "integer",
                                  "format": "int32",
                                  "description": "Maximum number of patch a client can have in flight.",
                                  "minimum": 0,
                                  "maximum": 65535
                                },
                                "maxMessageExpirySecs": {
                                  "type": "integer",
                                  "format": "int64",
                                  "description": "Maximum message expiry interval, in seconds.",
                                  "minimum": 0,
                                  "maximum": 4294967295
                                },
                                "maxQueuedMessages": {
                                  "type": "integer",
                                  "format": "int64",
                                  "description": "Maximum receive for external clients.",
                                  "minimum": 0,
                                  "maximum": 9223372036854000000
                                },
                                "maxQueuedQos0Messages": {
                                  "type": "integer",
                                  "format": "int64",
                                  "description": "Maximum receive QoS0 for external clients.",
                                  "minimum": 0,
                                  "maximum": 9223372036854000000
                                },
                                "maxSessionExpirySecs": {
                                  "type": "integer",
                                  "format": "int64",
                                  "description": "Maximum session expiry interval, in seconds.",
                                  "minimum": 0,
                                  "maximum": 4294967295
                                }
                              },
                              "required": [
                                "maxInflightMessages",
                                "maxInflightPatches",
                                "maxInflightPatchesPerClient",
                                "maxQueuedMessages",
                                "maxQueuedQos0Messages",
                                "maxSessionExpirySecs"
                              ]
                            },
                            "workers": {
                              "type": "integer",
                              "format": "int32",
                              "description": "Number of logical frontend workers per pod.",
                              "default": 2,
                              "minimum": 0,
                              "maximum": 65535
                            }
                          },
                          "required": [
                            "replicas"
                          ]
                        }
                      },
                      "required": [
                        "backendChain",
                        "frontend"
                      ]
                    },
                    "diagnostics": {
                      "description": "The diagnostic details of the broker deployment.",
                      "type": "object",
                      "properties": {
                        "diagnosticServiceEndpoint": {
                          "type": "string",
                          "description": "Diagnostic Service endpoint"
                        },
                        "enableMetrics": {
                          "type": "boolean",
                          "description": "Knob to enable/disable metrics. Default = true",
                          "default": true
                        },
                        "enableSelfCheck": {
                          "type": "boolean",
                          "description": "Enable self check on Broker via Probe.",
                          "default": true
                        },
                        "enableSelfTracing": {
                          "type": "boolean",
                          "description": "Enable self tracing on the Broker so that every selfCheckFrequencySeconds a random message is traced even if it didn't have trace context.",
                          "default": true
                        },
                        "enableTracing": {
                          "type": "boolean",
                          "description": "Knob to enable/disable entire tracing infrastructure.",
                          "default": true
                        },
                        "logFormat": {
                          "type": "string",
                          "description": "Format for the logs generated.",
                          "default": "text"
                        },
                        "logLevel": {
                          "type": "string",
                          "description": "Log level for the Broker.",
                          "default": "info,hyper=off,kube_client=off,tower=off,conhash=off,h2=off"
                        },
                        "maxCellMapLifetime": {
                          "type": "integer",
                          "format": "int64",
                          "description": "Maximum time for the CellMap to live.",
                          "default": 60,
                          "minimum": 0,
                          "maximum": 9223372036854000000
                        },
                        "metricUpdateFrequencySeconds": {
                          "type": "integer",
                          "format": "int64",
                          "description": "Metric update frequency in seconds.",
                          "default": 30,
                          "minimum": 0,
                          "maximum": 9223372036854000000
                        },
                        "probeImage": {
                          "type": "string",
                          "description": "Probe Image to run.",
                          "default": "sample.azurecr.io/diagnostics-probe:0.5.0"
                        },
                        "selfCheckFrequencySeconds": {
                          "type": "integer",
                          "format": "int64",
                          "description": "Frequency for the self check to run.",
                          "default": 30,
                          "minimum": 0,
                          "maximum": 9223372036854000000
                        },
                        "selfCheckTimeoutSeconds": {
                          "type": "integer",
                          "format": "int64",
                          "description": "Time out period of the self check.",
                          "default": 15,
                          "minimum": 0,
                          "maximum": 9223372036854000000
                        },
                        "selfTraceFrequencySeconds": {
                          "type": "integer",
                          "format": "int64",
                          "description": "The frequency at which selfTrace should run.",
                          "default": 30,
                          "minimum": 0,
                          "maximum": 9223372036854000000
                        },
                        "spanChannelCapacity": {
                          "type": "integer",
                          "format": "int64",
                          "description": "The number of the spans generated by the Tracing.",
                          "default": 1000,
                          "minimum": 0,
                          "maximum": 9223372036854000000
                        }
                      }
                    },
                    "diskBackedMessageBufferSettings": {
                      "description": "The settings of the disk-backed message buffer.",
                      "type": "object",
                      "properties": {
                        "ephemeralVolumeClaimSpec": {
                          "description": "Use the specified persistent volume claim template to mount a \"generic ephemeral volume\" for the message buffer. See <https://kubernetes.io/docs/concepts/storage/ephemeral-volumes/#generic-ephemeral-volumes> for details.",
                          "type": "object",
                          "properties": {
                            "accessModes": {
                              "type": "array",
                              "description": "AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
                              "items": {
                                "type": "string"
                              }
                            },
                            "dataSource": {
                              "description": "This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.",
                              "type": "object",
                              "properties": {
                                "apiGroup": {
                                  "type": "string",
                                  "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required."
                                },
                                "kind": {
                                  "type": "string",
                                  "description": "Kind is the type of resource being referenced"
                                },
                                "name": {
                                  "type": "string",
                                  "description": "Name is the name of resource being referenced"
                                }
                              },
                              "required": [
                                "kind",
                                "name"
                              ]
                            },
                            "dataSourceRef": {
                              "description": "Specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef: * While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified. (Alpha) Using this field requires the AnyVolumeDataSource feature gate to be enabled.",
                              "type": "object",
                              "properties": {
                                "apiGroup": {
                                  "type": "string",
                                  "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required."
                                },
                                "kind": {
                                  "type": "string",
                                  "description": "Kind is the type of resource being referenced"
                                },
                                "name": {
                                  "type": "string",
                                  "description": "Name is the name of resource being referenced"
                                }
                              },
                              "required": [
                                "kind",
                                "name"
                              ]
                            },
                            "resources": {
                              "description": "Resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources",
                              "type": "object",
                              "properties": {
                                "limits": {
                                  "type": "object",
                                  "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                                  "additionalProperties": {
                                    "type": "string"
                                  }
                                },
                                "requests": {
                                  "type": "object",
                                  "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                                  "additionalProperties": {
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "selector": {
                              "description": "A label query over volumes to consider for binding.",
                              "type": "object",
                              "properties": {
                                "matchExpressions": {
                                  "type": "array",
                                  "description": "MatchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                  "items": {
                                    "type": "object",
                                    "description": "VolumeClaimSpecSelectorMatchExpressions properties",
                                    "properties": {
                                      "key": {
                                        "type": "string",
                                        "description": "key is the label key that the selector applies to."
                                      },
                                      "operator": {
                                        "type": "string",
                                        "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist."
                                      },
                                      "values": {
                                        "type": "array",
                                        "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                        "items": {
                                          "type": "string"
                                        }
                                      }
                                    },
                                    "required": [
                                      "key",
                                      "operator"
                                    ]
                                  },
                                  "x-ms-identifiers": []
                                },
                                "matchLabels": {
                                  "type": "object",
                                  "description": "MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                  "additionalProperties": {
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "storageClassName": {
                              "type": "string",
                              "description": "Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1"
                            },
                            "volumeMode": {
                              "type": "string",
                              "description": "volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec. This is a beta feature."
                            },
                            "volumeName": {
                              "type": "string",
                              "description": "VolumeName is the binding reference to the PersistentVolume backing this claim."
                            }
                          }
                        },
                        "maxSize": {
                          "type": "string",
                          "description": "The max size of the message buffer on disk. If a PVC template is specified using one of ephemeralVolumeClaimSpec or persistentVolumeClaimSpec, then this size is used as the request and limit sizes of that template. If neither ephemeralVolumeClaimSpec nor persistentVolumeClaimSpec are specified, then an emptyDir volume is mounted with this size as its limit. See <https://kubernetes.io/docs/concepts/storage/volumes/#emptydir> for details."
                        },
                        "persistentVolumeClaimSpec": {
                          "description": "Use the specified persistent volume claim template to mount a persistent volume for the message buffer.",
                          "type": "object",
                          "properties": {
                            "accessModes": {
                              "type": "array",
                              "description": "AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
                              "items": {
                                "type": "string"
                              }
                            },
                            "dataSource": {
                              "description": "This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.",
                              "type": "object",
                              "properties": {
                                "apiGroup": {
                                  "type": "string",
                                  "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required."
                                },
                                "kind": {
                                  "type": "string",
                                  "description": "Kind is the type of resource being referenced"
                                },
                                "name": {
                                  "type": "string",
                                  "description": "Name is the name of resource being referenced"
                                }
                              },
                              "required": [
                                "kind",
                                "name"
                              ]
                            },
                            "dataSourceRef": {
                              "description": "Specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef: * While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified. (Alpha) Using this field requires the AnyVolumeDataSource feature gate to be enabled.",
                              "type": "object",
                              "properties": {
                                "apiGroup": {
                                  "type": "string",
                                  "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required."
                                },
                                "kind": {
                                  "type": "string",
                                  "description": "Kind is the type of resource being referenced"
                                },
                                "name": {
                                  "type": "string",
                                  "description": "Name is the name of resource being referenced"
                                }
                              },
                              "required": [
                                "kind",
                                "name"
                              ]
                            },
                            "resources": {
                              "description": "Resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources",
                              "type": "object",
                              "properties": {
                                "limits": {
                                  "type": "object",
                                  "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                                  "additionalProperties": {
                                    "type": "string"
                                  }
                                },
                                "requests": {
                                  "type": "object",
                                  "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                                  "additionalProperties": {
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "selector": {
                              "description": "A label query over volumes to consider for binding.",
                              "type": "object",
                              "properties": {
                                "matchExpressions": {
                                  "type": "array",
                                  "description": "MatchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                  "items": {
                                    "type": "object",
                                    "description": "VolumeClaimSpecSelectorMatchExpressions properties",
                                    "properties": {
                                      "key": {
                                        "type": "string",
                                        "description": "key is the label key that the selector applies to."
                                      },
                                      "operator": {
                                        "type": "string",
                                        "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist."
                                      },
                                      "values": {
                                        "type": "array",
                                        "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                        "items": {
                                          "type": "string"
                                        }
                                      }
                                    },
                                    "required": [
                                      "key",
                                      "operator"
                                    ]
                                  },
                                  "x-ms-identifiers": []
                                },
                                "matchLabels": {
                                  "type": "object",
                                  "description": "MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                  "additionalProperties": {
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "storageClassName": {
                              "type": "string",
                              "description": "Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1"
                            },
                            "volumeMode": {
                              "type": "string",
                              "description": "volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec. This is a beta feature."
                            },
                            "volumeName": {
                              "type": "string",
                              "description": "VolumeName is the binding reference to the PersistentVolume backing this claim."
                            }
                          }
                        }
                      },
                      "required": [
                        "maxSize"
                      ]
                    },
                    "encryptInternalTraffic": {
                      "type": "boolean",
                      "description": "The setting to enable or disable encryption of internal Traffic.",
                      "default": true
                    },
                    "healthManagerImage": {
                      "description": "The details of Health Manager Docker Image.",
                      "type": "object",
                      "properties": {
                        "pullPolicy": {
                          "type": "string",
                          "description": "Image pull policy."
                        },
                        "pullSecrets": {
                          "type": "string",
                          "description": "Image pull secrets."
                        },
                        "repository": {
                          "type": "string",
                          "description": "The Docker image name."
                        },
                        "tag": {
                          "type": "string",
                          "description": "The Docker  image tag."
                        }
                      },
                      "required": [
                        "repository",
                        "tag"
                      ]
                    },
                    "healthManagerNodeTolerations": {
                      "description": "The details of Node Tolerations for Health Manager Pods.",
                      "type": "object",
                      "properties": {
                        "effect": {
                          "type": "string",
                          "description": "Toleration effect."
                        },
                        "key": {
                          "type": "string",
                          "description": "Toleration key."
                        },
                        "operator": {
                          "type": "string",
                          "description": "Toleration operator like 'Exists', 'Equal' etc."
                        },
                        "value": {
                          "type": "string",
                          "description": "Toleration Value."
                        }
                      },
                      "required": [
                        "effect",
                        "key",
                        "operator",
                        "value"
                      ]
                    },
                    "internalCerts": {
                      "description": "Details of the internal CA cert that will be used to secure communication between pods.",
                      "type": "object",
                      "properties": {
                        "duration": {
                          "type": "string",
                          "description": "Duration of CA cert.",
                          "default": "720h"
                        },
                        "privateKey": {
                          "description": "Cert Manager private key.",
                          "type": "object",
                          "properties": {
                            "algorithm": {
                              "type": "string",
                              "description": "algorithm for private key.",
                              "default": "ECDSA"
                            },
                            "rotationPolicy": {
                              "type": "string",
                              "description": "cert-manager rotationPolicy.",
                              "default": "Always"
                            },
                            "size": {
                              "type": "integer",
                              "format": "int32",
                              "description": "size of private key.",
                              "default": 256,
                              "minimum": 0,
                              "maximum": 65535
                            }
                          },
                          "required": [
                            "algorithm",
                            "rotationPolicy",
                            "size"
                          ]
                        },
                        "renewBefore": {
                          "type": "string",
                          "description": "Renew before time of CA cert.",
                          "default": "240h"
                        }
                      },
                      "required": [
                        "duration",
                        "privateKey",
                        "renewBefore"
                      ]
                    },
                    "memoryProfile": {
                      "type": "string",
                      "description": "Memory profile of broker.",
                      "default": "medium",
                      "enum": [
                        "tiny",
                        "low",
                        "medium",
                        "high"
                      ],
                      "x-ms-enum": {
                        "name": "BrokerMemoryProfile",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "tiny",
                            "value": "tiny",
                            "description": "Tiny memory profile."
                          },
                          {
                            "name": "low",
                            "value": "low",
                            "description": "Low memory profile."
                          },
                          {
                            "name": "medium",
                            "value": "medium",
                            "description": "Medium memory profile."
                          },
                          {
                            "name": "high",
                            "value": "high",
                            "description": "High memory profile."
                          }
                        ]
                      }
                    },
                    "mode": {
                      "description": "The Running Mode of the Broker Deployment.",
                      "type": "string",
                      "enum": [
                        "auto",
                        "distributed"
                      ],
                      "x-ms-enum": {
                        "name": "RunMode",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "auto",
                            "value": "auto",
                            "description": "Automatically provision Frontend and Backend pods."
                          },
                          {
                            "name": "distributed",
                            "value": "distributed",
                            "description": "Use Cardinality to set Frontend and Backend pods."
                          }
                        ]
                      }
                    },
                    "provisioningState": {
                      "description": "The status of the last operation.",
                      "readOnly": true,
                      "type": "string",
                      "enum": [
                        "Succeeded",
                        "Failed",
                        "Canceled",
                        "Provisioning",
                        "Updating",
                        "Deleting",
                        "Accepted"
                      ],
                      "x-ms-enum": {
                        "name": "ProvisioningState",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Succeeded",
                            "value": "Succeeded",
                            "description": "Resource has been created."
                          },
                          {
                            "name": "Failed",
                            "value": "Failed",
                            "description": "Resource creation failed."
                          },
                          {
                            "name": "Canceled",
                            "value": "Canceled",
                            "description": "Resource creation was canceled."
                          },
                          {
                            "name": "Provisioning",
                            "value": "Provisioning",
                            "description": "Resource is getting provisioned."
                          },
                          {
                            "name": "Updating",
                            "value": "Updating",
                            "description": "Resource is Updating."
                          },
                          {
                            "name": "Deleting",
                            "value": "Deleting",
                            "description": "Resource is Deleting."
                          },
                          {
                            "name": "Accepted",
                            "value": "Accepted",
                            "description": "Resource has been Accepted."
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "authImage",
                    "brokerImage",
                    "healthManagerImage",
                    "mode"
                  ]
                },
                "extendedLocation": {
                  "description": "Extended Location",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ],
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The name of the extended location."
                    },
                    "type": {
                      "description": "Type of ExtendedLocation.",
                      "type": "string",
                      "enum": [
                        "CustomLocation"
                      ],
                      "x-ms-enum": {
                        "name": "ExtendedLocationType",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "CustomLocation",
                            "value": "CustomLocation",
                            "description": "CustomLocation type"
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "name",
                    "type"
                  ]
                }
              },
              "required": [
                "extendedLocation"
              ]
            },
            "headers": {
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "Broker_Update",
        "tags": [
          "Broker"
        ],
        "description": "Update a BrokerResource",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group. The name is case insensitive.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "x-ms-parameter-location": "method"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "brokerName",
            "in": "path",
            "description": "Name of MQ broker resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "properties",
            "in": "body",
            "description": "The resource properties to be updated.",
            "required": true,
            "schema": {
              "type": "object",
              "description": "The type used for update operations of the BrokerResource.",
              "properties": {
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "authImage": {
                      "description": "The details of Authentication Docker Image.",
                      "type": "object",
                      "properties": {
                        "pullPolicy": {
                          "type": "string",
                          "description": "Image pull policy."
                        },
                        "pullSecrets": {
                          "type": "string",
                          "description": "Image pull secrets."
                        },
                        "repository": {
                          "type": "string",
                          "description": "The Docker image name."
                        },
                        "tag": {
                          "type": "string",
                          "description": "The Docker  image tag."
                        }
                      }
                    },
                    "brokerImage": {
                      "description": "The details of Broker Docker Image.",
                      "type": "object",
                      "properties": {
                        "pullPolicy": {
                          "type": "string",
                          "description": "Image pull policy."
                        },
                        "pullSecrets": {
                          "type": "string",
                          "description": "Image pull secrets."
                        },
                        "repository": {
                          "type": "string",
                          "description": "The Docker image name."
                        },
                        "tag": {
                          "type": "string",
                          "description": "The Docker  image tag."
                        }
                      }
                    },
                    "brokerNodeTolerations": {
                      "description": "The details of Node Tolerations for Broker Pods.",
                      "type": "object",
                      "properties": {
                        "effect": {
                          "type": "string",
                          "description": "Toleration effect."
                        },
                        "key": {
                          "type": "string",
                          "description": "Toleration key."
                        },
                        "operator": {
                          "type": "string",
                          "description": "Toleration operator like 'Exists', 'Equal' etc."
                        },
                        "value": {
                          "type": "string",
                          "description": "Toleration Value."
                        }
                      }
                    },
                    "cardinality": {
                      "description": "The cardinality details of the broker.",
                      "type": "object",
                      "properties": {
                        "backendChain": {
                          "description": "The backend broker desired properties",
                          "type": "object",
                          "properties": {
                            "partitions": {
                              "type": "integer",
                              "format": "int32",
                              "description": "Partitions is desired number of physical backend chains of the given distributed MQTT broker.",
                              "minimum": 0,
                              "maximum": 65535
                            },
                            "redundancyFactor": {
                              "type": "integer",
                              "format": "int32",
                              "description": "Redundancy Factor is desired numbers of broker instances in one chain.",
                              "minimum": 0,
                              "maximum": 65535
                            },
                            "temporaryDiskTransferEnabled": {
                              "type": "boolean",
                              "description": "Defines whether disk transfer is enabled or not."
                            },
                            "temporaryDiskTransferHighWatermarkPercent": {
                              "type": "integer",
                              "format": "int32",
                              "description": "Defines the percentage usage of buffer pool above which disk transfer will start.",
                              "minimum": 0,
                              "maximum": 100
                            },
                            "temporaryDiskTransferLowWatermarkPercent": {
                              "type": "integer",
                              "format": "int32",
                              "description": "Defines the percentage usage of buffer pool below which disk transfer will stop.",
                              "minimum": 0,
                              "maximum": 100
                            },
                            "temporaryMaxBackendMemUsagePercent": {
                              "type": "integer",
                              "format": "int32",
                              "description": "Defines the limits for memory usage percent of the backend instances of the MQTT broker.",
                              "minimum": 0,
                              "maximum": 100
                            },
                            "temporaryResourceLimits": {
                              "description": "Defines the limits for resources of the backend instances of the MQTT broker.",
                              "type": "object",
                              "properties": {
                                "maxInflightMessages": {
                                  "type": "integer",
                                  "format": "int32",
                                  "description": "Maximum number of messages a client can have inflight.",
                                  "minimum": 0,
                                  "maximum": 65535
                                },
                                "maxInflightPatches": {
                                  "type": "integer",
                                  "format": "int32",
                                  "description": "Maximum number of patch inflight per node.",
                                  "minimum": 0,
                                  "maximum": 65535
                                },
                                "maxInflightPatchesPerClient": {
                                  "type": "integer",
                                  "format": "int32",
                                  "description": "Maximum number of patch a client can have in flight.",
                                  "minimum": 0,
                                  "maximum": 65535
                                },
                                "maxMessageExpirySecs": {
                                  "type": "integer",
                                  "format": "int64",
                                  "description": "Maximum message expiry interval, in seconds.",
                                  "minimum": 0,
                                  "maximum": 4294967295
                                },
                                "maxQueuedMessages": {
                                  "type": "integer",
                                  "format": "int64",
                                  "description": "Maximum receive for external clients.",
                                  "minimum": 0,
                                  "maximum": 9223372036854000000
                                },
                                "maxQueuedQos0Messages": {
                                  "type": "integer",
                                  "format": "int64",
                                  "description": "Maximum receive QoS0 for external clients.",
                                  "minimum": 0,
                                  "maximum": 9223372036854000000
                                },
                                "maxSessionExpirySecs": {
                                  "type": "integer",
                                  "format": "int64",
                                  "description": "Maximum session expiry interval, in seconds.",
                                  "minimum": 0,
                                  "maximum": 4294967295
                                }
                              }
                            },
                            "workers": {
                              "type": "integer",
                              "format": "int32",
                              "description": "Number of logical backend workers per pod.",
                              "default": 1,
                              "minimum": 0,
                              "maximum": 65535
                            }
                          }
                        },
                        "frontend": {
                          "description": "The frontend broker desired properties",
                          "type": "object",
                          "properties": {
                            "replicas": {
                              "type": "integer",
                              "format": "int32",
                              "description": "Replicas is desired number of frontend replicas of the given distributed MQTT broker.",
                              "minimum": 0,
                              "maximum": 65535
                            },
                            "temporaryResourceLimits": {
                              "description": "Defines the limits for resources of the frontend instances of the MQTT broker.",
                              "type": "object",
                              "properties": {
                                "maxInflightMessages": {
                                  "type": "integer",
                                  "format": "int32",
                                  "description": "Maximum number of messages a client can have inflight.",
                                  "minimum": 0,
                                  "maximum": 65535
                                },
                                "maxInflightPatches": {
                                  "type": "integer",
                                  "format": "int32",
                                  "description": "Maximum number of patch inflight per node.",
                                  "minimum": 0,
                                  "maximum": 65535
                                },
                                "maxInflightPatchesPerClient": {
                                  "type": "integer",
                                  "format": "int32",
                                  "description": "Maximum number of patch a client can have in flight.",
                                  "minimum": 0,
                                  "maximum": 65535
                                },
                                "maxMessageExpirySecs": {
                                  "type": "integer",
                                  "format": "int64",
                                  "description": "Maximum message expiry interval, in seconds.",
                                  "minimum": 0,
                                  "maximum": 4294967295
                                },
                                "maxQueuedMessages": {
                                  "type": "integer",
                                  "format": "int64",
                                  "description": "Maximum receive for external clients.",
                                  "minimum": 0,
                                  "maximum": 9223372036854000000
                                },
                                "maxQueuedQos0Messages": {
                                  "type": "integer",
                                  "format": "int64",
                                  "description": "Maximum receive QoS0 for external clients.",
                                  "minimum": 0,
                                  "maximum": 9223372036854000000
                                },
                                "maxSessionExpirySecs": {
                                  "type": "integer",
                                  "format": "int64",
                                  "description": "Maximum session expiry interval, in seconds.",
                                  "minimum": 0,
                                  "maximum": 4294967295
                                }
                              }
                            },
                            "workers": {
                              "type": "integer",
                              "format": "int32",
                              "description": "Number of logical frontend workers per pod.",
                              "default": 2,
                              "minimum": 0,
                              "maximum": 65535
                            }
                          }
                        }
                      }
                    },
                    "diagnostics": {
                      "description": "The diagnostic details of the broker deployment.",
                      "type": "object",
                      "properties": {
                        "diagnosticServiceEndpoint": {
                          "type": "string",
                          "description": "Diagnostic Service endpoint"
                        },
                        "enableMetrics": {
                          "type": "boolean",
                          "description": "Knob to enable/disable metrics. Default = true",
                          "default": true
                        },
                        "enableSelfCheck": {
                          "type": "boolean",
                          "description": "Enable self check on Broker via Probe.",
                          "default": true
                        },
                        "enableSelfTracing": {
                          "type": "boolean",
                          "description": "Enable self tracing on the Broker so that every selfCheckFrequencySeconds a random message is traced even if it didn't have trace context.",
                          "default": true
                        },
                        "enableTracing": {
                          "type": "boolean",
                          "description": "Knob to enable/disable entire tracing infrastructure.",
                          "default": true
                        },
                        "logFormat": {
                          "type": "string",
                          "description": "Format for the logs generated.",
                          "default": "text"
                        },
                        "logLevel": {
                          "type": "string",
                          "description": "Log level for the Broker.",
                          "default": "info,hyper=off,kube_client=off,tower=off,conhash=off,h2=off"
                        },
                        "maxCellMapLifetime": {
                          "type": "integer",
                          "format": "int64",
                          "description": "Maximum time for the CellMap to live.",
                          "default": 60,
                          "minimum": 0,
                          "maximum": 9223372036854000000
                        },
                        "metricUpdateFrequencySeconds": {
                          "type": "integer",
                          "format": "int64",
                          "description": "Metric update frequency in seconds.",
                          "default": 30,
                          "minimum": 0,
                          "maximum": 9223372036854000000
                        },
                        "probeImage": {
                          "type": "string",
                          "description": "Probe Image to run.",
                          "default": "sample.azurecr.io/diagnostics-probe:0.5.0"
                        },
                        "selfCheckFrequencySeconds": {
                          "type": "integer",
                          "format": "int64",
                          "description": "Frequency for the self check to run.",
                          "default": 30,
                          "minimum": 0,
                          "maximum": 9223372036854000000
                        },
                        "selfCheckTimeoutSeconds": {
                          "type": "integer",
                          "format": "int64",
                          "description": "Time out period of the self check.",
                          "default": 15,
                          "minimum": 0,
                          "maximum": 9223372036854000000
                        },
                        "selfTraceFrequencySeconds": {
                          "type": "integer",
                          "format": "int64",
                          "description": "The frequency at which selfTrace should run.",
                          "default": 30,
                          "minimum": 0,
                          "maximum": 9223372036854000000
                        },
                        "spanChannelCapacity": {
                          "type": "integer",
                          "format": "int64",
                          "description": "The number of the spans generated by the Tracing.",
                          "default": 1000,
                          "minimum": 0,
                          "maximum": 9223372036854000000
                        }
                      }
                    },
                    "diskBackedMessageBufferSettings": {
                      "description": "The settings of the disk-backed message buffer.",
                      "type": "object",
                      "properties": {
                        "ephemeralVolumeClaimSpec": {
                          "description": "Use the specified persistent volume claim template to mount a \"generic ephemeral volume\" for the message buffer. See <https://kubernetes.io/docs/concepts/storage/ephemeral-volumes/#generic-ephemeral-volumes> for details.",
                          "type": "object",
                          "properties": {
                            "accessModes": {
                              "type": "array",
                              "description": "AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
                              "items": {
                                "type": "string"
                              }
                            },
                            "dataSource": {
                              "description": "This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.",
                              "type": "object",
                              "properties": {
                                "apiGroup": {
                                  "type": "string",
                                  "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required."
                                },
                                "kind": {
                                  "type": "string",
                                  "description": "Kind is the type of resource being referenced"
                                },
                                "name": {
                                  "type": "string",
                                  "description": "Name is the name of resource being referenced"
                                }
                              }
                            },
                            "dataSourceRef": {
                              "description": "Specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef: * While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified. (Alpha) Using this field requires the AnyVolumeDataSource feature gate to be enabled.",
                              "type": "object",
                              "properties": {
                                "apiGroup": {
                                  "type": "string",
                                  "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required."
                                },
                                "kind": {
                                  "type": "string",
                                  "description": "Kind is the type of resource being referenced"
                                },
                                "name": {
                                  "type": "string",
                                  "description": "Name is the name of resource being referenced"
                                }
                              }
                            },
                            "resources": {
                              "description": "Resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources",
                              "type": "object",
                              "properties": {
                                "limits": {
                                  "type": "object",
                                  "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                                  "additionalProperties": {
                                    "type": "string"
                                  }
                                },
                                "requests": {
                                  "type": "object",
                                  "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                                  "additionalProperties": {
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "selector": {
                              "description": "A label query over volumes to consider for binding.",
                              "type": "object",
                              "properties": {
                                "matchExpressions": {
                                  "type": "array",
                                  "description": "MatchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                  "items": {
                                    "type": "object",
                                    "description": "VolumeClaimSpecSelectorMatchExpressions properties",
                                    "properties": {
                                      "key": {
                                        "type": "string",
                                        "description": "key is the label key that the selector applies to."
                                      },
                                      "operator": {
                                        "type": "string",
                                        "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist."
                                      },
                                      "values": {
                                        "type": "array",
                                        "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                        "items": {
                                          "type": "string"
                                        }
                                      }
                                    },
                                    "required": [
                                      "key",
                                      "operator"
                                    ]
                                  },
                                  "x-ms-identifiers": []
                                },
                                "matchLabels": {
                                  "type": "object",
                                  "description": "MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                  "additionalProperties": {
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "storageClassName": {
                              "type": "string",
                              "description": "Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1"
                            },
                            "volumeMode": {
                              "type": "string",
                              "description": "volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec. This is a beta feature."
                            },
                            "volumeName": {
                              "type": "string",
                              "description": "VolumeName is the binding reference to the PersistentVolume backing this claim."
                            }
                          }
                        },
                        "maxSize": {
                          "type": "string",
                          "description": "The max size of the message buffer on disk. If a PVC template is specified using one of ephemeralVolumeClaimSpec or persistentVolumeClaimSpec, then this size is used as the request and limit sizes of that template. If neither ephemeralVolumeClaimSpec nor persistentVolumeClaimSpec are specified, then an emptyDir volume is mounted with this size as its limit. See <https://kubernetes.io/docs/concepts/storage/volumes/#emptydir> for details."
                        },
                        "persistentVolumeClaimSpec": {
                          "description": "Use the specified persistent volume claim template to mount a persistent volume for the message buffer.",
                          "type": "object",
                          "properties": {
                            "accessModes": {
                              "type": "array",
                              "description": "AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
                              "items": {
                                "type": "string"
                              }
                            },
                            "dataSource": {
                              "description": "This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.",
                              "type": "object",
                              "properties": {
                                "apiGroup": {
                                  "type": "string",
                                  "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required."
                                },
                                "kind": {
                                  "type": "string",
                                  "description": "Kind is the type of resource being referenced"
                                },
                                "name": {
                                  "type": "string",
                                  "description": "Name is the name of resource being referenced"
                                }
                              }
                            },
                            "dataSourceRef": {
                              "description": "Specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef: * While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified. (Alpha) Using this field requires the AnyVolumeDataSource feature gate to be enabled.",
                              "type": "object",
                              "properties": {
                                "apiGroup": {
                                  "type": "string",
                                  "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required."
                                },
                                "kind": {
                                  "type": "string",
                                  "description": "Kind is the type of resource being referenced"
                                },
                                "name": {
                                  "type": "string",
                                  "description": "Name is the name of resource being referenced"
                                }
                              }
                            },
                            "resources": {
                              "description": "Resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources",
                              "type": "object",
                              "properties": {
                                "limits": {
                                  "type": "object",
                                  "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                                  "additionalProperties": {
                                    "type": "string"
                                  }
                                },
                                "requests": {
                                  "type": "object",
                                  "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                                  "additionalProperties": {
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "selector": {
                              "description": "A label query over volumes to consider for binding.",
                              "type": "object",
                              "properties": {
                                "matchExpressions": {
                                  "type": "array",
                                  "description": "MatchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                  "items": {
                                    "type": "object",
                                    "description": "VolumeClaimSpecSelectorMatchExpressions properties",
                                    "properties": {
                                      "key": {
                                        "type": "string",
                                        "description": "key is the label key that the selector applies to."
                                      },
                                      "operator": {
                                        "type": "string",
                                        "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist."
                                      },
                                      "values": {
                                        "type": "array",
                                        "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                        "items": {
                                          "type": "string"
                                        }
                                      }
                                    },
                                    "required": [
                                      "key",
                                      "operator"
                                    ]
                                  },
                                  "x-ms-identifiers": []
                                },
                                "matchLabels": {
                                  "type": "object",
                                  "description": "MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                  "additionalProperties": {
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "storageClassName": {
                              "type": "string",
                              "description": "Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1"
                            },
                            "volumeMode": {
                              "type": "string",
                              "description": "volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec. This is a beta feature."
                            },
                            "volumeName": {
                              "type": "string",
                              "description": "VolumeName is the binding reference to the PersistentVolume backing this claim."
                            }
                          }
                        }
                      }
                    },
                    "encryptInternalTraffic": {
                      "type": "boolean",
                      "description": "The setting to enable or disable encryption of internal Traffic.",
                      "default": true
                    },
                    "healthManagerImage": {
                      "description": "The details of Health Manager Docker Image.",
                      "type": "object",
                      "properties": {
                        "pullPolicy": {
                          "type": "string",
                          "description": "Image pull policy."
                        },
                        "pullSecrets": {
                          "type": "string",
                          "description": "Image pull secrets."
                        },
                        "repository": {
                          "type": "string",
                          "description": "The Docker image name."
                        },
                        "tag": {
                          "type": "string",
                          "description": "The Docker  image tag."
                        }
                      }
                    },
                    "healthManagerNodeTolerations": {
                      "description": "The details of Node Tolerations for Health Manager Pods.",
                      "type": "object",
                      "properties": {
                        "effect": {
                          "type": "string",
                          "description": "Toleration effect."
                        },
                        "key": {
                          "type": "string",
                          "description": "Toleration key."
                        },
                        "operator": {
                          "type": "string",
                          "description": "Toleration operator like 'Exists', 'Equal' etc."
                        },
                        "value": {
                          "type": "string",
                          "description": "Toleration Value."
                        }
                      }
                    },
                    "internalCerts": {
                      "description": "Details of the internal CA cert that will be used to secure communication between pods.",
                      "type": "object",
                      "properties": {
                        "duration": {
                          "type": "string",
                          "description": "Duration of CA cert.",
                          "default": "720h"
                        },
                        "privateKey": {
                          "description": "Cert Manager private key.",
                          "type": "object",
                          "properties": {
                            "algorithm": {
                              "type": "string",
                              "description": "algorithm for private key.",
                              "default": "ECDSA"
                            },
                            "rotationPolicy": {
                              "type": "string",
                              "description": "cert-manager rotationPolicy.",
                              "default": "Always"
                            },
                            "size": {
                              "type": "integer",
                              "format": "int32",
                              "description": "size of private key.",
                              "default": 256,
                              "minimum": 0,
                              "maximum": 65535
                            }
                          }
                        },
                        "renewBefore": {
                          "type": "string",
                          "description": "Renew before time of CA cert.",
                          "default": "240h"
                        }
                      }
                    },
                    "memoryProfile": {
                      "type": "string",
                      "description": "Memory profile of broker.",
                      "default": "medium",
                      "enum": [
                        "tiny",
                        "low",
                        "medium",
                        "high"
                      ],
                      "x-ms-enum": {
                        "name": "BrokerMemoryProfile",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "tiny",
                            "value": "tiny",
                            "description": "Tiny memory profile."
                          },
                          {
                            "name": "low",
                            "value": "low",
                            "description": "Low memory profile."
                          },
                          {
                            "name": "medium",
                            "value": "medium",
                            "description": "Medium memory profile."
                          },
                          {
                            "name": "high",
                            "value": "high",
                            "description": "High memory profile."
                          }
                        ]
                      }
                    },
                    "mode": {
                      "description": "The Running Mode of the Broker Deployment.",
                      "type": "string",
                      "enum": [
                        "auto",
                        "distributed"
                      ],
                      "x-ms-enum": {
                        "name": "RunMode",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "auto",
                            "value": "auto",
                            "description": "Automatically provision Frontend and Backend pods."
                          },
                          {
                            "name": "distributed",
                            "value": "distributed",
                            "description": "Use Cardinality to set Frontend and Backend pods."
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "type": "object",
              "description": "MQ broker resource",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "description": "The name of the resource",
                  "readOnly": true
                },
                "type": {
                  "type": "string",
                  "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                  "readOnly": true
                },
                "systemData": {
                  "type": "object",
                  "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                  "readOnly": true,
                  "properties": {
                    "createdBy": {
                      "type": "string",
                      "description": "The identity that created the resource."
                    },
                    "createdByType": {
                      "type": "string",
                      "description": "The type of identity that created the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource creation (UTC)."
                    },
                    "lastModifiedBy": {
                      "type": "string",
                      "description": "The identity that last modified the resource."
                    },
                    "lastModifiedByType": {
                      "type": "string",
                      "description": "The type of identity that last modified the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "lastModifiedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource last modification (UTC)"
                    }
                  }
                },
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "x-ms-mutability": [
                    "read",
                    "create",
                    "update"
                  ]
                },
                "location": {
                  "type": "string",
                  "description": "The geo-location where the resource lives",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ]
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "authImage": {
                      "description": "The details of Authentication Docker Image.",
                      "type": "object",
                      "properties": {
                        "pullPolicy": {
                          "type": "string",
                          "description": "Image pull policy."
                        },
                        "pullSecrets": {
                          "type": "string",
                          "description": "Image pull secrets."
                        },
                        "repository": {
                          "type": "string",
                          "description": "The Docker image name."
                        },
                        "tag": {
                          "type": "string",
                          "description": "The Docker  image tag."
                        }
                      },
                      "required": [
                        "repository",
                        "tag"
                      ]
                    },
                    "brokerImage": {
                      "description": "The details of Broker Docker Image.",
                      "type": "object",
                      "properties": {
                        "pullPolicy": {
                          "type": "string",
                          "description": "Image pull policy."
                        },
                        "pullSecrets": {
                          "type": "string",
                          "description": "Image pull secrets."
                        },
                        "repository": {
                          "type": "string",
                          "description": "The Docker image name."
                        },
                        "tag": {
                          "type": "string",
                          "description": "The Docker  image tag."
                        }
                      },
                      "required": [
                        "repository",
                        "tag"
                      ]
                    },
                    "brokerNodeTolerations": {
                      "description": "The details of Node Tolerations for Broker Pods.",
                      "type": "object",
                      "properties": {
                        "effect": {
                          "type": "string",
                          "description": "Toleration effect."
                        },
                        "key": {
                          "type": "string",
                          "description": "Toleration key."
                        },
                        "operator": {
                          "type": "string",
                          "description": "Toleration operator like 'Exists', 'Equal' etc."
                        },
                        "value": {
                          "type": "string",
                          "description": "Toleration Value."
                        }
                      },
                      "required": [
                        "effect",
                        "key",
                        "operator",
                        "value"
                      ]
                    },
                    "cardinality": {
                      "description": "The cardinality details of the broker.",
                      "type": "object",
                      "properties": {
                        "backendChain": {
                          "description": "The backend broker desired properties",
                          "type": "object",
                          "properties": {
                            "partitions": {
                              "type": "integer",
                              "format": "int32",
                              "description": "Partitions is desired number of physical backend chains of the given distributed MQTT broker.",
                              "minimum": 0,
                              "maximum": 65535
                            },
                            "redundancyFactor": {
                              "type": "integer",
                              "format": "int32",
                              "description": "Redundancy Factor is desired numbers of broker instances in one chain.",
                              "minimum": 0,
                              "maximum": 65535
                            },
                            "temporaryDiskTransferEnabled": {
                              "type": "boolean",
                              "description": "Defines whether disk transfer is enabled or not."
                            },
                            "temporaryDiskTransferHighWatermarkPercent": {
                              "type": "integer",
                              "format": "int32",
                              "description": "Defines the percentage usage of buffer pool above which disk transfer will start.",
                              "minimum": 0,
                              "maximum": 100
                            },
                            "temporaryDiskTransferLowWatermarkPercent": {
                              "type": "integer",
                              "format": "int32",
                              "description": "Defines the percentage usage of buffer pool below which disk transfer will stop.",
                              "minimum": 0,
                              "maximum": 100
                            },
                            "temporaryMaxBackendMemUsagePercent": {
                              "type": "integer",
                              "format": "int32",
                              "description": "Defines the limits for memory usage percent of the backend instances of the MQTT broker.",
                              "minimum": 0,
                              "maximum": 100
                            },
                            "temporaryResourceLimits": {
                              "description": "Defines the limits for resources of the backend instances of the MQTT broker.",
                              "type": "object",
                              "properties": {
                                "maxInflightMessages": {
                                  "type": "integer",
                                  "format": "int32",
                                  "description": "Maximum number of messages a client can have inflight.",
                                  "minimum": 0,
                                  "maximum": 65535
                                },
                                "maxInflightPatches": {
                                  "type": "integer",
                                  "format": "int32",
                                  "description": "Maximum number of patch inflight per node.",
                                  "minimum": 0,
                                  "maximum": 65535
                                },
                                "maxInflightPatchesPerClient": {
                                  "type": "integer",
                                  "format": "int32",
                                  "description": "Maximum number of patch a client can have in flight.",
                                  "minimum": 0,
                                  "maximum": 65535
                                },
                                "maxMessageExpirySecs": {
                                  "type": "integer",
                                  "format": "int64",
                                  "description": "Maximum message expiry interval, in seconds.",
                                  "minimum": 0,
                                  "maximum": 4294967295
                                },
                                "maxQueuedMessages": {
                                  "type": "integer",
                                  "format": "int64",
                                  "description": "Maximum receive for external clients.",
                                  "minimum": 0,
                                  "maximum": 9223372036854000000
                                },
                                "maxQueuedQos0Messages": {
                                  "type": "integer",
                                  "format": "int64",
                                  "description": "Maximum receive QoS0 for external clients.",
                                  "minimum": 0,
                                  "maximum": 9223372036854000000
                                },
                                "maxSessionExpirySecs": {
                                  "type": "integer",
                                  "format": "int64",
                                  "description": "Maximum session expiry interval, in seconds.",
                                  "minimum": 0,
                                  "maximum": 4294967295
                                }
                              },
                              "required": [
                                "maxInflightMessages",
                                "maxInflightPatches",
                                "maxInflightPatchesPerClient",
                                "maxQueuedMessages",
                                "maxQueuedQos0Messages",
                                "maxSessionExpirySecs"
                              ]
                            },
                            "workers": {
                              "type": "integer",
                              "format": "int32",
                              "description": "Number of logical backend workers per pod.",
                              "default": 1,
                              "minimum": 0,
                              "maximum": 65535
                            }
                          },
                          "required": [
                            "partitions",
                            "redundancyFactor"
                          ]
                        },
                        "frontend": {
                          "description": "The frontend broker desired properties",
                          "type": "object",
                          "properties": {
                            "replicas": {
                              "type": "integer",
                              "format": "int32",
                              "description": "Replicas is desired number of frontend replicas of the given distributed MQTT broker.",
                              "minimum": 0,
                              "maximum": 65535
                            },
                            "temporaryResourceLimits": {
                              "description": "Defines the limits for resources of the frontend instances of the MQTT broker.",
                              "type": "object",
                              "properties": {
                                "maxInflightMessages": {
                                  "type": "integer",
                                  "format": "int32",
                                  "description": "Maximum number of messages a client can have inflight.",
                                  "minimum": 0,
                                  "maximum": 65535
                                },
                                "maxInflightPatches": {
                                  "type": "integer",
                                  "format": "int32",
                                  "description": "Maximum number of patch inflight per node.",
                                  "minimum": 0,
                                  "maximum": 65535
                                },
                                "maxInflightPatchesPerClient": {
                                  "type": "integer",
                                  "format": "int32",
                                  "description": "Maximum number of patch a client can have in flight.",
                                  "minimum": 0,
                                  "maximum": 65535
                                },
                                "maxMessageExpirySecs": {
                                  "type": "integer",
                                  "format": "int64",
                                  "description": "Maximum message expiry interval, in seconds.",
                                  "minimum": 0,
                                  "maximum": 4294967295
                                },
                                "maxQueuedMessages": {
                                  "type": "integer",
                                  "format": "int64",
                                  "description": "Maximum receive for external clients.",
                                  "minimum": 0,
                                  "maximum": 9223372036854000000
                                },
                                "maxQueuedQos0Messages": {
                                  "type": "integer",
                                  "format": "int64",
                                  "description": "Maximum receive QoS0 for external clients.",
                                  "minimum": 0,
                                  "maximum": 9223372036854000000
                                },
                                "maxSessionExpirySecs": {
                                  "type": "integer",
                                  "format": "int64",
                                  "description": "Maximum session expiry interval, in seconds.",
                                  "minimum": 0,
                                  "maximum": 4294967295
                                }
                              },
                              "required": [
                                "maxInflightMessages",
                                "maxInflightPatches",
                                "maxInflightPatchesPerClient",
                                "maxQueuedMessages",
                                "maxQueuedQos0Messages",
                                "maxSessionExpirySecs"
                              ]
                            },
                            "workers": {
                              "type": "integer",
                              "format": "int32",
                              "description": "Number of logical frontend workers per pod.",
                              "default": 2,
                              "minimum": 0,
                              "maximum": 65535
                            }
                          },
                          "required": [
                            "replicas"
                          ]
                        }
                      },
                      "required": [
                        "backendChain",
                        "frontend"
                      ]
                    },
                    "diagnostics": {
                      "description": "The diagnostic details of the broker deployment.",
                      "type": "object",
                      "properties": {
                        "diagnosticServiceEndpoint": {
                          "type": "string",
                          "description": "Diagnostic Service endpoint"
                        },
                        "enableMetrics": {
                          "type": "boolean",
                          "description": "Knob to enable/disable metrics. Default = true",
                          "default": true
                        },
                        "enableSelfCheck": {
                          "type": "boolean",
                          "description": "Enable self check on Broker via Probe.",
                          "default": true
                        },
                        "enableSelfTracing": {
                          "type": "boolean",
                          "description": "Enable self tracing on the Broker so that every selfCheckFrequencySeconds a random message is traced even if it didn't have trace context.",
                          "default": true
                        },
                        "enableTracing": {
                          "type": "boolean",
                          "description": "Knob to enable/disable entire tracing infrastructure.",
                          "default": true
                        },
                        "logFormat": {
                          "type": "string",
                          "description": "Format for the logs generated.",
                          "default": "text"
                        },
                        "logLevel": {
                          "type": "string",
                          "description": "Log level for the Broker.",
                          "default": "info,hyper=off,kube_client=off,tower=off,conhash=off,h2=off"
                        },
                        "maxCellMapLifetime": {
                          "type": "integer",
                          "format": "int64",
                          "description": "Maximum time for the CellMap to live.",
                          "default": 60,
                          "minimum": 0,
                          "maximum": 9223372036854000000
                        },
                        "metricUpdateFrequencySeconds": {
                          "type": "integer",
                          "format": "int64",
                          "description": "Metric update frequency in seconds.",
                          "default": 30,
                          "minimum": 0,
                          "maximum": 9223372036854000000
                        },
                        "probeImage": {
                          "type": "string",
                          "description": "Probe Image to run.",
                          "default": "sample.azurecr.io/diagnostics-probe:0.5.0"
                        },
                        "selfCheckFrequencySeconds": {
                          "type": "integer",
                          "format": "int64",
                          "description": "Frequency for the self check to run.",
                          "default": 30,
                          "minimum": 0,
                          "maximum": 9223372036854000000
                        },
                        "selfCheckTimeoutSeconds": {
                          "type": "integer",
                          "format": "int64",
                          "description": "Time out period of the self check.",
                          "default": 15,
                          "minimum": 0,
                          "maximum": 9223372036854000000
                        },
                        "selfTraceFrequencySeconds": {
                          "type": "integer",
                          "format": "int64",
                          "description": "The frequency at which selfTrace should run.",
                          "default": 30,
                          "minimum": 0,
                          "maximum": 9223372036854000000
                        },
                        "spanChannelCapacity": {
                          "type": "integer",
                          "format": "int64",
                          "description": "The number of the spans generated by the Tracing.",
                          "default": 1000,
                          "minimum": 0,
                          "maximum": 9223372036854000000
                        }
                      }
                    },
                    "diskBackedMessageBufferSettings": {
                      "description": "The settings of the disk-backed message buffer.",
                      "type": "object",
                      "properties": {
                        "ephemeralVolumeClaimSpec": {
                          "description": "Use the specified persistent volume claim template to mount a \"generic ephemeral volume\" for the message buffer. See <https://kubernetes.io/docs/concepts/storage/ephemeral-volumes/#generic-ephemeral-volumes> for details.",
                          "type": "object",
                          "properties": {
                            "accessModes": {
                              "type": "array",
                              "description": "AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
                              "items": {
                                "type": "string"
                              }
                            },
                            "dataSource": {
                              "description": "This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.",
                              "type": "object",
                              "properties": {
                                "apiGroup": {
                                  "type": "string",
                                  "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required."
                                },
                                "kind": {
                                  "type": "string",
                                  "description": "Kind is the type of resource being referenced"
                                },
                                "name": {
                                  "type": "string",
                                  "description": "Name is the name of resource being referenced"
                                }
                              },
                              "required": [
                                "kind",
                                "name"
                              ]
                            },
                            "dataSourceRef": {
                              "description": "Specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef: * While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified. (Alpha) Using this field requires the AnyVolumeDataSource feature gate to be enabled.",
                              "type": "object",
                              "properties": {
                                "apiGroup": {
                                  "type": "string",
                                  "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required."
                                },
                                "kind": {
                                  "type": "string",
                                  "description": "Kind is the type of resource being referenced"
                                },
                                "name": {
                                  "type": "string",
                                  "description": "Name is the name of resource being referenced"
                                }
                              },
                              "required": [
                                "kind",
                                "name"
                              ]
                            },
                            "resources": {
                              "description": "Resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources",
                              "type": "object",
                              "properties": {
                                "limits": {
                                  "type": "object",
                                  "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                                  "additionalProperties": {
                                    "type": "string"
                                  }
                                },
                                "requests": {
                                  "type": "object",
                                  "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                                  "additionalProperties": {
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "selector": {
                              "description": "A label query over volumes to consider for binding.",
                              "type": "object",
                              "properties": {
                                "matchExpressions": {
                                  "type": "array",
                                  "description": "MatchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                  "items": {
                                    "type": "object",
                                    "description": "VolumeClaimSpecSelectorMatchExpressions properties",
                                    "properties": {
                                      "key": {
                                        "type": "string",
                                        "description": "key is the label key that the selector applies to."
                                      },
                                      "operator": {
                                        "type": "string",
                                        "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist."
                                      },
                                      "values": {
                                        "type": "array",
                                        "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                        "items": {
                                          "type": "string"
                                        }
                                      }
                                    },
                                    "required": [
                                      "key",
                                      "operator"
                                    ]
                                  },
                                  "x-ms-identifiers": []
                                },
                                "matchLabels": {
                                  "type": "object",
                                  "description": "MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                  "additionalProperties": {
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "storageClassName": {
                              "type": "string",
                              "description": "Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1"
                            },
                            "volumeMode": {
                              "type": "string",
                              "description": "volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec. This is a beta feature."
                            },
                            "volumeName": {
                              "type": "string",
                              "description": "VolumeName is the binding reference to the PersistentVolume backing this claim."
                            }
                          }
                        },
                        "maxSize": {
                          "type": "string",
                          "description": "The max size of the message buffer on disk. If a PVC template is specified using one of ephemeralVolumeClaimSpec or persistentVolumeClaimSpec, then this size is used as the request and limit sizes of that template. If neither ephemeralVolumeClaimSpec nor persistentVolumeClaimSpec are specified, then an emptyDir volume is mounted with this size as its limit. See <https://kubernetes.io/docs/concepts/storage/volumes/#emptydir> for details."
                        },
                        "persistentVolumeClaimSpec": {
                          "description": "Use the specified persistent volume claim template to mount a persistent volume for the message buffer.",
                          "type": "object",
                          "properties": {
                            "accessModes": {
                              "type": "array",
                              "description": "AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
                              "items": {
                                "type": "string"
                              }
                            },
                            "dataSource": {
                              "description": "This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.",
                              "type": "object",
                              "properties": {
                                "apiGroup": {
                                  "type": "string",
                                  "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required."
                                },
                                "kind": {
                                  "type": "string",
                                  "description": "Kind is the type of resource being referenced"
                                },
                                "name": {
                                  "type": "string",
                                  "description": "Name is the name of resource being referenced"
                                }
                              },
                              "required": [
                                "kind",
                                "name"
                              ]
                            },
                            "dataSourceRef": {
                              "description": "Specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef: * While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified. (Alpha) Using this field requires the AnyVolumeDataSource feature gate to be enabled.",
                              "type": "object",
                              "properties": {
                                "apiGroup": {
                                  "type": "string",
                                  "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required."
                                },
                                "kind": {
                                  "type": "string",
                                  "description": "Kind is the type of resource being referenced"
                                },
                                "name": {
                                  "type": "string",
                                  "description": "Name is the name of resource being referenced"
                                }
                              },
                              "required": [
                                "kind",
                                "name"
                              ]
                            },
                            "resources": {
                              "description": "Resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources",
                              "type": "object",
                              "properties": {
                                "limits": {
                                  "type": "object",
                                  "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                                  "additionalProperties": {
                                    "type": "string"
                                  }
                                },
                                "requests": {
                                  "type": "object",
                                  "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                                  "additionalProperties": {
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "selector": {
                              "description": "A label query over volumes to consider for binding.",
                              "type": "object",
                              "properties": {
                                "matchExpressions": {
                                  "type": "array",
                                  "description": "MatchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                  "items": {
                                    "type": "object",
                                    "description": "VolumeClaimSpecSelectorMatchExpressions properties",
                                    "properties": {
                                      "key": {
                                        "type": "string",
                                        "description": "key is the label key that the selector applies to."
                                      },
                                      "operator": {
                                        "type": "string",
                                        "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist."
                                      },
                                      "values": {
                                        "type": "array",
                                        "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                        "items": {
                                          "type": "string"
                                        }
                                      }
                                    },
                                    "required": [
                                      "key",
                                      "operator"
                                    ]
                                  },
                                  "x-ms-identifiers": []
                                },
                                "matchLabels": {
                                  "type": "object",
                                  "description": "MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                  "additionalProperties": {
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "storageClassName": {
                              "type": "string",
                              "description": "Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1"
                            },
                            "volumeMode": {
                              "type": "string",
                              "description": "volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec. This is a beta feature."
                            },
                            "volumeName": {
                              "type": "string",
                              "description": "VolumeName is the binding reference to the PersistentVolume backing this claim."
                            }
                          }
                        }
                      },
                      "required": [
                        "maxSize"
                      ]
                    },
                    "encryptInternalTraffic": {
                      "type": "boolean",
                      "description": "The setting to enable or disable encryption of internal Traffic.",
                      "default": true
                    },
                    "healthManagerImage": {
                      "description": "The details of Health Manager Docker Image.",
                      "type": "object",
                      "properties": {
                        "pullPolicy": {
                          "type": "string",
                          "description": "Image pull policy."
                        },
                        "pullSecrets": {
                          "type": "string",
                          "description": "Image pull secrets."
                        },
                        "repository": {
                          "type": "string",
                          "description": "The Docker image name."
                        },
                        "tag": {
                          "type": "string",
                          "description": "The Docker  image tag."
                        }
                      },
                      "required": [
                        "repository",
                        "tag"
                      ]
                    },
                    "healthManagerNodeTolerations": {
                      "description": "The details of Node Tolerations for Health Manager Pods.",
                      "type": "object",
                      "properties": {
                        "effect": {
                          "type": "string",
                          "description": "Toleration effect."
                        },
                        "key": {
                          "type": "string",
                          "description": "Toleration key."
                        },
                        "operator": {
                          "type": "string",
                          "description": "Toleration operator like 'Exists', 'Equal' etc."
                        },
                        "value": {
                          "type": "string",
                          "description": "Toleration Value."
                        }
                      },
                      "required": [
                        "effect",
                        "key",
                        "operator",
                        "value"
                      ]
                    },
                    "internalCerts": {
                      "description": "Details of the internal CA cert that will be used to secure communication between pods.",
                      "type": "object",
                      "properties": {
                        "duration": {
                          "type": "string",
                          "description": "Duration of CA cert.",
                          "default": "720h"
                        },
                        "privateKey": {
                          "description": "Cert Manager private key.",
                          "type": "object",
                          "properties": {
                            "algorithm": {
                              "type": "string",
                              "description": "algorithm for private key.",
                              "default": "ECDSA"
                            },
                            "rotationPolicy": {
                              "type": "string",
                              "description": "cert-manager rotationPolicy.",
                              "default": "Always"
                            },
                            "size": {
                              "type": "integer",
                              "format": "int32",
                              "description": "size of private key.",
                              "default": 256,
                              "minimum": 0,
                              "maximum": 65535
                            }
                          },
                          "required": [
                            "algorithm",
                            "rotationPolicy",
                            "size"
                          ]
                        },
                        "renewBefore": {
                          "type": "string",
                          "description": "Renew before time of CA cert.",
                          "default": "240h"
                        }
                      },
                      "required": [
                        "duration",
                        "privateKey",
                        "renewBefore"
                      ]
                    },
                    "memoryProfile": {
                      "type": "string",
                      "description": "Memory profile of broker.",
                      "default": "medium",
                      "enum": [
                        "tiny",
                        "low",
                        "medium",
                        "high"
                      ],
                      "x-ms-enum": {
                        "name": "BrokerMemoryProfile",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "tiny",
                            "value": "tiny",
                            "description": "Tiny memory profile."
                          },
                          {
                            "name": "low",
                            "value": "low",
                            "description": "Low memory profile."
                          },
                          {
                            "name": "medium",
                            "value": "medium",
                            "description": "Medium memory profile."
                          },
                          {
                            "name": "high",
                            "value": "high",
                            "description": "High memory profile."
                          }
                        ]
                      }
                    },
                    "mode": {
                      "description": "The Running Mode of the Broker Deployment.",
                      "type": "string",
                      "enum": [
                        "auto",
                        "distributed"
                      ],
                      "x-ms-enum": {
                        "name": "RunMode",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "auto",
                            "value": "auto",
                            "description": "Automatically provision Frontend and Backend pods."
                          },
                          {
                            "name": "distributed",
                            "value": "distributed",
                            "description": "Use Cardinality to set Frontend and Backend pods."
                          }
                        ]
                      }
                    },
                    "provisioningState": {
                      "description": "The status of the last operation.",
                      "readOnly": true,
                      "type": "string",
                      "enum": [
                        "Succeeded",
                        "Failed",
                        "Canceled",
                        "Provisioning",
                        "Updating",
                        "Deleting",
                        "Accepted"
                      ],
                      "x-ms-enum": {
                        "name": "ProvisioningState",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Succeeded",
                            "value": "Succeeded",
                            "description": "Resource has been created."
                          },
                          {
                            "name": "Failed",
                            "value": "Failed",
                            "description": "Resource creation failed."
                          },
                          {
                            "name": "Canceled",
                            "value": "Canceled",
                            "description": "Resource creation was canceled."
                          },
                          {
                            "name": "Provisioning",
                            "value": "Provisioning",
                            "description": "Resource is getting provisioned."
                          },
                          {
                            "name": "Updating",
                            "value": "Updating",
                            "description": "Resource is Updating."
                          },
                          {
                            "name": "Deleting",
                            "value": "Deleting",
                            "description": "Resource is Deleting."
                          },
                          {
                            "name": "Accepted",
                            "value": "Accepted",
                            "description": "Resource has been Accepted."
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "authImage",
                    "brokerImage",
                    "healthManagerImage",
                    "mode"
                  ]
                },
                "extendedLocation": {
                  "description": "Extended Location",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ],
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The name of the extended location."
                    },
                    "type": {
                      "description": "Type of ExtendedLocation.",
                      "type": "string",
                      "enum": [
                        "CustomLocation"
                      ],
                      "x-ms-enum": {
                        "name": "ExtendedLocationType",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "CustomLocation",
                            "value": "CustomLocation",
                            "description": "CustomLocation type"
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "name",
                    "type"
                  ]
                }
              },
              "required": [
                "extendedLocation"
              ]
            }
          }
        }
      },
      "delete": {
        "operationId": "Broker_Delete",
        "tags": [
          "Broker"
        ],
        "description": "Delete a BrokerResource",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group. The name is case insensitive.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "x-ms-parameter-location": "method"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "brokerName",
            "in": "path",
            "description": "Name of MQ broker resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          }
        ],
        "responses": {
          "202": {
            "description": "Resource deletion accepted.",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              },
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "204": {
            "description": "Resource does not exist."
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTOperationsMQ/mq/{mqName}/broker/{brokerName}/authentication": {
      "get": {
        "operationId": "BrokerAuthentication_ListByBrokerResource",
        "tags": [
          "BrokerAuthentication"
        ],
        "description": "List BrokerAuthenticationResource resources by BrokerResource",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group. The name is case insensitive.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "x-ms-parameter-location": "method"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "brokerName",
            "in": "path",
            "description": "Name of MQ broker resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "type": "object",
              "description": "The response of a BrokerAuthenticationResource list operation.",
              "properties": {
                "value": {
                  "type": "array",
                  "description": "The BrokerAuthenticationResource items on this page",
                  "items": {
                    "type": "object",
                    "description": "MQ broker/authentication resource",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                        "readOnly": true
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the resource",
                        "readOnly": true
                      },
                      "type": {
                        "type": "string",
                        "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                        "readOnly": true
                      },
                      "systemData": {
                        "type": "object",
                        "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                        "readOnly": true,
                        "properties": {
                          "createdBy": {
                            "type": "string",
                            "description": "The identity that created the resource."
                          },
                          "createdByType": {
                            "type": "string",
                            "description": "The type of identity that created the resource.",
                            "enum": [
                              "User",
                              "Application",
                              "ManagedIdentity",
                              "Key"
                            ],
                            "x-ms-enum": {
                              "name": "createdByType",
                              "modelAsString": true
                            }
                          },
                          "createdAt": {
                            "type": "string",
                            "format": "date-time",
                            "description": "The timestamp of resource creation (UTC)."
                          },
                          "lastModifiedBy": {
                            "type": "string",
                            "description": "The identity that last modified the resource."
                          },
                          "lastModifiedByType": {
                            "type": "string",
                            "description": "The type of identity that last modified the resource.",
                            "enum": [
                              "User",
                              "Application",
                              "ManagedIdentity",
                              "Key"
                            ],
                            "x-ms-enum": {
                              "name": "createdByType",
                              "modelAsString": true
                            }
                          },
                          "lastModifiedAt": {
                            "type": "string",
                            "format": "date-time",
                            "description": "The timestamp of resource last modification (UTC)"
                          }
                        }
                      },
                      "tags": {
                        "type": "object",
                        "description": "Resource tags.",
                        "additionalProperties": {
                          "type": "string"
                        },
                        "x-ms-mutability": [
                          "read",
                          "create",
                          "update"
                        ]
                      },
                      "location": {
                        "type": "string",
                        "description": "The geo-location where the resource lives",
                        "x-ms-mutability": [
                          "read",
                          "create"
                        ]
                      },
                      "properties": {
                        "description": "The resource-specific properties for this resource.",
                        "x-ms-client-flatten": true,
                        "type": "object",
                        "properties": {
                          "authenticationMethods": {
                            "type": "array",
                            "description": "The list of authentication methods supported by the Authentication Resource. For each array element, NOTE - Enum only authenticator type supported.",
                            "items": {
                              "type": "object",
                              "description": "Collection of different CrdAuthenticator methods of Broker Resource. NOTE Enum - Only one method is supported for each entry.",
                              "properties": {
                                "custom": {
                                  "description": "Custom Authentication Method.",
                                  "type": "object",
                                  "properties": {
                                    "auth": {
                                      "description": "Custom Broker Authentication Method.",
                                      "type": "object",
                                      "properties": {
                                        "x509": {
                                          "description": "X509 Custom Auth type details.",
                                          "type": "object",
                                          "properties": {
                                            "keyVault": {
                                              "description": "Keyvault X509 secret properties.",
                                              "type": "object",
                                              "properties": {
                                                "vault": {
                                                  "description": "KeyVault properties.",
                                                  "type": "object",
                                                  "properties": {
                                                    "credentials": {
                                                      "description": "KeyVault credentials.",
                                                      "type": "object",
                                                      "properties": {
                                                        "servicePrincipalLocalSecretName": {
                                                          "type": "string",
                                                          "description": "KeyVault service principal local secret name."
                                                        }
                                                      },
                                                      "required": [
                                                        "servicePrincipalLocalSecretName"
                                                      ]
                                                    },
                                                    "directoryId": {
                                                      "type": "string",
                                                      "description": "KeyVault directoryId."
                                                    },
                                                    "name": {
                                                      "type": "string",
                                                      "description": "KeyVault name."
                                                    }
                                                  },
                                                  "required": [
                                                    "credentials",
                                                    "directoryId",
                                                    "name"
                                                  ]
                                                },
                                                "vaultCaChainSecret": {
                                                  "description": "KeyVault CA chain secret details.",
                                                  "type": "object",
                                                  "properties": {
                                                    "name": {
                                                      "type": "string",
                                                      "description": "KeyVault secret name."
                                                    },
                                                    "version": {
                                                      "type": "string",
                                                      "description": "KeyVault secret version."
                                                    }
                                                  },
                                                  "required": [
                                                    "name"
                                                  ]
                                                },
                                                "vaultCert": {
                                                  "description": "KeyVault Cert secret details.",
                                                  "type": "object",
                                                  "properties": {
                                                    "name": {
                                                      "type": "string",
                                                      "description": "KeyVault secret name."
                                                    },
                                                    "version": {
                                                      "type": "string",
                                                      "description": "KeyVault secret version."
                                                    }
                                                  },
                                                  "required": [
                                                    "name"
                                                  ]
                                                }
                                              },
                                              "required": [
                                                "vault",
                                                "vaultCert"
                                              ]
                                            },
                                            "secretName": {
                                              "type": "string",
                                              "description": "Secret where cert details are stored."
                                            }
                                          }
                                        }
                                      },
                                      "required": [
                                        "x509"
                                      ]
                                    },
                                    "caCertConfigMap": {
                                      "type": "string",
                                      "description": "CA cert config map to use."
                                    },
                                    "endpoint": {
                                      "type": "string",
                                      "description": "Endpoint to connect to."
                                    },
                                    "headers": {
                                      "type": "object",
                                      "description": "Configuration Headers to use.",
                                      "additionalProperties": {
                                        "type": "string"
                                      }
                                    }
                                  },
                                  "required": [
                                    "endpoint"
                                  ]
                                },
                                "sat": {
                                  "description": "Service Account Token Method.",
                                  "type": "object",
                                  "properties": {
                                    "audiences": {
                                      "type": "array",
                                      "description": "List of allowed audience.",
                                      "items": {
                                        "type": "string"
                                      }
                                    }
                                  },
                                  "required": [
                                    "audiences"
                                  ]
                                },
                                "svid": {
                                  "description": "Service Account Token Method.",
                                  "type": "object",
                                  "properties": {
                                    "agentSocketPath": {
                                      "type": "string",
                                      "description": "Mounted socket path for spiffe agent."
                                    },
                                    "identityMaxRetry": {
                                      "type": "integer",
                                      "format": "int64",
                                      "description": "Maximum number of re-tries to fetch identity.",
                                      "default": 3,
                                      "minimum": 0,
                                      "maximum": 4294967295
                                    },
                                    "identityWaitRetryMs": {
                                      "type": "integer",
                                      "format": "int64",
                                      "description": "Maximum time to wait before fetching identity again.",
                                      "default": 5000,
                                      "minimum": 0,
                                      "maximum": 9223372036854000000
                                    }
                                  },
                                  "required": [
                                    "agentSocketPath"
                                  ]
                                },
                                "usernamePassword": {
                                  "description": "UsernamePassword Method.",
                                  "type": "object",
                                  "properties": {
                                    "keyVault": {
                                      "description": "Keyvault username password secret properties.",
                                      "type": "object",
                                      "properties": {
                                        "vault": {
                                          "description": "KeyVault properties.",
                                          "type": "object",
                                          "properties": {
                                            "credentials": {
                                              "description": "KeyVault credentials.",
                                              "type": "object",
                                              "properties": {
                                                "servicePrincipalLocalSecretName": {
                                                  "type": "string",
                                                  "description": "KeyVault service principal local secret name."
                                                }
                                              },
                                              "required": [
                                                "servicePrincipalLocalSecretName"
                                              ]
                                            },
                                            "directoryId": {
                                              "type": "string",
                                              "description": "KeyVault directoryId."
                                            },
                                            "name": {
                                              "type": "string",
                                              "description": "KeyVault name."
                                            }
                                          },
                                          "required": [
                                            "credentials",
                                            "directoryId",
                                            "name"
                                          ]
                                        },
                                        "vaultSecret": {
                                          "description": "KeyVault secret details.",
                                          "type": "object",
                                          "properties": {
                                            "name": {
                                              "type": "string",
                                              "description": "KeyVault secret name."
                                            },
                                            "version": {
                                              "type": "string",
                                              "description": "KeyVault secret version."
                                            }
                                          },
                                          "required": [
                                            "name"
                                          ]
                                        }
                                      },
                                      "required": [
                                        "vault",
                                        "vaultSecret"
                                      ]
                                    },
                                    "secretName": {
                                      "type": "string",
                                      "description": "Secret where username and password are stored."
                                    }
                                  }
                                },
                                "x509": {
                                  "description": "X509 Method.",
                                  "type": "object",
                                  "properties": {
                                    "attributes": {
                                      "description": "K8S Secret name to mount for username and password.",
                                      "type": "object",
                                      "properties": {
                                        "keyVault": {
                                          "description": "Keyvault x509 attributes secret properties.",
                                          "type": "object",
                                          "properties": {
                                            "vault": {
                                              "description": "KeyVault properties.",
                                              "type": "object",
                                              "properties": {
                                                "credentials": {
                                                  "description": "KeyVault credentials.",
                                                  "type": "object",
                                                  "properties": {
                                                    "servicePrincipalLocalSecretName": {
                                                      "type": "string",
                                                      "description": "KeyVault service principal local secret name."
                                                    }
                                                  },
                                                  "required": [
                                                    "servicePrincipalLocalSecretName"
                                                  ]
                                                },
                                                "directoryId": {
                                                  "type": "string",
                                                  "description": "KeyVault directoryId."
                                                },
                                                "name": {
                                                  "type": "string",
                                                  "description": "KeyVault name."
                                                }
                                              },
                                              "required": [
                                                "credentials",
                                                "directoryId",
                                                "name"
                                              ]
                                            },
                                            "vaultSecret": {
                                              "description": "KeyVault secret details.",
                                              "type": "object",
                                              "properties": {
                                                "name": {
                                                  "type": "string",
                                                  "description": "KeyVault secret name."
                                                },
                                                "version": {
                                                  "type": "string",
                                                  "description": "KeyVault secret version."
                                                }
                                              },
                                              "required": [
                                                "name"
                                              ]
                                            }
                                          },
                                          "required": [
                                            "vault",
                                            "vaultSecret"
                                          ]
                                        },
                                        "secretName": {
                                          "type": "string",
                                          "description": "Secret where x509 attributes are stored."
                                        }
                                      }
                                    },
                                    "trustedClientCaCertConfigMap": {
                                      "type": "string",
                                      "description": "Trusted client ca cert config map.",
                                      "default": "client-ca"
                                    }
                                  }
                                }
                              }
                            },
                            "x-ms-identifiers": []
                          },
                          "listenerRef": {
                            "type": "array",
                            "description": "The array of listener Resources it supports.",
                            "items": {
                              "type": "string"
                            }
                          },
                          "provisioningState": {
                            "description": "The status of the last operation.",
                            "readOnly": true,
                            "type": "string",
                            "enum": [
                              "Succeeded",
                              "Failed",
                              "Canceled",
                              "Provisioning",
                              "Updating",
                              "Deleting",
                              "Accepted"
                            ],
                            "x-ms-enum": {
                              "name": "ProvisioningState",
                              "modelAsString": true,
                              "values": [
                                {
                                  "name": "Succeeded",
                                  "value": "Succeeded",
                                  "description": "Resource has been created."
                                },
                                {
                                  "name": "Failed",
                                  "value": "Failed",
                                  "description": "Resource creation failed."
                                },
                                {
                                  "name": "Canceled",
                                  "value": "Canceled",
                                  "description": "Resource creation was canceled."
                                },
                                {
                                  "name": "Provisioning",
                                  "value": "Provisioning",
                                  "description": "Resource is getting provisioned."
                                },
                                {
                                  "name": "Updating",
                                  "value": "Updating",
                                  "description": "Resource is Updating."
                                },
                                {
                                  "name": "Deleting",
                                  "value": "Deleting",
                                  "description": "Resource is Deleting."
                                },
                                {
                                  "name": "Accepted",
                                  "value": "Accepted",
                                  "description": "Resource has been Accepted."
                                }
                              ]
                            }
                          }
                        },
                        "required": [
                          "authenticationMethods",
                          "listenerRef"
                        ]
                      },
                      "extendedLocation": {
                        "description": "Extended Location",
                        "x-ms-mutability": [
                          "read",
                          "create"
                        ],
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "The name of the extended location."
                          },
                          "type": {
                            "description": "Type of ExtendedLocation.",
                            "type": "string",
                            "enum": [
                              "CustomLocation"
                            ],
                            "x-ms-enum": {
                              "name": "ExtendedLocationType",
                              "modelAsString": true,
                              "values": [
                                {
                                  "name": "CustomLocation",
                                  "value": "CustomLocation",
                                  "description": "CustomLocation type"
                                }
                              ]
                            }
                          }
                        },
                        "required": [
                          "name",
                          "type"
                        ]
                      }
                    },
                    "required": [
                      "extendedLocation"
                    ]
                  }
                },
                "nextLink": {
                  "type": "string",
                  "format": "uri",
                  "description": "The link to the next page of items"
                }
              },
              "required": [
                "value"
              ]
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTOperationsMQ/mq/{mqName}/broker/{brokerName}/authentication/{authenticationName}": {
      "get": {
        "operationId": "BrokerAuthentication_Get",
        "tags": [
          "BrokerAuthentication"
        ],
        "description": "Get a BrokerAuthenticationResource",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group. The name is case insensitive.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "x-ms-parameter-location": "method"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "brokerName",
            "in": "path",
            "description": "Name of MQ broker resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "authenticationName",
            "in": "path",
            "description": "Name of MQ broker/authentication resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "type": "object",
              "description": "MQ broker/authentication resource",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "description": "The name of the resource",
                  "readOnly": true
                },
                "type": {
                  "type": "string",
                  "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                  "readOnly": true
                },
                "systemData": {
                  "type": "object",
                  "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                  "readOnly": true,
                  "properties": {
                    "createdBy": {
                      "type": "string",
                      "description": "The identity that created the resource."
                    },
                    "createdByType": {
                      "type": "string",
                      "description": "The type of identity that created the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource creation (UTC)."
                    },
                    "lastModifiedBy": {
                      "type": "string",
                      "description": "The identity that last modified the resource."
                    },
                    "lastModifiedByType": {
                      "type": "string",
                      "description": "The type of identity that last modified the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "lastModifiedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource last modification (UTC)"
                    }
                  }
                },
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "x-ms-mutability": [
                    "read",
                    "create",
                    "update"
                  ]
                },
                "location": {
                  "type": "string",
                  "description": "The geo-location where the resource lives",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ]
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "authenticationMethods": {
                      "type": "array",
                      "description": "The list of authentication methods supported by the Authentication Resource. For each array element, NOTE - Enum only authenticator type supported.",
                      "items": {
                        "type": "object",
                        "description": "Collection of different CrdAuthenticator methods of Broker Resource. NOTE Enum - Only one method is supported for each entry.",
                        "properties": {
                          "custom": {
                            "description": "Custom Authentication Method.",
                            "type": "object",
                            "properties": {
                              "auth": {
                                "description": "Custom Broker Authentication Method.",
                                "type": "object",
                                "properties": {
                                  "x509": {
                                    "description": "X509 Custom Auth type details.",
                                    "type": "object",
                                    "properties": {
                                      "keyVault": {
                                        "description": "Keyvault X509 secret properties.",
                                        "type": "object",
                                        "properties": {
                                          "vault": {
                                            "description": "KeyVault properties.",
                                            "type": "object",
                                            "properties": {
                                              "credentials": {
                                                "description": "KeyVault credentials.",
                                                "type": "object",
                                                "properties": {
                                                  "servicePrincipalLocalSecretName": {
                                                    "type": "string",
                                                    "description": "KeyVault service principal local secret name."
                                                  }
                                                },
                                                "required": [
                                                  "servicePrincipalLocalSecretName"
                                                ]
                                              },
                                              "directoryId": {
                                                "type": "string",
                                                "description": "KeyVault directoryId."
                                              },
                                              "name": {
                                                "type": "string",
                                                "description": "KeyVault name."
                                              }
                                            },
                                            "required": [
                                              "credentials",
                                              "directoryId",
                                              "name"
                                            ]
                                          },
                                          "vaultCaChainSecret": {
                                            "description": "KeyVault CA chain secret details.",
                                            "type": "object",
                                            "properties": {
                                              "name": {
                                                "type": "string",
                                                "description": "KeyVault secret name."
                                              },
                                              "version": {
                                                "type": "string",
                                                "description": "KeyVault secret version."
                                              }
                                            },
                                            "required": [
                                              "name"
                                            ]
                                          },
                                          "vaultCert": {
                                            "description": "KeyVault Cert secret details.",
                                            "type": "object",
                                            "properties": {
                                              "name": {
                                                "type": "string",
                                                "description": "KeyVault secret name."
                                              },
                                              "version": {
                                                "type": "string",
                                                "description": "KeyVault secret version."
                                              }
                                            },
                                            "required": [
                                              "name"
                                            ]
                                          }
                                        },
                                        "required": [
                                          "vault",
                                          "vaultCert"
                                        ]
                                      },
                                      "secretName": {
                                        "type": "string",
                                        "description": "Secret where cert details are stored."
                                      }
                                    }
                                  }
                                },
                                "required": [
                                  "x509"
                                ]
                              },
                              "caCertConfigMap": {
                                "type": "string",
                                "description": "CA cert config map to use."
                              },
                              "endpoint": {
                                "type": "string",
                                "description": "Endpoint to connect to."
                              },
                              "headers": {
                                "type": "object",
                                "description": "Configuration Headers to use.",
                                "additionalProperties": {
                                  "type": "string"
                                }
                              }
                            },
                            "required": [
                              "endpoint"
                            ]
                          },
                          "sat": {
                            "description": "Service Account Token Method.",
                            "type": "object",
                            "properties": {
                              "audiences": {
                                "type": "array",
                                "description": "List of allowed audience.",
                                "items": {
                                  "type": "string"
                                }
                              }
                            },
                            "required": [
                              "audiences"
                            ]
                          },
                          "svid": {
                            "description": "Service Account Token Method.",
                            "type": "object",
                            "properties": {
                              "agentSocketPath": {
                                "type": "string",
                                "description": "Mounted socket path for spiffe agent."
                              },
                              "identityMaxRetry": {
                                "type": "integer",
                                "format": "int64",
                                "description": "Maximum number of re-tries to fetch identity.",
                                "default": 3,
                                "minimum": 0,
                                "maximum": 4294967295
                              },
                              "identityWaitRetryMs": {
                                "type": "integer",
                                "format": "int64",
                                "description": "Maximum time to wait before fetching identity again.",
                                "default": 5000,
                                "minimum": 0,
                                "maximum": 9223372036854000000
                              }
                            },
                            "required": [
                              "agentSocketPath"
                            ]
                          },
                          "usernamePassword": {
                            "description": "UsernamePassword Method.",
                            "type": "object",
                            "properties": {
                              "keyVault": {
                                "description": "Keyvault username password secret properties.",
                                "type": "object",
                                "properties": {
                                  "vault": {
                                    "description": "KeyVault properties.",
                                    "type": "object",
                                    "properties": {
                                      "credentials": {
                                        "description": "KeyVault credentials.",
                                        "type": "object",
                                        "properties": {
                                          "servicePrincipalLocalSecretName": {
                                            "type": "string",
                                            "description": "KeyVault service principal local secret name."
                                          }
                                        },
                                        "required": [
                                          "servicePrincipalLocalSecretName"
                                        ]
                                      },
                                      "directoryId": {
                                        "type": "string",
                                        "description": "KeyVault directoryId."
                                      },
                                      "name": {
                                        "type": "string",
                                        "description": "KeyVault name."
                                      }
                                    },
                                    "required": [
                                      "credentials",
                                      "directoryId",
                                      "name"
                                    ]
                                  },
                                  "vaultSecret": {
                                    "description": "KeyVault secret details.",
                                    "type": "object",
                                    "properties": {
                                      "name": {
                                        "type": "string",
                                        "description": "KeyVault secret name."
                                      },
                                      "version": {
                                        "type": "string",
                                        "description": "KeyVault secret version."
                                      }
                                    },
                                    "required": [
                                      "name"
                                    ]
                                  }
                                },
                                "required": [
                                  "vault",
                                  "vaultSecret"
                                ]
                              },
                              "secretName": {
                                "type": "string",
                                "description": "Secret where username and password are stored."
                              }
                            }
                          },
                          "x509": {
                            "description": "X509 Method.",
                            "type": "object",
                            "properties": {
                              "attributes": {
                                "description": "K8S Secret name to mount for username and password.",
                                "type": "object",
                                "properties": {
                                  "keyVault": {
                                    "description": "Keyvault x509 attributes secret properties.",
                                    "type": "object",
                                    "properties": {
                                      "vault": {
                                        "description": "KeyVault properties.",
                                        "type": "object",
                                        "properties": {
                                          "credentials": {
                                            "description": "KeyVault credentials.",
                                            "type": "object",
                                            "properties": {
                                              "servicePrincipalLocalSecretName": {
                                                "type": "string",
                                                "description": "KeyVault service principal local secret name."
                                              }
                                            },
                                            "required": [
                                              "servicePrincipalLocalSecretName"
                                            ]
                                          },
                                          "directoryId": {
                                            "type": "string",
                                            "description": "KeyVault directoryId."
                                          },
                                          "name": {
                                            "type": "string",
                                            "description": "KeyVault name."
                                          }
                                        },
                                        "required": [
                                          "credentials",
                                          "directoryId",
                                          "name"
                                        ]
                                      },
                                      "vaultSecret": {
                                        "description": "KeyVault secret details.",
                                        "type": "object",
                                        "properties": {
                                          "name": {
                                            "type": "string",
                                            "description": "KeyVault secret name."
                                          },
                                          "version": {
                                            "type": "string",
                                            "description": "KeyVault secret version."
                                          }
                                        },
                                        "required": [
                                          "name"
                                        ]
                                      }
                                    },
                                    "required": [
                                      "vault",
                                      "vaultSecret"
                                    ]
                                  },
                                  "secretName": {
                                    "type": "string",
                                    "description": "Secret where x509 attributes are stored."
                                  }
                                }
                              },
                              "trustedClientCaCertConfigMap": {
                                "type": "string",
                                "description": "Trusted client ca cert config map.",
                                "default": "client-ca"
                              }
                            }
                          }
                        }
                      },
                      "x-ms-identifiers": []
                    },
                    "listenerRef": {
                      "type": "array",
                      "description": "The array of listener Resources it supports.",
                      "items": {
                        "type": "string"
                      }
                    },
                    "provisioningState": {
                      "description": "The status of the last operation.",
                      "readOnly": true,
                      "type": "string",
                      "enum": [
                        "Succeeded",
                        "Failed",
                        "Canceled",
                        "Provisioning",
                        "Updating",
                        "Deleting",
                        "Accepted"
                      ],
                      "x-ms-enum": {
                        "name": "ProvisioningState",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Succeeded",
                            "value": "Succeeded",
                            "description": "Resource has been created."
                          },
                          {
                            "name": "Failed",
                            "value": "Failed",
                            "description": "Resource creation failed."
                          },
                          {
                            "name": "Canceled",
                            "value": "Canceled",
                            "description": "Resource creation was canceled."
                          },
                          {
                            "name": "Provisioning",
                            "value": "Provisioning",
                            "description": "Resource is getting provisioned."
                          },
                          {
                            "name": "Updating",
                            "value": "Updating",
                            "description": "Resource is Updating."
                          },
                          {
                            "name": "Deleting",
                            "value": "Deleting",
                            "description": "Resource is Deleting."
                          },
                          {
                            "name": "Accepted",
                            "value": "Accepted",
                            "description": "Resource has been Accepted."
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "authenticationMethods",
                    "listenerRef"
                  ]
                },
                "extendedLocation": {
                  "description": "Extended Location",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ],
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The name of the extended location."
                    },
                    "type": {
                      "description": "Type of ExtendedLocation.",
                      "type": "string",
                      "enum": [
                        "CustomLocation"
                      ],
                      "x-ms-enum": {
                        "name": "ExtendedLocationType",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "CustomLocation",
                            "value": "CustomLocation",
                            "description": "CustomLocation type"
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "name",
                    "type"
                  ]
                }
              },
              "required": [
                "extendedLocation"
              ]
            }
          }
        }
      },
      "put": {
        "operationId": "BrokerAuthentication_CreateOrUpdate",
        "tags": [
          "BrokerAuthentication"
        ],
        "description": "Create a BrokerAuthenticationResource",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group. The name is case insensitive.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "x-ms-parameter-location": "method"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "brokerName",
            "in": "path",
            "description": "Name of MQ broker resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "authenticationName",
            "in": "path",
            "description": "Name of MQ broker/authentication resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "resource",
            "in": "body",
            "description": "Resource create parameters.",
            "required": true,
            "schema": {
              "type": "object",
              "description": "MQ broker/authentication resource",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "description": "The name of the resource",
                  "readOnly": true
                },
                "type": {
                  "type": "string",
                  "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                  "readOnly": true
                },
                "systemData": {
                  "type": "object",
                  "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                  "readOnly": true,
                  "properties": {
                    "createdBy": {
                      "type": "string",
                      "description": "The identity that created the resource."
                    },
                    "createdByType": {
                      "type": "string",
                      "description": "The type of identity that created the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource creation (UTC)."
                    },
                    "lastModifiedBy": {
                      "type": "string",
                      "description": "The identity that last modified the resource."
                    },
                    "lastModifiedByType": {
                      "type": "string",
                      "description": "The type of identity that last modified the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "lastModifiedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource last modification (UTC)"
                    }
                  }
                },
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "x-ms-mutability": [
                    "read",
                    "create",
                    "update"
                  ]
                },
                "location": {
                  "type": "string",
                  "description": "The geo-location where the resource lives",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ]
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "authenticationMethods": {
                      "type": "array",
                      "description": "The list of authentication methods supported by the Authentication Resource. For each array element, NOTE - Enum only authenticator type supported.",
                      "items": {
                        "type": "object",
                        "description": "Collection of different CrdAuthenticator methods of Broker Resource. NOTE Enum - Only one method is supported for each entry.",
                        "properties": {
                          "custom": {
                            "description": "Custom Authentication Method.",
                            "type": "object",
                            "properties": {
                              "auth": {
                                "description": "Custom Broker Authentication Method.",
                                "type": "object",
                                "properties": {
                                  "x509": {
                                    "description": "X509 Custom Auth type details.",
                                    "type": "object",
                                    "properties": {
                                      "keyVault": {
                                        "description": "Keyvault X509 secret properties.",
                                        "type": "object",
                                        "properties": {
                                          "vault": {
                                            "description": "KeyVault properties.",
                                            "type": "object",
                                            "properties": {
                                              "credentials": {
                                                "description": "KeyVault credentials.",
                                                "type": "object",
                                                "properties": {
                                                  "servicePrincipalLocalSecretName": {
                                                    "type": "string",
                                                    "description": "KeyVault service principal local secret name."
                                                  }
                                                },
                                                "required": [
                                                  "servicePrincipalLocalSecretName"
                                                ]
                                              },
                                              "directoryId": {
                                                "type": "string",
                                                "description": "KeyVault directoryId."
                                              },
                                              "name": {
                                                "type": "string",
                                                "description": "KeyVault name."
                                              }
                                            },
                                            "required": [
                                              "credentials",
                                              "directoryId",
                                              "name"
                                            ]
                                          },
                                          "vaultCaChainSecret": {
                                            "description": "KeyVault CA chain secret details.",
                                            "type": "object",
                                            "properties": {
                                              "name": {
                                                "type": "string",
                                                "description": "KeyVault secret name."
                                              },
                                              "version": {
                                                "type": "string",
                                                "description": "KeyVault secret version."
                                              }
                                            },
                                            "required": [
                                              "name"
                                            ]
                                          },
                                          "vaultCert": {
                                            "description": "KeyVault Cert secret details.",
                                            "type": "object",
                                            "properties": {
                                              "name": {
                                                "type": "string",
                                                "description": "KeyVault secret name."
                                              },
                                              "version": {
                                                "type": "string",
                                                "description": "KeyVault secret version."
                                              }
                                            },
                                            "required": [
                                              "name"
                                            ]
                                          }
                                        },
                                        "required": [
                                          "vault",
                                          "vaultCert"
                                        ]
                                      },
                                      "secretName": {
                                        "type": "string",
                                        "description": "Secret where cert details are stored."
                                      }
                                    }
                                  }
                                },
                                "required": [
                                  "x509"
                                ]
                              },
                              "caCertConfigMap": {
                                "type": "string",
                                "description": "CA cert config map to use."
                              },
                              "endpoint": {
                                "type": "string",
                                "description": "Endpoint to connect to."
                              },
                              "headers": {
                                "type": "object",
                                "description": "Configuration Headers to use.",
                                "additionalProperties": {
                                  "type": "string"
                                }
                              }
                            },
                            "required": [
                              "endpoint"
                            ]
                          },
                          "sat": {
                            "description": "Service Account Token Method.",
                            "type": "object",
                            "properties": {
                              "audiences": {
                                "type": "array",
                                "description": "List of allowed audience.",
                                "items": {
                                  "type": "string"
                                }
                              }
                            },
                            "required": [
                              "audiences"
                            ]
                          },
                          "svid": {
                            "description": "Service Account Token Method.",
                            "type": "object",
                            "properties": {
                              "agentSocketPath": {
                                "type": "string",
                                "description": "Mounted socket path for spiffe agent."
                              },
                              "identityMaxRetry": {
                                "type": "integer",
                                "format": "int64",
                                "description": "Maximum number of re-tries to fetch identity.",
                                "default": 3,
                                "minimum": 0,
                                "maximum": 4294967295
                              },
                              "identityWaitRetryMs": {
                                "type": "integer",
                                "format": "int64",
                                "description": "Maximum time to wait before fetching identity again.",
                                "default": 5000,
                                "minimum": 0,
                                "maximum": 9223372036854000000
                              }
                            },
                            "required": [
                              "agentSocketPath"
                            ]
                          },
                          "usernamePassword": {
                            "description": "UsernamePassword Method.",
                            "type": "object",
                            "properties": {
                              "keyVault": {
                                "description": "Keyvault username password secret properties.",
                                "type": "object",
                                "properties": {
                                  "vault": {
                                    "description": "KeyVault properties.",
                                    "type": "object",
                                    "properties": {
                                      "credentials": {
                                        "description": "KeyVault credentials.",
                                        "type": "object",
                                        "properties": {
                                          "servicePrincipalLocalSecretName": {
                                            "type": "string",
                                            "description": "KeyVault service principal local secret name."
                                          }
                                        },
                                        "required": [
                                          "servicePrincipalLocalSecretName"
                                        ]
                                      },
                                      "directoryId": {
                                        "type": "string",
                                        "description": "KeyVault directoryId."
                                      },
                                      "name": {
                                        "type": "string",
                                        "description": "KeyVault name."
                                      }
                                    },
                                    "required": [
                                      "credentials",
                                      "directoryId",
                                      "name"
                                    ]
                                  },
                                  "vaultSecret": {
                                    "description": "KeyVault secret details.",
                                    "type": "object",
                                    "properties": {
                                      "name": {
                                        "type": "string",
                                        "description": "KeyVault secret name."
                                      },
                                      "version": {
                                        "type": "string",
                                        "description": "KeyVault secret version."
                                      }
                                    },
                                    "required": [
                                      "name"
                                    ]
                                  }
                                },
                                "required": [
                                  "vault",
                                  "vaultSecret"
                                ]
                              },
                              "secretName": {
                                "type": "string",
                                "description": "Secret where username and password are stored."
                              }
                            }
                          },
                          "x509": {
                            "description": "X509 Method.",
                            "type": "object",
                            "properties": {
                              "attributes": {
                                "description": "K8S Secret name to mount for username and password.",
                                "type": "object",
                                "properties": {
                                  "keyVault": {
                                    "description": "Keyvault x509 attributes secret properties.",
                                    "type": "object",
                                    "properties": {
                                      "vault": {
                                        "description": "KeyVault properties.",
                                        "type": "object",
                                        "properties": {
                                          "credentials": {
                                            "description": "KeyVault credentials.",
                                            "type": "object",
                                            "properties": {
                                              "servicePrincipalLocalSecretName": {
                                                "type": "string",
                                                "description": "KeyVault service principal local secret name."
                                              }
                                            },
                                            "required": [
                                              "servicePrincipalLocalSecretName"
                                            ]
                                          },
                                          "directoryId": {
                                            "type": "string",
                                            "description": "KeyVault directoryId."
                                          },
                                          "name": {
                                            "type": "string",
                                            "description": "KeyVault name."
                                          }
                                        },
                                        "required": [
                                          "credentials",
                                          "directoryId",
                                          "name"
                                        ]
                                      },
                                      "vaultSecret": {
                                        "description": "KeyVault secret details.",
                                        "type": "object",
                                        "properties": {
                                          "name": {
                                            "type": "string",
                                            "description": "KeyVault secret name."
                                          },
                                          "version": {
                                            "type": "string",
                                            "description": "KeyVault secret version."
                                          }
                                        },
                                        "required": [
                                          "name"
                                        ]
                                      }
                                    },
                                    "required": [
                                      "vault",
                                      "vaultSecret"
                                    ]
                                  },
                                  "secretName": {
                                    "type": "string",
                                    "description": "Secret where x509 attributes are stored."
                                  }
                                }
                              },
                              "trustedClientCaCertConfigMap": {
                                "type": "string",
                                "description": "Trusted client ca cert config map.",
                                "default": "client-ca"
                              }
                            }
                          }
                        }
                      },
                      "x-ms-identifiers": []
                    },
                    "listenerRef": {
                      "type": "array",
                      "description": "The array of listener Resources it supports.",
                      "items": {
                        "type": "string"
                      }
                    },
                    "provisioningState": {
                      "description": "The status of the last operation.",
                      "readOnly": true,
                      "type": "string",
                      "enum": [
                        "Succeeded",
                        "Failed",
                        "Canceled",
                        "Provisioning",
                        "Updating",
                        "Deleting",
                        "Accepted"
                      ],
                      "x-ms-enum": {
                        "name": "ProvisioningState",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Succeeded",
                            "value": "Succeeded",
                            "description": "Resource has been created."
                          },
                          {
                            "name": "Failed",
                            "value": "Failed",
                            "description": "Resource creation failed."
                          },
                          {
                            "name": "Canceled",
                            "value": "Canceled",
                            "description": "Resource creation was canceled."
                          },
                          {
                            "name": "Provisioning",
                            "value": "Provisioning",
                            "description": "Resource is getting provisioned."
                          },
                          {
                            "name": "Updating",
                            "value": "Updating",
                            "description": "Resource is Updating."
                          },
                          {
                            "name": "Deleting",
                            "value": "Deleting",
                            "description": "Resource is Deleting."
                          },
                          {
                            "name": "Accepted",
                            "value": "Accepted",
                            "description": "Resource has been Accepted."
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "authenticationMethods",
                    "listenerRef"
                  ]
                },
                "extendedLocation": {
                  "description": "Extended Location",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ],
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The name of the extended location."
                    },
                    "type": {
                      "description": "Type of ExtendedLocation.",
                      "type": "string",
                      "enum": [
                        "CustomLocation"
                      ],
                      "x-ms-enum": {
                        "name": "ExtendedLocationType",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "CustomLocation",
                            "value": "CustomLocation",
                            "description": "CustomLocation type"
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "name",
                    "type"
                  ]
                }
              },
              "required": [
                "extendedLocation"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resource 'BrokerAuthenticationResource' update operation succeeded",
            "schema": {
              "type": "object",
              "description": "MQ broker/authentication resource",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "description": "The name of the resource",
                  "readOnly": true
                },
                "type": {
                  "type": "string",
                  "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                  "readOnly": true
                },
                "systemData": {
                  "type": "object",
                  "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                  "readOnly": true,
                  "properties": {
                    "createdBy": {
                      "type": "string",
                      "description": "The identity that created the resource."
                    },
                    "createdByType": {
                      "type": "string",
                      "description": "The type of identity that created the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource creation (UTC)."
                    },
                    "lastModifiedBy": {
                      "type": "string",
                      "description": "The identity that last modified the resource."
                    },
                    "lastModifiedByType": {
                      "type": "string",
                      "description": "The type of identity that last modified the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "lastModifiedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource last modification (UTC)"
                    }
                  }
                },
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "x-ms-mutability": [
                    "read",
                    "create",
                    "update"
                  ]
                },
                "location": {
                  "type": "string",
                  "description": "The geo-location where the resource lives",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ]
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "authenticationMethods": {
                      "type": "array",
                      "description": "The list of authentication methods supported by the Authentication Resource. For each array element, NOTE - Enum only authenticator type supported.",
                      "items": {
                        "type": "object",
                        "description": "Collection of different CrdAuthenticator methods of Broker Resource. NOTE Enum - Only one method is supported for each entry.",
                        "properties": {
                          "custom": {
                            "description": "Custom Authentication Method.",
                            "type": "object",
                            "properties": {
                              "auth": {
                                "description": "Custom Broker Authentication Method.",
                                "type": "object",
                                "properties": {
                                  "x509": {
                                    "description": "X509 Custom Auth type details.",
                                    "type": "object",
                                    "properties": {
                                      "keyVault": {
                                        "description": "Keyvault X509 secret properties.",
                                        "type": "object",
                                        "properties": {
                                          "vault": {
                                            "description": "KeyVault properties.",
                                            "type": "object",
                                            "properties": {
                                              "credentials": {
                                                "description": "KeyVault credentials.",
                                                "type": "object",
                                                "properties": {
                                                  "servicePrincipalLocalSecretName": {
                                                    "type": "string",
                                                    "description": "KeyVault service principal local secret name."
                                                  }
                                                },
                                                "required": [
                                                  "servicePrincipalLocalSecretName"
                                                ]
                                              },
                                              "directoryId": {
                                                "type": "string",
                                                "description": "KeyVault directoryId."
                                              },
                                              "name": {
                                                "type": "string",
                                                "description": "KeyVault name."
                                              }
                                            },
                                            "required": [
                                              "credentials",
                                              "directoryId",
                                              "name"
                                            ]
                                          },
                                          "vaultCaChainSecret": {
                                            "description": "KeyVault CA chain secret details.",
                                            "type": "object",
                                            "properties": {
                                              "name": {
                                                "type": "string",
                                                "description": "KeyVault secret name."
                                              },
                                              "version": {
                                                "type": "string",
                                                "description": "KeyVault secret version."
                                              }
                                            },
                                            "required": [
                                              "name"
                                            ]
                                          },
                                          "vaultCert": {
                                            "description": "KeyVault Cert secret details.",
                                            "type": "object",
                                            "properties": {
                                              "name": {
                                                "type": "string",
                                                "description": "KeyVault secret name."
                                              },
                                              "version": {
                                                "type": "string",
                                                "description": "KeyVault secret version."
                                              }
                                            },
                                            "required": [
                                              "name"
                                            ]
                                          }
                                        },
                                        "required": [
                                          "vault",
                                          "vaultCert"
                                        ]
                                      },
                                      "secretName": {
                                        "type": "string",
                                        "description": "Secret where cert details are stored."
                                      }
                                    }
                                  }
                                },
                                "required": [
                                  "x509"
                                ]
                              },
                              "caCertConfigMap": {
                                "type": "string",
                                "description": "CA cert config map to use."
                              },
                              "endpoint": {
                                "type": "string",
                                "description": "Endpoint to connect to."
                              },
                              "headers": {
                                "type": "object",
                                "description": "Configuration Headers to use.",
                                "additionalProperties": {
                                  "type": "string"
                                }
                              }
                            },
                            "required": [
                              "endpoint"
                            ]
                          },
                          "sat": {
                            "description": "Service Account Token Method.",
                            "type": "object",
                            "properties": {
                              "audiences": {
                                "type": "array",
                                "description": "List of allowed audience.",
                                "items": {
                                  "type": "string"
                                }
                              }
                            },
                            "required": [
                              "audiences"
                            ]
                          },
                          "svid": {
                            "description": "Service Account Token Method.",
                            "type": "object",
                            "properties": {
                              "agentSocketPath": {
                                "type": "string",
                                "description": "Mounted socket path for spiffe agent."
                              },
                              "identityMaxRetry": {
                                "type": "integer",
                                "format": "int64",
                                "description": "Maximum number of re-tries to fetch identity.",
                                "default": 3,
                                "minimum": 0,
                                "maximum": 4294967295
                              },
                              "identityWaitRetryMs": {
                                "type": "integer",
                                "format": "int64",
                                "description": "Maximum time to wait before fetching identity again.",
                                "default": 5000,
                                "minimum": 0,
                                "maximum": 9223372036854000000
                              }
                            },
                            "required": [
                              "agentSocketPath"
                            ]
                          },
                          "usernamePassword": {
                            "description": "UsernamePassword Method.",
                            "type": "object",
                            "properties": {
                              "keyVault": {
                                "description": "Keyvault username password secret properties.",
                                "type": "object",
                                "properties": {
                                  "vault": {
                                    "description": "KeyVault properties.",
                                    "type": "object",
                                    "properties": {
                                      "credentials": {
                                        "description": "KeyVault credentials.",
                                        "type": "object",
                                        "properties": {
                                          "servicePrincipalLocalSecretName": {
                                            "type": "string",
                                            "description": "KeyVault service principal local secret name."
                                          }
                                        },
                                        "required": [
                                          "servicePrincipalLocalSecretName"
                                        ]
                                      },
                                      "directoryId": {
                                        "type": "string",
                                        "description": "KeyVault directoryId."
                                      },
                                      "name": {
                                        "type": "string",
                                        "description": "KeyVault name."
                                      }
                                    },
                                    "required": [
                                      "credentials",
                                      "directoryId",
                                      "name"
                                    ]
                                  },
                                  "vaultSecret": {
                                    "description": "KeyVault secret details.",
                                    "type": "object",
                                    "properties": {
                                      "name": {
                                        "type": "string",
                                        "description": "KeyVault secret name."
                                      },
                                      "version": {
                                        "type": "string",
                                        "description": "KeyVault secret version."
                                      }
                                    },
                                    "required": [
                                      "name"
                                    ]
                                  }
                                },
                                "required": [
                                  "vault",
                                  "vaultSecret"
                                ]
                              },
                              "secretName": {
                                "type": "string",
                                "description": "Secret where username and password are stored."
                              }
                            }
                          },
                          "x509": {
                            "description": "X509 Method.",
                            "type": "object",
                            "properties": {
                              "attributes": {
                                "description": "K8S Secret name to mount for username and password.",
                                "type": "object",
                                "properties": {
                                  "keyVault": {
                                    "description": "Keyvault x509 attributes secret properties.",
                                    "type": "object",
                                    "properties": {
                                      "vault": {
                                        "description": "KeyVault properties.",
                                        "type": "object",
                                        "properties": {
                                          "credentials": {
                                            "description": "KeyVault credentials.",
                                            "type": "object",
                                            "properties": {
                                              "servicePrincipalLocalSecretName": {
                                                "type": "string",
                                                "description": "KeyVault service principal local secret name."
                                              }
                                            },
                                            "required": [
                                              "servicePrincipalLocalSecretName"
                                            ]
                                          },
                                          "directoryId": {
                                            "type": "string",
                                            "description": "KeyVault directoryId."
                                          },
                                          "name": {
                                            "type": "string",
                                            "description": "KeyVault name."
                                          }
                                        },
                                        "required": [
                                          "credentials",
                                          "directoryId",
                                          "name"
                                        ]
                                      },
                                      "vaultSecret": {
                                        "description": "KeyVault secret details.",
                                        "type": "object",
                                        "properties": {
                                          "name": {
                                            "type": "string",
                                            "description": "KeyVault secret name."
                                          },
                                          "version": {
                                            "type": "string",
                                            "description": "KeyVault secret version."
                                          }
                                        },
                                        "required": [
                                          "name"
                                        ]
                                      }
                                    },
                                    "required": [
                                      "vault",
                                      "vaultSecret"
                                    ]
                                  },
                                  "secretName": {
                                    "type": "string",
                                    "description": "Secret where x509 attributes are stored."
                                  }
                                }
                              },
                              "trustedClientCaCertConfigMap": {
                                "type": "string",
                                "description": "Trusted client ca cert config map.",
                                "default": "client-ca"
                              }
                            }
                          }
                        }
                      },
                      "x-ms-identifiers": []
                    },
                    "listenerRef": {
                      "type": "array",
                      "description": "The array of listener Resources it supports.",
                      "items": {
                        "type": "string"
                      }
                    },
                    "provisioningState": {
                      "description": "The status of the last operation.",
                      "readOnly": true,
                      "type": "string",
                      "enum": [
                        "Succeeded",
                        "Failed",
                        "Canceled",
                        "Provisioning",
                        "Updating",
                        "Deleting",
                        "Accepted"
                      ],
                      "x-ms-enum": {
                        "name": "ProvisioningState",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Succeeded",
                            "value": "Succeeded",
                            "description": "Resource has been created."
                          },
                          {
                            "name": "Failed",
                            "value": "Failed",
                            "description": "Resource creation failed."
                          },
                          {
                            "name": "Canceled",
                            "value": "Canceled",
                            "description": "Resource creation was canceled."
                          },
                          {
                            "name": "Provisioning",
                            "value": "Provisioning",
                            "description": "Resource is getting provisioned."
                          },
                          {
                            "name": "Updating",
                            "value": "Updating",
                            "description": "Resource is Updating."
                          },
                          {
                            "name": "Deleting",
                            "value": "Deleting",
                            "description": "Resource is Deleting."
                          },
                          {
                            "name": "Accepted",
                            "value": "Accepted",
                            "description": "Resource has been Accepted."
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "authenticationMethods",
                    "listenerRef"
                  ]
                },
                "extendedLocation": {
                  "description": "Extended Location",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ],
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The name of the extended location."
                    },
                    "type": {
                      "description": "Type of ExtendedLocation.",
                      "type": "string",
                      "enum": [
                        "CustomLocation"
                      ],
                      "x-ms-enum": {
                        "name": "ExtendedLocationType",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "CustomLocation",
                            "value": "CustomLocation",
                            "description": "CustomLocation type"
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "name",
                    "type"
                  ]
                }
              },
              "required": [
                "extendedLocation"
              ]
            }
          },
          "201": {
            "description": "Resource 'BrokerAuthenticationResource' create operation succeeded",
            "schema": {
              "type": "object",
              "description": "MQ broker/authentication resource",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "description": "The name of the resource",
                  "readOnly": true
                },
                "type": {
                  "type": "string",
                  "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                  "readOnly": true
                },
                "systemData": {
                  "type": "object",
                  "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                  "readOnly": true,
                  "properties": {
                    "createdBy": {
                      "type": "string",
                      "description": "The identity that created the resource."
                    },
                    "createdByType": {
                      "type": "string",
                      "description": "The type of identity that created the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource creation (UTC)."
                    },
                    "lastModifiedBy": {
                      "type": "string",
                      "description": "The identity that last modified the resource."
                    },
                    "lastModifiedByType": {
                      "type": "string",
                      "description": "The type of identity that last modified the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "lastModifiedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource last modification (UTC)"
                    }
                  }
                },
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "x-ms-mutability": [
                    "read",
                    "create",
                    "update"
                  ]
                },
                "location": {
                  "type": "string",
                  "description": "The geo-location where the resource lives",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ]
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "authenticationMethods": {
                      "type": "array",
                      "description": "The list of authentication methods supported by the Authentication Resource. For each array element, NOTE - Enum only authenticator type supported.",
                      "items": {
                        "type": "object",
                        "description": "Collection of different CrdAuthenticator methods of Broker Resource. NOTE Enum - Only one method is supported for each entry.",
                        "properties": {
                          "custom": {
                            "description": "Custom Authentication Method.",
                            "type": "object",
                            "properties": {
                              "auth": {
                                "description": "Custom Broker Authentication Method.",
                                "type": "object",
                                "properties": {
                                  "x509": {
                                    "description": "X509 Custom Auth type details.",
                                    "type": "object",
                                    "properties": {
                                      "keyVault": {
                                        "description": "Keyvault X509 secret properties.",
                                        "type": "object",
                                        "properties": {
                                          "vault": {
                                            "description": "KeyVault properties.",
                                            "type": "object",
                                            "properties": {
                                              "credentials": {
                                                "description": "KeyVault credentials.",
                                                "type": "object",
                                                "properties": {
                                                  "servicePrincipalLocalSecretName": {
                                                    "type": "string",
                                                    "description": "KeyVault service principal local secret name."
                                                  }
                                                },
                                                "required": [
                                                  "servicePrincipalLocalSecretName"
                                                ]
                                              },
                                              "directoryId": {
                                                "type": "string",
                                                "description": "KeyVault directoryId."
                                              },
                                              "name": {
                                                "type": "string",
                                                "description": "KeyVault name."
                                              }
                                            },
                                            "required": [
                                              "credentials",
                                              "directoryId",
                                              "name"
                                            ]
                                          },
                                          "vaultCaChainSecret": {
                                            "description": "KeyVault CA chain secret details.",
                                            "type": "object",
                                            "properties": {
                                              "name": {
                                                "type": "string",
                                                "description": "KeyVault secret name."
                                              },
                                              "version": {
                                                "type": "string",
                                                "description": "KeyVault secret version."
                                              }
                                            },
                                            "required": [
                                              "name"
                                            ]
                                          },
                                          "vaultCert": {
                                            "description": "KeyVault Cert secret details.",
                                            "type": "object",
                                            "properties": {
                                              "name": {
                                                "type": "string",
                                                "description": "KeyVault secret name."
                                              },
                                              "version": {
                                                "type": "string",
                                                "description": "KeyVault secret version."
                                              }
                                            },
                                            "required": [
                                              "name"
                                            ]
                                          }
                                        },
                                        "required": [
                                          "vault",
                                          "vaultCert"
                                        ]
                                      },
                                      "secretName": {
                                        "type": "string",
                                        "description": "Secret where cert details are stored."
                                      }
                                    }
                                  }
                                },
                                "required": [
                                  "x509"
                                ]
                              },
                              "caCertConfigMap": {
                                "type": "string",
                                "description": "CA cert config map to use."
                              },
                              "endpoint": {
                                "type": "string",
                                "description": "Endpoint to connect to."
                              },
                              "headers": {
                                "type": "object",
                                "description": "Configuration Headers to use.",
                                "additionalProperties": {
                                  "type": "string"
                                }
                              }
                            },
                            "required": [
                              "endpoint"
                            ]
                          },
                          "sat": {
                            "description": "Service Account Token Method.",
                            "type": "object",
                            "properties": {
                              "audiences": {
                                "type": "array",
                                "description": "List of allowed audience.",
                                "items": {
                                  "type": "string"
                                }
                              }
                            },
                            "required": [
                              "audiences"
                            ]
                          },
                          "svid": {
                            "description": "Service Account Token Method.",
                            "type": "object",
                            "properties": {
                              "agentSocketPath": {
                                "type": "string",
                                "description": "Mounted socket path for spiffe agent."
                              },
                              "identityMaxRetry": {
                                "type": "integer",
                                "format": "int64",
                                "description": "Maximum number of re-tries to fetch identity.",
                                "default": 3,
                                "minimum": 0,
                                "maximum": 4294967295
                              },
                              "identityWaitRetryMs": {
                                "type": "integer",
                                "format": "int64",
                                "description": "Maximum time to wait before fetching identity again.",
                                "default": 5000,
                                "minimum": 0,
                                "maximum": 9223372036854000000
                              }
                            },
                            "required": [
                              "agentSocketPath"
                            ]
                          },
                          "usernamePassword": {
                            "description": "UsernamePassword Method.",
                            "type": "object",
                            "properties": {
                              "keyVault": {
                                "description": "Keyvault username password secret properties.",
                                "type": "object",
                                "properties": {
                                  "vault": {
                                    "description": "KeyVault properties.",
                                    "type": "object",
                                    "properties": {
                                      "credentials": {
                                        "description": "KeyVault credentials.",
                                        "type": "object",
                                        "properties": {
                                          "servicePrincipalLocalSecretName": {
                                            "type": "string",
                                            "description": "KeyVault service principal local secret name."
                                          }
                                        },
                                        "required": [
                                          "servicePrincipalLocalSecretName"
                                        ]
                                      },
                                      "directoryId": {
                                        "type": "string",
                                        "description": "KeyVault directoryId."
                                      },
                                      "name": {
                                        "type": "string",
                                        "description": "KeyVault name."
                                      }
                                    },
                                    "required": [
                                      "credentials",
                                      "directoryId",
                                      "name"
                                    ]
                                  },
                                  "vaultSecret": {
                                    "description": "KeyVault secret details.",
                                    "type": "object",
                                    "properties": {
                                      "name": {
                                        "type": "string",
                                        "description": "KeyVault secret name."
                                      },
                                      "version": {
                                        "type": "string",
                                        "description": "KeyVault secret version."
                                      }
                                    },
                                    "required": [
                                      "name"
                                    ]
                                  }
                                },
                                "required": [
                                  "vault",
                                  "vaultSecret"
                                ]
                              },
                              "secretName": {
                                "type": "string",
                                "description": "Secret where username and password are stored."
                              }
                            }
                          },
                          "x509": {
                            "description": "X509 Method.",
                            "type": "object",
                            "properties": {
                              "attributes": {
                                "description": "K8S Secret name to mount for username and password.",
                                "type": "object",
                                "properties": {
                                  "keyVault": {
                                    "description": "Keyvault x509 attributes secret properties.",
                                    "type": "object",
                                    "properties": {
                                      "vault": {
                                        "description": "KeyVault properties.",
                                        "type": "object",
                                        "properties": {
                                          "credentials": {
                                            "description": "KeyVault credentials.",
                                            "type": "object",
                                            "properties": {
                                              "servicePrincipalLocalSecretName": {
                                                "type": "string",
                                                "description": "KeyVault service principal local secret name."
                                              }
                                            },
                                            "required": [
                                              "servicePrincipalLocalSecretName"
                                            ]
                                          },
                                          "directoryId": {
                                            "type": "string",
                                            "description": "KeyVault directoryId."
                                          },
                                          "name": {
                                            "type": "string",
                                            "description": "KeyVault name."
                                          }
                                        },
                                        "required": [
                                          "credentials",
                                          "directoryId",
                                          "name"
                                        ]
                                      },
                                      "vaultSecret": {
                                        "description": "KeyVault secret details.",
                                        "type": "object",
                                        "properties": {
                                          "name": {
                                            "type": "string",
                                            "description": "KeyVault secret name."
                                          },
                                          "version": {
                                            "type": "string",
                                            "description": "KeyVault secret version."
                                          }
                                        },
                                        "required": [
                                          "name"
                                        ]
                                      }
                                    },
                                    "required": [
                                      "vault",
                                      "vaultSecret"
                                    ]
                                  },
                                  "secretName": {
                                    "type": "string",
                                    "description": "Secret where x509 attributes are stored."
                                  }
                                }
                              },
                              "trustedClientCaCertConfigMap": {
                                "type": "string",
                                "description": "Trusted client ca cert config map.",
                                "default": "client-ca"
                              }
                            }
                          }
                        }
                      },
                      "x-ms-identifiers": []
                    },
                    "listenerRef": {
                      "type": "array",
                      "description": "The array of listener Resources it supports.",
                      "items": {
                        "type": "string"
                      }
                    },
                    "provisioningState": {
                      "description": "The status of the last operation.",
                      "readOnly": true,
                      "type": "string",
                      "enum": [
                        "Succeeded",
                        "Failed",
                        "Canceled",
                        "Provisioning",
                        "Updating",
                        "Deleting",
                        "Accepted"
                      ],
                      "x-ms-enum": {
                        "name": "ProvisioningState",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Succeeded",
                            "value": "Succeeded",
                            "description": "Resource has been created."
                          },
                          {
                            "name": "Failed",
                            "value": "Failed",
                            "description": "Resource creation failed."
                          },
                          {
                            "name": "Canceled",
                            "value": "Canceled",
                            "description": "Resource creation was canceled."
                          },
                          {
                            "name": "Provisioning",
                            "value": "Provisioning",
                            "description": "Resource is getting provisioned."
                          },
                          {
                            "name": "Updating",
                            "value": "Updating",
                            "description": "Resource is Updating."
                          },
                          {
                            "name": "Deleting",
                            "value": "Deleting",
                            "description": "Resource is Deleting."
                          },
                          {
                            "name": "Accepted",
                            "value": "Accepted",
                            "description": "Resource has been Accepted."
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "authenticationMethods",
                    "listenerRef"
                  ]
                },
                "extendedLocation": {
                  "description": "Extended Location",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ],
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The name of the extended location."
                    },
                    "type": {
                      "description": "Type of ExtendedLocation.",
                      "type": "string",
                      "enum": [
                        "CustomLocation"
                      ],
                      "x-ms-enum": {
                        "name": "ExtendedLocationType",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "CustomLocation",
                            "value": "CustomLocation",
                            "description": "CustomLocation type"
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "name",
                    "type"
                  ]
                }
              },
              "required": [
                "extendedLocation"
              ]
            },
            "headers": {
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "BrokerAuthentication_Update",
        "tags": [
          "BrokerAuthentication"
        ],
        "description": "Update a BrokerAuthenticationResource",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group. The name is case insensitive.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "x-ms-parameter-location": "method"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "brokerName",
            "in": "path",
            "description": "Name of MQ broker resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "authenticationName",
            "in": "path",
            "description": "Name of MQ broker/authentication resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "properties",
            "in": "body",
            "description": "The resource properties to be updated.",
            "required": true,
            "schema": {
              "type": "object",
              "description": "The type used for update operations of the BrokerAuthenticationResource.",
              "properties": {
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "authenticationMethods": {
                      "type": "array",
                      "description": "The list of authentication methods supported by the Authentication Resource. For each array element, NOTE - Enum only authenticator type supported.",
                      "items": {
                        "type": "object",
                        "description": "Collection of different CrdAuthenticator methods of Broker Resource. NOTE Enum - Only one method is supported for each entry.",
                        "properties": {
                          "custom": {
                            "description": "Custom Authentication Method.",
                            "type": "object",
                            "properties": {
                              "auth": {
                                "description": "Custom Broker Authentication Method.",
                                "type": "object",
                                "properties": {
                                  "x509": {
                                    "description": "X509 Custom Auth type details.",
                                    "type": "object",
                                    "properties": {
                                      "keyVault": {
                                        "description": "Keyvault X509 secret properties.",
                                        "type": "object",
                                        "properties": {
                                          "vault": {
                                            "description": "KeyVault properties.",
                                            "type": "object",
                                            "properties": {
                                              "credentials": {
                                                "description": "KeyVault credentials.",
                                                "type": "object",
                                                "properties": {
                                                  "servicePrincipalLocalSecretName": {
                                                    "type": "string",
                                                    "description": "KeyVault service principal local secret name."
                                                  }
                                                },
                                                "required": [
                                                  "servicePrincipalLocalSecretName"
                                                ]
                                              },
                                              "directoryId": {
                                                "type": "string",
                                                "description": "KeyVault directoryId."
                                              },
                                              "name": {
                                                "type": "string",
                                                "description": "KeyVault name."
                                              }
                                            },
                                            "required": [
                                              "credentials",
                                              "directoryId",
                                              "name"
                                            ]
                                          },
                                          "vaultCaChainSecret": {
                                            "description": "KeyVault CA chain secret details.",
                                            "type": "object",
                                            "properties": {
                                              "name": {
                                                "type": "string",
                                                "description": "KeyVault secret name."
                                              },
                                              "version": {
                                                "type": "string",
                                                "description": "KeyVault secret version."
                                              }
                                            },
                                            "required": [
                                              "name"
                                            ]
                                          },
                                          "vaultCert": {
                                            "description": "KeyVault Cert secret details.",
                                            "type": "object",
                                            "properties": {
                                              "name": {
                                                "type": "string",
                                                "description": "KeyVault secret name."
                                              },
                                              "version": {
                                                "type": "string",
                                                "description": "KeyVault secret version."
                                              }
                                            },
                                            "required": [
                                              "name"
                                            ]
                                          }
                                        },
                                        "required": [
                                          "vault",
                                          "vaultCert"
                                        ]
                                      },
                                      "secretName": {
                                        "type": "string",
                                        "description": "Secret where cert details are stored."
                                      }
                                    }
                                  }
                                },
                                "required": [
                                  "x509"
                                ]
                              },
                              "caCertConfigMap": {
                                "type": "string",
                                "description": "CA cert config map to use."
                              },
                              "endpoint": {
                                "type": "string",
                                "description": "Endpoint to connect to."
                              },
                              "headers": {
                                "type": "object",
                                "description": "Configuration Headers to use.",
                                "additionalProperties": {
                                  "type": "string"
                                }
                              }
                            },
                            "required": [
                              "endpoint"
                            ]
                          },
                          "sat": {
                            "description": "Service Account Token Method.",
                            "type": "object",
                            "properties": {
                              "audiences": {
                                "type": "array",
                                "description": "List of allowed audience.",
                                "items": {
                                  "type": "string"
                                }
                              }
                            },
                            "required": [
                              "audiences"
                            ]
                          },
                          "svid": {
                            "description": "Service Account Token Method.",
                            "type": "object",
                            "properties": {
                              "agentSocketPath": {
                                "type": "string",
                                "description": "Mounted socket path for spiffe agent."
                              },
                              "identityMaxRetry": {
                                "type": "integer",
                                "format": "int64",
                                "description": "Maximum number of re-tries to fetch identity.",
                                "default": 3,
                                "minimum": 0,
                                "maximum": 4294967295
                              },
                              "identityWaitRetryMs": {
                                "type": "integer",
                                "format": "int64",
                                "description": "Maximum time to wait before fetching identity again.",
                                "default": 5000,
                                "minimum": 0,
                                "maximum": 9223372036854000000
                              }
                            },
                            "required": [
                              "agentSocketPath"
                            ]
                          },
                          "usernamePassword": {
                            "description": "UsernamePassword Method.",
                            "type": "object",
                            "properties": {
                              "keyVault": {
                                "description": "Keyvault username password secret properties.",
                                "type": "object",
                                "properties": {
                                  "vault": {
                                    "description": "KeyVault properties.",
                                    "type": "object",
                                    "properties": {
                                      "credentials": {
                                        "description": "KeyVault credentials.",
                                        "type": "object",
                                        "properties": {
                                          "servicePrincipalLocalSecretName": {
                                            "type": "string",
                                            "description": "KeyVault service principal local secret name."
                                          }
                                        },
                                        "required": [
                                          "servicePrincipalLocalSecretName"
                                        ]
                                      },
                                      "directoryId": {
                                        "type": "string",
                                        "description": "KeyVault directoryId."
                                      },
                                      "name": {
                                        "type": "string",
                                        "description": "KeyVault name."
                                      }
                                    },
                                    "required": [
                                      "credentials",
                                      "directoryId",
                                      "name"
                                    ]
                                  },
                                  "vaultSecret": {
                                    "description": "KeyVault secret details.",
                                    "type": "object",
                                    "properties": {
                                      "name": {
                                        "type": "string",
                                        "description": "KeyVault secret name."
                                      },
                                      "version": {
                                        "type": "string",
                                        "description": "KeyVault secret version."
                                      }
                                    },
                                    "required": [
                                      "name"
                                    ]
                                  }
                                },
                                "required": [
                                  "vault",
                                  "vaultSecret"
                                ]
                              },
                              "secretName": {
                                "type": "string",
                                "description": "Secret where username and password are stored."
                              }
                            }
                          },
                          "x509": {
                            "description": "X509 Method.",
                            "type": "object",
                            "properties": {
                              "attributes": {
                                "description": "K8S Secret name to mount for username and password.",
                                "type": "object",
                                "properties": {
                                  "keyVault": {
                                    "description": "Keyvault x509 attributes secret properties.",
                                    "type": "object",
                                    "properties": {
                                      "vault": {
                                        "description": "KeyVault properties.",
                                        "type": "object",
                                        "properties": {
                                          "credentials": {
                                            "description": "KeyVault credentials.",
                                            "type": "object",
                                            "properties": {
                                              "servicePrincipalLocalSecretName": {
                                                "type": "string",
                                                "description": "KeyVault service principal local secret name."
                                              }
                                            },
                                            "required": [
                                              "servicePrincipalLocalSecretName"
                                            ]
                                          },
                                          "directoryId": {
                                            "type": "string",
                                            "description": "KeyVault directoryId."
                                          },
                                          "name": {
                                            "type": "string",
                                            "description": "KeyVault name."
                                          }
                                        },
                                        "required": [
                                          "credentials",
                                          "directoryId",
                                          "name"
                                        ]
                                      },
                                      "vaultSecret": {
                                        "description": "KeyVault secret details.",
                                        "type": "object",
                                        "properties": {
                                          "name": {
                                            "type": "string",
                                            "description": "KeyVault secret name."
                                          },
                                          "version": {
                                            "type": "string",
                                            "description": "KeyVault secret version."
                                          }
                                        },
                                        "required": [
                                          "name"
                                        ]
                                      }
                                    },
                                    "required": [
                                      "vault",
                                      "vaultSecret"
                                    ]
                                  },
                                  "secretName": {
                                    "type": "string",
                                    "description": "Secret where x509 attributes are stored."
                                  }
                                }
                              },
                              "trustedClientCaCertConfigMap": {
                                "type": "string",
                                "description": "Trusted client ca cert config map.",
                                "default": "client-ca"
                              }
                            }
                          }
                        }
                      },
                      "x-ms-identifiers": []
                    },
                    "listenerRef": {
                      "type": "array",
                      "description": "The array of listener Resources it supports.",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "type": "object",
              "description": "MQ broker/authentication resource",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "description": "The name of the resource",
                  "readOnly": true
                },
                "type": {
                  "type": "string",
                  "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                  "readOnly": true
                },
                "systemData": {
                  "type": "object",
                  "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                  "readOnly": true,
                  "properties": {
                    "createdBy": {
                      "type": "string",
                      "description": "The identity that created the resource."
                    },
                    "createdByType": {
                      "type": "string",
                      "description": "The type of identity that created the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource creation (UTC)."
                    },
                    "lastModifiedBy": {
                      "type": "string",
                      "description": "The identity that last modified the resource."
                    },
                    "lastModifiedByType": {
                      "type": "string",
                      "description": "The type of identity that last modified the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "lastModifiedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource last modification (UTC)"
                    }
                  }
                },
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "x-ms-mutability": [
                    "read",
                    "create",
                    "update"
                  ]
                },
                "location": {
                  "type": "string",
                  "description": "The geo-location where the resource lives",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ]
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "authenticationMethods": {
                      "type": "array",
                      "description": "The list of authentication methods supported by the Authentication Resource. For each array element, NOTE - Enum only authenticator type supported.",
                      "items": {
                        "type": "object",
                        "description": "Collection of different CrdAuthenticator methods of Broker Resource. NOTE Enum - Only one method is supported for each entry.",
                        "properties": {
                          "custom": {
                            "description": "Custom Authentication Method.",
                            "type": "object",
                            "properties": {
                              "auth": {
                                "description": "Custom Broker Authentication Method.",
                                "type": "object",
                                "properties": {
                                  "x509": {
                                    "description": "X509 Custom Auth type details.",
                                    "type": "object",
                                    "properties": {
                                      "keyVault": {
                                        "description": "Keyvault X509 secret properties.",
                                        "type": "object",
                                        "properties": {
                                          "vault": {
                                            "description": "KeyVault properties.",
                                            "type": "object",
                                            "properties": {
                                              "credentials": {
                                                "description": "KeyVault credentials.",
                                                "type": "object",
                                                "properties": {
                                                  "servicePrincipalLocalSecretName": {
                                                    "type": "string",
                                                    "description": "KeyVault service principal local secret name."
                                                  }
                                                },
                                                "required": [
                                                  "servicePrincipalLocalSecretName"
                                                ]
                                              },
                                              "directoryId": {
                                                "type": "string",
                                                "description": "KeyVault directoryId."
                                              },
                                              "name": {
                                                "type": "string",
                                                "description": "KeyVault name."
                                              }
                                            },
                                            "required": [
                                              "credentials",
                                              "directoryId",
                                              "name"
                                            ]
                                          },
                                          "vaultCaChainSecret": {
                                            "description": "KeyVault CA chain secret details.",
                                            "type": "object",
                                            "properties": {
                                              "name": {
                                                "type": "string",
                                                "description": "KeyVault secret name."
                                              },
                                              "version": {
                                                "type": "string",
                                                "description": "KeyVault secret version."
                                              }
                                            },
                                            "required": [
                                              "name"
                                            ]
                                          },
                                          "vaultCert": {
                                            "description": "KeyVault Cert secret details.",
                                            "type": "object",
                                            "properties": {
                                              "name": {
                                                "type": "string",
                                                "description": "KeyVault secret name."
                                              },
                                              "version": {
                                                "type": "string",
                                                "description": "KeyVault secret version."
                                              }
                                            },
                                            "required": [
                                              "name"
                                            ]
                                          }
                                        },
                                        "required": [
                                          "vault",
                                          "vaultCert"
                                        ]
                                      },
                                      "secretName": {
                                        "type": "string",
                                        "description": "Secret where cert details are stored."
                                      }
                                    }
                                  }
                                },
                                "required": [
                                  "x509"
                                ]
                              },
                              "caCertConfigMap": {
                                "type": "string",
                                "description": "CA cert config map to use."
                              },
                              "endpoint": {
                                "type": "string",
                                "description": "Endpoint to connect to."
                              },
                              "headers": {
                                "type": "object",
                                "description": "Configuration Headers to use.",
                                "additionalProperties": {
                                  "type": "string"
                                }
                              }
                            },
                            "required": [
                              "endpoint"
                            ]
                          },
                          "sat": {
                            "description": "Service Account Token Method.",
                            "type": "object",
                            "properties": {
                              "audiences": {
                                "type": "array",
                                "description": "List of allowed audience.",
                                "items": {
                                  "type": "string"
                                }
                              }
                            },
                            "required": [
                              "audiences"
                            ]
                          },
                          "svid": {
                            "description": "Service Account Token Method.",
                            "type": "object",
                            "properties": {
                              "agentSocketPath": {
                                "type": "string",
                                "description": "Mounted socket path for spiffe agent."
                              },
                              "identityMaxRetry": {
                                "type": "integer",
                                "format": "int64",
                                "description": "Maximum number of re-tries to fetch identity.",
                                "default": 3,
                                "minimum": 0,
                                "maximum": 4294967295
                              },
                              "identityWaitRetryMs": {
                                "type": "integer",
                                "format": "int64",
                                "description": "Maximum time to wait before fetching identity again.",
                                "default": 5000,
                                "minimum": 0,
                                "maximum": 9223372036854000000
                              }
                            },
                            "required": [
                              "agentSocketPath"
                            ]
                          },
                          "usernamePassword": {
                            "description": "UsernamePassword Method.",
                            "type": "object",
                            "properties": {
                              "keyVault": {
                                "description": "Keyvault username password secret properties.",
                                "type": "object",
                                "properties": {
                                  "vault": {
                                    "description": "KeyVault properties.",
                                    "type": "object",
                                    "properties": {
                                      "credentials": {
                                        "description": "KeyVault credentials.",
                                        "type": "object",
                                        "properties": {
                                          "servicePrincipalLocalSecretName": {
                                            "type": "string",
                                            "description": "KeyVault service principal local secret name."
                                          }
                                        },
                                        "required": [
                                          "servicePrincipalLocalSecretName"
                                        ]
                                      },
                                      "directoryId": {
                                        "type": "string",
                                        "description": "KeyVault directoryId."
                                      },
                                      "name": {
                                        "type": "string",
                                        "description": "KeyVault name."
                                      }
                                    },
                                    "required": [
                                      "credentials",
                                      "directoryId",
                                      "name"
                                    ]
                                  },
                                  "vaultSecret": {
                                    "description": "KeyVault secret details.",
                                    "type": "object",
                                    "properties": {
                                      "name": {
                                        "type": "string",
                                        "description": "KeyVault secret name."
                                      },
                                      "version": {
                                        "type": "string",
                                        "description": "KeyVault secret version."
                                      }
                                    },
                                    "required": [
                                      "name"
                                    ]
                                  }
                                },
                                "required": [
                                  "vault",
                                  "vaultSecret"
                                ]
                              },
                              "secretName": {
                                "type": "string",
                                "description": "Secret where username and password are stored."
                              }
                            }
                          },
                          "x509": {
                            "description": "X509 Method.",
                            "type": "object",
                            "properties": {
                              "attributes": {
                                "description": "K8S Secret name to mount for username and password.",
                                "type": "object",
                                "properties": {
                                  "keyVault": {
                                    "description": "Keyvault x509 attributes secret properties.",
                                    "type": "object",
                                    "properties": {
                                      "vault": {
                                        "description": "KeyVault properties.",
                                        "type": "object",
                                        "properties": {
                                          "credentials": {
                                            "description": "KeyVault credentials.",
                                            "type": "object",
                                            "properties": {
                                              "servicePrincipalLocalSecretName": {
                                                "type": "string",
                                                "description": "KeyVault service principal local secret name."
                                              }
                                            },
                                            "required": [
                                              "servicePrincipalLocalSecretName"
                                            ]
                                          },
                                          "directoryId": {
                                            "type": "string",
                                            "description": "KeyVault directoryId."
                                          },
                                          "name": {
                                            "type": "string",
                                            "description": "KeyVault name."
                                          }
                                        },
                                        "required": [
                                          "credentials",
                                          "directoryId",
                                          "name"
                                        ]
                                      },
                                      "vaultSecret": {
                                        "description": "KeyVault secret details.",
                                        "type": "object",
                                        "properties": {
                                          "name": {
                                            "type": "string",
                                            "description": "KeyVault secret name."
                                          },
                                          "version": {
                                            "type": "string",
                                            "description": "KeyVault secret version."
                                          }
                                        },
                                        "required": [
                                          "name"
                                        ]
                                      }
                                    },
                                    "required": [
                                      "vault",
                                      "vaultSecret"
                                    ]
                                  },
                                  "secretName": {
                                    "type": "string",
                                    "description": "Secret where x509 attributes are stored."
                                  }
                                }
                              },
                              "trustedClientCaCertConfigMap": {
                                "type": "string",
                                "description": "Trusted client ca cert config map.",
                                "default": "client-ca"
                              }
                            }
                          }
                        }
                      },
                      "x-ms-identifiers": []
                    },
                    "listenerRef": {
                      "type": "array",
                      "description": "The array of listener Resources it supports.",
                      "items": {
                        "type": "string"
                      }
                    },
                    "provisioningState": {
                      "description": "The status of the last operation.",
                      "readOnly": true,
                      "type": "string",
                      "enum": [
                        "Succeeded",
                        "Failed",
                        "Canceled",
                        "Provisioning",
                        "Updating",
                        "Deleting",
                        "Accepted"
                      ],
                      "x-ms-enum": {
                        "name": "ProvisioningState",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Succeeded",
                            "value": "Succeeded",
                            "description": "Resource has been created."
                          },
                          {
                            "name": "Failed",
                            "value": "Failed",
                            "description": "Resource creation failed."
                          },
                          {
                            "name": "Canceled",
                            "value": "Canceled",
                            "description": "Resource creation was canceled."
                          },
                          {
                            "name": "Provisioning",
                            "value": "Provisioning",
                            "description": "Resource is getting provisioned."
                          },
                          {
                            "name": "Updating",
                            "value": "Updating",
                            "description": "Resource is Updating."
                          },
                          {
                            "name": "Deleting",
                            "value": "Deleting",
                            "description": "Resource is Deleting."
                          },
                          {
                            "name": "Accepted",
                            "value": "Accepted",
                            "description": "Resource has been Accepted."
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "authenticationMethods",
                    "listenerRef"
                  ]
                },
                "extendedLocation": {
                  "description": "Extended Location",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ],
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The name of the extended location."
                    },
                    "type": {
                      "description": "Type of ExtendedLocation.",
                      "type": "string",
                      "enum": [
                        "CustomLocation"
                      ],
                      "x-ms-enum": {
                        "name": "ExtendedLocationType",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "CustomLocation",
                            "value": "CustomLocation",
                            "description": "CustomLocation type"
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "name",
                    "type"
                  ]
                }
              },
              "required": [
                "extendedLocation"
              ]
            }
          }
        }
      },
      "delete": {
        "operationId": "BrokerAuthentication_Delete",
        "tags": [
          "BrokerAuthentication"
        ],
        "description": "Delete a BrokerAuthenticationResource",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group. The name is case insensitive.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "x-ms-parameter-location": "method"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "brokerName",
            "in": "path",
            "description": "Name of MQ broker resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "authenticationName",
            "in": "path",
            "description": "Name of MQ broker/authentication resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          }
        ],
        "responses": {
          "202": {
            "description": "Resource deletion accepted.",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              },
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "204": {
            "description": "Resource does not exist."
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTOperationsMQ/mq/{mqName}/broker/{brokerName}/authorization": {
      "get": {
        "operationId": "BrokerAuthorization_ListByBrokerResource",
        "tags": [
          "BrokerAuthorization"
        ],
        "description": "List BrokerAuthorizationResource resources by BrokerResource",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group. The name is case insensitive.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "x-ms-parameter-location": "method"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "brokerName",
            "in": "path",
            "description": "Name of MQ broker resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "type": "object",
              "description": "The response of a BrokerAuthorizationResource list operation.",
              "properties": {
                "value": {
                  "type": "array",
                  "description": "The BrokerAuthorizationResource items on this page",
                  "items": {
                    "type": "object",
                    "description": "MQ broker/authorization resource",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                        "readOnly": true
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the resource",
                        "readOnly": true
                      },
                      "type": {
                        "type": "string",
                        "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                        "readOnly": true
                      },
                      "systemData": {
                        "type": "object",
                        "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                        "readOnly": true,
                        "properties": {
                          "createdBy": {
                            "type": "string",
                            "description": "The identity that created the resource."
                          },
                          "createdByType": {
                            "type": "string",
                            "description": "The type of identity that created the resource.",
                            "enum": [
                              "User",
                              "Application",
                              "ManagedIdentity",
                              "Key"
                            ],
                            "x-ms-enum": {
                              "name": "createdByType",
                              "modelAsString": true
                            }
                          },
                          "createdAt": {
                            "type": "string",
                            "format": "date-time",
                            "description": "The timestamp of resource creation (UTC)."
                          },
                          "lastModifiedBy": {
                            "type": "string",
                            "description": "The identity that last modified the resource."
                          },
                          "lastModifiedByType": {
                            "type": "string",
                            "description": "The type of identity that last modified the resource.",
                            "enum": [
                              "User",
                              "Application",
                              "ManagedIdentity",
                              "Key"
                            ],
                            "x-ms-enum": {
                              "name": "createdByType",
                              "modelAsString": true
                            }
                          },
                          "lastModifiedAt": {
                            "type": "string",
                            "format": "date-time",
                            "description": "The timestamp of resource last modification (UTC)"
                          }
                        }
                      },
                      "tags": {
                        "type": "object",
                        "description": "Resource tags.",
                        "additionalProperties": {
                          "type": "string"
                        },
                        "x-ms-mutability": [
                          "read",
                          "create",
                          "update"
                        ]
                      },
                      "location": {
                        "type": "string",
                        "description": "The geo-location where the resource lives",
                        "x-ms-mutability": [
                          "read",
                          "create"
                        ]
                      },
                      "properties": {
                        "description": "The resource-specific properties for this resource.",
                        "x-ms-client-flatten": true,
                        "type": "object",
                        "properties": {
                          "authorizationPolicies": {
                            "description": "The list of authorization policies supported by the Authorization Resource.",
                            "type": "object",
                            "properties": {
                              "enableCache": {
                                "type": "boolean",
                                "description": "Enable caching of the authorization rules.",
                                "default": true
                              },
                              "rules": {
                                "type": "array",
                                "description": "Authorization Rules to be used. If no rule is set, but Authorization Resource is used that would mean DenyAll.",
                                "items": {
                                  "type": "object",
                                  "description": "BasicRules of AuthorizationConfig Polar rules are not supported",
                                  "properties": {
                                    "brokerResources": {
                                      "type": "array",
                                      "description": "This subfield defines the broker resources that the Basic Rule is applied on.",
                                      "items": {
                                        "type": "object",
                                        "description": "ResourceInfoDefinition properties of Basic Rule. This defines the objects that represent the actions or topics, such as - method.Connect, method.Publish, etc.",
                                        "properties": {
                                          "method": {
                                            "description": "The type of action that the clients can perform on the broker: Connect, Publish or Subscribe.",
                                            "type": "string",
                                            "enum": [
                                              "Connect",
                                              "Publish",
                                              "Subscribe"
                                            ],
                                            "x-ms-enum": {
                                              "name": "ResourceInfoDefinitionMethods",
                                              "modelAsString": true,
                                              "values": [
                                                {
                                                  "name": "Connect",
                                                  "value": "Connect",
                                                  "description": "Allowed Connecting to Broker"
                                                },
                                                {
                                                  "name": "Publish",
                                                  "value": "Publish",
                                                  "description": "Allowed Publishing to Broker"
                                                },
                                                {
                                                  "name": "Subscribe",
                                                  "value": "Subscribe",
                                                  "description": "Allowed Subscribing to Broker"
                                                }
                                              ]
                                            }
                                          },
                                          "topics": {
                                            "type": "array",
                                            "description": "A list of topics or topic patterns that match the topics that the clients can publish or subscribe to. This subfield is required if the method is Publish or Subscribe.",
                                            "items": {
                                              "type": "string"
                                            }
                                          }
                                        },
                                        "required": [
                                          "method"
                                        ]
                                      },
                                      "x-ms-identifiers": []
                                    },
                                    "principals": {
                                      "description": "This subfield defines the identities that represent the clients.",
                                      "type": "object",
                                      "properties": {
                                        "attributes": {
                                          "type": "array",
                                          "description": "A list of key-value pairs that match the attributes of the clients. The attributes are case-sensitive and must match the attributes provided by the clients during authentication.",
                                          "default": [],
                                          "items": {
                                            "type": "object",
                                            "additionalProperties": {
                                              "type": "string"
                                            }
                                          },
                                          "x-ms-identifiers": []
                                        },
                                        "clientids": {
                                          "type": "array",
                                          "description": "A list of client IDs that match the clients. The client IDs are case-sensitive and must match the client IDs provided by the clients during connection.",
                                          "items": {
                                            "type": "string"
                                          }
                                        },
                                        "usernames": {
                                          "type": "array",
                                          "description": "A list of usernames that match the clients. The usernames are case-sensitive and must match the usernames provided by the clients during authentication.",
                                          "items": {
                                            "type": "string"
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "required": [
                                    "brokerResources",
                                    "principals"
                                  ]
                                },
                                "x-ms-identifiers": []
                              }
                            }
                          },
                          "listenerRef": {
                            "type": "array",
                            "description": "The array of listener Resources it supports.",
                            "items": {
                              "type": "string"
                            }
                          },
                          "provisioningState": {
                            "description": "The status of the last operation.",
                            "readOnly": true,
                            "type": "string",
                            "enum": [
                              "Succeeded",
                              "Failed",
                              "Canceled",
                              "Provisioning",
                              "Updating",
                              "Deleting",
                              "Accepted"
                            ],
                            "x-ms-enum": {
                              "name": "ProvisioningState",
                              "modelAsString": true,
                              "values": [
                                {
                                  "name": "Succeeded",
                                  "value": "Succeeded",
                                  "description": "Resource has been created."
                                },
                                {
                                  "name": "Failed",
                                  "value": "Failed",
                                  "description": "Resource creation failed."
                                },
                                {
                                  "name": "Canceled",
                                  "value": "Canceled",
                                  "description": "Resource creation was canceled."
                                },
                                {
                                  "name": "Provisioning",
                                  "value": "Provisioning",
                                  "description": "Resource is getting provisioned."
                                },
                                {
                                  "name": "Updating",
                                  "value": "Updating",
                                  "description": "Resource is Updating."
                                },
                                {
                                  "name": "Deleting",
                                  "value": "Deleting",
                                  "description": "Resource is Deleting."
                                },
                                {
                                  "name": "Accepted",
                                  "value": "Accepted",
                                  "description": "Resource has been Accepted."
                                }
                              ]
                            }
                          }
                        },
                        "required": [
                          "authorizationPolicies",
                          "listenerRef"
                        ]
                      },
                      "extendedLocation": {
                        "description": "Extended Location",
                        "x-ms-mutability": [
                          "read",
                          "create"
                        ],
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "The name of the extended location."
                          },
                          "type": {
                            "description": "Type of ExtendedLocation.",
                            "type": "string",
                            "enum": [
                              "CustomLocation"
                            ],
                            "x-ms-enum": {
                              "name": "ExtendedLocationType",
                              "modelAsString": true,
                              "values": [
                                {
                                  "name": "CustomLocation",
                                  "value": "CustomLocation",
                                  "description": "CustomLocation type"
                                }
                              ]
                            }
                          }
                        },
                        "required": [
                          "name",
                          "type"
                        ]
                      }
                    },
                    "required": [
                      "extendedLocation"
                    ]
                  }
                },
                "nextLink": {
                  "type": "string",
                  "format": "uri",
                  "description": "The link to the next page of items"
                }
              },
              "required": [
                "value"
              ]
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTOperationsMQ/mq/{mqName}/broker/{brokerName}/authorization/{authorizationName}": {
      "get": {
        "operationId": "BrokerAuthorization_Get",
        "tags": [
          "BrokerAuthorization"
        ],
        "description": "Get a BrokerAuthorizationResource",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group. The name is case insensitive.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "x-ms-parameter-location": "method"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "brokerName",
            "in": "path",
            "description": "Name of MQ broker resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "authorizationName",
            "in": "path",
            "description": "Name of MQ broker/authorization resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "type": "object",
              "description": "MQ broker/authorization resource",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "description": "The name of the resource",
                  "readOnly": true
                },
                "type": {
                  "type": "string",
                  "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                  "readOnly": true
                },
                "systemData": {
                  "type": "object",
                  "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                  "readOnly": true,
                  "properties": {
                    "createdBy": {
                      "type": "string",
                      "description": "The identity that created the resource."
                    },
                    "createdByType": {
                      "type": "string",
                      "description": "The type of identity that created the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource creation (UTC)."
                    },
                    "lastModifiedBy": {
                      "type": "string",
                      "description": "The identity that last modified the resource."
                    },
                    "lastModifiedByType": {
                      "type": "string",
                      "description": "The type of identity that last modified the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "lastModifiedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource last modification (UTC)"
                    }
                  }
                },
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "x-ms-mutability": [
                    "read",
                    "create",
                    "update"
                  ]
                },
                "location": {
                  "type": "string",
                  "description": "The geo-location where the resource lives",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ]
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "authorizationPolicies": {
                      "description": "The list of authorization policies supported by the Authorization Resource.",
                      "type": "object",
                      "properties": {
                        "enableCache": {
                          "type": "boolean",
                          "description": "Enable caching of the authorization rules.",
                          "default": true
                        },
                        "rules": {
                          "type": "array",
                          "description": "Authorization Rules to be used. If no rule is set, but Authorization Resource is used that would mean DenyAll.",
                          "items": {
                            "type": "object",
                            "description": "BasicRules of AuthorizationConfig Polar rules are not supported",
                            "properties": {
                              "brokerResources": {
                                "type": "array",
                                "description": "This subfield defines the broker resources that the Basic Rule is applied on.",
                                "items": {
                                  "type": "object",
                                  "description": "ResourceInfoDefinition properties of Basic Rule. This defines the objects that represent the actions or topics, such as - method.Connect, method.Publish, etc.",
                                  "properties": {
                                    "method": {
                                      "description": "The type of action that the clients can perform on the broker: Connect, Publish or Subscribe.",
                                      "type": "string",
                                      "enum": [
                                        "Connect",
                                        "Publish",
                                        "Subscribe"
                                      ],
                                      "x-ms-enum": {
                                        "name": "ResourceInfoDefinitionMethods",
                                        "modelAsString": true,
                                        "values": [
                                          {
                                            "name": "Connect",
                                            "value": "Connect",
                                            "description": "Allowed Connecting to Broker"
                                          },
                                          {
                                            "name": "Publish",
                                            "value": "Publish",
                                            "description": "Allowed Publishing to Broker"
                                          },
                                          {
                                            "name": "Subscribe",
                                            "value": "Subscribe",
                                            "description": "Allowed Subscribing to Broker"
                                          }
                                        ]
                                      }
                                    },
                                    "topics": {
                                      "type": "array",
                                      "description": "A list of topics or topic patterns that match the topics that the clients can publish or subscribe to. This subfield is required if the method is Publish or Subscribe.",
                                      "items": {
                                        "type": "string"
                                      }
                                    }
                                  },
                                  "required": [
                                    "method"
                                  ]
                                },
                                "x-ms-identifiers": []
                              },
                              "principals": {
                                "description": "This subfield defines the identities that represent the clients.",
                                "type": "object",
                                "properties": {
                                  "attributes": {
                                    "type": "array",
                                    "description": "A list of key-value pairs that match the attributes of the clients. The attributes are case-sensitive and must match the attributes provided by the clients during authentication.",
                                    "default": [],
                                    "items": {
                                      "type": "object",
                                      "additionalProperties": {
                                        "type": "string"
                                      }
                                    },
                                    "x-ms-identifiers": []
                                  },
                                  "clientids": {
                                    "type": "array",
                                    "description": "A list of client IDs that match the clients. The client IDs are case-sensitive and must match the client IDs provided by the clients during connection.",
                                    "items": {
                                      "type": "string"
                                    }
                                  },
                                  "usernames": {
                                    "type": "array",
                                    "description": "A list of usernames that match the clients. The usernames are case-sensitive and must match the usernames provided by the clients during authentication.",
                                    "items": {
                                      "type": "string"
                                    }
                                  }
                                }
                              }
                            },
                            "required": [
                              "brokerResources",
                              "principals"
                            ]
                          },
                          "x-ms-identifiers": []
                        }
                      }
                    },
                    "listenerRef": {
                      "type": "array",
                      "description": "The array of listener Resources it supports.",
                      "items": {
                        "type": "string"
                      }
                    },
                    "provisioningState": {
                      "description": "The status of the last operation.",
                      "readOnly": true,
                      "type": "string",
                      "enum": [
                        "Succeeded",
                        "Failed",
                        "Canceled",
                        "Provisioning",
                        "Updating",
                        "Deleting",
                        "Accepted"
                      ],
                      "x-ms-enum": {
                        "name": "ProvisioningState",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Succeeded",
                            "value": "Succeeded",
                            "description": "Resource has been created."
                          },
                          {
                            "name": "Failed",
                            "value": "Failed",
                            "description": "Resource creation failed."
                          },
                          {
                            "name": "Canceled",
                            "value": "Canceled",
                            "description": "Resource creation was canceled."
                          },
                          {
                            "name": "Provisioning",
                            "value": "Provisioning",
                            "description": "Resource is getting provisioned."
                          },
                          {
                            "name": "Updating",
                            "value": "Updating",
                            "description": "Resource is Updating."
                          },
                          {
                            "name": "Deleting",
                            "value": "Deleting",
                            "description": "Resource is Deleting."
                          },
                          {
                            "name": "Accepted",
                            "value": "Accepted",
                            "description": "Resource has been Accepted."
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "authorizationPolicies",
                    "listenerRef"
                  ]
                },
                "extendedLocation": {
                  "description": "Extended Location",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ],
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The name of the extended location."
                    },
                    "type": {
                      "description": "Type of ExtendedLocation.",
                      "type": "string",
                      "enum": [
                        "CustomLocation"
                      ],
                      "x-ms-enum": {
                        "name": "ExtendedLocationType",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "CustomLocation",
                            "value": "CustomLocation",
                            "description": "CustomLocation type"
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "name",
                    "type"
                  ]
                }
              },
              "required": [
                "extendedLocation"
              ]
            }
          }
        }
      },
      "put": {
        "operationId": "BrokerAuthorization_CreateOrUpdate",
        "tags": [
          "BrokerAuthorization"
        ],
        "description": "Create a BrokerAuthorizationResource",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group. The name is case insensitive.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "x-ms-parameter-location": "method"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "brokerName",
            "in": "path",
            "description": "Name of MQ broker resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "authorizationName",
            "in": "path",
            "description": "Name of MQ broker/authorization resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "resource",
            "in": "body",
            "description": "Resource create parameters.",
            "required": true,
            "schema": {
              "type": "object",
              "description": "MQ broker/authorization resource",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "description": "The name of the resource",
                  "readOnly": true
                },
                "type": {
                  "type": "string",
                  "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                  "readOnly": true
                },
                "systemData": {
                  "type": "object",
                  "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                  "readOnly": true,
                  "properties": {
                    "createdBy": {
                      "type": "string",
                      "description": "The identity that created the resource."
                    },
                    "createdByType": {
                      "type": "string",
                      "description": "The type of identity that created the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource creation (UTC)."
                    },
                    "lastModifiedBy": {
                      "type": "string",
                      "description": "The identity that last modified the resource."
                    },
                    "lastModifiedByType": {
                      "type": "string",
                      "description": "The type of identity that last modified the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "lastModifiedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource last modification (UTC)"
                    }
                  }
                },
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "x-ms-mutability": [
                    "read",
                    "create",
                    "update"
                  ]
                },
                "location": {
                  "type": "string",
                  "description": "The geo-location where the resource lives",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ]
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "authorizationPolicies": {
                      "description": "The list of authorization policies supported by the Authorization Resource.",
                      "type": "object",
                      "properties": {
                        "enableCache": {
                          "type": "boolean",
                          "description": "Enable caching of the authorization rules.",
                          "default": true
                        },
                        "rules": {
                          "type": "array",
                          "description": "Authorization Rules to be used. If no rule is set, but Authorization Resource is used that would mean DenyAll.",
                          "items": {
                            "type": "object",
                            "description": "BasicRules of AuthorizationConfig Polar rules are not supported",
                            "properties": {
                              "brokerResources": {
                                "type": "array",
                                "description": "This subfield defines the broker resources that the Basic Rule is applied on.",
                                "items": {
                                  "type": "object",
                                  "description": "ResourceInfoDefinition properties of Basic Rule. This defines the objects that represent the actions or topics, such as - method.Connect, method.Publish, etc.",
                                  "properties": {
                                    "method": {
                                      "description": "The type of action that the clients can perform on the broker: Connect, Publish or Subscribe.",
                                      "type": "string",
                                      "enum": [
                                        "Connect",
                                        "Publish",
                                        "Subscribe"
                                      ],
                                      "x-ms-enum": {
                                        "name": "ResourceInfoDefinitionMethods",
                                        "modelAsString": true,
                                        "values": [
                                          {
                                            "name": "Connect",
                                            "value": "Connect",
                                            "description": "Allowed Connecting to Broker"
                                          },
                                          {
                                            "name": "Publish",
                                            "value": "Publish",
                                            "description": "Allowed Publishing to Broker"
                                          },
                                          {
                                            "name": "Subscribe",
                                            "value": "Subscribe",
                                            "description": "Allowed Subscribing to Broker"
                                          }
                                        ]
                                      }
                                    },
                                    "topics": {
                                      "type": "array",
                                      "description": "A list of topics or topic patterns that match the topics that the clients can publish or subscribe to. This subfield is required if the method is Publish or Subscribe.",
                                      "items": {
                                        "type": "string"
                                      }
                                    }
                                  },
                                  "required": [
                                    "method"
                                  ]
                                },
                                "x-ms-identifiers": []
                              },
                              "principals": {
                                "description": "This subfield defines the identities that represent the clients.",
                                "type": "object",
                                "properties": {
                                  "attributes": {
                                    "type": "array",
                                    "description": "A list of key-value pairs that match the attributes of the clients. The attributes are case-sensitive and must match the attributes provided by the clients during authentication.",
                                    "default": [],
                                    "items": {
                                      "type": "object",
                                      "additionalProperties": {
                                        "type": "string"
                                      }
                                    },
                                    "x-ms-identifiers": []
                                  },
                                  "clientids": {
                                    "type": "array",
                                    "description": "A list of client IDs that match the clients. The client IDs are case-sensitive and must match the client IDs provided by the clients during connection.",
                                    "items": {
                                      "type": "string"
                                    }
                                  },
                                  "usernames": {
                                    "type": "array",
                                    "description": "A list of usernames that match the clients. The usernames are case-sensitive and must match the usernames provided by the clients during authentication.",
                                    "items": {
                                      "type": "string"
                                    }
                                  }
                                }
                              }
                            },
                            "required": [
                              "brokerResources",
                              "principals"
                            ]
                          },
                          "x-ms-identifiers": []
                        }
                      }
                    },
                    "listenerRef": {
                      "type": "array",
                      "description": "The array of listener Resources it supports.",
                      "items": {
                        "type": "string"
                      }
                    },
                    "provisioningState": {
                      "description": "The status of the last operation.",
                      "readOnly": true,
                      "type": "string",
                      "enum": [
                        "Succeeded",
                        "Failed",
                        "Canceled",
                        "Provisioning",
                        "Updating",
                        "Deleting",
                        "Accepted"
                      ],
                      "x-ms-enum": {
                        "name": "ProvisioningState",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Succeeded",
                            "value": "Succeeded",
                            "description": "Resource has been created."
                          },
                          {
                            "name": "Failed",
                            "value": "Failed",
                            "description": "Resource creation failed."
                          },
                          {
                            "name": "Canceled",
                            "value": "Canceled",
                            "description": "Resource creation was canceled."
                          },
                          {
                            "name": "Provisioning",
                            "value": "Provisioning",
                            "description": "Resource is getting provisioned."
                          },
                          {
                            "name": "Updating",
                            "value": "Updating",
                            "description": "Resource is Updating."
                          },
                          {
                            "name": "Deleting",
                            "value": "Deleting",
                            "description": "Resource is Deleting."
                          },
                          {
                            "name": "Accepted",
                            "value": "Accepted",
                            "description": "Resource has been Accepted."
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "authorizationPolicies",
                    "listenerRef"
                  ]
                },
                "extendedLocation": {
                  "description": "Extended Location",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ],
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The name of the extended location."
                    },
                    "type": {
                      "description": "Type of ExtendedLocation.",
                      "type": "string",
                      "enum": [
                        "CustomLocation"
                      ],
                      "x-ms-enum": {
                        "name": "ExtendedLocationType",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "CustomLocation",
                            "value": "CustomLocation",
                            "description": "CustomLocation type"
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "name",
                    "type"
                  ]
                }
              },
              "required": [
                "extendedLocation"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resource 'BrokerAuthorizationResource' update operation succeeded",
            "schema": {
              "type": "object",
              "description": "MQ broker/authorization resource",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "description": "The name of the resource",
                  "readOnly": true
                },
                "type": {
                  "type": "string",
                  "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                  "readOnly": true
                },
                "systemData": {
                  "type": "object",
                  "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                  "readOnly": true,
                  "properties": {
                    "createdBy": {
                      "type": "string",
                      "description": "The identity that created the resource."
                    },
                    "createdByType": {
                      "type": "string",
                      "description": "The type of identity that created the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource creation (UTC)."
                    },
                    "lastModifiedBy": {
                      "type": "string",
                      "description": "The identity that last modified the resource."
                    },
                    "lastModifiedByType": {
                      "type": "string",
                      "description": "The type of identity that last modified the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "lastModifiedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource last modification (UTC)"
                    }
                  }
                },
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "x-ms-mutability": [
                    "read",
                    "create",
                    "update"
                  ]
                },
                "location": {
                  "type": "string",
                  "description": "The geo-location where the resource lives",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ]
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "authorizationPolicies": {
                      "description": "The list of authorization policies supported by the Authorization Resource.",
                      "type": "object",
                      "properties": {
                        "enableCache": {
                          "type": "boolean",
                          "description": "Enable caching of the authorization rules.",
                          "default": true
                        },
                        "rules": {
                          "type": "array",
                          "description": "Authorization Rules to be used. If no rule is set, but Authorization Resource is used that would mean DenyAll.",
                          "items": {
                            "type": "object",
                            "description": "BasicRules of AuthorizationConfig Polar rules are not supported",
                            "properties": {
                              "brokerResources": {
                                "type": "array",
                                "description": "This subfield defines the broker resources that the Basic Rule is applied on.",
                                "items": {
                                  "type": "object",
                                  "description": "ResourceInfoDefinition properties of Basic Rule. This defines the objects that represent the actions or topics, such as - method.Connect, method.Publish, etc.",
                                  "properties": {
                                    "method": {
                                      "description": "The type of action that the clients can perform on the broker: Connect, Publish or Subscribe.",
                                      "type": "string",
                                      "enum": [
                                        "Connect",
                                        "Publish",
                                        "Subscribe"
                                      ],
                                      "x-ms-enum": {
                                        "name": "ResourceInfoDefinitionMethods",
                                        "modelAsString": true,
                                        "values": [
                                          {
                                            "name": "Connect",
                                            "value": "Connect",
                                            "description": "Allowed Connecting to Broker"
                                          },
                                          {
                                            "name": "Publish",
                                            "value": "Publish",
                                            "description": "Allowed Publishing to Broker"
                                          },
                                          {
                                            "name": "Subscribe",
                                            "value": "Subscribe",
                                            "description": "Allowed Subscribing to Broker"
                                          }
                                        ]
                                      }
                                    },
                                    "topics": {
                                      "type": "array",
                                      "description": "A list of topics or topic patterns that match the topics that the clients can publish or subscribe to. This subfield is required if the method is Publish or Subscribe.",
                                      "items": {
                                        "type": "string"
                                      }
                                    }
                                  },
                                  "required": [
                                    "method"
                                  ]
                                },
                                "x-ms-identifiers": []
                              },
                              "principals": {
                                "description": "This subfield defines the identities that represent the clients.",
                                "type": "object",
                                "properties": {
                                  "attributes": {
                                    "type": "array",
                                    "description": "A list of key-value pairs that match the attributes of the clients. The attributes are case-sensitive and must match the attributes provided by the clients during authentication.",
                                    "default": [],
                                    "items": {
                                      "type": "object",
                                      "additionalProperties": {
                                        "type": "string"
                                      }
                                    },
                                    "x-ms-identifiers": []
                                  },
                                  "clientids": {
                                    "type": "array",
                                    "description": "A list of client IDs that match the clients. The client IDs are case-sensitive and must match the client IDs provided by the clients during connection.",
                                    "items": {
                                      "type": "string"
                                    }
                                  },
                                  "usernames": {
                                    "type": "array",
                                    "description": "A list of usernames that match the clients. The usernames are case-sensitive and must match the usernames provided by the clients during authentication.",
                                    "items": {
                                      "type": "string"
                                    }
                                  }
                                }
                              }
                            },
                            "required": [
                              "brokerResources",
                              "principals"
                            ]
                          },
                          "x-ms-identifiers": []
                        }
                      }
                    },
                    "listenerRef": {
                      "type": "array",
                      "description": "The array of listener Resources it supports.",
                      "items": {
                        "type": "string"
                      }
                    },
                    "provisioningState": {
                      "description": "The status of the last operation.",
                      "readOnly": true,
                      "type": "string",
                      "enum": [
                        "Succeeded",
                        "Failed",
                        "Canceled",
                        "Provisioning",
                        "Updating",
                        "Deleting",
                        "Accepted"
                      ],
                      "x-ms-enum": {
                        "name": "ProvisioningState",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Succeeded",
                            "value": "Succeeded",
                            "description": "Resource has been created."
                          },
                          {
                            "name": "Failed",
                            "value": "Failed",
                            "description": "Resource creation failed."
                          },
                          {
                            "name": "Canceled",
                            "value": "Canceled",
                            "description": "Resource creation was canceled."
                          },
                          {
                            "name": "Provisioning",
                            "value": "Provisioning",
                            "description": "Resource is getting provisioned."
                          },
                          {
                            "name": "Updating",
                            "value": "Updating",
                            "description": "Resource is Updating."
                          },
                          {
                            "name": "Deleting",
                            "value": "Deleting",
                            "description": "Resource is Deleting."
                          },
                          {
                            "name": "Accepted",
                            "value": "Accepted",
                            "description": "Resource has been Accepted."
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "authorizationPolicies",
                    "listenerRef"
                  ]
                },
                "extendedLocation": {
                  "description": "Extended Location",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ],
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The name of the extended location."
                    },
                    "type": {
                      "description": "Type of ExtendedLocation.",
                      "type": "string",
                      "enum": [
                        "CustomLocation"
                      ],
                      "x-ms-enum": {
                        "name": "ExtendedLocationType",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "CustomLocation",
                            "value": "CustomLocation",
                            "description": "CustomLocation type"
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "name",
                    "type"
                  ]
                }
              },
              "required": [
                "extendedLocation"
              ]
            }
          },
          "201": {
            "description": "Resource 'BrokerAuthorizationResource' create operation succeeded",
            "schema": {
              "type": "object",
              "description": "MQ broker/authorization resource",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "description": "The name of the resource",
                  "readOnly": true
                },
                "type": {
                  "type": "string",
                  "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                  "readOnly": true
                },
                "systemData": {
                  "type": "object",
                  "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                  "readOnly": true,
                  "properties": {
                    "createdBy": {
                      "type": "string",
                      "description": "The identity that created the resource."
                    },
                    "createdByType": {
                      "type": "string",
                      "description": "The type of identity that created the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource creation (UTC)."
                    },
                    "lastModifiedBy": {
                      "type": "string",
                      "description": "The identity that last modified the resource."
                    },
                    "lastModifiedByType": {
                      "type": "string",
                      "description": "The type of identity that last modified the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "lastModifiedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource last modification (UTC)"
                    }
                  }
                },
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "x-ms-mutability": [
                    "read",
                    "create",
                    "update"
                  ]
                },
                "location": {
                  "type": "string",
                  "description": "The geo-location where the resource lives",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ]
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "authorizationPolicies": {
                      "description": "The list of authorization policies supported by the Authorization Resource.",
                      "type": "object",
                      "properties": {
                        "enableCache": {
                          "type": "boolean",
                          "description": "Enable caching of the authorization rules.",
                          "default": true
                        },
                        "rules": {
                          "type": "array",
                          "description": "Authorization Rules to be used. If no rule is set, but Authorization Resource is used that would mean DenyAll.",
                          "items": {
                            "type": "object",
                            "description": "BasicRules of AuthorizationConfig Polar rules are not supported",
                            "properties": {
                              "brokerResources": {
                                "type": "array",
                                "description": "This subfield defines the broker resources that the Basic Rule is applied on.",
                                "items": {
                                  "type": "object",
                                  "description": "ResourceInfoDefinition properties of Basic Rule. This defines the objects that represent the actions or topics, such as - method.Connect, method.Publish, etc.",
                                  "properties": {
                                    "method": {
                                      "description": "The type of action that the clients can perform on the broker: Connect, Publish or Subscribe.",
                                      "type": "string",
                                      "enum": [
                                        "Connect",
                                        "Publish",
                                        "Subscribe"
                                      ],
                                      "x-ms-enum": {
                                        "name": "ResourceInfoDefinitionMethods",
                                        "modelAsString": true,
                                        "values": [
                                          {
                                            "name": "Connect",
                                            "value": "Connect",
                                            "description": "Allowed Connecting to Broker"
                                          },
                                          {
                                            "name": "Publish",
                                            "value": "Publish",
                                            "description": "Allowed Publishing to Broker"
                                          },
                                          {
                                            "name": "Subscribe",
                                            "value": "Subscribe",
                                            "description": "Allowed Subscribing to Broker"
                                          }
                                        ]
                                      }
                                    },
                                    "topics": {
                                      "type": "array",
                                      "description": "A list of topics or topic patterns that match the topics that the clients can publish or subscribe to. This subfield is required if the method is Publish or Subscribe.",
                                      "items": {
                                        "type": "string"
                                      }
                                    }
                                  },
                                  "required": [
                                    "method"
                                  ]
                                },
                                "x-ms-identifiers": []
                              },
                              "principals": {
                                "description": "This subfield defines the identities that represent the clients.",
                                "type": "object",
                                "properties": {
                                  "attributes": {
                                    "type": "array",
                                    "description": "A list of key-value pairs that match the attributes of the clients. The attributes are case-sensitive and must match the attributes provided by the clients during authentication.",
                                    "default": [],
                                    "items": {
                                      "type": "object",
                                      "additionalProperties": {
                                        "type": "string"
                                      }
                                    },
                                    "x-ms-identifiers": []
                                  },
                                  "clientids": {
                                    "type": "array",
                                    "description": "A list of client IDs that match the clients. The client IDs are case-sensitive and must match the client IDs provided by the clients during connection.",
                                    "items": {
                                      "type": "string"
                                    }
                                  },
                                  "usernames": {
                                    "type": "array",
                                    "description": "A list of usernames that match the clients. The usernames are case-sensitive and must match the usernames provided by the clients during authentication.",
                                    "items": {
                                      "type": "string"
                                    }
                                  }
                                }
                              }
                            },
                            "required": [
                              "brokerResources",
                              "principals"
                            ]
                          },
                          "x-ms-identifiers": []
                        }
                      }
                    },
                    "listenerRef": {
                      "type": "array",
                      "description": "The array of listener Resources it supports.",
                      "items": {
                        "type": "string"
                      }
                    },
                    "provisioningState": {
                      "description": "The status of the last operation.",
                      "readOnly": true,
                      "type": "string",
                      "enum": [
                        "Succeeded",
                        "Failed",
                        "Canceled",
                        "Provisioning",
                        "Updating",
                        "Deleting",
                        "Accepted"
                      ],
                      "x-ms-enum": {
                        "name": "ProvisioningState",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Succeeded",
                            "value": "Succeeded",
                            "description": "Resource has been created."
                          },
                          {
                            "name": "Failed",
                            "value": "Failed",
                            "description": "Resource creation failed."
                          },
                          {
                            "name": "Canceled",
                            "value": "Canceled",
                            "description": "Resource creation was canceled."
                          },
                          {
                            "name": "Provisioning",
                            "value": "Provisioning",
                            "description": "Resource is getting provisioned."
                          },
                          {
                            "name": "Updating",
                            "value": "Updating",
                            "description": "Resource is Updating."
                          },
                          {
                            "name": "Deleting",
                            "value": "Deleting",
                            "description": "Resource is Deleting."
                          },
                          {
                            "name": "Accepted",
                            "value": "Accepted",
                            "description": "Resource has been Accepted."
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "authorizationPolicies",
                    "listenerRef"
                  ]
                },
                "extendedLocation": {
                  "description": "Extended Location",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ],
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The name of the extended location."
                    },
                    "type": {
                      "description": "Type of ExtendedLocation.",
                      "type": "string",
                      "enum": [
                        "CustomLocation"
                      ],
                      "x-ms-enum": {
                        "name": "ExtendedLocationType",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "CustomLocation",
                            "value": "CustomLocation",
                            "description": "CustomLocation type"
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "name",
                    "type"
                  ]
                }
              },
              "required": [
                "extendedLocation"
              ]
            },
            "headers": {
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "BrokerAuthorization_Update",
        "tags": [
          "BrokerAuthorization"
        ],
        "description": "Update a BrokerAuthorizationResource",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group. The name is case insensitive.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "x-ms-parameter-location": "method"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "brokerName",
            "in": "path",
            "description": "Name of MQ broker resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "authorizationName",
            "in": "path",
            "description": "Name of MQ broker/authorization resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "properties",
            "in": "body",
            "description": "The resource properties to be updated.",
            "required": true,
            "schema": {
              "type": "object",
              "description": "The type used for update operations of the BrokerAuthorizationResource.",
              "properties": {
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "authorizationPolicies": {
                      "description": "The list of authorization policies supported by the Authorization Resource.",
                      "type": "object",
                      "properties": {
                        "enableCache": {
                          "type": "boolean",
                          "description": "Enable caching of the authorization rules.",
                          "default": true
                        },
                        "rules": {
                          "type": "array",
                          "description": "Authorization Rules to be used. If no rule is set, but Authorization Resource is used that would mean DenyAll.",
                          "items": {
                            "type": "object",
                            "description": "BasicRules of AuthorizationConfig Polar rules are not supported",
                            "properties": {
                              "brokerResources": {
                                "type": "array",
                                "description": "This subfield defines the broker resources that the Basic Rule is applied on.",
                                "items": {
                                  "type": "object",
                                  "description": "ResourceInfoDefinition properties of Basic Rule. This defines the objects that represent the actions or topics, such as - method.Connect, method.Publish, etc.",
                                  "properties": {
                                    "method": {
                                      "description": "The type of action that the clients can perform on the broker: Connect, Publish or Subscribe.",
                                      "type": "string",
                                      "enum": [
                                        "Connect",
                                        "Publish",
                                        "Subscribe"
                                      ],
                                      "x-ms-enum": {
                                        "name": "ResourceInfoDefinitionMethods",
                                        "modelAsString": true,
                                        "values": [
                                          {
                                            "name": "Connect",
                                            "value": "Connect",
                                            "description": "Allowed Connecting to Broker"
                                          },
                                          {
                                            "name": "Publish",
                                            "value": "Publish",
                                            "description": "Allowed Publishing to Broker"
                                          },
                                          {
                                            "name": "Subscribe",
                                            "value": "Subscribe",
                                            "description": "Allowed Subscribing to Broker"
                                          }
                                        ]
                                      }
                                    },
                                    "topics": {
                                      "type": "array",
                                      "description": "A list of topics or topic patterns that match the topics that the clients can publish or subscribe to. This subfield is required if the method is Publish or Subscribe.",
                                      "items": {
                                        "type": "string"
                                      }
                                    }
                                  },
                                  "required": [
                                    "method"
                                  ]
                                },
                                "x-ms-identifiers": []
                              },
                              "principals": {
                                "description": "This subfield defines the identities that represent the clients.",
                                "type": "object",
                                "properties": {
                                  "attributes": {
                                    "type": "array",
                                    "description": "A list of key-value pairs that match the attributes of the clients. The attributes are case-sensitive and must match the attributes provided by the clients during authentication.",
                                    "default": [],
                                    "items": {
                                      "type": "object",
                                      "additionalProperties": {
                                        "type": "string"
                                      }
                                    },
                                    "x-ms-identifiers": []
                                  },
                                  "clientids": {
                                    "type": "array",
                                    "description": "A list of client IDs that match the clients. The client IDs are case-sensitive and must match the client IDs provided by the clients during connection.",
                                    "items": {
                                      "type": "string"
                                    }
                                  },
                                  "usernames": {
                                    "type": "array",
                                    "description": "A list of usernames that match the clients. The usernames are case-sensitive and must match the usernames provided by the clients during authentication.",
                                    "items": {
                                      "type": "string"
                                    }
                                  }
                                }
                              }
                            },
                            "required": [
                              "brokerResources",
                              "principals"
                            ]
                          },
                          "x-ms-identifiers": []
                        }
                      }
                    },
                    "listenerRef": {
                      "type": "array",
                      "description": "The array of listener Resources it supports.",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "type": "object",
              "description": "MQ broker/authorization resource",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "description": "The name of the resource",
                  "readOnly": true
                },
                "type": {
                  "type": "string",
                  "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                  "readOnly": true
                },
                "systemData": {
                  "type": "object",
                  "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                  "readOnly": true,
                  "properties": {
                    "createdBy": {
                      "type": "string",
                      "description": "The identity that created the resource."
                    },
                    "createdByType": {
                      "type": "string",
                      "description": "The type of identity that created the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource creation (UTC)."
                    },
                    "lastModifiedBy": {
                      "type": "string",
                      "description": "The identity that last modified the resource."
                    },
                    "lastModifiedByType": {
                      "type": "string",
                      "description": "The type of identity that last modified the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "lastModifiedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource last modification (UTC)"
                    }
                  }
                },
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "x-ms-mutability": [
                    "read",
                    "create",
                    "update"
                  ]
                },
                "location": {
                  "type": "string",
                  "description": "The geo-location where the resource lives",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ]
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "authorizationPolicies": {
                      "description": "The list of authorization policies supported by the Authorization Resource.",
                      "type": "object",
                      "properties": {
                        "enableCache": {
                          "type": "boolean",
                          "description": "Enable caching of the authorization rules.",
                          "default": true
                        },
                        "rules": {
                          "type": "array",
                          "description": "Authorization Rules to be used. If no rule is set, but Authorization Resource is used that would mean DenyAll.",
                          "items": {
                            "type": "object",
                            "description": "BasicRules of AuthorizationConfig Polar rules are not supported",
                            "properties": {
                              "brokerResources": {
                                "type": "array",
                                "description": "This subfield defines the broker resources that the Basic Rule is applied on.",
                                "items": {
                                  "type": "object",
                                  "description": "ResourceInfoDefinition properties of Basic Rule. This defines the objects that represent the actions or topics, such as - method.Connect, method.Publish, etc.",
                                  "properties": {
                                    "method": {
                                      "description": "The type of action that the clients can perform on the broker: Connect, Publish or Subscribe.",
                                      "type": "string",
                                      "enum": [
                                        "Connect",
                                        "Publish",
                                        "Subscribe"
                                      ],
                                      "x-ms-enum": {
                                        "name": "ResourceInfoDefinitionMethods",
                                        "modelAsString": true,
                                        "values": [
                                          {
                                            "name": "Connect",
                                            "value": "Connect",
                                            "description": "Allowed Connecting to Broker"
                                          },
                                          {
                                            "name": "Publish",
                                            "value": "Publish",
                                            "description": "Allowed Publishing to Broker"
                                          },
                                          {
                                            "name": "Subscribe",
                                            "value": "Subscribe",
                                            "description": "Allowed Subscribing to Broker"
                                          }
                                        ]
                                      }
                                    },
                                    "topics": {
                                      "type": "array",
                                      "description": "A list of topics or topic patterns that match the topics that the clients can publish or subscribe to. This subfield is required if the method is Publish or Subscribe.",
                                      "items": {
                                        "type": "string"
                                      }
                                    }
                                  },
                                  "required": [
                                    "method"
                                  ]
                                },
                                "x-ms-identifiers": []
                              },
                              "principals": {
                                "description": "This subfield defines the identities that represent the clients.",
                                "type": "object",
                                "properties": {
                                  "attributes": {
                                    "type": "array",
                                    "description": "A list of key-value pairs that match the attributes of the clients. The attributes are case-sensitive and must match the attributes provided by the clients during authentication.",
                                    "default": [],
                                    "items": {
                                      "type": "object",
                                      "additionalProperties": {
                                        "type": "string"
                                      }
                                    },
                                    "x-ms-identifiers": []
                                  },
                                  "clientids": {
                                    "type": "array",
                                    "description": "A list of client IDs that match the clients. The client IDs are case-sensitive and must match the client IDs provided by the clients during connection.",
                                    "items": {
                                      "type": "string"
                                    }
                                  },
                                  "usernames": {
                                    "type": "array",
                                    "description": "A list of usernames that match the clients. The usernames are case-sensitive and must match the usernames provided by the clients during authentication.",
                                    "items": {
                                      "type": "string"
                                    }
                                  }
                                }
                              }
                            },
                            "required": [
                              "brokerResources",
                              "principals"
                            ]
                          },
                          "x-ms-identifiers": []
                        }
                      }
                    },
                    "listenerRef": {
                      "type": "array",
                      "description": "The array of listener Resources it supports.",
                      "items": {
                        "type": "string"
                      }
                    },
                    "provisioningState": {
                      "description": "The status of the last operation.",
                      "readOnly": true,
                      "type": "string",
                      "enum": [
                        "Succeeded",
                        "Failed",
                        "Canceled",
                        "Provisioning",
                        "Updating",
                        "Deleting",
                        "Accepted"
                      ],
                      "x-ms-enum": {
                        "name": "ProvisioningState",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Succeeded",
                            "value": "Succeeded",
                            "description": "Resource has been created."
                          },
                          {
                            "name": "Failed",
                            "value": "Failed",
                            "description": "Resource creation failed."
                          },
                          {
                            "name": "Canceled",
                            "value": "Canceled",
                            "description": "Resource creation was canceled."
                          },
                          {
                            "name": "Provisioning",
                            "value": "Provisioning",
                            "description": "Resource is getting provisioned."
                          },
                          {
                            "name": "Updating",
                            "value": "Updating",
                            "description": "Resource is Updating."
                          },
                          {
                            "name": "Deleting",
                            "value": "Deleting",
                            "description": "Resource is Deleting."
                          },
                          {
                            "name": "Accepted",
                            "value": "Accepted",
                            "description": "Resource has been Accepted."
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "authorizationPolicies",
                    "listenerRef"
                  ]
                },
                "extendedLocation": {
                  "description": "Extended Location",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ],
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The name of the extended location."
                    },
                    "type": {
                      "description": "Type of ExtendedLocation.",
                      "type": "string",
                      "enum": [
                        "CustomLocation"
                      ],
                      "x-ms-enum": {
                        "name": "ExtendedLocationType",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "CustomLocation",
                            "value": "CustomLocation",
                            "description": "CustomLocation type"
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "name",
                    "type"
                  ]
                }
              },
              "required": [
                "extendedLocation"
              ]
            }
          }
        }
      },
      "delete": {
        "operationId": "BrokerAuthorization_Delete",
        "tags": [
          "BrokerAuthorization"
        ],
        "description": "Delete a BrokerAuthorizationResource",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group. The name is case insensitive.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "x-ms-parameter-location": "method"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "brokerName",
            "in": "path",
            "description": "Name of MQ broker resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "authorizationName",
            "in": "path",
            "description": "Name of MQ broker/authorization resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          }
        ],
        "responses": {
          "202": {
            "description": "Resource deletion accepted.",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              },
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "204": {
            "description": "Resource does not exist."
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTOperationsMQ/mq/{mqName}/broker/{brokerName}/listener": {
      "get": {
        "operationId": "BrokerListener_ListByBrokerResource",
        "tags": [
          "BrokerListener"
        ],
        "description": "List BrokerListenerResource resources by BrokerResource",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group. The name is case insensitive.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "x-ms-parameter-location": "method"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "brokerName",
            "in": "path",
            "description": "Name of MQ broker resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "type": "object",
              "description": "The response of a BrokerListenerResource list operation.",
              "properties": {
                "value": {
                  "type": "array",
                  "description": "The BrokerListenerResource items on this page",
                  "items": {
                    "type": "object",
                    "description": "MQ broker/listener resource",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                        "readOnly": true
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the resource",
                        "readOnly": true
                      },
                      "type": {
                        "type": "string",
                        "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                        "readOnly": true
                      },
                      "systemData": {
                        "type": "object",
                        "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                        "readOnly": true,
                        "properties": {
                          "createdBy": {
                            "type": "string",
                            "description": "The identity that created the resource."
                          },
                          "createdByType": {
                            "type": "string",
                            "description": "The type of identity that created the resource.",
                            "enum": [
                              "User",
                              "Application",
                              "ManagedIdentity",
                              "Key"
                            ],
                            "x-ms-enum": {
                              "name": "createdByType",
                              "modelAsString": true
                            }
                          },
                          "createdAt": {
                            "type": "string",
                            "format": "date-time",
                            "description": "The timestamp of resource creation (UTC)."
                          },
                          "lastModifiedBy": {
                            "type": "string",
                            "description": "The identity that last modified the resource."
                          },
                          "lastModifiedByType": {
                            "type": "string",
                            "description": "The type of identity that last modified the resource.",
                            "enum": [
                              "User",
                              "Application",
                              "ManagedIdentity",
                              "Key"
                            ],
                            "x-ms-enum": {
                              "name": "createdByType",
                              "modelAsString": true
                            }
                          },
                          "lastModifiedAt": {
                            "type": "string",
                            "format": "date-time",
                            "description": "The timestamp of resource last modification (UTC)"
                          }
                        }
                      },
                      "tags": {
                        "type": "object",
                        "description": "Resource tags.",
                        "additionalProperties": {
                          "type": "string"
                        },
                        "x-ms-mutability": [
                          "read",
                          "create",
                          "update"
                        ]
                      },
                      "location": {
                        "type": "string",
                        "description": "The geo-location where the resource lives",
                        "x-ms-mutability": [
                          "read",
                          "create"
                        ]
                      },
                      "properties": {
                        "description": "The resource-specific properties for this resource.",
                        "x-ms-client-flatten": true,
                        "type": "object",
                        "properties": {
                          "authenticationEnabled": {
                            "type": "boolean",
                            "description": "The flag for enabling Authentication rules on Listener Port.",
                            "default": false
                          },
                          "authorizationEnabled": {
                            "type": "boolean",
                            "description": "The flag for enabling Authorization policies on Listener Port. false - AllowAll, true - Use Authorization resource rules if present.",
                            "default": false
                          },
                          "brokerRef": {
                            "type": "string",
                            "description": "The k8s cr/resource reference of mq/broker."
                          },
                          "nodePort": {
                            "type": "integer",
                            "format": "int32",
                            "description": "The node port to use on the Host node.",
                            "minimum": 0,
                            "maximum": 65535
                          },
                          "port": {
                            "type": "integer",
                            "format": "int32",
                            "description": "The port to start Listening for connections on.",
                            "minimum": 0,
                            "maximum": 65535
                          },
                          "serviceName": {
                            "type": "string",
                            "description": "The service name to expose Listener port on.",
                            "default": "aio-mq-dmqtt-frontend"
                          },
                          "serviceType": {
                            "type": "string",
                            "description": "The Kubernetes Service type to deploy for Listener.",
                            "default": "clusterIp",
                            "enum": [
                              "clusterIp",
                              "loadBalancer",
                              "nodePort"
                            ],
                            "x-ms-enum": {
                              "name": "ServiceType",
                              "modelAsString": true,
                              "values": [
                                {
                                  "name": "clusterIp",
                                  "value": "clusterIp",
                                  "description": "Cluster IP Service."
                                },
                                {
                                  "name": "loadBalancer",
                                  "value": "loadBalancer",
                                  "description": "Load Balancer Service."
                                },
                                {
                                  "name": "nodePort",
                                  "value": "nodePort",
                                  "description": "Node Port Service."
                                }
                              ]
                            }
                          },
                          "tls": {
                            "description": "Defines configuration of a TLS server certificate. NOTE Enum - Only one TLS Cert method is supported",
                            "type": "object",
                            "properties": {
                              "automatic": {
                                "description": "Option 1 - Automatic TLS server certificate management with cert-manager.",
                                "type": "object",
                                "properties": {
                                  "duration": {
                                    "type": "string",
                                    "description": "Lifetime of automatically-managed certificate.",
                                    "default": "720h"
                                  },
                                  "issuerRef": {
                                    "description": "cert-manager issuerRef.",
                                    "type": "object",
                                    "properties": {
                                      "group": {
                                        "type": "string",
                                        "description": "group of issuer.",
                                        "default": "cert-manager.io"
                                      },
                                      "kind": {
                                        "type": "string",
                                        "description": "kind of issuer (Issuer or ClusterIssuer)."
                                      },
                                      "name": {
                                        "type": "string",
                                        "description": "name of issuer."
                                      }
                                    },
                                    "required": [
                                      "group",
                                      "kind",
                                      "name"
                                    ]
                                  },
                                  "privateKey": {
                                    "description": "Cert Manager private key.",
                                    "type": "object",
                                    "properties": {
                                      "algorithm": {
                                        "type": "string",
                                        "description": "algorithm for private key.",
                                        "default": "ECDSA"
                                      },
                                      "rotationPolicy": {
                                        "type": "string",
                                        "description": "cert-manager rotationPolicy.",
                                        "default": "Always"
                                      },
                                      "size": {
                                        "type": "integer",
                                        "format": "int32",
                                        "description": "size of private key.",
                                        "default": 256,
                                        "minimum": 0,
                                        "maximum": 65535
                                      }
                                    },
                                    "required": [
                                      "algorithm",
                                      "rotationPolicy",
                                      "size"
                                    ]
                                  },
                                  "renewBefore": {
                                    "type": "string",
                                    "description": "When to begin renewing automatically-managed certificate.",
                                    "default": "240h"
                                  },
                                  "san": {
                                    "description": "Additional SANs to include in the certificate.",
                                    "type": "object",
                                    "properties": {
                                      "dns": {
                                        "type": "array",
                                        "description": "DNS SANs.",
                                        "default": [],
                                        "items": {
                                          "type": "string"
                                        }
                                      },
                                      "ip": {
                                        "type": "array",
                                        "description": "IP address SANs.",
                                        "default": [],
                                        "items": {
                                          "type": "string"
                                        }
                                      }
                                    },
                                    "required": [
                                      "dns",
                                      "ip"
                                    ]
                                  },
                                  "secretName": {
                                    "type": "string",
                                    "description": "Secret for storing server certificate. Any existing data will be overwritten."
                                  },
                                  "secretNamespace": {
                                    "type": "string",
                                    "description": "Certificate K8S namespace. Omit to use default namespace."
                                  }
                                },
                                "required": [
                                  "issuerRef"
                                ]
                              },
                              "manual": {
                                "description": "Option 2 - Manual TLS server certificate management through a defined secret.",
                                "type": "object",
                                "properties": {
                                  "secretName": {
                                    "type": "string",
                                    "description": "secret containing TLS cert."
                                  },
                                  "secretNamespace": {
                                    "type": "string",
                                    "description": "namespace of secret; omit to use default namespace."
                                  }
                                },
                                "required": [
                                  "secretName"
                                ]
                              },
                              "keyVault": {
                                "description": "Option 3 - TLS server certificate retrieved from Key Vault..",
                                "type": "object",
                                "properties": {
                                  "vault": {
                                    "description": "KeyVault properties.",
                                    "type": "object",
                                    "properties": {
                                      "credentials": {
                                        "description": "KeyVault credentials.",
                                        "type": "object",
                                        "properties": {
                                          "servicePrincipalLocalSecretName": {
                                            "type": "string",
                                            "description": "KeyVault service principal local secret name."
                                          }
                                        },
                                        "required": [
                                          "servicePrincipalLocalSecretName"
                                        ]
                                      },
                                      "directoryId": {
                                        "type": "string",
                                        "description": "KeyVault directoryId."
                                      },
                                      "name": {
                                        "type": "string",
                                        "description": "KeyVault name."
                                      }
                                    },
                                    "required": [
                                      "credentials",
                                      "directoryId",
                                      "name"
                                    ]
                                  },
                                  "vaultCaChainSecret": {
                                    "description": "KeyVault CA chain secret details.",
                                    "type": "object",
                                    "properties": {
                                      "name": {
                                        "type": "string",
                                        "description": "KeyVault secret name."
                                      },
                                      "version": {
                                        "type": "string",
                                        "description": "KeyVault secret version."
                                      }
                                    },
                                    "required": [
                                      "name"
                                    ]
                                  },
                                  "vaultCert": {
                                    "description": "KeyVault Cert secret details.",
                                    "type": "object",
                                    "properties": {
                                      "name": {
                                        "type": "string",
                                        "description": "KeyVault secret name."
                                      },
                                      "version": {
                                        "type": "string",
                                        "description": "KeyVault secret version."
                                      }
                                    },
                                    "required": [
                                      "name"
                                    ]
                                  }
                                },
                                "required": [
                                  "vault",
                                  "vaultCert"
                                ]
                              }
                            }
                          },
                          "provisioningState": {
                            "description": "The status of the last operation.",
                            "readOnly": true,
                            "type": "string",
                            "enum": [
                              "Succeeded",
                              "Failed",
                              "Canceled",
                              "Provisioning",
                              "Updating",
                              "Deleting",
                              "Accepted"
                            ],
                            "x-ms-enum": {
                              "name": "ProvisioningState",
                              "modelAsString": true,
                              "values": [
                                {
                                  "name": "Succeeded",
                                  "value": "Succeeded",
                                  "description": "Resource has been created."
                                },
                                {
                                  "name": "Failed",
                                  "value": "Failed",
                                  "description": "Resource creation failed."
                                },
                                {
                                  "name": "Canceled",
                                  "value": "Canceled",
                                  "description": "Resource creation was canceled."
                                },
                                {
                                  "name": "Provisioning",
                                  "value": "Provisioning",
                                  "description": "Resource is getting provisioned."
                                },
                                {
                                  "name": "Updating",
                                  "value": "Updating",
                                  "description": "Resource is Updating."
                                },
                                {
                                  "name": "Deleting",
                                  "value": "Deleting",
                                  "description": "Resource is Deleting."
                                },
                                {
                                  "name": "Accepted",
                                  "value": "Accepted",
                                  "description": "Resource has been Accepted."
                                }
                              ]
                            }
                          }
                        },
                        "required": [
                          "brokerRef",
                          "port"
                        ]
                      },
                      "extendedLocation": {
                        "description": "Extended Location",
                        "x-ms-mutability": [
                          "read",
                          "create"
                        ],
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "The name of the extended location."
                          },
                          "type": {
                            "description": "Type of ExtendedLocation.",
                            "type": "string",
                            "enum": [
                              "CustomLocation"
                            ],
                            "x-ms-enum": {
                              "name": "ExtendedLocationType",
                              "modelAsString": true,
                              "values": [
                                {
                                  "name": "CustomLocation",
                                  "value": "CustomLocation",
                                  "description": "CustomLocation type"
                                }
                              ]
                            }
                          }
                        },
                        "required": [
                          "name",
                          "type"
                        ]
                      }
                    },
                    "required": [
                      "extendedLocation"
                    ]
                  }
                },
                "nextLink": {
                  "type": "string",
                  "format": "uri",
                  "description": "The link to the next page of items"
                }
              },
              "required": [
                "value"
              ]
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTOperationsMQ/mq/{mqName}/broker/{brokerName}/listener/{listenerName}": {
      "get": {
        "operationId": "BrokerListener_Get",
        "tags": [
          "BrokerListener"
        ],
        "description": "Get a BrokerListenerResource",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group. The name is case insensitive.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "x-ms-parameter-location": "method"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "brokerName",
            "in": "path",
            "description": "Name of MQ broker resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "listenerName",
            "in": "path",
            "description": "Name of MQ broker/listener resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "type": "object",
              "description": "MQ broker/listener resource",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "description": "The name of the resource",
                  "readOnly": true
                },
                "type": {
                  "type": "string",
                  "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                  "readOnly": true
                },
                "systemData": {
                  "type": "object",
                  "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                  "readOnly": true,
                  "properties": {
                    "createdBy": {
                      "type": "string",
                      "description": "The identity that created the resource."
                    },
                    "createdByType": {
                      "type": "string",
                      "description": "The type of identity that created the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource creation (UTC)."
                    },
                    "lastModifiedBy": {
                      "type": "string",
                      "description": "The identity that last modified the resource."
                    },
                    "lastModifiedByType": {
                      "type": "string",
                      "description": "The type of identity that last modified the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "lastModifiedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource last modification (UTC)"
                    }
                  }
                },
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "x-ms-mutability": [
                    "read",
                    "create",
                    "update"
                  ]
                },
                "location": {
                  "type": "string",
                  "description": "The geo-location where the resource lives",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ]
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "authenticationEnabled": {
                      "type": "boolean",
                      "description": "The flag for enabling Authentication rules on Listener Port.",
                      "default": false
                    },
                    "authorizationEnabled": {
                      "type": "boolean",
                      "description": "The flag for enabling Authorization policies on Listener Port. false - AllowAll, true - Use Authorization resource rules if present.",
                      "default": false
                    },
                    "brokerRef": {
                      "type": "string",
                      "description": "The k8s cr/resource reference of mq/broker."
                    },
                    "nodePort": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The node port to use on the Host node.",
                      "minimum": 0,
                      "maximum": 65535
                    },
                    "port": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The port to start Listening for connections on.",
                      "minimum": 0,
                      "maximum": 65535
                    },
                    "serviceName": {
                      "type": "string",
                      "description": "The service name to expose Listener port on.",
                      "default": "aio-mq-dmqtt-frontend"
                    },
                    "serviceType": {
                      "type": "string",
                      "description": "The Kubernetes Service type to deploy for Listener.",
                      "default": "clusterIp",
                      "enum": [
                        "clusterIp",
                        "loadBalancer",
                        "nodePort"
                      ],
                      "x-ms-enum": {
                        "name": "ServiceType",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "clusterIp",
                            "value": "clusterIp",
                            "description": "Cluster IP Service."
                          },
                          {
                            "name": "loadBalancer",
                            "value": "loadBalancer",
                            "description": "Load Balancer Service."
                          },
                          {
                            "name": "nodePort",
                            "value": "nodePort",
                            "description": "Node Port Service."
                          }
                        ]
                      }
                    },
                    "tls": {
                      "description": "Defines configuration of a TLS server certificate. NOTE Enum - Only one TLS Cert method is supported",
                      "type": "object",
                      "properties": {
                        "automatic": {
                          "description": "Option 1 - Automatic TLS server certificate management with cert-manager.",
                          "type": "object",
                          "properties": {
                            "duration": {
                              "type": "string",
                              "description": "Lifetime of automatically-managed certificate.",
                              "default": "720h"
                            },
                            "issuerRef": {
                              "description": "cert-manager issuerRef.",
                              "type": "object",
                              "properties": {
                                "group": {
                                  "type": "string",
                                  "description": "group of issuer.",
                                  "default": "cert-manager.io"
                                },
                                "kind": {
                                  "type": "string",
                                  "description": "kind of issuer (Issuer or ClusterIssuer)."
                                },
                                "name": {
                                  "type": "string",
                                  "description": "name of issuer."
                                }
                              },
                              "required": [
                                "group",
                                "kind",
                                "name"
                              ]
                            },
                            "privateKey": {
                              "description": "Cert Manager private key.",
                              "type": "object",
                              "properties": {
                                "algorithm": {
                                  "type": "string",
                                  "description": "algorithm for private key.",
                                  "default": "ECDSA"
                                },
                                "rotationPolicy": {
                                  "type": "string",
                                  "description": "cert-manager rotationPolicy.",
                                  "default": "Always"
                                },
                                "size": {
                                  "type": "integer",
                                  "format": "int32",
                                  "description": "size of private key.",
                                  "default": 256,
                                  "minimum": 0,
                                  "maximum": 65535
                                }
                              },
                              "required": [
                                "algorithm",
                                "rotationPolicy",
                                "size"
                              ]
                            },
                            "renewBefore": {
                              "type": "string",
                              "description": "When to begin renewing automatically-managed certificate.",
                              "default": "240h"
                            },
                            "san": {
                              "description": "Additional SANs to include in the certificate.",
                              "type": "object",
                              "properties": {
                                "dns": {
                                  "type": "array",
                                  "description": "DNS SANs.",
                                  "default": [],
                                  "items": {
                                    "type": "string"
                                  }
                                },
                                "ip": {
                                  "type": "array",
                                  "description": "IP address SANs.",
                                  "default": [],
                                  "items": {
                                    "type": "string"
                                  }
                                }
                              },
                              "required": [
                                "dns",
                                "ip"
                              ]
                            },
                            "secretName": {
                              "type": "string",
                              "description": "Secret for storing server certificate. Any existing data will be overwritten."
                            },
                            "secretNamespace": {
                              "type": "string",
                              "description": "Certificate K8S namespace. Omit to use default namespace."
                            }
                          },
                          "required": [
                            "issuerRef"
                          ]
                        },
                        "manual": {
                          "description": "Option 2 - Manual TLS server certificate management through a defined secret.",
                          "type": "object",
                          "properties": {
                            "secretName": {
                              "type": "string",
                              "description": "secret containing TLS cert."
                            },
                            "secretNamespace": {
                              "type": "string",
                              "description": "namespace of secret; omit to use default namespace."
                            }
                          },
                          "required": [
                            "secretName"
                          ]
                        },
                        "keyVault": {
                          "description": "Option 3 - TLS server certificate retrieved from Key Vault..",
                          "type": "object",
                          "properties": {
                            "vault": {
                              "description": "KeyVault properties.",
                              "type": "object",
                              "properties": {
                                "credentials": {
                                  "description": "KeyVault credentials.",
                                  "type": "object",
                                  "properties": {
                                    "servicePrincipalLocalSecretName": {
                                      "type": "string",
                                      "description": "KeyVault service principal local secret name."
                                    }
                                  },
                                  "required": [
                                    "servicePrincipalLocalSecretName"
                                  ]
                                },
                                "directoryId": {
                                  "type": "string",
                                  "description": "KeyVault directoryId."
                                },
                                "name": {
                                  "type": "string",
                                  "description": "KeyVault name."
                                }
                              },
                              "required": [
                                "credentials",
                                "directoryId",
                                "name"
                              ]
                            },
                            "vaultCaChainSecret": {
                              "description": "KeyVault CA chain secret details.",
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "KeyVault secret name."
                                },
                                "version": {
                                  "type": "string",
                                  "description": "KeyVault secret version."
                                }
                              },
                              "required": [
                                "name"
                              ]
                            },
                            "vaultCert": {
                              "description": "KeyVault Cert secret details.",
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "KeyVault secret name."
                                },
                                "version": {
                                  "type": "string",
                                  "description": "KeyVault secret version."
                                }
                              },
                              "required": [
                                "name"
                              ]
                            }
                          },
                          "required": [
                            "vault",
                            "vaultCert"
                          ]
                        }
                      }
                    },
                    "provisioningState": {
                      "description": "The status of the last operation.",
                      "readOnly": true,
                      "type": "string",
                      "enum": [
                        "Succeeded",
                        "Failed",
                        "Canceled",
                        "Provisioning",
                        "Updating",
                        "Deleting",
                        "Accepted"
                      ],
                      "x-ms-enum": {
                        "name": "ProvisioningState",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Succeeded",
                            "value": "Succeeded",
                            "description": "Resource has been created."
                          },
                          {
                            "name": "Failed",
                            "value": "Failed",
                            "description": "Resource creation failed."
                          },
                          {
                            "name": "Canceled",
                            "value": "Canceled",
                            "description": "Resource creation was canceled."
                          },
                          {
                            "name": "Provisioning",
                            "value": "Provisioning",
                            "description": "Resource is getting provisioned."
                          },
                          {
                            "name": "Updating",
                            "value": "Updating",
                            "description": "Resource is Updating."
                          },
                          {
                            "name": "Deleting",
                            "value": "Deleting",
                            "description": "Resource is Deleting."
                          },
                          {
                            "name": "Accepted",
                            "value": "Accepted",
                            "description": "Resource has been Accepted."
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "brokerRef",
                    "port"
                  ]
                },
                "extendedLocation": {
                  "description": "Extended Location",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ],
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The name of the extended location."
                    },
                    "type": {
                      "description": "Type of ExtendedLocation.",
                      "type": "string",
                      "enum": [
                        "CustomLocation"
                      ],
                      "x-ms-enum": {
                        "name": "ExtendedLocationType",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "CustomLocation",
                            "value": "CustomLocation",
                            "description": "CustomLocation type"
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "name",
                    "type"
                  ]
                }
              },
              "required": [
                "extendedLocation"
              ]
            }
          }
        }
      },
      "put": {
        "operationId": "BrokerListener_CreateOrUpdate",
        "tags": [
          "BrokerListener"
        ],
        "description": "Create a BrokerListenerResource",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group. The name is case insensitive.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "x-ms-parameter-location": "method"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "brokerName",
            "in": "path",
            "description": "Name of MQ broker resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "listenerName",
            "in": "path",
            "description": "Name of MQ broker/listener resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "resource",
            "in": "body",
            "description": "Resource create parameters.",
            "required": true,
            "schema": {
              "type": "object",
              "description": "MQ broker/listener resource",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "description": "The name of the resource",
                  "readOnly": true
                },
                "type": {
                  "type": "string",
                  "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                  "readOnly": true
                },
                "systemData": {
                  "type": "object",
                  "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                  "readOnly": true,
                  "properties": {
                    "createdBy": {
                      "type": "string",
                      "description": "The identity that created the resource."
                    },
                    "createdByType": {
                      "type": "string",
                      "description": "The type of identity that created the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource creation (UTC)."
                    },
                    "lastModifiedBy": {
                      "type": "string",
                      "description": "The identity that last modified the resource."
                    },
                    "lastModifiedByType": {
                      "type": "string",
                      "description": "The type of identity that last modified the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "lastModifiedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource last modification (UTC)"
                    }
                  }
                },
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "x-ms-mutability": [
                    "read",
                    "create",
                    "update"
                  ]
                },
                "location": {
                  "type": "string",
                  "description": "The geo-location where the resource lives",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ]
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "authenticationEnabled": {
                      "type": "boolean",
                      "description": "The flag for enabling Authentication rules on Listener Port.",
                      "default": false
                    },
                    "authorizationEnabled": {
                      "type": "boolean",
                      "description": "The flag for enabling Authorization policies on Listener Port. false - AllowAll, true - Use Authorization resource rules if present.",
                      "default": false
                    },
                    "brokerRef": {
                      "type": "string",
                      "description": "The k8s cr/resource reference of mq/broker."
                    },
                    "nodePort": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The node port to use on the Host node.",
                      "minimum": 0,
                      "maximum": 65535
                    },
                    "port": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The port to start Listening for connections on.",
                      "minimum": 0,
                      "maximum": 65535
                    },
                    "serviceName": {
                      "type": "string",
                      "description": "The service name to expose Listener port on.",
                      "default": "aio-mq-dmqtt-frontend"
                    },
                    "serviceType": {
                      "type": "string",
                      "description": "The Kubernetes Service type to deploy for Listener.",
                      "default": "clusterIp",
                      "enum": [
                        "clusterIp",
                        "loadBalancer",
                        "nodePort"
                      ],
                      "x-ms-enum": {
                        "name": "ServiceType",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "clusterIp",
                            "value": "clusterIp",
                            "description": "Cluster IP Service."
                          },
                          {
                            "name": "loadBalancer",
                            "value": "loadBalancer",
                            "description": "Load Balancer Service."
                          },
                          {
                            "name": "nodePort",
                            "value": "nodePort",
                            "description": "Node Port Service."
                          }
                        ]
                      }
                    },
                    "tls": {
                      "description": "Defines configuration of a TLS server certificate. NOTE Enum - Only one TLS Cert method is supported",
                      "type": "object",
                      "properties": {
                        "automatic": {
                          "description": "Option 1 - Automatic TLS server certificate management with cert-manager.",
                          "type": "object",
                          "properties": {
                            "duration": {
                              "type": "string",
                              "description": "Lifetime of automatically-managed certificate.",
                              "default": "720h"
                            },
                            "issuerRef": {
                              "description": "cert-manager issuerRef.",
                              "type": "object",
                              "properties": {
                                "group": {
                                  "type": "string",
                                  "description": "group of issuer.",
                                  "default": "cert-manager.io"
                                },
                                "kind": {
                                  "type": "string",
                                  "description": "kind of issuer (Issuer or ClusterIssuer)."
                                },
                                "name": {
                                  "type": "string",
                                  "description": "name of issuer."
                                }
                              },
                              "required": [
                                "group",
                                "kind",
                                "name"
                              ]
                            },
                            "privateKey": {
                              "description": "Cert Manager private key.",
                              "type": "object",
                              "properties": {
                                "algorithm": {
                                  "type": "string",
                                  "description": "algorithm for private key.",
                                  "default": "ECDSA"
                                },
                                "rotationPolicy": {
                                  "type": "string",
                                  "description": "cert-manager rotationPolicy.",
                                  "default": "Always"
                                },
                                "size": {
                                  "type": "integer",
                                  "format": "int32",
                                  "description": "size of private key.",
                                  "default": 256,
                                  "minimum": 0,
                                  "maximum": 65535
                                }
                              },
                              "required": [
                                "algorithm",
                                "rotationPolicy",
                                "size"
                              ]
                            },
                            "renewBefore": {
                              "type": "string",
                              "description": "When to begin renewing automatically-managed certificate.",
                              "default": "240h"
                            },
                            "san": {
                              "description": "Additional SANs to include in the certificate.",
                              "type": "object",
                              "properties": {
                                "dns": {
                                  "type": "array",
                                  "description": "DNS SANs.",
                                  "default": [],
                                  "items": {
                                    "type": "string"
                                  }
                                },
                                "ip": {
                                  "type": "array",
                                  "description": "IP address SANs.",
                                  "default": [],
                                  "items": {
                                    "type": "string"
                                  }
                                }
                              },
                              "required": [
                                "dns",
                                "ip"
                              ]
                            },
                            "secretName": {
                              "type": "string",
                              "description": "Secret for storing server certificate. Any existing data will be overwritten."
                            },
                            "secretNamespace": {
                              "type": "string",
                              "description": "Certificate K8S namespace. Omit to use default namespace."
                            }
                          },
                          "required": [
                            "issuerRef"
                          ]
                        },
                        "manual": {
                          "description": "Option 2 - Manual TLS server certificate management through a defined secret.",
                          "type": "object",
                          "properties": {
                            "secretName": {
                              "type": "string",
                              "description": "secret containing TLS cert."
                            },
                            "secretNamespace": {
                              "type": "string",
                              "description": "namespace of secret; omit to use default namespace."
                            }
                          },
                          "required": [
                            "secretName"
                          ]
                        },
                        "keyVault": {
                          "description": "Option 3 - TLS server certificate retrieved from Key Vault..",
                          "type": "object",
                          "properties": {
                            "vault": {
                              "description": "KeyVault properties.",
                              "type": "object",
                              "properties": {
                                "credentials": {
                                  "description": "KeyVault credentials.",
                                  "type": "object",
                                  "properties": {
                                    "servicePrincipalLocalSecretName": {
                                      "type": "string",
                                      "description": "KeyVault service principal local secret name."
                                    }
                                  },
                                  "required": [
                                    "servicePrincipalLocalSecretName"
                                  ]
                                },
                                "directoryId": {
                                  "type": "string",
                                  "description": "KeyVault directoryId."
                                },
                                "name": {
                                  "type": "string",
                                  "description": "KeyVault name."
                                }
                              },
                              "required": [
                                "credentials",
                                "directoryId",
                                "name"
                              ]
                            },
                            "vaultCaChainSecret": {
                              "description": "KeyVault CA chain secret details.",
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "KeyVault secret name."
                                },
                                "version": {
                                  "type": "string",
                                  "description": "KeyVault secret version."
                                }
                              },
                              "required": [
                                "name"
                              ]
                            },
                            "vaultCert": {
                              "description": "KeyVault Cert secret details.",
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "KeyVault secret name."
                                },
                                "version": {
                                  "type": "string",
                                  "description": "KeyVault secret version."
                                }
                              },
                              "required": [
                                "name"
                              ]
                            }
                          },
                          "required": [
                            "vault",
                            "vaultCert"
                          ]
                        }
                      }
                    },
                    "provisioningState": {
                      "description": "The status of the last operation.",
                      "readOnly": true,
                      "type": "string",
                      "enum": [
                        "Succeeded",
                        "Failed",
                        "Canceled",
                        "Provisioning",
                        "Updating",
                        "Deleting",
                        "Accepted"
                      ],
                      "x-ms-enum": {
                        "name": "ProvisioningState",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Succeeded",
                            "value": "Succeeded",
                            "description": "Resource has been created."
                          },
                          {
                            "name": "Failed",
                            "value": "Failed",
                            "description": "Resource creation failed."
                          },
                          {
                            "name": "Canceled",
                            "value": "Canceled",
                            "description": "Resource creation was canceled."
                          },
                          {
                            "name": "Provisioning",
                            "value": "Provisioning",
                            "description": "Resource is getting provisioned."
                          },
                          {
                            "name": "Updating",
                            "value": "Updating",
                            "description": "Resource is Updating."
                          },
                          {
                            "name": "Deleting",
                            "value": "Deleting",
                            "description": "Resource is Deleting."
                          },
                          {
                            "name": "Accepted",
                            "value": "Accepted",
                            "description": "Resource has been Accepted."
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "brokerRef",
                    "port"
                  ]
                },
                "extendedLocation": {
                  "description": "Extended Location",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ],
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The name of the extended location."
                    },
                    "type": {
                      "description": "Type of ExtendedLocation.",
                      "type": "string",
                      "enum": [
                        "CustomLocation"
                      ],
                      "x-ms-enum": {
                        "name": "ExtendedLocationType",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "CustomLocation",
                            "value": "CustomLocation",
                            "description": "CustomLocation type"
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "name",
                    "type"
                  ]
                }
              },
              "required": [
                "extendedLocation"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resource 'BrokerListenerResource' update operation succeeded",
            "schema": {
              "type": "object",
              "description": "MQ broker/listener resource",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "description": "The name of the resource",
                  "readOnly": true
                },
                "type": {
                  "type": "string",
                  "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                  "readOnly": true
                },
                "systemData": {
                  "type": "object",
                  "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                  "readOnly": true,
                  "properties": {
                    "createdBy": {
                      "type": "string",
                      "description": "The identity that created the resource."
                    },
                    "createdByType": {
                      "type": "string",
                      "description": "The type of identity that created the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource creation (UTC)."
                    },
                    "lastModifiedBy": {
                      "type": "string",
                      "description": "The identity that last modified the resource."
                    },
                    "lastModifiedByType": {
                      "type": "string",
                      "description": "The type of identity that last modified the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "lastModifiedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource last modification (UTC)"
                    }
                  }
                },
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "x-ms-mutability": [
                    "read",
                    "create",
                    "update"
                  ]
                },
                "location": {
                  "type": "string",
                  "description": "The geo-location where the resource lives",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ]
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "authenticationEnabled": {
                      "type": "boolean",
                      "description": "The flag for enabling Authentication rules on Listener Port.",
                      "default": false
                    },
                    "authorizationEnabled": {
                      "type": "boolean",
                      "description": "The flag for enabling Authorization policies on Listener Port. false - AllowAll, true - Use Authorization resource rules if present.",
                      "default": false
                    },
                    "brokerRef": {
                      "type": "string",
                      "description": "The k8s cr/resource reference of mq/broker."
                    },
                    "nodePort": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The node port to use on the Host node.",
                      "minimum": 0,
                      "maximum": 65535
                    },
                    "port": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The port to start Listening for connections on.",
                      "minimum": 0,
                      "maximum": 65535
                    },
                    "serviceName": {
                      "type": "string",
                      "description": "The service name to expose Listener port on.",
                      "default": "aio-mq-dmqtt-frontend"
                    },
                    "serviceType": {
                      "type": "string",
                      "description": "The Kubernetes Service type to deploy for Listener.",
                      "default": "clusterIp",
                      "enum": [
                        "clusterIp",
                        "loadBalancer",
                        "nodePort"
                      ],
                      "x-ms-enum": {
                        "name": "ServiceType",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "clusterIp",
                            "value": "clusterIp",
                            "description": "Cluster IP Service."
                          },
                          {
                            "name": "loadBalancer",
                            "value": "loadBalancer",
                            "description": "Load Balancer Service."
                          },
                          {
                            "name": "nodePort",
                            "value": "nodePort",
                            "description": "Node Port Service."
                          }
                        ]
                      }
                    },
                    "tls": {
                      "description": "Defines configuration of a TLS server certificate. NOTE Enum - Only one TLS Cert method is supported",
                      "type": "object",
                      "properties": {
                        "automatic": {
                          "description": "Option 1 - Automatic TLS server certificate management with cert-manager.",
                          "type": "object",
                          "properties": {
                            "duration": {
                              "type": "string",
                              "description": "Lifetime of automatically-managed certificate.",
                              "default": "720h"
                            },
                            "issuerRef": {
                              "description": "cert-manager issuerRef.",
                              "type": "object",
                              "properties": {
                                "group": {
                                  "type": "string",
                                  "description": "group of issuer.",
                                  "default": "cert-manager.io"
                                },
                                "kind": {
                                  "type": "string",
                                  "description": "kind of issuer (Issuer or ClusterIssuer)."
                                },
                                "name": {
                                  "type": "string",
                                  "description": "name of issuer."
                                }
                              },
                              "required": [
                                "group",
                                "kind",
                                "name"
                              ]
                            },
                            "privateKey": {
                              "description": "Cert Manager private key.",
                              "type": "object",
                              "properties": {
                                "algorithm": {
                                  "type": "string",
                                  "description": "algorithm for private key.",
                                  "default": "ECDSA"
                                },
                                "rotationPolicy": {
                                  "type": "string",
                                  "description": "cert-manager rotationPolicy.",
                                  "default": "Always"
                                },
                                "size": {
                                  "type": "integer",
                                  "format": "int32",
                                  "description": "size of private key.",
                                  "default": 256,
                                  "minimum": 0,
                                  "maximum": 65535
                                }
                              },
                              "required": [
                                "algorithm",
                                "rotationPolicy",
                                "size"
                              ]
                            },
                            "renewBefore": {
                              "type": "string",
                              "description": "When to begin renewing automatically-managed certificate.",
                              "default": "240h"
                            },
                            "san": {
                              "description": "Additional SANs to include in the certificate.",
                              "type": "object",
                              "properties": {
                                "dns": {
                                  "type": "array",
                                  "description": "DNS SANs.",
                                  "default": [],
                                  "items": {
                                    "type": "string"
                                  }
                                },
                                "ip": {
                                  "type": "array",
                                  "description": "IP address SANs.",
                                  "default": [],
                                  "items": {
                                    "type": "string"
                                  }
                                }
                              },
                              "required": [
                                "dns",
                                "ip"
                              ]
                            },
                            "secretName": {
                              "type": "string",
                              "description": "Secret for storing server certificate. Any existing data will be overwritten."
                            },
                            "secretNamespace": {
                              "type": "string",
                              "description": "Certificate K8S namespace. Omit to use default namespace."
                            }
                          },
                          "required": [
                            "issuerRef"
                          ]
                        },
                        "manual": {
                          "description": "Option 2 - Manual TLS server certificate management through a defined secret.",
                          "type": "object",
                          "properties": {
                            "secretName": {
                              "type": "string",
                              "description": "secret containing TLS cert."
                            },
                            "secretNamespace": {
                              "type": "string",
                              "description": "namespace of secret; omit to use default namespace."
                            }
                          },
                          "required": [
                            "secretName"
                          ]
                        },
                        "keyVault": {
                          "description": "Option 3 - TLS server certificate retrieved from Key Vault..",
                          "type": "object",
                          "properties": {
                            "vault": {
                              "description": "KeyVault properties.",
                              "type": "object",
                              "properties": {
                                "credentials": {
                                  "description": "KeyVault credentials.",
                                  "type": "object",
                                  "properties": {
                                    "servicePrincipalLocalSecretName": {
                                      "type": "string",
                                      "description": "KeyVault service principal local secret name."
                                    }
                                  },
                                  "required": [
                                    "servicePrincipalLocalSecretName"
                                  ]
                                },
                                "directoryId": {
                                  "type": "string",
                                  "description": "KeyVault directoryId."
                                },
                                "name": {
                                  "type": "string",
                                  "description": "KeyVault name."
                                }
                              },
                              "required": [
                                "credentials",
                                "directoryId",
                                "name"
                              ]
                            },
                            "vaultCaChainSecret": {
                              "description": "KeyVault CA chain secret details.",
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "KeyVault secret name."
                                },
                                "version": {
                                  "type": "string",
                                  "description": "KeyVault secret version."
                                }
                              },
                              "required": [
                                "name"
                              ]
                            },
                            "vaultCert": {
                              "description": "KeyVault Cert secret details.",
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "KeyVault secret name."
                                },
                                "version": {
                                  "type": "string",
                                  "description": "KeyVault secret version."
                                }
                              },
                              "required": [
                                "name"
                              ]
                            }
                          },
                          "required": [
                            "vault",
                            "vaultCert"
                          ]
                        }
                      }
                    },
                    "provisioningState": {
                      "description": "The status of the last operation.",
                      "readOnly": true,
                      "type": "string",
                      "enum": [
                        "Succeeded",
                        "Failed",
                        "Canceled",
                        "Provisioning",
                        "Updating",
                        "Deleting",
                        "Accepted"
                      ],
                      "x-ms-enum": {
                        "name": "ProvisioningState",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Succeeded",
                            "value": "Succeeded",
                            "description": "Resource has been created."
                          },
                          {
                            "name": "Failed",
                            "value": "Failed",
                            "description": "Resource creation failed."
                          },
                          {
                            "name": "Canceled",
                            "value": "Canceled",
                            "description": "Resource creation was canceled."
                          },
                          {
                            "name": "Provisioning",
                            "value": "Provisioning",
                            "description": "Resource is getting provisioned."
                          },
                          {
                            "name": "Updating",
                            "value": "Updating",
                            "description": "Resource is Updating."
                          },
                          {
                            "name": "Deleting",
                            "value": "Deleting",
                            "description": "Resource is Deleting."
                          },
                          {
                            "name": "Accepted",
                            "value": "Accepted",
                            "description": "Resource has been Accepted."
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "brokerRef",
                    "port"
                  ]
                },
                "extendedLocation": {
                  "description": "Extended Location",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ],
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The name of the extended location."
                    },
                    "type": {
                      "description": "Type of ExtendedLocation.",
                      "type": "string",
                      "enum": [
                        "CustomLocation"
                      ],
                      "x-ms-enum": {
                        "name": "ExtendedLocationType",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "CustomLocation",
                            "value": "CustomLocation",
                            "description": "CustomLocation type"
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "name",
                    "type"
                  ]
                }
              },
              "required": [
                "extendedLocation"
              ]
            }
          },
          "201": {
            "description": "Resource 'BrokerListenerResource' create operation succeeded",
            "schema": {
              "type": "object",
              "description": "MQ broker/listener resource",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "description": "The name of the resource",
                  "readOnly": true
                },
                "type": {
                  "type": "string",
                  "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                  "readOnly": true
                },
                "systemData": {
                  "type": "object",
                  "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                  "readOnly": true,
                  "properties": {
                    "createdBy": {
                      "type": "string",
                      "description": "The identity that created the resource."
                    },
                    "createdByType": {
                      "type": "string",
                      "description": "The type of identity that created the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource creation (UTC)."
                    },
                    "lastModifiedBy": {
                      "type": "string",
                      "description": "The identity that last modified the resource."
                    },
                    "lastModifiedByType": {
                      "type": "string",
                      "description": "The type of identity that last modified the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "lastModifiedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource last modification (UTC)"
                    }
                  }
                },
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "x-ms-mutability": [
                    "read",
                    "create",
                    "update"
                  ]
                },
                "location": {
                  "type": "string",
                  "description": "The geo-location where the resource lives",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ]
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "authenticationEnabled": {
                      "type": "boolean",
                      "description": "The flag for enabling Authentication rules on Listener Port.",
                      "default": false
                    },
                    "authorizationEnabled": {
                      "type": "boolean",
                      "description": "The flag for enabling Authorization policies on Listener Port. false - AllowAll, true - Use Authorization resource rules if present.",
                      "default": false
                    },
                    "brokerRef": {
                      "type": "string",
                      "description": "The k8s cr/resource reference of mq/broker."
                    },
                    "nodePort": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The node port to use on the Host node.",
                      "minimum": 0,
                      "maximum": 65535
                    },
                    "port": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The port to start Listening for connections on.",
                      "minimum": 0,
                      "maximum": 65535
                    },
                    "serviceName": {
                      "type": "string",
                      "description": "The service name to expose Listener port on.",
                      "default": "aio-mq-dmqtt-frontend"
                    },
                    "serviceType": {
                      "type": "string",
                      "description": "The Kubernetes Service type to deploy for Listener.",
                      "default": "clusterIp",
                      "enum": [
                        "clusterIp",
                        "loadBalancer",
                        "nodePort"
                      ],
                      "x-ms-enum": {
                        "name": "ServiceType",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "clusterIp",
                            "value": "clusterIp",
                            "description": "Cluster IP Service."
                          },
                          {
                            "name": "loadBalancer",
                            "value": "loadBalancer",
                            "description": "Load Balancer Service."
                          },
                          {
                            "name": "nodePort",
                            "value": "nodePort",
                            "description": "Node Port Service."
                          }
                        ]
                      }
                    },
                    "tls": {
                      "description": "Defines configuration of a TLS server certificate. NOTE Enum - Only one TLS Cert method is supported",
                      "type": "object",
                      "properties": {
                        "automatic": {
                          "description": "Option 1 - Automatic TLS server certificate management with cert-manager.",
                          "type": "object",
                          "properties": {
                            "duration": {
                              "type": "string",
                              "description": "Lifetime of automatically-managed certificate.",
                              "default": "720h"
                            },
                            "issuerRef": {
                              "description": "cert-manager issuerRef.",
                              "type": "object",
                              "properties": {
                                "group": {
                                  "type": "string",
                                  "description": "group of issuer.",
                                  "default": "cert-manager.io"
                                },
                                "kind": {
                                  "type": "string",
                                  "description": "kind of issuer (Issuer or ClusterIssuer)."
                                },
                                "name": {
                                  "type": "string",
                                  "description": "name of issuer."
                                }
                              },
                              "required": [
                                "group",
                                "kind",
                                "name"
                              ]
                            },
                            "privateKey": {
                              "description": "Cert Manager private key.",
                              "type": "object",
                              "properties": {
                                "algorithm": {
                                  "type": "string",
                                  "description": "algorithm for private key.",
                                  "default": "ECDSA"
                                },
                                "rotationPolicy": {
                                  "type": "string",
                                  "description": "cert-manager rotationPolicy.",
                                  "default": "Always"
                                },
                                "size": {
                                  "type": "integer",
                                  "format": "int32",
                                  "description": "size of private key.",
                                  "default": 256,
                                  "minimum": 0,
                                  "maximum": 65535
                                }
                              },
                              "required": [
                                "algorithm",
                                "rotationPolicy",
                                "size"
                              ]
                            },
                            "renewBefore": {
                              "type": "string",
                              "description": "When to begin renewing automatically-managed certificate.",
                              "default": "240h"
                            },
                            "san": {
                              "description": "Additional SANs to include in the certificate.",
                              "type": "object",
                              "properties": {
                                "dns": {
                                  "type": "array",
                                  "description": "DNS SANs.",
                                  "default": [],
                                  "items": {
                                    "type": "string"
                                  }
                                },
                                "ip": {
                                  "type": "array",
                                  "description": "IP address SANs.",
                                  "default": [],
                                  "items": {
                                    "type": "string"
                                  }
                                }
                              },
                              "required": [
                                "dns",
                                "ip"
                              ]
                            },
                            "secretName": {
                              "type": "string",
                              "description": "Secret for storing server certificate. Any existing data will be overwritten."
                            },
                            "secretNamespace": {
                              "type": "string",
                              "description": "Certificate K8S namespace. Omit to use default namespace."
                            }
                          },
                          "required": [
                            "issuerRef"
                          ]
                        },
                        "manual": {
                          "description": "Option 2 - Manual TLS server certificate management through a defined secret.",
                          "type": "object",
                          "properties": {
                            "secretName": {
                              "type": "string",
                              "description": "secret containing TLS cert."
                            },
                            "secretNamespace": {
                              "type": "string",
                              "description": "namespace of secret; omit to use default namespace."
                            }
                          },
                          "required": [
                            "secretName"
                          ]
                        },
                        "keyVault": {
                          "description": "Option 3 - TLS server certificate retrieved from Key Vault..",
                          "type": "object",
                          "properties": {
                            "vault": {
                              "description": "KeyVault properties.",
                              "type": "object",
                              "properties": {
                                "credentials": {
                                  "description": "KeyVault credentials.",
                                  "type": "object",
                                  "properties": {
                                    "servicePrincipalLocalSecretName": {
                                      "type": "string",
                                      "description": "KeyVault service principal local secret name."
                                    }
                                  },
                                  "required": [
                                    "servicePrincipalLocalSecretName"
                                  ]
                                },
                                "directoryId": {
                                  "type": "string",
                                  "description": "KeyVault directoryId."
                                },
                                "name": {
                                  "type": "string",
                                  "description": "KeyVault name."
                                }
                              },
                              "required": [
                                "credentials",
                                "directoryId",
                                "name"
                              ]
                            },
                            "vaultCaChainSecret": {
                              "description": "KeyVault CA chain secret details.",
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "KeyVault secret name."
                                },
                                "version": {
                                  "type": "string",
                                  "description": "KeyVault secret version."
                                }
                              },
                              "required": [
                                "name"
                              ]
                            },
                            "vaultCert": {
                              "description": "KeyVault Cert secret details.",
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "KeyVault secret name."
                                },
                                "version": {
                                  "type": "string",
                                  "description": "KeyVault secret version."
                                }
                              },
                              "required": [
                                "name"
                              ]
                            }
                          },
                          "required": [
                            "vault",
                            "vaultCert"
                          ]
                        }
                      }
                    },
                    "provisioningState": {
                      "description": "The status of the last operation.",
                      "readOnly": true,
                      "type": "string",
                      "enum": [
                        "Succeeded",
                        "Failed",
                        "Canceled",
                        "Provisioning",
                        "Updating",
                        "Deleting",
                        "Accepted"
                      ],
                      "x-ms-enum": {
                        "name": "ProvisioningState",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Succeeded",
                            "value": "Succeeded",
                            "description": "Resource has been created."
                          },
                          {
                            "name": "Failed",
                            "value": "Failed",
                            "description": "Resource creation failed."
                          },
                          {
                            "name": "Canceled",
                            "value": "Canceled",
                            "description": "Resource creation was canceled."
                          },
                          {
                            "name": "Provisioning",
                            "value": "Provisioning",
                            "description": "Resource is getting provisioned."
                          },
                          {
                            "name": "Updating",
                            "value": "Updating",
                            "description": "Resource is Updating."
                          },
                          {
                            "name": "Deleting",
                            "value": "Deleting",
                            "description": "Resource is Deleting."
                          },
                          {
                            "name": "Accepted",
                            "value": "Accepted",
                            "description": "Resource has been Accepted."
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "brokerRef",
                    "port"
                  ]
                },
                "extendedLocation": {
                  "description": "Extended Location",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ],
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The name of the extended location."
                    },
                    "type": {
                      "description": "Type of ExtendedLocation.",
                      "type": "string",
                      "enum": [
                        "CustomLocation"
                      ],
                      "x-ms-enum": {
                        "name": "ExtendedLocationType",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "CustomLocation",
                            "value": "CustomLocation",
                            "description": "CustomLocation type"
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "name",
                    "type"
                  ]
                }
              },
              "required": [
                "extendedLocation"
              ]
            },
            "headers": {
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "BrokerListener_Update",
        "tags": [
          "BrokerListener"
        ],
        "description": "Update a BrokerListenerResource",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group. The name is case insensitive.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "x-ms-parameter-location": "method"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "brokerName",
            "in": "path",
            "description": "Name of MQ broker resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "listenerName",
            "in": "path",
            "description": "Name of MQ broker/listener resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "properties",
            "in": "body",
            "description": "The resource properties to be updated.",
            "required": true,
            "schema": {
              "type": "object",
              "description": "The type used for update operations of the BrokerListenerResource.",
              "properties": {
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "authenticationEnabled": {
                      "type": "boolean",
                      "description": "The flag for enabling Authentication rules on Listener Port.",
                      "default": false
                    },
                    "authorizationEnabled": {
                      "type": "boolean",
                      "description": "The flag for enabling Authorization policies on Listener Port. false - AllowAll, true - Use Authorization resource rules if present.",
                      "default": false
                    },
                    "brokerRef": {
                      "type": "string",
                      "description": "The k8s cr/resource reference of mq/broker."
                    },
                    "nodePort": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The node port to use on the Host node.",
                      "minimum": 0,
                      "maximum": 65535
                    },
                    "port": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The port to start Listening for connections on.",
                      "minimum": 0,
                      "maximum": 65535
                    },
                    "serviceName": {
                      "type": "string",
                      "description": "The service name to expose Listener port on.",
                      "default": "aio-mq-dmqtt-frontend"
                    },
                    "serviceType": {
                      "type": "string",
                      "description": "The Kubernetes Service type to deploy for Listener.",
                      "default": "clusterIp",
                      "enum": [
                        "clusterIp",
                        "loadBalancer",
                        "nodePort"
                      ],
                      "x-ms-enum": {
                        "name": "ServiceType",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "clusterIp",
                            "value": "clusterIp",
                            "description": "Cluster IP Service."
                          },
                          {
                            "name": "loadBalancer",
                            "value": "loadBalancer",
                            "description": "Load Balancer Service."
                          },
                          {
                            "name": "nodePort",
                            "value": "nodePort",
                            "description": "Node Port Service."
                          }
                        ]
                      }
                    },
                    "tls": {
                      "description": "Defines configuration of a TLS server certificate. NOTE Enum - Only one TLS Cert method is supported",
                      "type": "object",
                      "properties": {
                        "automatic": {
                          "description": "Option 1 - Automatic TLS server certificate management with cert-manager.",
                          "type": "object",
                          "properties": {
                            "duration": {
                              "type": "string",
                              "description": "Lifetime of automatically-managed certificate.",
                              "default": "720h"
                            },
                            "issuerRef": {
                              "description": "cert-manager issuerRef.",
                              "type": "object",
                              "properties": {
                                "group": {
                                  "type": "string",
                                  "description": "group of issuer.",
                                  "default": "cert-manager.io"
                                },
                                "kind": {
                                  "type": "string",
                                  "description": "kind of issuer (Issuer or ClusterIssuer)."
                                },
                                "name": {
                                  "type": "string",
                                  "description": "name of issuer."
                                }
                              }
                            },
                            "privateKey": {
                              "description": "Cert Manager private key.",
                              "type": "object",
                              "properties": {
                                "algorithm": {
                                  "type": "string",
                                  "description": "algorithm for private key.",
                                  "default": "ECDSA"
                                },
                                "rotationPolicy": {
                                  "type": "string",
                                  "description": "cert-manager rotationPolicy.",
                                  "default": "Always"
                                },
                                "size": {
                                  "type": "integer",
                                  "format": "int32",
                                  "description": "size of private key.",
                                  "default": 256,
                                  "minimum": 0,
                                  "maximum": 65535
                                }
                              }
                            },
                            "renewBefore": {
                              "type": "string",
                              "description": "When to begin renewing automatically-managed certificate.",
                              "default": "240h"
                            },
                            "san": {
                              "description": "Additional SANs to include in the certificate.",
                              "type": "object",
                              "properties": {
                                "dns": {
                                  "type": "array",
                                  "description": "DNS SANs.",
                                  "default": [],
                                  "items": {
                                    "type": "string"
                                  }
                                },
                                "ip": {
                                  "type": "array",
                                  "description": "IP address SANs.",
                                  "default": [],
                                  "items": {
                                    "type": "string"
                                  }
                                }
                              }
                            },
                            "secretName": {
                              "type": "string",
                              "description": "Secret for storing server certificate. Any existing data will be overwritten."
                            },
                            "secretNamespace": {
                              "type": "string",
                              "description": "Certificate K8S namespace. Omit to use default namespace."
                            }
                          }
                        },
                        "manual": {
                          "description": "Option 2 - Manual TLS server certificate management through a defined secret.",
                          "type": "object",
                          "properties": {
                            "secretName": {
                              "type": "string",
                              "description": "secret containing TLS cert."
                            },
                            "secretNamespace": {
                              "type": "string",
                              "description": "namespace of secret; omit to use default namespace."
                            }
                          }
                        },
                        "keyVault": {
                          "description": "Option 3 - TLS server certificate retrieved from Key Vault..",
                          "type": "object",
                          "properties": {
                            "vault": {
                              "description": "KeyVault properties.",
                              "type": "object",
                              "properties": {
                                "credentials": {
                                  "description": "KeyVault credentials.",
                                  "type": "object",
                                  "properties": {
                                    "servicePrincipalLocalSecretName": {
                                      "type": "string",
                                      "description": "KeyVault service principal local secret name."
                                    }
                                  }
                                },
                                "directoryId": {
                                  "type": "string",
                                  "description": "KeyVault directoryId."
                                },
                                "name": {
                                  "type": "string",
                                  "description": "KeyVault name."
                                }
                              }
                            },
                            "vaultCaChainSecret": {
                              "description": "KeyVault CA chain secret details.",
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "KeyVault secret name."
                                },
                                "version": {
                                  "type": "string",
                                  "description": "KeyVault secret version."
                                }
                              }
                            },
                            "vaultCert": {
                              "description": "KeyVault Cert secret details.",
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "KeyVault secret name."
                                },
                                "version": {
                                  "type": "string",
                                  "description": "KeyVault secret version."
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "type": "object",
              "description": "MQ broker/listener resource",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "description": "The name of the resource",
                  "readOnly": true
                },
                "type": {
                  "type": "string",
                  "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                  "readOnly": true
                },
                "systemData": {
                  "type": "object",
                  "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                  "readOnly": true,
                  "properties": {
                    "createdBy": {
                      "type": "string",
                      "description": "The identity that created the resource."
                    },
                    "createdByType": {
                      "type": "string",
                      "description": "The type of identity that created the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource creation (UTC)."
                    },
                    "lastModifiedBy": {
                      "type": "string",
                      "description": "The identity that last modified the resource."
                    },
                    "lastModifiedByType": {
                      "type": "string",
                      "description": "The type of identity that last modified the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "lastModifiedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource last modification (UTC)"
                    }
                  }
                },
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "x-ms-mutability": [
                    "read",
                    "create",
                    "update"
                  ]
                },
                "location": {
                  "type": "string",
                  "description": "The geo-location where the resource lives",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ]
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "authenticationEnabled": {
                      "type": "boolean",
                      "description": "The flag for enabling Authentication rules on Listener Port.",
                      "default": false
                    },
                    "authorizationEnabled": {
                      "type": "boolean",
                      "description": "The flag for enabling Authorization policies on Listener Port. false - AllowAll, true - Use Authorization resource rules if present.",
                      "default": false
                    },
                    "brokerRef": {
                      "type": "string",
                      "description": "The k8s cr/resource reference of mq/broker."
                    },
                    "nodePort": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The node port to use on the Host node.",
                      "minimum": 0,
                      "maximum": 65535
                    },
                    "port": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The port to start Listening for connections on.",
                      "minimum": 0,
                      "maximum": 65535
                    },
                    "serviceName": {
                      "type": "string",
                      "description": "The service name to expose Listener port on.",
                      "default": "aio-mq-dmqtt-frontend"
                    },
                    "serviceType": {
                      "type": "string",
                      "description": "The Kubernetes Service type to deploy for Listener.",
                      "default": "clusterIp",
                      "enum": [
                        "clusterIp",
                        "loadBalancer",
                        "nodePort"
                      ],
                      "x-ms-enum": {
                        "name": "ServiceType",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "clusterIp",
                            "value": "clusterIp",
                            "description": "Cluster IP Service."
                          },
                          {
                            "name": "loadBalancer",
                            "value": "loadBalancer",
                            "description": "Load Balancer Service."
                          },
                          {
                            "name": "nodePort",
                            "value": "nodePort",
                            "description": "Node Port Service."
                          }
                        ]
                      }
                    },
                    "tls": {
                      "description": "Defines configuration of a TLS server certificate. NOTE Enum - Only one TLS Cert method is supported",
                      "type": "object",
                      "properties": {
                        "automatic": {
                          "description": "Option 1 - Automatic TLS server certificate management with cert-manager.",
                          "type": "object",
                          "properties": {
                            "duration": {
                              "type": "string",
                              "description": "Lifetime of automatically-managed certificate.",
                              "default": "720h"
                            },
                            "issuerRef": {
                              "description": "cert-manager issuerRef.",
                              "type": "object",
                              "properties": {
                                "group": {
                                  "type": "string",
                                  "description": "group of issuer.",
                                  "default": "cert-manager.io"
                                },
                                "kind": {
                                  "type": "string",
                                  "description": "kind of issuer (Issuer or ClusterIssuer)."
                                },
                                "name": {
                                  "type": "string",
                                  "description": "name of issuer."
                                }
                              },
                              "required": [
                                "group",
                                "kind",
                                "name"
                              ]
                            },
                            "privateKey": {
                              "description": "Cert Manager private key.",
                              "type": "object",
                              "properties": {
                                "algorithm": {
                                  "type": "string",
                                  "description": "algorithm for private key.",
                                  "default": "ECDSA"
                                },
                                "rotationPolicy": {
                                  "type": "string",
                                  "description": "cert-manager rotationPolicy.",
                                  "default": "Always"
                                },
                                "size": {
                                  "type": "integer",
                                  "format": "int32",
                                  "description": "size of private key.",
                                  "default": 256,
                                  "minimum": 0,
                                  "maximum": 65535
                                }
                              },
                              "required": [
                                "algorithm",
                                "rotationPolicy",
                                "size"
                              ]
                            },
                            "renewBefore": {
                              "type": "string",
                              "description": "When to begin renewing automatically-managed certificate.",
                              "default": "240h"
                            },
                            "san": {
                              "description": "Additional SANs to include in the certificate.",
                              "type": "object",
                              "properties": {
                                "dns": {
                                  "type": "array",
                                  "description": "DNS SANs.",
                                  "default": [],
                                  "items": {
                                    "type": "string"
                                  }
                                },
                                "ip": {
                                  "type": "array",
                                  "description": "IP address SANs.",
                                  "default": [],
                                  "items": {
                                    "type": "string"
                                  }
                                }
                              },
                              "required": [
                                "dns",
                                "ip"
                              ]
                            },
                            "secretName": {
                              "type": "string",
                              "description": "Secret for storing server certificate. Any existing data will be overwritten."
                            },
                            "secretNamespace": {
                              "type": "string",
                              "description": "Certificate K8S namespace. Omit to use default namespace."
                            }
                          },
                          "required": [
                            "issuerRef"
                          ]
                        },
                        "manual": {
                          "description": "Option 2 - Manual TLS server certificate management through a defined secret.",
                          "type": "object",
                          "properties": {
                            "secretName": {
                              "type": "string",
                              "description": "secret containing TLS cert."
                            },
                            "secretNamespace": {
                              "type": "string",
                              "description": "namespace of secret; omit to use default namespace."
                            }
                          },
                          "required": [
                            "secretName"
                          ]
                        },
                        "keyVault": {
                          "description": "Option 3 - TLS server certificate retrieved from Key Vault..",
                          "type": "object",
                          "properties": {
                            "vault": {
                              "description": "KeyVault properties.",
                              "type": "object",
                              "properties": {
                                "credentials": {
                                  "description": "KeyVault credentials.",
                                  "type": "object",
                                  "properties": {
                                    "servicePrincipalLocalSecretName": {
                                      "type": "string",
                                      "description": "KeyVault service principal local secret name."
                                    }
                                  },
                                  "required": [
                                    "servicePrincipalLocalSecretName"
                                  ]
                                },
                                "directoryId": {
                                  "type": "string",
                                  "description": "KeyVault directoryId."
                                },
                                "name": {
                                  "type": "string",
                                  "description": "KeyVault name."
                                }
                              },
                              "required": [
                                "credentials",
                                "directoryId",
                                "name"
                              ]
                            },
                            "vaultCaChainSecret": {
                              "description": "KeyVault CA chain secret details.",
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "KeyVault secret name."
                                },
                                "version": {
                                  "type": "string",
                                  "description": "KeyVault secret version."
                                }
                              },
                              "required": [
                                "name"
                              ]
                            },
                            "vaultCert": {
                              "description": "KeyVault Cert secret details.",
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "KeyVault secret name."
                                },
                                "version": {
                                  "type": "string",
                                  "description": "KeyVault secret version."
                                }
                              },
                              "required": [
                                "name"
                              ]
                            }
                          },
                          "required": [
                            "vault",
                            "vaultCert"
                          ]
                        }
                      }
                    },
                    "provisioningState": {
                      "description": "The status of the last operation.",
                      "readOnly": true,
                      "type": "string",
                      "enum": [
                        "Succeeded",
                        "Failed",
                        "Canceled",
                        "Provisioning",
                        "Updating",
                        "Deleting",
                        "Accepted"
                      ],
                      "x-ms-enum": {
                        "name": "ProvisioningState",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Succeeded",
                            "value": "Succeeded",
                            "description": "Resource has been created."
                          },
                          {
                            "name": "Failed",
                            "value": "Failed",
                            "description": "Resource creation failed."
                          },
                          {
                            "name": "Canceled",
                            "value": "Canceled",
                            "description": "Resource creation was canceled."
                          },
                          {
                            "name": "Provisioning",
                            "value": "Provisioning",
                            "description": "Resource is getting provisioned."
                          },
                          {
                            "name": "Updating",
                            "value": "Updating",
                            "description": "Resource is Updating."
                          },
                          {
                            "name": "Deleting",
                            "value": "Deleting",
                            "description": "Resource is Deleting."
                          },
                          {
                            "name": "Accepted",
                            "value": "Accepted",
                            "description": "Resource has been Accepted."
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "brokerRef",
                    "port"
                  ]
                },
                "extendedLocation": {
                  "description": "Extended Location",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ],
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The name of the extended location."
                    },
                    "type": {
                      "description": "Type of ExtendedLocation.",
                      "type": "string",
                      "enum": [
                        "CustomLocation"
                      ],
                      "x-ms-enum": {
                        "name": "ExtendedLocationType",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "CustomLocation",
                            "value": "CustomLocation",
                            "description": "CustomLocation type"
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "name",
                    "type"
                  ]
                }
              },
              "required": [
                "extendedLocation"
              ]
            }
          }
        }
      },
      "delete": {
        "operationId": "BrokerListener_Delete",
        "tags": [
          "BrokerListener"
        ],
        "description": "Delete a BrokerListenerResource",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group. The name is case insensitive.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "x-ms-parameter-location": "method"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "brokerName",
            "in": "path",
            "description": "Name of MQ broker resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "listenerName",
            "in": "path",
            "description": "Name of MQ broker/listener resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          }
        ],
        "responses": {
          "202": {
            "description": "Resource deletion accepted.",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              },
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "204": {
            "description": "Resource does not exist."
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTOperationsMQ/mq/{mqName}/dataLakeConnector": {
      "get": {
        "operationId": "DataLakeConnector_ListByMqResource",
        "tags": [
          "DataLakeConnector"
        ],
        "description": "List DataLakeConnectorResource resources by MqResource",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group. The name is case insensitive.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "x-ms-parameter-location": "method"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "type": "object",
              "description": "The response of a DataLakeConnectorResource list operation.",
              "properties": {
                "value": {
                  "type": "array",
                  "description": "The DataLakeConnectorResource items on this page",
                  "items": {
                    "type": "object",
                    "description": "MQ dataLakeConnector resource",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                        "readOnly": true
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the resource",
                        "readOnly": true
                      },
                      "type": {
                        "type": "string",
                        "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                        "readOnly": true
                      },
                      "systemData": {
                        "type": "object",
                        "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                        "readOnly": true,
                        "properties": {
                          "createdBy": {
                            "type": "string",
                            "description": "The identity that created the resource."
                          },
                          "createdByType": {
                            "type": "string",
                            "description": "The type of identity that created the resource.",
                            "enum": [
                              "User",
                              "Application",
                              "ManagedIdentity",
                              "Key"
                            ],
                            "x-ms-enum": {
                              "name": "createdByType",
                              "modelAsString": true
                            }
                          },
                          "createdAt": {
                            "type": "string",
                            "format": "date-time",
                            "description": "The timestamp of resource creation (UTC)."
                          },
                          "lastModifiedBy": {
                            "type": "string",
                            "description": "The identity that last modified the resource."
                          },
                          "lastModifiedByType": {
                            "type": "string",
                            "description": "The type of identity that last modified the resource.",
                            "enum": [
                              "User",
                              "Application",
                              "ManagedIdentity",
                              "Key"
                            ],
                            "x-ms-enum": {
                              "name": "createdByType",
                              "modelAsString": true
                            }
                          },
                          "lastModifiedAt": {
                            "type": "string",
                            "format": "date-time",
                            "description": "The timestamp of resource last modification (UTC)"
                          }
                        }
                      },
                      "tags": {
                        "type": "object",
                        "description": "Resource tags.",
                        "additionalProperties": {
                          "type": "string"
                        },
                        "x-ms-mutability": [
                          "read",
                          "create",
                          "update"
                        ]
                      },
                      "location": {
                        "type": "string",
                        "description": "The geo-location where the resource lives",
                        "x-ms-mutability": [
                          "read",
                          "create"
                        ]
                      },
                      "properties": {
                        "description": "The resource-specific properties for this resource.",
                        "x-ms-client-flatten": true,
                        "type": "object",
                        "properties": {
                          "databaseFormat": {
                            "description": "DataLake database format to use.",
                            "type": "string",
                            "enum": [
                              "delta",
                              "parquet"
                            ],
                            "x-ms-enum": {
                              "name": "DataLakeDatabaseFormat",
                              "modelAsString": true,
                              "values": [
                                {
                                  "name": "delta",
                                  "value": "delta",
                                  "description": "Delta format."
                                },
                                {
                                  "name": "parquet",
                                  "value": "parquet",
                                  "description": "Parquet format."
                                }
                              ]
                            }
                          },
                          "image": {
                            "description": "The details of DataLakeConnector Docker Image.",
                            "type": "object",
                            "properties": {
                              "pullPolicy": {
                                "type": "string",
                                "description": "Image pull policy."
                              },
                              "pullSecrets": {
                                "type": "string",
                                "description": "Image pull secrets."
                              },
                              "repository": {
                                "type": "string",
                                "description": "The Docker image name."
                              },
                              "tag": {
                                "type": "string",
                                "description": "The Docker  image tag."
                              }
                            },
                            "required": [
                              "repository",
                              "tag"
                            ]
                          },
                          "instances": {
                            "type": "integer",
                            "format": "int32",
                            "description": "The number of DataLakeConnector pods to spin up.",
                            "minimum": 0,
                            "maximum": 65535
                          },
                          "localBrokerConnection": {
                            "description": "The details for connecting with Local Broker.",
                            "type": "object",
                            "properties": {
                              "authentication": {
                                "description": "The authentication methods for LocalBroker connection. NOTE - Enum only one method at a time is supported.",
                                "type": "object",
                                "properties": {
                                  "kubernetes": {
                                    "description": "Kubernetes local broker authentication method.",
                                    "type": "object",
                                    "properties": {
                                      "secretPath": {
                                        "type": "string",
                                        "description": "Secret Path where SAT is mounted.",
                                        "default": "/var/run/serviceaccount/localbroker"
                                      },
                                      "serviceAccountTokenName": {
                                        "type": "string",
                                        "description": "Token name where SAT is mounted on secret path.",
                                        "default": "sat"
                                      }
                                    }
                                  }
                                },
                                "required": [
                                  "kubernetes"
                                ]
                              },
                              "endpoint": {
                                "type": "string",
                                "description": "The endpoint of local broker to connect to.",
                                "default": "aio-mq-dmqtt-frontend:1883"
                              },
                              "tls": {
                                "description": "TLS details for Local broker Connection.",
                                "type": "object",
                                "properties": {
                                  "tlsEnabled": {
                                    "type": "boolean",
                                    "description": "Tls Enabled on Local Broker Connection.",
                                    "default": false
                                  },
                                  "trustedCaCertificateConfigMap": {
                                    "type": "string",
                                    "description": "Trusted CA certificate config map name for Local Broker."
                                  }
                                }
                              }
                            }
                          },
                          "logLevel": {
                            "type": "string",
                            "description": "The log level of the DataLake Connector instances."
                          },
                          "nodeTolerations": {
                            "description": "The Node Tolerations for the DataLake Connector pods.",
                            "type": "object",
                            "properties": {
                              "effect": {
                                "type": "string",
                                "description": "Toleration effect."
                              },
                              "key": {
                                "type": "string",
                                "description": "Toleration key."
                              },
                              "operator": {
                                "type": "string",
                                "description": "Toleration operator like 'Exists', 'Equal' etc."
                              },
                              "value": {
                                "type": "string",
                                "description": "Toleration Value."
                              }
                            },
                            "required": [
                              "effect",
                              "key",
                              "operator",
                              "value"
                            ]
                          },
                          "protocol": {
                            "description": "The protocol to use for connecting with Brokers.",
                            "type": "string",
                            "enum": [
                              "v3",
                              "v5"
                            ],
                            "x-ms-enum": {
                              "name": "MqttProtocol",
                              "modelAsString": true,
                              "values": [
                                {
                                  "name": "v3",
                                  "value": "v3",
                                  "description": "Mqttv3"
                                },
                                {
                                  "name": "v5",
                                  "value": "v5",
                                  "description": "Mqttv5"
                                }
                              ]
                            }
                          },
                          "target": {
                            "description": "The protocol to use for connecting with Brokers. NOTE - Enum only storage is supported at at time.",
                            "type": "object",
                            "properties": {
                              "datalakeStorage": {
                                "description": "DataLake service storage details.",
                                "type": "object",
                                "properties": {
                                  "endpoint": {
                                    "type": "string",
                                    "description": "DataLake service storage endpoint to use."
                                  },
                                  "authentication": {
                                    "description": "DataLake service storage authentication details. NOTE - Enum only one method is supported.",
                                    "type": "object",
                                    "properties": {
                                      "accessTokenSecretName": {
                                        "type": "string",
                                        "description": "Access token secret name."
                                      },
                                      "systemAssignedManagedIdentity": {
                                        "description": "Configuration for managed identity authentication.",
                                        "type": "object",
                                        "properties": {
                                          "audience": {
                                            "type": "string",
                                            "description": "Token audience."
                                          },
                                          "extensionName": {
                                            "type": "string",
                                            "description": "Arc Extension name."
                                          }
                                        },
                                        "required": [
                                          "audience"
                                        ]
                                      }
                                    }
                                  }
                                },
                                "required": [
                                  "endpoint",
                                  "authentication"
                                ]
                              },
                              "localStorage": {
                                "description": "Local storage details.",
                                "type": "object",
                                "properties": {
                                  "volumeName": {
                                    "type": "string",
                                    "description": "Volume name to write to."
                                  }
                                },
                                "required": [
                                  "volumeName"
                                ]
                              },
                              "fabricOneLake": {
                                "description": "Fabric one lake storage details.",
                                "type": "object",
                                "properties": {
                                  "authentication": {
                                    "description": "DataLake fabric storage authentication details.",
                                    "type": "object",
                                    "properties": {
                                      "systemAssignedManagedIdentity": {
                                        "description": "Configuration for managed identity authentication.",
                                        "type": "object",
                                        "properties": {
                                          "audience": {
                                            "type": "string",
                                            "description": "Token audience."
                                          },
                                          "extensionName": {
                                            "type": "string",
                                            "description": "Arc Extension name."
                                          }
                                        },
                                        "required": [
                                          "audience"
                                        ]
                                      }
                                    },
                                    "required": [
                                      "systemAssignedManagedIdentity"
                                    ]
                                  },
                                  "endpoint": {
                                    "type": "string",
                                    "description": "DataLake fabric storage endpoint to use."
                                  },
                                  "fabricPath": {
                                    "description": "Fabric path type to use.",
                                    "type": "string",
                                    "enum": [
                                      "files",
                                      "tables"
                                    ],
                                    "x-ms-enum": {
                                      "name": "FabricPathType",
                                      "modelAsString": true,
                                      "values": [
                                        {
                                          "name": "files",
                                          "value": "files",
                                          "description": "Fabric path type is Files."
                                        },
                                        {
                                          "name": "tables",
                                          "value": "tables",
                                          "description": "Fabric path type is Tables."
                                        }
                                      ]
                                    }
                                  },
                                  "guids": {
                                    "description": "Fabric one lake Guids.",
                                    "type": "object",
                                    "properties": {
                                      "lakehouseGuid": {
                                        "type": "string",
                                        "description": "Fabric one lake house guid."
                                      },
                                      "workspaceGuid": {
                                        "type": "string",
                                        "description": "Fabric one lake workspace guid."
                                      }
                                    },
                                    "required": [
                                      "lakehouseGuid",
                                      "workspaceGuid"
                                    ]
                                  },
                                  "names": {
                                    "description": "Fabric one lake Names.",
                                    "type": "object",
                                    "properties": {
                                      "lakehouseName": {
                                        "type": "string",
                                        "description": "Fabric one lake house name."
                                      },
                                      "workspaceName": {
                                        "type": "string",
                                        "description": "Fabric one lake workspace name."
                                      }
                                    },
                                    "required": [
                                      "lakehouseName",
                                      "workspaceName"
                                    ]
                                  }
                                },
                                "required": [
                                  "authentication",
                                  "endpoint",
                                  "fabricPath"
                                ]
                              }
                            }
                          },
                          "provisioningState": {
                            "description": "The status of the last operation.",
                            "readOnly": true,
                            "type": "string",
                            "enum": [
                              "Succeeded",
                              "Failed",
                              "Canceled",
                              "Provisioning",
                              "Updating",
                              "Deleting",
                              "Accepted"
                            ],
                            "x-ms-enum": {
                              "name": "ProvisioningState",
                              "modelAsString": true,
                              "values": [
                                {
                                  "name": "Succeeded",
                                  "value": "Succeeded",
                                  "description": "Resource has been created."
                                },
                                {
                                  "name": "Failed",
                                  "value": "Failed",
                                  "description": "Resource creation failed."
                                },
                                {
                                  "name": "Canceled",
                                  "value": "Canceled",
                                  "description": "Resource creation was canceled."
                                },
                                {
                                  "name": "Provisioning",
                                  "value": "Provisioning",
                                  "description": "Resource is getting provisioned."
                                },
                                {
                                  "name": "Updating",
                                  "value": "Updating",
                                  "description": "Resource is Updating."
                                },
                                {
                                  "name": "Deleting",
                                  "value": "Deleting",
                                  "description": "Resource is Deleting."
                                },
                                {
                                  "name": "Accepted",
                                  "value": "Accepted",
                                  "description": "Resource has been Accepted."
                                }
                              ]
                            }
                          }
                        },
                        "required": [
                          "databaseFormat",
                          "image",
                          "protocol",
                          "target"
                        ]
                      },
                      "extendedLocation": {
                        "description": "Extended Location",
                        "x-ms-mutability": [
                          "read",
                          "create"
                        ],
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "The name of the extended location."
                          },
                          "type": {
                            "description": "Type of ExtendedLocation.",
                            "type": "string",
                            "enum": [
                              "CustomLocation"
                            ],
                            "x-ms-enum": {
                              "name": "ExtendedLocationType",
                              "modelAsString": true,
                              "values": [
                                {
                                  "name": "CustomLocation",
                                  "value": "CustomLocation",
                                  "description": "CustomLocation type"
                                }
                              ]
                            }
                          }
                        },
                        "required": [
                          "name",
                          "type"
                        ]
                      }
                    },
                    "required": [
                      "extendedLocation"
                    ]
                  }
                },
                "nextLink": {
                  "type": "string",
                  "format": "uri",
                  "description": "The link to the next page of items"
                }
              },
              "required": [
                "value"
              ]
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTOperationsMQ/mq/{mqName}/dataLakeConnector/{dataLakeConnectorName}": {
      "get": {
        "operationId": "DataLakeConnector_Get",
        "tags": [
          "DataLakeConnector"
        ],
        "description": "Get a DataLakeConnectorResource",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group. The name is case insensitive.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "x-ms-parameter-location": "method"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "dataLakeConnectorName",
            "in": "path",
            "description": "Name of MQ dataLakeConnector resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "type": "object",
              "description": "MQ dataLakeConnector resource",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "description": "The name of the resource",
                  "readOnly": true
                },
                "type": {
                  "type": "string",
                  "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                  "readOnly": true
                },
                "systemData": {
                  "type": "object",
                  "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                  "readOnly": true,
                  "properties": {
                    "createdBy": {
                      "type": "string",
                      "description": "The identity that created the resource."
                    },
                    "createdByType": {
                      "type": "string",
                      "description": "The type of identity that created the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource creation (UTC)."
                    },
                    "lastModifiedBy": {
                      "type": "string",
                      "description": "The identity that last modified the resource."
                    },
                    "lastModifiedByType": {
                      "type": "string",
                      "description": "The type of identity that last modified the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "lastModifiedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource last modification (UTC)"
                    }
                  }
                },
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "x-ms-mutability": [
                    "read",
                    "create",
                    "update"
                  ]
                },
                "location": {
                  "type": "string",
                  "description": "The geo-location where the resource lives",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ]
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "databaseFormat": {
                      "description": "DataLake database format to use.",
                      "type": "string",
                      "enum": [
                        "delta",
                        "parquet"
                      ],
                      "x-ms-enum": {
                        "name": "DataLakeDatabaseFormat",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "delta",
                            "value": "delta",
                            "description": "Delta format."
                          },
                          {
                            "name": "parquet",
                            "value": "parquet",
                            "description": "Parquet format."
                          }
                        ]
                      }
                    },
                    "image": {
                      "description": "The details of DataLakeConnector Docker Image.",
                      "type": "object",
                      "properties": {
                        "pullPolicy": {
                          "type": "string",
                          "description": "Image pull policy."
                        },
                        "pullSecrets": {
                          "type": "string",
                          "description": "Image pull secrets."
                        },
                        "repository": {
                          "type": "string",
                          "description": "The Docker image name."
                        },
                        "tag": {
                          "type": "string",
                          "description": "The Docker  image tag."
                        }
                      },
                      "required": [
                        "repository",
                        "tag"
                      ]
                    },
                    "instances": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The number of DataLakeConnector pods to spin up.",
                      "minimum": 0,
                      "maximum": 65535
                    },
                    "localBrokerConnection": {
                      "description": "The details for connecting with Local Broker.",
                      "type": "object",
                      "properties": {
                        "authentication": {
                          "description": "The authentication methods for LocalBroker connection. NOTE - Enum only one method at a time is supported.",
                          "type": "object",
                          "properties": {
                            "kubernetes": {
                              "description": "Kubernetes local broker authentication method.",
                              "type": "object",
                              "properties": {
                                "secretPath": {
                                  "type": "string",
                                  "description": "Secret Path where SAT is mounted.",
                                  "default": "/var/run/serviceaccount/localbroker"
                                },
                                "serviceAccountTokenName": {
                                  "type": "string",
                                  "description": "Token name where SAT is mounted on secret path.",
                                  "default": "sat"
                                }
                              }
                            }
                          },
                          "required": [
                            "kubernetes"
                          ]
                        },
                        "endpoint": {
                          "type": "string",
                          "description": "The endpoint of local broker to connect to.",
                          "default": "aio-mq-dmqtt-frontend:1883"
                        },
                        "tls": {
                          "description": "TLS details for Local broker Connection.",
                          "type": "object",
                          "properties": {
                            "tlsEnabled": {
                              "type": "boolean",
                              "description": "Tls Enabled on Local Broker Connection.",
                              "default": false
                            },
                            "trustedCaCertificateConfigMap": {
                              "type": "string",
                              "description": "Trusted CA certificate config map name for Local Broker."
                            }
                          }
                        }
                      }
                    },
                    "logLevel": {
                      "type": "string",
                      "description": "The log level of the DataLake Connector instances."
                    },
                    "nodeTolerations": {
                      "description": "The Node Tolerations for the DataLake Connector pods.",
                      "type": "object",
                      "properties": {
                        "effect": {
                          "type": "string",
                          "description": "Toleration effect."
                        },
                        "key": {
                          "type": "string",
                          "description": "Toleration key."
                        },
                        "operator": {
                          "type": "string",
                          "description": "Toleration operator like 'Exists', 'Equal' etc."
                        },
                        "value": {
                          "type": "string",
                          "description": "Toleration Value."
                        }
                      },
                      "required": [
                        "effect",
                        "key",
                        "operator",
                        "value"
                      ]
                    },
                    "protocol": {
                      "description": "The protocol to use for connecting with Brokers.",
                      "type": "string",
                      "enum": [
                        "v3",
                        "v5"
                      ],
                      "x-ms-enum": {
                        "name": "MqttProtocol",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "v3",
                            "value": "v3",
                            "description": "Mqttv3"
                          },
                          {
                            "name": "v5",
                            "value": "v5",
                            "description": "Mqttv5"
                          }
                        ]
                      }
                    },
                    "target": {
                      "description": "The protocol to use for connecting with Brokers. NOTE - Enum only storage is supported at at time.",
                      "type": "object",
                      "properties": {
                        "datalakeStorage": {
                          "description": "DataLake service storage details.",
                          "type": "object",
                          "properties": {
                            "endpoint": {
                              "type": "string",
                              "description": "DataLake service storage endpoint to use."
                            },
                            "authentication": {
                              "description": "DataLake service storage authentication details. NOTE - Enum only one method is supported.",
                              "type": "object",
                              "properties": {
                                "accessTokenSecretName": {
                                  "type": "string",
                                  "description": "Access token secret name."
                                },
                                "systemAssignedManagedIdentity": {
                                  "description": "Configuration for managed identity authentication.",
                                  "type": "object",
                                  "properties": {
                                    "audience": {
                                      "type": "string",
                                      "description": "Token audience."
                                    },
                                    "extensionName": {
                                      "type": "string",
                                      "description": "Arc Extension name."
                                    }
                                  },
                                  "required": [
                                    "audience"
                                  ]
                                }
                              }
                            }
                          },
                          "required": [
                            "endpoint",
                            "authentication"
                          ]
                        },
                        "localStorage": {
                          "description": "Local storage details.",
                          "type": "object",
                          "properties": {
                            "volumeName": {
                              "type": "string",
                              "description": "Volume name to write to."
                            }
                          },
                          "required": [
                            "volumeName"
                          ]
                        },
                        "fabricOneLake": {
                          "description": "Fabric one lake storage details.",
                          "type": "object",
                          "properties": {
                            "authentication": {
                              "description": "DataLake fabric storage authentication details.",
                              "type": "object",
                              "properties": {
                                "systemAssignedManagedIdentity": {
                                  "description": "Configuration for managed identity authentication.",
                                  "type": "object",
                                  "properties": {
                                    "audience": {
                                      "type": "string",
                                      "description": "Token audience."
                                    },
                                    "extensionName": {
                                      "type": "string",
                                      "description": "Arc Extension name."
                                    }
                                  },
                                  "required": [
                                    "audience"
                                  ]
                                }
                              },
                              "required": [
                                "systemAssignedManagedIdentity"
                              ]
                            },
                            "endpoint": {
                              "type": "string",
                              "description": "DataLake fabric storage endpoint to use."
                            },
                            "fabricPath": {
                              "description": "Fabric path type to use.",
                              "type": "string",
                              "enum": [
                                "files",
                                "tables"
                              ],
                              "x-ms-enum": {
                                "name": "FabricPathType",
                                "modelAsString": true,
                                "values": [
                                  {
                                    "name": "files",
                                    "value": "files",
                                    "description": "Fabric path type is Files."
                                  },
                                  {
                                    "name": "tables",
                                    "value": "tables",
                                    "description": "Fabric path type is Tables."
                                  }
                                ]
                              }
                            },
                            "guids": {
                              "description": "Fabric one lake Guids.",
                              "type": "object",
                              "properties": {
                                "lakehouseGuid": {
                                  "type": "string",
                                  "description": "Fabric one lake house guid."
                                },
                                "workspaceGuid": {
                                  "type": "string",
                                  "description": "Fabric one lake workspace guid."
                                }
                              },
                              "required": [
                                "lakehouseGuid",
                                "workspaceGuid"
                              ]
                            },
                            "names": {
                              "description": "Fabric one lake Names.",
                              "type": "object",
                              "properties": {
                                "lakehouseName": {
                                  "type": "string",
                                  "description": "Fabric one lake house name."
                                },
                                "workspaceName": {
                                  "type": "string",
                                  "description": "Fabric one lake workspace name."
                                }
                              },
                              "required": [
                                "lakehouseName",
                                "workspaceName"
                              ]
                            }
                          },
                          "required": [
                            "authentication",
                            "endpoint",
                            "fabricPath"
                          ]
                        }
                      }
                    },
                    "provisioningState": {
                      "description": "The status of the last operation.",
                      "readOnly": true,
                      "type": "string",
                      "enum": [
                        "Succeeded",
                        "Failed",
                        "Canceled",
                        "Provisioning",
                        "Updating",
                        "Deleting",
                        "Accepted"
                      ],
                      "x-ms-enum": {
                        "name": "ProvisioningState",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Succeeded",
                            "value": "Succeeded",
                            "description": "Resource has been created."
                          },
                          {
                            "name": "Failed",
                            "value": "Failed",
                            "description": "Resource creation failed."
                          },
                          {
                            "name": "Canceled",
                            "value": "Canceled",
                            "description": "Resource creation was canceled."
                          },
                          {
                            "name": "Provisioning",
                            "value": "Provisioning",
                            "description": "Resource is getting provisioned."
                          },
                          {
                            "name": "Updating",
                            "value": "Updating",
                            "description": "Resource is Updating."
                          },
                          {
                            "name": "Deleting",
                            "value": "Deleting",
                            "description": "Resource is Deleting."
                          },
                          {
                            "name": "Accepted",
                            "value": "Accepted",
                            "description": "Resource has been Accepted."
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "databaseFormat",
                    "image",
                    "protocol",
                    "target"
                  ]
                },
                "extendedLocation": {
                  "description": "Extended Location",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ],
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The name of the extended location."
                    },
                    "type": {
                      "description": "Type of ExtendedLocation.",
                      "type": "string",
                      "enum": [
                        "CustomLocation"
                      ],
                      "x-ms-enum": {
                        "name": "ExtendedLocationType",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "CustomLocation",
                            "value": "CustomLocation",
                            "description": "CustomLocation type"
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "name",
                    "type"
                  ]
                }
              },
              "required": [
                "extendedLocation"
              ]
            }
          }
        }
      },
      "put": {
        "operationId": "DataLakeConnector_CreateOrUpdate",
        "tags": [
          "DataLakeConnector"
        ],
        "description": "Create a DataLakeConnectorResource",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group. The name is case insensitive.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "x-ms-parameter-location": "method"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "dataLakeConnectorName",
            "in": "path",
            "description": "Name of MQ dataLakeConnector resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "resource",
            "in": "body",
            "description": "Resource create parameters.",
            "required": true,
            "schema": {
              "type": "object",
              "description": "MQ dataLakeConnector resource",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "description": "The name of the resource",
                  "readOnly": true
                },
                "type": {
                  "type": "string",
                  "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                  "readOnly": true
                },
                "systemData": {
                  "type": "object",
                  "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                  "readOnly": true,
                  "properties": {
                    "createdBy": {
                      "type": "string",
                      "description": "The identity that created the resource."
                    },
                    "createdByType": {
                      "type": "string",
                      "description": "The type of identity that created the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource creation (UTC)."
                    },
                    "lastModifiedBy": {
                      "type": "string",
                      "description": "The identity that last modified the resource."
                    },
                    "lastModifiedByType": {
                      "type": "string",
                      "description": "The type of identity that last modified the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "lastModifiedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource last modification (UTC)"
                    }
                  }
                },
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "x-ms-mutability": [
                    "read",
                    "create",
                    "update"
                  ]
                },
                "location": {
                  "type": "string",
                  "description": "The geo-location where the resource lives",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ]
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "databaseFormat": {
                      "description": "DataLake database format to use.",
                      "type": "string",
                      "enum": [
                        "delta",
                        "parquet"
                      ],
                      "x-ms-enum": {
                        "name": "DataLakeDatabaseFormat",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "delta",
                            "value": "delta",
                            "description": "Delta format."
                          },
                          {
                            "name": "parquet",
                            "value": "parquet",
                            "description": "Parquet format."
                          }
                        ]
                      }
                    },
                    "image": {
                      "description": "The details of DataLakeConnector Docker Image.",
                      "type": "object",
                      "properties": {
                        "pullPolicy": {
                          "type": "string",
                          "description": "Image pull policy."
                        },
                        "pullSecrets": {
                          "type": "string",
                          "description": "Image pull secrets."
                        },
                        "repository": {
                          "type": "string",
                          "description": "The Docker image name."
                        },
                        "tag": {
                          "type": "string",
                          "description": "The Docker  image tag."
                        }
                      },
                      "required": [
                        "repository",
                        "tag"
                      ]
                    },
                    "instances": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The number of DataLakeConnector pods to spin up.",
                      "minimum": 0,
                      "maximum": 65535
                    },
                    "localBrokerConnection": {
                      "description": "The details for connecting with Local Broker.",
                      "type": "object",
                      "properties": {
                        "authentication": {
                          "description": "The authentication methods for LocalBroker connection. NOTE - Enum only one method at a time is supported.",
                          "type": "object",
                          "properties": {
                            "kubernetes": {
                              "description": "Kubernetes local broker authentication method.",
                              "type": "object",
                              "properties": {
                                "secretPath": {
                                  "type": "string",
                                  "description": "Secret Path where SAT is mounted.",
                                  "default": "/var/run/serviceaccount/localbroker"
                                },
                                "serviceAccountTokenName": {
                                  "type": "string",
                                  "description": "Token name where SAT is mounted on secret path.",
                                  "default": "sat"
                                }
                              }
                            }
                          },
                          "required": [
                            "kubernetes"
                          ]
                        },
                        "endpoint": {
                          "type": "string",
                          "description": "The endpoint of local broker to connect to.",
                          "default": "aio-mq-dmqtt-frontend:1883"
                        },
                        "tls": {
                          "description": "TLS details for Local broker Connection.",
                          "type": "object",
                          "properties": {
                            "tlsEnabled": {
                              "type": "boolean",
                              "description": "Tls Enabled on Local Broker Connection.",
                              "default": false
                            },
                            "trustedCaCertificateConfigMap": {
                              "type": "string",
                              "description": "Trusted CA certificate config map name for Local Broker."
                            }
                          }
                        }
                      }
                    },
                    "logLevel": {
                      "type": "string",
                      "description": "The log level of the DataLake Connector instances."
                    },
                    "nodeTolerations": {
                      "description": "The Node Tolerations for the DataLake Connector pods.",
                      "type": "object",
                      "properties": {
                        "effect": {
                          "type": "string",
                          "description": "Toleration effect."
                        },
                        "key": {
                          "type": "string",
                          "description": "Toleration key."
                        },
                        "operator": {
                          "type": "string",
                          "description": "Toleration operator like 'Exists', 'Equal' etc."
                        },
                        "value": {
                          "type": "string",
                          "description": "Toleration Value."
                        }
                      },
                      "required": [
                        "effect",
                        "key",
                        "operator",
                        "value"
                      ]
                    },
                    "protocol": {
                      "description": "The protocol to use for connecting with Brokers.",
                      "type": "string",
                      "enum": [
                        "v3",
                        "v5"
                      ],
                      "x-ms-enum": {
                        "name": "MqttProtocol",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "v3",
                            "value": "v3",
                            "description": "Mqttv3"
                          },
                          {
                            "name": "v5",
                            "value": "v5",
                            "description": "Mqttv5"
                          }
                        ]
                      }
                    },
                    "target": {
                      "description": "The protocol to use for connecting with Brokers. NOTE - Enum only storage is supported at at time.",
                      "type": "object",
                      "properties": {
                        "datalakeStorage": {
                          "description": "DataLake service storage details.",
                          "type": "object",
                          "properties": {
                            "endpoint": {
                              "type": "string",
                              "description": "DataLake service storage endpoint to use."
                            },
                            "authentication": {
                              "description": "DataLake service storage authentication details. NOTE - Enum only one method is supported.",
                              "type": "object",
                              "properties": {
                                "accessTokenSecretName": {
                                  "type": "string",
                                  "description": "Access token secret name."
                                },
                                "systemAssignedManagedIdentity": {
                                  "description": "Configuration for managed identity authentication.",
                                  "type": "object",
                                  "properties": {
                                    "audience": {
                                      "type": "string",
                                      "description": "Token audience."
                                    },
                                    "extensionName": {
                                      "type": "string",
                                      "description": "Arc Extension name."
                                    }
                                  },
                                  "required": [
                                    "audience"
                                  ]
                                }
                              }
                            }
                          },
                          "required": [
                            "endpoint",
                            "authentication"
                          ]
                        },
                        "localStorage": {
                          "description": "Local storage details.",
                          "type": "object",
                          "properties": {
                            "volumeName": {
                              "type": "string",
                              "description": "Volume name to write to."
                            }
                          },
                          "required": [
                            "volumeName"
                          ]
                        },
                        "fabricOneLake": {
                          "description": "Fabric one lake storage details.",
                          "type": "object",
                          "properties": {
                            "authentication": {
                              "description": "DataLake fabric storage authentication details.",
                              "type": "object",
                              "properties": {
                                "systemAssignedManagedIdentity": {
                                  "description": "Configuration for managed identity authentication.",
                                  "type": "object",
                                  "properties": {
                                    "audience": {
                                      "type": "string",
                                      "description": "Token audience."
                                    },
                                    "extensionName": {
                                      "type": "string",
                                      "description": "Arc Extension name."
                                    }
                                  },
                                  "required": [
                                    "audience"
                                  ]
                                }
                              },
                              "required": [
                                "systemAssignedManagedIdentity"
                              ]
                            },
                            "endpoint": {
                              "type": "string",
                              "description": "DataLake fabric storage endpoint to use."
                            },
                            "fabricPath": {
                              "description": "Fabric path type to use.",
                              "type": "string",
                              "enum": [
                                "files",
                                "tables"
                              ],
                              "x-ms-enum": {
                                "name": "FabricPathType",
                                "modelAsString": true,
                                "values": [
                                  {
                                    "name": "files",
                                    "value": "files",
                                    "description": "Fabric path type is Files."
                                  },
                                  {
                                    "name": "tables",
                                    "value": "tables",
                                    "description": "Fabric path type is Tables."
                                  }
                                ]
                              }
                            },
                            "guids": {
                              "description": "Fabric one lake Guids.",
                              "type": "object",
                              "properties": {
                                "lakehouseGuid": {
                                  "type": "string",
                                  "description": "Fabric one lake house guid."
                                },
                                "workspaceGuid": {
                                  "type": "string",
                                  "description": "Fabric one lake workspace guid."
                                }
                              },
                              "required": [
                                "lakehouseGuid",
                                "workspaceGuid"
                              ]
                            },
                            "names": {
                              "description": "Fabric one lake Names.",
                              "type": "object",
                              "properties": {
                                "lakehouseName": {
                                  "type": "string",
                                  "description": "Fabric one lake house name."
                                },
                                "workspaceName": {
                                  "type": "string",
                                  "description": "Fabric one lake workspace name."
                                }
                              },
                              "required": [
                                "lakehouseName",
                                "workspaceName"
                              ]
                            }
                          },
                          "required": [
                            "authentication",
                            "endpoint",
                            "fabricPath"
                          ]
                        }
                      }
                    },
                    "provisioningState": {
                      "description": "The status of the last operation.",
                      "readOnly": true,
                      "type": "string",
                      "enum": [
                        "Succeeded",
                        "Failed",
                        "Canceled",
                        "Provisioning",
                        "Updating",
                        "Deleting",
                        "Accepted"
                      ],
                      "x-ms-enum": {
                        "name": "ProvisioningState",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Succeeded",
                            "value": "Succeeded",
                            "description": "Resource has been created."
                          },
                          {
                            "name": "Failed",
                            "value": "Failed",
                            "description": "Resource creation failed."
                          },
                          {
                            "name": "Canceled",
                            "value": "Canceled",
                            "description": "Resource creation was canceled."
                          },
                          {
                            "name": "Provisioning",
                            "value": "Provisioning",
                            "description": "Resource is getting provisioned."
                          },
                          {
                            "name": "Updating",
                            "value": "Updating",
                            "description": "Resource is Updating."
                          },
                          {
                            "name": "Deleting",
                            "value": "Deleting",
                            "description": "Resource is Deleting."
                          },
                          {
                            "name": "Accepted",
                            "value": "Accepted",
                            "description": "Resource has been Accepted."
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "databaseFormat",
                    "image",
                    "protocol",
                    "target"
                  ]
                },
                "extendedLocation": {
                  "description": "Extended Location",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ],
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The name of the extended location."
                    },
                    "type": {
                      "description": "Type of ExtendedLocation.",
                      "type": "string",
                      "enum": [
                        "CustomLocation"
                      ],
                      "x-ms-enum": {
                        "name": "ExtendedLocationType",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "CustomLocation",
                            "value": "CustomLocation",
                            "description": "CustomLocation type"
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "name",
                    "type"
                  ]
                }
              },
              "required": [
                "extendedLocation"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resource 'DataLakeConnectorResource' update operation succeeded",
            "schema": {
              "type": "object",
              "description": "MQ dataLakeConnector resource",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "description": "The name of the resource",
                  "readOnly": true
                },
                "type": {
                  "type": "string",
                  "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                  "readOnly": true
                },
                "systemData": {
                  "type": "object",
                  "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                  "readOnly": true,
                  "properties": {
                    "createdBy": {
                      "type": "string",
                      "description": "The identity that created the resource."
                    },
                    "createdByType": {
                      "type": "string",
                      "description": "The type of identity that created the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource creation (UTC)."
                    },
                    "lastModifiedBy": {
                      "type": "string",
                      "description": "The identity that last modified the resource."
                    },
                    "lastModifiedByType": {
                      "type": "string",
                      "description": "The type of identity that last modified the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "lastModifiedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource last modification (UTC)"
                    }
                  }
                },
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "x-ms-mutability": [
                    "read",
                    "create",
                    "update"
                  ]
                },
                "location": {
                  "type": "string",
                  "description": "The geo-location where the resource lives",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ]
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "databaseFormat": {
                      "description": "DataLake database format to use.",
                      "type": "string",
                      "enum": [
                        "delta",
                        "parquet"
                      ],
                      "x-ms-enum": {
                        "name": "DataLakeDatabaseFormat",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "delta",
                            "value": "delta",
                            "description": "Delta format."
                          },
                          {
                            "name": "parquet",
                            "value": "parquet",
                            "description": "Parquet format."
                          }
                        ]
                      }
                    },
                    "image": {
                      "description": "The details of DataLakeConnector Docker Image.",
                      "type": "object",
                      "properties": {
                        "pullPolicy": {
                          "type": "string",
                          "description": "Image pull policy."
                        },
                        "pullSecrets": {
                          "type": "string",
                          "description": "Image pull secrets."
                        },
                        "repository": {
                          "type": "string",
                          "description": "The Docker image name."
                        },
                        "tag": {
                          "type": "string",
                          "description": "The Docker  image tag."
                        }
                      },
                      "required": [
                        "repository",
                        "tag"
                      ]
                    },
                    "instances": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The number of DataLakeConnector pods to spin up.",
                      "minimum": 0,
                      "maximum": 65535
                    },
                    "localBrokerConnection": {
                      "description": "The details for connecting with Local Broker.",
                      "type": "object",
                      "properties": {
                        "authentication": {
                          "description": "The authentication methods for LocalBroker connection. NOTE - Enum only one method at a time is supported.",
                          "type": "object",
                          "properties": {
                            "kubernetes": {
                              "description": "Kubernetes local broker authentication method.",
                              "type": "object",
                              "properties": {
                                "secretPath": {
                                  "type": "string",
                                  "description": "Secret Path where SAT is mounted.",
                                  "default": "/var/run/serviceaccount/localbroker"
                                },
                                "serviceAccountTokenName": {
                                  "type": "string",
                                  "description": "Token name where SAT is mounted on secret path.",
                                  "default": "sat"
                                }
                              }
                            }
                          },
                          "required": [
                            "kubernetes"
                          ]
                        },
                        "endpoint": {
                          "type": "string",
                          "description": "The endpoint of local broker to connect to.",
                          "default": "aio-mq-dmqtt-frontend:1883"
                        },
                        "tls": {
                          "description": "TLS details for Local broker Connection.",
                          "type": "object",
                          "properties": {
                            "tlsEnabled": {
                              "type": "boolean",
                              "description": "Tls Enabled on Local Broker Connection.",
                              "default": false
                            },
                            "trustedCaCertificateConfigMap": {
                              "type": "string",
                              "description": "Trusted CA certificate config map name for Local Broker."
                            }
                          }
                        }
                      }
                    },
                    "logLevel": {
                      "type": "string",
                      "description": "The log level of the DataLake Connector instances."
                    },
                    "nodeTolerations": {
                      "description": "The Node Tolerations for the DataLake Connector pods.",
                      "type": "object",
                      "properties": {
                        "effect": {
                          "type": "string",
                          "description": "Toleration effect."
                        },
                        "key": {
                          "type": "string",
                          "description": "Toleration key."
                        },
                        "operator": {
                          "type": "string",
                          "description": "Toleration operator like 'Exists', 'Equal' etc."
                        },
                        "value": {
                          "type": "string",
                          "description": "Toleration Value."
                        }
                      },
                      "required": [
                        "effect",
                        "key",
                        "operator",
                        "value"
                      ]
                    },
                    "protocol": {
                      "description": "The protocol to use for connecting with Brokers.",
                      "type": "string",
                      "enum": [
                        "v3",
                        "v5"
                      ],
                      "x-ms-enum": {
                        "name": "MqttProtocol",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "v3",
                            "value": "v3",
                            "description": "Mqttv3"
                          },
                          {
                            "name": "v5",
                            "value": "v5",
                            "description": "Mqttv5"
                          }
                        ]
                      }
                    },
                    "target": {
                      "description": "The protocol to use for connecting with Brokers. NOTE - Enum only storage is supported at at time.",
                      "type": "object",
                      "properties": {
                        "datalakeStorage": {
                          "description": "DataLake service storage details.",
                          "type": "object",
                          "properties": {
                            "endpoint": {
                              "type": "string",
                              "description": "DataLake service storage endpoint to use."
                            },
                            "authentication": {
                              "description": "DataLake service storage authentication details. NOTE - Enum only one method is supported.",
                              "type": "object",
                              "properties": {
                                "accessTokenSecretName": {
                                  "type": "string",
                                  "description": "Access token secret name."
                                },
                                "systemAssignedManagedIdentity": {
                                  "description": "Configuration for managed identity authentication.",
                                  "type": "object",
                                  "properties": {
                                    "audience": {
                                      "type": "string",
                                      "description": "Token audience."
                                    },
                                    "extensionName": {
                                      "type": "string",
                                      "description": "Arc Extension name."
                                    }
                                  },
                                  "required": [
                                    "audience"
                                  ]
                                }
                              }
                            }
                          },
                          "required": [
                            "endpoint",
                            "authentication"
                          ]
                        },
                        "localStorage": {
                          "description": "Local storage details.",
                          "type": "object",
                          "properties": {
                            "volumeName": {
                              "type": "string",
                              "description": "Volume name to write to."
                            }
                          },
                          "required": [
                            "volumeName"
                          ]
                        },
                        "fabricOneLake": {
                          "description": "Fabric one lake storage details.",
                          "type": "object",
                          "properties": {
                            "authentication": {
                              "description": "DataLake fabric storage authentication details.",
                              "type": "object",
                              "properties": {
                                "systemAssignedManagedIdentity": {
                                  "description": "Configuration for managed identity authentication.",
                                  "type": "object",
                                  "properties": {
                                    "audience": {
                                      "type": "string",
                                      "description": "Token audience."
                                    },
                                    "extensionName": {
                                      "type": "string",
                                      "description": "Arc Extension name."
                                    }
                                  },
                                  "required": [
                                    "audience"
                                  ]
                                }
                              },
                              "required": [
                                "systemAssignedManagedIdentity"
                              ]
                            },
                            "endpoint": {
                              "type": "string",
                              "description": "DataLake fabric storage endpoint to use."
                            },
                            "fabricPath": {
                              "description": "Fabric path type to use.",
                              "type": "string",
                              "enum": [
                                "files",
                                "tables"
                              ],
                              "x-ms-enum": {
                                "name": "FabricPathType",
                                "modelAsString": true,
                                "values": [
                                  {
                                    "name": "files",
                                    "value": "files",
                                    "description": "Fabric path type is Files."
                                  },
                                  {
                                    "name": "tables",
                                    "value": "tables",
                                    "description": "Fabric path type is Tables."
                                  }
                                ]
                              }
                            },
                            "guids": {
                              "description": "Fabric one lake Guids.",
                              "type": "object",
                              "properties": {
                                "lakehouseGuid": {
                                  "type": "string",
                                  "description": "Fabric one lake house guid."
                                },
                                "workspaceGuid": {
                                  "type": "string",
                                  "description": "Fabric one lake workspace guid."
                                }
                              },
                              "required": [
                                "lakehouseGuid",
                                "workspaceGuid"
                              ]
                            },
                            "names": {
                              "description": "Fabric one lake Names.",
                              "type": "object",
                              "properties": {
                                "lakehouseName": {
                                  "type": "string",
                                  "description": "Fabric one lake house name."
                                },
                                "workspaceName": {
                                  "type": "string",
                                  "description": "Fabric one lake workspace name."
                                }
                              },
                              "required": [
                                "lakehouseName",
                                "workspaceName"
                              ]
                            }
                          },
                          "required": [
                            "authentication",
                            "endpoint",
                            "fabricPath"
                          ]
                        }
                      }
                    },
                    "provisioningState": {
                      "description": "The status of the last operation.",
                      "readOnly": true,
                      "type": "string",
                      "enum": [
                        "Succeeded",
                        "Failed",
                        "Canceled",
                        "Provisioning",
                        "Updating",
                        "Deleting",
                        "Accepted"
                      ],
                      "x-ms-enum": {
                        "name": "ProvisioningState",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Succeeded",
                            "value": "Succeeded",
                            "description": "Resource has been created."
                          },
                          {
                            "name": "Failed",
                            "value": "Failed",
                            "description": "Resource creation failed."
                          },
                          {
                            "name": "Canceled",
                            "value": "Canceled",
                            "description": "Resource creation was canceled."
                          },
                          {
                            "name": "Provisioning",
                            "value": "Provisioning",
                            "description": "Resource is getting provisioned."
                          },
                          {
                            "name": "Updating",
                            "value": "Updating",
                            "description": "Resource is Updating."
                          },
                          {
                            "name": "Deleting",
                            "value": "Deleting",
                            "description": "Resource is Deleting."
                          },
                          {
                            "name": "Accepted",
                            "value": "Accepted",
                            "description": "Resource has been Accepted."
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "databaseFormat",
                    "image",
                    "protocol",
                    "target"
                  ]
                },
                "extendedLocation": {
                  "description": "Extended Location",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ],
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The name of the extended location."
                    },
                    "type": {
                      "description": "Type of ExtendedLocation.",
                      "type": "string",
                      "enum": [
                        "CustomLocation"
                      ],
                      "x-ms-enum": {
                        "name": "ExtendedLocationType",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "CustomLocation",
                            "value": "CustomLocation",
                            "description": "CustomLocation type"
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "name",
                    "type"
                  ]
                }
              },
              "required": [
                "extendedLocation"
              ]
            }
          },
          "201": {
            "description": "Resource 'DataLakeConnectorResource' create operation succeeded",
            "schema": {
              "type": "object",
              "description": "MQ dataLakeConnector resource",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "description": "The name of the resource",
                  "readOnly": true
                },
                "type": {
                  "type": "string",
                  "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                  "readOnly": true
                },
                "systemData": {
                  "type": "object",
                  "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                  "readOnly": true,
                  "properties": {
                    "createdBy": {
                      "type": "string",
                      "description": "The identity that created the resource."
                    },
                    "createdByType": {
                      "type": "string",
                      "description": "The type of identity that created the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource creation (UTC)."
                    },
                    "lastModifiedBy": {
                      "type": "string",
                      "description": "The identity that last modified the resource."
                    },
                    "lastModifiedByType": {
                      "type": "string",
                      "description": "The type of identity that last modified the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "lastModifiedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource last modification (UTC)"
                    }
                  }
                },
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "x-ms-mutability": [
                    "read",
                    "create",
                    "update"
                  ]
                },
                "location": {
                  "type": "string",
                  "description": "The geo-location where the resource lives",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ]
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "databaseFormat": {
                      "description": "DataLake database format to use.",
                      "type": "string",
                      "enum": [
                        "delta",
                        "parquet"
                      ],
                      "x-ms-enum": {
                        "name": "DataLakeDatabaseFormat",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "delta",
                            "value": "delta",
                            "description": "Delta format."
                          },
                          {
                            "name": "parquet",
                            "value": "parquet",
                            "description": "Parquet format."
                          }
                        ]
                      }
                    },
                    "image": {
                      "description": "The details of DataLakeConnector Docker Image.",
                      "type": "object",
                      "properties": {
                        "pullPolicy": {
                          "type": "string",
                          "description": "Image pull policy."
                        },
                        "pullSecrets": {
                          "type": "string",
                          "description": "Image pull secrets."
                        },
                        "repository": {
                          "type": "string",
                          "description": "The Docker image name."
                        },
                        "tag": {
                          "type": "string",
                          "description": "The Docker  image tag."
                        }
                      },
                      "required": [
                        "repository",
                        "tag"
                      ]
                    },
                    "instances": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The number of DataLakeConnector pods to spin up.",
                      "minimum": 0,
                      "maximum": 65535
                    },
                    "localBrokerConnection": {
                      "description": "The details for connecting with Local Broker.",
                      "type": "object",
                      "properties": {
                        "authentication": {
                          "description": "The authentication methods for LocalBroker connection. NOTE - Enum only one method at a time is supported.",
                          "type": "object",
                          "properties": {
                            "kubernetes": {
                              "description": "Kubernetes local broker authentication method.",
                              "type": "object",
                              "properties": {
                                "secretPath": {
                                  "type": "string",
                                  "description": "Secret Path where SAT is mounted.",
                                  "default": "/var/run/serviceaccount/localbroker"
                                },
                                "serviceAccountTokenName": {
                                  "type": "string",
                                  "description": "Token name where SAT is mounted on secret path.",
                                  "default": "sat"
                                }
                              }
                            }
                          },
                          "required": [
                            "kubernetes"
                          ]
                        },
                        "endpoint": {
                          "type": "string",
                          "description": "The endpoint of local broker to connect to.",
                          "default": "aio-mq-dmqtt-frontend:1883"
                        },
                        "tls": {
                          "description": "TLS details for Local broker Connection.",
                          "type": "object",
                          "properties": {
                            "tlsEnabled": {
                              "type": "boolean",
                              "description": "Tls Enabled on Local Broker Connection.",
                              "default": false
                            },
                            "trustedCaCertificateConfigMap": {
                              "type": "string",
                              "description": "Trusted CA certificate config map name for Local Broker."
                            }
                          }
                        }
                      }
                    },
                    "logLevel": {
                      "type": "string",
                      "description": "The log level of the DataLake Connector instances."
                    },
                    "nodeTolerations": {
                      "description": "The Node Tolerations for the DataLake Connector pods.",
                      "type": "object",
                      "properties": {
                        "effect": {
                          "type": "string",
                          "description": "Toleration effect."
                        },
                        "key": {
                          "type": "string",
                          "description": "Toleration key."
                        },
                        "operator": {
                          "type": "string",
                          "description": "Toleration operator like 'Exists', 'Equal' etc."
                        },
                        "value": {
                          "type": "string",
                          "description": "Toleration Value."
                        }
                      },
                      "required": [
                        "effect",
                        "key",
                        "operator",
                        "value"
                      ]
                    },
                    "protocol": {
                      "description": "The protocol to use for connecting with Brokers.",
                      "type": "string",
                      "enum": [
                        "v3",
                        "v5"
                      ],
                      "x-ms-enum": {
                        "name": "MqttProtocol",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "v3",
                            "value": "v3",
                            "description": "Mqttv3"
                          },
                          {
                            "name": "v5",
                            "value": "v5",
                            "description": "Mqttv5"
                          }
                        ]
                      }
                    },
                    "target": {
                      "description": "The protocol to use for connecting with Brokers. NOTE - Enum only storage is supported at at time.",
                      "type": "object",
                      "properties": {
                        "datalakeStorage": {
                          "description": "DataLake service storage details.",
                          "type": "object",
                          "properties": {
                            "endpoint": {
                              "type": "string",
                              "description": "DataLake service storage endpoint to use."
                            },
                            "authentication": {
                              "description": "DataLake service storage authentication details. NOTE - Enum only one method is supported.",
                              "type": "object",
                              "properties": {
                                "accessTokenSecretName": {
                                  "type": "string",
                                  "description": "Access token secret name."
                                },
                                "systemAssignedManagedIdentity": {
                                  "description": "Configuration for managed identity authentication.",
                                  "type": "object",
                                  "properties": {
                                    "audience": {
                                      "type": "string",
                                      "description": "Token audience."
                                    },
                                    "extensionName": {
                                      "type": "string",
                                      "description": "Arc Extension name."
                                    }
                                  },
                                  "required": [
                                    "audience"
                                  ]
                                }
                              }
                            }
                          },
                          "required": [
                            "endpoint",
                            "authentication"
                          ]
                        },
                        "localStorage": {
                          "description": "Local storage details.",
                          "type": "object",
                          "properties": {
                            "volumeName": {
                              "type": "string",
                              "description": "Volume name to write to."
                            }
                          },
                          "required": [
                            "volumeName"
                          ]
                        },
                        "fabricOneLake": {
                          "description": "Fabric one lake storage details.",
                          "type": "object",
                          "properties": {
                            "authentication": {
                              "description": "DataLake fabric storage authentication details.",
                              "type": "object",
                              "properties": {
                                "systemAssignedManagedIdentity": {
                                  "description": "Configuration for managed identity authentication.",
                                  "type": "object",
                                  "properties": {
                                    "audience": {
                                      "type": "string",
                                      "description": "Token audience."
                                    },
                                    "extensionName": {
                                      "type": "string",
                                      "description": "Arc Extension name."
                                    }
                                  },
                                  "required": [
                                    "audience"
                                  ]
                                }
                              },
                              "required": [
                                "systemAssignedManagedIdentity"
                              ]
                            },
                            "endpoint": {
                              "type": "string",
                              "description": "DataLake fabric storage endpoint to use."
                            },
                            "fabricPath": {
                              "description": "Fabric path type to use.",
                              "type": "string",
                              "enum": [
                                "files",
                                "tables"
                              ],
                              "x-ms-enum": {
                                "name": "FabricPathType",
                                "modelAsString": true,
                                "values": [
                                  {
                                    "name": "files",
                                    "value": "files",
                                    "description": "Fabric path type is Files."
                                  },
                                  {
                                    "name": "tables",
                                    "value": "tables",
                                    "description": "Fabric path type is Tables."
                                  }
                                ]
                              }
                            },
                            "guids": {
                              "description": "Fabric one lake Guids.",
                              "type": "object",
                              "properties": {
                                "lakehouseGuid": {
                                  "type": "string",
                                  "description": "Fabric one lake house guid."
                                },
                                "workspaceGuid": {
                                  "type": "string",
                                  "description": "Fabric one lake workspace guid."
                                }
                              },
                              "required": [
                                "lakehouseGuid",
                                "workspaceGuid"
                              ]
                            },
                            "names": {
                              "description": "Fabric one lake Names.",
                              "type": "object",
                              "properties": {
                                "lakehouseName": {
                                  "type": "string",
                                  "description": "Fabric one lake house name."
                                },
                                "workspaceName": {
                                  "type": "string",
                                  "description": "Fabric one lake workspace name."
                                }
                              },
                              "required": [
                                "lakehouseName",
                                "workspaceName"
                              ]
                            }
                          },
                          "required": [
                            "authentication",
                            "endpoint",
                            "fabricPath"
                          ]
                        }
                      }
                    },
                    "provisioningState": {
                      "description": "The status of the last operation.",
                      "readOnly": true,
                      "type": "string",
                      "enum": [
                        "Succeeded",
                        "Failed",
                        "Canceled",
                        "Provisioning",
                        "Updating",
                        "Deleting",
                        "Accepted"
                      ],
                      "x-ms-enum": {
                        "name": "ProvisioningState",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Succeeded",
                            "value": "Succeeded",
                            "description": "Resource has been created."
                          },
                          {
                            "name": "Failed",
                            "value": "Failed",
                            "description": "Resource creation failed."
                          },
                          {
                            "name": "Canceled",
                            "value": "Canceled",
                            "description": "Resource creation was canceled."
                          },
                          {
                            "name": "Provisioning",
                            "value": "Provisioning",
                            "description": "Resource is getting provisioned."
                          },
                          {
                            "name": "Updating",
                            "value": "Updating",
                            "description": "Resource is Updating."
                          },
                          {
                            "name": "Deleting",
                            "value": "Deleting",
                            "description": "Resource is Deleting."
                          },
                          {
                            "name": "Accepted",
                            "value": "Accepted",
                            "description": "Resource has been Accepted."
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "databaseFormat",
                    "image",
                    "protocol",
                    "target"
                  ]
                },
                "extendedLocation": {
                  "description": "Extended Location",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ],
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The name of the extended location."
                    },
                    "type": {
                      "description": "Type of ExtendedLocation.",
                      "type": "string",
                      "enum": [
                        "CustomLocation"
                      ],
                      "x-ms-enum": {
                        "name": "ExtendedLocationType",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "CustomLocation",
                            "value": "CustomLocation",
                            "description": "CustomLocation type"
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "name",
                    "type"
                  ]
                }
              },
              "required": [
                "extendedLocation"
              ]
            },
            "headers": {
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "DataLakeConnector_Update",
        "tags": [
          "DataLakeConnector"
        ],
        "description": "Update a DataLakeConnectorResource",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group. The name is case insensitive.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "x-ms-parameter-location": "method"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "dataLakeConnectorName",
            "in": "path",
            "description": "Name of MQ dataLakeConnector resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "properties",
            "in": "body",
            "description": "The resource properties to be updated.",
            "required": true,
            "schema": {
              "type": "object",
              "description": "The type used for update operations of the DataLakeConnectorResource.",
              "properties": {
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "databaseFormat": {
                      "description": "DataLake database format to use.",
                      "type": "string",
                      "enum": [
                        "delta",
                        "parquet"
                      ],
                      "x-ms-enum": {
                        "name": "DataLakeDatabaseFormat",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "delta",
                            "value": "delta",
                            "description": "Delta format."
                          },
                          {
                            "name": "parquet",
                            "value": "parquet",
                            "description": "Parquet format."
                          }
                        ]
                      }
                    },
                    "image": {
                      "description": "The details of DataLakeConnector Docker Image.",
                      "type": "object",
                      "properties": {
                        "pullPolicy": {
                          "type": "string",
                          "description": "Image pull policy."
                        },
                        "pullSecrets": {
                          "type": "string",
                          "description": "Image pull secrets."
                        },
                        "repository": {
                          "type": "string",
                          "description": "The Docker image name."
                        },
                        "tag": {
                          "type": "string",
                          "description": "The Docker  image tag."
                        }
                      }
                    },
                    "instances": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The number of DataLakeConnector pods to spin up.",
                      "minimum": 0,
                      "maximum": 65535
                    },
                    "localBrokerConnection": {
                      "description": "The details for connecting with Local Broker.",
                      "type": "object",
                      "properties": {
                        "authentication": {
                          "description": "The authentication methods for LocalBroker connection. NOTE - Enum only one method at a time is supported.",
                          "type": "object",
                          "properties": {
                            "kubernetes": {
                              "description": "Kubernetes local broker authentication method.",
                              "type": "object",
                              "properties": {
                                "secretPath": {
                                  "type": "string",
                                  "description": "Secret Path where SAT is mounted.",
                                  "default": "/var/run/serviceaccount/localbroker"
                                },
                                "serviceAccountTokenName": {
                                  "type": "string",
                                  "description": "Token name where SAT is mounted on secret path.",
                                  "default": "sat"
                                }
                              }
                            }
                          }
                        },
                        "endpoint": {
                          "type": "string",
                          "description": "The endpoint of local broker to connect to.",
                          "default": "aio-mq-dmqtt-frontend:1883"
                        },
                        "tls": {
                          "description": "TLS details for Local broker Connection.",
                          "type": "object",
                          "properties": {
                            "tlsEnabled": {
                              "type": "boolean",
                              "description": "Tls Enabled on Local Broker Connection.",
                              "default": false
                            },
                            "trustedCaCertificateConfigMap": {
                              "type": "string",
                              "description": "Trusted CA certificate config map name for Local Broker."
                            }
                          }
                        }
                      }
                    },
                    "logLevel": {
                      "type": "string",
                      "description": "The log level of the DataLake Connector instances."
                    },
                    "nodeTolerations": {
                      "description": "The Node Tolerations for the DataLake Connector pods.",
                      "type": "object",
                      "properties": {
                        "effect": {
                          "type": "string",
                          "description": "Toleration effect."
                        },
                        "key": {
                          "type": "string",
                          "description": "Toleration key."
                        },
                        "operator": {
                          "type": "string",
                          "description": "Toleration operator like 'Exists', 'Equal' etc."
                        },
                        "value": {
                          "type": "string",
                          "description": "Toleration Value."
                        }
                      }
                    },
                    "protocol": {
                      "description": "The protocol to use for connecting with Brokers.",
                      "type": "string",
                      "enum": [
                        "v3",
                        "v5"
                      ],
                      "x-ms-enum": {
                        "name": "MqttProtocol",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "v3",
                            "value": "v3",
                            "description": "Mqttv3"
                          },
                          {
                            "name": "v5",
                            "value": "v5",
                            "description": "Mqttv5"
                          }
                        ]
                      }
                    },
                    "target": {
                      "description": "The protocol to use for connecting with Brokers. NOTE - Enum only storage is supported at at time.",
                      "type": "object",
                      "properties": {
                        "datalakeStorage": {
                          "description": "DataLake service storage details.",
                          "type": "object",
                          "properties": {
                            "endpoint": {
                              "type": "string",
                              "description": "DataLake service storage endpoint to use."
                            },
                            "authentication": {
                              "description": "DataLake service storage authentication details. NOTE - Enum only one method is supported.",
                              "type": "object",
                              "properties": {
                                "accessTokenSecretName": {
                                  "type": "string",
                                  "description": "Access token secret name."
                                },
                                "systemAssignedManagedIdentity": {
                                  "description": "Configuration for managed identity authentication.",
                                  "type": "object",
                                  "properties": {
                                    "audience": {
                                      "type": "string",
                                      "description": "Token audience."
                                    },
                                    "extensionName": {
                                      "type": "string",
                                      "description": "Arc Extension name."
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "localStorage": {
                          "description": "Local storage details.",
                          "type": "object",
                          "properties": {
                            "volumeName": {
                              "type": "string",
                              "description": "Volume name to write to."
                            }
                          }
                        },
                        "fabricOneLake": {
                          "description": "Fabric one lake storage details.",
                          "type": "object",
                          "properties": {
                            "authentication": {
                              "description": "DataLake fabric storage authentication details.",
                              "type": "object",
                              "properties": {
                                "systemAssignedManagedIdentity": {
                                  "description": "Configuration for managed identity authentication.",
                                  "type": "object",
                                  "properties": {
                                    "audience": {
                                      "type": "string",
                                      "description": "Token audience."
                                    },
                                    "extensionName": {
                                      "type": "string",
                                      "description": "Arc Extension name."
                                    }
                                  }
                                }
                              }
                            },
                            "endpoint": {
                              "type": "string",
                              "description": "DataLake fabric storage endpoint to use."
                            },
                            "fabricPath": {
                              "description": "Fabric path type to use.",
                              "type": "string",
                              "enum": [
                                "files",
                                "tables"
                              ],
                              "x-ms-enum": {
                                "name": "FabricPathType",
                                "modelAsString": true,
                                "values": [
                                  {
                                    "name": "files",
                                    "value": "files",
                                    "description": "Fabric path type is Files."
                                  },
                                  {
                                    "name": "tables",
                                    "value": "tables",
                                    "description": "Fabric path type is Tables."
                                  }
                                ]
                              }
                            },
                            "guids": {
                              "description": "Fabric one lake Guids.",
                              "type": "object",
                              "properties": {
                                "lakehouseGuid": {
                                  "type": "string",
                                  "description": "Fabric one lake house guid."
                                },
                                "workspaceGuid": {
                                  "type": "string",
                                  "description": "Fabric one lake workspace guid."
                                }
                              }
                            },
                            "names": {
                              "description": "Fabric one lake Names.",
                              "type": "object",
                              "properties": {
                                "lakehouseName": {
                                  "type": "string",
                                  "description": "Fabric one lake house name."
                                },
                                "workspaceName": {
                                  "type": "string",
                                  "description": "Fabric one lake workspace name."
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "type": "object",
              "description": "MQ dataLakeConnector resource",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "description": "The name of the resource",
                  "readOnly": true
                },
                "type": {
                  "type": "string",
                  "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                  "readOnly": true
                },
                "systemData": {
                  "type": "object",
                  "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                  "readOnly": true,
                  "properties": {
                    "createdBy": {
                      "type": "string",
                      "description": "The identity that created the resource."
                    },
                    "createdByType": {
                      "type": "string",
                      "description": "The type of identity that created the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource creation (UTC)."
                    },
                    "lastModifiedBy": {
                      "type": "string",
                      "description": "The identity that last modified the resource."
                    },
                    "lastModifiedByType": {
                      "type": "string",
                      "description": "The type of identity that last modified the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "lastModifiedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource last modification (UTC)"
                    }
                  }
                },
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "x-ms-mutability": [
                    "read",
                    "create",
                    "update"
                  ]
                },
                "location": {
                  "type": "string",
                  "description": "The geo-location where the resource lives",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ]
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "databaseFormat": {
                      "description": "DataLake database format to use.",
                      "type": "string",
                      "enum": [
                        "delta",
                        "parquet"
                      ],
                      "x-ms-enum": {
                        "name": "DataLakeDatabaseFormat",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "delta",
                            "value": "delta",
                            "description": "Delta format."
                          },
                          {
                            "name": "parquet",
                            "value": "parquet",
                            "description": "Parquet format."
                          }
                        ]
                      }
                    },
                    "image": {
                      "description": "The details of DataLakeConnector Docker Image.",
                      "type": "object",
                      "properties": {
                        "pullPolicy": {
                          "type": "string",
                          "description": "Image pull policy."
                        },
                        "pullSecrets": {
                          "type": "string",
                          "description": "Image pull secrets."
                        },
                        "repository": {
                          "type": "string",
                          "description": "The Docker image name."
                        },
                        "tag": {
                          "type": "string",
                          "description": "The Docker  image tag."
                        }
                      },
                      "required": [
                        "repository",
                        "tag"
                      ]
                    },
                    "instances": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The number of DataLakeConnector pods to spin up.",
                      "minimum": 0,
                      "maximum": 65535
                    },
                    "localBrokerConnection": {
                      "description": "The details for connecting with Local Broker.",
                      "type": "object",
                      "properties": {
                        "authentication": {
                          "description": "The authentication methods for LocalBroker connection. NOTE - Enum only one method at a time is supported.",
                          "type": "object",
                          "properties": {
                            "kubernetes": {
                              "description": "Kubernetes local broker authentication method.",
                              "type": "object",
                              "properties": {
                                "secretPath": {
                                  "type": "string",
                                  "description": "Secret Path where SAT is mounted.",
                                  "default": "/var/run/serviceaccount/localbroker"
                                },
                                "serviceAccountTokenName": {
                                  "type": "string",
                                  "description": "Token name where SAT is mounted on secret path.",
                                  "default": "sat"
                                }
                              }
                            }
                          },
                          "required": [
                            "kubernetes"
                          ]
                        },
                        "endpoint": {
                          "type": "string",
                          "description": "The endpoint of local broker to connect to.",
                          "default": "aio-mq-dmqtt-frontend:1883"
                        },
                        "tls": {
                          "description": "TLS details for Local broker Connection.",
                          "type": "object",
                          "properties": {
                            "tlsEnabled": {
                              "type": "boolean",
                              "description": "Tls Enabled on Local Broker Connection.",
                              "default": false
                            },
                            "trustedCaCertificateConfigMap": {
                              "type": "string",
                              "description": "Trusted CA certificate config map name for Local Broker."
                            }
                          }
                        }
                      }
                    },
                    "logLevel": {
                      "type": "string",
                      "description": "The log level of the DataLake Connector instances."
                    },
                    "nodeTolerations": {
                      "description": "The Node Tolerations for the DataLake Connector pods.",
                      "type": "object",
                      "properties": {
                        "effect": {
                          "type": "string",
                          "description": "Toleration effect."
                        },
                        "key": {
                          "type": "string",
                          "description": "Toleration key."
                        },
                        "operator": {
                          "type": "string",
                          "description": "Toleration operator like 'Exists', 'Equal' etc."
                        },
                        "value": {
                          "type": "string",
                          "description": "Toleration Value."
                        }
                      },
                      "required": [
                        "effect",
                        "key",
                        "operator",
                        "value"
                      ]
                    },
                    "protocol": {
                      "description": "The protocol to use for connecting with Brokers.",
                      "type": "string",
                      "enum": [
                        "v3",
                        "v5"
                      ],
                      "x-ms-enum": {
                        "name": "MqttProtocol",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "v3",
                            "value": "v3",
                            "description": "Mqttv3"
                          },
                          {
                            "name": "v5",
                            "value": "v5",
                            "description": "Mqttv5"
                          }
                        ]
                      }
                    },
                    "target": {
                      "description": "The protocol to use for connecting with Brokers. NOTE - Enum only storage is supported at at time.",
                      "type": "object",
                      "properties": {
                        "datalakeStorage": {
                          "description": "DataLake service storage details.",
                          "type": "object",
                          "properties": {
                            "endpoint": {
                              "type": "string",
                              "description": "DataLake service storage endpoint to use."
                            },
                            "authentication": {
                              "description": "DataLake service storage authentication details. NOTE - Enum only one method is supported.",
                              "type": "object",
                              "properties": {
                                "accessTokenSecretName": {
                                  "type": "string",
                                  "description": "Access token secret name."
                                },
                                "systemAssignedManagedIdentity": {
                                  "description": "Configuration for managed identity authentication.",
                                  "type": "object",
                                  "properties": {
                                    "audience": {
                                      "type": "string",
                                      "description": "Token audience."
                                    },
                                    "extensionName": {
                                      "type": "string",
                                      "description": "Arc Extension name."
                                    }
                                  },
                                  "required": [
                                    "audience"
                                  ]
                                }
                              }
                            }
                          },
                          "required": [
                            "endpoint",
                            "authentication"
                          ]
                        },
                        "localStorage": {
                          "description": "Local storage details.",
                          "type": "object",
                          "properties": {
                            "volumeName": {
                              "type": "string",
                              "description": "Volume name to write to."
                            }
                          },
                          "required": [
                            "volumeName"
                          ]
                        },
                        "fabricOneLake": {
                          "description": "Fabric one lake storage details.",
                          "type": "object",
                          "properties": {
                            "authentication": {
                              "description": "DataLake fabric storage authentication details.",
                              "type": "object",
                              "properties": {
                                "systemAssignedManagedIdentity": {
                                  "description": "Configuration for managed identity authentication.",
                                  "type": "object",
                                  "properties": {
                                    "audience": {
                                      "type": "string",
                                      "description": "Token audience."
                                    },
                                    "extensionName": {
                                      "type": "string",
                                      "description": "Arc Extension name."
                                    }
                                  },
                                  "required": [
                                    "audience"
                                  ]
                                }
                              },
                              "required": [
                                "systemAssignedManagedIdentity"
                              ]
                            },
                            "endpoint": {
                              "type": "string",
                              "description": "DataLake fabric storage endpoint to use."
                            },
                            "fabricPath": {
                              "description": "Fabric path type to use.",
                              "type": "string",
                              "enum": [
                                "files",
                                "tables"
                              ],
                              "x-ms-enum": {
                                "name": "FabricPathType",
                                "modelAsString": true,
                                "values": [
                                  {
                                    "name": "files",
                                    "value": "files",
                                    "description": "Fabric path type is Files."
                                  },
                                  {
                                    "name": "tables",
                                    "value": "tables",
                                    "description": "Fabric path type is Tables."
                                  }
                                ]
                              }
                            },
                            "guids": {
                              "description": "Fabric one lake Guids.",
                              "type": "object",
                              "properties": {
                                "lakehouseGuid": {
                                  "type": "string",
                                  "description": "Fabric one lake house guid."
                                },
                                "workspaceGuid": {
                                  "type": "string",
                                  "description": "Fabric one lake workspace guid."
                                }
                              },
                              "required": [
                                "lakehouseGuid",
                                "workspaceGuid"
                              ]
                            },
                            "names": {
                              "description": "Fabric one lake Names.",
                              "type": "object",
                              "properties": {
                                "lakehouseName": {
                                  "type": "string",
                                  "description": "Fabric one lake house name."
                                },
                                "workspaceName": {
                                  "type": "string",
                                  "description": "Fabric one lake workspace name."
                                }
                              },
                              "required": [
                                "lakehouseName",
                                "workspaceName"
                              ]
                            }
                          },
                          "required": [
                            "authentication",
                            "endpoint",
                            "fabricPath"
                          ]
                        }
                      }
                    },
                    "provisioningState": {
                      "description": "The status of the last operation.",
                      "readOnly": true,
                      "type": "string",
                      "enum": [
                        "Succeeded",
                        "Failed",
                        "Canceled",
                        "Provisioning",
                        "Updating",
                        "Deleting",
                        "Accepted"
                      ],
                      "x-ms-enum": {
                        "name": "ProvisioningState",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Succeeded",
                            "value": "Succeeded",
                            "description": "Resource has been created."
                          },
                          {
                            "name": "Failed",
                            "value": "Failed",
                            "description": "Resource creation failed."
                          },
                          {
                            "name": "Canceled",
                            "value": "Canceled",
                            "description": "Resource creation was canceled."
                          },
                          {
                            "name": "Provisioning",
                            "value": "Provisioning",
                            "description": "Resource is getting provisioned."
                          },
                          {
                            "name": "Updating",
                            "value": "Updating",
                            "description": "Resource is Updating."
                          },
                          {
                            "name": "Deleting",
                            "value": "Deleting",
                            "description": "Resource is Deleting."
                          },
                          {
                            "name": "Accepted",
                            "value": "Accepted",
                            "description": "Resource has been Accepted."
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "databaseFormat",
                    "image",
                    "protocol",
                    "target"
                  ]
                },
                "extendedLocation": {
                  "description": "Extended Location",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ],
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The name of the extended location."
                    },
                    "type": {
                      "description": "Type of ExtendedLocation.",
                      "type": "string",
                      "enum": [
                        "CustomLocation"
                      ],
                      "x-ms-enum": {
                        "name": "ExtendedLocationType",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "CustomLocation",
                            "value": "CustomLocation",
                            "description": "CustomLocation type"
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "name",
                    "type"
                  ]
                }
              },
              "required": [
                "extendedLocation"
              ]
            }
          }
        }
      },
      "delete": {
        "operationId": "DataLakeConnector_Delete",
        "tags": [
          "DataLakeConnector"
        ],
        "description": "Delete a DataLakeConnectorResource",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group. The name is case insensitive.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "x-ms-parameter-location": "method"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "dataLakeConnectorName",
            "in": "path",
            "description": "Name of MQ dataLakeConnector resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          }
        ],
        "responses": {
          "202": {
            "description": "Resource deletion accepted.",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              },
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "204": {
            "description": "Resource does not exist."
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTOperationsMQ/mq/{mqName}/dataLakeConnector/{dataLakeConnectorName}/topicMap": {
      "get": {
        "operationId": "DataLakeConnectorTopicMap_ListByDataLakeConnectorResource",
        "tags": [
          "DataLakeConnectorTopicMap"
        ],
        "description": "List DataLakeTopicMapResource resources by DataLakeConnectorResource",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group. The name is case insensitive.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "x-ms-parameter-location": "method"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "dataLakeConnectorName",
            "in": "path",
            "description": "Name of MQ dataLakeConnector resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "type": "object",
              "description": "The response of a DataLakeTopicMapResource list operation.",
              "properties": {
                "value": {
                  "type": "array",
                  "description": "The DataLakeTopicMapResource items on this page",
                  "items": {
                    "type": "object",
                    "description": "MQ dataLakeConnector/topicMap resource",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                        "readOnly": true
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the resource",
                        "readOnly": true
                      },
                      "type": {
                        "type": "string",
                        "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                        "readOnly": true
                      },
                      "systemData": {
                        "type": "object",
                        "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                        "readOnly": true,
                        "properties": {
                          "createdBy": {
                            "type": "string",
                            "description": "The identity that created the resource."
                          },
                          "createdByType": {
                            "type": "string",
                            "description": "The type of identity that created the resource.",
                            "enum": [
                              "User",
                              "Application",
                              "ManagedIdentity",
                              "Key"
                            ],
                            "x-ms-enum": {
                              "name": "createdByType",
                              "modelAsString": true
                            }
                          },
                          "createdAt": {
                            "type": "string",
                            "format": "date-time",
                            "description": "The timestamp of resource creation (UTC)."
                          },
                          "lastModifiedBy": {
                            "type": "string",
                            "description": "The identity that last modified the resource."
                          },
                          "lastModifiedByType": {
                            "type": "string",
                            "description": "The type of identity that last modified the resource.",
                            "enum": [
                              "User",
                              "Application",
                              "ManagedIdentity",
                              "Key"
                            ],
                            "x-ms-enum": {
                              "name": "createdByType",
                              "modelAsString": true
                            }
                          },
                          "lastModifiedAt": {
                            "type": "string",
                            "format": "date-time",
                            "description": "The timestamp of resource last modification (UTC)"
                          }
                        }
                      },
                      "tags": {
                        "type": "object",
                        "description": "Resource tags.",
                        "additionalProperties": {
                          "type": "string"
                        },
                        "x-ms-mutability": [
                          "read",
                          "create",
                          "update"
                        ]
                      },
                      "location": {
                        "type": "string",
                        "description": "The geo-location where the resource lives",
                        "x-ms-mutability": [
                          "read",
                          "create"
                        ]
                      },
                      "properties": {
                        "description": "The resource-specific properties for this resource.",
                        "x-ms-client-flatten": true,
                        "type": "object",
                        "properties": {
                          "dataLakeConnectorRef": {
                            "type": "string",
                            "description": "DataLake Connector CRD to use."
                          },
                          "mapping": {
                            "description": "TopicMap for DataLake connector.",
                            "type": "object",
                            "properties": {
                              "allowedLatencySecs": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Allowed latency for transferring data.",
                                "minimum": 0,
                                "maximum": 65535
                              },
                              "clientId": {
                                "type": "string",
                                "description": "Client Id to use."
                              },
                              "maxMessagesPerBatch": {
                                "type": "integer",
                                "format": "int64",
                                "description": "Maximum messages to send per Batch.",
                                "minimum": 0,
                                "maximum": 4294967295
                              },
                              "messagePayloadType": {
                                "type": "string",
                                "description": "Message payload type."
                              },
                              "mqttSourceTopic": {
                                "type": "string",
                                "description": "Mqtt source topic."
                              },
                              "qos": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Quality of Service.",
                                "default": 1,
                                "minimum": 0,
                                "maximum": 2
                              },
                              "table": {
                                "description": "Delta table properties to use.",
                                "type": "object",
                                "properties": {
                                  "schema": {
                                    "type": "array",
                                    "description": "Schema list supported.",
                                    "items": {
                                      "type": "object",
                                      "description": "Delta table schema properties",
                                      "properties": {
                                        "format": {
                                          "description": "Delta table format supported.",
                                          "type": "string",
                                          "enum": [
                                            "boolean",
                                            "int8",
                                            "int16",
                                            "int32",
                                            "uInt8",
                                            "uInt16",
                                            "uInt32",
                                            "uInt64",
                                            "float16",
                                            "float32",
                                            "float64",
                                            "date32",
                                            "date64",
                                            "binary",
                                            "utf8"
                                          ],
                                          "x-ms-enum": {
                                            "name": "DeltaTableFormatEnum",
                                            "modelAsString": true,
                                            "values": [
                                              {
                                                "name": "boolean",
                                                "value": "boolean",
                                                "description": "Bool format"
                                              },
                                              {
                                                "name": "int8",
                                                "value": "int8",
                                                "description": "Signed integer 8"
                                              },
                                              {
                                                "name": "int16",
                                                "value": "int16",
                                                "description": "Signed integer 16"
                                              },
                                              {
                                                "name": "int32",
                                                "value": "int32",
                                                "description": "Signed integer 32"
                                              },
                                              {
                                                "name": "uInt8",
                                                "value": "uInt8",
                                                "description": "Unsigned integer 8"
                                              },
                                              {
                                                "name": "uInt16",
                                                "value": "uInt16",
                                                "description": "Unsigned integer 16"
                                              },
                                              {
                                                "name": "uInt32",
                                                "value": "uInt32",
                                                "description": "Unsigned integer 32"
                                              },
                                              {
                                                "name": "uInt64",
                                                "value": "uInt64",
                                                "description": "Unsigned integer 64"
                                              },
                                              {
                                                "name": "float16",
                                                "value": "float16",
                                                "description": "Float 16"
                                              },
                                              {
                                                "name": "float32",
                                                "value": "float32",
                                                "description": "Float 32"
                                              },
                                              {
                                                "name": "float64",
                                                "value": "float64",
                                                "description": "Float 64"
                                              },
                                              {
                                                "name": "date32",
                                                "value": "date32",
                                                "description": "Date 32"
                                              },
                                              {
                                                "name": "date64",
                                                "value": "date64",
                                                "description": "Date 64"
                                              },
                                              {
                                                "name": "binary",
                                                "value": "binary",
                                                "description": "Binary data"
                                              },
                                              {
                                                "name": "utf8",
                                                "value": "utf8",
                                                "description": "UTF8 format"
                                              }
                                            ]
                                          }
                                        },
                                        "mapping": {
                                          "type": "string",
                                          "description": "Delta table schema mapping."
                                        },
                                        "name": {
                                          "type": "string",
                                          "description": "Delta table schema name."
                                        },
                                        "optional": {
                                          "type": "boolean",
                                          "description": "Delta table schema optional."
                                        }
                                      },
                                      "required": [
                                        "format",
                                        "mapping",
                                        "name",
                                        "optional"
                                      ]
                                    },
                                    "x-ms-identifiers": []
                                  },
                                  "tableName": {
                                    "type": "string",
                                    "description": "Delta table name."
                                  },
                                  "tablePath": {
                                    "type": "string",
                                    "description": "Delta table path."
                                  }
                                },
                                "required": [
                                  "schema",
                                  "tableName"
                                ]
                              }
                            },
                            "required": [
                              "allowedLatencySecs",
                              "clientId",
                              "maxMessagesPerBatch",
                              "messagePayloadType",
                              "mqttSourceTopic",
                              "table"
                            ]
                          },
                          "provisioningState": {
                            "description": "The status of the last operation.",
                            "readOnly": true,
                            "type": "string",
                            "enum": [
                              "Succeeded",
                              "Failed",
                              "Canceled",
                              "Provisioning",
                              "Updating",
                              "Deleting",
                              "Accepted"
                            ],
                            "x-ms-enum": {
                              "name": "ProvisioningState",
                              "modelAsString": true,
                              "values": [
                                {
                                  "name": "Succeeded",
                                  "value": "Succeeded",
                                  "description": "Resource has been created."
                                },
                                {
                                  "name": "Failed",
                                  "value": "Failed",
                                  "description": "Resource creation failed."
                                },
                                {
                                  "name": "Canceled",
                                  "value": "Canceled",
                                  "description": "Resource creation was canceled."
                                },
                                {
                                  "name": "Provisioning",
                                  "value": "Provisioning",
                                  "description": "Resource is getting provisioned."
                                },
                                {
                                  "name": "Updating",
                                  "value": "Updating",
                                  "description": "Resource is Updating."
                                },
                                {
                                  "name": "Deleting",
                                  "value": "Deleting",
                                  "description": "Resource is Deleting."
                                },
                                {
                                  "name": "Accepted",
                                  "value": "Accepted",
                                  "description": "Resource has been Accepted."
                                }
                              ]
                            }
                          }
                        },
                        "required": [
                          "dataLakeConnectorRef",
                          "mapping"
                        ]
                      },
                      "extendedLocation": {
                        "description": "Extended Location",
                        "x-ms-mutability": [
                          "read",
                          "create"
                        ],
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "The name of the extended location."
                          },
                          "type": {
                            "description": "Type of ExtendedLocation.",
                            "type": "string",
                            "enum": [
                              "CustomLocation"
                            ],
                            "x-ms-enum": {
                              "name": "ExtendedLocationType",
                              "modelAsString": true,
                              "values": [
                                {
                                  "name": "CustomLocation",
                                  "value": "CustomLocation",
                                  "description": "CustomLocation type"
                                }
                              ]
                            }
                          }
                        },
                        "required": [
                          "name",
                          "type"
                        ]
                      }
                    },
                    "required": [
                      "extendedLocation"
                    ]
                  }
                },
                "nextLink": {
                  "type": "string",
                  "format": "uri",
                  "description": "The link to the next page of items"
                }
              },
              "required": [
                "value"
              ]
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTOperationsMQ/mq/{mqName}/dataLakeConnector/{dataLakeConnectorName}/topicMap/{topicMapName}": {
      "get": {
        "operationId": "DataLakeConnectorTopicMap_Get",
        "tags": [
          "DataLakeConnectorTopicMap"
        ],
        "description": "Get a DataLakeTopicMapResource",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group. The name is case insensitive.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "x-ms-parameter-location": "method"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "dataLakeConnectorName",
            "in": "path",
            "description": "Name of MQ dataLakeConnector resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "topicMapName",
            "in": "path",
            "description": "Name of MQ dataLakeConnector/topicMap resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "type": "object",
              "description": "MQ dataLakeConnector/topicMap resource",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "description": "The name of the resource",
                  "readOnly": true
                },
                "type": {
                  "type": "string",
                  "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                  "readOnly": true
                },
                "systemData": {
                  "type": "object",
                  "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                  "readOnly": true,
                  "properties": {
                    "createdBy": {
                      "type": "string",
                      "description": "The identity that created the resource."
                    },
                    "createdByType": {
                      "type": "string",
                      "description": "The type of identity that created the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource creation (UTC)."
                    },
                    "lastModifiedBy": {
                      "type": "string",
                      "description": "The identity that last modified the resource."
                    },
                    "lastModifiedByType": {
                      "type": "string",
                      "description": "The type of identity that last modified the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "lastModifiedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource last modification (UTC)"
                    }
                  }
                },
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "x-ms-mutability": [
                    "read",
                    "create",
                    "update"
                  ]
                },
                "location": {
                  "type": "string",
                  "description": "The geo-location where the resource lives",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ]
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "dataLakeConnectorRef": {
                      "type": "string",
                      "description": "DataLake Connector CRD to use."
                    },
                    "mapping": {
                      "description": "TopicMap for DataLake connector.",
                      "type": "object",
                      "properties": {
                        "allowedLatencySecs": {
                          "type": "integer",
                          "format": "int32",
                          "description": "Allowed latency for transferring data.",
                          "minimum": 0,
                          "maximum": 65535
                        },
                        "clientId": {
                          "type": "string",
                          "description": "Client Id to use."
                        },
                        "maxMessagesPerBatch": {
                          "type": "integer",
                          "format": "int64",
                          "description": "Maximum messages to send per Batch.",
                          "minimum": 0,
                          "maximum": 4294967295
                        },
                        "messagePayloadType": {
                          "type": "string",
                          "description": "Message payload type."
                        },
                        "mqttSourceTopic": {
                          "type": "string",
                          "description": "Mqtt source topic."
                        },
                        "qos": {
                          "type": "integer",
                          "format": "int32",
                          "description": "Quality of Service.",
                          "default": 1,
                          "minimum": 0,
                          "maximum": 2
                        },
                        "table": {
                          "description": "Delta table properties to use.",
                          "type": "object",
                          "properties": {
                            "schema": {
                              "type": "array",
                              "description": "Schema list supported.",
                              "items": {
                                "type": "object",
                                "description": "Delta table schema properties",
                                "properties": {
                                  "format": {
                                    "description": "Delta table format supported.",
                                    "type": "string",
                                    "enum": [
                                      "boolean",
                                      "int8",
                                      "int16",
                                      "int32",
                                      "uInt8",
                                      "uInt16",
                                      "uInt32",
                                      "uInt64",
                                      "float16",
                                      "float32",
                                      "float64",
                                      "date32",
                                      "date64",
                                      "binary",
                                      "utf8"
                                    ],
                                    "x-ms-enum": {
                                      "name": "DeltaTableFormatEnum",
                                      "modelAsString": true,
                                      "values": [
                                        {
                                          "name": "boolean",
                                          "value": "boolean",
                                          "description": "Bool format"
                                        },
                                        {
                                          "name": "int8",
                                          "value": "int8",
                                          "description": "Signed integer 8"
                                        },
                                        {
                                          "name": "int16",
                                          "value": "int16",
                                          "description": "Signed integer 16"
                                        },
                                        {
                                          "name": "int32",
                                          "value": "int32",
                                          "description": "Signed integer 32"
                                        },
                                        {
                                          "name": "uInt8",
                                          "value": "uInt8",
                                          "description": "Unsigned integer 8"
                                        },
                                        {
                                          "name": "uInt16",
                                          "value": "uInt16",
                                          "description": "Unsigned integer 16"
                                        },
                                        {
                                          "name": "uInt32",
                                          "value": "uInt32",
                                          "description": "Unsigned integer 32"
                                        },
                                        {
                                          "name": "uInt64",
                                          "value": "uInt64",
                                          "description": "Unsigned integer 64"
                                        },
                                        {
                                          "name": "float16",
                                          "value": "float16",
                                          "description": "Float 16"
                                        },
                                        {
                                          "name": "float32",
                                          "value": "float32",
                                          "description": "Float 32"
                                        },
                                        {
                                          "name": "float64",
                                          "value": "float64",
                                          "description": "Float 64"
                                        },
                                        {
                                          "name": "date32",
                                          "value": "date32",
                                          "description": "Date 32"
                                        },
                                        {
                                          "name": "date64",
                                          "value": "date64",
                                          "description": "Date 64"
                                        },
                                        {
                                          "name": "binary",
                                          "value": "binary",
                                          "description": "Binary data"
                                        },
                                        {
                                          "name": "utf8",
                                          "value": "utf8",
                                          "description": "UTF8 format"
                                        }
                                      ]
                                    }
                                  },
                                  "mapping": {
                                    "type": "string",
                                    "description": "Delta table schema mapping."
                                  },
                                  "name": {
                                    "type": "string",
                                    "description": "Delta table schema name."
                                  },
                                  "optional": {
                                    "type": "boolean",
                                    "description": "Delta table schema optional."
                                  }
                                },
                                "required": [
                                  "format",
                                  "mapping",
                                  "name",
                                  "optional"
                                ]
                              },
                              "x-ms-identifiers": []
                            },
                            "tableName": {
                              "type": "string",
                              "description": "Delta table name."
                            },
                            "tablePath": {
                              "type": "string",
                              "description": "Delta table path."
                            }
                          },
                          "required": [
                            "schema",
                            "tableName"
                          ]
                        }
                      },
                      "required": [
                        "allowedLatencySecs",
                        "clientId",
                        "maxMessagesPerBatch",
                        "messagePayloadType",
                        "mqttSourceTopic",
                        "table"
                      ]
                    },
                    "provisioningState": {
                      "description": "The status of the last operation.",
                      "readOnly": true,
                      "type": "string",
                      "enum": [
                        "Succeeded",
                        "Failed",
                        "Canceled",
                        "Provisioning",
                        "Updating",
                        "Deleting",
                        "Accepted"
                      ],
                      "x-ms-enum": {
                        "name": "ProvisioningState",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Succeeded",
                            "value": "Succeeded",
                            "description": "Resource has been created."
                          },
                          {
                            "name": "Failed",
                            "value": "Failed",
                            "description": "Resource creation failed."
                          },
                          {
                            "name": "Canceled",
                            "value": "Canceled",
                            "description": "Resource creation was canceled."
                          },
                          {
                            "name": "Provisioning",
                            "value": "Provisioning",
                            "description": "Resource is getting provisioned."
                          },
                          {
                            "name": "Updating",
                            "value": "Updating",
                            "description": "Resource is Updating."
                          },
                          {
                            "name": "Deleting",
                            "value": "Deleting",
                            "description": "Resource is Deleting."
                          },
                          {
                            "name": "Accepted",
                            "value": "Accepted",
                            "description": "Resource has been Accepted."
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "dataLakeConnectorRef",
                    "mapping"
                  ]
                },
                "extendedLocation": {
                  "description": "Extended Location",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ],
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The name of the extended location."
                    },
                    "type": {
                      "description": "Type of ExtendedLocation.",
                      "type": "string",
                      "enum": [
                        "CustomLocation"
                      ],
                      "x-ms-enum": {
                        "name": "ExtendedLocationType",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "CustomLocation",
                            "value": "CustomLocation",
                            "description": "CustomLocation type"
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "name",
                    "type"
                  ]
                }
              },
              "required": [
                "extendedLocation"
              ]
            }
          }
        }
      },
      "put": {
        "operationId": "DataLakeConnectorTopicMap_CreateOrUpdate",
        "tags": [
          "DataLakeConnectorTopicMap"
        ],
        "description": "Create a DataLakeTopicMapResource",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group. The name is case insensitive.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "x-ms-parameter-location": "method"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "dataLakeConnectorName",
            "in": "path",
            "description": "Name of MQ dataLakeConnector resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "topicMapName",
            "in": "path",
            "description": "Name of MQ dataLakeConnector/topicMap resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "resource",
            "in": "body",
            "description": "Resource create parameters.",
            "required": true,
            "schema": {
              "type": "object",
              "description": "MQ dataLakeConnector/topicMap resource",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "description": "The name of the resource",
                  "readOnly": true
                },
                "type": {
                  "type": "string",
                  "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                  "readOnly": true
                },
                "systemData": {
                  "type": "object",
                  "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                  "readOnly": true,
                  "properties": {
                    "createdBy": {
                      "type": "string",
                      "description": "The identity that created the resource."
                    },
                    "createdByType": {
                      "type": "string",
                      "description": "The type of identity that created the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource creation (UTC)."
                    },
                    "lastModifiedBy": {
                      "type": "string",
                      "description": "The identity that last modified the resource."
                    },
                    "lastModifiedByType": {
                      "type": "string",
                      "description": "The type of identity that last modified the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "lastModifiedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource last modification (UTC)"
                    }
                  }
                },
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "x-ms-mutability": [
                    "read",
                    "create",
                    "update"
                  ]
                },
                "location": {
                  "type": "string",
                  "description": "The geo-location where the resource lives",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ]
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "dataLakeConnectorRef": {
                      "type": "string",
                      "description": "DataLake Connector CRD to use."
                    },
                    "mapping": {
                      "description": "TopicMap for DataLake connector.",
                      "type": "object",
                      "properties": {
                        "allowedLatencySecs": {
                          "type": "integer",
                          "format": "int32",
                          "description": "Allowed latency for transferring data.",
                          "minimum": 0,
                          "maximum": 65535
                        },
                        "clientId": {
                          "type": "string",
                          "description": "Client Id to use."
                        },
                        "maxMessagesPerBatch": {
                          "type": "integer",
                          "format": "int64",
                          "description": "Maximum messages to send per Batch.",
                          "minimum": 0,
                          "maximum": 4294967295
                        },
                        "messagePayloadType": {
                          "type": "string",
                          "description": "Message payload type."
                        },
                        "mqttSourceTopic": {
                          "type": "string",
                          "description": "Mqtt source topic."
                        },
                        "qos": {
                          "type": "integer",
                          "format": "int32",
                          "description": "Quality of Service.",
                          "default": 1,
                          "minimum": 0,
                          "maximum": 2
                        },
                        "table": {
                          "description": "Delta table properties to use.",
                          "type": "object",
                          "properties": {
                            "schema": {
                              "type": "array",
                              "description": "Schema list supported.",
                              "items": {
                                "type": "object",
                                "description": "Delta table schema properties",
                                "properties": {
                                  "format": {
                                    "description": "Delta table format supported.",
                                    "type": "string",
                                    "enum": [
                                      "boolean",
                                      "int8",
                                      "int16",
                                      "int32",
                                      "uInt8",
                                      "uInt16",
                                      "uInt32",
                                      "uInt64",
                                      "float16",
                                      "float32",
                                      "float64",
                                      "date32",
                                      "date64",
                                      "binary",
                                      "utf8"
                                    ],
                                    "x-ms-enum": {
                                      "name": "DeltaTableFormatEnum",
                                      "modelAsString": true,
                                      "values": [
                                        {
                                          "name": "boolean",
                                          "value": "boolean",
                                          "description": "Bool format"
                                        },
                                        {
                                          "name": "int8",
                                          "value": "int8",
                                          "description": "Signed integer 8"
                                        },
                                        {
                                          "name": "int16",
                                          "value": "int16",
                                          "description": "Signed integer 16"
                                        },
                                        {
                                          "name": "int32",
                                          "value": "int32",
                                          "description": "Signed integer 32"
                                        },
                                        {
                                          "name": "uInt8",
                                          "value": "uInt8",
                                          "description": "Unsigned integer 8"
                                        },
                                        {
                                          "name": "uInt16",
                                          "value": "uInt16",
                                          "description": "Unsigned integer 16"
                                        },
                                        {
                                          "name": "uInt32",
                                          "value": "uInt32",
                                          "description": "Unsigned integer 32"
                                        },
                                        {
                                          "name": "uInt64",
                                          "value": "uInt64",
                                          "description": "Unsigned integer 64"
                                        },
                                        {
                                          "name": "float16",
                                          "value": "float16",
                                          "description": "Float 16"
                                        },
                                        {
                                          "name": "float32",
                                          "value": "float32",
                                          "description": "Float 32"
                                        },
                                        {
                                          "name": "float64",
                                          "value": "float64",
                                          "description": "Float 64"
                                        },
                                        {
                                          "name": "date32",
                                          "value": "date32",
                                          "description": "Date 32"
                                        },
                                        {
                                          "name": "date64",
                                          "value": "date64",
                                          "description": "Date 64"
                                        },
                                        {
                                          "name": "binary",
                                          "value": "binary",
                                          "description": "Binary data"
                                        },
                                        {
                                          "name": "utf8",
                                          "value": "utf8",
                                          "description": "UTF8 format"
                                        }
                                      ]
                                    }
                                  },
                                  "mapping": {
                                    "type": "string",
                                    "description": "Delta table schema mapping."
                                  },
                                  "name": {
                                    "type": "string",
                                    "description": "Delta table schema name."
                                  },
                                  "optional": {
                                    "type": "boolean",
                                    "description": "Delta table schema optional."
                                  }
                                },
                                "required": [
                                  "format",
                                  "mapping",
                                  "name",
                                  "optional"
                                ]
                              },
                              "x-ms-identifiers": []
                            },
                            "tableName": {
                              "type": "string",
                              "description": "Delta table name."
                            },
                            "tablePath": {
                              "type": "string",
                              "description": "Delta table path."
                            }
                          },
                          "required": [
                            "schema",
                            "tableName"
                          ]
                        }
                      },
                      "required": [
                        "allowedLatencySecs",
                        "clientId",
                        "maxMessagesPerBatch",
                        "messagePayloadType",
                        "mqttSourceTopic",
                        "table"
                      ]
                    },
                    "provisioningState": {
                      "description": "The status of the last operation.",
                      "readOnly": true,
                      "type": "string",
                      "enum": [
                        "Succeeded",
                        "Failed",
                        "Canceled",
                        "Provisioning",
                        "Updating",
                        "Deleting",
                        "Accepted"
                      ],
                      "x-ms-enum": {
                        "name": "ProvisioningState",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Succeeded",
                            "value": "Succeeded",
                            "description": "Resource has been created."
                          },
                          {
                            "name": "Failed",
                            "value": "Failed",
                            "description": "Resource creation failed."
                          },
                          {
                            "name": "Canceled",
                            "value": "Canceled",
                            "description": "Resource creation was canceled."
                          },
                          {
                            "name": "Provisioning",
                            "value": "Provisioning",
                            "description": "Resource is getting provisioned."
                          },
                          {
                            "name": "Updating",
                            "value": "Updating",
                            "description": "Resource is Updating."
                          },
                          {
                            "name": "Deleting",
                            "value": "Deleting",
                            "description": "Resource is Deleting."
                          },
                          {
                            "name": "Accepted",
                            "value": "Accepted",
                            "description": "Resource has been Accepted."
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "dataLakeConnectorRef",
                    "mapping"
                  ]
                },
                "extendedLocation": {
                  "description": "Extended Location",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ],
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The name of the extended location."
                    },
                    "type": {
                      "description": "Type of ExtendedLocation.",
                      "type": "string",
                      "enum": [
                        "CustomLocation"
                      ],
                      "x-ms-enum": {
                        "name": "ExtendedLocationType",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "CustomLocation",
                            "value": "CustomLocation",
                            "description": "CustomLocation type"
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "name",
                    "type"
                  ]
                }
              },
              "required": [
                "extendedLocation"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resource 'DataLakeTopicMapResource' update operation succeeded",
            "schema": {
              "type": "object",
              "description": "MQ dataLakeConnector/topicMap resource",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "description": "The name of the resource",
                  "readOnly": true
                },
                "type": {
                  "type": "string",
                  "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                  "readOnly": true
                },
                "systemData": {
                  "type": "object",
                  "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                  "readOnly": true,
                  "properties": {
                    "createdBy": {
                      "type": "string",
                      "description": "The identity that created the resource."
                    },
                    "createdByType": {
                      "type": "string",
                      "description": "The type of identity that created the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource creation (UTC)."
                    },
                    "lastModifiedBy": {
                      "type": "string",
                      "description": "The identity that last modified the resource."
                    },
                    "lastModifiedByType": {
                      "type": "string",
                      "description": "The type of identity that last modified the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "lastModifiedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource last modification (UTC)"
                    }
                  }
                },
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "x-ms-mutability": [
                    "read",
                    "create",
                    "update"
                  ]
                },
                "location": {
                  "type": "string",
                  "description": "The geo-location where the resource lives",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ]
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "dataLakeConnectorRef": {
                      "type": "string",
                      "description": "DataLake Connector CRD to use."
                    },
                    "mapping": {
                      "description": "TopicMap for DataLake connector.",
                      "type": "object",
                      "properties": {
                        "allowedLatencySecs": {
                          "type": "integer",
                          "format": "int32",
                          "description": "Allowed latency for transferring data.",
                          "minimum": 0,
                          "maximum": 65535
                        },
                        "clientId": {
                          "type": "string",
                          "description": "Client Id to use."
                        },
                        "maxMessagesPerBatch": {
                          "type": "integer",
                          "format": "int64",
                          "description": "Maximum messages to send per Batch.",
                          "minimum": 0,
                          "maximum": 4294967295
                        },
                        "messagePayloadType": {
                          "type": "string",
                          "description": "Message payload type."
                        },
                        "mqttSourceTopic": {
                          "type": "string",
                          "description": "Mqtt source topic."
                        },
                        "qos": {
                          "type": "integer",
                          "format": "int32",
                          "description": "Quality of Service.",
                          "default": 1,
                          "minimum": 0,
                          "maximum": 2
                        },
                        "table": {
                          "description": "Delta table properties to use.",
                          "type": "object",
                          "properties": {
                            "schema": {
                              "type": "array",
                              "description": "Schema list supported.",
                              "items": {
                                "type": "object",
                                "description": "Delta table schema properties",
                                "properties": {
                                  "format": {
                                    "description": "Delta table format supported.",
                                    "type": "string",
                                    "enum": [
                                      "boolean",
                                      "int8",
                                      "int16",
                                      "int32",
                                      "uInt8",
                                      "uInt16",
                                      "uInt32",
                                      "uInt64",
                                      "float16",
                                      "float32",
                                      "float64",
                                      "date32",
                                      "date64",
                                      "binary",
                                      "utf8"
                                    ],
                                    "x-ms-enum": {
                                      "name": "DeltaTableFormatEnum",
                                      "modelAsString": true,
                                      "values": [
                                        {
                                          "name": "boolean",
                                          "value": "boolean",
                                          "description": "Bool format"
                                        },
                                        {
                                          "name": "int8",
                                          "value": "int8",
                                          "description": "Signed integer 8"
                                        },
                                        {
                                          "name": "int16",
                                          "value": "int16",
                                          "description": "Signed integer 16"
                                        },
                                        {
                                          "name": "int32",
                                          "value": "int32",
                                          "description": "Signed integer 32"
                                        },
                                        {
                                          "name": "uInt8",
                                          "value": "uInt8",
                                          "description": "Unsigned integer 8"
                                        },
                                        {
                                          "name": "uInt16",
                                          "value": "uInt16",
                                          "description": "Unsigned integer 16"
                                        },
                                        {
                                          "name": "uInt32",
                                          "value": "uInt32",
                                          "description": "Unsigned integer 32"
                                        },
                                        {
                                          "name": "uInt64",
                                          "value": "uInt64",
                                          "description": "Unsigned integer 64"
                                        },
                                        {
                                          "name": "float16",
                                          "value": "float16",
                                          "description": "Float 16"
                                        },
                                        {
                                          "name": "float32",
                                          "value": "float32",
                                          "description": "Float 32"
                                        },
                                        {
                                          "name": "float64",
                                          "value": "float64",
                                          "description": "Float 64"
                                        },
                                        {
                                          "name": "date32",
                                          "value": "date32",
                                          "description": "Date 32"
                                        },
                                        {
                                          "name": "date64",
                                          "value": "date64",
                                          "description": "Date 64"
                                        },
                                        {
                                          "name": "binary",
                                          "value": "binary",
                                          "description": "Binary data"
                                        },
                                        {
                                          "name": "utf8",
                                          "value": "utf8",
                                          "description": "UTF8 format"
                                        }
                                      ]
                                    }
                                  },
                                  "mapping": {
                                    "type": "string",
                                    "description": "Delta table schema mapping."
                                  },
                                  "name": {
                                    "type": "string",
                                    "description": "Delta table schema name."
                                  },
                                  "optional": {
                                    "type": "boolean",
                                    "description": "Delta table schema optional."
                                  }
                                },
                                "required": [
                                  "format",
                                  "mapping",
                                  "name",
                                  "optional"
                                ]
                              },
                              "x-ms-identifiers": []
                            },
                            "tableName": {
                              "type": "string",
                              "description": "Delta table name."
                            },
                            "tablePath": {
                              "type": "string",
                              "description": "Delta table path."
                            }
                          },
                          "required": [
                            "schema",
                            "tableName"
                          ]
                        }
                      },
                      "required": [
                        "allowedLatencySecs",
                        "clientId",
                        "maxMessagesPerBatch",
                        "messagePayloadType",
                        "mqttSourceTopic",
                        "table"
                      ]
                    },
                    "provisioningState": {
                      "description": "The status of the last operation.",
                      "readOnly": true,
                      "type": "string",
                      "enum": [
                        "Succeeded",
                        "Failed",
                        "Canceled",
                        "Provisioning",
                        "Updating",
                        "Deleting",
                        "Accepted"
                      ],
                      "x-ms-enum": {
                        "name": "ProvisioningState",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Succeeded",
                            "value": "Succeeded",
                            "description": "Resource has been created."
                          },
                          {
                            "name": "Failed",
                            "value": "Failed",
                            "description": "Resource creation failed."
                          },
                          {
                            "name": "Canceled",
                            "value": "Canceled",
                            "description": "Resource creation was canceled."
                          },
                          {
                            "name": "Provisioning",
                            "value": "Provisioning",
                            "description": "Resource is getting provisioned."
                          },
                          {
                            "name": "Updating",
                            "value": "Updating",
                            "description": "Resource is Updating."
                          },
                          {
                            "name": "Deleting",
                            "value": "Deleting",
                            "description": "Resource is Deleting."
                          },
                          {
                            "name": "Accepted",
                            "value": "Accepted",
                            "description": "Resource has been Accepted."
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "dataLakeConnectorRef",
                    "mapping"
                  ]
                },
                "extendedLocation": {
                  "description": "Extended Location",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ],
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The name of the extended location."
                    },
                    "type": {
                      "description": "Type of ExtendedLocation.",
                      "type": "string",
                      "enum": [
                        "CustomLocation"
                      ],
                      "x-ms-enum": {
                        "name": "ExtendedLocationType",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "CustomLocation",
                            "value": "CustomLocation",
                            "description": "CustomLocation type"
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "name",
                    "type"
                  ]
                }
              },
              "required": [
                "extendedLocation"
              ]
            }
          },
          "201": {
            "description": "Resource 'DataLakeTopicMapResource' create operation succeeded",
            "schema": {
              "type": "object",
              "description": "MQ dataLakeConnector/topicMap resource",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "description": "The name of the resource",
                  "readOnly": true
                },
                "type": {
                  "type": "string",
                  "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                  "readOnly": true
                },
                "systemData": {
                  "type": "object",
                  "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                  "readOnly": true,
                  "properties": {
                    "createdBy": {
                      "type": "string",
                      "description": "The identity that created the resource."
                    },
                    "createdByType": {
                      "type": "string",
                      "description": "The type of identity that created the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource creation (UTC)."
                    },
                    "lastModifiedBy": {
                      "type": "string",
                      "description": "The identity that last modified the resource."
                    },
                    "lastModifiedByType": {
                      "type": "string",
                      "description": "The type of identity that last modified the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "lastModifiedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource last modification (UTC)"
                    }
                  }
                },
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "x-ms-mutability": [
                    "read",
                    "create",
                    "update"
                  ]
                },
                "location": {
                  "type": "string",
                  "description": "The geo-location where the resource lives",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ]
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "dataLakeConnectorRef": {
                      "type": "string",
                      "description": "DataLake Connector CRD to use."
                    },
                    "mapping": {
                      "description": "TopicMap for DataLake connector.",
                      "type": "object",
                      "properties": {
                        "allowedLatencySecs": {
                          "type": "integer",
                          "format": "int32",
                          "description": "Allowed latency for transferring data.",
                          "minimum": 0,
                          "maximum": 65535
                        },
                        "clientId": {
                          "type": "string",
                          "description": "Client Id to use."
                        },
                        "maxMessagesPerBatch": {
                          "type": "integer",
                          "format": "int64",
                          "description": "Maximum messages to send per Batch.",
                          "minimum": 0,
                          "maximum": 4294967295
                        },
                        "messagePayloadType": {
                          "type": "string",
                          "description": "Message payload type."
                        },
                        "mqttSourceTopic": {
                          "type": "string",
                          "description": "Mqtt source topic."
                        },
                        "qos": {
                          "type": "integer",
                          "format": "int32",
                          "description": "Quality of Service.",
                          "default": 1,
                          "minimum": 0,
                          "maximum": 2
                        },
                        "table": {
                          "description": "Delta table properties to use.",
                          "type": "object",
                          "properties": {
                            "schema": {
                              "type": "array",
                              "description": "Schema list supported.",
                              "items": {
                                "type": "object",
                                "description": "Delta table schema properties",
                                "properties": {
                                  "format": {
                                    "description": "Delta table format supported.",
                                    "type": "string",
                                    "enum": [
                                      "boolean",
                                      "int8",
                                      "int16",
                                      "int32",
                                      "uInt8",
                                      "uInt16",
                                      "uInt32",
                                      "uInt64",
                                      "float16",
                                      "float32",
                                      "float64",
                                      "date32",
                                      "date64",
                                      "binary",
                                      "utf8"
                                    ],
                                    "x-ms-enum": {
                                      "name": "DeltaTableFormatEnum",
                                      "modelAsString": true,
                                      "values": [
                                        {
                                          "name": "boolean",
                                          "value": "boolean",
                                          "description": "Bool format"
                                        },
                                        {
                                          "name": "int8",
                                          "value": "int8",
                                          "description": "Signed integer 8"
                                        },
                                        {
                                          "name": "int16",
                                          "value": "int16",
                                          "description": "Signed integer 16"
                                        },
                                        {
                                          "name": "int32",
                                          "value": "int32",
                                          "description": "Signed integer 32"
                                        },
                                        {
                                          "name": "uInt8",
                                          "value": "uInt8",
                                          "description": "Unsigned integer 8"
                                        },
                                        {
                                          "name": "uInt16",
                                          "value": "uInt16",
                                          "description": "Unsigned integer 16"
                                        },
                                        {
                                          "name": "uInt32",
                                          "value": "uInt32",
                                          "description": "Unsigned integer 32"
                                        },
                                        {
                                          "name": "uInt64",
                                          "value": "uInt64",
                                          "description": "Unsigned integer 64"
                                        },
                                        {
                                          "name": "float16",
                                          "value": "float16",
                                          "description": "Float 16"
                                        },
                                        {
                                          "name": "float32",
                                          "value": "float32",
                                          "description": "Float 32"
                                        },
                                        {
                                          "name": "float64",
                                          "value": "float64",
                                          "description": "Float 64"
                                        },
                                        {
                                          "name": "date32",
                                          "value": "date32",
                                          "description": "Date 32"
                                        },
                                        {
                                          "name": "date64",
                                          "value": "date64",
                                          "description": "Date 64"
                                        },
                                        {
                                          "name": "binary",
                                          "value": "binary",
                                          "description": "Binary data"
                                        },
                                        {
                                          "name": "utf8",
                                          "value": "utf8",
                                          "description": "UTF8 format"
                                        }
                                      ]
                                    }
                                  },
                                  "mapping": {
                                    "type": "string",
                                    "description": "Delta table schema mapping."
                                  },
                                  "name": {
                                    "type": "string",
                                    "description": "Delta table schema name."
                                  },
                                  "optional": {
                                    "type": "boolean",
                                    "description": "Delta table schema optional."
                                  }
                                },
                                "required": [
                                  "format",
                                  "mapping",
                                  "name",
                                  "optional"
                                ]
                              },
                              "x-ms-identifiers": []
                            },
                            "tableName": {
                              "type": "string",
                              "description": "Delta table name."
                            },
                            "tablePath": {
                              "type": "string",
                              "description": "Delta table path."
                            }
                          },
                          "required": [
                            "schema",
                            "tableName"
                          ]
                        }
                      },
                      "required": [
                        "allowedLatencySecs",
                        "clientId",
                        "maxMessagesPerBatch",
                        "messagePayloadType",
                        "mqttSourceTopic",
                        "table"
                      ]
                    },
                    "provisioningState": {
                      "description": "The status of the last operation.",
                      "readOnly": true,
                      "type": "string",
                      "enum": [
                        "Succeeded",
                        "Failed",
                        "Canceled",
                        "Provisioning",
                        "Updating",
                        "Deleting",
                        "Accepted"
                      ],
                      "x-ms-enum": {
                        "name": "ProvisioningState",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Succeeded",
                            "value": "Succeeded",
                            "description": "Resource has been created."
                          },
                          {
                            "name": "Failed",
                            "value": "Failed",
                            "description": "Resource creation failed."
                          },
                          {
                            "name": "Canceled",
                            "value": "Canceled",
                            "description": "Resource creation was canceled."
                          },
                          {
                            "name": "Provisioning",
                            "value": "Provisioning",
                            "description": "Resource is getting provisioned."
                          },
                          {
                            "name": "Updating",
                            "value": "Updating",
                            "description": "Resource is Updating."
                          },
                          {
                            "name": "Deleting",
                            "value": "Deleting",
                            "description": "Resource is Deleting."
                          },
                          {
                            "name": "Accepted",
                            "value": "Accepted",
                            "description": "Resource has been Accepted."
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "dataLakeConnectorRef",
                    "mapping"
                  ]
                },
                "extendedLocation": {
                  "description": "Extended Location",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ],
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The name of the extended location."
                    },
                    "type": {
                      "description": "Type of ExtendedLocation.",
                      "type": "string",
                      "enum": [
                        "CustomLocation"
                      ],
                      "x-ms-enum": {
                        "name": "ExtendedLocationType",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "CustomLocation",
                            "value": "CustomLocation",
                            "description": "CustomLocation type"
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "name",
                    "type"
                  ]
                }
              },
              "required": [
                "extendedLocation"
              ]
            },
            "headers": {
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "DataLakeConnectorTopicMap_Update",
        "tags": [
          "DataLakeConnectorTopicMap"
        ],
        "description": "Update a DataLakeTopicMapResource",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group. The name is case insensitive.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "x-ms-parameter-location": "method"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "dataLakeConnectorName",
            "in": "path",
            "description": "Name of MQ dataLakeConnector resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "topicMapName",
            "in": "path",
            "description": "Name of MQ dataLakeConnector/topicMap resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "properties",
            "in": "body",
            "description": "The resource properties to be updated.",
            "required": true,
            "schema": {
              "type": "object",
              "description": "The type used for update operations of the DataLakeTopicMapResource.",
              "properties": {
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "dataLakeConnectorRef": {
                      "type": "string",
                      "description": "DataLake Connector CRD to use."
                    },
                    "mapping": {
                      "description": "TopicMap for DataLake connector.",
                      "type": "object",
                      "properties": {
                        "allowedLatencySecs": {
                          "type": "integer",
                          "format": "int32",
                          "description": "Allowed latency for transferring data.",
                          "minimum": 0,
                          "maximum": 65535
                        },
                        "clientId": {
                          "type": "string",
                          "description": "Client Id to use."
                        },
                        "maxMessagesPerBatch": {
                          "type": "integer",
                          "format": "int64",
                          "description": "Maximum messages to send per Batch.",
                          "minimum": 0,
                          "maximum": 4294967295
                        },
                        "messagePayloadType": {
                          "type": "string",
                          "description": "Message payload type."
                        },
                        "mqttSourceTopic": {
                          "type": "string",
                          "description": "Mqtt source topic."
                        },
                        "qos": {
                          "type": "integer",
                          "format": "int32",
                          "description": "Quality of Service.",
                          "default": 1,
                          "minimum": 0,
                          "maximum": 2
                        },
                        "table": {
                          "description": "Delta table properties to use.",
                          "type": "object",
                          "properties": {
                            "schema": {
                              "type": "array",
                              "description": "Schema list supported.",
                              "items": {
                                "type": "object",
                                "description": "Delta table schema properties",
                                "properties": {
                                  "format": {
                                    "description": "Delta table format supported.",
                                    "type": "string",
                                    "enum": [
                                      "boolean",
                                      "int8",
                                      "int16",
                                      "int32",
                                      "uInt8",
                                      "uInt16",
                                      "uInt32",
                                      "uInt64",
                                      "float16",
                                      "float32",
                                      "float64",
                                      "date32",
                                      "date64",
                                      "binary",
                                      "utf8"
                                    ],
                                    "x-ms-enum": {
                                      "name": "DeltaTableFormatEnum",
                                      "modelAsString": true,
                                      "values": [
                                        {
                                          "name": "boolean",
                                          "value": "boolean",
                                          "description": "Bool format"
                                        },
                                        {
                                          "name": "int8",
                                          "value": "int8",
                                          "description": "Signed integer 8"
                                        },
                                        {
                                          "name": "int16",
                                          "value": "int16",
                                          "description": "Signed integer 16"
                                        },
                                        {
                                          "name": "int32",
                                          "value": "int32",
                                          "description": "Signed integer 32"
                                        },
                                        {
                                          "name": "uInt8",
                                          "value": "uInt8",
                                          "description": "Unsigned integer 8"
                                        },
                                        {
                                          "name": "uInt16",
                                          "value": "uInt16",
                                          "description": "Unsigned integer 16"
                                        },
                                        {
                                          "name": "uInt32",
                                          "value": "uInt32",
                                          "description": "Unsigned integer 32"
                                        },
                                        {
                                          "name": "uInt64",
                                          "value": "uInt64",
                                          "description": "Unsigned integer 64"
                                        },
                                        {
                                          "name": "float16",
                                          "value": "float16",
                                          "description": "Float 16"
                                        },
                                        {
                                          "name": "float32",
                                          "value": "float32",
                                          "description": "Float 32"
                                        },
                                        {
                                          "name": "float64",
                                          "value": "float64",
                                          "description": "Float 64"
                                        },
                                        {
                                          "name": "date32",
                                          "value": "date32",
                                          "description": "Date 32"
                                        },
                                        {
                                          "name": "date64",
                                          "value": "date64",
                                          "description": "Date 64"
                                        },
                                        {
                                          "name": "binary",
                                          "value": "binary",
                                          "description": "Binary data"
                                        },
                                        {
                                          "name": "utf8",
                                          "value": "utf8",
                                          "description": "UTF8 format"
                                        }
                                      ]
                                    }
                                  },
                                  "mapping": {
                                    "type": "string",
                                    "description": "Delta table schema mapping."
                                  },
                                  "name": {
                                    "type": "string",
                                    "description": "Delta table schema name."
                                  },
                                  "optional": {
                                    "type": "boolean",
                                    "description": "Delta table schema optional."
                                  }
                                },
                                "required": [
                                  "format",
                                  "mapping",
                                  "name",
                                  "optional"
                                ]
                              },
                              "x-ms-identifiers": []
                            },
                            "tableName": {
                              "type": "string",
                              "description": "Delta table name."
                            },
                            "tablePath": {
                              "type": "string",
                              "description": "Delta table path."
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "type": "object",
              "description": "MQ dataLakeConnector/topicMap resource",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "description": "The name of the resource",
                  "readOnly": true
                },
                "type": {
                  "type": "string",
                  "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                  "readOnly": true
                },
                "systemData": {
                  "type": "object",
                  "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                  "readOnly": true,
                  "properties": {
                    "createdBy": {
                      "type": "string",
                      "description": "The identity that created the resource."
                    },
                    "createdByType": {
                      "type": "string",
                      "description": "The type of identity that created the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource creation (UTC)."
                    },
                    "lastModifiedBy": {
                      "type": "string",
                      "description": "The identity that last modified the resource."
                    },
                    "lastModifiedByType": {
                      "type": "string",
                      "description": "The type of identity that last modified the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "lastModifiedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource last modification (UTC)"
                    }
                  }
                },
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "x-ms-mutability": [
                    "read",
                    "create",
                    "update"
                  ]
                },
                "location": {
                  "type": "string",
                  "description": "The geo-location where the resource lives",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ]
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "dataLakeConnectorRef": {
                      "type": "string",
                      "description": "DataLake Connector CRD to use."
                    },
                    "mapping": {
                      "description": "TopicMap for DataLake connector.",
                      "type": "object",
                      "properties": {
                        "allowedLatencySecs": {
                          "type": "integer",
                          "format": "int32",
                          "description": "Allowed latency for transferring data.",
                          "minimum": 0,
                          "maximum": 65535
                        },
                        "clientId": {
                          "type": "string",
                          "description": "Client Id to use."
                        },
                        "maxMessagesPerBatch": {
                          "type": "integer",
                          "format": "int64",
                          "description": "Maximum messages to send per Batch.",
                          "minimum": 0,
                          "maximum": 4294967295
                        },
                        "messagePayloadType": {
                          "type": "string",
                          "description": "Message payload type."
                        },
                        "mqttSourceTopic": {
                          "type": "string",
                          "description": "Mqtt source topic."
                        },
                        "qos": {
                          "type": "integer",
                          "format": "int32",
                          "description": "Quality of Service.",
                          "default": 1,
                          "minimum": 0,
                          "maximum": 2
                        },
                        "table": {
                          "description": "Delta table properties to use.",
                          "type": "object",
                          "properties": {
                            "schema": {
                              "type": "array",
                              "description": "Schema list supported.",
                              "items": {
                                "type": "object",
                                "description": "Delta table schema properties",
                                "properties": {
                                  "format": {
                                    "description": "Delta table format supported.",
                                    "type": "string",
                                    "enum": [
                                      "boolean",
                                      "int8",
                                      "int16",
                                      "int32",
                                      "uInt8",
                                      "uInt16",
                                      "uInt32",
                                      "uInt64",
                                      "float16",
                                      "float32",
                                      "float64",
                                      "date32",
                                      "date64",
                                      "binary",
                                      "utf8"
                                    ],
                                    "x-ms-enum": {
                                      "name": "DeltaTableFormatEnum",
                                      "modelAsString": true,
                                      "values": [
                                        {
                                          "name": "boolean",
                                          "value": "boolean",
                                          "description": "Bool format"
                                        },
                                        {
                                          "name": "int8",
                                          "value": "int8",
                                          "description": "Signed integer 8"
                                        },
                                        {
                                          "name": "int16",
                                          "value": "int16",
                                          "description": "Signed integer 16"
                                        },
                                        {
                                          "name": "int32",
                                          "value": "int32",
                                          "description": "Signed integer 32"
                                        },
                                        {
                                          "name": "uInt8",
                                          "value": "uInt8",
                                          "description": "Unsigned integer 8"
                                        },
                                        {
                                          "name": "uInt16",
                                          "value": "uInt16",
                                          "description": "Unsigned integer 16"
                                        },
                                        {
                                          "name": "uInt32",
                                          "value": "uInt32",
                                          "description": "Unsigned integer 32"
                                        },
                                        {
                                          "name": "uInt64",
                                          "value": "uInt64",
                                          "description": "Unsigned integer 64"
                                        },
                                        {
                                          "name": "float16",
                                          "value": "float16",
                                          "description": "Float 16"
                                        },
                                        {
                                          "name": "float32",
                                          "value": "float32",
                                          "description": "Float 32"
                                        },
                                        {
                                          "name": "float64",
                                          "value": "float64",
                                          "description": "Float 64"
                                        },
                                        {
                                          "name": "date32",
                                          "value": "date32",
                                          "description": "Date 32"
                                        },
                                        {
                                          "name": "date64",
                                          "value": "date64",
                                          "description": "Date 64"
                                        },
                                        {
                                          "name": "binary",
                                          "value": "binary",
                                          "description": "Binary data"
                                        },
                                        {
                                          "name": "utf8",
                                          "value": "utf8",
                                          "description": "UTF8 format"
                                        }
                                      ]
                                    }
                                  },
                                  "mapping": {
                                    "type": "string",
                                    "description": "Delta table schema mapping."
                                  },
                                  "name": {
                                    "type": "string",
                                    "description": "Delta table schema name."
                                  },
                                  "optional": {
                                    "type": "boolean",
                                    "description": "Delta table schema optional."
                                  }
                                },
                                "required": [
                                  "format",
                                  "mapping",
                                  "name",
                                  "optional"
                                ]
                              },
                              "x-ms-identifiers": []
                            },
                            "tableName": {
                              "type": "string",
                              "description": "Delta table name."
                            },
                            "tablePath": {
                              "type": "string",
                              "description": "Delta table path."
                            }
                          },
                          "required": [
                            "schema",
                            "tableName"
                          ]
                        }
                      },
                      "required": [
                        "allowedLatencySecs",
                        "clientId",
                        "maxMessagesPerBatch",
                        "messagePayloadType",
                        "mqttSourceTopic",
                        "table"
                      ]
                    },
                    "provisioningState": {
                      "description": "The status of the last operation.",
                      "readOnly": true,
                      "type": "string",
                      "enum": [
                        "Succeeded",
                        "Failed",
                        "Canceled",
                        "Provisioning",
                        "Updating",
                        "Deleting",
                        "Accepted"
                      ],
                      "x-ms-enum": {
                        "name": "ProvisioningState",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Succeeded",
                            "value": "Succeeded",
                            "description": "Resource has been created."
                          },
                          {
                            "name": "Failed",
                            "value": "Failed",
                            "description": "Resource creation failed."
                          },
                          {
                            "name": "Canceled",
                            "value": "Canceled",
                            "description": "Resource creation was canceled."
                          },
                          {
                            "name": "Provisioning",
                            "value": "Provisioning",
                            "description": "Resource is getting provisioned."
                          },
                          {
                            "name": "Updating",
                            "value": "Updating",
                            "description": "Resource is Updating."
                          },
                          {
                            "name": "Deleting",
                            "value": "Deleting",
                            "description": "Resource is Deleting."
                          },
                          {
                            "name": "Accepted",
                            "value": "Accepted",
                            "description": "Resource has been Accepted."
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "dataLakeConnectorRef",
                    "mapping"
                  ]
                },
                "extendedLocation": {
                  "description": "Extended Location",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ],
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The name of the extended location."
                    },
                    "type": {
                      "description": "Type of ExtendedLocation.",
                      "type": "string",
                      "enum": [
                        "CustomLocation"
                      ],
                      "x-ms-enum": {
                        "name": "ExtendedLocationType",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "CustomLocation",
                            "value": "CustomLocation",
                            "description": "CustomLocation type"
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "name",
                    "type"
                  ]
                }
              },
              "required": [
                "extendedLocation"
              ]
            }
          }
        }
      },
      "delete": {
        "operationId": "DataLakeConnectorTopicMap_Delete",
        "tags": [
          "DataLakeConnectorTopicMap"
        ],
        "description": "Delete a DataLakeTopicMapResource",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group. The name is case insensitive.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "x-ms-parameter-location": "method"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "dataLakeConnectorName",
            "in": "path",
            "description": "Name of MQ dataLakeConnector resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "topicMapName",
            "in": "path",
            "description": "Name of MQ dataLakeConnector/topicMap resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          }
        ],
        "responses": {
          "202": {
            "description": "Resource deletion accepted.",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              },
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "204": {
            "description": "Resource does not exist."
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTOperationsMQ/mq/{mqName}/diagnosticService": {
      "get": {
        "operationId": "DiagnosticService_ListByMqResource",
        "tags": [
          "DiagnosticService"
        ],
        "description": "List DiagnosticServiceResource resources by MqResource",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group. The name is case insensitive.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "x-ms-parameter-location": "method"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "type": "object",
              "description": "The response of a DiagnosticServiceResource list operation.",
              "properties": {
                "value": {
                  "type": "array",
                  "description": "The DiagnosticServiceResource items on this page",
                  "items": {
                    "type": "object",
                    "description": "MQ diagnostic services resource",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                        "readOnly": true
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the resource",
                        "readOnly": true
                      },
                      "type": {
                        "type": "string",
                        "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                        "readOnly": true
                      },
                      "systemData": {
                        "type": "object",
                        "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                        "readOnly": true,
                        "properties": {
                          "createdBy": {
                            "type": "string",
                            "description": "The identity that created the resource."
                          },
                          "createdByType": {
                            "type": "string",
                            "description": "The type of identity that created the resource.",
                            "enum": [
                              "User",
                              "Application",
                              "ManagedIdentity",
                              "Key"
                            ],
                            "x-ms-enum": {
                              "name": "createdByType",
                              "modelAsString": true
                            }
                          },
                          "createdAt": {
                            "type": "string",
                            "format": "date-time",
                            "description": "The timestamp of resource creation (UTC)."
                          },
                          "lastModifiedBy": {
                            "type": "string",
                            "description": "The identity that last modified the resource."
                          },
                          "lastModifiedByType": {
                            "type": "string",
                            "description": "The type of identity that last modified the resource.",
                            "enum": [
                              "User",
                              "Application",
                              "ManagedIdentity",
                              "Key"
                            ],
                            "x-ms-enum": {
                              "name": "createdByType",
                              "modelAsString": true
                            }
                          },
                          "lastModifiedAt": {
                            "type": "string",
                            "format": "date-time",
                            "description": "The timestamp of resource last modification (UTC)"
                          }
                        }
                      },
                      "tags": {
                        "type": "object",
                        "description": "Resource tags.",
                        "additionalProperties": {
                          "type": "string"
                        },
                        "x-ms-mutability": [
                          "read",
                          "create",
                          "update"
                        ]
                      },
                      "location": {
                        "type": "string",
                        "description": "The geo-location where the resource lives",
                        "x-ms-mutability": [
                          "read",
                          "create"
                        ]
                      },
                      "properties": {
                        "description": "The resource-specific properties for this resource.",
                        "x-ms-client-flatten": true,
                        "type": "object",
                        "properties": {
                          "dataExportFrequencySeconds": {
                            "type": "integer",
                            "format": "int32",
                            "description": "The frequency at which the data will be exported.",
                            "default": 10,
                            "minimum": 0,
                            "maximum": 65535
                          },
                          "image": {
                            "description": "The details of Diagnostic Service Docker Image.",
                            "type": "object",
                            "properties": {
                              "pullPolicy": {
                                "type": "string",
                                "description": "Image pull policy."
                              },
                              "pullSecrets": {
                                "type": "string",
                                "description": "Image pull secrets."
                              },
                              "repository": {
                                "type": "string",
                                "description": "The Docker image name."
                              },
                              "tag": {
                                "type": "string",
                                "description": "The Docker  image tag."
                              }
                            },
                            "required": [
                              "repository",
                              "tag"
                            ]
                          },
                          "logFormat": {
                            "type": "string",
                            "description": "The format for the logs generated.",
                            "default": "json"
                          },
                          "logLevel": {
                            "type": "string",
                            "description": "The format for the logs generated.",
                            "default": "info"
                          },
                          "maxDataStorageSize": {
                            "type": "integer",
                            "format": "int64",
                            "description": "The maximum data stored in MiB.",
                            "default": 16,
                            "minimum": 0,
                            "maximum": 4294967295
                          },
                          "metricsPort": {
                            "type": "integer",
                            "format": "int32",
                            "description": "The port at which metrics is exposed.",
                            "default": 9600,
                            "minimum": 0,
                            "maximum": 65535
                          },
                          "openTelemetryTracesCollectorAddr": {
                            "type": "string",
                            "description": "The destination to collect traces. Diagnostic service will push traces to this endpoint"
                          },
                          "provisioningState": {
                            "description": "The status of the last operation.",
                            "readOnly": true,
                            "type": "string",
                            "enum": [
                              "Succeeded",
                              "Failed",
                              "Canceled",
                              "Provisioning",
                              "Updating",
                              "Deleting",
                              "Accepted"
                            ],
                            "x-ms-enum": {
                              "name": "ProvisioningState",
                              "modelAsString": true,
                              "values": [
                                {
                                  "name": "Succeeded",
                                  "value": "Succeeded",
                                  "description": "Resource has been created."
                                },
                                {
                                  "name": "Failed",
                                  "value": "Failed",
                                  "description": "Resource creation failed."
                                },
                                {
                                  "name": "Canceled",
                                  "value": "Canceled",
                                  "description": "Resource creation was canceled."
                                },
                                {
                                  "name": "Provisioning",
                                  "value": "Provisioning",
                                  "description": "Resource is getting provisioned."
                                },
                                {
                                  "name": "Updating",
                                  "value": "Updating",
                                  "description": "Resource is Updating."
                                },
                                {
                                  "name": "Deleting",
                                  "value": "Deleting",
                                  "description": "Resource is Deleting."
                                },
                                {
                                  "name": "Accepted",
                                  "value": "Accepted",
                                  "description": "Resource has been Accepted."
                                }
                              ]
                            }
                          },
                          "staleDataTimeoutSeconds": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Metric inactivity timeout.",
                            "default": 600,
                            "minimum": 0,
                            "maximum": 65535
                          }
                        },
                        "required": [
                          "image"
                        ]
                      },
                      "extendedLocation": {
                        "description": "Extended Location",
                        "x-ms-mutability": [
                          "read",
                          "create"
                        ],
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "The name of the extended location."
                          },
                          "type": {
                            "description": "Type of ExtendedLocation.",
                            "type": "string",
                            "enum": [
                              "CustomLocation"
                            ],
                            "x-ms-enum": {
                              "name": "ExtendedLocationType",
                              "modelAsString": true,
                              "values": [
                                {
                                  "name": "CustomLocation",
                                  "value": "CustomLocation",
                                  "description": "CustomLocation type"
                                }
                              ]
                            }
                          }
                        },
                        "required": [
                          "name",
                          "type"
                        ]
                      }
                    },
                    "required": [
                      "extendedLocation"
                    ]
                  }
                },
                "nextLink": {
                  "type": "string",
                  "format": "uri",
                  "description": "The link to the next page of items"
                }
              },
              "required": [
                "value"
              ]
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTOperationsMQ/mq/{mqName}/diagnosticService/{diagnosticServiceName}": {
      "get": {
        "operationId": "DiagnosticService_Get",
        "tags": [
          "DiagnosticService"
        ],
        "description": "Get a DiagnosticServiceResource",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group. The name is case insensitive.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "x-ms-parameter-location": "method"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "diagnosticServiceName",
            "in": "path",
            "description": "Name of MQ diagnostic resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "type": "object",
              "description": "MQ diagnostic services resource",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "description": "The name of the resource",
                  "readOnly": true
                },
                "type": {
                  "type": "string",
                  "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                  "readOnly": true
                },
                "systemData": {
                  "type": "object",
                  "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                  "readOnly": true,
                  "properties": {
                    "createdBy": {
                      "type": "string",
                      "description": "The identity that created the resource."
                    },
                    "createdByType": {
                      "type": "string",
                      "description": "The type of identity that created the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource creation (UTC)."
                    },
                    "lastModifiedBy": {
                      "type": "string",
                      "description": "The identity that last modified the resource."
                    },
                    "lastModifiedByType": {
                      "type": "string",
                      "description": "The type of identity that last modified the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "lastModifiedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource last modification (UTC)"
                    }
                  }
                },
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "x-ms-mutability": [
                    "read",
                    "create",
                    "update"
                  ]
                },
                "location": {
                  "type": "string",
                  "description": "The geo-location where the resource lives",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ]
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "dataExportFrequencySeconds": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The frequency at which the data will be exported.",
                      "default": 10,
                      "minimum": 0,
                      "maximum": 65535
                    },
                    "image": {
                      "description": "The details of Diagnostic Service Docker Image.",
                      "type": "object",
                      "properties": {
                        "pullPolicy": {
                          "type": "string",
                          "description": "Image pull policy."
                        },
                        "pullSecrets": {
                          "type": "string",
                          "description": "Image pull secrets."
                        },
                        "repository": {
                          "type": "string",
                          "description": "The Docker image name."
                        },
                        "tag": {
                          "type": "string",
                          "description": "The Docker  image tag."
                        }
                      },
                      "required": [
                        "repository",
                        "tag"
                      ]
                    },
                    "logFormat": {
                      "type": "string",
                      "description": "The format for the logs generated.",
                      "default": "json"
                    },
                    "logLevel": {
                      "type": "string",
                      "description": "The format for the logs generated.",
                      "default": "info"
                    },
                    "maxDataStorageSize": {
                      "type": "integer",
                      "format": "int64",
                      "description": "The maximum data stored in MiB.",
                      "default": 16,
                      "minimum": 0,
                      "maximum": 4294967295
                    },
                    "metricsPort": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The port at which metrics is exposed.",
                      "default": 9600,
                      "minimum": 0,
                      "maximum": 65535
                    },
                    "openTelemetryTracesCollectorAddr": {
                      "type": "string",
                      "description": "The destination to collect traces. Diagnostic service will push traces to this endpoint"
                    },
                    "provisioningState": {
                      "description": "The status of the last operation.",
                      "readOnly": true,
                      "type": "string",
                      "enum": [
                        "Succeeded",
                        "Failed",
                        "Canceled",
                        "Provisioning",
                        "Updating",
                        "Deleting",
                        "Accepted"
                      ],
                      "x-ms-enum": {
                        "name": "ProvisioningState",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Succeeded",
                            "value": "Succeeded",
                            "description": "Resource has been created."
                          },
                          {
                            "name": "Failed",
                            "value": "Failed",
                            "description": "Resource creation failed."
                          },
                          {
                            "name": "Canceled",
                            "value": "Canceled",
                            "description": "Resource creation was canceled."
                          },
                          {
                            "name": "Provisioning",
                            "value": "Provisioning",
                            "description": "Resource is getting provisioned."
                          },
                          {
                            "name": "Updating",
                            "value": "Updating",
                            "description": "Resource is Updating."
                          },
                          {
                            "name": "Deleting",
                            "value": "Deleting",
                            "description": "Resource is Deleting."
                          },
                          {
                            "name": "Accepted",
                            "value": "Accepted",
                            "description": "Resource has been Accepted."
                          }
                        ]
                      }
                    },
                    "staleDataTimeoutSeconds": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Metric inactivity timeout.",
                      "default": 600,
                      "minimum": 0,
                      "maximum": 65535
                    }
                  },
                  "required": [
                    "image"
                  ]
                },
                "extendedLocation": {
                  "description": "Extended Location",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ],
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The name of the extended location."
                    },
                    "type": {
                      "description": "Type of ExtendedLocation.",
                      "type": "string",
                      "enum": [
                        "CustomLocation"
                      ],
                      "x-ms-enum": {
                        "name": "ExtendedLocationType",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "CustomLocation",
                            "value": "CustomLocation",
                            "description": "CustomLocation type"
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "name",
                    "type"
                  ]
                }
              },
              "required": [
                "extendedLocation"
              ]
            }
          }
        }
      },
      "put": {
        "operationId": "DiagnosticService_CreateOrUpdate",
        "tags": [
          "DiagnosticService"
        ],
        "description": "Create a DiagnosticServiceResource",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group. The name is case insensitive.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "x-ms-parameter-location": "method"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "diagnosticServiceName",
            "in": "path",
            "description": "Name of MQ diagnostic resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "resource",
            "in": "body",
            "description": "Resource create parameters.",
            "required": true,
            "schema": {
              "type": "object",
              "description": "MQ diagnostic services resource",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "description": "The name of the resource",
                  "readOnly": true
                },
                "type": {
                  "type": "string",
                  "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                  "readOnly": true
                },
                "systemData": {
                  "type": "object",
                  "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                  "readOnly": true,
                  "properties": {
                    "createdBy": {
                      "type": "string",
                      "description": "The identity that created the resource."
                    },
                    "createdByType": {
                      "type": "string",
                      "description": "The type of identity that created the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource creation (UTC)."
                    },
                    "lastModifiedBy": {
                      "type": "string",
                      "description": "The identity that last modified the resource."
                    },
                    "lastModifiedByType": {
                      "type": "string",
                      "description": "The type of identity that last modified the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "lastModifiedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource last modification (UTC)"
                    }
                  }
                },
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "x-ms-mutability": [
                    "read",
                    "create",
                    "update"
                  ]
                },
                "location": {
                  "type": "string",
                  "description": "The geo-location where the resource lives",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ]
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "dataExportFrequencySeconds": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The frequency at which the data will be exported.",
                      "default": 10,
                      "minimum": 0,
                      "maximum": 65535
                    },
                    "image": {
                      "description": "The details of Diagnostic Service Docker Image.",
                      "type": "object",
                      "properties": {
                        "pullPolicy": {
                          "type": "string",
                          "description": "Image pull policy."
                        },
                        "pullSecrets": {
                          "type": "string",
                          "description": "Image pull secrets."
                        },
                        "repository": {
                          "type": "string",
                          "description": "The Docker image name."
                        },
                        "tag": {
                          "type": "string",
                          "description": "The Docker  image tag."
                        }
                      },
                      "required": [
                        "repository",
                        "tag"
                      ]
                    },
                    "logFormat": {
                      "type": "string",
                      "description": "The format for the logs generated.",
                      "default": "json"
                    },
                    "logLevel": {
                      "type": "string",
                      "description": "The format for the logs generated.",
                      "default": "info"
                    },
                    "maxDataStorageSize": {
                      "type": "integer",
                      "format": "int64",
                      "description": "The maximum data stored in MiB.",
                      "default": 16,
                      "minimum": 0,
                      "maximum": 4294967295
                    },
                    "metricsPort": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The port at which metrics is exposed.",
                      "default": 9600,
                      "minimum": 0,
                      "maximum": 65535
                    },
                    "openTelemetryTracesCollectorAddr": {
                      "type": "string",
                      "description": "The destination to collect traces. Diagnostic service will push traces to this endpoint"
                    },
                    "provisioningState": {
                      "description": "The status of the last operation.",
                      "readOnly": true,
                      "type": "string",
                      "enum": [
                        "Succeeded",
                        "Failed",
                        "Canceled",
                        "Provisioning",
                        "Updating",
                        "Deleting",
                        "Accepted"
                      ],
                      "x-ms-enum": {
                        "name": "ProvisioningState",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Succeeded",
                            "value": "Succeeded",
                            "description": "Resource has been created."
                          },
                          {
                            "name": "Failed",
                            "value": "Failed",
                            "description": "Resource creation failed."
                          },
                          {
                            "name": "Canceled",
                            "value": "Canceled",
                            "description": "Resource creation was canceled."
                          },
                          {
                            "name": "Provisioning",
                            "value": "Provisioning",
                            "description": "Resource is getting provisioned."
                          },
                          {
                            "name": "Updating",
                            "value": "Updating",
                            "description": "Resource is Updating."
                          },
                          {
                            "name": "Deleting",
                            "value": "Deleting",
                            "description": "Resource is Deleting."
                          },
                          {
                            "name": "Accepted",
                            "value": "Accepted",
                            "description": "Resource has been Accepted."
                          }
                        ]
                      }
                    },
                    "staleDataTimeoutSeconds": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Metric inactivity timeout.",
                      "default": 600,
                      "minimum": 0,
                      "maximum": 65535
                    }
                  },
                  "required": [
                    "image"
                  ]
                },
                "extendedLocation": {
                  "description": "Extended Location",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ],
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The name of the extended location."
                    },
                    "type": {
                      "description": "Type of ExtendedLocation.",
                      "type": "string",
                      "enum": [
                        "CustomLocation"
                      ],
                      "x-ms-enum": {
                        "name": "ExtendedLocationType",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "CustomLocation",
                            "value": "CustomLocation",
                            "description": "CustomLocation type"
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "name",
                    "type"
                  ]
                }
              },
              "required": [
                "extendedLocation"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resource 'DiagnosticServiceResource' update operation succeeded",
            "schema": {
              "type": "object",
              "description": "MQ diagnostic services resource",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "description": "The name of the resource",
                  "readOnly": true
                },
                "type": {
                  "type": "string",
                  "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                  "readOnly": true
                },
                "systemData": {
                  "type": "object",
                  "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                  "readOnly": true,
                  "properties": {
                    "createdBy": {
                      "type": "string",
                      "description": "The identity that created the resource."
                    },
                    "createdByType": {
                      "type": "string",
                      "description": "The type of identity that created the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource creation (UTC)."
                    },
                    "lastModifiedBy": {
                      "type": "string",
                      "description": "The identity that last modified the resource."
                    },
                    "lastModifiedByType": {
                      "type": "string",
                      "description": "The type of identity that last modified the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "lastModifiedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource last modification (UTC)"
                    }
                  }
                },
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "x-ms-mutability": [
                    "read",
                    "create",
                    "update"
                  ]
                },
                "location": {
                  "type": "string",
                  "description": "The geo-location where the resource lives",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ]
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "dataExportFrequencySeconds": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The frequency at which the data will be exported.",
                      "default": 10,
                      "minimum": 0,
                      "maximum": 65535
                    },
                    "image": {
                      "description": "The details of Diagnostic Service Docker Image.",
                      "type": "object",
                      "properties": {
                        "pullPolicy": {
                          "type": "string",
                          "description": "Image pull policy."
                        },
                        "pullSecrets": {
                          "type": "string",
                          "description": "Image pull secrets."
                        },
                        "repository": {
                          "type": "string",
                          "description": "The Docker image name."
                        },
                        "tag": {
                          "type": "string",
                          "description": "The Docker  image tag."
                        }
                      },
                      "required": [
                        "repository",
                        "tag"
                      ]
                    },
                    "logFormat": {
                      "type": "string",
                      "description": "The format for the logs generated.",
                      "default": "json"
                    },
                    "logLevel": {
                      "type": "string",
                      "description": "The format for the logs generated.",
                      "default": "info"
                    },
                    "maxDataStorageSize": {
                      "type": "integer",
                      "format": "int64",
                      "description": "The maximum data stored in MiB.",
                      "default": 16,
                      "minimum": 0,
                      "maximum": 4294967295
                    },
                    "metricsPort": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The port at which metrics is exposed.",
                      "default": 9600,
                      "minimum": 0,
                      "maximum": 65535
                    },
                    "openTelemetryTracesCollectorAddr": {
                      "type": "string",
                      "description": "The destination to collect traces. Diagnostic service will push traces to this endpoint"
                    },
                    "provisioningState": {
                      "description": "The status of the last operation.",
                      "readOnly": true,
                      "type": "string",
                      "enum": [
                        "Succeeded",
                        "Failed",
                        "Canceled",
                        "Provisioning",
                        "Updating",
                        "Deleting",
                        "Accepted"
                      ],
                      "x-ms-enum": {
                        "name": "ProvisioningState",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Succeeded",
                            "value": "Succeeded",
                            "description": "Resource has been created."
                          },
                          {
                            "name": "Failed",
                            "value": "Failed",
                            "description": "Resource creation failed."
                          },
                          {
                            "name": "Canceled",
                            "value": "Canceled",
                            "description": "Resource creation was canceled."
                          },
                          {
                            "name": "Provisioning",
                            "value": "Provisioning",
                            "description": "Resource is getting provisioned."
                          },
                          {
                            "name": "Updating",
                            "value": "Updating",
                            "description": "Resource is Updating."
                          },
                          {
                            "name": "Deleting",
                            "value": "Deleting",
                            "description": "Resource is Deleting."
                          },
                          {
                            "name": "Accepted",
                            "value": "Accepted",
                            "description": "Resource has been Accepted."
                          }
                        ]
                      }
                    },
                    "staleDataTimeoutSeconds": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Metric inactivity timeout.",
                      "default": 600,
                      "minimum": 0,
                      "maximum": 65535
                    }
                  },
                  "required": [
                    "image"
                  ]
                },
                "extendedLocation": {
                  "description": "Extended Location",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ],
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The name of the extended location."
                    },
                    "type": {
                      "description": "Type of ExtendedLocation.",
                      "type": "string",
                      "enum": [
                        "CustomLocation"
                      ],
                      "x-ms-enum": {
                        "name": "ExtendedLocationType",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "CustomLocation",
                            "value": "CustomLocation",
                            "description": "CustomLocation type"
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "name",
                    "type"
                  ]
                }
              },
              "required": [
                "extendedLocation"
              ]
            }
          },
          "201": {
            "description": "Resource 'DiagnosticServiceResource' create operation succeeded",
            "schema": {
              "type": "object",
              "description": "MQ diagnostic services resource",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "description": "The name of the resource",
                  "readOnly": true
                },
                "type": {
                  "type": "string",
                  "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                  "readOnly": true
                },
                "systemData": {
                  "type": "object",
                  "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                  "readOnly": true,
                  "properties": {
                    "createdBy": {
                      "type": "string",
                      "description": "The identity that created the resource."
                    },
                    "createdByType": {
                      "type": "string",
                      "description": "The type of identity that created the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource creation (UTC)."
                    },
                    "lastModifiedBy": {
                      "type": "string",
                      "description": "The identity that last modified the resource."
                    },
                    "lastModifiedByType": {
                      "type": "string",
                      "description": "The type of identity that last modified the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "lastModifiedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource last modification (UTC)"
                    }
                  }
                },
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "x-ms-mutability": [
                    "read",
                    "create",
                    "update"
                  ]
                },
                "location": {
                  "type": "string",
                  "description": "The geo-location where the resource lives",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ]
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "dataExportFrequencySeconds": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The frequency at which the data will be exported.",
                      "default": 10,
                      "minimum": 0,
                      "maximum": 65535
                    },
                    "image": {
                      "description": "The details of Diagnostic Service Docker Image.",
                      "type": "object",
                      "properties": {
                        "pullPolicy": {
                          "type": "string",
                          "description": "Image pull policy."
                        },
                        "pullSecrets": {
                          "type": "string",
                          "description": "Image pull secrets."
                        },
                        "repository": {
                          "type": "string",
                          "description": "The Docker image name."
                        },
                        "tag": {
                          "type": "string",
                          "description": "The Docker  image tag."
                        }
                      },
                      "required": [
                        "repository",
                        "tag"
                      ]
                    },
                    "logFormat": {
                      "type": "string",
                      "description": "The format for the logs generated.",
                      "default": "json"
                    },
                    "logLevel": {
                      "type": "string",
                      "description": "The format for the logs generated.",
                      "default": "info"
                    },
                    "maxDataStorageSize": {
                      "type": "integer",
                      "format": "int64",
                      "description": "The maximum data stored in MiB.",
                      "default": 16,
                      "minimum": 0,
                      "maximum": 4294967295
                    },
                    "metricsPort": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The port at which metrics is exposed.",
                      "default": 9600,
                      "minimum": 0,
                      "maximum": 65535
                    },
                    "openTelemetryTracesCollectorAddr": {
                      "type": "string",
                      "description": "The destination to collect traces. Diagnostic service will push traces to this endpoint"
                    },
                    "provisioningState": {
                      "description": "The status of the last operation.",
                      "readOnly": true,
                      "type": "string",
                      "enum": [
                        "Succeeded",
                        "Failed",
                        "Canceled",
                        "Provisioning",
                        "Updating",
                        "Deleting",
                        "Accepted"
                      ],
                      "x-ms-enum": {
                        "name": "ProvisioningState",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Succeeded",
                            "value": "Succeeded",
                            "description": "Resource has been created."
                          },
                          {
                            "name": "Failed",
                            "value": "Failed",
                            "description": "Resource creation failed."
                          },
                          {
                            "name": "Canceled",
                            "value": "Canceled",
                            "description": "Resource creation was canceled."
                          },
                          {
                            "name": "Provisioning",
                            "value": "Provisioning",
                            "description": "Resource is getting provisioned."
                          },
                          {
                            "name": "Updating",
                            "value": "Updating",
                            "description": "Resource is Updating."
                          },
                          {
                            "name": "Deleting",
                            "value": "Deleting",
                            "description": "Resource is Deleting."
                          },
                          {
                            "name": "Accepted",
                            "value": "Accepted",
                            "description": "Resource has been Accepted."
                          }
                        ]
                      }
                    },
                    "staleDataTimeoutSeconds": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Metric inactivity timeout.",
                      "default": 600,
                      "minimum": 0,
                      "maximum": 65535
                    }
                  },
                  "required": [
                    "image"
                  ]
                },
                "extendedLocation": {
                  "description": "Extended Location",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ],
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The name of the extended location."
                    },
                    "type": {
                      "description": "Type of ExtendedLocation.",
                      "type": "string",
                      "enum": [
                        "CustomLocation"
                      ],
                      "x-ms-enum": {
                        "name": "ExtendedLocationType",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "CustomLocation",
                            "value": "CustomLocation",
                            "description": "CustomLocation type"
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "name",
                    "type"
                  ]
                }
              },
              "required": [
                "extendedLocation"
              ]
            },
            "headers": {
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "DiagnosticService_Update",
        "tags": [
          "DiagnosticService"
        ],
        "description": "Update a DiagnosticServiceResource",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group. The name is case insensitive.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "x-ms-parameter-location": "method"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "diagnosticServiceName",
            "in": "path",
            "description": "Name of MQ diagnostic resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "properties",
            "in": "body",
            "description": "The resource properties to be updated.",
            "required": true,
            "schema": {
              "type": "object",
              "description": "The type used for update operations of the DiagnosticServiceResource.",
              "properties": {
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "dataExportFrequencySeconds": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The frequency at which the data will be exported.",
                      "default": 10,
                      "minimum": 0,
                      "maximum": 65535
                    },
                    "image": {
                      "description": "The details of Diagnostic Service Docker Image.",
                      "type": "object",
                      "properties": {
                        "pullPolicy": {
                          "type": "string",
                          "description": "Image pull policy."
                        },
                        "pullSecrets": {
                          "type": "string",
                          "description": "Image pull secrets."
                        },
                        "repository": {
                          "type": "string",
                          "description": "The Docker image name."
                        },
                        "tag": {
                          "type": "string",
                          "description": "The Docker  image tag."
                        }
                      }
                    },
                    "logFormat": {
                      "type": "string",
                      "description": "The format for the logs generated.",
                      "default": "json"
                    },
                    "logLevel": {
                      "type": "string",
                      "description": "The format for the logs generated.",
                      "default": "info"
                    },
                    "maxDataStorageSize": {
                      "type": "integer",
                      "format": "int64",
                      "description": "The maximum data stored in MiB.",
                      "default": 16,
                      "minimum": 0,
                      "maximum": 4294967295
                    },
                    "metricsPort": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The port at which metrics is exposed.",
                      "default": 9600,
                      "minimum": 0,
                      "maximum": 65535
                    },
                    "openTelemetryTracesCollectorAddr": {
                      "type": "string",
                      "description": "The destination to collect traces. Diagnostic service will push traces to this endpoint"
                    },
                    "staleDataTimeoutSeconds": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Metric inactivity timeout.",
                      "default": 600,
                      "minimum": 0,
                      "maximum": 65535
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "type": "object",
              "description": "MQ diagnostic services resource",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "description": "The name of the resource",
                  "readOnly": true
                },
                "type": {
                  "type": "string",
                  "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                  "readOnly": true
                },
                "systemData": {
                  "type": "object",
                  "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                  "readOnly": true,
                  "properties": {
                    "createdBy": {
                      "type": "string",
                      "description": "The identity that created the resource."
                    },
                    "createdByType": {
                      "type": "string",
                      "description": "The type of identity that created the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource creation (UTC)."
                    },
                    "lastModifiedBy": {
                      "type": "string",
                      "description": "The identity that last modified the resource."
                    },
                    "lastModifiedByType": {
                      "type": "string",
                      "description": "The type of identity that last modified the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "lastModifiedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource last modification (UTC)"
                    }
                  }
                },
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "x-ms-mutability": [
                    "read",
                    "create",
                    "update"
                  ]
                },
                "location": {
                  "type": "string",
                  "description": "The geo-location where the resource lives",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ]
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "dataExportFrequencySeconds": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The frequency at which the data will be exported.",
                      "default": 10,
                      "minimum": 0,
                      "maximum": 65535
                    },
                    "image": {
                      "description": "The details of Diagnostic Service Docker Image.",
                      "type": "object",
                      "properties": {
                        "pullPolicy": {
                          "type": "string",
                          "description": "Image pull policy."
                        },
                        "pullSecrets": {
                          "type": "string",
                          "description": "Image pull secrets."
                        },
                        "repository": {
                          "type": "string",
                          "description": "The Docker image name."
                        },
                        "tag": {
                          "type": "string",
                          "description": "The Docker  image tag."
                        }
                      },
                      "required": [
                        "repository",
                        "tag"
                      ]
                    },
                    "logFormat": {
                      "type": "string",
                      "description": "The format for the logs generated.",
                      "default": "json"
                    },
                    "logLevel": {
                      "type": "string",
                      "description": "The format for the logs generated.",
                      "default": "info"
                    },
                    "maxDataStorageSize": {
                      "type": "integer",
                      "format": "int64",
                      "description": "The maximum data stored in MiB.",
                      "default": 16,
                      "minimum": 0,
                      "maximum": 4294967295
                    },
                    "metricsPort": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The port at which metrics is exposed.",
                      "default": 9600,
                      "minimum": 0,
                      "maximum": 65535
                    },
                    "openTelemetryTracesCollectorAddr": {
                      "type": "string",
                      "description": "The destination to collect traces. Diagnostic service will push traces to this endpoint"
                    },
                    "provisioningState": {
                      "description": "The status of the last operation.",
                      "readOnly": true,
                      "type": "string",
                      "enum": [
                        "Succeeded",
                        "Failed",
                        "Canceled",
                        "Provisioning",
                        "Updating",
                        "Deleting",
                        "Accepted"
                      ],
                      "x-ms-enum": {
                        "name": "ProvisioningState",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Succeeded",
                            "value": "Succeeded",
                            "description": "Resource has been created."
                          },
                          {
                            "name": "Failed",
                            "value": "Failed",
                            "description": "Resource creation failed."
                          },
                          {
                            "name": "Canceled",
                            "value": "Canceled",
                            "description": "Resource creation was canceled."
                          },
                          {
                            "name": "Provisioning",
                            "value": "Provisioning",
                            "description": "Resource is getting provisioned."
                          },
                          {
                            "name": "Updating",
                            "value": "Updating",
                            "description": "Resource is Updating."
                          },
                          {
                            "name": "Deleting",
                            "value": "Deleting",
                            "description": "Resource is Deleting."
                          },
                          {
                            "name": "Accepted",
                            "value": "Accepted",
                            "description": "Resource has been Accepted."
                          }
                        ]
                      }
                    },
                    "staleDataTimeoutSeconds": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Metric inactivity timeout.",
                      "default": 600,
                      "minimum": 0,
                      "maximum": 65535
                    }
                  },
                  "required": [
                    "image"
                  ]
                },
                "extendedLocation": {
                  "description": "Extended Location",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ],
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The name of the extended location."
                    },
                    "type": {
                      "description": "Type of ExtendedLocation.",
                      "type": "string",
                      "enum": [
                        "CustomLocation"
                      ],
                      "x-ms-enum": {
                        "name": "ExtendedLocationType",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "CustomLocation",
                            "value": "CustomLocation",
                            "description": "CustomLocation type"
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "name",
                    "type"
                  ]
                }
              },
              "required": [
                "extendedLocation"
              ]
            }
          }
        }
      },
      "delete": {
        "operationId": "DiagnosticService_Delete",
        "tags": [
          "DiagnosticService"
        ],
        "description": "Delete a DiagnosticServiceResource",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group. The name is case insensitive.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "x-ms-parameter-location": "method"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "diagnosticServiceName",
            "in": "path",
            "description": "Name of MQ diagnostic resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          }
        ],
        "responses": {
          "202": {
            "description": "Resource deletion accepted.",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              },
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "204": {
            "description": "Resource does not exist."
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTOperationsMQ/mq/{mqName}/kafkaConnector": {
      "get": {
        "operationId": "KafkaConnector_ListByMqResource",
        "tags": [
          "KafkaConnector"
        ],
        "description": "List KafkaConnectorResource resources by MqResource",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group. The name is case insensitive.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "x-ms-parameter-location": "method"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "type": "object",
              "description": "The response of a KafkaConnectorResource list operation.",
              "properties": {
                "value": {
                  "type": "array",
                  "description": "The KafkaConnectorResource items on this page",
                  "items": {
                    "type": "object",
                    "description": "MQ kafkaConnector resource",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                        "readOnly": true
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the resource",
                        "readOnly": true
                      },
                      "type": {
                        "type": "string",
                        "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                        "readOnly": true
                      },
                      "systemData": {
                        "type": "object",
                        "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                        "readOnly": true,
                        "properties": {
                          "createdBy": {
                            "type": "string",
                            "description": "The identity that created the resource."
                          },
                          "createdByType": {
                            "type": "string",
                            "description": "The type of identity that created the resource.",
                            "enum": [
                              "User",
                              "Application",
                              "ManagedIdentity",
                              "Key"
                            ],
                            "x-ms-enum": {
                              "name": "createdByType",
                              "modelAsString": true
                            }
                          },
                          "createdAt": {
                            "type": "string",
                            "format": "date-time",
                            "description": "The timestamp of resource creation (UTC)."
                          },
                          "lastModifiedBy": {
                            "type": "string",
                            "description": "The identity that last modified the resource."
                          },
                          "lastModifiedByType": {
                            "type": "string",
                            "description": "The type of identity that last modified the resource.",
                            "enum": [
                              "User",
                              "Application",
                              "ManagedIdentity",
                              "Key"
                            ],
                            "x-ms-enum": {
                              "name": "createdByType",
                              "modelAsString": true
                            }
                          },
                          "lastModifiedAt": {
                            "type": "string",
                            "format": "date-time",
                            "description": "The timestamp of resource last modification (UTC)"
                          }
                        }
                      },
                      "tags": {
                        "type": "object",
                        "description": "Resource tags.",
                        "additionalProperties": {
                          "type": "string"
                        },
                        "x-ms-mutability": [
                          "read",
                          "create",
                          "update"
                        ]
                      },
                      "location": {
                        "type": "string",
                        "description": "The geo-location where the resource lives",
                        "x-ms-mutability": [
                          "read",
                          "create"
                        ]
                      },
                      "properties": {
                        "description": "The resource-specific properties for this resource.",
                        "x-ms-client-flatten": true,
                        "type": "object",
                        "properties": {
                          "clientIdPrefix": {
                            "type": "string",
                            "description": "The client id prefix of the dynamically generated client ids."
                          },
                          "image": {
                            "description": "The details of KafkaConnector Docker Image.",
                            "type": "object",
                            "properties": {
                              "pullPolicy": {
                                "type": "string",
                                "description": "Image pull policy."
                              },
                              "pullSecrets": {
                                "type": "string",
                                "description": "Image pull secrets."
                              },
                              "repository": {
                                "type": "string",
                                "description": "The Docker image name."
                              },
                              "tag": {
                                "type": "string",
                                "description": "The Docker  image tag."
                              }
                            },
                            "required": [
                              "repository",
                              "tag"
                            ]
                          },
                          "instances": {
                            "type": "integer",
                            "format": "int32",
                            "description": "The number of KafkaConnector pods to spin up.",
                            "minimum": 0,
                            "maximum": 65535
                          },
                          "kafkaConnection": {
                            "description": "The details for connecting with Remote Kafka Broker.",
                            "type": "object",
                            "properties": {
                              "authentication": {
                                "description": "The remote broker authentication methods.",
                                "type": "object",
                                "properties": {
                                  "authType": {
                                    "description": "The type of authentication to use for Kafka remote broker.",
                                    "type": "object",
                                    "properties": {
                                      "sasl": {
                                        "description": "Sasl remote broker authentication method.",
                                        "type": "object",
                                        "properties": {
                                          "saslType": {
                                            "description": "Sasl Mechanism for remote broker authentication.",
                                            "type": "string",
                                            "enum": [
                                              "plain",
                                              "scramSha256",
                                              "scramSha512"
                                            ],
                                            "x-ms-enum": {
                                              "name": "KafkaSaslType",
                                              "modelAsString": true,
                                              "values": [
                                                {
                                                  "name": "plain",
                                                  "value": "plain",
                                                  "description": "Sasl Plain authentication."
                                                },
                                                {
                                                  "name": "scramSha256",
                                                  "value": "scramSha256",
                                                  "description": "Sasl ScramSha256 authentication."
                                                },
                                                {
                                                  "name": "scramSha512",
                                                  "value": "scramSha512",
                                                  "description": "Sasl ScramSha512 authentication."
                                                }
                                              ]
                                            }
                                          },
                                          "token": {
                                            "description": "Sasl token for remote broker authentication.",
                                            "type": "object",
                                            "properties": {
                                              "keyVault": {
                                                "description": "Keyvault token keyvault secret properties.",
                                                "type": "object",
                                                "properties": {
                                                  "username": {
                                                    "type": "string",
                                                    "description": "Username to connect with."
                                                  },
                                                  "vault": {
                                                    "description": "KeyVault properties.",
                                                    "type": "object",
                                                    "properties": {
                                                      "credentials": {
                                                        "description": "KeyVault credentials.",
                                                        "type": "object",
                                                        "properties": {
                                                          "servicePrincipalLocalSecretName": {
                                                            "type": "string",
                                                            "description": "KeyVault service principal local secret name."
                                                          }
                                                        },
                                                        "required": [
                                                          "servicePrincipalLocalSecretName"
                                                        ]
                                                      },
                                                      "directoryId": {
                                                        "type": "string",
                                                        "description": "KeyVault directoryId."
                                                      },
                                                      "name": {
                                                        "type": "string",
                                                        "description": "KeyVault name."
                                                      }
                                                    },
                                                    "required": [
                                                      "credentials",
                                                      "directoryId",
                                                      "name"
                                                    ]
                                                  },
                                                  "vaultSecret": {
                                                    "description": "KeyVault secret details.",
                                                    "type": "object",
                                                    "properties": {
                                                      "name": {
                                                        "type": "string",
                                                        "description": "KeyVault secret name."
                                                      },
                                                      "version": {
                                                        "type": "string",
                                                        "description": "KeyVault secret version."
                                                      }
                                                    },
                                                    "required": [
                                                      "name"
                                                    ]
                                                  }
                                                },
                                                "required": [
                                                  "vault",
                                                  "vaultSecret"
                                                ]
                                              },
                                              "secretName": {
                                                "type": "string",
                                                "description": "Secret where cert details are stored."
                                              }
                                            }
                                          }
                                        },
                                        "required": [
                                          "saslType",
                                          "token"
                                        ]
                                      },
                                      "systemAssignedManagedIdentity": {
                                        "description": "Managed identity remote broker authentication method.",
                                        "type": "object",
                                        "properties": {
                                          "audience": {
                                            "type": "string",
                                            "description": "Token audience."
                                          },
                                          "extensionName": {
                                            "type": "string",
                                            "description": "Arc Extension name."
                                          }
                                        },
                                        "required": [
                                          "audience"
                                        ]
                                      },
                                      "x509": {
                                        "description": "X509 remote broker authentication method.",
                                        "type": "object",
                                        "properties": {
                                          "keyVault": {
                                            "description": "Keyvault X509 secret properties.",
                                            "type": "object",
                                            "properties": {
                                              "vault": {
                                                "description": "KeyVault properties.",
                                                "type": "object",
                                                "properties": {
                                                  "credentials": {
                                                    "description": "KeyVault credentials.",
                                                    "type": "object",
                                                    "properties": {
                                                      "servicePrincipalLocalSecretName": {
                                                        "type": "string",
                                                        "description": "KeyVault service principal local secret name."
                                                      }
                                                    },
                                                    "required": [
                                                      "servicePrincipalLocalSecretName"
                                                    ]
                                                  },
                                                  "directoryId": {
                                                    "type": "string",
                                                    "description": "KeyVault directoryId."
                                                  },
                                                  "name": {
                                                    "type": "string",
                                                    "description": "KeyVault name."
                                                  }
                                                },
                                                "required": [
                                                  "credentials",
                                                  "directoryId",
                                                  "name"
                                                ]
                                              },
                                              "vaultCaChainSecret": {
                                                "description": "KeyVault CA chain secret details.",
                                                "type": "object",
                                                "properties": {
                                                  "name": {
                                                    "type": "string",
                                                    "description": "KeyVault secret name."
                                                  },
                                                  "version": {
                                                    "type": "string",
                                                    "description": "KeyVault secret version."
                                                  }
                                                },
                                                "required": [
                                                  "name"
                                                ]
                                              },
                                              "vaultCert": {
                                                "description": "KeyVault Cert secret details.",
                                                "type": "object",
                                                "properties": {
                                                  "name": {
                                                    "type": "string",
                                                    "description": "KeyVault secret name."
                                                  },
                                                  "version": {
                                                    "type": "string",
                                                    "description": "KeyVault secret version."
                                                  }
                                                },
                                                "required": [
                                                  "name"
                                                ]
                                              }
                                            },
                                            "required": [
                                              "vault",
                                              "vaultCert"
                                            ]
                                          },
                                          "secretName": {
                                            "type": "string",
                                            "description": "Secret where cert details are stored."
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "enabled": {
                                    "type": "boolean",
                                    "description": "If authentication is enabled for Kafka remote broker."
                                  }
                                },
                                "required": [
                                  "enabled"
                                ]
                              },
                              "endpoint": {
                                "type": "string",
                                "description": "The endpoint of remote broker to connect to."
                              },
                              "tls": {
                                "description": "TLS details for Remote broker Connection.",
                                "type": "object",
                                "properties": {
                                  "tlsEnabled": {
                                    "type": "boolean",
                                    "description": "Tls Enabled on Remote Broker Connection."
                                  },
                                  "trustedCaCertificateConfigMap": {
                                    "type": "string",
                                    "description": "Trusted CA certificate name for Remote Broker."
                                  }
                                },
                                "required": [
                                  "tlsEnabled"
                                ]
                              }
                            },
                            "required": [
                              "authentication",
                              "endpoint",
                              "tls"
                            ]
                          },
                          "localBrokerConnection": {
                            "description": "The details for connecting with Local Broker.",
                            "type": "object",
                            "properties": {
                              "authentication": {
                                "description": "The authentication methods for LocalBroker connection. NOTE - Enum only one method at a time is supported.",
                                "type": "object",
                                "properties": {
                                  "kubernetes": {
                                    "description": "Kubernetes local broker authentication method.",
                                    "type": "object",
                                    "properties": {
                                      "secretPath": {
                                        "type": "string",
                                        "description": "Secret Path where SAT is mounted.",
                                        "default": "/var/run/serviceaccount/localbroker"
                                      },
                                      "serviceAccountTokenName": {
                                        "type": "string",
                                        "description": "Token name where SAT is mounted on secret path.",
                                        "default": "sat"
                                      }
                                    }
                                  }
                                },
                                "required": [
                                  "kubernetes"
                                ]
                              },
                              "endpoint": {
                                "type": "string",
                                "description": "The endpoint of local broker to connect to.",
                                "default": "aio-mq-dmqtt-frontend:1883"
                              },
                              "tls": {
                                "description": "TLS details for Local broker Connection.",
                                "type": "object",
                                "properties": {
                                  "tlsEnabled": {
                                    "type": "boolean",
                                    "description": "Tls Enabled on Local Broker Connection.",
                                    "default": false
                                  },
                                  "trustedCaCertificateConfigMap": {
                                    "type": "string",
                                    "description": "Trusted CA certificate config map name for Local Broker."
                                  }
                                }
                              }
                            }
                          },
                          "logLevel": {
                            "type": "string",
                            "description": "The log level of the Bridge Connector instances.",
                            "default": "info"
                          },
                          "nodeTolerations": {
                            "description": "The Node Tolerations for the Bridge Connector pods.",
                            "type": "object",
                            "properties": {
                              "effect": {
                                "type": "string",
                                "description": "Toleration effect."
                              },
                              "key": {
                                "type": "string",
                                "description": "Toleration key."
                              },
                              "operator": {
                                "type": "string",
                                "description": "Toleration operator like 'Exists', 'Equal' etc."
                              },
                              "value": {
                                "type": "string",
                                "description": "Toleration Value."
                              }
                            },
                            "required": [
                              "effect",
                              "key",
                              "operator",
                              "value"
                            ]
                          },
                          "provisioningState": {
                            "description": "The status of the last operation.",
                            "readOnly": true,
                            "type": "string",
                            "enum": [
                              "Succeeded",
                              "Failed",
                              "Canceled",
                              "Provisioning",
                              "Updating",
                              "Deleting",
                              "Accepted"
                            ],
                            "x-ms-enum": {
                              "name": "ProvisioningState",
                              "modelAsString": true,
                              "values": [
                                {
                                  "name": "Succeeded",
                                  "value": "Succeeded",
                                  "description": "Resource has been created."
                                },
                                {
                                  "name": "Failed",
                                  "value": "Failed",
                                  "description": "Resource creation failed."
                                },
                                {
                                  "name": "Canceled",
                                  "value": "Canceled",
                                  "description": "Resource creation was canceled."
                                },
                                {
                                  "name": "Provisioning",
                                  "value": "Provisioning",
                                  "description": "Resource is getting provisioned."
                                },
                                {
                                  "name": "Updating",
                                  "value": "Updating",
                                  "description": "Resource is Updating."
                                },
                                {
                                  "name": "Deleting",
                                  "value": "Deleting",
                                  "description": "Resource is Deleting."
                                },
                                {
                                  "name": "Accepted",
                                  "value": "Accepted",
                                  "description": "Resource has been Accepted."
                                }
                              ]
                            }
                          }
                        },
                        "required": [
                          "kafkaConnection"
                        ]
                      },
                      "extendedLocation": {
                        "description": "Extended Location",
                        "x-ms-mutability": [
                          "read",
                          "create"
                        ],
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "The name of the extended location."
                          },
                          "type": {
                            "description": "Type of ExtendedLocation.",
                            "type": "string",
                            "enum": [
                              "CustomLocation"
                            ],
                            "x-ms-enum": {
                              "name": "ExtendedLocationType",
                              "modelAsString": true,
                              "values": [
                                {
                                  "name": "CustomLocation",
                                  "value": "CustomLocation",
                                  "description": "CustomLocation type"
                                }
                              ]
                            }
                          }
                        },
                        "required": [
                          "name",
                          "type"
                        ]
                      }
                    },
                    "required": [
                      "extendedLocation"
                    ]
                  }
                },
                "nextLink": {
                  "type": "string",
                  "format": "uri",
                  "description": "The link to the next page of items"
                }
              },
              "required": [
                "value"
              ]
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTOperationsMQ/mq/{mqName}/kafkaConnector/{kafkaConnectorName}": {
      "get": {
        "operationId": "KafkaConnector_Get",
        "tags": [
          "KafkaConnector"
        ],
        "description": "Get a KafkaConnectorResource",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group. The name is case insensitive.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "x-ms-parameter-location": "method"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "kafkaConnectorName",
            "in": "path",
            "description": "Name of MQ kafkaConnector resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "type": "object",
              "description": "MQ kafkaConnector resource",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "description": "The name of the resource",
                  "readOnly": true
                },
                "type": {
                  "type": "string",
                  "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                  "readOnly": true
                },
                "systemData": {
                  "type": "object",
                  "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                  "readOnly": true,
                  "properties": {
                    "createdBy": {
                      "type": "string",
                      "description": "The identity that created the resource."
                    },
                    "createdByType": {
                      "type": "string",
                      "description": "The type of identity that created the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource creation (UTC)."
                    },
                    "lastModifiedBy": {
                      "type": "string",
                      "description": "The identity that last modified the resource."
                    },
                    "lastModifiedByType": {
                      "type": "string",
                      "description": "The type of identity that last modified the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "lastModifiedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource last modification (UTC)"
                    }
                  }
                },
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "x-ms-mutability": [
                    "read",
                    "create",
                    "update"
                  ]
                },
                "location": {
                  "type": "string",
                  "description": "The geo-location where the resource lives",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ]
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "clientIdPrefix": {
                      "type": "string",
                      "description": "The client id prefix of the dynamically generated client ids."
                    },
                    "image": {
                      "description": "The details of KafkaConnector Docker Image.",
                      "type": "object",
                      "properties": {
                        "pullPolicy": {
                          "type": "string",
                          "description": "Image pull policy."
                        },
                        "pullSecrets": {
                          "type": "string",
                          "description": "Image pull secrets."
                        },
                        "repository": {
                          "type": "string",
                          "description": "The Docker image name."
                        },
                        "tag": {
                          "type": "string",
                          "description": "The Docker  image tag."
                        }
                      },
                      "required": [
                        "repository",
                        "tag"
                      ]
                    },
                    "instances": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The number of KafkaConnector pods to spin up.",
                      "minimum": 0,
                      "maximum": 65535
                    },
                    "kafkaConnection": {
                      "description": "The details for connecting with Remote Kafka Broker.",
                      "type": "object",
                      "properties": {
                        "authentication": {
                          "description": "The remote broker authentication methods.",
                          "type": "object",
                          "properties": {
                            "authType": {
                              "description": "The type of authentication to use for Kafka remote broker.",
                              "type": "object",
                              "properties": {
                                "sasl": {
                                  "description": "Sasl remote broker authentication method.",
                                  "type": "object",
                                  "properties": {
                                    "saslType": {
                                      "description": "Sasl Mechanism for remote broker authentication.",
                                      "type": "string",
                                      "enum": [
                                        "plain",
                                        "scramSha256",
                                        "scramSha512"
                                      ],
                                      "x-ms-enum": {
                                        "name": "KafkaSaslType",
                                        "modelAsString": true,
                                        "values": [
                                          {
                                            "name": "plain",
                                            "value": "plain",
                                            "description": "Sasl Plain authentication."
                                          },
                                          {
                                            "name": "scramSha256",
                                            "value": "scramSha256",
                                            "description": "Sasl ScramSha256 authentication."
                                          },
                                          {
                                            "name": "scramSha512",
                                            "value": "scramSha512",
                                            "description": "Sasl ScramSha512 authentication."
                                          }
                                        ]
                                      }
                                    },
                                    "token": {
                                      "description": "Sasl token for remote broker authentication.",
                                      "type": "object",
                                      "properties": {
                                        "keyVault": {
                                          "description": "Keyvault token keyvault secret properties.",
                                          "type": "object",
                                          "properties": {
                                            "username": {
                                              "type": "string",
                                              "description": "Username to connect with."
                                            },
                                            "vault": {
                                              "description": "KeyVault properties.",
                                              "type": "object",
                                              "properties": {
                                                "credentials": {
                                                  "description": "KeyVault credentials.",
                                                  "type": "object",
                                                  "properties": {
                                                    "servicePrincipalLocalSecretName": {
                                                      "type": "string",
                                                      "description": "KeyVault service principal local secret name."
                                                    }
                                                  },
                                                  "required": [
                                                    "servicePrincipalLocalSecretName"
                                                  ]
                                                },
                                                "directoryId": {
                                                  "type": "string",
                                                  "description": "KeyVault directoryId."
                                                },
                                                "name": {
                                                  "type": "string",
                                                  "description": "KeyVault name."
                                                }
                                              },
                                              "required": [
                                                "credentials",
                                                "directoryId",
                                                "name"
                                              ]
                                            },
                                            "vaultSecret": {
                                              "description": "KeyVault secret details.",
                                              "type": "object",
                                              "properties": {
                                                "name": {
                                                  "type": "string",
                                                  "description": "KeyVault secret name."
                                                },
                                                "version": {
                                                  "type": "string",
                                                  "description": "KeyVault secret version."
                                                }
                                              },
                                              "required": [
                                                "name"
                                              ]
                                            }
                                          },
                                          "required": [
                                            "vault",
                                            "vaultSecret"
                                          ]
                                        },
                                        "secretName": {
                                          "type": "string",
                                          "description": "Secret where cert details are stored."
                                        }
                                      }
                                    }
                                  },
                                  "required": [
                                    "saslType",
                                    "token"
                                  ]
                                },
                                "systemAssignedManagedIdentity": {
                                  "description": "Managed identity remote broker authentication method.",
                                  "type": "object",
                                  "properties": {
                                    "audience": {
                                      "type": "string",
                                      "description": "Token audience."
                                    },
                                    "extensionName": {
                                      "type": "string",
                                      "description": "Arc Extension name."
                                    }
                                  },
                                  "required": [
                                    "audience"
                                  ]
                                },
                                "x509": {
                                  "description": "X509 remote broker authentication method.",
                                  "type": "object",
                                  "properties": {
                                    "keyVault": {
                                      "description": "Keyvault X509 secret properties.",
                                      "type": "object",
                                      "properties": {
                                        "vault": {
                                          "description": "KeyVault properties.",
                                          "type": "object",
                                          "properties": {
                                            "credentials": {
                                              "description": "KeyVault credentials.",
                                              "type": "object",
                                              "properties": {
                                                "servicePrincipalLocalSecretName": {
                                                  "type": "string",
                                                  "description": "KeyVault service principal local secret name."
                                                }
                                              },
                                              "required": [
                                                "servicePrincipalLocalSecretName"
                                              ]
                                            },
                                            "directoryId": {
                                              "type": "string",
                                              "description": "KeyVault directoryId."
                                            },
                                            "name": {
                                              "type": "string",
                                              "description": "KeyVault name."
                                            }
                                          },
                                          "required": [
                                            "credentials",
                                            "directoryId",
                                            "name"
                                          ]
                                        },
                                        "vaultCaChainSecret": {
                                          "description": "KeyVault CA chain secret details.",
                                          "type": "object",
                                          "properties": {
                                            "name": {
                                              "type": "string",
                                              "description": "KeyVault secret name."
                                            },
                                            "version": {
                                              "type": "string",
                                              "description": "KeyVault secret version."
                                            }
                                          },
                                          "required": [
                                            "name"
                                          ]
                                        },
                                        "vaultCert": {
                                          "description": "KeyVault Cert secret details.",
                                          "type": "object",
                                          "properties": {
                                            "name": {
                                              "type": "string",
                                              "description": "KeyVault secret name."
                                            },
                                            "version": {
                                              "type": "string",
                                              "description": "KeyVault secret version."
                                            }
                                          },
                                          "required": [
                                            "name"
                                          ]
                                        }
                                      },
                                      "required": [
                                        "vault",
                                        "vaultCert"
                                      ]
                                    },
                                    "secretName": {
                                      "type": "string",
                                      "description": "Secret where cert details are stored."
                                    }
                                  }
                                }
                              }
                            },
                            "enabled": {
                              "type": "boolean",
                              "description": "If authentication is enabled for Kafka remote broker."
                            }
                          },
                          "required": [
                            "enabled"
                          ]
                        },
                        "endpoint": {
                          "type": "string",
                          "description": "The endpoint of remote broker to connect to."
                        },
                        "tls": {
                          "description": "TLS details for Remote broker Connection.",
                          "type": "object",
                          "properties": {
                            "tlsEnabled": {
                              "type": "boolean",
                              "description": "Tls Enabled on Remote Broker Connection."
                            },
                            "trustedCaCertificateConfigMap": {
                              "type": "string",
                              "description": "Trusted CA certificate name for Remote Broker."
                            }
                          },
                          "required": [
                            "tlsEnabled"
                          ]
                        }
                      },
                      "required": [
                        "authentication",
                        "endpoint",
                        "tls"
                      ]
                    },
                    "localBrokerConnection": {
                      "description": "The details for connecting with Local Broker.",
                      "type": "object",
                      "properties": {
                        "authentication": {
                          "description": "The authentication methods for LocalBroker connection. NOTE - Enum only one method at a time is supported.",
                          "type": "object",
                          "properties": {
                            "kubernetes": {
                              "description": "Kubernetes local broker authentication method.",
                              "type": "object",
                              "properties": {
                                "secretPath": {
                                  "type": "string",
                                  "description": "Secret Path where SAT is mounted.",
                                  "default": "/var/run/serviceaccount/localbroker"
                                },
                                "serviceAccountTokenName": {
                                  "type": "string",
                                  "description": "Token name where SAT is mounted on secret path.",
                                  "default": "sat"
                                }
                              }
                            }
                          },
                          "required": [
                            "kubernetes"
                          ]
                        },
                        "endpoint": {
                          "type": "string",
                          "description": "The endpoint of local broker to connect to.",
                          "default": "aio-mq-dmqtt-frontend:1883"
                        },
                        "tls": {
                          "description": "TLS details for Local broker Connection.",
                          "type": "object",
                          "properties": {
                            "tlsEnabled": {
                              "type": "boolean",
                              "description": "Tls Enabled on Local Broker Connection.",
                              "default": false
                            },
                            "trustedCaCertificateConfigMap": {
                              "type": "string",
                              "description": "Trusted CA certificate config map name for Local Broker."
                            }
                          }
                        }
                      }
                    },
                    "logLevel": {
                      "type": "string",
                      "description": "The log level of the Bridge Connector instances.",
                      "default": "info"
                    },
                    "nodeTolerations": {
                      "description": "The Node Tolerations for the Bridge Connector pods.",
                      "type": "object",
                      "properties": {
                        "effect": {
                          "type": "string",
                          "description": "Toleration effect."
                        },
                        "key": {
                          "type": "string",
                          "description": "Toleration key."
                        },
                        "operator": {
                          "type": "string",
                          "description": "Toleration operator like 'Exists', 'Equal' etc."
                        },
                        "value": {
                          "type": "string",
                          "description": "Toleration Value."
                        }
                      },
                      "required": [
                        "effect",
                        "key",
                        "operator",
                        "value"
                      ]
                    },
                    "provisioningState": {
                      "description": "The status of the last operation.",
                      "readOnly": true,
                      "type": "string",
                      "enum": [
                        "Succeeded",
                        "Failed",
                        "Canceled",
                        "Provisioning",
                        "Updating",
                        "Deleting",
                        "Accepted"
                      ],
                      "x-ms-enum": {
                        "name": "ProvisioningState",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Succeeded",
                            "value": "Succeeded",
                            "description": "Resource has been created."
                          },
                          {
                            "name": "Failed",
                            "value": "Failed",
                            "description": "Resource creation failed."
                          },
                          {
                            "name": "Canceled",
                            "value": "Canceled",
                            "description": "Resource creation was canceled."
                          },
                          {
                            "name": "Provisioning",
                            "value": "Provisioning",
                            "description": "Resource is getting provisioned."
                          },
                          {
                            "name": "Updating",
                            "value": "Updating",
                            "description": "Resource is Updating."
                          },
                          {
                            "name": "Deleting",
                            "value": "Deleting",
                            "description": "Resource is Deleting."
                          },
                          {
                            "name": "Accepted",
                            "value": "Accepted",
                            "description": "Resource has been Accepted."
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "kafkaConnection"
                  ]
                },
                "extendedLocation": {
                  "description": "Extended Location",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ],
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The name of the extended location."
                    },
                    "type": {
                      "description": "Type of ExtendedLocation.",
                      "type": "string",
                      "enum": [
                        "CustomLocation"
                      ],
                      "x-ms-enum": {
                        "name": "ExtendedLocationType",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "CustomLocation",
                            "value": "CustomLocation",
                            "description": "CustomLocation type"
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "name",
                    "type"
                  ]
                }
              },
              "required": [
                "extendedLocation"
              ]
            }
          }
        }
      },
      "put": {
        "operationId": "KafkaConnector_CreateOrUpdate",
        "tags": [
          "KafkaConnector"
        ],
        "description": "Create a KafkaConnectorResource",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group. The name is case insensitive.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "x-ms-parameter-location": "method"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "kafkaConnectorName",
            "in": "path",
            "description": "Name of MQ kafkaConnector resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "resource",
            "in": "body",
            "description": "Resource create parameters.",
            "required": true,
            "schema": {
              "type": "object",
              "description": "MQ kafkaConnector resource",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "description": "The name of the resource",
                  "readOnly": true
                },
                "type": {
                  "type": "string",
                  "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                  "readOnly": true
                },
                "systemData": {
                  "type": "object",
                  "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                  "readOnly": true,
                  "properties": {
                    "createdBy": {
                      "type": "string",
                      "description": "The identity that created the resource."
                    },
                    "createdByType": {
                      "type": "string",
                      "description": "The type of identity that created the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource creation (UTC)."
                    },
                    "lastModifiedBy": {
                      "type": "string",
                      "description": "The identity that last modified the resource."
                    },
                    "lastModifiedByType": {
                      "type": "string",
                      "description": "The type of identity that last modified the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "lastModifiedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource last modification (UTC)"
                    }
                  }
                },
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "x-ms-mutability": [
                    "read",
                    "create",
                    "update"
                  ]
                },
                "location": {
                  "type": "string",
                  "description": "The geo-location where the resource lives",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ]
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "clientIdPrefix": {
                      "type": "string",
                      "description": "The client id prefix of the dynamically generated client ids."
                    },
                    "image": {
                      "description": "The details of KafkaConnector Docker Image.",
                      "type": "object",
                      "properties": {
                        "pullPolicy": {
                          "type": "string",
                          "description": "Image pull policy."
                        },
                        "pullSecrets": {
                          "type": "string",
                          "description": "Image pull secrets."
                        },
                        "repository": {
                          "type": "string",
                          "description": "The Docker image name."
                        },
                        "tag": {
                          "type": "string",
                          "description": "The Docker  image tag."
                        }
                      },
                      "required": [
                        "repository",
                        "tag"
                      ]
                    },
                    "instances": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The number of KafkaConnector pods to spin up.",
                      "minimum": 0,
                      "maximum": 65535
                    },
                    "kafkaConnection": {
                      "description": "The details for connecting with Remote Kafka Broker.",
                      "type": "object",
                      "properties": {
                        "authentication": {
                          "description": "The remote broker authentication methods.",
                          "type": "object",
                          "properties": {
                            "authType": {
                              "description": "The type of authentication to use for Kafka remote broker.",
                              "type": "object",
                              "properties": {
                                "sasl": {
                                  "description": "Sasl remote broker authentication method.",
                                  "type": "object",
                                  "properties": {
                                    "saslType": {
                                      "description": "Sasl Mechanism for remote broker authentication.",
                                      "type": "string",
                                      "enum": [
                                        "plain",
                                        "scramSha256",
                                        "scramSha512"
                                      ],
                                      "x-ms-enum": {
                                        "name": "KafkaSaslType",
                                        "modelAsString": true,
                                        "values": [
                                          {
                                            "name": "plain",
                                            "value": "plain",
                                            "description": "Sasl Plain authentication."
                                          },
                                          {
                                            "name": "scramSha256",
                                            "value": "scramSha256",
                                            "description": "Sasl ScramSha256 authentication."
                                          },
                                          {
                                            "name": "scramSha512",
                                            "value": "scramSha512",
                                            "description": "Sasl ScramSha512 authentication."
                                          }
                                        ]
                                      }
                                    },
                                    "token": {
                                      "description": "Sasl token for remote broker authentication.",
                                      "type": "object",
                                      "properties": {
                                        "keyVault": {
                                          "description": "Keyvault token keyvault secret properties.",
                                          "type": "object",
                                          "properties": {
                                            "username": {
                                              "type": "string",
                                              "description": "Username to connect with."
                                            },
                                            "vault": {
                                              "description": "KeyVault properties.",
                                              "type": "object",
                                              "properties": {
                                                "credentials": {
                                                  "description": "KeyVault credentials.",
                                                  "type": "object",
                                                  "properties": {
                                                    "servicePrincipalLocalSecretName": {
                                                      "type": "string",
                                                      "description": "KeyVault service principal local secret name."
                                                    }
                                                  },
                                                  "required": [
                                                    "servicePrincipalLocalSecretName"
                                                  ]
                                                },
                                                "directoryId": {
                                                  "type": "string",
                                                  "description": "KeyVault directoryId."
                                                },
                                                "name": {
                                                  "type": "string",
                                                  "description": "KeyVault name."
                                                }
                                              },
                                              "required": [
                                                "credentials",
                                                "directoryId",
                                                "name"
                                              ]
                                            },
                                            "vaultSecret": {
                                              "description": "KeyVault secret details.",
                                              "type": "object",
                                              "properties": {
                                                "name": {
                                                  "type": "string",
                                                  "description": "KeyVault secret name."
                                                },
                                                "version": {
                                                  "type": "string",
                                                  "description": "KeyVault secret version."
                                                }
                                              },
                                              "required": [
                                                "name"
                                              ]
                                            }
                                          },
                                          "required": [
                                            "vault",
                                            "vaultSecret"
                                          ]
                                        },
                                        "secretName": {
                                          "type": "string",
                                          "description": "Secret where cert details are stored."
                                        }
                                      }
                                    }
                                  },
                                  "required": [
                                    "saslType",
                                    "token"
                                  ]
                                },
                                "systemAssignedManagedIdentity": {
                                  "description": "Managed identity remote broker authentication method.",
                                  "type": "object",
                                  "properties": {
                                    "audience": {
                                      "type": "string",
                                      "description": "Token audience."
                                    },
                                    "extensionName": {
                                      "type": "string",
                                      "description": "Arc Extension name."
                                    }
                                  },
                                  "required": [
                                    "audience"
                                  ]
                                },
                                "x509": {
                                  "description": "X509 remote broker authentication method.",
                                  "type": "object",
                                  "properties": {
                                    "keyVault": {
                                      "description": "Keyvault X509 secret properties.",
                                      "type": "object",
                                      "properties": {
                                        "vault": {
                                          "description": "KeyVault properties.",
                                          "type": "object",
                                          "properties": {
                                            "credentials": {
                                              "description": "KeyVault credentials.",
                                              "type": "object",
                                              "properties": {
                                                "servicePrincipalLocalSecretName": {
                                                  "type": "string",
                                                  "description": "KeyVault service principal local secret name."
                                                }
                                              },
                                              "required": [
                                                "servicePrincipalLocalSecretName"
                                              ]
                                            },
                                            "directoryId": {
                                              "type": "string",
                                              "description": "KeyVault directoryId."
                                            },
                                            "name": {
                                              "type": "string",
                                              "description": "KeyVault name."
                                            }
                                          },
                                          "required": [
                                            "credentials",
                                            "directoryId",
                                            "name"
                                          ]
                                        },
                                        "vaultCaChainSecret": {
                                          "description": "KeyVault CA chain secret details.",
                                          "type": "object",
                                          "properties": {
                                            "name": {
                                              "type": "string",
                                              "description": "KeyVault secret name."
                                            },
                                            "version": {
                                              "type": "string",
                                              "description": "KeyVault secret version."
                                            }
                                          },
                                          "required": [
                                            "name"
                                          ]
                                        },
                                        "vaultCert": {
                                          "description": "KeyVault Cert secret details.",
                                          "type": "object",
                                          "properties": {
                                            "name": {
                                              "type": "string",
                                              "description": "KeyVault secret name."
                                            },
                                            "version": {
                                              "type": "string",
                                              "description": "KeyVault secret version."
                                            }
                                          },
                                          "required": [
                                            "name"
                                          ]
                                        }
                                      },
                                      "required": [
                                        "vault",
                                        "vaultCert"
                                      ]
                                    },
                                    "secretName": {
                                      "type": "string",
                                      "description": "Secret where cert details are stored."
                                    }
                                  }
                                }
                              }
                            },
                            "enabled": {
                              "type": "boolean",
                              "description": "If authentication is enabled for Kafka remote broker."
                            }
                          },
                          "required": [
                            "enabled"
                          ]
                        },
                        "endpoint": {
                          "type": "string",
                          "description": "The endpoint of remote broker to connect to."
                        },
                        "tls": {
                          "description": "TLS details for Remote broker Connection.",
                          "type": "object",
                          "properties": {
                            "tlsEnabled": {
                              "type": "boolean",
                              "description": "Tls Enabled on Remote Broker Connection."
                            },
                            "trustedCaCertificateConfigMap": {
                              "type": "string",
                              "description": "Trusted CA certificate name for Remote Broker."
                            }
                          },
                          "required": [
                            "tlsEnabled"
                          ]
                        }
                      },
                      "required": [
                        "authentication",
                        "endpoint",
                        "tls"
                      ]
                    },
                    "localBrokerConnection": {
                      "description": "The details for connecting with Local Broker.",
                      "type": "object",
                      "properties": {
                        "authentication": {
                          "description": "The authentication methods for LocalBroker connection. NOTE - Enum only one method at a time is supported.",
                          "type": "object",
                          "properties": {
                            "kubernetes": {
                              "description": "Kubernetes local broker authentication method.",
                              "type": "object",
                              "properties": {
                                "secretPath": {
                                  "type": "string",
                                  "description": "Secret Path where SAT is mounted.",
                                  "default": "/var/run/serviceaccount/localbroker"
                                },
                                "serviceAccountTokenName": {
                                  "type": "string",
                                  "description": "Token name where SAT is mounted on secret path.",
                                  "default": "sat"
                                }
                              }
                            }
                          },
                          "required": [
                            "kubernetes"
                          ]
                        },
                        "endpoint": {
                          "type": "string",
                          "description": "The endpoint of local broker to connect to.",
                          "default": "aio-mq-dmqtt-frontend:1883"
                        },
                        "tls": {
                          "description": "TLS details for Local broker Connection.",
                          "type": "object",
                          "properties": {
                            "tlsEnabled": {
                              "type": "boolean",
                              "description": "Tls Enabled on Local Broker Connection.",
                              "default": false
                            },
                            "trustedCaCertificateConfigMap": {
                              "type": "string",
                              "description": "Trusted CA certificate config map name for Local Broker."
                            }
                          }
                        }
                      }
                    },
                    "logLevel": {
                      "type": "string",
                      "description": "The log level of the Bridge Connector instances.",
                      "default": "info"
                    },
                    "nodeTolerations": {
                      "description": "The Node Tolerations for the Bridge Connector pods.",
                      "type": "object",
                      "properties": {
                        "effect": {
                          "type": "string",
                          "description": "Toleration effect."
                        },
                        "key": {
                          "type": "string",
                          "description": "Toleration key."
                        },
                        "operator": {
                          "type": "string",
                          "description": "Toleration operator like 'Exists', 'Equal' etc."
                        },
                        "value": {
                          "type": "string",
                          "description": "Toleration Value."
                        }
                      },
                      "required": [
                        "effect",
                        "key",
                        "operator",
                        "value"
                      ]
                    },
                    "provisioningState": {
                      "description": "The status of the last operation.",
                      "readOnly": true,
                      "type": "string",
                      "enum": [
                        "Succeeded",
                        "Failed",
                        "Canceled",
                        "Provisioning",
                        "Updating",
                        "Deleting",
                        "Accepted"
                      ],
                      "x-ms-enum": {
                        "name": "ProvisioningState",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Succeeded",
                            "value": "Succeeded",
                            "description": "Resource has been created."
                          },
                          {
                            "name": "Failed",
                            "value": "Failed",
                            "description": "Resource creation failed."
                          },
                          {
                            "name": "Canceled",
                            "value": "Canceled",
                            "description": "Resource creation was canceled."
                          },
                          {
                            "name": "Provisioning",
                            "value": "Provisioning",
                            "description": "Resource is getting provisioned."
                          },
                          {
                            "name": "Updating",
                            "value": "Updating",
                            "description": "Resource is Updating."
                          },
                          {
                            "name": "Deleting",
                            "value": "Deleting",
                            "description": "Resource is Deleting."
                          },
                          {
                            "name": "Accepted",
                            "value": "Accepted",
                            "description": "Resource has been Accepted."
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "kafkaConnection"
                  ]
                },
                "extendedLocation": {
                  "description": "Extended Location",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ],
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The name of the extended location."
                    },
                    "type": {
                      "description": "Type of ExtendedLocation.",
                      "type": "string",
                      "enum": [
                        "CustomLocation"
                      ],
                      "x-ms-enum": {
                        "name": "ExtendedLocationType",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "CustomLocation",
                            "value": "CustomLocation",
                            "description": "CustomLocation type"
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "name",
                    "type"
                  ]
                }
              },
              "required": [
                "extendedLocation"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resource 'KafkaConnectorResource' update operation succeeded",
            "schema": {
              "type": "object",
              "description": "MQ kafkaConnector resource",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "description": "The name of the resource",
                  "readOnly": true
                },
                "type": {
                  "type": "string",
                  "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                  "readOnly": true
                },
                "systemData": {
                  "type": "object",
                  "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                  "readOnly": true,
                  "properties": {
                    "createdBy": {
                      "type": "string",
                      "description": "The identity that created the resource."
                    },
                    "createdByType": {
                      "type": "string",
                      "description": "The type of identity that created the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource creation (UTC)."
                    },
                    "lastModifiedBy": {
                      "type": "string",
                      "description": "The identity that last modified the resource."
                    },
                    "lastModifiedByType": {
                      "type": "string",
                      "description": "The type of identity that last modified the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "lastModifiedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource last modification (UTC)"
                    }
                  }
                },
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "x-ms-mutability": [
                    "read",
                    "create",
                    "update"
                  ]
                },
                "location": {
                  "type": "string",
                  "description": "The geo-location where the resource lives",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ]
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "clientIdPrefix": {
                      "type": "string",
                      "description": "The client id prefix of the dynamically generated client ids."
                    },
                    "image": {
                      "description": "The details of KafkaConnector Docker Image.",
                      "type": "object",
                      "properties": {
                        "pullPolicy": {
                          "type": "string",
                          "description": "Image pull policy."
                        },
                        "pullSecrets": {
                          "type": "string",
                          "description": "Image pull secrets."
                        },
                        "repository": {
                          "type": "string",
                          "description": "The Docker image name."
                        },
                        "tag": {
                          "type": "string",
                          "description": "The Docker  image tag."
                        }
                      },
                      "required": [
                        "repository",
                        "tag"
                      ]
                    },
                    "instances": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The number of KafkaConnector pods to spin up.",
                      "minimum": 0,
                      "maximum": 65535
                    },
                    "kafkaConnection": {
                      "description": "The details for connecting with Remote Kafka Broker.",
                      "type": "object",
                      "properties": {
                        "authentication": {
                          "description": "The remote broker authentication methods.",
                          "type": "object",
                          "properties": {
                            "authType": {
                              "description": "The type of authentication to use for Kafka remote broker.",
                              "type": "object",
                              "properties": {
                                "sasl": {
                                  "description": "Sasl remote broker authentication method.",
                                  "type": "object",
                                  "properties": {
                                    "saslType": {
                                      "description": "Sasl Mechanism for remote broker authentication.",
                                      "type": "string",
                                      "enum": [
                                        "plain",
                                        "scramSha256",
                                        "scramSha512"
                                      ],
                                      "x-ms-enum": {
                                        "name": "KafkaSaslType",
                                        "modelAsString": true,
                                        "values": [
                                          {
                                            "name": "plain",
                                            "value": "plain",
                                            "description": "Sasl Plain authentication."
                                          },
                                          {
                                            "name": "scramSha256",
                                            "value": "scramSha256",
                                            "description": "Sasl ScramSha256 authentication."
                                          },
                                          {
                                            "name": "scramSha512",
                                            "value": "scramSha512",
                                            "description": "Sasl ScramSha512 authentication."
                                          }
                                        ]
                                      }
                                    },
                                    "token": {
                                      "description": "Sasl token for remote broker authentication.",
                                      "type": "object",
                                      "properties": {
                                        "keyVault": {
                                          "description": "Keyvault token keyvault secret properties.",
                                          "type": "object",
                                          "properties": {
                                            "username": {
                                              "type": "string",
                                              "description": "Username to connect with."
                                            },
                                            "vault": {
                                              "description": "KeyVault properties.",
                                              "type": "object",
                                              "properties": {
                                                "credentials": {
                                                  "description": "KeyVault credentials.",
                                                  "type": "object",
                                                  "properties": {
                                                    "servicePrincipalLocalSecretName": {
                                                      "type": "string",
                                                      "description": "KeyVault service principal local secret name."
                                                    }
                                                  },
                                                  "required": [
                                                    "servicePrincipalLocalSecretName"
                                                  ]
                                                },
                                                "directoryId": {
                                                  "type": "string",
                                                  "description": "KeyVault directoryId."
                                                },
                                                "name": {
                                                  "type": "string",
                                                  "description": "KeyVault name."
                                                }
                                              },
                                              "required": [
                                                "credentials",
                                                "directoryId",
                                                "name"
                                              ]
                                            },
                                            "vaultSecret": {
                                              "description": "KeyVault secret details.",
                                              "type": "object",
                                              "properties": {
                                                "name": {
                                                  "type": "string",
                                                  "description": "KeyVault secret name."
                                                },
                                                "version": {
                                                  "type": "string",
                                                  "description": "KeyVault secret version."
                                                }
                                              },
                                              "required": [
                                                "name"
                                              ]
                                            }
                                          },
                                          "required": [
                                            "vault",
                                            "vaultSecret"
                                          ]
                                        },
                                        "secretName": {
                                          "type": "string",
                                          "description": "Secret where cert details are stored."
                                        }
                                      }
                                    }
                                  },
                                  "required": [
                                    "saslType",
                                    "token"
                                  ]
                                },
                                "systemAssignedManagedIdentity": {
                                  "description": "Managed identity remote broker authentication method.",
                                  "type": "object",
                                  "properties": {
                                    "audience": {
                                      "type": "string",
                                      "description": "Token audience."
                                    },
                                    "extensionName": {
                                      "type": "string",
                                      "description": "Arc Extension name."
                                    }
                                  },
                                  "required": [
                                    "audience"
                                  ]
                                },
                                "x509": {
                                  "description": "X509 remote broker authentication method.",
                                  "type": "object",
                                  "properties": {
                                    "keyVault": {
                                      "description": "Keyvault X509 secret properties.",
                                      "type": "object",
                                      "properties": {
                                        "vault": {
                                          "description": "KeyVault properties.",
                                          "type": "object",
                                          "properties": {
                                            "credentials": {
                                              "description": "KeyVault credentials.",
                                              "type": "object",
                                              "properties": {
                                                "servicePrincipalLocalSecretName": {
                                                  "type": "string",
                                                  "description": "KeyVault service principal local secret name."
                                                }
                                              },
                                              "required": [
                                                "servicePrincipalLocalSecretName"
                                              ]
                                            },
                                            "directoryId": {
                                              "type": "string",
                                              "description": "KeyVault directoryId."
                                            },
                                            "name": {
                                              "type": "string",
                                              "description": "KeyVault name."
                                            }
                                          },
                                          "required": [
                                            "credentials",
                                            "directoryId",
                                            "name"
                                          ]
                                        },
                                        "vaultCaChainSecret": {
                                          "description": "KeyVault CA chain secret details.",
                                          "type": "object",
                                          "properties": {
                                            "name": {
                                              "type": "string",
                                              "description": "KeyVault secret name."
                                            },
                                            "version": {
                                              "type": "string",
                                              "description": "KeyVault secret version."
                                            }
                                          },
                                          "required": [
                                            "name"
                                          ]
                                        },
                                        "vaultCert": {
                                          "description": "KeyVault Cert secret details.",
                                          "type": "object",
                                          "properties": {
                                            "name": {
                                              "type": "string",
                                              "description": "KeyVault secret name."
                                            },
                                            "version": {
                                              "type": "string",
                                              "description": "KeyVault secret version."
                                            }
                                          },
                                          "required": [
                                            "name"
                                          ]
                                        }
                                      },
                                      "required": [
                                        "vault",
                                        "vaultCert"
                                      ]
                                    },
                                    "secretName": {
                                      "type": "string",
                                      "description": "Secret where cert details are stored."
                                    }
                                  }
                                }
                              }
                            },
                            "enabled": {
                              "type": "boolean",
                              "description": "If authentication is enabled for Kafka remote broker."
                            }
                          },
                          "required": [
                            "enabled"
                          ]
                        },
                        "endpoint": {
                          "type": "string",
                          "description": "The endpoint of remote broker to connect to."
                        },
                        "tls": {
                          "description": "TLS details for Remote broker Connection.",
                          "type": "object",
                          "properties": {
                            "tlsEnabled": {
                              "type": "boolean",
                              "description": "Tls Enabled on Remote Broker Connection."
                            },
                            "trustedCaCertificateConfigMap": {
                              "type": "string",
                              "description": "Trusted CA certificate name for Remote Broker."
                            }
                          },
                          "required": [
                            "tlsEnabled"
                          ]
                        }
                      },
                      "required": [
                        "authentication",
                        "endpoint",
                        "tls"
                      ]
                    },
                    "localBrokerConnection": {
                      "description": "The details for connecting with Local Broker.",
                      "type": "object",
                      "properties": {
                        "authentication": {
                          "description": "The authentication methods for LocalBroker connection. NOTE - Enum only one method at a time is supported.",
                          "type": "object",
                          "properties": {
                            "kubernetes": {
                              "description": "Kubernetes local broker authentication method.",
                              "type": "object",
                              "properties": {
                                "secretPath": {
                                  "type": "string",
                                  "description": "Secret Path where SAT is mounted.",
                                  "default": "/var/run/serviceaccount/localbroker"
                                },
                                "serviceAccountTokenName": {
                                  "type": "string",
                                  "description": "Token name where SAT is mounted on secret path.",
                                  "default": "sat"
                                }
                              }
                            }
                          },
                          "required": [
                            "kubernetes"
                          ]
                        },
                        "endpoint": {
                          "type": "string",
                          "description": "The endpoint of local broker to connect to.",
                          "default": "aio-mq-dmqtt-frontend:1883"
                        },
                        "tls": {
                          "description": "TLS details for Local broker Connection.",
                          "type": "object",
                          "properties": {
                            "tlsEnabled": {
                              "type": "boolean",
                              "description": "Tls Enabled on Local Broker Connection.",
                              "default": false
                            },
                            "trustedCaCertificateConfigMap": {
                              "type": "string",
                              "description": "Trusted CA certificate config map name for Local Broker."
                            }
                          }
                        }
                      }
                    },
                    "logLevel": {
                      "type": "string",
                      "description": "The log level of the Bridge Connector instances.",
                      "default": "info"
                    },
                    "nodeTolerations": {
                      "description": "The Node Tolerations for the Bridge Connector pods.",
                      "type": "object",
                      "properties": {
                        "effect": {
                          "type": "string",
                          "description": "Toleration effect."
                        },
                        "key": {
                          "type": "string",
                          "description": "Toleration key."
                        },
                        "operator": {
                          "type": "string",
                          "description": "Toleration operator like 'Exists', 'Equal' etc."
                        },
                        "value": {
                          "type": "string",
                          "description": "Toleration Value."
                        }
                      },
                      "required": [
                        "effect",
                        "key",
                        "operator",
                        "value"
                      ]
                    },
                    "provisioningState": {
                      "description": "The status of the last operation.",
                      "readOnly": true,
                      "type": "string",
                      "enum": [
                        "Succeeded",
                        "Failed",
                        "Canceled",
                        "Provisioning",
                        "Updating",
                        "Deleting",
                        "Accepted"
                      ],
                      "x-ms-enum": {
                        "name": "ProvisioningState",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Succeeded",
                            "value": "Succeeded",
                            "description": "Resource has been created."
                          },
                          {
                            "name": "Failed",
                            "value": "Failed",
                            "description": "Resource creation failed."
                          },
                          {
                            "name": "Canceled",
                            "value": "Canceled",
                            "description": "Resource creation was canceled."
                          },
                          {
                            "name": "Provisioning",
                            "value": "Provisioning",
                            "description": "Resource is getting provisioned."
                          },
                          {
                            "name": "Updating",
                            "value": "Updating",
                            "description": "Resource is Updating."
                          },
                          {
                            "name": "Deleting",
                            "value": "Deleting",
                            "description": "Resource is Deleting."
                          },
                          {
                            "name": "Accepted",
                            "value": "Accepted",
                            "description": "Resource has been Accepted."
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "kafkaConnection"
                  ]
                },
                "extendedLocation": {
                  "description": "Extended Location",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ],
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The name of the extended location."
                    },
                    "type": {
                      "description": "Type of ExtendedLocation.",
                      "type": "string",
                      "enum": [
                        "CustomLocation"
                      ],
                      "x-ms-enum": {
                        "name": "ExtendedLocationType",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "CustomLocation",
                            "value": "CustomLocation",
                            "description": "CustomLocation type"
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "name",
                    "type"
                  ]
                }
              },
              "required": [
                "extendedLocation"
              ]
            }
          },
          "201": {
            "description": "Resource 'KafkaConnectorResource' create operation succeeded",
            "schema": {
              "type": "object",
              "description": "MQ kafkaConnector resource",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "description": "The name of the resource",
                  "readOnly": true
                },
                "type": {
                  "type": "string",
                  "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                  "readOnly": true
                },
                "systemData": {
                  "type": "object",
                  "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                  "readOnly": true,
                  "properties": {
                    "createdBy": {
                      "type": "string",
                      "description": "The identity that created the resource."
                    },
                    "createdByType": {
                      "type": "string",
                      "description": "The type of identity that created the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource creation (UTC)."
                    },
                    "lastModifiedBy": {
                      "type": "string",
                      "description": "The identity that last modified the resource."
                    },
                    "lastModifiedByType": {
                      "type": "string",
                      "description": "The type of identity that last modified the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "lastModifiedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource last modification (UTC)"
                    }
                  }
                },
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "x-ms-mutability": [
                    "read",
                    "create",
                    "update"
                  ]
                },
                "location": {
                  "type": "string",
                  "description": "The geo-location where the resource lives",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ]
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "clientIdPrefix": {
                      "type": "string",
                      "description": "The client id prefix of the dynamically generated client ids."
                    },
                    "image": {
                      "description": "The details of KafkaConnector Docker Image.",
                      "type": "object",
                      "properties": {
                        "pullPolicy": {
                          "type": "string",
                          "description": "Image pull policy."
                        },
                        "pullSecrets": {
                          "type": "string",
                          "description": "Image pull secrets."
                        },
                        "repository": {
                          "type": "string",
                          "description": "The Docker image name."
                        },
                        "tag": {
                          "type": "string",
                          "description": "The Docker  image tag."
                        }
                      },
                      "required": [
                        "repository",
                        "tag"
                      ]
                    },
                    "instances": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The number of KafkaConnector pods to spin up.",
                      "minimum": 0,
                      "maximum": 65535
                    },
                    "kafkaConnection": {
                      "description": "The details for connecting with Remote Kafka Broker.",
                      "type": "object",
                      "properties": {
                        "authentication": {
                          "description": "The remote broker authentication methods.",
                          "type": "object",
                          "properties": {
                            "authType": {
                              "description": "The type of authentication to use for Kafka remote broker.",
                              "type": "object",
                              "properties": {
                                "sasl": {
                                  "description": "Sasl remote broker authentication method.",
                                  "type": "object",
                                  "properties": {
                                    "saslType": {
                                      "description": "Sasl Mechanism for remote broker authentication.",
                                      "type": "string",
                                      "enum": [
                                        "plain",
                                        "scramSha256",
                                        "scramSha512"
                                      ],
                                      "x-ms-enum": {
                                        "name": "KafkaSaslType",
                                        "modelAsString": true,
                                        "values": [
                                          {
                                            "name": "plain",
                                            "value": "plain",
                                            "description": "Sasl Plain authentication."
                                          },
                                          {
                                            "name": "scramSha256",
                                            "value": "scramSha256",
                                            "description": "Sasl ScramSha256 authentication."
                                          },
                                          {
                                            "name": "scramSha512",
                                            "value": "scramSha512",
                                            "description": "Sasl ScramSha512 authentication."
                                          }
                                        ]
                                      }
                                    },
                                    "token": {
                                      "description": "Sasl token for remote broker authentication.",
                                      "type": "object",
                                      "properties": {
                                        "keyVault": {
                                          "description": "Keyvault token keyvault secret properties.",
                                          "type": "object",
                                          "properties": {
                                            "username": {
                                              "type": "string",
                                              "description": "Username to connect with."
                                            },
                                            "vault": {
                                              "description": "KeyVault properties.",
                                              "type": "object",
                                              "properties": {
                                                "credentials": {
                                                  "description": "KeyVault credentials.",
                                                  "type": "object",
                                                  "properties": {
                                                    "servicePrincipalLocalSecretName": {
                                                      "type": "string",
                                                      "description": "KeyVault service principal local secret name."
                                                    }
                                                  },
                                                  "required": [
                                                    "servicePrincipalLocalSecretName"
                                                  ]
                                                },
                                                "directoryId": {
                                                  "type": "string",
                                                  "description": "KeyVault directoryId."
                                                },
                                                "name": {
                                                  "type": "string",
                                                  "description": "KeyVault name."
                                                }
                                              },
                                              "required": [
                                                "credentials",
                                                "directoryId",
                                                "name"
                                              ]
                                            },
                                            "vaultSecret": {
                                              "description": "KeyVault secret details.",
                                              "type": "object",
                                              "properties": {
                                                "name": {
                                                  "type": "string",
                                                  "description": "KeyVault secret name."
                                                },
                                                "version": {
                                                  "type": "string",
                                                  "description": "KeyVault secret version."
                                                }
                                              },
                                              "required": [
                                                "name"
                                              ]
                                            }
                                          },
                                          "required": [
                                            "vault",
                                            "vaultSecret"
                                          ]
                                        },
                                        "secretName": {
                                          "type": "string",
                                          "description": "Secret where cert details are stored."
                                        }
                                      }
                                    }
                                  },
                                  "required": [
                                    "saslType",
                                    "token"
                                  ]
                                },
                                "systemAssignedManagedIdentity": {
                                  "description": "Managed identity remote broker authentication method.",
                                  "type": "object",
                                  "properties": {
                                    "audience": {
                                      "type": "string",
                                      "description": "Token audience."
                                    },
                                    "extensionName": {
                                      "type": "string",
                                      "description": "Arc Extension name."
                                    }
                                  },
                                  "required": [
                                    "audience"
                                  ]
                                },
                                "x509": {
                                  "description": "X509 remote broker authentication method.",
                                  "type": "object",
                                  "properties": {
                                    "keyVault": {
                                      "description": "Keyvault X509 secret properties.",
                                      "type": "object",
                                      "properties": {
                                        "vault": {
                                          "description": "KeyVault properties.",
                                          "type": "object",
                                          "properties": {
                                            "credentials": {
                                              "description": "KeyVault credentials.",
                                              "type": "object",
                                              "properties": {
                                                "servicePrincipalLocalSecretName": {
                                                  "type": "string",
                                                  "description": "KeyVault service principal local secret name."
                                                }
                                              },
                                              "required": [
                                                "servicePrincipalLocalSecretName"
                                              ]
                                            },
                                            "directoryId": {
                                              "type": "string",
                                              "description": "KeyVault directoryId."
                                            },
                                            "name": {
                                              "type": "string",
                                              "description": "KeyVault name."
                                            }
                                          },
                                          "required": [
                                            "credentials",
                                            "directoryId",
                                            "name"
                                          ]
                                        },
                                        "vaultCaChainSecret": {
                                          "description": "KeyVault CA chain secret details.",
                                          "type": "object",
                                          "properties": {
                                            "name": {
                                              "type": "string",
                                              "description": "KeyVault secret name."
                                            },
                                            "version": {
                                              "type": "string",
                                              "description": "KeyVault secret version."
                                            }
                                          },
                                          "required": [
                                            "name"
                                          ]
                                        },
                                        "vaultCert": {
                                          "description": "KeyVault Cert secret details.",
                                          "type": "object",
                                          "properties": {
                                            "name": {
                                              "type": "string",
                                              "description": "KeyVault secret name."
                                            },
                                            "version": {
                                              "type": "string",
                                              "description": "KeyVault secret version."
                                            }
                                          },
                                          "required": [
                                            "name"
                                          ]
                                        }
                                      },
                                      "required": [
                                        "vault",
                                        "vaultCert"
                                      ]
                                    },
                                    "secretName": {
                                      "type": "string",
                                      "description": "Secret where cert details are stored."
                                    }
                                  }
                                }
                              }
                            },
                            "enabled": {
                              "type": "boolean",
                              "description": "If authentication is enabled for Kafka remote broker."
                            }
                          },
                          "required": [
                            "enabled"
                          ]
                        },
                        "endpoint": {
                          "type": "string",
                          "description": "The endpoint of remote broker to connect to."
                        },
                        "tls": {
                          "description": "TLS details for Remote broker Connection.",
                          "type": "object",
                          "properties": {
                            "tlsEnabled": {
                              "type": "boolean",
                              "description": "Tls Enabled on Remote Broker Connection."
                            },
                            "trustedCaCertificateConfigMap": {
                              "type": "string",
                              "description": "Trusted CA certificate name for Remote Broker."
                            }
                          },
                          "required": [
                            "tlsEnabled"
                          ]
                        }
                      },
                      "required": [
                        "authentication",
                        "endpoint",
                        "tls"
                      ]
                    },
                    "localBrokerConnection": {
                      "description": "The details for connecting with Local Broker.",
                      "type": "object",
                      "properties": {
                        "authentication": {
                          "description": "The authentication methods for LocalBroker connection. NOTE - Enum only one method at a time is supported.",
                          "type": "object",
                          "properties": {
                            "kubernetes": {
                              "description": "Kubernetes local broker authentication method.",
                              "type": "object",
                              "properties": {
                                "secretPath": {
                                  "type": "string",
                                  "description": "Secret Path where SAT is mounted.",
                                  "default": "/var/run/serviceaccount/localbroker"
                                },
                                "serviceAccountTokenName": {
                                  "type": "string",
                                  "description": "Token name where SAT is mounted on secret path.",
                                  "default": "sat"
                                }
                              }
                            }
                          },
                          "required": [
                            "kubernetes"
                          ]
                        },
                        "endpoint": {
                          "type": "string",
                          "description": "The endpoint of local broker to connect to.",
                          "default": "aio-mq-dmqtt-frontend:1883"
                        },
                        "tls": {
                          "description": "TLS details for Local broker Connection.",
                          "type": "object",
                          "properties": {
                            "tlsEnabled": {
                              "type": "boolean",
                              "description": "Tls Enabled on Local Broker Connection.",
                              "default": false
                            },
                            "trustedCaCertificateConfigMap": {
                              "type": "string",
                              "description": "Trusted CA certificate config map name for Local Broker."
                            }
                          }
                        }
                      }
                    },
                    "logLevel": {
                      "type": "string",
                      "description": "The log level of the Bridge Connector instances.",
                      "default": "info"
                    },
                    "nodeTolerations": {
                      "description": "The Node Tolerations for the Bridge Connector pods.",
                      "type": "object",
                      "properties": {
                        "effect": {
                          "type": "string",
                          "description": "Toleration effect."
                        },
                        "key": {
                          "type": "string",
                          "description": "Toleration key."
                        },
                        "operator": {
                          "type": "string",
                          "description": "Toleration operator like 'Exists', 'Equal' etc."
                        },
                        "value": {
                          "type": "string",
                          "description": "Toleration Value."
                        }
                      },
                      "required": [
                        "effect",
                        "key",
                        "operator",
                        "value"
                      ]
                    },
                    "provisioningState": {
                      "description": "The status of the last operation.",
                      "readOnly": true,
                      "type": "string",
                      "enum": [
                        "Succeeded",
                        "Failed",
                        "Canceled",
                        "Provisioning",
                        "Updating",
                        "Deleting",
                        "Accepted"
                      ],
                      "x-ms-enum": {
                        "name": "ProvisioningState",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Succeeded",
                            "value": "Succeeded",
                            "description": "Resource has been created."
                          },
                          {
                            "name": "Failed",
                            "value": "Failed",
                            "description": "Resource creation failed."
                          },
                          {
                            "name": "Canceled",
                            "value": "Canceled",
                            "description": "Resource creation was canceled."
                          },
                          {
                            "name": "Provisioning",
                            "value": "Provisioning",
                            "description": "Resource is getting provisioned."
                          },
                          {
                            "name": "Updating",
                            "value": "Updating",
                            "description": "Resource is Updating."
                          },
                          {
                            "name": "Deleting",
                            "value": "Deleting",
                            "description": "Resource is Deleting."
                          },
                          {
                            "name": "Accepted",
                            "value": "Accepted",
                            "description": "Resource has been Accepted."
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "kafkaConnection"
                  ]
                },
                "extendedLocation": {
                  "description": "Extended Location",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ],
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The name of the extended location."
                    },
                    "type": {
                      "description": "Type of ExtendedLocation.",
                      "type": "string",
                      "enum": [
                        "CustomLocation"
                      ],
                      "x-ms-enum": {
                        "name": "ExtendedLocationType",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "CustomLocation",
                            "value": "CustomLocation",
                            "description": "CustomLocation type"
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "name",
                    "type"
                  ]
                }
              },
              "required": [
                "extendedLocation"
              ]
            },
            "headers": {
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "KafkaConnector_Update",
        "tags": [
          "KafkaConnector"
        ],
        "description": "Update a KafkaConnectorResource",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group. The name is case insensitive.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "x-ms-parameter-location": "method"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "kafkaConnectorName",
            "in": "path",
            "description": "Name of MQ kafkaConnector resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "properties",
            "in": "body",
            "description": "The resource properties to be updated.",
            "required": true,
            "schema": {
              "type": "object",
              "description": "The type used for update operations of the KafkaConnectorResource.",
              "properties": {
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "clientIdPrefix": {
                      "type": "string",
                      "description": "The client id prefix of the dynamically generated client ids."
                    },
                    "image": {
                      "description": "The details of KafkaConnector Docker Image.",
                      "type": "object",
                      "properties": {
                        "pullPolicy": {
                          "type": "string",
                          "description": "Image pull policy."
                        },
                        "pullSecrets": {
                          "type": "string",
                          "description": "Image pull secrets."
                        },
                        "repository": {
                          "type": "string",
                          "description": "The Docker image name."
                        },
                        "tag": {
                          "type": "string",
                          "description": "The Docker  image tag."
                        }
                      }
                    },
                    "instances": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The number of KafkaConnector pods to spin up.",
                      "minimum": 0,
                      "maximum": 65535
                    },
                    "kafkaConnection": {
                      "description": "The details for connecting with Remote Kafka Broker.",
                      "type": "object",
                      "properties": {
                        "authentication": {
                          "description": "The remote broker authentication methods.",
                          "type": "object",
                          "properties": {
                            "authType": {
                              "description": "The type of authentication to use for Kafka remote broker.",
                              "type": "object",
                              "properties": {
                                "sasl": {
                                  "description": "Sasl remote broker authentication method.",
                                  "type": "object",
                                  "properties": {
                                    "saslType": {
                                      "description": "Sasl Mechanism for remote broker authentication.",
                                      "type": "string",
                                      "enum": [
                                        "plain",
                                        "scramSha256",
                                        "scramSha512"
                                      ],
                                      "x-ms-enum": {
                                        "name": "KafkaSaslType",
                                        "modelAsString": true,
                                        "values": [
                                          {
                                            "name": "plain",
                                            "value": "plain",
                                            "description": "Sasl Plain authentication."
                                          },
                                          {
                                            "name": "scramSha256",
                                            "value": "scramSha256",
                                            "description": "Sasl ScramSha256 authentication."
                                          },
                                          {
                                            "name": "scramSha512",
                                            "value": "scramSha512",
                                            "description": "Sasl ScramSha512 authentication."
                                          }
                                        ]
                                      }
                                    },
                                    "token": {
                                      "description": "Sasl token for remote broker authentication.",
                                      "type": "object",
                                      "properties": {
                                        "keyVault": {
                                          "description": "Keyvault token keyvault secret properties.",
                                          "type": "object",
                                          "properties": {
                                            "username": {
                                              "type": "string",
                                              "description": "Username to connect with."
                                            },
                                            "vault": {
                                              "description": "KeyVault properties.",
                                              "type": "object",
                                              "properties": {
                                                "credentials": {
                                                  "description": "KeyVault credentials.",
                                                  "type": "object",
                                                  "properties": {
                                                    "servicePrincipalLocalSecretName": {
                                                      "type": "string",
                                                      "description": "KeyVault service principal local secret name."
                                                    }
                                                  }
                                                },
                                                "directoryId": {
                                                  "type": "string",
                                                  "description": "KeyVault directoryId."
                                                },
                                                "name": {
                                                  "type": "string",
                                                  "description": "KeyVault name."
                                                }
                                              }
                                            },
                                            "vaultSecret": {
                                              "description": "KeyVault secret details.",
                                              "type": "object",
                                              "properties": {
                                                "name": {
                                                  "type": "string",
                                                  "description": "KeyVault secret name."
                                                },
                                                "version": {
                                                  "type": "string",
                                                  "description": "KeyVault secret version."
                                                }
                                              }
                                            }
                                          }
                                        },
                                        "secretName": {
                                          "type": "string",
                                          "description": "Secret where cert details are stored."
                                        }
                                      }
                                    }
                                  }
                                },
                                "systemAssignedManagedIdentity": {
                                  "description": "Managed identity remote broker authentication method.",
                                  "type": "object",
                                  "properties": {
                                    "audience": {
                                      "type": "string",
                                      "description": "Token audience."
                                    },
                                    "extensionName": {
                                      "type": "string",
                                      "description": "Arc Extension name."
                                    }
                                  }
                                },
                                "x509": {
                                  "description": "X509 remote broker authentication method.",
                                  "type": "object",
                                  "properties": {
                                    "keyVault": {
                                      "description": "Keyvault X509 secret properties.",
                                      "type": "object",
                                      "properties": {
                                        "vault": {
                                          "description": "KeyVault properties.",
                                          "type": "object",
                                          "properties": {
                                            "credentials": {
                                              "description": "KeyVault credentials.",
                                              "type": "object",
                                              "properties": {
                                                "servicePrincipalLocalSecretName": {
                                                  "type": "string",
                                                  "description": "KeyVault service principal local secret name."
                                                }
                                              }
                                            },
                                            "directoryId": {
                                              "type": "string",
                                              "description": "KeyVault directoryId."
                                            },
                                            "name": {
                                              "type": "string",
                                              "description": "KeyVault name."
                                            }
                                          }
                                        },
                                        "vaultCaChainSecret": {
                                          "description": "KeyVault CA chain secret details.",
                                          "type": "object",
                                          "properties": {
                                            "name": {
                                              "type": "string",
                                              "description": "KeyVault secret name."
                                            },
                                            "version": {
                                              "type": "string",
                                              "description": "KeyVault secret version."
                                            }
                                          }
                                        },
                                        "vaultCert": {
                                          "description": "KeyVault Cert secret details.",
                                          "type": "object",
                                          "properties": {
                                            "name": {
                                              "type": "string",
                                              "description": "KeyVault secret name."
                                            },
                                            "version": {
                                              "type": "string",
                                              "description": "KeyVault secret version."
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "secretName": {
                                      "type": "string",
                                      "description": "Secret where cert details are stored."
                                    }
                                  }
                                }
                              }
                            },
                            "enabled": {
                              "type": "boolean",
                              "description": "If authentication is enabled for Kafka remote broker."
                            }
                          }
                        },
                        "endpoint": {
                          "type": "string",
                          "description": "The endpoint of remote broker to connect to."
                        },
                        "tls": {
                          "description": "TLS details for Remote broker Connection.",
                          "type": "object",
                          "properties": {
                            "tlsEnabled": {
                              "type": "boolean",
                              "description": "Tls Enabled on Remote Broker Connection."
                            },
                            "trustedCaCertificateConfigMap": {
                              "type": "string",
                              "description": "Trusted CA certificate name for Remote Broker."
                            }
                          }
                        }
                      }
                    },
                    "localBrokerConnection": {
                      "description": "The details for connecting with Local Broker.",
                      "type": "object",
                      "properties": {
                        "authentication": {
                          "description": "The authentication methods for LocalBroker connection. NOTE - Enum only one method at a time is supported.",
                          "type": "object",
                          "properties": {
                            "kubernetes": {
                              "description": "Kubernetes local broker authentication method.",
                              "type": "object",
                              "properties": {
                                "secretPath": {
                                  "type": "string",
                                  "description": "Secret Path where SAT is mounted.",
                                  "default": "/var/run/serviceaccount/localbroker"
                                },
                                "serviceAccountTokenName": {
                                  "type": "string",
                                  "description": "Token name where SAT is mounted on secret path.",
                                  "default": "sat"
                                }
                              }
                            }
                          }
                        },
                        "endpoint": {
                          "type": "string",
                          "description": "The endpoint of local broker to connect to.",
                          "default": "aio-mq-dmqtt-frontend:1883"
                        },
                        "tls": {
                          "description": "TLS details for Local broker Connection.",
                          "type": "object",
                          "properties": {
                            "tlsEnabled": {
                              "type": "boolean",
                              "description": "Tls Enabled on Local Broker Connection.",
                              "default": false
                            },
                            "trustedCaCertificateConfigMap": {
                              "type": "string",
                              "description": "Trusted CA certificate config map name for Local Broker."
                            }
                          }
                        }
                      }
                    },
                    "logLevel": {
                      "type": "string",
                      "description": "The log level of the Bridge Connector instances.",
                      "default": "info"
                    },
                    "nodeTolerations": {
                      "description": "The Node Tolerations for the Bridge Connector pods.",
                      "type": "object",
                      "properties": {
                        "effect": {
                          "type": "string",
                          "description": "Toleration effect."
                        },
                        "key": {
                          "type": "string",
                          "description": "Toleration key."
                        },
                        "operator": {
                          "type": "string",
                          "description": "Toleration operator like 'Exists', 'Equal' etc."
                        },
                        "value": {
                          "type": "string",
                          "description": "Toleration Value."
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "type": "object",
              "description": "MQ kafkaConnector resource",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "description": "The name of the resource",
                  "readOnly": true
                },
                "type": {
                  "type": "string",
                  "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                  "readOnly": true
                },
                "systemData": {
                  "type": "object",
                  "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                  "readOnly": true,
                  "properties": {
                    "createdBy": {
                      "type": "string",
                      "description": "The identity that created the resource."
                    },
                    "createdByType": {
                      "type": "string",
                      "description": "The type of identity that created the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource creation (UTC)."
                    },
                    "lastModifiedBy": {
                      "type": "string",
                      "description": "The identity that last modified the resource."
                    },
                    "lastModifiedByType": {
                      "type": "string",
                      "description": "The type of identity that last modified the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "lastModifiedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource last modification (UTC)"
                    }
                  }
                },
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "x-ms-mutability": [
                    "read",
                    "create",
                    "update"
                  ]
                },
                "location": {
                  "type": "string",
                  "description": "The geo-location where the resource lives",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ]
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "clientIdPrefix": {
                      "type": "string",
                      "description": "The client id prefix of the dynamically generated client ids."
                    },
                    "image": {
                      "description": "The details of KafkaConnector Docker Image.",
                      "type": "object",
                      "properties": {
                        "pullPolicy": {
                          "type": "string",
                          "description": "Image pull policy."
                        },
                        "pullSecrets": {
                          "type": "string",
                          "description": "Image pull secrets."
                        },
                        "repository": {
                          "type": "string",
                          "description": "The Docker image name."
                        },
                        "tag": {
                          "type": "string",
                          "description": "The Docker  image tag."
                        }
                      },
                      "required": [
                        "repository",
                        "tag"
                      ]
                    },
                    "instances": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The number of KafkaConnector pods to spin up.",
                      "minimum": 0,
                      "maximum": 65535
                    },
                    "kafkaConnection": {
                      "description": "The details for connecting with Remote Kafka Broker.",
                      "type": "object",
                      "properties": {
                        "authentication": {
                          "description": "The remote broker authentication methods.",
                          "type": "object",
                          "properties": {
                            "authType": {
                              "description": "The type of authentication to use for Kafka remote broker.",
                              "type": "object",
                              "properties": {
                                "sasl": {
                                  "description": "Sasl remote broker authentication method.",
                                  "type": "object",
                                  "properties": {
                                    "saslType": {
                                      "description": "Sasl Mechanism for remote broker authentication.",
                                      "type": "string",
                                      "enum": [
                                        "plain",
                                        "scramSha256",
                                        "scramSha512"
                                      ],
                                      "x-ms-enum": {
                                        "name": "KafkaSaslType",
                                        "modelAsString": true,
                                        "values": [
                                          {
                                            "name": "plain",
                                            "value": "plain",
                                            "description": "Sasl Plain authentication."
                                          },
                                          {
                                            "name": "scramSha256",
                                            "value": "scramSha256",
                                            "description": "Sasl ScramSha256 authentication."
                                          },
                                          {
                                            "name": "scramSha512",
                                            "value": "scramSha512",
                                            "description": "Sasl ScramSha512 authentication."
                                          }
                                        ]
                                      }
                                    },
                                    "token": {
                                      "description": "Sasl token for remote broker authentication.",
                                      "type": "object",
                                      "properties": {
                                        "keyVault": {
                                          "description": "Keyvault token keyvault secret properties.",
                                          "type": "object",
                                          "properties": {
                                            "username": {
                                              "type": "string",
                                              "description": "Username to connect with."
                                            },
                                            "vault": {
                                              "description": "KeyVault properties.",
                                              "type": "object",
                                              "properties": {
                                                "credentials": {
                                                  "description": "KeyVault credentials.",
                                                  "type": "object",
                                                  "properties": {
                                                    "servicePrincipalLocalSecretName": {
                                                      "type": "string",
                                                      "description": "KeyVault service principal local secret name."
                                                    }
                                                  },
                                                  "required": [
                                                    "servicePrincipalLocalSecretName"
                                                  ]
                                                },
                                                "directoryId": {
                                                  "type": "string",
                                                  "description": "KeyVault directoryId."
                                                },
                                                "name": {
                                                  "type": "string",
                                                  "description": "KeyVault name."
                                                }
                                              },
                                              "required": [
                                                "credentials",
                                                "directoryId",
                                                "name"
                                              ]
                                            },
                                            "vaultSecret": {
                                              "description": "KeyVault secret details.",
                                              "type": "object",
                                              "properties": {
                                                "name": {
                                                  "type": "string",
                                                  "description": "KeyVault secret name."
                                                },
                                                "version": {
                                                  "type": "string",
                                                  "description": "KeyVault secret version."
                                                }
                                              },
                                              "required": [
                                                "name"
                                              ]
                                            }
                                          },
                                          "required": [
                                            "vault",
                                            "vaultSecret"
                                          ]
                                        },
                                        "secretName": {
                                          "type": "string",
                                          "description": "Secret where cert details are stored."
                                        }
                                      }
                                    }
                                  },
                                  "required": [
                                    "saslType",
                                    "token"
                                  ]
                                },
                                "systemAssignedManagedIdentity": {
                                  "description": "Managed identity remote broker authentication method.",
                                  "type": "object",
                                  "properties": {
                                    "audience": {
                                      "type": "string",
                                      "description": "Token audience."
                                    },
                                    "extensionName": {
                                      "type": "string",
                                      "description": "Arc Extension name."
                                    }
                                  },
                                  "required": [
                                    "audience"
                                  ]
                                },
                                "x509": {
                                  "description": "X509 remote broker authentication method.",
                                  "type": "object",
                                  "properties": {
                                    "keyVault": {
                                      "description": "Keyvault X509 secret properties.",
                                      "type": "object",
                                      "properties": {
                                        "vault": {
                                          "description": "KeyVault properties.",
                                          "type": "object",
                                          "properties": {
                                            "credentials": {
                                              "description": "KeyVault credentials.",
                                              "type": "object",
                                              "properties": {
                                                "servicePrincipalLocalSecretName": {
                                                  "type": "string",
                                                  "description": "KeyVault service principal local secret name."
                                                }
                                              },
                                              "required": [
                                                "servicePrincipalLocalSecretName"
                                              ]
                                            },
                                            "directoryId": {
                                              "type": "string",
                                              "description": "KeyVault directoryId."
                                            },
                                            "name": {
                                              "type": "string",
                                              "description": "KeyVault name."
                                            }
                                          },
                                          "required": [
                                            "credentials",
                                            "directoryId",
                                            "name"
                                          ]
                                        },
                                        "vaultCaChainSecret": {
                                          "description": "KeyVault CA chain secret details.",
                                          "type": "object",
                                          "properties": {
                                            "name": {
                                              "type": "string",
                                              "description": "KeyVault secret name."
                                            },
                                            "version": {
                                              "type": "string",
                                              "description": "KeyVault secret version."
                                            }
                                          },
                                          "required": [
                                            "name"
                                          ]
                                        },
                                        "vaultCert": {
                                          "description": "KeyVault Cert secret details.",
                                          "type": "object",
                                          "properties": {
                                            "name": {
                                              "type": "string",
                                              "description": "KeyVault secret name."
                                            },
                                            "version": {
                                              "type": "string",
                                              "description": "KeyVault secret version."
                                            }
                                          },
                                          "required": [
                                            "name"
                                          ]
                                        }
                                      },
                                      "required": [
                                        "vault",
                                        "vaultCert"
                                      ]
                                    },
                                    "secretName": {
                                      "type": "string",
                                      "description": "Secret where cert details are stored."
                                    }
                                  }
                                }
                              }
                            },
                            "enabled": {
                              "type": "boolean",
                              "description": "If authentication is enabled for Kafka remote broker."
                            }
                          },
                          "required": [
                            "enabled"
                          ]
                        },
                        "endpoint": {
                          "type": "string",
                          "description": "The endpoint of remote broker to connect to."
                        },
                        "tls": {
                          "description": "TLS details for Remote broker Connection.",
                          "type": "object",
                          "properties": {
                            "tlsEnabled": {
                              "type": "boolean",
                              "description": "Tls Enabled on Remote Broker Connection."
                            },
                            "trustedCaCertificateConfigMap": {
                              "type": "string",
                              "description": "Trusted CA certificate name for Remote Broker."
                            }
                          },
                          "required": [
                            "tlsEnabled"
                          ]
                        }
                      },
                      "required": [
                        "authentication",
                        "endpoint",
                        "tls"
                      ]
                    },
                    "localBrokerConnection": {
                      "description": "The details for connecting with Local Broker.",
                      "type": "object",
                      "properties": {
                        "authentication": {
                          "description": "The authentication methods for LocalBroker connection. NOTE - Enum only one method at a time is supported.",
                          "type": "object",
                          "properties": {
                            "kubernetes": {
                              "description": "Kubernetes local broker authentication method.",
                              "type": "object",
                              "properties": {
                                "secretPath": {
                                  "type": "string",
                                  "description": "Secret Path where SAT is mounted.",
                                  "default": "/var/run/serviceaccount/localbroker"
                                },
                                "serviceAccountTokenName": {
                                  "type": "string",
                                  "description": "Token name where SAT is mounted on secret path.",
                                  "default": "sat"
                                }
                              }
                            }
                          },
                          "required": [
                            "kubernetes"
                          ]
                        },
                        "endpoint": {
                          "type": "string",
                          "description": "The endpoint of local broker to connect to.",
                          "default": "aio-mq-dmqtt-frontend:1883"
                        },
                        "tls": {
                          "description": "TLS details for Local broker Connection.",
                          "type": "object",
                          "properties": {
                            "tlsEnabled": {
                              "type": "boolean",
                              "description": "Tls Enabled on Local Broker Connection.",
                              "default": false
                            },
                            "trustedCaCertificateConfigMap": {
                              "type": "string",
                              "description": "Trusted CA certificate config map name for Local Broker."
                            }
                          }
                        }
                      }
                    },
                    "logLevel": {
                      "type": "string",
                      "description": "The log level of the Bridge Connector instances.",
                      "default": "info"
                    },
                    "nodeTolerations": {
                      "description": "The Node Tolerations for the Bridge Connector pods.",
                      "type": "object",
                      "properties": {
                        "effect": {
                          "type": "string",
                          "description": "Toleration effect."
                        },
                        "key": {
                          "type": "string",
                          "description": "Toleration key."
                        },
                        "operator": {
                          "type": "string",
                          "description": "Toleration operator like 'Exists', 'Equal' etc."
                        },
                        "value": {
                          "type": "string",
                          "description": "Toleration Value."
                        }
                      },
                      "required": [
                        "effect",
                        "key",
                        "operator",
                        "value"
                      ]
                    },
                    "provisioningState": {
                      "description": "The status of the last operation.",
                      "readOnly": true,
                      "type": "string",
                      "enum": [
                        "Succeeded",
                        "Failed",
                        "Canceled",
                        "Provisioning",
                        "Updating",
                        "Deleting",
                        "Accepted"
                      ],
                      "x-ms-enum": {
                        "name": "ProvisioningState",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Succeeded",
                            "value": "Succeeded",
                            "description": "Resource has been created."
                          },
                          {
                            "name": "Failed",
                            "value": "Failed",
                            "description": "Resource creation failed."
                          },
                          {
                            "name": "Canceled",
                            "value": "Canceled",
                            "description": "Resource creation was canceled."
                          },
                          {
                            "name": "Provisioning",
                            "value": "Provisioning",
                            "description": "Resource is getting provisioned."
                          },
                          {
                            "name": "Updating",
                            "value": "Updating",
                            "description": "Resource is Updating."
                          },
                          {
                            "name": "Deleting",
                            "value": "Deleting",
                            "description": "Resource is Deleting."
                          },
                          {
                            "name": "Accepted",
                            "value": "Accepted",
                            "description": "Resource has been Accepted."
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "kafkaConnection"
                  ]
                },
                "extendedLocation": {
                  "description": "Extended Location",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ],
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The name of the extended location."
                    },
                    "type": {
                      "description": "Type of ExtendedLocation.",
                      "type": "string",
                      "enum": [
                        "CustomLocation"
                      ],
                      "x-ms-enum": {
                        "name": "ExtendedLocationType",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "CustomLocation",
                            "value": "CustomLocation",
                            "description": "CustomLocation type"
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "name",
                    "type"
                  ]
                }
              },
              "required": [
                "extendedLocation"
              ]
            }
          }
        }
      },
      "delete": {
        "operationId": "KafkaConnector_Delete",
        "tags": [
          "KafkaConnector"
        ],
        "description": "Delete a KafkaConnectorResource",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group. The name is case insensitive.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "x-ms-parameter-location": "method"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "kafkaConnectorName",
            "in": "path",
            "description": "Name of MQ kafkaConnector resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          }
        ],
        "responses": {
          "202": {
            "description": "Resource deletion accepted.",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              },
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "204": {
            "description": "Resource does not exist."
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTOperationsMQ/mq/{mqName}/kafkaConnector/{kafkaConnectorName}/topicMap": {
      "get": {
        "operationId": "KafkaConnectorTopicMap_ListByKafkaConnectorResource",
        "tags": [
          "KafkaConnectorTopicMap"
        ],
        "description": "List KafkaTopicMapResource resources by KafkaConnectorResource",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group. The name is case insensitive.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "x-ms-parameter-location": "method"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "kafkaConnectorName",
            "in": "path",
            "description": "Name of MQ kafkaConnector resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "type": "object",
              "description": "The response of a KafkaTopicMapResource list operation.",
              "properties": {
                "value": {
                  "type": "array",
                  "description": "The KafkaTopicMapResource items on this page",
                  "items": {
                    "type": "object",
                    "description": "MQ kafkaConnector/topicMap resource",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                        "readOnly": true
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the resource",
                        "readOnly": true
                      },
                      "type": {
                        "type": "string",
                        "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                        "readOnly": true
                      },
                      "systemData": {
                        "type": "object",
                        "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                        "readOnly": true,
                        "properties": {
                          "createdBy": {
                            "type": "string",
                            "description": "The identity that created the resource."
                          },
                          "createdByType": {
                            "type": "string",
                            "description": "The type of identity that created the resource.",
                            "enum": [
                              "User",
                              "Application",
                              "ManagedIdentity",
                              "Key"
                            ],
                            "x-ms-enum": {
                              "name": "createdByType",
                              "modelAsString": true
                            }
                          },
                          "createdAt": {
                            "type": "string",
                            "format": "date-time",
                            "description": "The timestamp of resource creation (UTC)."
                          },
                          "lastModifiedBy": {
                            "type": "string",
                            "description": "The identity that last modified the resource."
                          },
                          "lastModifiedByType": {
                            "type": "string",
                            "description": "The type of identity that last modified the resource.",
                            "enum": [
                              "User",
                              "Application",
                              "ManagedIdentity",
                              "Key"
                            ],
                            "x-ms-enum": {
                              "name": "createdByType",
                              "modelAsString": true
                            }
                          },
                          "lastModifiedAt": {
                            "type": "string",
                            "format": "date-time",
                            "description": "The timestamp of resource last modification (UTC)"
                          }
                        }
                      },
                      "tags": {
                        "type": "object",
                        "description": "Resource tags.",
                        "additionalProperties": {
                          "type": "string"
                        },
                        "x-ms-mutability": [
                          "read",
                          "create",
                          "update"
                        ]
                      },
                      "location": {
                        "type": "string",
                        "description": "The geo-location where the resource lives",
                        "x-ms-mutability": [
                          "read",
                          "create"
                        ]
                      },
                      "properties": {
                        "description": "The resource-specific properties for this resource.",
                        "x-ms-client-flatten": true,
                        "type": "object",
                        "properties": {
                          "batching": {
                            "description": "The batching settings for kafka messages.",
                            "type": "object",
                            "properties": {
                              "enabled": {
                                "type": "boolean",
                                "description": "The setting to enable or disable batching.",
                                "default": false
                              },
                              "latencyMs": {
                                "type": "integer",
                                "format": "int32",
                                "description": "The latency of message batching.",
                                "default": 5,
                                "minimum": 0,
                                "maximum": 65535
                              },
                              "maxBytes": {
                                "type": "integer",
                                "format": "int64",
                                "description": "The maximum bytes to send in a batch.",
                                "default": 1000000,
                                "minimum": 0,
                                "maximum": 4294967295
                              },
                              "maxMessages": {
                                "type": "integer",
                                "format": "int64",
                                "description": "The maximum messages to send in a batch.",
                                "default": 100000,
                                "minimum": 0,
                                "maximum": 4294967295
                              }
                            }
                          },
                          "compression": {
                            "type": "string",
                            "description": "The compression to use for kafka messages.",
                            "default": "none",
                            "enum": [
                              "none",
                              "gzip",
                              "snappy",
                              "lz4"
                            ],
                            "x-ms-enum": {
                              "name": "KafkaMessageCompressionType",
                              "modelAsString": true,
                              "values": [
                                {
                                  "name": "none",
                                  "value": "none",
                                  "description": "No Kafka message compression."
                                },
                                {
                                  "name": "gzip",
                                  "value": "gzip",
                                  "description": "Gzip Kafka message compression."
                                },
                                {
                                  "name": "snappy",
                                  "value": "snappy",
                                  "description": "Snappy Kafka message compression."
                                },
                                {
                                  "name": "lz4",
                                  "value": "lz4",
                                  "description": "Lz4 Kafka message compression."
                                }
                              ]
                            }
                          },
                          "copyMqttProperties": {
                            "type": "string",
                            "description": "The flag to copy Mqtt properties."
                          },
                          "kafkaConnectorRef": {
                            "type": "string",
                            "description": "The kafkaConnector CRD it refers to."
                          },
                          "partitionKeyProperty": {
                            "type": "string",
                            "description": "The partition to use for Kafka."
                          },
                          "partitionStrategy": {
                            "type": "string",
                            "description": "The partition strategy to use for Kafka.",
                            "default": "default",
                            "enum": [
                              "default",
                              "static",
                              "topic",
                              "property"
                            ],
                            "x-ms-enum": {
                              "name": "KafkaPartitionStrategy",
                              "modelAsString": true,
                              "values": [
                                {
                                  "name": "default",
                                  "value": "default",
                                  "description": "Default partition strategy."
                                },
                                {
                                  "name": "static",
                                  "value": "static",
                                  "description": "Static partition strategy."
                                },
                                {
                                  "name": "topic",
                                  "value": "topic",
                                  "description": "Topic partition strategy."
                                },
                                {
                                  "name": "property",
                                  "value": "property",
                                  "description": "Property partition strategy."
                                }
                              ]
                            }
                          },
                          "routes": {
                            "type": "array",
                            "description": "The route details for Kafka connector.",
                            "items": {
                              "type": "object",
                              "description": "Kafka Routes properties. NOTE - Enum only one method is allowed to be passed.",
                              "properties": {
                                "kafkaToMqtt": {
                                  "description": "Kafka to Mqtt route.",
                                  "type": "object",
                                  "properties": {
                                    "consumerGroupId": {
                                      "type": "string",
                                      "description": "The consumer group id to use."
                                    },
                                    "kafkaTopic": {
                                      "type": "string",
                                      "description": "The kafka topic to pull from."
                                    },
                                    "mqttTopic": {
                                      "type": "string",
                                      "description": "The mqtt topic to publish to."
                                    },
                                    "name": {
                                      "type": "string",
                                      "description": "The name of the route."
                                    },
                                    "qos": {
                                      "type": "integer",
                                      "format": "int32",
                                      "description": "The qos to use for mqtt.",
                                      "default": 1,
                                      "minimum": 0,
                                      "maximum": 1
                                    }
                                  },
                                  "required": [
                                    "kafkaTopic",
                                    "mqttTopic",
                                    "name"
                                  ]
                                },
                                "mqttToKafka": {
                                  "description": "Mqtt to Kafka route.",
                                  "type": "object",
                                  "properties": {
                                    "kafkaAcks": {
                                      "description": "The kafka acks to use.",
                                      "type": "string",
                                      "enum": [
                                        "zero",
                                        "one",
                                        "all"
                                      ],
                                      "x-ms-enum": {
                                        "name": "KafkaAcks",
                                        "modelAsString": true,
                                        "values": [
                                          {
                                            "name": "zero",
                                            "value": "zero",
                                            "description": "Kafka acks zero."
                                          },
                                          {
                                            "name": "one",
                                            "value": "one",
                                            "description": "Kafka acks one."
                                          },
                                          {
                                            "name": "all",
                                            "value": "all",
                                            "description": "Kafka acks all."
                                          }
                                        ]
                                      }
                                    },
                                    "kafkaTopic": {
                                      "type": "string",
                                      "description": "The kafka topic to publish to."
                                    },
                                    "mqttTopic": {
                                      "type": "string",
                                      "description": "The mqtt topic to pull from."
                                    },
                                    "name": {
                                      "type": "string",
                                      "description": "The name of the route."
                                    },
                                    "qos": {
                                      "type": "integer",
                                      "format": "int32",
                                      "description": "The qos to use for mqtt.",
                                      "default": 1,
                                      "minimum": 0,
                                      "maximum": 1
                                    },
                                    "sharedSubscription": {
                                      "description": "The properties for shared subscription.",
                                      "type": "object",
                                      "properties": {
                                        "groupMinimumShareNumber": {
                                          "type": "integer",
                                          "format": "int32",
                                          "description": "The minimum number to use in a group for subscription.",
                                          "minimum": 0,
                                          "maximum": 255
                                        },
                                        "groupName": {
                                          "type": "string",
                                          "description": "The name of the shared subscription."
                                        }
                                      },
                                      "required": [
                                        "groupMinimumShareNumber",
                                        "groupName"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "kafkaAcks",
                                    "kafkaTopic",
                                    "mqttTopic",
                                    "name"
                                  ]
                                }
                              }
                            },
                            "x-ms-identifiers": []
                          },
                          "provisioningState": {
                            "description": "The status of the last operation.",
                            "readOnly": true,
                            "type": "string",
                            "enum": [
                              "Succeeded",
                              "Failed",
                              "Canceled",
                              "Provisioning",
                              "Updating",
                              "Deleting",
                              "Accepted"
                            ],
                            "x-ms-enum": {
                              "name": "ProvisioningState",
                              "modelAsString": true,
                              "values": [
                                {
                                  "name": "Succeeded",
                                  "value": "Succeeded",
                                  "description": "Resource has been created."
                                },
                                {
                                  "name": "Failed",
                                  "value": "Failed",
                                  "description": "Resource creation failed."
                                },
                                {
                                  "name": "Canceled",
                                  "value": "Canceled",
                                  "description": "Resource creation was canceled."
                                },
                                {
                                  "name": "Provisioning",
                                  "value": "Provisioning",
                                  "description": "Resource is getting provisioned."
                                },
                                {
                                  "name": "Updating",
                                  "value": "Updating",
                                  "description": "Resource is Updating."
                                },
                                {
                                  "name": "Deleting",
                                  "value": "Deleting",
                                  "description": "Resource is Deleting."
                                },
                                {
                                  "name": "Accepted",
                                  "value": "Accepted",
                                  "description": "Resource has been Accepted."
                                }
                              ]
                            }
                          }
                        },
                        "required": [
                          "kafkaConnectorRef",
                          "routes"
                        ]
                      },
                      "extendedLocation": {
                        "description": "Extended Location",
                        "x-ms-mutability": [
                          "read",
                          "create"
                        ],
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "The name of the extended location."
                          },
                          "type": {
                            "description": "Type of ExtendedLocation.",
                            "type": "string",
                            "enum": [
                              "CustomLocation"
                            ],
                            "x-ms-enum": {
                              "name": "ExtendedLocationType",
                              "modelAsString": true,
                              "values": [
                                {
                                  "name": "CustomLocation",
                                  "value": "CustomLocation",
                                  "description": "CustomLocation type"
                                }
                              ]
                            }
                          }
                        },
                        "required": [
                          "name",
                          "type"
                        ]
                      }
                    },
                    "required": [
                      "extendedLocation"
                    ]
                  }
                },
                "nextLink": {
                  "type": "string",
                  "format": "uri",
                  "description": "The link to the next page of items"
                }
              },
              "required": [
                "value"
              ]
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTOperationsMQ/mq/{mqName}/kafkaConnector/{kafkaConnectorName}/topicMap/{topicMapName}": {
      "get": {
        "operationId": "KafkaConnectorTopicMap_Get",
        "tags": [
          "KafkaConnectorTopicMap"
        ],
        "description": "Get a KafkaTopicMapResource",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group. The name is case insensitive.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "x-ms-parameter-location": "method"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "kafkaConnectorName",
            "in": "path",
            "description": "Name of MQ kafkaConnector resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "topicMapName",
            "in": "path",
            "description": "Name of MQ kafka/topicMap resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "type": "object",
              "description": "MQ kafkaConnector/topicMap resource",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "description": "The name of the resource",
                  "readOnly": true
                },
                "type": {
                  "type": "string",
                  "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                  "readOnly": true
                },
                "systemData": {
                  "type": "object",
                  "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                  "readOnly": true,
                  "properties": {
                    "createdBy": {
                      "type": "string",
                      "description": "The identity that created the resource."
                    },
                    "createdByType": {
                      "type": "string",
                      "description": "The type of identity that created the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource creation (UTC)."
                    },
                    "lastModifiedBy": {
                      "type": "string",
                      "description": "The identity that last modified the resource."
                    },
                    "lastModifiedByType": {
                      "type": "string",
                      "description": "The type of identity that last modified the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "lastModifiedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource last modification (UTC)"
                    }
                  }
                },
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "x-ms-mutability": [
                    "read",
                    "create",
                    "update"
                  ]
                },
                "location": {
                  "type": "string",
                  "description": "The geo-location where the resource lives",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ]
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "batching": {
                      "description": "The batching settings for kafka messages.",
                      "type": "object",
                      "properties": {
                        "enabled": {
                          "type": "boolean",
                          "description": "The setting to enable or disable batching.",
                          "default": false
                        },
                        "latencyMs": {
                          "type": "integer",
                          "format": "int32",
                          "description": "The latency of message batching.",
                          "default": 5,
                          "minimum": 0,
                          "maximum": 65535
                        },
                        "maxBytes": {
                          "type": "integer",
                          "format": "int64",
                          "description": "The maximum bytes to send in a batch.",
                          "default": 1000000,
                          "minimum": 0,
                          "maximum": 4294967295
                        },
                        "maxMessages": {
                          "type": "integer",
                          "format": "int64",
                          "description": "The maximum messages to send in a batch.",
                          "default": 100000,
                          "minimum": 0,
                          "maximum": 4294967295
                        }
                      }
                    },
                    "compression": {
                      "type": "string",
                      "description": "The compression to use for kafka messages.",
                      "default": "none",
                      "enum": [
                        "none",
                        "gzip",
                        "snappy",
                        "lz4"
                      ],
                      "x-ms-enum": {
                        "name": "KafkaMessageCompressionType",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "none",
                            "value": "none",
                            "description": "No Kafka message compression."
                          },
                          {
                            "name": "gzip",
                            "value": "gzip",
                            "description": "Gzip Kafka message compression."
                          },
                          {
                            "name": "snappy",
                            "value": "snappy",
                            "description": "Snappy Kafka message compression."
                          },
                          {
                            "name": "lz4",
                            "value": "lz4",
                            "description": "Lz4 Kafka message compression."
                          }
                        ]
                      }
                    },
                    "copyMqttProperties": {
                      "type": "string",
                      "description": "The flag to copy Mqtt properties."
                    },
                    "kafkaConnectorRef": {
                      "type": "string",
                      "description": "The kafkaConnector CRD it refers to."
                    },
                    "partitionKeyProperty": {
                      "type": "string",
                      "description": "The partition to use for Kafka."
                    },
                    "partitionStrategy": {
                      "type": "string",
                      "description": "The partition strategy to use for Kafka.",
                      "default": "default",
                      "enum": [
                        "default",
                        "static",
                        "topic",
                        "property"
                      ],
                      "x-ms-enum": {
                        "name": "KafkaPartitionStrategy",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "default",
                            "value": "default",
                            "description": "Default partition strategy."
                          },
                          {
                            "name": "static",
                            "value": "static",
                            "description": "Static partition strategy."
                          },
                          {
                            "name": "topic",
                            "value": "topic",
                            "description": "Topic partition strategy."
                          },
                          {
                            "name": "property",
                            "value": "property",
                            "description": "Property partition strategy."
                          }
                        ]
                      }
                    },
                    "routes": {
                      "type": "array",
                      "description": "The route details for Kafka connector.",
                      "items": {
                        "type": "object",
                        "description": "Kafka Routes properties. NOTE - Enum only one method is allowed to be passed.",
                        "properties": {
                          "kafkaToMqtt": {
                            "description": "Kafka to Mqtt route.",
                            "type": "object",
                            "properties": {
                              "consumerGroupId": {
                                "type": "string",
                                "description": "The consumer group id to use."
                              },
                              "kafkaTopic": {
                                "type": "string",
                                "description": "The kafka topic to pull from."
                              },
                              "mqttTopic": {
                                "type": "string",
                                "description": "The mqtt topic to publish to."
                              },
                              "name": {
                                "type": "string",
                                "description": "The name of the route."
                              },
                              "qos": {
                                "type": "integer",
                                "format": "int32",
                                "description": "The qos to use for mqtt.",
                                "default": 1,
                                "minimum": 0,
                                "maximum": 1
                              }
                            },
                            "required": [
                              "kafkaTopic",
                              "mqttTopic",
                              "name"
                            ]
                          },
                          "mqttToKafka": {
                            "description": "Mqtt to Kafka route.",
                            "type": "object",
                            "properties": {
                              "kafkaAcks": {
                                "description": "The kafka acks to use.",
                                "type": "string",
                                "enum": [
                                  "zero",
                                  "one",
                                  "all"
                                ],
                                "x-ms-enum": {
                                  "name": "KafkaAcks",
                                  "modelAsString": true,
                                  "values": [
                                    {
                                      "name": "zero",
                                      "value": "zero",
                                      "description": "Kafka acks zero."
                                    },
                                    {
                                      "name": "one",
                                      "value": "one",
                                      "description": "Kafka acks one."
                                    },
                                    {
                                      "name": "all",
                                      "value": "all",
                                      "description": "Kafka acks all."
                                    }
                                  ]
                                }
                              },
                              "kafkaTopic": {
                                "type": "string",
                                "description": "The kafka topic to publish to."
                              },
                              "mqttTopic": {
                                "type": "string",
                                "description": "The mqtt topic to pull from."
                              },
                              "name": {
                                "type": "string",
                                "description": "The name of the route."
                              },
                              "qos": {
                                "type": "integer",
                                "format": "int32",
                                "description": "The qos to use for mqtt.",
                                "default": 1,
                                "minimum": 0,
                                "maximum": 1
                              },
                              "sharedSubscription": {
                                "description": "The properties for shared subscription.",
                                "type": "object",
                                "properties": {
                                  "groupMinimumShareNumber": {
                                    "type": "integer",
                                    "format": "int32",
                                    "description": "The minimum number to use in a group for subscription.",
                                    "minimum": 0,
                                    "maximum": 255
                                  },
                                  "groupName": {
                                    "type": "string",
                                    "description": "The name of the shared subscription."
                                  }
                                },
                                "required": [
                                  "groupMinimumShareNumber",
                                  "groupName"
                                ]
                              }
                            },
                            "required": [
                              "kafkaAcks",
                              "kafkaTopic",
                              "mqttTopic",
                              "name"
                            ]
                          }
                        }
                      },
                      "x-ms-identifiers": []
                    },
                    "provisioningState": {
                      "description": "The status of the last operation.",
                      "readOnly": true,
                      "type": "string",
                      "enum": [
                        "Succeeded",
                        "Failed",
                        "Canceled",
                        "Provisioning",
                        "Updating",
                        "Deleting",
                        "Accepted"
                      ],
                      "x-ms-enum": {
                        "name": "ProvisioningState",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Succeeded",
                            "value": "Succeeded",
                            "description": "Resource has been created."
                          },
                          {
                            "name": "Failed",
                            "value": "Failed",
                            "description": "Resource creation failed."
                          },
                          {
                            "name": "Canceled",
                            "value": "Canceled",
                            "description": "Resource creation was canceled."
                          },
                          {
                            "name": "Provisioning",
                            "value": "Provisioning",
                            "description": "Resource is getting provisioned."
                          },
                          {
                            "name": "Updating",
                            "value": "Updating",
                            "description": "Resource is Updating."
                          },
                          {
                            "name": "Deleting",
                            "value": "Deleting",
                            "description": "Resource is Deleting."
                          },
                          {
                            "name": "Accepted",
                            "value": "Accepted",
                            "description": "Resource has been Accepted."
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "kafkaConnectorRef",
                    "routes"
                  ]
                },
                "extendedLocation": {
                  "description": "Extended Location",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ],
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The name of the extended location."
                    },
                    "type": {
                      "description": "Type of ExtendedLocation.",
                      "type": "string",
                      "enum": [
                        "CustomLocation"
                      ],
                      "x-ms-enum": {
                        "name": "ExtendedLocationType",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "CustomLocation",
                            "value": "CustomLocation",
                            "description": "CustomLocation type"
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "name",
                    "type"
                  ]
                }
              },
              "required": [
                "extendedLocation"
              ]
            }
          }
        }
      },
      "put": {
        "operationId": "KafkaConnectorTopicMap_CreateOrUpdate",
        "tags": [
          "KafkaConnectorTopicMap"
        ],
        "description": "Create a KafkaTopicMapResource",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group. The name is case insensitive.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "x-ms-parameter-location": "method"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "kafkaConnectorName",
            "in": "path",
            "description": "Name of MQ kafkaConnector resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "topicMapName",
            "in": "path",
            "description": "Name of MQ kafka/topicMap resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "resource",
            "in": "body",
            "description": "Resource create parameters.",
            "required": true,
            "schema": {
              "type": "object",
              "description": "MQ kafkaConnector/topicMap resource",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "description": "The name of the resource",
                  "readOnly": true
                },
                "type": {
                  "type": "string",
                  "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                  "readOnly": true
                },
                "systemData": {
                  "type": "object",
                  "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                  "readOnly": true,
                  "properties": {
                    "createdBy": {
                      "type": "string",
                      "description": "The identity that created the resource."
                    },
                    "createdByType": {
                      "type": "string",
                      "description": "The type of identity that created the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource creation (UTC)."
                    },
                    "lastModifiedBy": {
                      "type": "string",
                      "description": "The identity that last modified the resource."
                    },
                    "lastModifiedByType": {
                      "type": "string",
                      "description": "The type of identity that last modified the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "lastModifiedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource last modification (UTC)"
                    }
                  }
                },
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "x-ms-mutability": [
                    "read",
                    "create",
                    "update"
                  ]
                },
                "location": {
                  "type": "string",
                  "description": "The geo-location where the resource lives",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ]
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "batching": {
                      "description": "The batching settings for kafka messages.",
                      "type": "object",
                      "properties": {
                        "enabled": {
                          "type": "boolean",
                          "description": "The setting to enable or disable batching.",
                          "default": false
                        },
                        "latencyMs": {
                          "type": "integer",
                          "format": "int32",
                          "description": "The latency of message batching.",
                          "default": 5,
                          "minimum": 0,
                          "maximum": 65535
                        },
                        "maxBytes": {
                          "type": "integer",
                          "format": "int64",
                          "description": "The maximum bytes to send in a batch.",
                          "default": 1000000,
                          "minimum": 0,
                          "maximum": 4294967295
                        },
                        "maxMessages": {
                          "type": "integer",
                          "format": "int64",
                          "description": "The maximum messages to send in a batch.",
                          "default": 100000,
                          "minimum": 0,
                          "maximum": 4294967295
                        }
                      }
                    },
                    "compression": {
                      "type": "string",
                      "description": "The compression to use for kafka messages.",
                      "default": "none",
                      "enum": [
                        "none",
                        "gzip",
                        "snappy",
                        "lz4"
                      ],
                      "x-ms-enum": {
                        "name": "KafkaMessageCompressionType",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "none",
                            "value": "none",
                            "description": "No Kafka message compression."
                          },
                          {
                            "name": "gzip",
                            "value": "gzip",
                            "description": "Gzip Kafka message compression."
                          },
                          {
                            "name": "snappy",
                            "value": "snappy",
                            "description": "Snappy Kafka message compression."
                          },
                          {
                            "name": "lz4",
                            "value": "lz4",
                            "description": "Lz4 Kafka message compression."
                          }
                        ]
                      }
                    },
                    "copyMqttProperties": {
                      "type": "string",
                      "description": "The flag to copy Mqtt properties."
                    },
                    "kafkaConnectorRef": {
                      "type": "string",
                      "description": "The kafkaConnector CRD it refers to."
                    },
                    "partitionKeyProperty": {
                      "type": "string",
                      "description": "The partition to use for Kafka."
                    },
                    "partitionStrategy": {
                      "type": "string",
                      "description": "The partition strategy to use for Kafka.",
                      "default": "default",
                      "enum": [
                        "default",
                        "static",
                        "topic",
                        "property"
                      ],
                      "x-ms-enum": {
                        "name": "KafkaPartitionStrategy",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "default",
                            "value": "default",
                            "description": "Default partition strategy."
                          },
                          {
                            "name": "static",
                            "value": "static",
                            "description": "Static partition strategy."
                          },
                          {
                            "name": "topic",
                            "value": "topic",
                            "description": "Topic partition strategy."
                          },
                          {
                            "name": "property",
                            "value": "property",
                            "description": "Property partition strategy."
                          }
                        ]
                      }
                    },
                    "routes": {
                      "type": "array",
                      "description": "The route details for Kafka connector.",
                      "items": {
                        "type": "object",
                        "description": "Kafka Routes properties. NOTE - Enum only one method is allowed to be passed.",
                        "properties": {
                          "kafkaToMqtt": {
                            "description": "Kafka to Mqtt route.",
                            "type": "object",
                            "properties": {
                              "consumerGroupId": {
                                "type": "string",
                                "description": "The consumer group id to use."
                              },
                              "kafkaTopic": {
                                "type": "string",
                                "description": "The kafka topic to pull from."
                              },
                              "mqttTopic": {
                                "type": "string",
                                "description": "The mqtt topic to publish to."
                              },
                              "name": {
                                "type": "string",
                                "description": "The name of the route."
                              },
                              "qos": {
                                "type": "integer",
                                "format": "int32",
                                "description": "The qos to use for mqtt.",
                                "default": 1,
                                "minimum": 0,
                                "maximum": 1
                              }
                            },
                            "required": [
                              "kafkaTopic",
                              "mqttTopic",
                              "name"
                            ]
                          },
                          "mqttToKafka": {
                            "description": "Mqtt to Kafka route.",
                            "type": "object",
                            "properties": {
                              "kafkaAcks": {
                                "description": "The kafka acks to use.",
                                "type": "string",
                                "enum": [
                                  "zero",
                                  "one",
                                  "all"
                                ],
                                "x-ms-enum": {
                                  "name": "KafkaAcks",
                                  "modelAsString": true,
                                  "values": [
                                    {
                                      "name": "zero",
                                      "value": "zero",
                                      "description": "Kafka acks zero."
                                    },
                                    {
                                      "name": "one",
                                      "value": "one",
                                      "description": "Kafka acks one."
                                    },
                                    {
                                      "name": "all",
                                      "value": "all",
                                      "description": "Kafka acks all."
                                    }
                                  ]
                                }
                              },
                              "kafkaTopic": {
                                "type": "string",
                                "description": "The kafka topic to publish to."
                              },
                              "mqttTopic": {
                                "type": "string",
                                "description": "The mqtt topic to pull from."
                              },
                              "name": {
                                "type": "string",
                                "description": "The name of the route."
                              },
                              "qos": {
                                "type": "integer",
                                "format": "int32",
                                "description": "The qos to use for mqtt.",
                                "default": 1,
                                "minimum": 0,
                                "maximum": 1
                              },
                              "sharedSubscription": {
                                "description": "The properties for shared subscription.",
                                "type": "object",
                                "properties": {
                                  "groupMinimumShareNumber": {
                                    "type": "integer",
                                    "format": "int32",
                                    "description": "The minimum number to use in a group for subscription.",
                                    "minimum": 0,
                                    "maximum": 255
                                  },
                                  "groupName": {
                                    "type": "string",
                                    "description": "The name of the shared subscription."
                                  }
                                },
                                "required": [
                                  "groupMinimumShareNumber",
                                  "groupName"
                                ]
                              }
                            },
                            "required": [
                              "kafkaAcks",
                              "kafkaTopic",
                              "mqttTopic",
                              "name"
                            ]
                          }
                        }
                      },
                      "x-ms-identifiers": []
                    },
                    "provisioningState": {
                      "description": "The status of the last operation.",
                      "readOnly": true,
                      "type": "string",
                      "enum": [
                        "Succeeded",
                        "Failed",
                        "Canceled",
                        "Provisioning",
                        "Updating",
                        "Deleting",
                        "Accepted"
                      ],
                      "x-ms-enum": {
                        "name": "ProvisioningState",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Succeeded",
                            "value": "Succeeded",
                            "description": "Resource has been created."
                          },
                          {
                            "name": "Failed",
                            "value": "Failed",
                            "description": "Resource creation failed."
                          },
                          {
                            "name": "Canceled",
                            "value": "Canceled",
                            "description": "Resource creation was canceled."
                          },
                          {
                            "name": "Provisioning",
                            "value": "Provisioning",
                            "description": "Resource is getting provisioned."
                          },
                          {
                            "name": "Updating",
                            "value": "Updating",
                            "description": "Resource is Updating."
                          },
                          {
                            "name": "Deleting",
                            "value": "Deleting",
                            "description": "Resource is Deleting."
                          },
                          {
                            "name": "Accepted",
                            "value": "Accepted",
                            "description": "Resource has been Accepted."
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "kafkaConnectorRef",
                    "routes"
                  ]
                },
                "extendedLocation": {
                  "description": "Extended Location",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ],
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The name of the extended location."
                    },
                    "type": {
                      "description": "Type of ExtendedLocation.",
                      "type": "string",
                      "enum": [
                        "CustomLocation"
                      ],
                      "x-ms-enum": {
                        "name": "ExtendedLocationType",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "CustomLocation",
                            "value": "CustomLocation",
                            "description": "CustomLocation type"
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "name",
                    "type"
                  ]
                }
              },
              "required": [
                "extendedLocation"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resource 'KafkaTopicMapResource' update operation succeeded",
            "schema": {
              "type": "object",
              "description": "MQ kafkaConnector/topicMap resource",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "description": "The name of the resource",
                  "readOnly": true
                },
                "type": {
                  "type": "string",
                  "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                  "readOnly": true
                },
                "systemData": {
                  "type": "object",
                  "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                  "readOnly": true,
                  "properties": {
                    "createdBy": {
                      "type": "string",
                      "description": "The identity that created the resource."
                    },
                    "createdByType": {
                      "type": "string",
                      "description": "The type of identity that created the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource creation (UTC)."
                    },
                    "lastModifiedBy": {
                      "type": "string",
                      "description": "The identity that last modified the resource."
                    },
                    "lastModifiedByType": {
                      "type": "string",
                      "description": "The type of identity that last modified the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "lastModifiedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource last modification (UTC)"
                    }
                  }
                },
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "x-ms-mutability": [
                    "read",
                    "create",
                    "update"
                  ]
                },
                "location": {
                  "type": "string",
                  "description": "The geo-location where the resource lives",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ]
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "batching": {
                      "description": "The batching settings for kafka messages.",
                      "type": "object",
                      "properties": {
                        "enabled": {
                          "type": "boolean",
                          "description": "The setting to enable or disable batching.",
                          "default": false
                        },
                        "latencyMs": {
                          "type": "integer",
                          "format": "int32",
                          "description": "The latency of message batching.",
                          "default": 5,
                          "minimum": 0,
                          "maximum": 65535
                        },
                        "maxBytes": {
                          "type": "integer",
                          "format": "int64",
                          "description": "The maximum bytes to send in a batch.",
                          "default": 1000000,
                          "minimum": 0,
                          "maximum": 4294967295
                        },
                        "maxMessages": {
                          "type": "integer",
                          "format": "int64",
                          "description": "The maximum messages to send in a batch.",
                          "default": 100000,
                          "minimum": 0,
                          "maximum": 4294967295
                        }
                      }
                    },
                    "compression": {
                      "type": "string",
                      "description": "The compression to use for kafka messages.",
                      "default": "none",
                      "enum": [
                        "none",
                        "gzip",
                        "snappy",
                        "lz4"
                      ],
                      "x-ms-enum": {
                        "name": "KafkaMessageCompressionType",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "none",
                            "value": "none",
                            "description": "No Kafka message compression."
                          },
                          {
                            "name": "gzip",
                            "value": "gzip",
                            "description": "Gzip Kafka message compression."
                          },
                          {
                            "name": "snappy",
                            "value": "snappy",
                            "description": "Snappy Kafka message compression."
                          },
                          {
                            "name": "lz4",
                            "value": "lz4",
                            "description": "Lz4 Kafka message compression."
                          }
                        ]
                      }
                    },
                    "copyMqttProperties": {
                      "type": "string",
                      "description": "The flag to copy Mqtt properties."
                    },
                    "kafkaConnectorRef": {
                      "type": "string",
                      "description": "The kafkaConnector CRD it refers to."
                    },
                    "partitionKeyProperty": {
                      "type": "string",
                      "description": "The partition to use for Kafka."
                    },
                    "partitionStrategy": {
                      "type": "string",
                      "description": "The partition strategy to use for Kafka.",
                      "default": "default",
                      "enum": [
                        "default",
                        "static",
                        "topic",
                        "property"
                      ],
                      "x-ms-enum": {
                        "name": "KafkaPartitionStrategy",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "default",
                            "value": "default",
                            "description": "Default partition strategy."
                          },
                          {
                            "name": "static",
                            "value": "static",
                            "description": "Static partition strategy."
                          },
                          {
                            "name": "topic",
                            "value": "topic",
                            "description": "Topic partition strategy."
                          },
                          {
                            "name": "property",
                            "value": "property",
                            "description": "Property partition strategy."
                          }
                        ]
                      }
                    },
                    "routes": {
                      "type": "array",
                      "description": "The route details for Kafka connector.",
                      "items": {
                        "type": "object",
                        "description": "Kafka Routes properties. NOTE - Enum only one method is allowed to be passed.",
                        "properties": {
                          "kafkaToMqtt": {
                            "description": "Kafka to Mqtt route.",
                            "type": "object",
                            "properties": {
                              "consumerGroupId": {
                                "type": "string",
                                "description": "The consumer group id to use."
                              },
                              "kafkaTopic": {
                                "type": "string",
                                "description": "The kafka topic to pull from."
                              },
                              "mqttTopic": {
                                "type": "string",
                                "description": "The mqtt topic to publish to."
                              },
                              "name": {
                                "type": "string",
                                "description": "The name of the route."
                              },
                              "qos": {
                                "type": "integer",
                                "format": "int32",
                                "description": "The qos to use for mqtt.",
                                "default": 1,
                                "minimum": 0,
                                "maximum": 1
                              }
                            },
                            "required": [
                              "kafkaTopic",
                              "mqttTopic",
                              "name"
                            ]
                          },
                          "mqttToKafka": {
                            "description": "Mqtt to Kafka route.",
                            "type": "object",
                            "properties": {
                              "kafkaAcks": {
                                "description": "The kafka acks to use.",
                                "type": "string",
                                "enum": [
                                  "zero",
                                  "one",
                                  "all"
                                ],
                                "x-ms-enum": {
                                  "name": "KafkaAcks",
                                  "modelAsString": true,
                                  "values": [
                                    {
                                      "name": "zero",
                                      "value": "zero",
                                      "description": "Kafka acks zero."
                                    },
                                    {
                                      "name": "one",
                                      "value": "one",
                                      "description": "Kafka acks one."
                                    },
                                    {
                                      "name": "all",
                                      "value": "all",
                                      "description": "Kafka acks all."
                                    }
                                  ]
                                }
                              },
                              "kafkaTopic": {
                                "type": "string",
                                "description": "The kafka topic to publish to."
                              },
                              "mqttTopic": {
                                "type": "string",
                                "description": "The mqtt topic to pull from."
                              },
                              "name": {
                                "type": "string",
                                "description": "The name of the route."
                              },
                              "qos": {
                                "type": "integer",
                                "format": "int32",
                                "description": "The qos to use for mqtt.",
                                "default": 1,
                                "minimum": 0,
                                "maximum": 1
                              },
                              "sharedSubscription": {
                                "description": "The properties for shared subscription.",
                                "type": "object",
                                "properties": {
                                  "groupMinimumShareNumber": {
                                    "type": "integer",
                                    "format": "int32",
                                    "description": "The minimum number to use in a group for subscription.",
                                    "minimum": 0,
                                    "maximum": 255
                                  },
                                  "groupName": {
                                    "type": "string",
                                    "description": "The name of the shared subscription."
                                  }
                                },
                                "required": [
                                  "groupMinimumShareNumber",
                                  "groupName"
                                ]
                              }
                            },
                            "required": [
                              "kafkaAcks",
                              "kafkaTopic",
                              "mqttTopic",
                              "name"
                            ]
                          }
                        }
                      },
                      "x-ms-identifiers": []
                    },
                    "provisioningState": {
                      "description": "The status of the last operation.",
                      "readOnly": true,
                      "type": "string",
                      "enum": [
                        "Succeeded",
                        "Failed",
                        "Canceled",
                        "Provisioning",
                        "Updating",
                        "Deleting",
                        "Accepted"
                      ],
                      "x-ms-enum": {
                        "name": "ProvisioningState",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Succeeded",
                            "value": "Succeeded",
                            "description": "Resource has been created."
                          },
                          {
                            "name": "Failed",
                            "value": "Failed",
                            "description": "Resource creation failed."
                          },
                          {
                            "name": "Canceled",
                            "value": "Canceled",
                            "description": "Resource creation was canceled."
                          },
                          {
                            "name": "Provisioning",
                            "value": "Provisioning",
                            "description": "Resource is getting provisioned."
                          },
                          {
                            "name": "Updating",
                            "value": "Updating",
                            "description": "Resource is Updating."
                          },
                          {
                            "name": "Deleting",
                            "value": "Deleting",
                            "description": "Resource is Deleting."
                          },
                          {
                            "name": "Accepted",
                            "value": "Accepted",
                            "description": "Resource has been Accepted."
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "kafkaConnectorRef",
                    "routes"
                  ]
                },
                "extendedLocation": {
                  "description": "Extended Location",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ],
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The name of the extended location."
                    },
                    "type": {
                      "description": "Type of ExtendedLocation.",
                      "type": "string",
                      "enum": [
                        "CustomLocation"
                      ],
                      "x-ms-enum": {
                        "name": "ExtendedLocationType",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "CustomLocation",
                            "value": "CustomLocation",
                            "description": "CustomLocation type"
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "name",
                    "type"
                  ]
                }
              },
              "required": [
                "extendedLocation"
              ]
            }
          },
          "201": {
            "description": "Resource 'KafkaTopicMapResource' create operation succeeded",
            "schema": {
              "type": "object",
              "description": "MQ kafkaConnector/topicMap resource",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "description": "The name of the resource",
                  "readOnly": true
                },
                "type": {
                  "type": "string",
                  "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                  "readOnly": true
                },
                "systemData": {
                  "type": "object",
                  "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                  "readOnly": true,
                  "properties": {
                    "createdBy": {
                      "type": "string",
                      "description": "The identity that created the resource."
                    },
                    "createdByType": {
                      "type": "string",
                      "description": "The type of identity that created the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource creation (UTC)."
                    },
                    "lastModifiedBy": {
                      "type": "string",
                      "description": "The identity that last modified the resource."
                    },
                    "lastModifiedByType": {
                      "type": "string",
                      "description": "The type of identity that last modified the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "lastModifiedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource last modification (UTC)"
                    }
                  }
                },
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "x-ms-mutability": [
                    "read",
                    "create",
                    "update"
                  ]
                },
                "location": {
                  "type": "string",
                  "description": "The geo-location where the resource lives",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ]
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "batching": {
                      "description": "The batching settings for kafka messages.",
                      "type": "object",
                      "properties": {
                        "enabled": {
                          "type": "boolean",
                          "description": "The setting to enable or disable batching.",
                          "default": false
                        },
                        "latencyMs": {
                          "type": "integer",
                          "format": "int32",
                          "description": "The latency of message batching.",
                          "default": 5,
                          "minimum": 0,
                          "maximum": 65535
                        },
                        "maxBytes": {
                          "type": "integer",
                          "format": "int64",
                          "description": "The maximum bytes to send in a batch.",
                          "default": 1000000,
                          "minimum": 0,
                          "maximum": 4294967295
                        },
                        "maxMessages": {
                          "type": "integer",
                          "format": "int64",
                          "description": "The maximum messages to send in a batch.",
                          "default": 100000,
                          "minimum": 0,
                          "maximum": 4294967295
                        }
                      }
                    },
                    "compression": {
                      "type": "string",
                      "description": "The compression to use for kafka messages.",
                      "default": "none",
                      "enum": [
                        "none",
                        "gzip",
                        "snappy",
                        "lz4"
                      ],
                      "x-ms-enum": {
                        "name": "KafkaMessageCompressionType",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "none",
                            "value": "none",
                            "description": "No Kafka message compression."
                          },
                          {
                            "name": "gzip",
                            "value": "gzip",
                            "description": "Gzip Kafka message compression."
                          },
                          {
                            "name": "snappy",
                            "value": "snappy",
                            "description": "Snappy Kafka message compression."
                          },
                          {
                            "name": "lz4",
                            "value": "lz4",
                            "description": "Lz4 Kafka message compression."
                          }
                        ]
                      }
                    },
                    "copyMqttProperties": {
                      "type": "string",
                      "description": "The flag to copy Mqtt properties."
                    },
                    "kafkaConnectorRef": {
                      "type": "string",
                      "description": "The kafkaConnector CRD it refers to."
                    },
                    "partitionKeyProperty": {
                      "type": "string",
                      "description": "The partition to use for Kafka."
                    },
                    "partitionStrategy": {
                      "type": "string",
                      "description": "The partition strategy to use for Kafka.",
                      "default": "default",
                      "enum": [
                        "default",
                        "static",
                        "topic",
                        "property"
                      ],
                      "x-ms-enum": {
                        "name": "KafkaPartitionStrategy",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "default",
                            "value": "default",
                            "description": "Default partition strategy."
                          },
                          {
                            "name": "static",
                            "value": "static",
                            "description": "Static partition strategy."
                          },
                          {
                            "name": "topic",
                            "value": "topic",
                            "description": "Topic partition strategy."
                          },
                          {
                            "name": "property",
                            "value": "property",
                            "description": "Property partition strategy."
                          }
                        ]
                      }
                    },
                    "routes": {
                      "type": "array",
                      "description": "The route details for Kafka connector.",
                      "items": {
                        "type": "object",
                        "description": "Kafka Routes properties. NOTE - Enum only one method is allowed to be passed.",
                        "properties": {
                          "kafkaToMqtt": {
                            "description": "Kafka to Mqtt route.",
                            "type": "object",
                            "properties": {
                              "consumerGroupId": {
                                "type": "string",
                                "description": "The consumer group id to use."
                              },
                              "kafkaTopic": {
                                "type": "string",
                                "description": "The kafka topic to pull from."
                              },
                              "mqttTopic": {
                                "type": "string",
                                "description": "The mqtt topic to publish to."
                              },
                              "name": {
                                "type": "string",
                                "description": "The name of the route."
                              },
                              "qos": {
                                "type": "integer",
                                "format": "int32",
                                "description": "The qos to use for mqtt.",
                                "default": 1,
                                "minimum": 0,
                                "maximum": 1
                              }
                            },
                            "required": [
                              "kafkaTopic",
                              "mqttTopic",
                              "name"
                            ]
                          },
                          "mqttToKafka": {
                            "description": "Mqtt to Kafka route.",
                            "type": "object",
                            "properties": {
                              "kafkaAcks": {
                                "description": "The kafka acks to use.",
                                "type": "string",
                                "enum": [
                                  "zero",
                                  "one",
                                  "all"
                                ],
                                "x-ms-enum": {
                                  "name": "KafkaAcks",
                                  "modelAsString": true,
                                  "values": [
                                    {
                                      "name": "zero",
                                      "value": "zero",
                                      "description": "Kafka acks zero."
                                    },
                                    {
                                      "name": "one",
                                      "value": "one",
                                      "description": "Kafka acks one."
                                    },
                                    {
                                      "name": "all",
                                      "value": "all",
                                      "description": "Kafka acks all."
                                    }
                                  ]
                                }
                              },
                              "kafkaTopic": {
                                "type": "string",
                                "description": "The kafka topic to publish to."
                              },
                              "mqttTopic": {
                                "type": "string",
                                "description": "The mqtt topic to pull from."
                              },
                              "name": {
                                "type": "string",
                                "description": "The name of the route."
                              },
                              "qos": {
                                "type": "integer",
                                "format": "int32",
                                "description": "The qos to use for mqtt.",
                                "default": 1,
                                "minimum": 0,
                                "maximum": 1
                              },
                              "sharedSubscription": {
                                "description": "The properties for shared subscription.",
                                "type": "object",
                                "properties": {
                                  "groupMinimumShareNumber": {
                                    "type": "integer",
                                    "format": "int32",
                                    "description": "The minimum number to use in a group for subscription.",
                                    "minimum": 0,
                                    "maximum": 255
                                  },
                                  "groupName": {
                                    "type": "string",
                                    "description": "The name of the shared subscription."
                                  }
                                },
                                "required": [
                                  "groupMinimumShareNumber",
                                  "groupName"
                                ]
                              }
                            },
                            "required": [
                              "kafkaAcks",
                              "kafkaTopic",
                              "mqttTopic",
                              "name"
                            ]
                          }
                        }
                      },
                      "x-ms-identifiers": []
                    },
                    "provisioningState": {
                      "description": "The status of the last operation.",
                      "readOnly": true,
                      "type": "string",
                      "enum": [
                        "Succeeded",
                        "Failed",
                        "Canceled",
                        "Provisioning",
                        "Updating",
                        "Deleting",
                        "Accepted"
                      ],
                      "x-ms-enum": {
                        "name": "ProvisioningState",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Succeeded",
                            "value": "Succeeded",
                            "description": "Resource has been created."
                          },
                          {
                            "name": "Failed",
                            "value": "Failed",
                            "description": "Resource creation failed."
                          },
                          {
                            "name": "Canceled",
                            "value": "Canceled",
                            "description": "Resource creation was canceled."
                          },
                          {
                            "name": "Provisioning",
                            "value": "Provisioning",
                            "description": "Resource is getting provisioned."
                          },
                          {
                            "name": "Updating",
                            "value": "Updating",
                            "description": "Resource is Updating."
                          },
                          {
                            "name": "Deleting",
                            "value": "Deleting",
                            "description": "Resource is Deleting."
                          },
                          {
                            "name": "Accepted",
                            "value": "Accepted",
                            "description": "Resource has been Accepted."
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "kafkaConnectorRef",
                    "routes"
                  ]
                },
                "extendedLocation": {
                  "description": "Extended Location",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ],
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The name of the extended location."
                    },
                    "type": {
                      "description": "Type of ExtendedLocation.",
                      "type": "string",
                      "enum": [
                        "CustomLocation"
                      ],
                      "x-ms-enum": {
                        "name": "ExtendedLocationType",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "CustomLocation",
                            "value": "CustomLocation",
                            "description": "CustomLocation type"
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "name",
                    "type"
                  ]
                }
              },
              "required": [
                "extendedLocation"
              ]
            },
            "headers": {
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "KafkaConnectorTopicMap_Update",
        "tags": [
          "KafkaConnectorTopicMap"
        ],
        "description": "Update a KafkaTopicMapResource",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group. The name is case insensitive.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "x-ms-parameter-location": "method"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "kafkaConnectorName",
            "in": "path",
            "description": "Name of MQ kafkaConnector resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "topicMapName",
            "in": "path",
            "description": "Name of MQ kafka/topicMap resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "properties",
            "in": "body",
            "description": "The resource properties to be updated.",
            "required": true,
            "schema": {
              "type": "object",
              "description": "The type used for update operations of the KafkaTopicMapResource.",
              "properties": {
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "batching": {
                      "description": "The batching settings for kafka messages.",
                      "type": "object",
                      "properties": {
                        "enabled": {
                          "type": "boolean",
                          "description": "The setting to enable or disable batching.",
                          "default": false
                        },
                        "latencyMs": {
                          "type": "integer",
                          "format": "int32",
                          "description": "The latency of message batching.",
                          "default": 5,
                          "minimum": 0,
                          "maximum": 65535
                        },
                        "maxBytes": {
                          "type": "integer",
                          "format": "int64",
                          "description": "The maximum bytes to send in a batch.",
                          "default": 1000000,
                          "minimum": 0,
                          "maximum": 4294967295
                        },
                        "maxMessages": {
                          "type": "integer",
                          "format": "int64",
                          "description": "The maximum messages to send in a batch.",
                          "default": 100000,
                          "minimum": 0,
                          "maximum": 4294967295
                        }
                      }
                    },
                    "compression": {
                      "type": "string",
                      "description": "The compression to use for kafka messages.",
                      "default": "none",
                      "enum": [
                        "none",
                        "gzip",
                        "snappy",
                        "lz4"
                      ],
                      "x-ms-enum": {
                        "name": "KafkaMessageCompressionType",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "none",
                            "value": "none",
                            "description": "No Kafka message compression."
                          },
                          {
                            "name": "gzip",
                            "value": "gzip",
                            "description": "Gzip Kafka message compression."
                          },
                          {
                            "name": "snappy",
                            "value": "snappy",
                            "description": "Snappy Kafka message compression."
                          },
                          {
                            "name": "lz4",
                            "value": "lz4",
                            "description": "Lz4 Kafka message compression."
                          }
                        ]
                      }
                    },
                    "copyMqttProperties": {
                      "type": "string",
                      "description": "The flag to copy Mqtt properties."
                    },
                    "kafkaConnectorRef": {
                      "type": "string",
                      "description": "The kafkaConnector CRD it refers to."
                    },
                    "partitionKeyProperty": {
                      "type": "string",
                      "description": "The partition to use for Kafka."
                    },
                    "partitionStrategy": {
                      "type": "string",
                      "description": "The partition strategy to use for Kafka.",
                      "default": "default",
                      "enum": [
                        "default",
                        "static",
                        "topic",
                        "property"
                      ],
                      "x-ms-enum": {
                        "name": "KafkaPartitionStrategy",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "default",
                            "value": "default",
                            "description": "Default partition strategy."
                          },
                          {
                            "name": "static",
                            "value": "static",
                            "description": "Static partition strategy."
                          },
                          {
                            "name": "topic",
                            "value": "topic",
                            "description": "Topic partition strategy."
                          },
                          {
                            "name": "property",
                            "value": "property",
                            "description": "Property partition strategy."
                          }
                        ]
                      }
                    },
                    "routes": {
                      "type": "array",
                      "description": "The route details for Kafka connector.",
                      "items": {
                        "type": "object",
                        "description": "Kafka Routes properties. NOTE - Enum only one method is allowed to be passed.",
                        "properties": {
                          "kafkaToMqtt": {
                            "description": "Kafka to Mqtt route.",
                            "type": "object",
                            "properties": {
                              "consumerGroupId": {
                                "type": "string",
                                "description": "The consumer group id to use."
                              },
                              "kafkaTopic": {
                                "type": "string",
                                "description": "The kafka topic to pull from."
                              },
                              "mqttTopic": {
                                "type": "string",
                                "description": "The mqtt topic to publish to."
                              },
                              "name": {
                                "type": "string",
                                "description": "The name of the route."
                              },
                              "qos": {
                                "type": "integer",
                                "format": "int32",
                                "description": "The qos to use for mqtt.",
                                "default": 1,
                                "minimum": 0,
                                "maximum": 1
                              }
                            },
                            "required": [
                              "kafkaTopic",
                              "mqttTopic",
                              "name"
                            ]
                          },
                          "mqttToKafka": {
                            "description": "Mqtt to Kafka route.",
                            "type": "object",
                            "properties": {
                              "kafkaAcks": {
                                "description": "The kafka acks to use.",
                                "type": "string",
                                "enum": [
                                  "zero",
                                  "one",
                                  "all"
                                ],
                                "x-ms-enum": {
                                  "name": "KafkaAcks",
                                  "modelAsString": true,
                                  "values": [
                                    {
                                      "name": "zero",
                                      "value": "zero",
                                      "description": "Kafka acks zero."
                                    },
                                    {
                                      "name": "one",
                                      "value": "one",
                                      "description": "Kafka acks one."
                                    },
                                    {
                                      "name": "all",
                                      "value": "all",
                                      "description": "Kafka acks all."
                                    }
                                  ]
                                }
                              },
                              "kafkaTopic": {
                                "type": "string",
                                "description": "The kafka topic to publish to."
                              },
                              "mqttTopic": {
                                "type": "string",
                                "description": "The mqtt topic to pull from."
                              },
                              "name": {
                                "type": "string",
                                "description": "The name of the route."
                              },
                              "qos": {
                                "type": "integer",
                                "format": "int32",
                                "description": "The qos to use for mqtt.",
                                "default": 1,
                                "minimum": 0,
                                "maximum": 1
                              },
                              "sharedSubscription": {
                                "description": "The properties for shared subscription.",
                                "type": "object",
                                "properties": {
                                  "groupMinimumShareNumber": {
                                    "type": "integer",
                                    "format": "int32",
                                    "description": "The minimum number to use in a group for subscription.",
                                    "minimum": 0,
                                    "maximum": 255
                                  },
                                  "groupName": {
                                    "type": "string",
                                    "description": "The name of the shared subscription."
                                  }
                                },
                                "required": [
                                  "groupMinimumShareNumber",
                                  "groupName"
                                ]
                              }
                            },
                            "required": [
                              "kafkaAcks",
                              "kafkaTopic",
                              "mqttTopic",
                              "name"
                            ]
                          }
                        }
                      },
                      "x-ms-identifiers": []
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "type": "object",
              "description": "MQ kafkaConnector/topicMap resource",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "description": "The name of the resource",
                  "readOnly": true
                },
                "type": {
                  "type": "string",
                  "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                  "readOnly": true
                },
                "systemData": {
                  "type": "object",
                  "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                  "readOnly": true,
                  "properties": {
                    "createdBy": {
                      "type": "string",
                      "description": "The identity that created the resource."
                    },
                    "createdByType": {
                      "type": "string",
                      "description": "The type of identity that created the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource creation (UTC)."
                    },
                    "lastModifiedBy": {
                      "type": "string",
                      "description": "The identity that last modified the resource."
                    },
                    "lastModifiedByType": {
                      "type": "string",
                      "description": "The type of identity that last modified the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "lastModifiedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource last modification (UTC)"
                    }
                  }
                },
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "x-ms-mutability": [
                    "read",
                    "create",
                    "update"
                  ]
                },
                "location": {
                  "type": "string",
                  "description": "The geo-location where the resource lives",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ]
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "batching": {
                      "description": "The batching settings for kafka messages.",
                      "type": "object",
                      "properties": {
                        "enabled": {
                          "type": "boolean",
                          "description": "The setting to enable or disable batching.",
                          "default": false
                        },
                        "latencyMs": {
                          "type": "integer",
                          "format": "int32",
                          "description": "The latency of message batching.",
                          "default": 5,
                          "minimum": 0,
                          "maximum": 65535
                        },
                        "maxBytes": {
                          "type": "integer",
                          "format": "int64",
                          "description": "The maximum bytes to send in a batch.",
                          "default": 1000000,
                          "minimum": 0,
                          "maximum": 4294967295
                        },
                        "maxMessages": {
                          "type": "integer",
                          "format": "int64",
                          "description": "The maximum messages to send in a batch.",
                          "default": 100000,
                          "minimum": 0,
                          "maximum": 4294967295
                        }
                      }
                    },
                    "compression": {
                      "type": "string",
                      "description": "The compression to use for kafka messages.",
                      "default": "none",
                      "enum": [
                        "none",
                        "gzip",
                        "snappy",
                        "lz4"
                      ],
                      "x-ms-enum": {
                        "name": "KafkaMessageCompressionType",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "none",
                            "value": "none",
                            "description": "No Kafka message compression."
                          },
                          {
                            "name": "gzip",
                            "value": "gzip",
                            "description": "Gzip Kafka message compression."
                          },
                          {
                            "name": "snappy",
                            "value": "snappy",
                            "description": "Snappy Kafka message compression."
                          },
                          {
                            "name": "lz4",
                            "value": "lz4",
                            "description": "Lz4 Kafka message compression."
                          }
                        ]
                      }
                    },
                    "copyMqttProperties": {
                      "type": "string",
                      "description": "The flag to copy Mqtt properties."
                    },
                    "kafkaConnectorRef": {
                      "type": "string",
                      "description": "The kafkaConnector CRD it refers to."
                    },
                    "partitionKeyProperty": {
                      "type": "string",
                      "description": "The partition to use for Kafka."
                    },
                    "partitionStrategy": {
                      "type": "string",
                      "description": "The partition strategy to use for Kafka.",
                      "default": "default",
                      "enum": [
                        "default",
                        "static",
                        "topic",
                        "property"
                      ],
                      "x-ms-enum": {
                        "name": "KafkaPartitionStrategy",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "default",
                            "value": "default",
                            "description": "Default partition strategy."
                          },
                          {
                            "name": "static",
                            "value": "static",
                            "description": "Static partition strategy."
                          },
                          {
                            "name": "topic",
                            "value": "topic",
                            "description": "Topic partition strategy."
                          },
                          {
                            "name": "property",
                            "value": "property",
                            "description": "Property partition strategy."
                          }
                        ]
                      }
                    },
                    "routes": {
                      "type": "array",
                      "description": "The route details for Kafka connector.",
                      "items": {
                        "type": "object",
                        "description": "Kafka Routes properties. NOTE - Enum only one method is allowed to be passed.",
                        "properties": {
                          "kafkaToMqtt": {
                            "description": "Kafka to Mqtt route.",
                            "type": "object",
                            "properties": {
                              "consumerGroupId": {
                                "type": "string",
                                "description": "The consumer group id to use."
                              },
                              "kafkaTopic": {
                                "type": "string",
                                "description": "The kafka topic to pull from."
                              },
                              "mqttTopic": {
                                "type": "string",
                                "description": "The mqtt topic to publish to."
                              },
                              "name": {
                                "type": "string",
                                "description": "The name of the route."
                              },
                              "qos": {
                                "type": "integer",
                                "format": "int32",
                                "description": "The qos to use for mqtt.",
                                "default": 1,
                                "minimum": 0,
                                "maximum": 1
                              }
                            },
                            "required": [
                              "kafkaTopic",
                              "mqttTopic",
                              "name"
                            ]
                          },
                          "mqttToKafka": {
                            "description": "Mqtt to Kafka route.",
                            "type": "object",
                            "properties": {
                              "kafkaAcks": {
                                "description": "The kafka acks to use.",
                                "type": "string",
                                "enum": [
                                  "zero",
                                  "one",
                                  "all"
                                ],
                                "x-ms-enum": {
                                  "name": "KafkaAcks",
                                  "modelAsString": true,
                                  "values": [
                                    {
                                      "name": "zero",
                                      "value": "zero",
                                      "description": "Kafka acks zero."
                                    },
                                    {
                                      "name": "one",
                                      "value": "one",
                                      "description": "Kafka acks one."
                                    },
                                    {
                                      "name": "all",
                                      "value": "all",
                                      "description": "Kafka acks all."
                                    }
                                  ]
                                }
                              },
                              "kafkaTopic": {
                                "type": "string",
                                "description": "The kafka topic to publish to."
                              },
                              "mqttTopic": {
                                "type": "string",
                                "description": "The mqtt topic to pull from."
                              },
                              "name": {
                                "type": "string",
                                "description": "The name of the route."
                              },
                              "qos": {
                                "type": "integer",
                                "format": "int32",
                                "description": "The qos to use for mqtt.",
                                "default": 1,
                                "minimum": 0,
                                "maximum": 1
                              },
                              "sharedSubscription": {
                                "description": "The properties for shared subscription.",
                                "type": "object",
                                "properties": {
                                  "groupMinimumShareNumber": {
                                    "type": "integer",
                                    "format": "int32",
                                    "description": "The minimum number to use in a group for subscription.",
                                    "minimum": 0,
                                    "maximum": 255
                                  },
                                  "groupName": {
                                    "type": "string",
                                    "description": "The name of the shared subscription."
                                  }
                                },
                                "required": [
                                  "groupMinimumShareNumber",
                                  "groupName"
                                ]
                              }
                            },
                            "required": [
                              "kafkaAcks",
                              "kafkaTopic",
                              "mqttTopic",
                              "name"
                            ]
                          }
                        }
                      },
                      "x-ms-identifiers": []
                    },
                    "provisioningState": {
                      "description": "The status of the last operation.",
                      "readOnly": true,
                      "type": "string",
                      "enum": [
                        "Succeeded",
                        "Failed",
                        "Canceled",
                        "Provisioning",
                        "Updating",
                        "Deleting",
                        "Accepted"
                      ],
                      "x-ms-enum": {
                        "name": "ProvisioningState",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Succeeded",
                            "value": "Succeeded",
                            "description": "Resource has been created."
                          },
                          {
                            "name": "Failed",
                            "value": "Failed",
                            "description": "Resource creation failed."
                          },
                          {
                            "name": "Canceled",
                            "value": "Canceled",
                            "description": "Resource creation was canceled."
                          },
                          {
                            "name": "Provisioning",
                            "value": "Provisioning",
                            "description": "Resource is getting provisioned."
                          },
                          {
                            "name": "Updating",
                            "value": "Updating",
                            "description": "Resource is Updating."
                          },
                          {
                            "name": "Deleting",
                            "value": "Deleting",
                            "description": "Resource is Deleting."
                          },
                          {
                            "name": "Accepted",
                            "value": "Accepted",
                            "description": "Resource has been Accepted."
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "kafkaConnectorRef",
                    "routes"
                  ]
                },
                "extendedLocation": {
                  "description": "Extended Location",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ],
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The name of the extended location."
                    },
                    "type": {
                      "description": "Type of ExtendedLocation.",
                      "type": "string",
                      "enum": [
                        "CustomLocation"
                      ],
                      "x-ms-enum": {
                        "name": "ExtendedLocationType",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "CustomLocation",
                            "value": "CustomLocation",
                            "description": "CustomLocation type"
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "name",
                    "type"
                  ]
                }
              },
              "required": [
                "extendedLocation"
              ]
            }
          }
        }
      },
      "delete": {
        "operationId": "KafkaConnectorTopicMap_Delete",
        "tags": [
          "KafkaConnectorTopicMap"
        ],
        "description": "Delete a KafkaTopicMapResource",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group. The name is case insensitive.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "x-ms-parameter-location": "method"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "kafkaConnectorName",
            "in": "path",
            "description": "Name of MQ kafkaConnector resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "topicMapName",
            "in": "path",
            "description": "Name of MQ kafka/topicMap resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          }
        ],
        "responses": {
          "202": {
            "description": "Resource deletion accepted.",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              },
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "204": {
            "description": "Resource does not exist."
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTOperationsMQ/mq/{mqName}/mqttBridgeConnector": {
      "get": {
        "operationId": "MqttBridgeConnector_ListByMqResource",
        "tags": [
          "MqttBridgeConnector"
        ],
        "description": "List MqttBridgeConnectorResource resources by MqResource",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group. The name is case insensitive.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "x-ms-parameter-location": "method"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "type": "object",
              "description": "The response of a MqttBridgeConnectorResource list operation.",
              "properties": {
                "value": {
                  "type": "array",
                  "description": "The MqttBridgeConnectorResource items on this page",
                  "items": {
                    "type": "object",
                    "description": "MQ mqttBridgeConnector resource",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                        "readOnly": true
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the resource",
                        "readOnly": true
                      },
                      "type": {
                        "type": "string",
                        "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                        "readOnly": true
                      },
                      "systemData": {
                        "type": "object",
                        "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                        "readOnly": true,
                        "properties": {
                          "createdBy": {
                            "type": "string",
                            "description": "The identity that created the resource."
                          },
                          "createdByType": {
                            "type": "string",
                            "description": "The type of identity that created the resource.",
                            "enum": [
                              "User",
                              "Application",
                              "ManagedIdentity",
                              "Key"
                            ],
                            "x-ms-enum": {
                              "name": "createdByType",
                              "modelAsString": true
                            }
                          },
                          "createdAt": {
                            "type": "string",
                            "format": "date-time",
                            "description": "The timestamp of resource creation (UTC)."
                          },
                          "lastModifiedBy": {
                            "type": "string",
                            "description": "The identity that last modified the resource."
                          },
                          "lastModifiedByType": {
                            "type": "string",
                            "description": "The type of identity that last modified the resource.",
                            "enum": [
                              "User",
                              "Application",
                              "ManagedIdentity",
                              "Key"
                            ],
                            "x-ms-enum": {
                              "name": "createdByType",
                              "modelAsString": true
                            }
                          },
                          "lastModifiedAt": {
                            "type": "string",
                            "format": "date-time",
                            "description": "The timestamp of resource last modification (UTC)"
                          }
                        }
                      },
                      "tags": {
                        "type": "object",
                        "description": "Resource tags.",
                        "additionalProperties": {
                          "type": "string"
                        },
                        "x-ms-mutability": [
                          "read",
                          "create",
                          "update"
                        ]
                      },
                      "location": {
                        "type": "string",
                        "description": "The geo-location where the resource lives",
                        "x-ms-mutability": [
                          "read",
                          "create"
                        ]
                      },
                      "properties": {
                        "description": "The resource-specific properties for this resource.",
                        "x-ms-client-flatten": true,
                        "type": "object",
                        "properties": {
                          "bridgeInstances": {
                            "type": "integer",
                            "format": "int32",
                            "description": "The number of instances to deploy for a bridge rollout.",
                            "minimum": 0,
                            "maximum": 65535
                          },
                          "clientIdPrefix": {
                            "type": "string",
                            "description": "The client id prefix of the dynamically generated client ids."
                          },
                          "image": {
                            "description": "The details of MqttBridge Docker Image.",
                            "type": "object",
                            "properties": {
                              "pullPolicy": {
                                "type": "string",
                                "description": "Image pull policy."
                              },
                              "pullSecrets": {
                                "type": "string",
                                "description": "Image pull secrets."
                              },
                              "repository": {
                                "type": "string",
                                "description": "The Docker image name."
                              },
                              "tag": {
                                "type": "string",
                                "description": "The Docker  image tag."
                              }
                            },
                            "required": [
                              "repository",
                              "tag"
                            ]
                          },
                          "localBrokerConnection": {
                            "description": "The details for connecting with Local Broker.",
                            "type": "object",
                            "properties": {
                              "authentication": {
                                "description": "The authentication methods for LocalBroker connection. NOTE - Enum only one method at a time is supported.",
                                "type": "object",
                                "properties": {
                                  "kubernetes": {
                                    "description": "Kubernetes local broker authentication method.",
                                    "type": "object",
                                    "properties": {
                                      "secretPath": {
                                        "type": "string",
                                        "description": "Secret Path where SAT is mounted.",
                                        "default": "/var/run/serviceaccount/localbroker"
                                      },
                                      "serviceAccountTokenName": {
                                        "type": "string",
                                        "description": "Token name where SAT is mounted on secret path.",
                                        "default": "sat"
                                      }
                                    }
                                  }
                                },
                                "required": [
                                  "kubernetes"
                                ]
                              },
                              "endpoint": {
                                "type": "string",
                                "description": "The endpoint of local broker to connect to.",
                                "default": "aio-mq-dmqtt-frontend:1883"
                              },
                              "tls": {
                                "description": "TLS details for Local broker Connection.",
                                "type": "object",
                                "properties": {
                                  "tlsEnabled": {
                                    "type": "boolean",
                                    "description": "Tls Enabled on Local Broker Connection.",
                                    "default": false
                                  },
                                  "trustedCaCertificateConfigMap": {
                                    "type": "string",
                                    "description": "Trusted CA certificate config map name for Local Broker."
                                  }
                                }
                              }
                            }
                          },
                          "logLevel": {
                            "type": "string",
                            "description": "The log level of the Bridge Connector instances."
                          },
                          "nodeTolerations": {
                            "description": "The Node Tolerations for the Bridge Connector pods.",
                            "type": "object",
                            "properties": {
                              "effect": {
                                "type": "string",
                                "description": "Toleration effect."
                              },
                              "key": {
                                "type": "string",
                                "description": "Toleration key."
                              },
                              "operator": {
                                "type": "string",
                                "description": "Toleration operator like 'Exists', 'Equal' etc."
                              },
                              "value": {
                                "type": "string",
                                "description": "Toleration Value."
                              }
                            },
                            "required": [
                              "effect",
                              "key",
                              "operator",
                              "value"
                            ]
                          },
                          "protocol": {
                            "description": "The protocol to use for connecting with Brokers.",
                            "type": "string",
                            "enum": [
                              "v3",
                              "v5"
                            ],
                            "x-ms-enum": {
                              "name": "MqttProtocol",
                              "modelAsString": true,
                              "values": [
                                {
                                  "name": "v3",
                                  "value": "v3",
                                  "description": "Mqttv3"
                                },
                                {
                                  "name": "v5",
                                  "value": "v5",
                                  "description": "Mqttv5"
                                }
                              ]
                            }
                          },
                          "provisioningState": {
                            "description": "The status of the last operation.",
                            "readOnly": true,
                            "type": "string",
                            "enum": [
                              "Succeeded",
                              "Failed",
                              "Canceled",
                              "Provisioning",
                              "Updating",
                              "Deleting",
                              "Accepted"
                            ],
                            "x-ms-enum": {
                              "name": "ProvisioningState",
                              "modelAsString": true,
                              "values": [
                                {
                                  "name": "Succeeded",
                                  "value": "Succeeded",
                                  "description": "Resource has been created."
                                },
                                {
                                  "name": "Failed",
                                  "value": "Failed",
                                  "description": "Resource creation failed."
                                },
                                {
                                  "name": "Canceled",
                                  "value": "Canceled",
                                  "description": "Resource creation was canceled."
                                },
                                {
                                  "name": "Provisioning",
                                  "value": "Provisioning",
                                  "description": "Resource is getting provisioned."
                                },
                                {
                                  "name": "Updating",
                                  "value": "Updating",
                                  "description": "Resource is Updating."
                                },
                                {
                                  "name": "Deleting",
                                  "value": "Deleting",
                                  "description": "Resource is Deleting."
                                },
                                {
                                  "name": "Accepted",
                                  "value": "Accepted",
                                  "description": "Resource has been Accepted."
                                }
                              ]
                            }
                          },
                          "remoteBrokerConnection": {
                            "description": "The details for connecting with Remote Broker.",
                            "type": "object",
                            "properties": {
                              "authentication": {
                                "description": "The remote broker authentication methods. NOTE - Enum only one method is allowed to be passed.",
                                "type": "object",
                                "properties": {
                                  "x509": {
                                    "description": "X509 remote broker authentication method.",
                                    "type": "object",
                                    "properties": {
                                      "keyVault": {
                                        "description": "Keyvault X509 secret properties.",
                                        "type": "object",
                                        "properties": {
                                          "vault": {
                                            "description": "KeyVault properties.",
                                            "type": "object",
                                            "properties": {
                                              "credentials": {
                                                "description": "KeyVault credentials.",
                                                "type": "object",
                                                "properties": {
                                                  "servicePrincipalLocalSecretName": {
                                                    "type": "string",
                                                    "description": "KeyVault service principal local secret name."
                                                  }
                                                },
                                                "required": [
                                                  "servicePrincipalLocalSecretName"
                                                ]
                                              },
                                              "directoryId": {
                                                "type": "string",
                                                "description": "KeyVault directoryId."
                                              },
                                              "name": {
                                                "type": "string",
                                                "description": "KeyVault name."
                                              }
                                            },
                                            "required": [
                                              "credentials",
                                              "directoryId",
                                              "name"
                                            ]
                                          },
                                          "vaultCaChainSecret": {
                                            "description": "KeyVault CA chain secret details.",
                                            "type": "object",
                                            "properties": {
                                              "name": {
                                                "type": "string",
                                                "description": "KeyVault secret name."
                                              },
                                              "version": {
                                                "type": "string",
                                                "description": "KeyVault secret version."
                                              }
                                            },
                                            "required": [
                                              "name"
                                            ]
                                          },
                                          "vaultCert": {
                                            "description": "KeyVault Cert secret details.",
                                            "type": "object",
                                            "properties": {
                                              "name": {
                                                "type": "string",
                                                "description": "KeyVault secret name."
                                              },
                                              "version": {
                                                "type": "string",
                                                "description": "KeyVault secret version."
                                              }
                                            },
                                            "required": [
                                              "name"
                                            ]
                                          }
                                        },
                                        "required": [
                                          "vault",
                                          "vaultCert"
                                        ]
                                      },
                                      "secretName": {
                                        "type": "string",
                                        "description": "Secret where cert details are stored."
                                      }
                                    }
                                  },
                                  "systemAssignedManagedIdentity": {
                                    "description": "Managed identity remote broker authentication method.",
                                    "type": "object",
                                    "properties": {
                                      "audience": {
                                        "type": "string",
                                        "description": "Token audience."
                                      },
                                      "extensionName": {
                                        "type": "string",
                                        "description": "Arc Extension name."
                                      }
                                    },
                                    "required": [
                                      "audience"
                                    ]
                                  }
                                }
                              },
                              "endpoint": {
                                "type": "string",
                                "description": "The endpoint of remote broker to connect to."
                              },
                              "protocol": {
                                "type": "string",
                                "description": "Protocol for remote connection.",
                                "default": "mqtt",
                                "enum": [
                                  "mqtt",
                                  "webSocket"
                                ],
                                "x-ms-enum": {
                                  "name": "MqttBridgeRemoteBrokerProtocol",
                                  "modelAsString": true,
                                  "values": [
                                    {
                                      "name": "mqtt",
                                      "value": "mqtt",
                                      "description": "MQTT protocol."
                                    },
                                    {
                                      "name": "webSocket",
                                      "value": "webSocket",
                                      "description": "MQTT over WebSocket protocol."
                                    }
                                  ]
                                }
                              },
                              "tls": {
                                "description": "TLS details for Remote broker Connection.",
                                "type": "object",
                                "properties": {
                                  "tlsEnabled": {
                                    "type": "boolean",
                                    "description": "Tls Enabled on Remote Broker Connection."
                                  },
                                  "trustedCaCertificateConfigMap": {
                                    "type": "string",
                                    "description": "Trusted CA certificate name for Remote Broker."
                                  }
                                },
                                "required": [
                                  "tlsEnabled"
                                ]
                              }
                            },
                            "required": [
                              "authentication",
                              "endpoint",
                              "tls"
                            ]
                          }
                        },
                        "required": [
                          "image",
                          "protocol",
                          "remoteBrokerConnection"
                        ]
                      },
                      "extendedLocation": {
                        "description": "Extended Location",
                        "x-ms-mutability": [
                          "read",
                          "create"
                        ],
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "The name of the extended location."
                          },
                          "type": {
                            "description": "Type of ExtendedLocation.",
                            "type": "string",
                            "enum": [
                              "CustomLocation"
                            ],
                            "x-ms-enum": {
                              "name": "ExtendedLocationType",
                              "modelAsString": true,
                              "values": [
                                {
                                  "name": "CustomLocation",
                                  "value": "CustomLocation",
                                  "description": "CustomLocation type"
                                }
                              ]
                            }
                          }
                        },
                        "required": [
                          "name",
                          "type"
                        ]
                      }
                    },
                    "required": [
                      "extendedLocation"
                    ]
                  }
                },
                "nextLink": {
                  "type": "string",
                  "format": "uri",
                  "description": "The link to the next page of items"
                }
              },
              "required": [
                "value"
              ]
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTOperationsMQ/mq/{mqName}/mqttBridgeConnector/{mqttBridgeConnectorName}": {
      "get": {
        "operationId": "MqttBridgeConnector_Get",
        "tags": [
          "MqttBridgeConnector"
        ],
        "description": "Get a MqttBridgeConnectorResource",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group. The name is case insensitive.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "x-ms-parameter-location": "method"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "mqttBridgeConnectorName",
            "in": "path",
            "description": "Name of MQ mqttBridgeConnector resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "type": "object",
              "description": "MQ mqttBridgeConnector resource",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "description": "The name of the resource",
                  "readOnly": true
                },
                "type": {
                  "type": "string",
                  "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                  "readOnly": true
                },
                "systemData": {
                  "type": "object",
                  "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                  "readOnly": true,
                  "properties": {
                    "createdBy": {
                      "type": "string",
                      "description": "The identity that created the resource."
                    },
                    "createdByType": {
                      "type": "string",
                      "description": "The type of identity that created the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource creation (UTC)."
                    },
                    "lastModifiedBy": {
                      "type": "string",
                      "description": "The identity that last modified the resource."
                    },
                    "lastModifiedByType": {
                      "type": "string",
                      "description": "The type of identity that last modified the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "lastModifiedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource last modification (UTC)"
                    }
                  }
                },
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "x-ms-mutability": [
                    "read",
                    "create",
                    "update"
                  ]
                },
                "location": {
                  "type": "string",
                  "description": "The geo-location where the resource lives",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ]
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "bridgeInstances": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The number of instances to deploy for a bridge rollout.",
                      "minimum": 0,
                      "maximum": 65535
                    },
                    "clientIdPrefix": {
                      "type": "string",
                      "description": "The client id prefix of the dynamically generated client ids."
                    },
                    "image": {
                      "description": "The details of MqttBridge Docker Image.",
                      "type": "object",
                      "properties": {
                        "pullPolicy": {
                          "type": "string",
                          "description": "Image pull policy."
                        },
                        "pullSecrets": {
                          "type": "string",
                          "description": "Image pull secrets."
                        },
                        "repository": {
                          "type": "string",
                          "description": "The Docker image name."
                        },
                        "tag": {
                          "type": "string",
                          "description": "The Docker  image tag."
                        }
                      },
                      "required": [
                        "repository",
                        "tag"
                      ]
                    },
                    "localBrokerConnection": {
                      "description": "The details for connecting with Local Broker.",
                      "type": "object",
                      "properties": {
                        "authentication": {
                          "description": "The authentication methods for LocalBroker connection. NOTE - Enum only one method at a time is supported.",
                          "type": "object",
                          "properties": {
                            "kubernetes": {
                              "description": "Kubernetes local broker authentication method.",
                              "type": "object",
                              "properties": {
                                "secretPath": {
                                  "type": "string",
                                  "description": "Secret Path where SAT is mounted.",
                                  "default": "/var/run/serviceaccount/localbroker"
                                },
                                "serviceAccountTokenName": {
                                  "type": "string",
                                  "description": "Token name where SAT is mounted on secret path.",
                                  "default": "sat"
                                }
                              }
                            }
                          },
                          "required": [
                            "kubernetes"
                          ]
                        },
                        "endpoint": {
                          "type": "string",
                          "description": "The endpoint of local broker to connect to.",
                          "default": "aio-mq-dmqtt-frontend:1883"
                        },
                        "tls": {
                          "description": "TLS details for Local broker Connection.",
                          "type": "object",
                          "properties": {
                            "tlsEnabled": {
                              "type": "boolean",
                              "description": "Tls Enabled on Local Broker Connection.",
                              "default": false
                            },
                            "trustedCaCertificateConfigMap": {
                              "type": "string",
                              "description": "Trusted CA certificate config map name for Local Broker."
                            }
                          }
                        }
                      }
                    },
                    "logLevel": {
                      "type": "string",
                      "description": "The log level of the Bridge Connector instances."
                    },
                    "nodeTolerations": {
                      "description": "The Node Tolerations for the Bridge Connector pods.",
                      "type": "object",
                      "properties": {
                        "effect": {
                          "type": "string",
                          "description": "Toleration effect."
                        },
                        "key": {
                          "type": "string",
                          "description": "Toleration key."
                        },
                        "operator": {
                          "type": "string",
                          "description": "Toleration operator like 'Exists', 'Equal' etc."
                        },
                        "value": {
                          "type": "string",
                          "description": "Toleration Value."
                        }
                      },
                      "required": [
                        "effect",
                        "key",
                        "operator",
                        "value"
                      ]
                    },
                    "protocol": {
                      "description": "The protocol to use for connecting with Brokers.",
                      "type": "string",
                      "enum": [
                        "v3",
                        "v5"
                      ],
                      "x-ms-enum": {
                        "name": "MqttProtocol",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "v3",
                            "value": "v3",
                            "description": "Mqttv3"
                          },
                          {
                            "name": "v5",
                            "value": "v5",
                            "description": "Mqttv5"
                          }
                        ]
                      }
                    },
                    "provisioningState": {
                      "description": "The status of the last operation.",
                      "readOnly": true,
                      "type": "string",
                      "enum": [
                        "Succeeded",
                        "Failed",
                        "Canceled",
                        "Provisioning",
                        "Updating",
                        "Deleting",
                        "Accepted"
                      ],
                      "x-ms-enum": {
                        "name": "ProvisioningState",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Succeeded",
                            "value": "Succeeded",
                            "description": "Resource has been created."
                          },
                          {
                            "name": "Failed",
                            "value": "Failed",
                            "description": "Resource creation failed."
                          },
                          {
                            "name": "Canceled",
                            "value": "Canceled",
                            "description": "Resource creation was canceled."
                          },
                          {
                            "name": "Provisioning",
                            "value": "Provisioning",
                            "description": "Resource is getting provisioned."
                          },
                          {
                            "name": "Updating",
                            "value": "Updating",
                            "description": "Resource is Updating."
                          },
                          {
                            "name": "Deleting",
                            "value": "Deleting",
                            "description": "Resource is Deleting."
                          },
                          {
                            "name": "Accepted",
                            "value": "Accepted",
                            "description": "Resource has been Accepted."
                          }
                        ]
                      }
                    },
                    "remoteBrokerConnection": {
                      "description": "The details for connecting with Remote Broker.",
                      "type": "object",
                      "properties": {
                        "authentication": {
                          "description": "The remote broker authentication methods. NOTE - Enum only one method is allowed to be passed.",
                          "type": "object",
                          "properties": {
                            "x509": {
                              "description": "X509 remote broker authentication method.",
                              "type": "object",
                              "properties": {
                                "keyVault": {
                                  "description": "Keyvault X509 secret properties.",
                                  "type": "object",
                                  "properties": {
                                    "vault": {
                                      "description": "KeyVault properties.",
                                      "type": "object",
                                      "properties": {
                                        "credentials": {
                                          "description": "KeyVault credentials.",
                                          "type": "object",
                                          "properties": {
                                            "servicePrincipalLocalSecretName": {
                                              "type": "string",
                                              "description": "KeyVault service principal local secret name."
                                            }
                                          },
                                          "required": [
                                            "servicePrincipalLocalSecretName"
                                          ]
                                        },
                                        "directoryId": {
                                          "type": "string",
                                          "description": "KeyVault directoryId."
                                        },
                                        "name": {
                                          "type": "string",
                                          "description": "KeyVault name."
                                        }
                                      },
                                      "required": [
                                        "credentials",
                                        "directoryId",
                                        "name"
                                      ]
                                    },
                                    "vaultCaChainSecret": {
                                      "description": "KeyVault CA chain secret details.",
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "description": "KeyVault secret name."
                                        },
                                        "version": {
                                          "type": "string",
                                          "description": "KeyVault secret version."
                                        }
                                      },
                                      "required": [
                                        "name"
                                      ]
                                    },
                                    "vaultCert": {
                                      "description": "KeyVault Cert secret details.",
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "description": "KeyVault secret name."
                                        },
                                        "version": {
                                          "type": "string",
                                          "description": "KeyVault secret version."
                                        }
                                      },
                                      "required": [
                                        "name"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "vault",
                                    "vaultCert"
                                  ]
                                },
                                "secretName": {
                                  "type": "string",
                                  "description": "Secret where cert details are stored."
                                }
                              }
                            },
                            "systemAssignedManagedIdentity": {
                              "description": "Managed identity remote broker authentication method.",
                              "type": "object",
                              "properties": {
                                "audience": {
                                  "type": "string",
                                  "description": "Token audience."
                                },
                                "extensionName": {
                                  "type": "string",
                                  "description": "Arc Extension name."
                                }
                              },
                              "required": [
                                "audience"
                              ]
                            }
                          }
                        },
                        "endpoint": {
                          "type": "string",
                          "description": "The endpoint of remote broker to connect to."
                        },
                        "protocol": {
                          "type": "string",
                          "description": "Protocol for remote connection.",
                          "default": "mqtt",
                          "enum": [
                            "mqtt",
                            "webSocket"
                          ],
                          "x-ms-enum": {
                            "name": "MqttBridgeRemoteBrokerProtocol",
                            "modelAsString": true,
                            "values": [
                              {
                                "name": "mqtt",
                                "value": "mqtt",
                                "description": "MQTT protocol."
                              },
                              {
                                "name": "webSocket",
                                "value": "webSocket",
                                "description": "MQTT over WebSocket protocol."
                              }
                            ]
                          }
                        },
                        "tls": {
                          "description": "TLS details for Remote broker Connection.",
                          "type": "object",
                          "properties": {
                            "tlsEnabled": {
                              "type": "boolean",
                              "description": "Tls Enabled on Remote Broker Connection."
                            },
                            "trustedCaCertificateConfigMap": {
                              "type": "string",
                              "description": "Trusted CA certificate name for Remote Broker."
                            }
                          },
                          "required": [
                            "tlsEnabled"
                          ]
                        }
                      },
                      "required": [
                        "authentication",
                        "endpoint",
                        "tls"
                      ]
                    }
                  },
                  "required": [
                    "image",
                    "protocol",
                    "remoteBrokerConnection"
                  ]
                },
                "extendedLocation": {
                  "description": "Extended Location",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ],
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The name of the extended location."
                    },
                    "type": {
                      "description": "Type of ExtendedLocation.",
                      "type": "string",
                      "enum": [
                        "CustomLocation"
                      ],
                      "x-ms-enum": {
                        "name": "ExtendedLocationType",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "CustomLocation",
                            "value": "CustomLocation",
                            "description": "CustomLocation type"
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "name",
                    "type"
                  ]
                }
              },
              "required": [
                "extendedLocation"
              ]
            }
          }
        }
      },
      "put": {
        "operationId": "MqttBridgeConnector_CreateOrUpdate",
        "tags": [
          "MqttBridgeConnector"
        ],
        "description": "Create a MqttBridgeConnectorResource",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group. The name is case insensitive.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "x-ms-parameter-location": "method"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "mqttBridgeConnectorName",
            "in": "path",
            "description": "Name of MQ mqttBridgeConnector resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "resource",
            "in": "body",
            "description": "Resource create parameters.",
            "required": true,
            "schema": {
              "type": "object",
              "description": "MQ mqttBridgeConnector resource",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "description": "The name of the resource",
                  "readOnly": true
                },
                "type": {
                  "type": "string",
                  "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                  "readOnly": true
                },
                "systemData": {
                  "type": "object",
                  "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                  "readOnly": true,
                  "properties": {
                    "createdBy": {
                      "type": "string",
                      "description": "The identity that created the resource."
                    },
                    "createdByType": {
                      "type": "string",
                      "description": "The type of identity that created the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource creation (UTC)."
                    },
                    "lastModifiedBy": {
                      "type": "string",
                      "description": "The identity that last modified the resource."
                    },
                    "lastModifiedByType": {
                      "type": "string",
                      "description": "The type of identity that last modified the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "lastModifiedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource last modification (UTC)"
                    }
                  }
                },
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "x-ms-mutability": [
                    "read",
                    "create",
                    "update"
                  ]
                },
                "location": {
                  "type": "string",
                  "description": "The geo-location where the resource lives",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ]
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "bridgeInstances": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The number of instances to deploy for a bridge rollout.",
                      "minimum": 0,
                      "maximum": 65535
                    },
                    "clientIdPrefix": {
                      "type": "string",
                      "description": "The client id prefix of the dynamically generated client ids."
                    },
                    "image": {
                      "description": "The details of MqttBridge Docker Image.",
                      "type": "object",
                      "properties": {
                        "pullPolicy": {
                          "type": "string",
                          "description": "Image pull policy."
                        },
                        "pullSecrets": {
                          "type": "string",
                          "description": "Image pull secrets."
                        },
                        "repository": {
                          "type": "string",
                          "description": "The Docker image name."
                        },
                        "tag": {
                          "type": "string",
                          "description": "The Docker  image tag."
                        }
                      },
                      "required": [
                        "repository",
                        "tag"
                      ]
                    },
                    "localBrokerConnection": {
                      "description": "The details for connecting with Local Broker.",
                      "type": "object",
                      "properties": {
                        "authentication": {
                          "description": "The authentication methods for LocalBroker connection. NOTE - Enum only one method at a time is supported.",
                          "type": "object",
                          "properties": {
                            "kubernetes": {
                              "description": "Kubernetes local broker authentication method.",
                              "type": "object",
                              "properties": {
                                "secretPath": {
                                  "type": "string",
                                  "description": "Secret Path where SAT is mounted.",
                                  "default": "/var/run/serviceaccount/localbroker"
                                },
                                "serviceAccountTokenName": {
                                  "type": "string",
                                  "description": "Token name where SAT is mounted on secret path.",
                                  "default": "sat"
                                }
                              }
                            }
                          },
                          "required": [
                            "kubernetes"
                          ]
                        },
                        "endpoint": {
                          "type": "string",
                          "description": "The endpoint of local broker to connect to.",
                          "default": "aio-mq-dmqtt-frontend:1883"
                        },
                        "tls": {
                          "description": "TLS details for Local broker Connection.",
                          "type": "object",
                          "properties": {
                            "tlsEnabled": {
                              "type": "boolean",
                              "description": "Tls Enabled on Local Broker Connection.",
                              "default": false
                            },
                            "trustedCaCertificateConfigMap": {
                              "type": "string",
                              "description": "Trusted CA certificate config map name for Local Broker."
                            }
                          }
                        }
                      }
                    },
                    "logLevel": {
                      "type": "string",
                      "description": "The log level of the Bridge Connector instances."
                    },
                    "nodeTolerations": {
                      "description": "The Node Tolerations for the Bridge Connector pods.",
                      "type": "object",
                      "properties": {
                        "effect": {
                          "type": "string",
                          "description": "Toleration effect."
                        },
                        "key": {
                          "type": "string",
                          "description": "Toleration key."
                        },
                        "operator": {
                          "type": "string",
                          "description": "Toleration operator like 'Exists', 'Equal' etc."
                        },
                        "value": {
                          "type": "string",
                          "description": "Toleration Value."
                        }
                      },
                      "required": [
                        "effect",
                        "key",
                        "operator",
                        "value"
                      ]
                    },
                    "protocol": {
                      "description": "The protocol to use for connecting with Brokers.",
                      "type": "string",
                      "enum": [
                        "v3",
                        "v5"
                      ],
                      "x-ms-enum": {
                        "name": "MqttProtocol",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "v3",
                            "value": "v3",
                            "description": "Mqttv3"
                          },
                          {
                            "name": "v5",
                            "value": "v5",
                            "description": "Mqttv5"
                          }
                        ]
                      }
                    },
                    "provisioningState": {
                      "description": "The status of the last operation.",
                      "readOnly": true,
                      "type": "string",
                      "enum": [
                        "Succeeded",
                        "Failed",
                        "Canceled",
                        "Provisioning",
                        "Updating",
                        "Deleting",
                        "Accepted"
                      ],
                      "x-ms-enum": {
                        "name": "ProvisioningState",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Succeeded",
                            "value": "Succeeded",
                            "description": "Resource has been created."
                          },
                          {
                            "name": "Failed",
                            "value": "Failed",
                            "description": "Resource creation failed."
                          },
                          {
                            "name": "Canceled",
                            "value": "Canceled",
                            "description": "Resource creation was canceled."
                          },
                          {
                            "name": "Provisioning",
                            "value": "Provisioning",
                            "description": "Resource is getting provisioned."
                          },
                          {
                            "name": "Updating",
                            "value": "Updating",
                            "description": "Resource is Updating."
                          },
                          {
                            "name": "Deleting",
                            "value": "Deleting",
                            "description": "Resource is Deleting."
                          },
                          {
                            "name": "Accepted",
                            "value": "Accepted",
                            "description": "Resource has been Accepted."
                          }
                        ]
                      }
                    },
                    "remoteBrokerConnection": {
                      "description": "The details for connecting with Remote Broker.",
                      "type": "object",
                      "properties": {
                        "authentication": {
                          "description": "The remote broker authentication methods. NOTE - Enum only one method is allowed to be passed.",
                          "type": "object",
                          "properties": {
                            "x509": {
                              "description": "X509 remote broker authentication method.",
                              "type": "object",
                              "properties": {
                                "keyVault": {
                                  "description": "Keyvault X509 secret properties.",
                                  "type": "object",
                                  "properties": {
                                    "vault": {
                                      "description": "KeyVault properties.",
                                      "type": "object",
                                      "properties": {
                                        "credentials": {
                                          "description": "KeyVault credentials.",
                                          "type": "object",
                                          "properties": {
                                            "servicePrincipalLocalSecretName": {
                                              "type": "string",
                                              "description": "KeyVault service principal local secret name."
                                            }
                                          },
                                          "required": [
                                            "servicePrincipalLocalSecretName"
                                          ]
                                        },
                                        "directoryId": {
                                          "type": "string",
                                          "description": "KeyVault directoryId."
                                        },
                                        "name": {
                                          "type": "string",
                                          "description": "KeyVault name."
                                        }
                                      },
                                      "required": [
                                        "credentials",
                                        "directoryId",
                                        "name"
                                      ]
                                    },
                                    "vaultCaChainSecret": {
                                      "description": "KeyVault CA chain secret details.",
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "description": "KeyVault secret name."
                                        },
                                        "version": {
                                          "type": "string",
                                          "description": "KeyVault secret version."
                                        }
                                      },
                                      "required": [
                                        "name"
                                      ]
                                    },
                                    "vaultCert": {
                                      "description": "KeyVault Cert secret details.",
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "description": "KeyVault secret name."
                                        },
                                        "version": {
                                          "type": "string",
                                          "description": "KeyVault secret version."
                                        }
                                      },
                                      "required": [
                                        "name"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "vault",
                                    "vaultCert"
                                  ]
                                },
                                "secretName": {
                                  "type": "string",
                                  "description": "Secret where cert details are stored."
                                }
                              }
                            },
                            "systemAssignedManagedIdentity": {
                              "description": "Managed identity remote broker authentication method.",
                              "type": "object",
                              "properties": {
                                "audience": {
                                  "type": "string",
                                  "description": "Token audience."
                                },
                                "extensionName": {
                                  "type": "string",
                                  "description": "Arc Extension name."
                                }
                              },
                              "required": [
                                "audience"
                              ]
                            }
                          }
                        },
                        "endpoint": {
                          "type": "string",
                          "description": "The endpoint of remote broker to connect to."
                        },
                        "protocol": {
                          "type": "string",
                          "description": "Protocol for remote connection.",
                          "default": "mqtt",
                          "enum": [
                            "mqtt",
                            "webSocket"
                          ],
                          "x-ms-enum": {
                            "name": "MqttBridgeRemoteBrokerProtocol",
                            "modelAsString": true,
                            "values": [
                              {
                                "name": "mqtt",
                                "value": "mqtt",
                                "description": "MQTT protocol."
                              },
                              {
                                "name": "webSocket",
                                "value": "webSocket",
                                "description": "MQTT over WebSocket protocol."
                              }
                            ]
                          }
                        },
                        "tls": {
                          "description": "TLS details for Remote broker Connection.",
                          "type": "object",
                          "properties": {
                            "tlsEnabled": {
                              "type": "boolean",
                              "description": "Tls Enabled on Remote Broker Connection."
                            },
                            "trustedCaCertificateConfigMap": {
                              "type": "string",
                              "description": "Trusted CA certificate name for Remote Broker."
                            }
                          },
                          "required": [
                            "tlsEnabled"
                          ]
                        }
                      },
                      "required": [
                        "authentication",
                        "endpoint",
                        "tls"
                      ]
                    }
                  },
                  "required": [
                    "image",
                    "protocol",
                    "remoteBrokerConnection"
                  ]
                },
                "extendedLocation": {
                  "description": "Extended Location",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ],
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The name of the extended location."
                    },
                    "type": {
                      "description": "Type of ExtendedLocation.",
                      "type": "string",
                      "enum": [
                        "CustomLocation"
                      ],
                      "x-ms-enum": {
                        "name": "ExtendedLocationType",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "CustomLocation",
                            "value": "CustomLocation",
                            "description": "CustomLocation type"
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "name",
                    "type"
                  ]
                }
              },
              "required": [
                "extendedLocation"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resource 'MqttBridgeConnectorResource' update operation succeeded",
            "schema": {
              "type": "object",
              "description": "MQ mqttBridgeConnector resource",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "description": "The name of the resource",
                  "readOnly": true
                },
                "type": {
                  "type": "string",
                  "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                  "readOnly": true
                },
                "systemData": {
                  "type": "object",
                  "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                  "readOnly": true,
                  "properties": {
                    "createdBy": {
                      "type": "string",
                      "description": "The identity that created the resource."
                    },
                    "createdByType": {
                      "type": "string",
                      "description": "The type of identity that created the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource creation (UTC)."
                    },
                    "lastModifiedBy": {
                      "type": "string",
                      "description": "The identity that last modified the resource."
                    },
                    "lastModifiedByType": {
                      "type": "string",
                      "description": "The type of identity that last modified the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "lastModifiedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource last modification (UTC)"
                    }
                  }
                },
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "x-ms-mutability": [
                    "read",
                    "create",
                    "update"
                  ]
                },
                "location": {
                  "type": "string",
                  "description": "The geo-location where the resource lives",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ]
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "bridgeInstances": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The number of instances to deploy for a bridge rollout.",
                      "minimum": 0,
                      "maximum": 65535
                    },
                    "clientIdPrefix": {
                      "type": "string",
                      "description": "The client id prefix of the dynamically generated client ids."
                    },
                    "image": {
                      "description": "The details of MqttBridge Docker Image.",
                      "type": "object",
                      "properties": {
                        "pullPolicy": {
                          "type": "string",
                          "description": "Image pull policy."
                        },
                        "pullSecrets": {
                          "type": "string",
                          "description": "Image pull secrets."
                        },
                        "repository": {
                          "type": "string",
                          "description": "The Docker image name."
                        },
                        "tag": {
                          "type": "string",
                          "description": "The Docker  image tag."
                        }
                      },
                      "required": [
                        "repository",
                        "tag"
                      ]
                    },
                    "localBrokerConnection": {
                      "description": "The details for connecting with Local Broker.",
                      "type": "object",
                      "properties": {
                        "authentication": {
                          "description": "The authentication methods for LocalBroker connection. NOTE - Enum only one method at a time is supported.",
                          "type": "object",
                          "properties": {
                            "kubernetes": {
                              "description": "Kubernetes local broker authentication method.",
                              "type": "object",
                              "properties": {
                                "secretPath": {
                                  "type": "string",
                                  "description": "Secret Path where SAT is mounted.",
                                  "default": "/var/run/serviceaccount/localbroker"
                                },
                                "serviceAccountTokenName": {
                                  "type": "string",
                                  "description": "Token name where SAT is mounted on secret path.",
                                  "default": "sat"
                                }
                              }
                            }
                          },
                          "required": [
                            "kubernetes"
                          ]
                        },
                        "endpoint": {
                          "type": "string",
                          "description": "The endpoint of local broker to connect to.",
                          "default": "aio-mq-dmqtt-frontend:1883"
                        },
                        "tls": {
                          "description": "TLS details for Local broker Connection.",
                          "type": "object",
                          "properties": {
                            "tlsEnabled": {
                              "type": "boolean",
                              "description": "Tls Enabled on Local Broker Connection.",
                              "default": false
                            },
                            "trustedCaCertificateConfigMap": {
                              "type": "string",
                              "description": "Trusted CA certificate config map name for Local Broker."
                            }
                          }
                        }
                      }
                    },
                    "logLevel": {
                      "type": "string",
                      "description": "The log level of the Bridge Connector instances."
                    },
                    "nodeTolerations": {
                      "description": "The Node Tolerations for the Bridge Connector pods.",
                      "type": "object",
                      "properties": {
                        "effect": {
                          "type": "string",
                          "description": "Toleration effect."
                        },
                        "key": {
                          "type": "string",
                          "description": "Toleration key."
                        },
                        "operator": {
                          "type": "string",
                          "description": "Toleration operator like 'Exists', 'Equal' etc."
                        },
                        "value": {
                          "type": "string",
                          "description": "Toleration Value."
                        }
                      },
                      "required": [
                        "effect",
                        "key",
                        "operator",
                        "value"
                      ]
                    },
                    "protocol": {
                      "description": "The protocol to use for connecting with Brokers.",
                      "type": "string",
                      "enum": [
                        "v3",
                        "v5"
                      ],
                      "x-ms-enum": {
                        "name": "MqttProtocol",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "v3",
                            "value": "v3",
                            "description": "Mqttv3"
                          },
                          {
                            "name": "v5",
                            "value": "v5",
                            "description": "Mqttv5"
                          }
                        ]
                      }
                    },
                    "provisioningState": {
                      "description": "The status of the last operation.",
                      "readOnly": true,
                      "type": "string",
                      "enum": [
                        "Succeeded",
                        "Failed",
                        "Canceled",
                        "Provisioning",
                        "Updating",
                        "Deleting",
                        "Accepted"
                      ],
                      "x-ms-enum": {
                        "name": "ProvisioningState",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Succeeded",
                            "value": "Succeeded",
                            "description": "Resource has been created."
                          },
                          {
                            "name": "Failed",
                            "value": "Failed",
                            "description": "Resource creation failed."
                          },
                          {
                            "name": "Canceled",
                            "value": "Canceled",
                            "description": "Resource creation was canceled."
                          },
                          {
                            "name": "Provisioning",
                            "value": "Provisioning",
                            "description": "Resource is getting provisioned."
                          },
                          {
                            "name": "Updating",
                            "value": "Updating",
                            "description": "Resource is Updating."
                          },
                          {
                            "name": "Deleting",
                            "value": "Deleting",
                            "description": "Resource is Deleting."
                          },
                          {
                            "name": "Accepted",
                            "value": "Accepted",
                            "description": "Resource has been Accepted."
                          }
                        ]
                      }
                    },
                    "remoteBrokerConnection": {
                      "description": "The details for connecting with Remote Broker.",
                      "type": "object",
                      "properties": {
                        "authentication": {
                          "description": "The remote broker authentication methods. NOTE - Enum only one method is allowed to be passed.",
                          "type": "object",
                          "properties": {
                            "x509": {
                              "description": "X509 remote broker authentication method.",
                              "type": "object",
                              "properties": {
                                "keyVault": {
                                  "description": "Keyvault X509 secret properties.",
                                  "type": "object",
                                  "properties": {
                                    "vault": {
                                      "description": "KeyVault properties.",
                                      "type": "object",
                                      "properties": {
                                        "credentials": {
                                          "description": "KeyVault credentials.",
                                          "type": "object",
                                          "properties": {
                                            "servicePrincipalLocalSecretName": {
                                              "type": "string",
                                              "description": "KeyVault service principal local secret name."
                                            }
                                          },
                                          "required": [
                                            "servicePrincipalLocalSecretName"
                                          ]
                                        },
                                        "directoryId": {
                                          "type": "string",
                                          "description": "KeyVault directoryId."
                                        },
                                        "name": {
                                          "type": "string",
                                          "description": "KeyVault name."
                                        }
                                      },
                                      "required": [
                                        "credentials",
                                        "directoryId",
                                        "name"
                                      ]
                                    },
                                    "vaultCaChainSecret": {
                                      "description": "KeyVault CA chain secret details.",
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "description": "KeyVault secret name."
                                        },
                                        "version": {
                                          "type": "string",
                                          "description": "KeyVault secret version."
                                        }
                                      },
                                      "required": [
                                        "name"
                                      ]
                                    },
                                    "vaultCert": {
                                      "description": "KeyVault Cert secret details.",
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "description": "KeyVault secret name."
                                        },
                                        "version": {
                                          "type": "string",
                                          "description": "KeyVault secret version."
                                        }
                                      },
                                      "required": [
                                        "name"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "vault",
                                    "vaultCert"
                                  ]
                                },
                                "secretName": {
                                  "type": "string",
                                  "description": "Secret where cert details are stored."
                                }
                              }
                            },
                            "systemAssignedManagedIdentity": {
                              "description": "Managed identity remote broker authentication method.",
                              "type": "object",
                              "properties": {
                                "audience": {
                                  "type": "string",
                                  "description": "Token audience."
                                },
                                "extensionName": {
                                  "type": "string",
                                  "description": "Arc Extension name."
                                }
                              },
                              "required": [
                                "audience"
                              ]
                            }
                          }
                        },
                        "endpoint": {
                          "type": "string",
                          "description": "The endpoint of remote broker to connect to."
                        },
                        "protocol": {
                          "type": "string",
                          "description": "Protocol for remote connection.",
                          "default": "mqtt",
                          "enum": [
                            "mqtt",
                            "webSocket"
                          ],
                          "x-ms-enum": {
                            "name": "MqttBridgeRemoteBrokerProtocol",
                            "modelAsString": true,
                            "values": [
                              {
                                "name": "mqtt",
                                "value": "mqtt",
                                "description": "MQTT protocol."
                              },
                              {
                                "name": "webSocket",
                                "value": "webSocket",
                                "description": "MQTT over WebSocket protocol."
                              }
                            ]
                          }
                        },
                        "tls": {
                          "description": "TLS details for Remote broker Connection.",
                          "type": "object",
                          "properties": {
                            "tlsEnabled": {
                              "type": "boolean",
                              "description": "Tls Enabled on Remote Broker Connection."
                            },
                            "trustedCaCertificateConfigMap": {
                              "type": "string",
                              "description": "Trusted CA certificate name for Remote Broker."
                            }
                          },
                          "required": [
                            "tlsEnabled"
                          ]
                        }
                      },
                      "required": [
                        "authentication",
                        "endpoint",
                        "tls"
                      ]
                    }
                  },
                  "required": [
                    "image",
                    "protocol",
                    "remoteBrokerConnection"
                  ]
                },
                "extendedLocation": {
                  "description": "Extended Location",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ],
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The name of the extended location."
                    },
                    "type": {
                      "description": "Type of ExtendedLocation.",
                      "type": "string",
                      "enum": [
                        "CustomLocation"
                      ],
                      "x-ms-enum": {
                        "name": "ExtendedLocationType",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "CustomLocation",
                            "value": "CustomLocation",
                            "description": "CustomLocation type"
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "name",
                    "type"
                  ]
                }
              },
              "required": [
                "extendedLocation"
              ]
            }
          },
          "201": {
            "description": "Resource 'MqttBridgeConnectorResource' create operation succeeded",
            "schema": {
              "type": "object",
              "description": "MQ mqttBridgeConnector resource",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "description": "The name of the resource",
                  "readOnly": true
                },
                "type": {
                  "type": "string",
                  "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                  "readOnly": true
                },
                "systemData": {
                  "type": "object",
                  "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                  "readOnly": true,
                  "properties": {
                    "createdBy": {
                      "type": "string",
                      "description": "The identity that created the resource."
                    },
                    "createdByType": {
                      "type": "string",
                      "description": "The type of identity that created the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource creation (UTC)."
                    },
                    "lastModifiedBy": {
                      "type": "string",
                      "description": "The identity that last modified the resource."
                    },
                    "lastModifiedByType": {
                      "type": "string",
                      "description": "The type of identity that last modified the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "lastModifiedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource last modification (UTC)"
                    }
                  }
                },
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "x-ms-mutability": [
                    "read",
                    "create",
                    "update"
                  ]
                },
                "location": {
                  "type": "string",
                  "description": "The geo-location where the resource lives",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ]
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "bridgeInstances": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The number of instances to deploy for a bridge rollout.",
                      "minimum": 0,
                      "maximum": 65535
                    },
                    "clientIdPrefix": {
                      "type": "string",
                      "description": "The client id prefix of the dynamically generated client ids."
                    },
                    "image": {
                      "description": "The details of MqttBridge Docker Image.",
                      "type": "object",
                      "properties": {
                        "pullPolicy": {
                          "type": "string",
                          "description": "Image pull policy."
                        },
                        "pullSecrets": {
                          "type": "string",
                          "description": "Image pull secrets."
                        },
                        "repository": {
                          "type": "string",
                          "description": "The Docker image name."
                        },
                        "tag": {
                          "type": "string",
                          "description": "The Docker  image tag."
                        }
                      },
                      "required": [
                        "repository",
                        "tag"
                      ]
                    },
                    "localBrokerConnection": {
                      "description": "The details for connecting with Local Broker.",
                      "type": "object",
                      "properties": {
                        "authentication": {
                          "description": "The authentication methods for LocalBroker connection. NOTE - Enum only one method at a time is supported.",
                          "type": "object",
                          "properties": {
                            "kubernetes": {
                              "description": "Kubernetes local broker authentication method.",
                              "type": "object",
                              "properties": {
                                "secretPath": {
                                  "type": "string",
                                  "description": "Secret Path where SAT is mounted.",
                                  "default": "/var/run/serviceaccount/localbroker"
                                },
                                "serviceAccountTokenName": {
                                  "type": "string",
                                  "description": "Token name where SAT is mounted on secret path.",
                                  "default": "sat"
                                }
                              }
                            }
                          },
                          "required": [
                            "kubernetes"
                          ]
                        },
                        "endpoint": {
                          "type": "string",
                          "description": "The endpoint of local broker to connect to.",
                          "default": "aio-mq-dmqtt-frontend:1883"
                        },
                        "tls": {
                          "description": "TLS details for Local broker Connection.",
                          "type": "object",
                          "properties": {
                            "tlsEnabled": {
                              "type": "boolean",
                              "description": "Tls Enabled on Local Broker Connection.",
                              "default": false
                            },
                            "trustedCaCertificateConfigMap": {
                              "type": "string",
                              "description": "Trusted CA certificate config map name for Local Broker."
                            }
                          }
                        }
                      }
                    },
                    "logLevel": {
                      "type": "string",
                      "description": "The log level of the Bridge Connector instances."
                    },
                    "nodeTolerations": {
                      "description": "The Node Tolerations for the Bridge Connector pods.",
                      "type": "object",
                      "properties": {
                        "effect": {
                          "type": "string",
                          "description": "Toleration effect."
                        },
                        "key": {
                          "type": "string",
                          "description": "Toleration key."
                        },
                        "operator": {
                          "type": "string",
                          "description": "Toleration operator like 'Exists', 'Equal' etc."
                        },
                        "value": {
                          "type": "string",
                          "description": "Toleration Value."
                        }
                      },
                      "required": [
                        "effect",
                        "key",
                        "operator",
                        "value"
                      ]
                    },
                    "protocol": {
                      "description": "The protocol to use for connecting with Brokers.",
                      "type": "string",
                      "enum": [
                        "v3",
                        "v5"
                      ],
                      "x-ms-enum": {
                        "name": "MqttProtocol",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "v3",
                            "value": "v3",
                            "description": "Mqttv3"
                          },
                          {
                            "name": "v5",
                            "value": "v5",
                            "description": "Mqttv5"
                          }
                        ]
                      }
                    },
                    "provisioningState": {
                      "description": "The status of the last operation.",
                      "readOnly": true,
                      "type": "string",
                      "enum": [
                        "Succeeded",
                        "Failed",
                        "Canceled",
                        "Provisioning",
                        "Updating",
                        "Deleting",
                        "Accepted"
                      ],
                      "x-ms-enum": {
                        "name": "ProvisioningState",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Succeeded",
                            "value": "Succeeded",
                            "description": "Resource has been created."
                          },
                          {
                            "name": "Failed",
                            "value": "Failed",
                            "description": "Resource creation failed."
                          },
                          {
                            "name": "Canceled",
                            "value": "Canceled",
                            "description": "Resource creation was canceled."
                          },
                          {
                            "name": "Provisioning",
                            "value": "Provisioning",
                            "description": "Resource is getting provisioned."
                          },
                          {
                            "name": "Updating",
                            "value": "Updating",
                            "description": "Resource is Updating."
                          },
                          {
                            "name": "Deleting",
                            "value": "Deleting",
                            "description": "Resource is Deleting."
                          },
                          {
                            "name": "Accepted",
                            "value": "Accepted",
                            "description": "Resource has been Accepted."
                          }
                        ]
                      }
                    },
                    "remoteBrokerConnection": {
                      "description": "The details for connecting with Remote Broker.",
                      "type": "object",
                      "properties": {
                        "authentication": {
                          "description": "The remote broker authentication methods. NOTE - Enum only one method is allowed to be passed.",
                          "type": "object",
                          "properties": {
                            "x509": {
                              "description": "X509 remote broker authentication method.",
                              "type": "object",
                              "properties": {
                                "keyVault": {
                                  "description": "Keyvault X509 secret properties.",
                                  "type": "object",
                                  "properties": {
                                    "vault": {
                                      "description": "KeyVault properties.",
                                      "type": "object",
                                      "properties": {
                                        "credentials": {
                                          "description": "KeyVault credentials.",
                                          "type": "object",
                                          "properties": {
                                            "servicePrincipalLocalSecretName": {
                                              "type": "string",
                                              "description": "KeyVault service principal local secret name."
                                            }
                                          },
                                          "required": [
                                            "servicePrincipalLocalSecretName"
                                          ]
                                        },
                                        "directoryId": {
                                          "type": "string",
                                          "description": "KeyVault directoryId."
                                        },
                                        "name": {
                                          "type": "string",
                                          "description": "KeyVault name."
                                        }
                                      },
                                      "required": [
                                        "credentials",
                                        "directoryId",
                                        "name"
                                      ]
                                    },
                                    "vaultCaChainSecret": {
                                      "description": "KeyVault CA chain secret details.",
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "description": "KeyVault secret name."
                                        },
                                        "version": {
                                          "type": "string",
                                          "description": "KeyVault secret version."
                                        }
                                      },
                                      "required": [
                                        "name"
                                      ]
                                    },
                                    "vaultCert": {
                                      "description": "KeyVault Cert secret details.",
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "description": "KeyVault secret name."
                                        },
                                        "version": {
                                          "type": "string",
                                          "description": "KeyVault secret version."
                                        }
                                      },
                                      "required": [
                                        "name"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "vault",
                                    "vaultCert"
                                  ]
                                },
                                "secretName": {
                                  "type": "string",
                                  "description": "Secret where cert details are stored."
                                }
                              }
                            },
                            "systemAssignedManagedIdentity": {
                              "description": "Managed identity remote broker authentication method.",
                              "type": "object",
                              "properties": {
                                "audience": {
                                  "type": "string",
                                  "description": "Token audience."
                                },
                                "extensionName": {
                                  "type": "string",
                                  "description": "Arc Extension name."
                                }
                              },
                              "required": [
                                "audience"
                              ]
                            }
                          }
                        },
                        "endpoint": {
                          "type": "string",
                          "description": "The endpoint of remote broker to connect to."
                        },
                        "protocol": {
                          "type": "string",
                          "description": "Protocol for remote connection.",
                          "default": "mqtt",
                          "enum": [
                            "mqtt",
                            "webSocket"
                          ],
                          "x-ms-enum": {
                            "name": "MqttBridgeRemoteBrokerProtocol",
                            "modelAsString": true,
                            "values": [
                              {
                                "name": "mqtt",
                                "value": "mqtt",
                                "description": "MQTT protocol."
                              },
                              {
                                "name": "webSocket",
                                "value": "webSocket",
                                "description": "MQTT over WebSocket protocol."
                              }
                            ]
                          }
                        },
                        "tls": {
                          "description": "TLS details for Remote broker Connection.",
                          "type": "object",
                          "properties": {
                            "tlsEnabled": {
                              "type": "boolean",
                              "description": "Tls Enabled on Remote Broker Connection."
                            },
                            "trustedCaCertificateConfigMap": {
                              "type": "string",
                              "description": "Trusted CA certificate name for Remote Broker."
                            }
                          },
                          "required": [
                            "tlsEnabled"
                          ]
                        }
                      },
                      "required": [
                        "authentication",
                        "endpoint",
                        "tls"
                      ]
                    }
                  },
                  "required": [
                    "image",
                    "protocol",
                    "remoteBrokerConnection"
                  ]
                },
                "extendedLocation": {
                  "description": "Extended Location",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ],
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The name of the extended location."
                    },
                    "type": {
                      "description": "Type of ExtendedLocation.",
                      "type": "string",
                      "enum": [
                        "CustomLocation"
                      ],
                      "x-ms-enum": {
                        "name": "ExtendedLocationType",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "CustomLocation",
                            "value": "CustomLocation",
                            "description": "CustomLocation type"
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "name",
                    "type"
                  ]
                }
              },
              "required": [
                "extendedLocation"
              ]
            },
            "headers": {
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "MqttBridgeConnector_Update",
        "tags": [
          "MqttBridgeConnector"
        ],
        "description": "Update a MqttBridgeConnectorResource",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group. The name is case insensitive.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "x-ms-parameter-location": "method"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "mqttBridgeConnectorName",
            "in": "path",
            "description": "Name of MQ mqttBridgeConnector resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "properties",
            "in": "body",
            "description": "The resource properties to be updated.",
            "required": true,
            "schema": {
              "type": "object",
              "description": "The type used for update operations of the MqttBridgeConnectorResource.",
              "properties": {
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "bridgeInstances": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The number of instances to deploy for a bridge rollout.",
                      "minimum": 0,
                      "maximum": 65535
                    },
                    "clientIdPrefix": {
                      "type": "string",
                      "description": "The client id prefix of the dynamically generated client ids."
                    },
                    "image": {
                      "description": "The details of MqttBridge Docker Image.",
                      "type": "object",
                      "properties": {
                        "pullPolicy": {
                          "type": "string",
                          "description": "Image pull policy."
                        },
                        "pullSecrets": {
                          "type": "string",
                          "description": "Image pull secrets."
                        },
                        "repository": {
                          "type": "string",
                          "description": "The Docker image name."
                        },
                        "tag": {
                          "type": "string",
                          "description": "The Docker  image tag."
                        }
                      }
                    },
                    "localBrokerConnection": {
                      "description": "The details for connecting with Local Broker.",
                      "type": "object",
                      "properties": {
                        "authentication": {
                          "description": "The authentication methods for LocalBroker connection. NOTE - Enum only one method at a time is supported.",
                          "type": "object",
                          "properties": {
                            "kubernetes": {
                              "description": "Kubernetes local broker authentication method.",
                              "type": "object",
                              "properties": {
                                "secretPath": {
                                  "type": "string",
                                  "description": "Secret Path where SAT is mounted.",
                                  "default": "/var/run/serviceaccount/localbroker"
                                },
                                "serviceAccountTokenName": {
                                  "type": "string",
                                  "description": "Token name where SAT is mounted on secret path.",
                                  "default": "sat"
                                }
                              }
                            }
                          }
                        },
                        "endpoint": {
                          "type": "string",
                          "description": "The endpoint of local broker to connect to.",
                          "default": "aio-mq-dmqtt-frontend:1883"
                        },
                        "tls": {
                          "description": "TLS details for Local broker Connection.",
                          "type": "object",
                          "properties": {
                            "tlsEnabled": {
                              "type": "boolean",
                              "description": "Tls Enabled on Local Broker Connection.",
                              "default": false
                            },
                            "trustedCaCertificateConfigMap": {
                              "type": "string",
                              "description": "Trusted CA certificate config map name for Local Broker."
                            }
                          }
                        }
                      }
                    },
                    "logLevel": {
                      "type": "string",
                      "description": "The log level of the Bridge Connector instances."
                    },
                    "nodeTolerations": {
                      "description": "The Node Tolerations for the Bridge Connector pods.",
                      "type": "object",
                      "properties": {
                        "effect": {
                          "type": "string",
                          "description": "Toleration effect."
                        },
                        "key": {
                          "type": "string",
                          "description": "Toleration key."
                        },
                        "operator": {
                          "type": "string",
                          "description": "Toleration operator like 'Exists', 'Equal' etc."
                        },
                        "value": {
                          "type": "string",
                          "description": "Toleration Value."
                        }
                      }
                    },
                    "protocol": {
                      "description": "The protocol to use for connecting with Brokers.",
                      "type": "string",
                      "enum": [
                        "v3",
                        "v5"
                      ],
                      "x-ms-enum": {
                        "name": "MqttProtocol",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "v3",
                            "value": "v3",
                            "description": "Mqttv3"
                          },
                          {
                            "name": "v5",
                            "value": "v5",
                            "description": "Mqttv5"
                          }
                        ]
                      }
                    },
                    "remoteBrokerConnection": {
                      "description": "The details for connecting with Remote Broker.",
                      "type": "object",
                      "properties": {
                        "authentication": {
                          "description": "The remote broker authentication methods. NOTE - Enum only one method is allowed to be passed.",
                          "type": "object",
                          "properties": {
                            "x509": {
                              "description": "X509 remote broker authentication method.",
                              "type": "object",
                              "properties": {
                                "keyVault": {
                                  "description": "Keyvault X509 secret properties.",
                                  "type": "object",
                                  "properties": {
                                    "vault": {
                                      "description": "KeyVault properties.",
                                      "type": "object",
                                      "properties": {
                                        "credentials": {
                                          "description": "KeyVault credentials.",
                                          "type": "object",
                                          "properties": {
                                            "servicePrincipalLocalSecretName": {
                                              "type": "string",
                                              "description": "KeyVault service principal local secret name."
                                            }
                                          }
                                        },
                                        "directoryId": {
                                          "type": "string",
                                          "description": "KeyVault directoryId."
                                        },
                                        "name": {
                                          "type": "string",
                                          "description": "KeyVault name."
                                        }
                                      }
                                    },
                                    "vaultCaChainSecret": {
                                      "description": "KeyVault CA chain secret details.",
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "description": "KeyVault secret name."
                                        },
                                        "version": {
                                          "type": "string",
                                          "description": "KeyVault secret version."
                                        }
                                      }
                                    },
                                    "vaultCert": {
                                      "description": "KeyVault Cert secret details.",
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "description": "KeyVault secret name."
                                        },
                                        "version": {
                                          "type": "string",
                                          "description": "KeyVault secret version."
                                        }
                                      }
                                    }
                                  }
                                },
                                "secretName": {
                                  "type": "string",
                                  "description": "Secret where cert details are stored."
                                }
                              }
                            },
                            "systemAssignedManagedIdentity": {
                              "description": "Managed identity remote broker authentication method.",
                              "type": "object",
                              "properties": {
                                "audience": {
                                  "type": "string",
                                  "description": "Token audience."
                                },
                                "extensionName": {
                                  "type": "string",
                                  "description": "Arc Extension name."
                                }
                              }
                            }
                          }
                        },
                        "endpoint": {
                          "type": "string",
                          "description": "The endpoint of remote broker to connect to."
                        },
                        "protocol": {
                          "type": "string",
                          "description": "Protocol for remote connection.",
                          "default": "mqtt",
                          "enum": [
                            "mqtt",
                            "webSocket"
                          ],
                          "x-ms-enum": {
                            "name": "MqttBridgeRemoteBrokerProtocol",
                            "modelAsString": true,
                            "values": [
                              {
                                "name": "mqtt",
                                "value": "mqtt",
                                "description": "MQTT protocol."
                              },
                              {
                                "name": "webSocket",
                                "value": "webSocket",
                                "description": "MQTT over WebSocket protocol."
                              }
                            ]
                          }
                        },
                        "tls": {
                          "description": "TLS details for Remote broker Connection.",
                          "type": "object",
                          "properties": {
                            "tlsEnabled": {
                              "type": "boolean",
                              "description": "Tls Enabled on Remote Broker Connection."
                            },
                            "trustedCaCertificateConfigMap": {
                              "type": "string",
                              "description": "Trusted CA certificate name for Remote Broker."
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "type": "object",
              "description": "MQ mqttBridgeConnector resource",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "description": "The name of the resource",
                  "readOnly": true
                },
                "type": {
                  "type": "string",
                  "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                  "readOnly": true
                },
                "systemData": {
                  "type": "object",
                  "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                  "readOnly": true,
                  "properties": {
                    "createdBy": {
                      "type": "string",
                      "description": "The identity that created the resource."
                    },
                    "createdByType": {
                      "type": "string",
                      "description": "The type of identity that created the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource creation (UTC)."
                    },
                    "lastModifiedBy": {
                      "type": "string",
                      "description": "The identity that last modified the resource."
                    },
                    "lastModifiedByType": {
                      "type": "string",
                      "description": "The type of identity that last modified the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "lastModifiedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource last modification (UTC)"
                    }
                  }
                },
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "x-ms-mutability": [
                    "read",
                    "create",
                    "update"
                  ]
                },
                "location": {
                  "type": "string",
                  "description": "The geo-location where the resource lives",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ]
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "bridgeInstances": {
                      "type": "integer",
                      "format": "int32",
                      "description": "The number of instances to deploy for a bridge rollout.",
                      "minimum": 0,
                      "maximum": 65535
                    },
                    "clientIdPrefix": {
                      "type": "string",
                      "description": "The client id prefix of the dynamically generated client ids."
                    },
                    "image": {
                      "description": "The details of MqttBridge Docker Image.",
                      "type": "object",
                      "properties": {
                        "pullPolicy": {
                          "type": "string",
                          "description": "Image pull policy."
                        },
                        "pullSecrets": {
                          "type": "string",
                          "description": "Image pull secrets."
                        },
                        "repository": {
                          "type": "string",
                          "description": "The Docker image name."
                        },
                        "tag": {
                          "type": "string",
                          "description": "The Docker  image tag."
                        }
                      },
                      "required": [
                        "repository",
                        "tag"
                      ]
                    },
                    "localBrokerConnection": {
                      "description": "The details for connecting with Local Broker.",
                      "type": "object",
                      "properties": {
                        "authentication": {
                          "description": "The authentication methods for LocalBroker connection. NOTE - Enum only one method at a time is supported.",
                          "type": "object",
                          "properties": {
                            "kubernetes": {
                              "description": "Kubernetes local broker authentication method.",
                              "type": "object",
                              "properties": {
                                "secretPath": {
                                  "type": "string",
                                  "description": "Secret Path where SAT is mounted.",
                                  "default": "/var/run/serviceaccount/localbroker"
                                },
                                "serviceAccountTokenName": {
                                  "type": "string",
                                  "description": "Token name where SAT is mounted on secret path.",
                                  "default": "sat"
                                }
                              }
                            }
                          },
                          "required": [
                            "kubernetes"
                          ]
                        },
                        "endpoint": {
                          "type": "string",
                          "description": "The endpoint of local broker to connect to.",
                          "default": "aio-mq-dmqtt-frontend:1883"
                        },
                        "tls": {
                          "description": "TLS details for Local broker Connection.",
                          "type": "object",
                          "properties": {
                            "tlsEnabled": {
                              "type": "boolean",
                              "description": "Tls Enabled on Local Broker Connection.",
                              "default": false
                            },
                            "trustedCaCertificateConfigMap": {
                              "type": "string",
                              "description": "Trusted CA certificate config map name for Local Broker."
                            }
                          }
                        }
                      }
                    },
                    "logLevel": {
                      "type": "string",
                      "description": "The log level of the Bridge Connector instances."
                    },
                    "nodeTolerations": {
                      "description": "The Node Tolerations for the Bridge Connector pods.",
                      "type": "object",
                      "properties": {
                        "effect": {
                          "type": "string",
                          "description": "Toleration effect."
                        },
                        "key": {
                          "type": "string",
                          "description": "Toleration key."
                        },
                        "operator": {
                          "type": "string",
                          "description": "Toleration operator like 'Exists', 'Equal' etc."
                        },
                        "value": {
                          "type": "string",
                          "description": "Toleration Value."
                        }
                      },
                      "required": [
                        "effect",
                        "key",
                        "operator",
                        "value"
                      ]
                    },
                    "protocol": {
                      "description": "The protocol to use for connecting with Brokers.",
                      "type": "string",
                      "enum": [
                        "v3",
                        "v5"
                      ],
                      "x-ms-enum": {
                        "name": "MqttProtocol",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "v3",
                            "value": "v3",
                            "description": "Mqttv3"
                          },
                          {
                            "name": "v5",
                            "value": "v5",
                            "description": "Mqttv5"
                          }
                        ]
                      }
                    },
                    "provisioningState": {
                      "description": "The status of the last operation.",
                      "readOnly": true,
                      "type": "string",
                      "enum": [
                        "Succeeded",
                        "Failed",
                        "Canceled",
                        "Provisioning",
                        "Updating",
                        "Deleting",
                        "Accepted"
                      ],
                      "x-ms-enum": {
                        "name": "ProvisioningState",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Succeeded",
                            "value": "Succeeded",
                            "description": "Resource has been created."
                          },
                          {
                            "name": "Failed",
                            "value": "Failed",
                            "description": "Resource creation failed."
                          },
                          {
                            "name": "Canceled",
                            "value": "Canceled",
                            "description": "Resource creation was canceled."
                          },
                          {
                            "name": "Provisioning",
                            "value": "Provisioning",
                            "description": "Resource is getting provisioned."
                          },
                          {
                            "name": "Updating",
                            "value": "Updating",
                            "description": "Resource is Updating."
                          },
                          {
                            "name": "Deleting",
                            "value": "Deleting",
                            "description": "Resource is Deleting."
                          },
                          {
                            "name": "Accepted",
                            "value": "Accepted",
                            "description": "Resource has been Accepted."
                          }
                        ]
                      }
                    },
                    "remoteBrokerConnection": {
                      "description": "The details for connecting with Remote Broker.",
                      "type": "object",
                      "properties": {
                        "authentication": {
                          "description": "The remote broker authentication methods. NOTE - Enum only one method is allowed to be passed.",
                          "type": "object",
                          "properties": {
                            "x509": {
                              "description": "X509 remote broker authentication method.",
                              "type": "object",
                              "properties": {
                                "keyVault": {
                                  "description": "Keyvault X509 secret properties.",
                                  "type": "object",
                                  "properties": {
                                    "vault": {
                                      "description": "KeyVault properties.",
                                      "type": "object",
                                      "properties": {
                                        "credentials": {
                                          "description": "KeyVault credentials.",
                                          "type": "object",
                                          "properties": {
                                            "servicePrincipalLocalSecretName": {
                                              "type": "string",
                                              "description": "KeyVault service principal local secret name."
                                            }
                                          },
                                          "required": [
                                            "servicePrincipalLocalSecretName"
                                          ]
                                        },
                                        "directoryId": {
                                          "type": "string",
                                          "description": "KeyVault directoryId."
                                        },
                                        "name": {
                                          "type": "string",
                                          "description": "KeyVault name."
                                        }
                                      },
                                      "required": [
                                        "credentials",
                                        "directoryId",
                                        "name"
                                      ]
                                    },
                                    "vaultCaChainSecret": {
                                      "description": "KeyVault CA chain secret details.",
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "description": "KeyVault secret name."
                                        },
                                        "version": {
                                          "type": "string",
                                          "description": "KeyVault secret version."
                                        }
                                      },
                                      "required": [
                                        "name"
                                      ]
                                    },
                                    "vaultCert": {
                                      "description": "KeyVault Cert secret details.",
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "description": "KeyVault secret name."
                                        },
                                        "version": {
                                          "type": "string",
                                          "description": "KeyVault secret version."
                                        }
                                      },
                                      "required": [
                                        "name"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "vault",
                                    "vaultCert"
                                  ]
                                },
                                "secretName": {
                                  "type": "string",
                                  "description": "Secret where cert details are stored."
                                }
                              }
                            },
                            "systemAssignedManagedIdentity": {
                              "description": "Managed identity remote broker authentication method.",
                              "type": "object",
                              "properties": {
                                "audience": {
                                  "type": "string",
                                  "description": "Token audience."
                                },
                                "extensionName": {
                                  "type": "string",
                                  "description": "Arc Extension name."
                                }
                              },
                              "required": [
                                "audience"
                              ]
                            }
                          }
                        },
                        "endpoint": {
                          "type": "string",
                          "description": "The endpoint of remote broker to connect to."
                        },
                        "protocol": {
                          "type": "string",
                          "description": "Protocol for remote connection.",
                          "default": "mqtt",
                          "enum": [
                            "mqtt",
                            "webSocket"
                          ],
                          "x-ms-enum": {
                            "name": "MqttBridgeRemoteBrokerProtocol",
                            "modelAsString": true,
                            "values": [
                              {
                                "name": "mqtt",
                                "value": "mqtt",
                                "description": "MQTT protocol."
                              },
                              {
                                "name": "webSocket",
                                "value": "webSocket",
                                "description": "MQTT over WebSocket protocol."
                              }
                            ]
                          }
                        },
                        "tls": {
                          "description": "TLS details for Remote broker Connection.",
                          "type": "object",
                          "properties": {
                            "tlsEnabled": {
                              "type": "boolean",
                              "description": "Tls Enabled on Remote Broker Connection."
                            },
                            "trustedCaCertificateConfigMap": {
                              "type": "string",
                              "description": "Trusted CA certificate name for Remote Broker."
                            }
                          },
                          "required": [
                            "tlsEnabled"
                          ]
                        }
                      },
                      "required": [
                        "authentication",
                        "endpoint",
                        "tls"
                      ]
                    }
                  },
                  "required": [
                    "image",
                    "protocol",
                    "remoteBrokerConnection"
                  ]
                },
                "extendedLocation": {
                  "description": "Extended Location",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ],
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The name of the extended location."
                    },
                    "type": {
                      "description": "Type of ExtendedLocation.",
                      "type": "string",
                      "enum": [
                        "CustomLocation"
                      ],
                      "x-ms-enum": {
                        "name": "ExtendedLocationType",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "CustomLocation",
                            "value": "CustomLocation",
                            "description": "CustomLocation type"
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "name",
                    "type"
                  ]
                }
              },
              "required": [
                "extendedLocation"
              ]
            }
          }
        }
      },
      "delete": {
        "operationId": "MqttBridgeConnector_Delete",
        "tags": [
          "MqttBridgeConnector"
        ],
        "description": "Delete a MqttBridgeConnectorResource",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group. The name is case insensitive.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "x-ms-parameter-location": "method"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "mqttBridgeConnectorName",
            "in": "path",
            "description": "Name of MQ mqttBridgeConnector resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          }
        ],
        "responses": {
          "202": {
            "description": "Resource deletion accepted.",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              },
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "204": {
            "description": "Resource does not exist."
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTOperationsMQ/mq/{mqName}/mqttBridgeConnector/{mqttBridgeConnectorName}/topicMap": {
      "get": {
        "operationId": "MqttBridgeTopicMap_ListByMqttBridgeConnectorResource",
        "tags": [
          "MqttBridgeTopicMap"
        ],
        "description": "List MqttBridgeTopicMapResource resources by MqttBridgeConnectorResource",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group. The name is case insensitive.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "x-ms-parameter-location": "method"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "mqttBridgeConnectorName",
            "in": "path",
            "description": "Name of MQ mqttBridgeConnector resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "type": "object",
              "description": "The response of a MqttBridgeTopicMapResource list operation.",
              "properties": {
                "value": {
                  "type": "array",
                  "description": "The MqttBridgeTopicMapResource items on this page",
                  "items": {
                    "type": "object",
                    "description": "MQ mqttBridgeTopicMap resource",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                        "readOnly": true
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the resource",
                        "readOnly": true
                      },
                      "type": {
                        "type": "string",
                        "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                        "readOnly": true
                      },
                      "systemData": {
                        "type": "object",
                        "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                        "readOnly": true,
                        "properties": {
                          "createdBy": {
                            "type": "string",
                            "description": "The identity that created the resource."
                          },
                          "createdByType": {
                            "type": "string",
                            "description": "The type of identity that created the resource.",
                            "enum": [
                              "User",
                              "Application",
                              "ManagedIdentity",
                              "Key"
                            ],
                            "x-ms-enum": {
                              "name": "createdByType",
                              "modelAsString": true
                            }
                          },
                          "createdAt": {
                            "type": "string",
                            "format": "date-time",
                            "description": "The timestamp of resource creation (UTC)."
                          },
                          "lastModifiedBy": {
                            "type": "string",
                            "description": "The identity that last modified the resource."
                          },
                          "lastModifiedByType": {
                            "type": "string",
                            "description": "The type of identity that last modified the resource.",
                            "enum": [
                              "User",
                              "Application",
                              "ManagedIdentity",
                              "Key"
                            ],
                            "x-ms-enum": {
                              "name": "createdByType",
                              "modelAsString": true
                            }
                          },
                          "lastModifiedAt": {
                            "type": "string",
                            "format": "date-time",
                            "description": "The timestamp of resource last modification (UTC)"
                          }
                        }
                      },
                      "tags": {
                        "type": "object",
                        "description": "Resource tags.",
                        "additionalProperties": {
                          "type": "string"
                        },
                        "x-ms-mutability": [
                          "read",
                          "create",
                          "update"
                        ]
                      },
                      "location": {
                        "type": "string",
                        "description": "The geo-location where the resource lives",
                        "x-ms-mutability": [
                          "read",
                          "create"
                        ]
                      },
                      "properties": {
                        "description": "The resource-specific properties for this resource.",
                        "x-ms-client-flatten": true,
                        "type": "object",
                        "properties": {
                          "mqttBridgeConnectorRef": {
                            "type": "string",
                            "description": "The MqttBridgeConnector CRD it refers to."
                          },
                          "routes": {
                            "type": "array",
                            "description": "The route details for MqttBridge connector.",
                            "items": {
                              "type": "object",
                              "description": "MqttBridgeTopicMap route properties",
                              "properties": {
                                "direction": {
                                  "description": "Direction of the route.",
                                  "type": "string",
                                  "enum": [
                                    "remote-to-local",
                                    "local-to-remote"
                                  ],
                                  "x-ms-enum": {
                                    "name": "MqttBridgeRouteDirection",
                                    "modelAsString": true,
                                    "values": [
                                      {
                                        "name": "RemoteToLocal",
                                        "value": "remote-to-local",
                                        "description": "Remote to Local Broker."
                                      },
                                      {
                                        "name": "LocalToRemote",
                                        "value": "local-to-remote",
                                        "description": "Local to Remote Broker."
                                      }
                                    ]
                                  }
                                },
                                "name": {
                                  "type": "string",
                                  "description": "Name of the route."
                                },
                                "qos": {
                                  "type": "integer",
                                  "format": "int32",
                                  "description": "Qos for MQTT connection.",
                                  "default": 1,
                                  "minimum": 0,
                                  "maximum": 2
                                },
                                "sharedSubscription": {
                                  "description": "Shared subscription topic details.",
                                  "type": "object",
                                  "properties": {
                                    "groupMinimumShareNumber": {
                                      "type": "integer",
                                      "format": "int32",
                                      "description": "The group shared subscription minimum share number.",
                                      "minimum": 0,
                                      "maximum": 255
                                    },
                                    "groupName": {
                                      "type": "string",
                                      "description": "The group name for Shared subscription."
                                    }
                                  },
                                  "required": [
                                    "groupMinimumShareNumber",
                                    "groupName"
                                  ]
                                },
                                "source": {
                                  "type": "string",
                                  "description": "Source topic of the route."
                                },
                                "target": {
                                  "type": "string",
                                  "description": "Target topic of the route. Ignore if same as source"
                                }
                              },
                              "required": [
                                "direction",
                                "name",
                                "source"
                              ]
                            },
                            "x-ms-identifiers": []
                          },
                          "provisioningState": {
                            "description": "The status of the last operation.",
                            "readOnly": true,
                            "type": "string",
                            "enum": [
                              "Succeeded",
                              "Failed",
                              "Canceled",
                              "Provisioning",
                              "Updating",
                              "Deleting",
                              "Accepted"
                            ],
                            "x-ms-enum": {
                              "name": "ProvisioningState",
                              "modelAsString": true,
                              "values": [
                                {
                                  "name": "Succeeded",
                                  "value": "Succeeded",
                                  "description": "Resource has been created."
                                },
                                {
                                  "name": "Failed",
                                  "value": "Failed",
                                  "description": "Resource creation failed."
                                },
                                {
                                  "name": "Canceled",
                                  "value": "Canceled",
                                  "description": "Resource creation was canceled."
                                },
                                {
                                  "name": "Provisioning",
                                  "value": "Provisioning",
                                  "description": "Resource is getting provisioned."
                                },
                                {
                                  "name": "Updating",
                                  "value": "Updating",
                                  "description": "Resource is Updating."
                                },
                                {
                                  "name": "Deleting",
                                  "value": "Deleting",
                                  "description": "Resource is Deleting."
                                },
                                {
                                  "name": "Accepted",
                                  "value": "Accepted",
                                  "description": "Resource has been Accepted."
                                }
                              ]
                            }
                          }
                        },
                        "required": [
                          "mqttBridgeConnectorRef"
                        ]
                      },
                      "extendedLocation": {
                        "description": "Extended Location",
                        "x-ms-mutability": [
                          "read",
                          "create"
                        ],
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "The name of the extended location."
                          },
                          "type": {
                            "description": "Type of ExtendedLocation.",
                            "type": "string",
                            "enum": [
                              "CustomLocation"
                            ],
                            "x-ms-enum": {
                              "name": "ExtendedLocationType",
                              "modelAsString": true,
                              "values": [
                                {
                                  "name": "CustomLocation",
                                  "value": "CustomLocation",
                                  "description": "CustomLocation type"
                                }
                              ]
                            }
                          }
                        },
                        "required": [
                          "name",
                          "type"
                        ]
                      }
                    },
                    "required": [
                      "extendedLocation"
                    ]
                  }
                },
                "nextLink": {
                  "type": "string",
                  "format": "uri",
                  "description": "The link to the next page of items"
                }
              },
              "required": [
                "value"
              ]
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTOperationsMQ/mq/{mqName}/mqttBridgeConnector/{mqttBridgeConnectorName}/topicMap/{topicMapName}": {
      "get": {
        "operationId": "MqttBridgeTopicMap_Get",
        "tags": [
          "MqttBridgeTopicMap"
        ],
        "description": "Get a MqttBridgeTopicMapResource",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group. The name is case insensitive.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "x-ms-parameter-location": "method"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "mqttBridgeConnectorName",
            "in": "path",
            "description": "Name of MQ mqttBridgeConnector resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "topicMapName",
            "in": "path",
            "description": "Name of MQ mqttBridgeTopicMap resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "type": "object",
              "description": "MQ mqttBridgeTopicMap resource",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "description": "The name of the resource",
                  "readOnly": true
                },
                "type": {
                  "type": "string",
                  "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                  "readOnly": true
                },
                "systemData": {
                  "type": "object",
                  "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                  "readOnly": true,
                  "properties": {
                    "createdBy": {
                      "type": "string",
                      "description": "The identity that created the resource."
                    },
                    "createdByType": {
                      "type": "string",
                      "description": "The type of identity that created the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource creation (UTC)."
                    },
                    "lastModifiedBy": {
                      "type": "string",
                      "description": "The identity that last modified the resource."
                    },
                    "lastModifiedByType": {
                      "type": "string",
                      "description": "The type of identity that last modified the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "lastModifiedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource last modification (UTC)"
                    }
                  }
                },
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "x-ms-mutability": [
                    "read",
                    "create",
                    "update"
                  ]
                },
                "location": {
                  "type": "string",
                  "description": "The geo-location where the resource lives",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ]
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "mqttBridgeConnectorRef": {
                      "type": "string",
                      "description": "The MqttBridgeConnector CRD it refers to."
                    },
                    "routes": {
                      "type": "array",
                      "description": "The route details for MqttBridge connector.",
                      "items": {
                        "type": "object",
                        "description": "MqttBridgeTopicMap route properties",
                        "properties": {
                          "direction": {
                            "description": "Direction of the route.",
                            "type": "string",
                            "enum": [
                              "remote-to-local",
                              "local-to-remote"
                            ],
                            "x-ms-enum": {
                              "name": "MqttBridgeRouteDirection",
                              "modelAsString": true,
                              "values": [
                                {
                                  "name": "RemoteToLocal",
                                  "value": "remote-to-local",
                                  "description": "Remote to Local Broker."
                                },
                                {
                                  "name": "LocalToRemote",
                                  "value": "local-to-remote",
                                  "description": "Local to Remote Broker."
                                }
                              ]
                            }
                          },
                          "name": {
                            "type": "string",
                            "description": "Name of the route."
                          },
                          "qos": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Qos for MQTT connection.",
                            "default": 1,
                            "minimum": 0,
                            "maximum": 2
                          },
                          "sharedSubscription": {
                            "description": "Shared subscription topic details.",
                            "type": "object",
                            "properties": {
                              "groupMinimumShareNumber": {
                                "type": "integer",
                                "format": "int32",
                                "description": "The group shared subscription minimum share number.",
                                "minimum": 0,
                                "maximum": 255
                              },
                              "groupName": {
                                "type": "string",
                                "description": "The group name for Shared subscription."
                              }
                            },
                            "required": [
                              "groupMinimumShareNumber",
                              "groupName"
                            ]
                          },
                          "source": {
                            "type": "string",
                            "description": "Source topic of the route."
                          },
                          "target": {
                            "type": "string",
                            "description": "Target topic of the route. Ignore if same as source"
                          }
                        },
                        "required": [
                          "direction",
                          "name",
                          "source"
                        ]
                      },
                      "x-ms-identifiers": []
                    },
                    "provisioningState": {
                      "description": "The status of the last operation.",
                      "readOnly": true,
                      "type": "string",
                      "enum": [
                        "Succeeded",
                        "Failed",
                        "Canceled",
                        "Provisioning",
                        "Updating",
                        "Deleting",
                        "Accepted"
                      ],
                      "x-ms-enum": {
                        "name": "ProvisioningState",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Succeeded",
                            "value": "Succeeded",
                            "description": "Resource has been created."
                          },
                          {
                            "name": "Failed",
                            "value": "Failed",
                            "description": "Resource creation failed."
                          },
                          {
                            "name": "Canceled",
                            "value": "Canceled",
                            "description": "Resource creation was canceled."
                          },
                          {
                            "name": "Provisioning",
                            "value": "Provisioning",
                            "description": "Resource is getting provisioned."
                          },
                          {
                            "name": "Updating",
                            "value": "Updating",
                            "description": "Resource is Updating."
                          },
                          {
                            "name": "Deleting",
                            "value": "Deleting",
                            "description": "Resource is Deleting."
                          },
                          {
                            "name": "Accepted",
                            "value": "Accepted",
                            "description": "Resource has been Accepted."
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "mqttBridgeConnectorRef"
                  ]
                },
                "extendedLocation": {
                  "description": "Extended Location",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ],
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The name of the extended location."
                    },
                    "type": {
                      "description": "Type of ExtendedLocation.",
                      "type": "string",
                      "enum": [
                        "CustomLocation"
                      ],
                      "x-ms-enum": {
                        "name": "ExtendedLocationType",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "CustomLocation",
                            "value": "CustomLocation",
                            "description": "CustomLocation type"
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "name",
                    "type"
                  ]
                }
              },
              "required": [
                "extendedLocation"
              ]
            }
          }
        }
      },
      "put": {
        "operationId": "MqttBridgeTopicMap_CreateOrUpdate",
        "tags": [
          "MqttBridgeTopicMap"
        ],
        "description": "Create a MqttBridgeTopicMapResource",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group. The name is case insensitive.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "x-ms-parameter-location": "method"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "mqttBridgeConnectorName",
            "in": "path",
            "description": "Name of MQ mqttBridgeConnector resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "topicMapName",
            "in": "path",
            "description": "Name of MQ mqttBridgeTopicMap resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "resource",
            "in": "body",
            "description": "Resource create parameters.",
            "required": true,
            "schema": {
              "type": "object",
              "description": "MQ mqttBridgeTopicMap resource",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "description": "The name of the resource",
                  "readOnly": true
                },
                "type": {
                  "type": "string",
                  "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                  "readOnly": true
                },
                "systemData": {
                  "type": "object",
                  "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                  "readOnly": true,
                  "properties": {
                    "createdBy": {
                      "type": "string",
                      "description": "The identity that created the resource."
                    },
                    "createdByType": {
                      "type": "string",
                      "description": "The type of identity that created the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource creation (UTC)."
                    },
                    "lastModifiedBy": {
                      "type": "string",
                      "description": "The identity that last modified the resource."
                    },
                    "lastModifiedByType": {
                      "type": "string",
                      "description": "The type of identity that last modified the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "lastModifiedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource last modification (UTC)"
                    }
                  }
                },
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "x-ms-mutability": [
                    "read",
                    "create",
                    "update"
                  ]
                },
                "location": {
                  "type": "string",
                  "description": "The geo-location where the resource lives",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ]
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "mqttBridgeConnectorRef": {
                      "type": "string",
                      "description": "The MqttBridgeConnector CRD it refers to."
                    },
                    "routes": {
                      "type": "array",
                      "description": "The route details for MqttBridge connector.",
                      "items": {
                        "type": "object",
                        "description": "MqttBridgeTopicMap route properties",
                        "properties": {
                          "direction": {
                            "description": "Direction of the route.",
                            "type": "string",
                            "enum": [
                              "remote-to-local",
                              "local-to-remote"
                            ],
                            "x-ms-enum": {
                              "name": "MqttBridgeRouteDirection",
                              "modelAsString": true,
                              "values": [
                                {
                                  "name": "RemoteToLocal",
                                  "value": "remote-to-local",
                                  "description": "Remote to Local Broker."
                                },
                                {
                                  "name": "LocalToRemote",
                                  "value": "local-to-remote",
                                  "description": "Local to Remote Broker."
                                }
                              ]
                            }
                          },
                          "name": {
                            "type": "string",
                            "description": "Name of the route."
                          },
                          "qos": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Qos for MQTT connection.",
                            "default": 1,
                            "minimum": 0,
                            "maximum": 2
                          },
                          "sharedSubscription": {
                            "description": "Shared subscription topic details.",
                            "type": "object",
                            "properties": {
                              "groupMinimumShareNumber": {
                                "type": "integer",
                                "format": "int32",
                                "description": "The group shared subscription minimum share number.",
                                "minimum": 0,
                                "maximum": 255
                              },
                              "groupName": {
                                "type": "string",
                                "description": "The group name for Shared subscription."
                              }
                            },
                            "required": [
                              "groupMinimumShareNumber",
                              "groupName"
                            ]
                          },
                          "source": {
                            "type": "string",
                            "description": "Source topic of the route."
                          },
                          "target": {
                            "type": "string",
                            "description": "Target topic of the route. Ignore if same as source"
                          }
                        },
                        "required": [
                          "direction",
                          "name",
                          "source"
                        ]
                      },
                      "x-ms-identifiers": []
                    },
                    "provisioningState": {
                      "description": "The status of the last operation.",
                      "readOnly": true,
                      "type": "string",
                      "enum": [
                        "Succeeded",
                        "Failed",
                        "Canceled",
                        "Provisioning",
                        "Updating",
                        "Deleting",
                        "Accepted"
                      ],
                      "x-ms-enum": {
                        "name": "ProvisioningState",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Succeeded",
                            "value": "Succeeded",
                            "description": "Resource has been created."
                          },
                          {
                            "name": "Failed",
                            "value": "Failed",
                            "description": "Resource creation failed."
                          },
                          {
                            "name": "Canceled",
                            "value": "Canceled",
                            "description": "Resource creation was canceled."
                          },
                          {
                            "name": "Provisioning",
                            "value": "Provisioning",
                            "description": "Resource is getting provisioned."
                          },
                          {
                            "name": "Updating",
                            "value": "Updating",
                            "description": "Resource is Updating."
                          },
                          {
                            "name": "Deleting",
                            "value": "Deleting",
                            "description": "Resource is Deleting."
                          },
                          {
                            "name": "Accepted",
                            "value": "Accepted",
                            "description": "Resource has been Accepted."
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "mqttBridgeConnectorRef"
                  ]
                },
                "extendedLocation": {
                  "description": "Extended Location",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ],
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The name of the extended location."
                    },
                    "type": {
                      "description": "Type of ExtendedLocation.",
                      "type": "string",
                      "enum": [
                        "CustomLocation"
                      ],
                      "x-ms-enum": {
                        "name": "ExtendedLocationType",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "CustomLocation",
                            "value": "CustomLocation",
                            "description": "CustomLocation type"
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "name",
                    "type"
                  ]
                }
              },
              "required": [
                "extendedLocation"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resource 'MqttBridgeTopicMapResource' update operation succeeded",
            "schema": {
              "type": "object",
              "description": "MQ mqttBridgeTopicMap resource",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "description": "The name of the resource",
                  "readOnly": true
                },
                "type": {
                  "type": "string",
                  "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                  "readOnly": true
                },
                "systemData": {
                  "type": "object",
                  "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                  "readOnly": true,
                  "properties": {
                    "createdBy": {
                      "type": "string",
                      "description": "The identity that created the resource."
                    },
                    "createdByType": {
                      "type": "string",
                      "description": "The type of identity that created the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource creation (UTC)."
                    },
                    "lastModifiedBy": {
                      "type": "string",
                      "description": "The identity that last modified the resource."
                    },
                    "lastModifiedByType": {
                      "type": "string",
                      "description": "The type of identity that last modified the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "lastModifiedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource last modification (UTC)"
                    }
                  }
                },
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "x-ms-mutability": [
                    "read",
                    "create",
                    "update"
                  ]
                },
                "location": {
                  "type": "string",
                  "description": "The geo-location where the resource lives",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ]
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "mqttBridgeConnectorRef": {
                      "type": "string",
                      "description": "The MqttBridgeConnector CRD it refers to."
                    },
                    "routes": {
                      "type": "array",
                      "description": "The route details for MqttBridge connector.",
                      "items": {
                        "type": "object",
                        "description": "MqttBridgeTopicMap route properties",
                        "properties": {
                          "direction": {
                            "description": "Direction of the route.",
                            "type": "string",
                            "enum": [
                              "remote-to-local",
                              "local-to-remote"
                            ],
                            "x-ms-enum": {
                              "name": "MqttBridgeRouteDirection",
                              "modelAsString": true,
                              "values": [
                                {
                                  "name": "RemoteToLocal",
                                  "value": "remote-to-local",
                                  "description": "Remote to Local Broker."
                                },
                                {
                                  "name": "LocalToRemote",
                                  "value": "local-to-remote",
                                  "description": "Local to Remote Broker."
                                }
                              ]
                            }
                          },
                          "name": {
                            "type": "string",
                            "description": "Name of the route."
                          },
                          "qos": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Qos for MQTT connection.",
                            "default": 1,
                            "minimum": 0,
                            "maximum": 2
                          },
                          "sharedSubscription": {
                            "description": "Shared subscription topic details.",
                            "type": "object",
                            "properties": {
                              "groupMinimumShareNumber": {
                                "type": "integer",
                                "format": "int32",
                                "description": "The group shared subscription minimum share number.",
                                "minimum": 0,
                                "maximum": 255
                              },
                              "groupName": {
                                "type": "string",
                                "description": "The group name for Shared subscription."
                              }
                            },
                            "required": [
                              "groupMinimumShareNumber",
                              "groupName"
                            ]
                          },
                          "source": {
                            "type": "string",
                            "description": "Source topic of the route."
                          },
                          "target": {
                            "type": "string",
                            "description": "Target topic of the route. Ignore if same as source"
                          }
                        },
                        "required": [
                          "direction",
                          "name",
                          "source"
                        ]
                      },
                      "x-ms-identifiers": []
                    },
                    "provisioningState": {
                      "description": "The status of the last operation.",
                      "readOnly": true,
                      "type": "string",
                      "enum": [
                        "Succeeded",
                        "Failed",
                        "Canceled",
                        "Provisioning",
                        "Updating",
                        "Deleting",
                        "Accepted"
                      ],
                      "x-ms-enum": {
                        "name": "ProvisioningState",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Succeeded",
                            "value": "Succeeded",
                            "description": "Resource has been created."
                          },
                          {
                            "name": "Failed",
                            "value": "Failed",
                            "description": "Resource creation failed."
                          },
                          {
                            "name": "Canceled",
                            "value": "Canceled",
                            "description": "Resource creation was canceled."
                          },
                          {
                            "name": "Provisioning",
                            "value": "Provisioning",
                            "description": "Resource is getting provisioned."
                          },
                          {
                            "name": "Updating",
                            "value": "Updating",
                            "description": "Resource is Updating."
                          },
                          {
                            "name": "Deleting",
                            "value": "Deleting",
                            "description": "Resource is Deleting."
                          },
                          {
                            "name": "Accepted",
                            "value": "Accepted",
                            "description": "Resource has been Accepted."
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "mqttBridgeConnectorRef"
                  ]
                },
                "extendedLocation": {
                  "description": "Extended Location",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ],
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The name of the extended location."
                    },
                    "type": {
                      "description": "Type of ExtendedLocation.",
                      "type": "string",
                      "enum": [
                        "CustomLocation"
                      ],
                      "x-ms-enum": {
                        "name": "ExtendedLocationType",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "CustomLocation",
                            "value": "CustomLocation",
                            "description": "CustomLocation type"
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "name",
                    "type"
                  ]
                }
              },
              "required": [
                "extendedLocation"
              ]
            }
          },
          "201": {
            "description": "Resource 'MqttBridgeTopicMapResource' create operation succeeded",
            "schema": {
              "type": "object",
              "description": "MQ mqttBridgeTopicMap resource",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "description": "The name of the resource",
                  "readOnly": true
                },
                "type": {
                  "type": "string",
                  "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                  "readOnly": true
                },
                "systemData": {
                  "type": "object",
                  "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                  "readOnly": true,
                  "properties": {
                    "createdBy": {
                      "type": "string",
                      "description": "The identity that created the resource."
                    },
                    "createdByType": {
                      "type": "string",
                      "description": "The type of identity that created the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource creation (UTC)."
                    },
                    "lastModifiedBy": {
                      "type": "string",
                      "description": "The identity that last modified the resource."
                    },
                    "lastModifiedByType": {
                      "type": "string",
                      "description": "The type of identity that last modified the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "lastModifiedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource last modification (UTC)"
                    }
                  }
                },
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "x-ms-mutability": [
                    "read",
                    "create",
                    "update"
                  ]
                },
                "location": {
                  "type": "string",
                  "description": "The geo-location where the resource lives",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ]
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "mqttBridgeConnectorRef": {
                      "type": "string",
                      "description": "The MqttBridgeConnector CRD it refers to."
                    },
                    "routes": {
                      "type": "array",
                      "description": "The route details for MqttBridge connector.",
                      "items": {
                        "type": "object",
                        "description": "MqttBridgeTopicMap route properties",
                        "properties": {
                          "direction": {
                            "description": "Direction of the route.",
                            "type": "string",
                            "enum": [
                              "remote-to-local",
                              "local-to-remote"
                            ],
                            "x-ms-enum": {
                              "name": "MqttBridgeRouteDirection",
                              "modelAsString": true,
                              "values": [
                                {
                                  "name": "RemoteToLocal",
                                  "value": "remote-to-local",
                                  "description": "Remote to Local Broker."
                                },
                                {
                                  "name": "LocalToRemote",
                                  "value": "local-to-remote",
                                  "description": "Local to Remote Broker."
                                }
                              ]
                            }
                          },
                          "name": {
                            "type": "string",
                            "description": "Name of the route."
                          },
                          "qos": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Qos for MQTT connection.",
                            "default": 1,
                            "minimum": 0,
                            "maximum": 2
                          },
                          "sharedSubscription": {
                            "description": "Shared subscription topic details.",
                            "type": "object",
                            "properties": {
                              "groupMinimumShareNumber": {
                                "type": "integer",
                                "format": "int32",
                                "description": "The group shared subscription minimum share number.",
                                "minimum": 0,
                                "maximum": 255
                              },
                              "groupName": {
                                "type": "string",
                                "description": "The group name for Shared subscription."
                              }
                            },
                            "required": [
                              "groupMinimumShareNumber",
                              "groupName"
                            ]
                          },
                          "source": {
                            "type": "string",
                            "description": "Source topic of the route."
                          },
                          "target": {
                            "type": "string",
                            "description": "Target topic of the route. Ignore if same as source"
                          }
                        },
                        "required": [
                          "direction",
                          "name",
                          "source"
                        ]
                      },
                      "x-ms-identifiers": []
                    },
                    "provisioningState": {
                      "description": "The status of the last operation.",
                      "readOnly": true,
                      "type": "string",
                      "enum": [
                        "Succeeded",
                        "Failed",
                        "Canceled",
                        "Provisioning",
                        "Updating",
                        "Deleting",
                        "Accepted"
                      ],
                      "x-ms-enum": {
                        "name": "ProvisioningState",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Succeeded",
                            "value": "Succeeded",
                            "description": "Resource has been created."
                          },
                          {
                            "name": "Failed",
                            "value": "Failed",
                            "description": "Resource creation failed."
                          },
                          {
                            "name": "Canceled",
                            "value": "Canceled",
                            "description": "Resource creation was canceled."
                          },
                          {
                            "name": "Provisioning",
                            "value": "Provisioning",
                            "description": "Resource is getting provisioned."
                          },
                          {
                            "name": "Updating",
                            "value": "Updating",
                            "description": "Resource is Updating."
                          },
                          {
                            "name": "Deleting",
                            "value": "Deleting",
                            "description": "Resource is Deleting."
                          },
                          {
                            "name": "Accepted",
                            "value": "Accepted",
                            "description": "Resource has been Accepted."
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "mqttBridgeConnectorRef"
                  ]
                },
                "extendedLocation": {
                  "description": "Extended Location",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ],
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The name of the extended location."
                    },
                    "type": {
                      "description": "Type of ExtendedLocation.",
                      "type": "string",
                      "enum": [
                        "CustomLocation"
                      ],
                      "x-ms-enum": {
                        "name": "ExtendedLocationType",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "CustomLocation",
                            "value": "CustomLocation",
                            "description": "CustomLocation type"
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "name",
                    "type"
                  ]
                }
              },
              "required": [
                "extendedLocation"
              ]
            },
            "headers": {
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "MqttBridgeTopicMap_Update",
        "tags": [
          "MqttBridgeTopicMap"
        ],
        "description": "Update a MqttBridgeTopicMapResource",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group. The name is case insensitive.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "x-ms-parameter-location": "method"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "mqttBridgeConnectorName",
            "in": "path",
            "description": "Name of MQ mqttBridgeConnector resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "topicMapName",
            "in": "path",
            "description": "Name of MQ mqttBridgeTopicMap resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "properties",
            "in": "body",
            "description": "The resource properties to be updated.",
            "required": true,
            "schema": {
              "type": "object",
              "description": "The type used for update operations of the MqttBridgeTopicMapResource.",
              "properties": {
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "mqttBridgeConnectorRef": {
                      "type": "string",
                      "description": "The MqttBridgeConnector CRD it refers to."
                    },
                    "routes": {
                      "type": "array",
                      "description": "The route details for MqttBridge connector.",
                      "items": {
                        "type": "object",
                        "description": "MqttBridgeTopicMap route properties",
                        "properties": {
                          "direction": {
                            "description": "Direction of the route.",
                            "type": "string",
                            "enum": [
                              "remote-to-local",
                              "local-to-remote"
                            ],
                            "x-ms-enum": {
                              "name": "MqttBridgeRouteDirection",
                              "modelAsString": true,
                              "values": [
                                {
                                  "name": "RemoteToLocal",
                                  "value": "remote-to-local",
                                  "description": "Remote to Local Broker."
                                },
                                {
                                  "name": "LocalToRemote",
                                  "value": "local-to-remote",
                                  "description": "Local to Remote Broker."
                                }
                              ]
                            }
                          },
                          "name": {
                            "type": "string",
                            "description": "Name of the route."
                          },
                          "qos": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Qos for MQTT connection.",
                            "default": 1,
                            "minimum": 0,
                            "maximum": 2
                          },
                          "sharedSubscription": {
                            "description": "Shared subscription topic details.",
                            "type": "object",
                            "properties": {
                              "groupMinimumShareNumber": {
                                "type": "integer",
                                "format": "int32",
                                "description": "The group shared subscription minimum share number.",
                                "minimum": 0,
                                "maximum": 255
                              },
                              "groupName": {
                                "type": "string",
                                "description": "The group name for Shared subscription."
                              }
                            },
                            "required": [
                              "groupMinimumShareNumber",
                              "groupName"
                            ]
                          },
                          "source": {
                            "type": "string",
                            "description": "Source topic of the route."
                          },
                          "target": {
                            "type": "string",
                            "description": "Target topic of the route. Ignore if same as source"
                          }
                        },
                        "required": [
                          "direction",
                          "name",
                          "source"
                        ]
                      },
                      "x-ms-identifiers": []
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Azure operation completed successfully.",
            "schema": {
              "type": "object",
              "description": "MQ mqttBridgeTopicMap resource",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                  "readOnly": true
                },
                "name": {
                  "type": "string",
                  "description": "The name of the resource",
                  "readOnly": true
                },
                "type": {
                  "type": "string",
                  "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                  "readOnly": true
                },
                "systemData": {
                  "type": "object",
                  "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                  "readOnly": true,
                  "properties": {
                    "createdBy": {
                      "type": "string",
                      "description": "The identity that created the resource."
                    },
                    "createdByType": {
                      "type": "string",
                      "description": "The type of identity that created the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource creation (UTC)."
                    },
                    "lastModifiedBy": {
                      "type": "string",
                      "description": "The identity that last modified the resource."
                    },
                    "lastModifiedByType": {
                      "type": "string",
                      "description": "The type of identity that last modified the resource.",
                      "enum": [
                        "User",
                        "Application",
                        "ManagedIdentity",
                        "Key"
                      ],
                      "x-ms-enum": {
                        "name": "createdByType",
                        "modelAsString": true
                      }
                    },
                    "lastModifiedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of resource last modification (UTC)"
                    }
                  }
                },
                "tags": {
                  "type": "object",
                  "description": "Resource tags.",
                  "additionalProperties": {
                    "type": "string"
                  },
                  "x-ms-mutability": [
                    "read",
                    "create",
                    "update"
                  ]
                },
                "location": {
                  "type": "string",
                  "description": "The geo-location where the resource lives",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ]
                },
                "properties": {
                  "description": "The resource-specific properties for this resource.",
                  "x-ms-client-flatten": true,
                  "type": "object",
                  "properties": {
                    "mqttBridgeConnectorRef": {
                      "type": "string",
                      "description": "The MqttBridgeConnector CRD it refers to."
                    },
                    "routes": {
                      "type": "array",
                      "description": "The route details for MqttBridge connector.",
                      "items": {
                        "type": "object",
                        "description": "MqttBridgeTopicMap route properties",
                        "properties": {
                          "direction": {
                            "description": "Direction of the route.",
                            "type": "string",
                            "enum": [
                              "remote-to-local",
                              "local-to-remote"
                            ],
                            "x-ms-enum": {
                              "name": "MqttBridgeRouteDirection",
                              "modelAsString": true,
                              "values": [
                                {
                                  "name": "RemoteToLocal",
                                  "value": "remote-to-local",
                                  "description": "Remote to Local Broker."
                                },
                                {
                                  "name": "LocalToRemote",
                                  "value": "local-to-remote",
                                  "description": "Local to Remote Broker."
                                }
                              ]
                            }
                          },
                          "name": {
                            "type": "string",
                            "description": "Name of the route."
                          },
                          "qos": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Qos for MQTT connection.",
                            "default": 1,
                            "minimum": 0,
                            "maximum": 2
                          },
                          "sharedSubscription": {
                            "description": "Shared subscription topic details.",
                            "type": "object",
                            "properties": {
                              "groupMinimumShareNumber": {
                                "type": "integer",
                                "format": "int32",
                                "description": "The group shared subscription minimum share number.",
                                "minimum": 0,
                                "maximum": 255
                              },
                              "groupName": {
                                "type": "string",
                                "description": "The group name for Shared subscription."
                              }
                            },
                            "required": [
                              "groupMinimumShareNumber",
                              "groupName"
                            ]
                          },
                          "source": {
                            "type": "string",
                            "description": "Source topic of the route."
                          },
                          "target": {
                            "type": "string",
                            "description": "Target topic of the route. Ignore if same as source"
                          }
                        },
                        "required": [
                          "direction",
                          "name",
                          "source"
                        ]
                      },
                      "x-ms-identifiers": []
                    },
                    "provisioningState": {
                      "description": "The status of the last operation.",
                      "readOnly": true,
                      "type": "string",
                      "enum": [
                        "Succeeded",
                        "Failed",
                        "Canceled",
                        "Provisioning",
                        "Updating",
                        "Deleting",
                        "Accepted"
                      ],
                      "x-ms-enum": {
                        "name": "ProvisioningState",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Succeeded",
                            "value": "Succeeded",
                            "description": "Resource has been created."
                          },
                          {
                            "name": "Failed",
                            "value": "Failed",
                            "description": "Resource creation failed."
                          },
                          {
                            "name": "Canceled",
                            "value": "Canceled",
                            "description": "Resource creation was canceled."
                          },
                          {
                            "name": "Provisioning",
                            "value": "Provisioning",
                            "description": "Resource is getting provisioned."
                          },
                          {
                            "name": "Updating",
                            "value": "Updating",
                            "description": "Resource is Updating."
                          },
                          {
                            "name": "Deleting",
                            "value": "Deleting",
                            "description": "Resource is Deleting."
                          },
                          {
                            "name": "Accepted",
                            "value": "Accepted",
                            "description": "Resource has been Accepted."
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "mqttBridgeConnectorRef"
                  ]
                },
                "extendedLocation": {
                  "description": "Extended Location",
                  "x-ms-mutability": [
                    "read",
                    "create"
                  ],
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The name of the extended location."
                    },
                    "type": {
                      "description": "Type of ExtendedLocation.",
                      "type": "string",
                      "enum": [
                        "CustomLocation"
                      ],
                      "x-ms-enum": {
                        "name": "ExtendedLocationType",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "CustomLocation",
                            "value": "CustomLocation",
                            "description": "CustomLocation type"
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "name",
                    "type"
                  ]
                }
              },
              "required": [
                "extendedLocation"
              ]
            }
          }
        }
      },
      "delete": {
        "operationId": "MqttBridgeTopicMap_Delete",
        "tags": [
          "MqttBridgeTopicMap"
        ],
        "description": "Delete a MqttBridgeTopicMapResource",
        "parameters": [
          {
            "name": "api-version",
            "in": "query",
            "description": "The API version to use for this operation.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The ID of the target subscription.",
            "required": true,
            "type": "string",
            "minLength": 1
          },
          {
            "name": "resourceGroupName",
            "in": "path",
            "description": "The name of the resource group. The name is case insensitive.",
            "required": true,
            "type": "string",
            "minLength": 1,
            "maxLength": 90,
            "x-ms-parameter-location": "method"
          },
          {
            "name": "mqName",
            "in": "path",
            "description": "Name of MQ resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "mqttBridgeConnectorName",
            "in": "path",
            "description": "Name of MQ mqttBridgeConnector resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          },
          {
            "name": "topicMapName",
            "in": "path",
            "description": "Name of MQ mqttBridgeTopicMap resource",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$"
          }
        ],
        "responses": {
          "202": {
            "description": "Resource deletion accepted.",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The Location header contains the URL where the status of the long running operation can be checked."
              },
              "Retry-After": {
                "type": "integer",
                "format": "int32",
                "description": "The Retry-After header can indicate how long the client should wait before polling the operation status."
              }
            }
          },
          "204": {
            "description": "Resource does not exist."
          }
        }
      }
    }
  },
  "definitions": {
    "AuthorizationBasicRule": {
      "type": "object",
      "description": "BasicRules of AuthorizationConfig Polar rules are not supported",
      "properties": {
        "brokerResources": {
          "type": "array",
          "description": "This subfield defines the broker resources that the Basic Rule is applied on.",
          "items": {
            "type": "object",
            "description": "ResourceInfoDefinition properties of Basic Rule. This defines the objects that represent the actions or topics, such as - method.Connect, method.Publish, etc.",
            "properties": {
              "method": {
                "description": "The type of action that the clients can perform on the broker: Connect, Publish or Subscribe.",
                "type": "string",
                "enum": [
                  "Connect",
                  "Publish",
                  "Subscribe"
                ],
                "x-ms-enum": {
                  "name": "ResourceInfoDefinitionMethods",
                  "modelAsString": true,
                  "values": [
                    {
                      "name": "Connect",
                      "value": "Connect",
                      "description": "Allowed Connecting to Broker"
                    },
                    {
                      "name": "Publish",
                      "value": "Publish",
                      "description": "Allowed Publishing to Broker"
                    },
                    {
                      "name": "Subscribe",
                      "value": "Subscribe",
                      "description": "Allowed Subscribing to Broker"
                    }
                  ]
                }
              },
              "topics": {
                "type": "array",
                "description": "A list of topics or topic patterns that match the topics that the clients can publish or subscribe to. This subfield is required if the method is Publish or Subscribe.",
                "items": {
                  "type": "string"
                }
              }
            },
            "required": [
              "method"
            ]
          },
          "x-ms-identifiers": []
        },
        "principals": {
          "description": "This subfield defines the identities that represent the clients.",
          "type": "object",
          "properties": {
            "attributes": {
              "type": "array",
              "description": "A list of key-value pairs that match the attributes of the clients. The attributes are case-sensitive and must match the attributes provided by the clients during authentication.",
              "default": [],
              "items": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "x-ms-identifiers": []
            },
            "clientids": {
              "type": "array",
              "description": "A list of client IDs that match the clients. The client IDs are case-sensitive and must match the client IDs provided by the clients during connection.",
              "items": {
                "type": "string"
              }
            },
            "usernames": {
              "type": "array",
              "description": "A list of usernames that match the clients. The usernames are case-sensitive and must match the usernames provided by the clients during authentication.",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "required": [
        "brokerResources",
        "principals"
      ]
    },
    "AuthorizationConfig": {
      "type": "object",
      "description": "Broker AuthorizationConfig properties",
      "properties": {
        "enableCache": {
          "type": "boolean",
          "description": "Enable caching of the authorization rules.",
          "default": true
        },
        "rules": {
          "type": "array",
          "description": "Authorization Rules to be used. If no rule is set, but Authorization Resource is used that would mean DenyAll.",
          "items": {
            "type": "object",
            "description": "BasicRules of AuthorizationConfig Polar rules are not supported",
            "properties": {
              "brokerResources": {
                "type": "array",
                "description": "This subfield defines the broker resources that the Basic Rule is applied on.",
                "items": {
                  "type": "object",
                  "description": "ResourceInfoDefinition properties of Basic Rule. This defines the objects that represent the actions or topics, such as - method.Connect, method.Publish, etc.",
                  "properties": {
                    "method": {
                      "description": "The type of action that the clients can perform on the broker: Connect, Publish or Subscribe.",
                      "type": "string",
                      "enum": [
                        "Connect",
                        "Publish",
                        "Subscribe"
                      ],
                      "x-ms-enum": {
                        "name": "ResourceInfoDefinitionMethods",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "Connect",
                            "value": "Connect",
                            "description": "Allowed Connecting to Broker"
                          },
                          {
                            "name": "Publish",
                            "value": "Publish",
                            "description": "Allowed Publishing to Broker"
                          },
                          {
                            "name": "Subscribe",
                            "value": "Subscribe",
                            "description": "Allowed Subscribing to Broker"
                          }
                        ]
                      }
                    },
                    "topics": {
                      "type": "array",
                      "description": "A list of topics or topic patterns that match the topics that the clients can publish or subscribe to. This subfield is required if the method is Publish or Subscribe.",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "method"
                  ]
                },
                "x-ms-identifiers": []
              },
              "principals": {
                "description": "This subfield defines the identities that represent the clients.",
                "type": "object",
                "properties": {
                  "attributes": {
                    "type": "array",
                    "description": "A list of key-value pairs that match the attributes of the clients. The attributes are case-sensitive and must match the attributes provided by the clients during authentication.",
                    "default": [],
                    "items": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "x-ms-identifiers": []
                  },
                  "clientids": {
                    "type": "array",
                    "description": "A list of client IDs that match the clients. The client IDs are case-sensitive and must match the client IDs provided by the clients during connection.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "usernames": {
                    "type": "array",
                    "description": "A list of usernames that match the clients. The usernames are case-sensitive and must match the usernames provided by the clients during authentication.",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "required": [
              "brokerResources",
              "principals"
            ]
          },
          "x-ms-identifiers": []
        }
      }
    },
    "AutomaticCertMethod": {
      "type": "object",
      "description": "Automatic TLS server certificate management with cert-manager",
      "properties": {
        "duration": {
          "type": "string",
          "description": "Lifetime of automatically-managed certificate.",
          "default": "720h"
        },
        "issuerRef": {
          "description": "cert-manager issuerRef.",
          "type": "object",
          "properties": {
            "group": {
              "type": "string",
              "description": "group of issuer.",
              "default": "cert-manager.io"
            },
            "kind": {
              "type": "string",
              "description": "kind of issuer (Issuer or ClusterIssuer)."
            },
            "name": {
              "type": "string",
              "description": "name of issuer."
            }
          },
          "required": [
            "group",
            "kind",
            "name"
          ]
        },
        "privateKey": {
          "description": "Cert Manager private key.",
          "type": "object",
          "properties": {
            "algorithm": {
              "type": "string",
              "description": "algorithm for private key.",
              "default": "ECDSA"
            },
            "rotationPolicy": {
              "type": "string",
              "description": "cert-manager rotationPolicy.",
              "default": "Always"
            },
            "size": {
              "type": "integer",
              "format": "int32",
              "description": "size of private key.",
              "default": 256,
              "minimum": 0,
              "maximum": 65535
            }
          },
          "required": [
            "algorithm",
            "rotationPolicy",
            "size"
          ]
        },
        "renewBefore": {
          "type": "string",
          "description": "When to begin renewing automatically-managed certificate.",
          "default": "240h"
        },
        "san": {
          "description": "Additional SANs to include in the certificate.",
          "type": "object",
          "properties": {
            "dns": {
              "type": "array",
              "description": "DNS SANs.",
              "default": [],
              "items": {
                "type": "string"
              }
            },
            "ip": {
              "type": "array",
              "description": "IP address SANs.",
              "default": [],
              "items": {
                "type": "string"
              }
            }
          },
          "required": [
            "dns",
            "ip"
          ]
        },
        "secretName": {
          "type": "string",
          "description": "Secret for storing server certificate. Any existing data will be overwritten."
        },
        "secretNamespace": {
          "type": "string",
          "description": "Certificate K8S namespace. Omit to use default namespace."
        }
      },
      "required": [
        "issuerRef"
      ]
    },
    "AutomaticCertMethodUpdate": {
      "type": "object",
      "description": "Automatic TLS server certificate management with cert-manager",
      "properties": {
        "duration": {
          "type": "string",
          "description": "Lifetime of automatically-managed certificate.",
          "default": "720h"
        },
        "issuerRef": {
          "description": "cert-manager issuerRef.",
          "type": "object",
          "properties": {
            "group": {
              "type": "string",
              "description": "group of issuer.",
              "default": "cert-manager.io"
            },
            "kind": {
              "type": "string",
              "description": "kind of issuer (Issuer or ClusterIssuer)."
            },
            "name": {
              "type": "string",
              "description": "name of issuer."
            }
          }
        },
        "privateKey": {
          "description": "Cert Manager private key.",
          "type": "object",
          "properties": {
            "algorithm": {
              "type": "string",
              "description": "algorithm for private key.",
              "default": "ECDSA"
            },
            "rotationPolicy": {
              "type": "string",
              "description": "cert-manager rotationPolicy.",
              "default": "Always"
            },
            "size": {
              "type": "integer",
              "format": "int32",
              "description": "size of private key.",
              "default": 256,
              "minimum": 0,
              "maximum": 65535
            }
          }
        },
        "renewBefore": {
          "type": "string",
          "description": "When to begin renewing automatically-managed certificate.",
          "default": "240h"
        },
        "san": {
          "description": "Additional SANs to include in the certificate.",
          "type": "object",
          "properties": {
            "dns": {
              "type": "array",
              "description": "DNS SANs.",
              "default": [],
              "items": {
                "type": "string"
              }
            },
            "ip": {
              "type": "array",
              "description": "IP address SANs.",
              "default": [],
              "items": {
                "type": "string"
              }
            }
          }
        },
        "secretName": {
          "type": "string",
          "description": "Secret for storing server certificate. Any existing data will be overwritten."
        },
        "secretNamespace": {
          "type": "string",
          "description": "Certificate K8S namespace. Omit to use default namespace."
        }
      }
    },
    "BackendChain": {
      "type": "object",
      "description": "Desired properties of the Frontend Instances of the DMQTT Broker",
      "properties": {
        "partitions": {
          "type": "integer",
          "format": "int32",
          "description": "Partitions is desired number of physical backend chains of the given distributed MQTT broker.",
          "minimum": 0,
          "maximum": 65535
        },
        "redundancyFactor": {
          "type": "integer",
          "format": "int32",
          "description": "Redundancy Factor is desired numbers of broker instances in one chain.",
          "minimum": 0,
          "maximum": 65535
        },
        "temporaryDiskTransferEnabled": {
          "type": "boolean",
          "description": "Defines whether disk transfer is enabled or not."
        },
        "temporaryDiskTransferHighWatermarkPercent": {
          "type": "integer",
          "format": "int32",
          "description": "Defines the percentage usage of buffer pool above which disk transfer will start.",
          "minimum": 0,
          "maximum": 100
        },
        "temporaryDiskTransferLowWatermarkPercent": {
          "type": "integer",
          "format": "int32",
          "description": "Defines the percentage usage of buffer pool below which disk transfer will stop.",
          "minimum": 0,
          "maximum": 100
        },
        "temporaryMaxBackendMemUsagePercent": {
          "type": "integer",
          "format": "int32",
          "description": "Defines the limits for memory usage percent of the backend instances of the MQTT broker.",
          "minimum": 0,
          "maximum": 100
        },
        "temporaryResourceLimits": {
          "description": "Defines the limits for resources of the backend instances of the MQTT broker.",
          "type": "object",
          "properties": {
            "maxInflightMessages": {
              "type": "integer",
              "format": "int32",
              "description": "Maximum number of messages a client can have inflight.",
              "minimum": 0,
              "maximum": 65535
            },
            "maxInflightPatches": {
              "type": "integer",
              "format": "int32",
              "description": "Maximum number of patch inflight per node.",
              "minimum": 0,
              "maximum": 65535
            },
            "maxInflightPatchesPerClient": {
              "type": "integer",
              "format": "int32",
              "description": "Maximum number of patch a client can have in flight.",
              "minimum": 0,
              "maximum": 65535
            },
            "maxMessageExpirySecs": {
              "type": "integer",
              "format": "int64",
              "description": "Maximum message expiry interval, in seconds.",
              "minimum": 0,
              "maximum": 4294967295
            },
            "maxQueuedMessages": {
              "type": "integer",
              "format": "int64",
              "description": "Maximum receive for external clients.",
              "minimum": 0,
              "maximum": 9223372036854000000
            },
            "maxQueuedQos0Messages": {
              "type": "integer",
              "format": "int64",
              "description": "Maximum receive QoS0 for external clients.",
              "minimum": 0,
              "maximum": 9223372036854000000
            },
            "maxSessionExpirySecs": {
              "type": "integer",
              "format": "int64",
              "description": "Maximum session expiry interval, in seconds.",
              "minimum": 0,
              "maximum": 4294967295
            }
          },
          "required": [
            "maxInflightMessages",
            "maxInflightPatches",
            "maxInflightPatchesPerClient",
            "maxQueuedMessages",
            "maxQueuedQos0Messages",
            "maxSessionExpirySecs"
          ]
        },
        "workers": {
          "type": "integer",
          "format": "int32",
          "description": "Number of logical backend workers per pod.",
          "default": 1,
          "minimum": 0,
          "maximum": 65535
        }
      },
      "required": [
        "partitions",
        "redundancyFactor"
      ]
    },
    "BackendChainUpdate": {
      "type": "object",
      "description": "Desired properties of the Frontend Instances of the DMQTT Broker",
      "properties": {
        "partitions": {
          "type": "integer",
          "format": "int32",
          "description": "Partitions is desired number of physical backend chains of the given distributed MQTT broker.",
          "minimum": 0,
          "maximum": 65535
        },
        "redundancyFactor": {
          "type": "integer",
          "format": "int32",
          "description": "Redundancy Factor is desired numbers of broker instances in one chain.",
          "minimum": 0,
          "maximum": 65535
        },
        "temporaryDiskTransferEnabled": {
          "type": "boolean",
          "description": "Defines whether disk transfer is enabled or not."
        },
        "temporaryDiskTransferHighWatermarkPercent": {
          "type": "integer",
          "format": "int32",
          "description": "Defines the percentage usage of buffer pool above which disk transfer will start.",
          "minimum": 0,
          "maximum": 100
        },
        "temporaryDiskTransferLowWatermarkPercent": {
          "type": "integer",
          "format": "int32",
          "description": "Defines the percentage usage of buffer pool below which disk transfer will stop.",
          "minimum": 0,
          "maximum": 100
        },
        "temporaryMaxBackendMemUsagePercent": {
          "type": "integer",
          "format": "int32",
          "description": "Defines the limits for memory usage percent of the backend instances of the MQTT broker.",
          "minimum": 0,
          "maximum": 100
        },
        "temporaryResourceLimits": {
          "description": "Defines the limits for resources of the backend instances of the MQTT broker.",
          "type": "object",
          "properties": {
            "maxInflightMessages": {
              "type": "integer",
              "format": "int32",
              "description": "Maximum number of messages a client can have inflight.",
              "minimum": 0,
              "maximum": 65535
            },
            "maxInflightPatches": {
              "type": "integer",
              "format": "int32",
              "description": "Maximum number of patch inflight per node.",
              "minimum": 0,
              "maximum": 65535
            },
            "maxInflightPatchesPerClient": {
              "type": "integer",
              "format": "int32",
              "description": "Maximum number of patch a client can have in flight.",
              "minimum": 0,
              "maximum": 65535
            },
            "maxMessageExpirySecs": {
              "type": "integer",
              "format": "int64",
              "description": "Maximum message expiry interval, in seconds.",
              "minimum": 0,
              "maximum": 4294967295
            },
            "maxQueuedMessages": {
              "type": "integer",
              "format": "int64",
              "description": "Maximum receive for external clients.",
              "minimum": 0,
              "maximum": 9223372036854000000
            },
            "maxQueuedQos0Messages": {
              "type": "integer",
              "format": "int64",
              "description": "Maximum receive QoS0 for external clients.",
              "minimum": 0,
              "maximum": 9223372036854000000
            },
            "maxSessionExpirySecs": {
              "type": "integer",
              "format": "int64",
              "description": "Maximum session expiry interval, in seconds.",
              "minimum": 0,
              "maximum": 4294967295
            }
          }
        },
        "workers": {
          "type": "integer",
          "format": "int32",
          "description": "Number of logical backend workers per pod.",
          "default": 1,
          "minimum": 0,
          "maximum": 65535
        }
      }
    },
    "BrokerAuthenticationProperties": {
      "type": "object",
      "description": "Broker Resource properties",
      "properties": {
        "authenticationMethods": {
          "type": "array",
          "description": "The list of authentication methods supported by the Authentication Resource. For each array element, NOTE - Enum only authenticator type supported.",
          "items": {
            "type": "object",
            "description": "Collection of different CrdAuthenticator methods of Broker Resource. NOTE Enum - Only one method is supported for each entry.",
            "properties": {
              "custom": {
                "description": "Custom Authentication Method.",
                "type": "object",
                "properties": {
                  "auth": {
                    "description": "Custom Broker Authentication Method.",
                    "type": "object",
                    "properties": {
                      "x509": {
                        "description": "X509 Custom Auth type details.",
                        "type": "object",
                        "properties": {
                          "keyVault": {
                            "description": "Keyvault X509 secret properties.",
                            "type": "object",
                            "properties": {
                              "vault": {
                                "description": "KeyVault properties.",
                                "type": "object",
                                "properties": {
                                  "credentials": {
                                    "description": "KeyVault credentials.",
                                    "type": "object",
                                    "properties": {
                                      "servicePrincipalLocalSecretName": {
                                        "type": "string",
                                        "description": "KeyVault service principal local secret name."
                                      }
                                    },
                                    "required": [
                                      "servicePrincipalLocalSecretName"
                                    ]
                                  },
                                  "directoryId": {
                                    "type": "string",
                                    "description": "KeyVault directoryId."
                                  },
                                  "name": {
                                    "type": "string",
                                    "description": "KeyVault name."
                                  }
                                },
                                "required": [
                                  "credentials",
                                  "directoryId",
                                  "name"
                                ]
                              },
                              "vaultCaChainSecret": {
                                "description": "KeyVault CA chain secret details.",
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "description": "KeyVault secret name."
                                  },
                                  "version": {
                                    "type": "string",
                                    "description": "KeyVault secret version."
                                  }
                                },
                                "required": [
                                  "name"
                                ]
                              },
                              "vaultCert": {
                                "description": "KeyVault Cert secret details.",
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "description": "KeyVault secret name."
                                  },
                                  "version": {
                                    "type": "string",
                                    "description": "KeyVault secret version."
                                  }
                                },
                                "required": [
                                  "name"
                                ]
                              }
                            },
                            "required": [
                              "vault",
                              "vaultCert"
                            ]
                          },
                          "secretName": {
                            "type": "string",
                            "description": "Secret where cert details are stored."
                          }
                        }
                      }
                    },
                    "required": [
                      "x509"
                    ]
                  },
                  "caCertConfigMap": {
                    "type": "string",
                    "description": "CA cert config map to use."
                  },
                  "endpoint": {
                    "type": "string",
                    "description": "Endpoint to connect to."
                  },
                  "headers": {
                    "type": "object",
                    "description": "Configuration Headers to use.",
                    "additionalProperties": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "endpoint"
                ]
              },
              "sat": {
                "description": "Service Account Token Method.",
                "type": "object",
                "properties": {
                  "audiences": {
                    "type": "array",
                    "description": "List of allowed audience.",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "audiences"
                ]
              },
              "svid": {
                "description": "Service Account Token Method.",
                "type": "object",
                "properties": {
                  "agentSocketPath": {
                    "type": "string",
                    "description": "Mounted socket path for spiffe agent."
                  },
                  "identityMaxRetry": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Maximum number of re-tries to fetch identity.",
                    "default": 3,
                    "minimum": 0,
                    "maximum": 4294967295
                  },
                  "identityWaitRetryMs": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Maximum time to wait before fetching identity again.",
                    "default": 5000,
                    "minimum": 0,
                    "maximum": 9223372036854000000
                  }
                },
                "required": [
                  "agentSocketPath"
                ]
              },
              "usernamePassword": {
                "description": "UsernamePassword Method.",
                "type": "object",
                "properties": {
                  "keyVault": {
                    "description": "Keyvault username password secret properties.",
                    "type": "object",
                    "properties": {
                      "vault": {
                        "description": "KeyVault properties.",
                        "type": "object",
                        "properties": {
                          "credentials": {
                            "description": "KeyVault credentials.",
                            "type": "object",
                            "properties": {
                              "servicePrincipalLocalSecretName": {
                                "type": "string",
                                "description": "KeyVault service principal local secret name."
                              }
                            },
                            "required": [
                              "servicePrincipalLocalSecretName"
                            ]
                          },
                          "directoryId": {
                            "type": "string",
                            "description": "KeyVault directoryId."
                          },
                          "name": {
                            "type": "string",
                            "description": "KeyVault name."
                          }
                        },
                        "required": [
                          "credentials",
                          "directoryId",
                          "name"
                        ]
                      },
                      "vaultSecret": {
                        "description": "KeyVault secret details.",
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "KeyVault secret name."
                          },
                          "version": {
                            "type": "string",
                            "description": "KeyVault secret version."
                          }
                        },
                        "required": [
                          "name"
                        ]
                      }
                    },
                    "required": [
                      "vault",
                      "vaultSecret"
                    ]
                  },
                  "secretName": {
                    "type": "string",
                    "description": "Secret where username and password are stored."
                  }
                }
              },
              "x509": {
                "description": "X509 Method.",
                "type": "object",
                "properties": {
                  "attributes": {
                    "description": "K8S Secret name to mount for username and password.",
                    "type": "object",
                    "properties": {
                      "keyVault": {
                        "description": "Keyvault x509 attributes secret properties.",
                        "type": "object",
                        "properties": {
                          "vault": {
                            "description": "KeyVault properties.",
                            "type": "object",
                            "properties": {
                              "credentials": {
                                "description": "KeyVault credentials.",
                                "type": "object",
                                "properties": {
                                  "servicePrincipalLocalSecretName": {
                                    "type": "string",
                                    "description": "KeyVault service principal local secret name."
                                  }
                                },
                                "required": [
                                  "servicePrincipalLocalSecretName"
                                ]
                              },
                              "directoryId": {
                                "type": "string",
                                "description": "KeyVault directoryId."
                              },
                              "name": {
                                "type": "string",
                                "description": "KeyVault name."
                              }
                            },
                            "required": [
                              "credentials",
                              "directoryId",
                              "name"
                            ]
                          },
                          "vaultSecret": {
                            "description": "KeyVault secret details.",
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string",
                                "description": "KeyVault secret name."
                              },
                              "version": {
                                "type": "string",
                                "description": "KeyVault secret version."
                              }
                            },
                            "required": [
                              "name"
                            ]
                          }
                        },
                        "required": [
                          "vault",
                          "vaultSecret"
                        ]
                      },
                      "secretName": {
                        "type": "string",
                        "description": "Secret where x509 attributes are stored."
                      }
                    }
                  },
                  "trustedClientCaCertConfigMap": {
                    "type": "string",
                    "description": "Trusted client ca cert config map.",
                    "default": "client-ca"
                  }
                }
              }
            }
          },
          "x-ms-identifiers": []
        },
        "listenerRef": {
          "type": "array",
          "description": "The array of listener Resources it supports.",
          "items": {
            "type": "string"
          }
        },
        "provisioningState": {
          "description": "The status of the last operation.",
          "readOnly": true,
          "type": "string",
          "enum": [
            "Succeeded",
            "Failed",
            "Canceled",
            "Provisioning",
            "Updating",
            "Deleting",
            "Accepted"
          ],
          "x-ms-enum": {
            "name": "ProvisioningState",
            "modelAsString": true,
            "values": [
              {
                "name": "Succeeded",
                "value": "Succeeded",
                "description": "Resource has been created."
              },
              {
                "name": "Failed",
                "value": "Failed",
                "description": "Resource creation failed."
              },
              {
                "name": "Canceled",
                "value": "Canceled",
                "description": "Resource creation was canceled."
              },
              {
                "name": "Provisioning",
                "value": "Provisioning",
                "description": "Resource is getting provisioned."
              },
              {
                "name": "Updating",
                "value": "Updating",
                "description": "Resource is Updating."
              },
              {
                "name": "Deleting",
                "value": "Deleting",
                "description": "Resource is Deleting."
              },
              {
                "name": "Accepted",
                "value": "Accepted",
                "description": "Resource has been Accepted."
              }
            ]
          }
        }
      },
      "required": [
        "authenticationMethods",
        "listenerRef"
      ]
    },
    "BrokerAuthenticationResource": {
      "type": "object",
      "description": "MQ broker/authentication resource",
      "properties": {
        "id": {
          "type": "string",
          "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "The name of the resource",
          "readOnly": true
        },
        "type": {
          "type": "string",
          "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
          "readOnly": true
        },
        "systemData": {
          "type": "object",
          "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
          "readOnly": true,
          "properties": {
            "createdBy": {
              "type": "string",
              "description": "The identity that created the resource."
            },
            "createdByType": {
              "type": "string",
              "description": "The type of identity that created the resource.",
              "enum": [
                "User",
                "Application",
                "ManagedIdentity",
                "Key"
              ],
              "x-ms-enum": {
                "name": "createdByType",
                "modelAsString": true
              }
            },
            "createdAt": {
              "type": "string",
              "format": "date-time",
              "description": "The timestamp of resource creation (UTC)."
            },
            "lastModifiedBy": {
              "type": "string",
              "description": "The identity that last modified the resource."
            },
            "lastModifiedByType": {
              "type": "string",
              "description": "The type of identity that last modified the resource.",
              "enum": [
                "User",
                "Application",
                "ManagedIdentity",
                "Key"
              ],
              "x-ms-enum": {
                "name": "createdByType",
                "modelAsString": true
              }
            },
            "lastModifiedAt": {
              "type": "string",
              "format": "date-time",
              "description": "The timestamp of resource last modification (UTC)"
            }
          }
        },
        "tags": {
          "type": "object",
          "description": "Resource tags.",
          "additionalProperties": {
            "type": "string"
          },
          "x-ms-mutability": [
            "read",
            "create",
            "update"
          ]
        },
        "location": {
          "type": "string",
          "description": "The geo-location where the resource lives",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "properties": {
          "description": "The resource-specific properties for this resource.",
          "x-ms-client-flatten": true,
          "type": "object",
          "properties": {
            "authenticationMethods": {
              "type": "array",
              "description": "The list of authentication methods supported by the Authentication Resource. For each array element, NOTE - Enum only authenticator type supported.",
              "items": {
                "type": "object",
                "description": "Collection of different CrdAuthenticator methods of Broker Resource. NOTE Enum - Only one method is supported for each entry.",
                "properties": {
                  "custom": {
                    "description": "Custom Authentication Method.",
                    "type": "object",
                    "properties": {
                      "auth": {
                        "description": "Custom Broker Authentication Method.",
                        "type": "object",
                        "properties": {
                          "x509": {
                            "description": "X509 Custom Auth type details.",
                            "type": "object",
                            "properties": {
                              "keyVault": {
                                "description": "Keyvault X509 secret properties.",
                                "type": "object",
                                "properties": {
                                  "vault": {
                                    "description": "KeyVault properties.",
                                    "type": "object",
                                    "properties": {
                                      "credentials": {
                                        "description": "KeyVault credentials.",
                                        "type": "object",
                                        "properties": {
                                          "servicePrincipalLocalSecretName": {
                                            "type": "string",
                                            "description": "KeyVault service principal local secret name."
                                          }
                                        },
                                        "required": [
                                          "servicePrincipalLocalSecretName"
                                        ]
                                      },
                                      "directoryId": {
                                        "type": "string",
                                        "description": "KeyVault directoryId."
                                      },
                                      "name": {
                                        "type": "string",
                                        "description": "KeyVault name."
                                      }
                                    },
                                    "required": [
                                      "credentials",
                                      "directoryId",
                                      "name"
                                    ]
                                  },
                                  "vaultCaChainSecret": {
                                    "description": "KeyVault CA chain secret details.",
                                    "type": "object",
                                    "properties": {
                                      "name": {
                                        "type": "string",
                                        "description": "KeyVault secret name."
                                      },
                                      "version": {
                                        "type": "string",
                                        "description": "KeyVault secret version."
                                      }
                                    },
                                    "required": [
                                      "name"
                                    ]
                                  },
                                  "vaultCert": {
                                    "description": "KeyVault Cert secret details.",
                                    "type": "object",
                                    "properties": {
                                      "name": {
                                        "type": "string",
                                        "description": "KeyVault secret name."
                                      },
                                      "version": {
                                        "type": "string",
                                        "description": "KeyVault secret version."
                                      }
                                    },
                                    "required": [
                                      "name"
                                    ]
                                  }
                                },
                                "required": [
                                  "vault",
                                  "vaultCert"
                                ]
                              },
                              "secretName": {
                                "type": "string",
                                "description": "Secret where cert details are stored."
                              }
                            }
                          }
                        },
                        "required": [
                          "x509"
                        ]
                      },
                      "caCertConfigMap": {
                        "type": "string",
                        "description": "CA cert config map to use."
                      },
                      "endpoint": {
                        "type": "string",
                        "description": "Endpoint to connect to."
                      },
                      "headers": {
                        "type": "object",
                        "description": "Configuration Headers to use.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "endpoint"
                    ]
                  },
                  "sat": {
                    "description": "Service Account Token Method.",
                    "type": "object",
                    "properties": {
                      "audiences": {
                        "type": "array",
                        "description": "List of allowed audience.",
                        "items": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "audiences"
                    ]
                  },
                  "svid": {
                    "description": "Service Account Token Method.",
                    "type": "object",
                    "properties": {
                      "agentSocketPath": {
                        "type": "string",
                        "description": "Mounted socket path for spiffe agent."
                      },
                      "identityMaxRetry": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Maximum number of re-tries to fetch identity.",
                        "default": 3,
                        "minimum": 0,
                        "maximum": 4294967295
                      },
                      "identityWaitRetryMs": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Maximum time to wait before fetching identity again.",
                        "default": 5000,
                        "minimum": 0,
                        "maximum": 9223372036854000000
                      }
                    },
                    "required": [
                      "agentSocketPath"
                    ]
                  },
                  "usernamePassword": {
                    "description": "UsernamePassword Method.",
                    "type": "object",
                    "properties": {
                      "keyVault": {
                        "description": "Keyvault username password secret properties.",
                        "type": "object",
                        "properties": {
                          "vault": {
                            "description": "KeyVault properties.",
                            "type": "object",
                            "properties": {
                              "credentials": {
                                "description": "KeyVault credentials.",
                                "type": "object",
                                "properties": {
                                  "servicePrincipalLocalSecretName": {
                                    "type": "string",
                                    "description": "KeyVault service principal local secret name."
                                  }
                                },
                                "required": [
                                  "servicePrincipalLocalSecretName"
                                ]
                              },
                              "directoryId": {
                                "type": "string",
                                "description": "KeyVault directoryId."
                              },
                              "name": {
                                "type": "string",
                                "description": "KeyVault name."
                              }
                            },
                            "required": [
                              "credentials",
                              "directoryId",
                              "name"
                            ]
                          },
                          "vaultSecret": {
                            "description": "KeyVault secret details.",
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string",
                                "description": "KeyVault secret name."
                              },
                              "version": {
                                "type": "string",
                                "description": "KeyVault secret version."
                              }
                            },
                            "required": [
                              "name"
                            ]
                          }
                        },
                        "required": [
                          "vault",
                          "vaultSecret"
                        ]
                      },
                      "secretName": {
                        "type": "string",
                        "description": "Secret where username and password are stored."
                      }
                    }
                  },
                  "x509": {
                    "description": "X509 Method.",
                    "type": "object",
                    "properties": {
                      "attributes": {
                        "description": "K8S Secret name to mount for username and password.",
                        "type": "object",
                        "properties": {
                          "keyVault": {
                            "description": "Keyvault x509 attributes secret properties.",
                            "type": "object",
                            "properties": {
                              "vault": {
                                "description": "KeyVault properties.",
                                "type": "object",
                                "properties": {
                                  "credentials": {
                                    "description": "KeyVault credentials.",
                                    "type": "object",
                                    "properties": {
                                      "servicePrincipalLocalSecretName": {
                                        "type": "string",
                                        "description": "KeyVault service principal local secret name."
                                      }
                                    },
                                    "required": [
                                      "servicePrincipalLocalSecretName"
                                    ]
                                  },
                                  "directoryId": {
                                    "type": "string",
                                    "description": "KeyVault directoryId."
                                  },
                                  "name": {
                                    "type": "string",
                                    "description": "KeyVault name."
                                  }
                                },
                                "required": [
                                  "credentials",
                                  "directoryId",
                                  "name"
                                ]
                              },
                              "vaultSecret": {
                                "description": "KeyVault secret details.",
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "description": "KeyVault secret name."
                                  },
                                  "version": {
                                    "type": "string",
                                    "description": "KeyVault secret version."
                                  }
                                },
                                "required": [
                                  "name"
                                ]
                              }
                            },
                            "required": [
                              "vault",
                              "vaultSecret"
                            ]
                          },
                          "secretName": {
                            "type": "string",
                            "description": "Secret where x509 attributes are stored."
                          }
                        }
                      },
                      "trustedClientCaCertConfigMap": {
                        "type": "string",
                        "description": "Trusted client ca cert config map.",
                        "default": "client-ca"
                      }
                    }
                  }
                }
              },
              "x-ms-identifiers": []
            },
            "listenerRef": {
              "type": "array",
              "description": "The array of listener Resources it supports.",
              "items": {
                "type": "string"
              }
            },
            "provisioningState": {
              "description": "The status of the last operation.",
              "readOnly": true,
              "type": "string",
              "enum": [
                "Succeeded",
                "Failed",
                "Canceled",
                "Provisioning",
                "Updating",
                "Deleting",
                "Accepted"
              ],
              "x-ms-enum": {
                "name": "ProvisioningState",
                "modelAsString": true,
                "values": [
                  {
                    "name": "Succeeded",
                    "value": "Succeeded",
                    "description": "Resource has been created."
                  },
                  {
                    "name": "Failed",
                    "value": "Failed",
                    "description": "Resource creation failed."
                  },
                  {
                    "name": "Canceled",
                    "value": "Canceled",
                    "description": "Resource creation was canceled."
                  },
                  {
                    "name": "Provisioning",
                    "value": "Provisioning",
                    "description": "Resource is getting provisioned."
                  },
                  {
                    "name": "Updating",
                    "value": "Updating",
                    "description": "Resource is Updating."
                  },
                  {
                    "name": "Deleting",
                    "value": "Deleting",
                    "description": "Resource is Deleting."
                  },
                  {
                    "name": "Accepted",
                    "value": "Accepted",
                    "description": "Resource has been Accepted."
                  }
                ]
              }
            }
          },
          "required": [
            "authenticationMethods",
            "listenerRef"
          ]
        },
        "extendedLocation": {
          "description": "Extended Location",
          "x-ms-mutability": [
            "read",
            "create"
          ],
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name of the extended location."
            },
            "type": {
              "description": "Type of ExtendedLocation.",
              "type": "string",
              "enum": [
                "CustomLocation"
              ],
              "x-ms-enum": {
                "name": "ExtendedLocationType",
                "modelAsString": true,
                "values": [
                  {
                    "name": "CustomLocation",
                    "value": "CustomLocation",
                    "description": "CustomLocation type"
                  }
                ]
              }
            }
          },
          "required": [
            "name",
            "type"
          ]
        }
      },
      "required": [
        "extendedLocation"
      ]
    },
    "BrokerAuthenticationResourceListResult": {
      "type": "object",
      "description": "The response of a BrokerAuthenticationResource list operation.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The BrokerAuthenticationResource items on this page",
          "items": {
            "type": "object",
            "description": "MQ broker/authentication resource",
            "properties": {
              "id": {
                "type": "string",
                "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                "readOnly": true
              },
              "name": {
                "type": "string",
                "description": "The name of the resource",
                "readOnly": true
              },
              "type": {
                "type": "string",
                "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                "readOnly": true
              },
              "systemData": {
                "type": "object",
                "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                "readOnly": true,
                "properties": {
                  "createdBy": {
                    "type": "string",
                    "description": "The identity that created the resource."
                  },
                  "createdByType": {
                    "type": "string",
                    "description": "The type of identity that created the resource.",
                    "enum": [
                      "User",
                      "Application",
                      "ManagedIdentity",
                      "Key"
                    ],
                    "x-ms-enum": {
                      "name": "createdByType",
                      "modelAsString": true
                    }
                  },
                  "createdAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp of resource creation (UTC)."
                  },
                  "lastModifiedBy": {
                    "type": "string",
                    "description": "The identity that last modified the resource."
                  },
                  "lastModifiedByType": {
                    "type": "string",
                    "description": "The type of identity that last modified the resource.",
                    "enum": [
                      "User",
                      "Application",
                      "ManagedIdentity",
                      "Key"
                    ],
                    "x-ms-enum": {
                      "name": "createdByType",
                      "modelAsString": true
                    }
                  },
                  "lastModifiedAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp of resource last modification (UTC)"
                  }
                }
              },
              "tags": {
                "type": "object",
                "description": "Resource tags.",
                "additionalProperties": {
                  "type": "string"
                },
                "x-ms-mutability": [
                  "read",
                  "create",
                  "update"
                ]
              },
              "location": {
                "type": "string",
                "description": "The geo-location where the resource lives",
                "x-ms-mutability": [
                  "read",
                  "create"
                ]
              },
              "properties": {
                "description": "The resource-specific properties for this resource.",
                "x-ms-client-flatten": true,
                "type": "object",
                "properties": {
                  "authenticationMethods": {
                    "type": "array",
                    "description": "The list of authentication methods supported by the Authentication Resource. For each array element, NOTE - Enum only authenticator type supported.",
                    "items": {
                      "type": "object",
                      "description": "Collection of different CrdAuthenticator methods of Broker Resource. NOTE Enum - Only one method is supported for each entry.",
                      "properties": {
                        "custom": {
                          "description": "Custom Authentication Method.",
                          "type": "object",
                          "properties": {
                            "auth": {
                              "description": "Custom Broker Authentication Method.",
                              "type": "object",
                              "properties": {
                                "x509": {
                                  "description": "X509 Custom Auth type details.",
                                  "type": "object",
                                  "properties": {
                                    "keyVault": {
                                      "description": "Keyvault X509 secret properties.",
                                      "type": "object",
                                      "properties": {
                                        "vault": {
                                          "description": "KeyVault properties.",
                                          "type": "object",
                                          "properties": {
                                            "credentials": {
                                              "description": "KeyVault credentials.",
                                              "type": "object",
                                              "properties": {
                                                "servicePrincipalLocalSecretName": {
                                                  "type": "string",
                                                  "description": "KeyVault service principal local secret name."
                                                }
                                              },
                                              "required": [
                                                "servicePrincipalLocalSecretName"
                                              ]
                                            },
                                            "directoryId": {
                                              "type": "string",
                                              "description": "KeyVault directoryId."
                                            },
                                            "name": {
                                              "type": "string",
                                              "description": "KeyVault name."
                                            }
                                          },
                                          "required": [
                                            "credentials",
                                            "directoryId",
                                            "name"
                                          ]
                                        },
                                        "vaultCaChainSecret": {
                                          "description": "KeyVault CA chain secret details.",
                                          "type": "object",
                                          "properties": {
                                            "name": {
                                              "type": "string",
                                              "description": "KeyVault secret name."
                                            },
                                            "version": {
                                              "type": "string",
                                              "description": "KeyVault secret version."
                                            }
                                          },
                                          "required": [
                                            "name"
                                          ]
                                        },
                                        "vaultCert": {
                                          "description": "KeyVault Cert secret details.",
                                          "type": "object",
                                          "properties": {
                                            "name": {
                                              "type": "string",
                                              "description": "KeyVault secret name."
                                            },
                                            "version": {
                                              "type": "string",
                                              "description": "KeyVault secret version."
                                            }
                                          },
                                          "required": [
                                            "name"
                                          ]
                                        }
                                      },
                                      "required": [
                                        "vault",
                                        "vaultCert"
                                      ]
                                    },
                                    "secretName": {
                                      "type": "string",
                                      "description": "Secret where cert details are stored."
                                    }
                                  }
                                }
                              },
                              "required": [
                                "x509"
                              ]
                            },
                            "caCertConfigMap": {
                              "type": "string",
                              "description": "CA cert config map to use."
                            },
                            "endpoint": {
                              "type": "string",
                              "description": "Endpoint to connect to."
                            },
                            "headers": {
                              "type": "object",
                              "description": "Configuration Headers to use.",
                              "additionalProperties": {
                                "type": "string"
                              }
                            }
                          },
                          "required": [
                            "endpoint"
                          ]
                        },
                        "sat": {
                          "description": "Service Account Token Method.",
                          "type": "object",
                          "properties": {
                            "audiences": {
                              "type": "array",
                              "description": "List of allowed audience.",
                              "items": {
                                "type": "string"
                              }
                            }
                          },
                          "required": [
                            "audiences"
                          ]
                        },
                        "svid": {
                          "description": "Service Account Token Method.",
                          "type": "object",
                          "properties": {
                            "agentSocketPath": {
                              "type": "string",
                              "description": "Mounted socket path for spiffe agent."
                            },
                            "identityMaxRetry": {
                              "type": "integer",
                              "format": "int64",
                              "description": "Maximum number of re-tries to fetch identity.",
                              "default": 3,
                              "minimum": 0,
                              "maximum": 4294967295
                            },
                            "identityWaitRetryMs": {
                              "type": "integer",
                              "format": "int64",
                              "description": "Maximum time to wait before fetching identity again.",
                              "default": 5000,
                              "minimum": 0,
                              "maximum": 9223372036854000000
                            }
                          },
                          "required": [
                            "agentSocketPath"
                          ]
                        },
                        "usernamePassword": {
                          "description": "UsernamePassword Method.",
                          "type": "object",
                          "properties": {
                            "keyVault": {
                              "description": "Keyvault username password secret properties.",
                              "type": "object",
                              "properties": {
                                "vault": {
                                  "description": "KeyVault properties.",
                                  "type": "object",
                                  "properties": {
                                    "credentials": {
                                      "description": "KeyVault credentials.",
                                      "type": "object",
                                      "properties": {
                                        "servicePrincipalLocalSecretName": {
                                          "type": "string",
                                          "description": "KeyVault service principal local secret name."
                                        }
                                      },
                                      "required": [
                                        "servicePrincipalLocalSecretName"
                                      ]
                                    },
                                    "directoryId": {
                                      "type": "string",
                                      "description": "KeyVault directoryId."
                                    },
                                    "name": {
                                      "type": "string",
                                      "description": "KeyVault name."
                                    }
                                  },
                                  "required": [
                                    "credentials",
                                    "directoryId",
                                    "name"
                                  ]
                                },
                                "vaultSecret": {
                                  "description": "KeyVault secret details.",
                                  "type": "object",
                                  "properties": {
                                    "name": {
                                      "type": "string",
                                      "description": "KeyVault secret name."
                                    },
                                    "version": {
                                      "type": "string",
                                      "description": "KeyVault secret version."
                                    }
                                  },
                                  "required": [
                                    "name"
                                  ]
                                }
                              },
                              "required": [
                                "vault",
                                "vaultSecret"
                              ]
                            },
                            "secretName": {
                              "type": "string",
                              "description": "Secret where username and password are stored."
                            }
                          }
                        },
                        "x509": {
                          "description": "X509 Method.",
                          "type": "object",
                          "properties": {
                            "attributes": {
                              "description": "K8S Secret name to mount for username and password.",
                              "type": "object",
                              "properties": {
                                "keyVault": {
                                  "description": "Keyvault x509 attributes secret properties.",
                                  "type": "object",
                                  "properties": {
                                    "vault": {
                                      "description": "KeyVault properties.",
                                      "type": "object",
                                      "properties": {
                                        "credentials": {
                                          "description": "KeyVault credentials.",
                                          "type": "object",
                                          "properties": {
                                            "servicePrincipalLocalSecretName": {
                                              "type": "string",
                                              "description": "KeyVault service principal local secret name."
                                            }
                                          },
                                          "required": [
                                            "servicePrincipalLocalSecretName"
                                          ]
                                        },
                                        "directoryId": {
                                          "type": "string",
                                          "description": "KeyVault directoryId."
                                        },
                                        "name": {
                                          "type": "string",
                                          "description": "KeyVault name."
                                        }
                                      },
                                      "required": [
                                        "credentials",
                                        "directoryId",
                                        "name"
                                      ]
                                    },
                                    "vaultSecret": {
                                      "description": "KeyVault secret details.",
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "description": "KeyVault secret name."
                                        },
                                        "version": {
                                          "type": "string",
                                          "description": "KeyVault secret version."
                                        }
                                      },
                                      "required": [
                                        "name"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "vault",
                                    "vaultSecret"
                                  ]
                                },
                                "secretName": {
                                  "type": "string",
                                  "description": "Secret where x509 attributes are stored."
                                }
                              }
                            },
                            "trustedClientCaCertConfigMap": {
                              "type": "string",
                              "description": "Trusted client ca cert config map.",
                              "default": "client-ca"
                            }
                          }
                        }
                      }
                    },
                    "x-ms-identifiers": []
                  },
                  "listenerRef": {
                    "type": "array",
                    "description": "The array of listener Resources it supports.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "provisioningState": {
                    "description": "The status of the last operation.",
                    "readOnly": true,
                    "type": "string",
                    "enum": [
                      "Succeeded",
                      "Failed",
                      "Canceled",
                      "Provisioning",
                      "Updating",
                      "Deleting",
                      "Accepted"
                    ],
                    "x-ms-enum": {
                      "name": "ProvisioningState",
                      "modelAsString": true,
                      "values": [
                        {
                          "name": "Succeeded",
                          "value": "Succeeded",
                          "description": "Resource has been created."
                        },
                        {
                          "name": "Failed",
                          "value": "Failed",
                          "description": "Resource creation failed."
                        },
                        {
                          "name": "Canceled",
                          "value": "Canceled",
                          "description": "Resource creation was canceled."
                        },
                        {
                          "name": "Provisioning",
                          "value": "Provisioning",
                          "description": "Resource is getting provisioned."
                        },
                        {
                          "name": "Updating",
                          "value": "Updating",
                          "description": "Resource is Updating."
                        },
                        {
                          "name": "Deleting",
                          "value": "Deleting",
                          "description": "Resource is Deleting."
                        },
                        {
                          "name": "Accepted",
                          "value": "Accepted",
                          "description": "Resource has been Accepted."
                        }
                      ]
                    }
                  }
                },
                "required": [
                  "authenticationMethods",
                  "listenerRef"
                ]
              },
              "extendedLocation": {
                "description": "Extended Location",
                "x-ms-mutability": [
                  "read",
                  "create"
                ],
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the extended location."
                  },
                  "type": {
                    "description": "Type of ExtendedLocation.",
                    "type": "string",
                    "enum": [
                      "CustomLocation"
                    ],
                    "x-ms-enum": {
                      "name": "ExtendedLocationType",
                      "modelAsString": true,
                      "values": [
                        {
                          "name": "CustomLocation",
                          "value": "CustomLocation",
                          "description": "CustomLocation type"
                        }
                      ]
                    }
                  }
                },
                "required": [
                  "name",
                  "type"
                ]
              }
            },
            "required": [
              "extendedLocation"
            ]
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "BrokerAuthenticationResourceUpdate": {
      "type": "object",
      "description": "The type used for update operations of the BrokerAuthenticationResource.",
      "properties": {
        "tags": {
          "type": "object",
          "description": "Resource tags.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "properties": {
          "description": "The resource-specific properties for this resource.",
          "x-ms-client-flatten": true,
          "type": "object",
          "properties": {
            "authenticationMethods": {
              "type": "array",
              "description": "The list of authentication methods supported by the Authentication Resource. For each array element, NOTE - Enum only authenticator type supported.",
              "items": {
                "type": "object",
                "description": "Collection of different CrdAuthenticator methods of Broker Resource. NOTE Enum - Only one method is supported for each entry.",
                "properties": {
                  "custom": {
                    "description": "Custom Authentication Method.",
                    "type": "object",
                    "properties": {
                      "auth": {
                        "description": "Custom Broker Authentication Method.",
                        "type": "object",
                        "properties": {
                          "x509": {
                            "description": "X509 Custom Auth type details.",
                            "type": "object",
                            "properties": {
                              "keyVault": {
                                "description": "Keyvault X509 secret properties.",
                                "type": "object",
                                "properties": {
                                  "vault": {
                                    "description": "KeyVault properties.",
                                    "type": "object",
                                    "properties": {
                                      "credentials": {
                                        "description": "KeyVault credentials.",
                                        "type": "object",
                                        "properties": {
                                          "servicePrincipalLocalSecretName": {
                                            "type": "string",
                                            "description": "KeyVault service principal local secret name."
                                          }
                                        },
                                        "required": [
                                          "servicePrincipalLocalSecretName"
                                        ]
                                      },
                                      "directoryId": {
                                        "type": "string",
                                        "description": "KeyVault directoryId."
                                      },
                                      "name": {
                                        "type": "string",
                                        "description": "KeyVault name."
                                      }
                                    },
                                    "required": [
                                      "credentials",
                                      "directoryId",
                                      "name"
                                    ]
                                  },
                                  "vaultCaChainSecret": {
                                    "description": "KeyVault CA chain secret details.",
                                    "type": "object",
                                    "properties": {
                                      "name": {
                                        "type": "string",
                                        "description": "KeyVault secret name."
                                      },
                                      "version": {
                                        "type": "string",
                                        "description": "KeyVault secret version."
                                      }
                                    },
                                    "required": [
                                      "name"
                                    ]
                                  },
                                  "vaultCert": {
                                    "description": "KeyVault Cert secret details.",
                                    "type": "object",
                                    "properties": {
                                      "name": {
                                        "type": "string",
                                        "description": "KeyVault secret name."
                                      },
                                      "version": {
                                        "type": "string",
                                        "description": "KeyVault secret version."
                                      }
                                    },
                                    "required": [
                                      "name"
                                    ]
                                  }
                                },
                                "required": [
                                  "vault",
                                  "vaultCert"
                                ]
                              },
                              "secretName": {
                                "type": "string",
                                "description": "Secret where cert details are stored."
                              }
                            }
                          }
                        },
                        "required": [
                          "x509"
                        ]
                      },
                      "caCertConfigMap": {
                        "type": "string",
                        "description": "CA cert config map to use."
                      },
                      "endpoint": {
                        "type": "string",
                        "description": "Endpoint to connect to."
                      },
                      "headers": {
                        "type": "object",
                        "description": "Configuration Headers to use.",
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "endpoint"
                    ]
                  },
                  "sat": {
                    "description": "Service Account Token Method.",
                    "type": "object",
                    "properties": {
                      "audiences": {
                        "type": "array",
                        "description": "List of allowed audience.",
                        "items": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "audiences"
                    ]
                  },
                  "svid": {
                    "description": "Service Account Token Method.",
                    "type": "object",
                    "properties": {
                      "agentSocketPath": {
                        "type": "string",
                        "description": "Mounted socket path for spiffe agent."
                      },
                      "identityMaxRetry": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Maximum number of re-tries to fetch identity.",
                        "default": 3,
                        "minimum": 0,
                        "maximum": 4294967295
                      },
                      "identityWaitRetryMs": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Maximum time to wait before fetching identity again.",
                        "default": 5000,
                        "minimum": 0,
                        "maximum": 9223372036854000000
                      }
                    },
                    "required": [
                      "agentSocketPath"
                    ]
                  },
                  "usernamePassword": {
                    "description": "UsernamePassword Method.",
                    "type": "object",
                    "properties": {
                      "keyVault": {
                        "description": "Keyvault username password secret properties.",
                        "type": "object",
                        "properties": {
                          "vault": {
                            "description": "KeyVault properties.",
                            "type": "object",
                            "properties": {
                              "credentials": {
                                "description": "KeyVault credentials.",
                                "type": "object",
                                "properties": {
                                  "servicePrincipalLocalSecretName": {
                                    "type": "string",
                                    "description": "KeyVault service principal local secret name."
                                  }
                                },
                                "required": [
                                  "servicePrincipalLocalSecretName"
                                ]
                              },
                              "directoryId": {
                                "type": "string",
                                "description": "KeyVault directoryId."
                              },
                              "name": {
                                "type": "string",
                                "description": "KeyVault name."
                              }
                            },
                            "required": [
                              "credentials",
                              "directoryId",
                              "name"
                            ]
                          },
                          "vaultSecret": {
                            "description": "KeyVault secret details.",
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string",
                                "description": "KeyVault secret name."
                              },
                              "version": {
                                "type": "string",
                                "description": "KeyVault secret version."
                              }
                            },
                            "required": [
                              "name"
                            ]
                          }
                        },
                        "required": [
                          "vault",
                          "vaultSecret"
                        ]
                      },
                      "secretName": {
                        "type": "string",
                        "description": "Secret where username and password are stored."
                      }
                    }
                  },
                  "x509": {
                    "description": "X509 Method.",
                    "type": "object",
                    "properties": {
                      "attributes": {
                        "description": "K8S Secret name to mount for username and password.",
                        "type": "object",
                        "properties": {
                          "keyVault": {
                            "description": "Keyvault x509 attributes secret properties.",
                            "type": "object",
                            "properties": {
                              "vault": {
                                "description": "KeyVault properties.",
                                "type": "object",
                                "properties": {
                                  "credentials": {
                                    "description": "KeyVault credentials.",
                                    "type": "object",
                                    "properties": {
                                      "servicePrincipalLocalSecretName": {
                                        "type": "string",
                                        "description": "KeyVault service principal local secret name."
                                      }
                                    },
                                    "required": [
                                      "servicePrincipalLocalSecretName"
                                    ]
                                  },
                                  "directoryId": {
                                    "type": "string",
                                    "description": "KeyVault directoryId."
                                  },
                                  "name": {
                                    "type": "string",
                                    "description": "KeyVault name."
                                  }
                                },
                                "required": [
                                  "credentials",
                                  "directoryId",
                                  "name"
                                ]
                              },
                              "vaultSecret": {
                                "description": "KeyVault secret details.",
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "description": "KeyVault secret name."
                                  },
                                  "version": {
                                    "type": "string",
                                    "description": "KeyVault secret version."
                                  }
                                },
                                "required": [
                                  "name"
                                ]
                              }
                            },
                            "required": [
                              "vault",
                              "vaultSecret"
                            ]
                          },
                          "secretName": {
                            "type": "string",
                            "description": "Secret where x509 attributes are stored."
                          }
                        }
                      },
                      "trustedClientCaCertConfigMap": {
                        "type": "string",
                        "description": "Trusted client ca cert config map.",
                        "default": "client-ca"
                      }
                    }
                  }
                }
              },
              "x-ms-identifiers": []
            },
            "listenerRef": {
              "type": "array",
              "description": "The array of listener Resources it supports.",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "BrokerAuthenticationResourceUpdateProperties": {
      "type": "object",
      "description": "The updatable properties of the BrokerAuthenticationResource.",
      "properties": {
        "authenticationMethods": {
          "type": "array",
          "description": "The list of authentication methods supported by the Authentication Resource. For each array element, NOTE - Enum only authenticator type supported.",
          "items": {
            "type": "object",
            "description": "Collection of different CrdAuthenticator methods of Broker Resource. NOTE Enum - Only one method is supported for each entry.",
            "properties": {
              "custom": {
                "description": "Custom Authentication Method.",
                "type": "object",
                "properties": {
                  "auth": {
                    "description": "Custom Broker Authentication Method.",
                    "type": "object",
                    "properties": {
                      "x509": {
                        "description": "X509 Custom Auth type details.",
                        "type": "object",
                        "properties": {
                          "keyVault": {
                            "description": "Keyvault X509 secret properties.",
                            "type": "object",
                            "properties": {
                              "vault": {
                                "description": "KeyVault properties.",
                                "type": "object",
                                "properties": {
                                  "credentials": {
                                    "description": "KeyVault credentials.",
                                    "type": "object",
                                    "properties": {
                                      "servicePrincipalLocalSecretName": {
                                        "type": "string",
                                        "description": "KeyVault service principal local secret name."
                                      }
                                    },
                                    "required": [
                                      "servicePrincipalLocalSecretName"
                                    ]
                                  },
                                  "directoryId": {
                                    "type": "string",
                                    "description": "KeyVault directoryId."
                                  },
                                  "name": {
                                    "type": "string",
                                    "description": "KeyVault name."
                                  }
                                },
                                "required": [
                                  "credentials",
                                  "directoryId",
                                  "name"
                                ]
                              },
                              "vaultCaChainSecret": {
                                "description": "KeyVault CA chain secret details.",
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "description": "KeyVault secret name."
                                  },
                                  "version": {
                                    "type": "string",
                                    "description": "KeyVault secret version."
                                  }
                                },
                                "required": [
                                  "name"
                                ]
                              },
                              "vaultCert": {
                                "description": "KeyVault Cert secret details.",
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "description": "KeyVault secret name."
                                  },
                                  "version": {
                                    "type": "string",
                                    "description": "KeyVault secret version."
                                  }
                                },
                                "required": [
                                  "name"
                                ]
                              }
                            },
                            "required": [
                              "vault",
                              "vaultCert"
                            ]
                          },
                          "secretName": {
                            "type": "string",
                            "description": "Secret where cert details are stored."
                          }
                        }
                      }
                    },
                    "required": [
                      "x509"
                    ]
                  },
                  "caCertConfigMap": {
                    "type": "string",
                    "description": "CA cert config map to use."
                  },
                  "endpoint": {
                    "type": "string",
                    "description": "Endpoint to connect to."
                  },
                  "headers": {
                    "type": "object",
                    "description": "Configuration Headers to use.",
                    "additionalProperties": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "endpoint"
                ]
              },
              "sat": {
                "description": "Service Account Token Method.",
                "type": "object",
                "properties": {
                  "audiences": {
                    "type": "array",
                    "description": "List of allowed audience.",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "audiences"
                ]
              },
              "svid": {
                "description": "Service Account Token Method.",
                "type": "object",
                "properties": {
                  "agentSocketPath": {
                    "type": "string",
                    "description": "Mounted socket path for spiffe agent."
                  },
                  "identityMaxRetry": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Maximum number of re-tries to fetch identity.",
                    "default": 3,
                    "minimum": 0,
                    "maximum": 4294967295
                  },
                  "identityWaitRetryMs": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Maximum time to wait before fetching identity again.",
                    "default": 5000,
                    "minimum": 0,
                    "maximum": 9223372036854000000
                  }
                },
                "required": [
                  "agentSocketPath"
                ]
              },
              "usernamePassword": {
                "description": "UsernamePassword Method.",
                "type": "object",
                "properties": {
                  "keyVault": {
                    "description": "Keyvault username password secret properties.",
                    "type": "object",
                    "properties": {
                      "vault": {
                        "description": "KeyVault properties.",
                        "type": "object",
                        "properties": {
                          "credentials": {
                            "description": "KeyVault credentials.",
                            "type": "object",
                            "properties": {
                              "servicePrincipalLocalSecretName": {
                                "type": "string",
                                "description": "KeyVault service principal local secret name."
                              }
                            },
                            "required": [
                              "servicePrincipalLocalSecretName"
                            ]
                          },
                          "directoryId": {
                            "type": "string",
                            "description": "KeyVault directoryId."
                          },
                          "name": {
                            "type": "string",
                            "description": "KeyVault name."
                          }
                        },
                        "required": [
                          "credentials",
                          "directoryId",
                          "name"
                        ]
                      },
                      "vaultSecret": {
                        "description": "KeyVault secret details.",
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "KeyVault secret name."
                          },
                          "version": {
                            "type": "string",
                            "description": "KeyVault secret version."
                          }
                        },
                        "required": [
                          "name"
                        ]
                      }
                    },
                    "required": [
                      "vault",
                      "vaultSecret"
                    ]
                  },
                  "secretName": {
                    "type": "string",
                    "description": "Secret where username and password are stored."
                  }
                }
              },
              "x509": {
                "description": "X509 Method.",
                "type": "object",
                "properties": {
                  "attributes": {
                    "description": "K8S Secret name to mount for username and password.",
                    "type": "object",
                    "properties": {
                      "keyVault": {
                        "description": "Keyvault x509 attributes secret properties.",
                        "type": "object",
                        "properties": {
                          "vault": {
                            "description": "KeyVault properties.",
                            "type": "object",
                            "properties": {
                              "credentials": {
                                "description": "KeyVault credentials.",
                                "type": "object",
                                "properties": {
                                  "servicePrincipalLocalSecretName": {
                                    "type": "string",
                                    "description": "KeyVault service principal local secret name."
                                  }
                                },
                                "required": [
                                  "servicePrincipalLocalSecretName"
                                ]
                              },
                              "directoryId": {
                                "type": "string",
                                "description": "KeyVault directoryId."
                              },
                              "name": {
                                "type": "string",
                                "description": "KeyVault name."
                              }
                            },
                            "required": [
                              "credentials",
                              "directoryId",
                              "name"
                            ]
                          },
                          "vaultSecret": {
                            "description": "KeyVault secret details.",
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string",
                                "description": "KeyVault secret name."
                              },
                              "version": {
                                "type": "string",
                                "description": "KeyVault secret version."
                              }
                            },
                            "required": [
                              "name"
                            ]
                          }
                        },
                        "required": [
                          "vault",
                          "vaultSecret"
                        ]
                      },
                      "secretName": {
                        "type": "string",
                        "description": "Secret where x509 attributes are stored."
                      }
                    }
                  },
                  "trustedClientCaCertConfigMap": {
                    "type": "string",
                    "description": "Trusted client ca cert config map.",
                    "default": "client-ca"
                  }
                }
              }
            }
          },
          "x-ms-identifiers": []
        },
        "listenerRef": {
          "type": "array",
          "description": "The array of listener Resources it supports.",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "BrokerAuthenticatorCustomAuth": {
      "type": "object",
      "description": "Custom Authentication properties",
      "properties": {
        "x509": {
          "description": "X509 Custom Auth type details.",
          "type": "object",
          "properties": {
            "keyVault": {
              "description": "Keyvault X509 secret properties.",
              "type": "object",
              "properties": {
                "vault": {
                  "description": "KeyVault properties.",
                  "type": "object",
                  "properties": {
                    "credentials": {
                      "description": "KeyVault credentials.",
                      "type": "object",
                      "properties": {
                        "servicePrincipalLocalSecretName": {
                          "type": "string",
                          "description": "KeyVault service principal local secret name."
                        }
                      },
                      "required": [
                        "servicePrincipalLocalSecretName"
                      ]
                    },
                    "directoryId": {
                      "type": "string",
                      "description": "KeyVault directoryId."
                    },
                    "name": {
                      "type": "string",
                      "description": "KeyVault name."
                    }
                  },
                  "required": [
                    "credentials",
                    "directoryId",
                    "name"
                  ]
                },
                "vaultCaChainSecret": {
                  "description": "KeyVault CA chain secret details.",
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "KeyVault secret name."
                    },
                    "version": {
                      "type": "string",
                      "description": "KeyVault secret version."
                    }
                  },
                  "required": [
                    "name"
                  ]
                },
                "vaultCert": {
                  "description": "KeyVault Cert secret details.",
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "KeyVault secret name."
                    },
                    "version": {
                      "type": "string",
                      "description": "KeyVault secret version."
                    }
                  },
                  "required": [
                    "name"
                  ]
                }
              },
              "required": [
                "vault",
                "vaultCert"
              ]
            },
            "secretName": {
              "type": "string",
              "description": "Secret where cert details are stored."
            }
          }
        }
      },
      "required": [
        "x509"
      ]
    },
    "BrokerAuthenticatorCustomAuthX509": {
      "type": "object",
      "description": "X509 Custom Authentication properties. NOTE - Enum only authenticator type supported at a time.",
      "properties": {
        "keyVault": {
          "description": "Keyvault X509 secret properties.",
          "type": "object",
          "properties": {
            "vault": {
              "description": "KeyVault properties.",
              "type": "object",
              "properties": {
                "credentials": {
                  "description": "KeyVault credentials.",
                  "type": "object",
                  "properties": {
                    "servicePrincipalLocalSecretName": {
                      "type": "string",
                      "description": "KeyVault service principal local secret name."
                    }
                  },
                  "required": [
                    "servicePrincipalLocalSecretName"
                  ]
                },
                "directoryId": {
                  "type": "string",
                  "description": "KeyVault directoryId."
                },
                "name": {
                  "type": "string",
                  "description": "KeyVault name."
                }
              },
              "required": [
                "credentials",
                "directoryId",
                "name"
              ]
            },
            "vaultCaChainSecret": {
              "description": "KeyVault CA chain secret details.",
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "KeyVault secret name."
                },
                "version": {
                  "type": "string",
                  "description": "KeyVault secret version."
                }
              },
              "required": [
                "name"
              ]
            },
            "vaultCert": {
              "description": "KeyVault Cert secret details.",
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "KeyVault secret name."
                },
                "version": {
                  "type": "string",
                  "description": "KeyVault secret version."
                }
              },
              "required": [
                "name"
              ]
            }
          },
          "required": [
            "vault",
            "vaultCert"
          ]
        },
        "secretName": {
          "type": "string",
          "description": "Secret where cert details are stored."
        }
      }
    },
    "BrokerAuthenticatorMethodCustom": {
      "type": "object",
      "description": "Custom method for BrokerAuthentication",
      "properties": {
        "auth": {
          "description": "Custom Broker Authentication Method.",
          "type": "object",
          "properties": {
            "x509": {
              "description": "X509 Custom Auth type details.",
              "type": "object",
              "properties": {
                "keyVault": {
                  "description": "Keyvault X509 secret properties.",
                  "type": "object",
                  "properties": {
                    "vault": {
                      "description": "KeyVault properties.",
                      "type": "object",
                      "properties": {
                        "credentials": {
                          "description": "KeyVault credentials.",
                          "type": "object",
                          "properties": {
                            "servicePrincipalLocalSecretName": {
                              "type": "string",
                              "description": "KeyVault service principal local secret name."
                            }
                          },
                          "required": [
                            "servicePrincipalLocalSecretName"
                          ]
                        },
                        "directoryId": {
                          "type": "string",
                          "description": "KeyVault directoryId."
                        },
                        "name": {
                          "type": "string",
                          "description": "KeyVault name."
                        }
                      },
                      "required": [
                        "credentials",
                        "directoryId",
                        "name"
                      ]
                    },
                    "vaultCaChainSecret": {
                      "description": "KeyVault CA chain secret details.",
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "KeyVault secret name."
                        },
                        "version": {
                          "type": "string",
                          "description": "KeyVault secret version."
                        }
                      },
                      "required": [
                        "name"
                      ]
                    },
                    "vaultCert": {
                      "description": "KeyVault Cert secret details.",
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "KeyVault secret name."
                        },
                        "version": {
                          "type": "string",
                          "description": "KeyVault secret version."
                        }
                      },
                      "required": [
                        "name"
                      ]
                    }
                  },
                  "required": [
                    "vault",
                    "vaultCert"
                  ]
                },
                "secretName": {
                  "type": "string",
                  "description": "Secret where cert details are stored."
                }
              }
            }
          },
          "required": [
            "x509"
          ]
        },
        "caCertConfigMap": {
          "type": "string",
          "description": "CA cert config map to use."
        },
        "endpoint": {
          "type": "string",
          "description": "Endpoint to connect to."
        },
        "headers": {
          "type": "object",
          "description": "Configuration Headers to use.",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "required": [
        "endpoint"
      ]
    },
    "BrokerAuthenticatorMethodSat": {
      "type": "object",
      "description": "Service Account Token for BrokerAuthentication",
      "properties": {
        "audiences": {
          "type": "array",
          "description": "List of allowed audience.",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "audiences"
      ]
    },
    "BrokerAuthenticatorMethodSvid": {
      "type": "object",
      "description": "SVID for BrokerAuthentication",
      "properties": {
        "agentSocketPath": {
          "type": "string",
          "description": "Mounted socket path for spiffe agent."
        },
        "identityMaxRetry": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum number of re-tries to fetch identity.",
          "default": 3,
          "minimum": 0,
          "maximum": 4294967295
        },
        "identityWaitRetryMs": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum time to wait before fetching identity again.",
          "default": 5000,
          "minimum": 0,
          "maximum": 9223372036854000000
        }
      },
      "required": [
        "agentSocketPath"
      ]
    },
    "BrokerAuthenticatorMethodUsernamePassword": {
      "type": "object",
      "description": "UsernamePassword for BrokerAuthentication",
      "properties": {
        "keyVault": {
          "description": "Keyvault username password secret properties.",
          "type": "object",
          "properties": {
            "vault": {
              "description": "KeyVault properties.",
              "type": "object",
              "properties": {
                "credentials": {
                  "description": "KeyVault credentials.",
                  "type": "object",
                  "properties": {
                    "servicePrincipalLocalSecretName": {
                      "type": "string",
                      "description": "KeyVault service principal local secret name."
                    }
                  },
                  "required": [
                    "servicePrincipalLocalSecretName"
                  ]
                },
                "directoryId": {
                  "type": "string",
                  "description": "KeyVault directoryId."
                },
                "name": {
                  "type": "string",
                  "description": "KeyVault name."
                }
              },
              "required": [
                "credentials",
                "directoryId",
                "name"
              ]
            },
            "vaultSecret": {
              "description": "KeyVault secret details.",
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "KeyVault secret name."
                },
                "version": {
                  "type": "string",
                  "description": "KeyVault secret version."
                }
              },
              "required": [
                "name"
              ]
            }
          },
          "required": [
            "vault",
            "vaultSecret"
          ]
        },
        "secretName": {
          "type": "string",
          "description": "Secret where username and password are stored."
        }
      }
    },
    "BrokerAuthenticatorMethodX509": {
      "type": "object",
      "description": "X509 for BrokerAuthentication.",
      "properties": {
        "attributes": {
          "description": "K8S Secret name to mount for username and password.",
          "type": "object",
          "properties": {
            "keyVault": {
              "description": "Keyvault x509 attributes secret properties.",
              "type": "object",
              "properties": {
                "vault": {
                  "description": "KeyVault properties.",
                  "type": "object",
                  "properties": {
                    "credentials": {
                      "description": "KeyVault credentials.",
                      "type": "object",
                      "properties": {
                        "servicePrincipalLocalSecretName": {
                          "type": "string",
                          "description": "KeyVault service principal local secret name."
                        }
                      },
                      "required": [
                        "servicePrincipalLocalSecretName"
                      ]
                    },
                    "directoryId": {
                      "type": "string",
                      "description": "KeyVault directoryId."
                    },
                    "name": {
                      "type": "string",
                      "description": "KeyVault name."
                    }
                  },
                  "required": [
                    "credentials",
                    "directoryId",
                    "name"
                  ]
                },
                "vaultSecret": {
                  "description": "KeyVault secret details.",
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "KeyVault secret name."
                    },
                    "version": {
                      "type": "string",
                      "description": "KeyVault secret version."
                    }
                  },
                  "required": [
                    "name"
                  ]
                }
              },
              "required": [
                "vault",
                "vaultSecret"
              ]
            },
            "secretName": {
              "type": "string",
              "description": "Secret where x509 attributes are stored."
            }
          }
        },
        "trustedClientCaCertConfigMap": {
          "type": "string",
          "description": "Trusted client ca cert config map.",
          "default": "client-ca"
        }
      }
    },
    "BrokerAuthenticatorMethodX509Attributes": {
      "type": "object",
      "description": "BrokerAuthenticatorMethodX509Attributes properties. NOTE - Enum only type supported at a time.",
      "properties": {
        "keyVault": {
          "description": "Keyvault x509 attributes secret properties.",
          "type": "object",
          "properties": {
            "vault": {
              "description": "KeyVault properties.",
              "type": "object",
              "properties": {
                "credentials": {
                  "description": "KeyVault credentials.",
                  "type": "object",
                  "properties": {
                    "servicePrincipalLocalSecretName": {
                      "type": "string",
                      "description": "KeyVault service principal local secret name."
                    }
                  },
                  "required": [
                    "servicePrincipalLocalSecretName"
                  ]
                },
                "directoryId": {
                  "type": "string",
                  "description": "KeyVault directoryId."
                },
                "name": {
                  "type": "string",
                  "description": "KeyVault name."
                }
              },
              "required": [
                "credentials",
                "directoryId",
                "name"
              ]
            },
            "vaultSecret": {
              "description": "KeyVault secret details.",
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "KeyVault secret name."
                },
                "version": {
                  "type": "string",
                  "description": "KeyVault secret version."
                }
              },
              "required": [
                "name"
              ]
            }
          },
          "required": [
            "vault",
            "vaultSecret"
          ]
        },
        "secretName": {
          "type": "string",
          "description": "Secret where x509 attributes are stored."
        }
      }
    },
    "BrokerAuthenticatorMethods": {
      "type": "object",
      "description": "Collection of different CrdAuthenticator methods of Broker Resource. NOTE Enum - Only one method is supported for each entry.",
      "properties": {
        "custom": {
          "description": "Custom Authentication Method.",
          "type": "object",
          "properties": {
            "auth": {
              "description": "Custom Broker Authentication Method.",
              "type": "object",
              "properties": {
                "x509": {
                  "description": "X509 Custom Auth type details.",
                  "type": "object",
                  "properties": {
                    "keyVault": {
                      "description": "Keyvault X509 secret properties.",
                      "type": "object",
                      "properties": {
                        "vault": {
                          "description": "KeyVault properties.",
                          "type": "object",
                          "properties": {
                            "credentials": {
                              "description": "KeyVault credentials.",
                              "type": "object",
                              "properties": {
                                "servicePrincipalLocalSecretName": {
                                  "type": "string",
                                  "description": "KeyVault service principal local secret name."
                                }
                              },
                              "required": [
                                "servicePrincipalLocalSecretName"
                              ]
                            },
                            "directoryId": {
                              "type": "string",
                              "description": "KeyVault directoryId."
                            },
                            "name": {
                              "type": "string",
                              "description": "KeyVault name."
                            }
                          },
                          "required": [
                            "credentials",
                            "directoryId",
                            "name"
                          ]
                        },
                        "vaultCaChainSecret": {
                          "description": "KeyVault CA chain secret details.",
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "KeyVault secret name."
                            },
                            "version": {
                              "type": "string",
                              "description": "KeyVault secret version."
                            }
                          },
                          "required": [
                            "name"
                          ]
                        },
                        "vaultCert": {
                          "description": "KeyVault Cert secret details.",
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "KeyVault secret name."
                            },
                            "version": {
                              "type": "string",
                              "description": "KeyVault secret version."
                            }
                          },
                          "required": [
                            "name"
                          ]
                        }
                      },
                      "required": [
                        "vault",
                        "vaultCert"
                      ]
                    },
                    "secretName": {
                      "type": "string",
                      "description": "Secret where cert details are stored."
                    }
                  }
                }
              },
              "required": [
                "x509"
              ]
            },
            "caCertConfigMap": {
              "type": "string",
              "description": "CA cert config map to use."
            },
            "endpoint": {
              "type": "string",
              "description": "Endpoint to connect to."
            },
            "headers": {
              "type": "object",
              "description": "Configuration Headers to use.",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          "required": [
            "endpoint"
          ]
        },
        "sat": {
          "description": "Service Account Token Method.",
          "type": "object",
          "properties": {
            "audiences": {
              "type": "array",
              "description": "List of allowed audience.",
              "items": {
                "type": "string"
              }
            }
          },
          "required": [
            "audiences"
          ]
        },
        "svid": {
          "description": "Service Account Token Method.",
          "type": "object",
          "properties": {
            "agentSocketPath": {
              "type": "string",
              "description": "Mounted socket path for spiffe agent."
            },
            "identityMaxRetry": {
              "type": "integer",
              "format": "int64",
              "description": "Maximum number of re-tries to fetch identity.",
              "default": 3,
              "minimum": 0,
              "maximum": 4294967295
            },
            "identityWaitRetryMs": {
              "type": "integer",
              "format": "int64",
              "description": "Maximum time to wait before fetching identity again.",
              "default": 5000,
              "minimum": 0,
              "maximum": 9223372036854000000
            }
          },
          "required": [
            "agentSocketPath"
          ]
        },
        "usernamePassword": {
          "description": "UsernamePassword Method.",
          "type": "object",
          "properties": {
            "keyVault": {
              "description": "Keyvault username password secret properties.",
              "type": "object",
              "properties": {
                "vault": {
                  "description": "KeyVault properties.",
                  "type": "object",
                  "properties": {
                    "credentials": {
                      "description": "KeyVault credentials.",
                      "type": "object",
                      "properties": {
                        "servicePrincipalLocalSecretName": {
                          "type": "string",
                          "description": "KeyVault service principal local secret name."
                        }
                      },
                      "required": [
                        "servicePrincipalLocalSecretName"
                      ]
                    },
                    "directoryId": {
                      "type": "string",
                      "description": "KeyVault directoryId."
                    },
                    "name": {
                      "type": "string",
                      "description": "KeyVault name."
                    }
                  },
                  "required": [
                    "credentials",
                    "directoryId",
                    "name"
                  ]
                },
                "vaultSecret": {
                  "description": "KeyVault secret details.",
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "KeyVault secret name."
                    },
                    "version": {
                      "type": "string",
                      "description": "KeyVault secret version."
                    }
                  },
                  "required": [
                    "name"
                  ]
                }
              },
              "required": [
                "vault",
                "vaultSecret"
              ]
            },
            "secretName": {
              "type": "string",
              "description": "Secret where username and password are stored."
            }
          }
        },
        "x509": {
          "description": "X509 Method.",
          "type": "object",
          "properties": {
            "attributes": {
              "description": "K8S Secret name to mount for username and password.",
              "type": "object",
              "properties": {
                "keyVault": {
                  "description": "Keyvault x509 attributes secret properties.",
                  "type": "object",
                  "properties": {
                    "vault": {
                      "description": "KeyVault properties.",
                      "type": "object",
                      "properties": {
                        "credentials": {
                          "description": "KeyVault credentials.",
                          "type": "object",
                          "properties": {
                            "servicePrincipalLocalSecretName": {
                              "type": "string",
                              "description": "KeyVault service principal local secret name."
                            }
                          },
                          "required": [
                            "servicePrincipalLocalSecretName"
                          ]
                        },
                        "directoryId": {
                          "type": "string",
                          "description": "KeyVault directoryId."
                        },
                        "name": {
                          "type": "string",
                          "description": "KeyVault name."
                        }
                      },
                      "required": [
                        "credentials",
                        "directoryId",
                        "name"
                      ]
                    },
                    "vaultSecret": {
                      "description": "KeyVault secret details.",
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "KeyVault secret name."
                        },
                        "version": {
                          "type": "string",
                          "description": "KeyVault secret version."
                        }
                      },
                      "required": [
                        "name"
                      ]
                    }
                  },
                  "required": [
                    "vault",
                    "vaultSecret"
                  ]
                },
                "secretName": {
                  "type": "string",
                  "description": "Secret where x509 attributes are stored."
                }
              }
            },
            "trustedClientCaCertConfigMap": {
              "type": "string",
              "description": "Trusted client ca cert config map.",
              "default": "client-ca"
            }
          }
        }
      }
    },
    "BrokerAuthorizationProperties": {
      "type": "object",
      "description": "Broker Resource properties",
      "properties": {
        "authorizationPolicies": {
          "description": "The list of authorization policies supported by the Authorization Resource.",
          "type": "object",
          "properties": {
            "enableCache": {
              "type": "boolean",
              "description": "Enable caching of the authorization rules.",
              "default": true
            },
            "rules": {
              "type": "array",
              "description": "Authorization Rules to be used. If no rule is set, but Authorization Resource is used that would mean DenyAll.",
              "items": {
                "type": "object",
                "description": "BasicRules of AuthorizationConfig Polar rules are not supported",
                "properties": {
                  "brokerResources": {
                    "type": "array",
                    "description": "This subfield defines the broker resources that the Basic Rule is applied on.",
                    "items": {
                      "type": "object",
                      "description": "ResourceInfoDefinition properties of Basic Rule. This defines the objects that represent the actions or topics, such as - method.Connect, method.Publish, etc.",
                      "properties": {
                        "method": {
                          "description": "The type of action that the clients can perform on the broker: Connect, Publish or Subscribe.",
                          "type": "string",
                          "enum": [
                            "Connect",
                            "Publish",
                            "Subscribe"
                          ],
                          "x-ms-enum": {
                            "name": "ResourceInfoDefinitionMethods",
                            "modelAsString": true,
                            "values": [
                              {
                                "name": "Connect",
                                "value": "Connect",
                                "description": "Allowed Connecting to Broker"
                              },
                              {
                                "name": "Publish",
                                "value": "Publish",
                                "description": "Allowed Publishing to Broker"
                              },
                              {
                                "name": "Subscribe",
                                "value": "Subscribe",
                                "description": "Allowed Subscribing to Broker"
                              }
                            ]
                          }
                        },
                        "topics": {
                          "type": "array",
                          "description": "A list of topics or topic patterns that match the topics that the clients can publish or subscribe to. This subfield is required if the method is Publish or Subscribe.",
                          "items": {
                            "type": "string"
                          }
                        }
                      },
                      "required": [
                        "method"
                      ]
                    },
                    "x-ms-identifiers": []
                  },
                  "principals": {
                    "description": "This subfield defines the identities that represent the clients.",
                    "type": "object",
                    "properties": {
                      "attributes": {
                        "type": "array",
                        "description": "A list of key-value pairs that match the attributes of the clients. The attributes are case-sensitive and must match the attributes provided by the clients during authentication.",
                        "default": [],
                        "items": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "x-ms-identifiers": []
                      },
                      "clientids": {
                        "type": "array",
                        "description": "A list of client IDs that match the clients. The client IDs are case-sensitive and must match the client IDs provided by the clients during connection.",
                        "items": {
                          "type": "string"
                        }
                      },
                      "usernames": {
                        "type": "array",
                        "description": "A list of usernames that match the clients. The usernames are case-sensitive and must match the usernames provided by the clients during authentication.",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "required": [
                  "brokerResources",
                  "principals"
                ]
              },
              "x-ms-identifiers": []
            }
          }
        },
        "listenerRef": {
          "type": "array",
          "description": "The array of listener Resources it supports.",
          "items": {
            "type": "string"
          }
        },
        "provisioningState": {
          "description": "The status of the last operation.",
          "readOnly": true,
          "type": "string",
          "enum": [
            "Succeeded",
            "Failed",
            "Canceled",
            "Provisioning",
            "Updating",
            "Deleting",
            "Accepted"
          ],
          "x-ms-enum": {
            "name": "ProvisioningState",
            "modelAsString": true,
            "values": [
              {
                "name": "Succeeded",
                "value": "Succeeded",
                "description": "Resource has been created."
              },
              {
                "name": "Failed",
                "value": "Failed",
                "description": "Resource creation failed."
              },
              {
                "name": "Canceled",
                "value": "Canceled",
                "description": "Resource creation was canceled."
              },
              {
                "name": "Provisioning",
                "value": "Provisioning",
                "description": "Resource is getting provisioned."
              },
              {
                "name": "Updating",
                "value": "Updating",
                "description": "Resource is Updating."
              },
              {
                "name": "Deleting",
                "value": "Deleting",
                "description": "Resource is Deleting."
              },
              {
                "name": "Accepted",
                "value": "Accepted",
                "description": "Resource has been Accepted."
              }
            ]
          }
        }
      },
      "required": [
        "authorizationPolicies",
        "listenerRef"
      ]
    },
    "BrokerAuthorizationResource": {
      "type": "object",
      "description": "MQ broker/authorization resource",
      "properties": {
        "id": {
          "type": "string",
          "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "The name of the resource",
          "readOnly": true
        },
        "type": {
          "type": "string",
          "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
          "readOnly": true
        },
        "systemData": {
          "type": "object",
          "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
          "readOnly": true,
          "properties": {
            "createdBy": {
              "type": "string",
              "description": "The identity that created the resource."
            },
            "createdByType": {
              "type": "string",
              "description": "The type of identity that created the resource.",
              "enum": [
                "User",
                "Application",
                "ManagedIdentity",
                "Key"
              ],
              "x-ms-enum": {
                "name": "createdByType",
                "modelAsString": true
              }
            },
            "createdAt": {
              "type": "string",
              "format": "date-time",
              "description": "The timestamp of resource creation (UTC)."
            },
            "lastModifiedBy": {
              "type": "string",
              "description": "The identity that last modified the resource."
            },
            "lastModifiedByType": {
              "type": "string",
              "description": "The type of identity that last modified the resource.",
              "enum": [
                "User",
                "Application",
                "ManagedIdentity",
                "Key"
              ],
              "x-ms-enum": {
                "name": "createdByType",
                "modelAsString": true
              }
            },
            "lastModifiedAt": {
              "type": "string",
              "format": "date-time",
              "description": "The timestamp of resource last modification (UTC)"
            }
          }
        },
        "tags": {
          "type": "object",
          "description": "Resource tags.",
          "additionalProperties": {
            "type": "string"
          },
          "x-ms-mutability": [
            "read",
            "create",
            "update"
          ]
        },
        "location": {
          "type": "string",
          "description": "The geo-location where the resource lives",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "properties": {
          "description": "The resource-specific properties for this resource.",
          "x-ms-client-flatten": true,
          "type": "object",
          "properties": {
            "authorizationPolicies": {
              "description": "The list of authorization policies supported by the Authorization Resource.",
              "type": "object",
              "properties": {
                "enableCache": {
                  "type": "boolean",
                  "description": "Enable caching of the authorization rules.",
                  "default": true
                },
                "rules": {
                  "type": "array",
                  "description": "Authorization Rules to be used. If no rule is set, but Authorization Resource is used that would mean DenyAll.",
                  "items": {
                    "type": "object",
                    "description": "BasicRules of AuthorizationConfig Polar rules are not supported",
                    "properties": {
                      "brokerResources": {
                        "type": "array",
                        "description": "This subfield defines the broker resources that the Basic Rule is applied on.",
                        "items": {
                          "type": "object",
                          "description": "ResourceInfoDefinition properties of Basic Rule. This defines the objects that represent the actions or topics, such as - method.Connect, method.Publish, etc.",
                          "properties": {
                            "method": {
                              "description": "The type of action that the clients can perform on the broker: Connect, Publish or Subscribe.",
                              "type": "string",
                              "enum": [
                                "Connect",
                                "Publish",
                                "Subscribe"
                              ],
                              "x-ms-enum": {
                                "name": "ResourceInfoDefinitionMethods",
                                "modelAsString": true,
                                "values": [
                                  {
                                    "name": "Connect",
                                    "value": "Connect",
                                    "description": "Allowed Connecting to Broker"
                                  },
                                  {
                                    "name": "Publish",
                                    "value": "Publish",
                                    "description": "Allowed Publishing to Broker"
                                  },
                                  {
                                    "name": "Subscribe",
                                    "value": "Subscribe",
                                    "description": "Allowed Subscribing to Broker"
                                  }
                                ]
                              }
                            },
                            "topics": {
                              "type": "array",
                              "description": "A list of topics or topic patterns that match the topics that the clients can publish or subscribe to. This subfield is required if the method is Publish or Subscribe.",
                              "items": {
                                "type": "string"
                              }
                            }
                          },
                          "required": [
                            "method"
                          ]
                        },
                        "x-ms-identifiers": []
                      },
                      "principals": {
                        "description": "This subfield defines the identities that represent the clients.",
                        "type": "object",
                        "properties": {
                          "attributes": {
                            "type": "array",
                            "description": "A list of key-value pairs that match the attributes of the clients. The attributes are case-sensitive and must match the attributes provided by the clients during authentication.",
                            "default": [],
                            "items": {
                              "type": "object",
                              "additionalProperties": {
                                "type": "string"
                              }
                            },
                            "x-ms-identifiers": []
                          },
                          "clientids": {
                            "type": "array",
                            "description": "A list of client IDs that match the clients. The client IDs are case-sensitive and must match the client IDs provided by the clients during connection.",
                            "items": {
                              "type": "string"
                            }
                          },
                          "usernames": {
                            "type": "array",
                            "description": "A list of usernames that match the clients. The usernames are case-sensitive and must match the usernames provided by the clients during authentication.",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    },
                    "required": [
                      "brokerResources",
                      "principals"
                    ]
                  },
                  "x-ms-identifiers": []
                }
              }
            },
            "listenerRef": {
              "type": "array",
              "description": "The array of listener Resources it supports.",
              "items": {
                "type": "string"
              }
            },
            "provisioningState": {
              "description": "The status of the last operation.",
              "readOnly": true,
              "type": "string",
              "enum": [
                "Succeeded",
                "Failed",
                "Canceled",
                "Provisioning",
                "Updating",
                "Deleting",
                "Accepted"
              ],
              "x-ms-enum": {
                "name": "ProvisioningState",
                "modelAsString": true,
                "values": [
                  {
                    "name": "Succeeded",
                    "value": "Succeeded",
                    "description": "Resource has been created."
                  },
                  {
                    "name": "Failed",
                    "value": "Failed",
                    "description": "Resource creation failed."
                  },
                  {
                    "name": "Canceled",
                    "value": "Canceled",
                    "description": "Resource creation was canceled."
                  },
                  {
                    "name": "Provisioning",
                    "value": "Provisioning",
                    "description": "Resource is getting provisioned."
                  },
                  {
                    "name": "Updating",
                    "value": "Updating",
                    "description": "Resource is Updating."
                  },
                  {
                    "name": "Deleting",
                    "value": "Deleting",
                    "description": "Resource is Deleting."
                  },
                  {
                    "name": "Accepted",
                    "value": "Accepted",
                    "description": "Resource has been Accepted."
                  }
                ]
              }
            }
          },
          "required": [
            "authorizationPolicies",
            "listenerRef"
          ]
        },
        "extendedLocation": {
          "description": "Extended Location",
          "x-ms-mutability": [
            "read",
            "create"
          ],
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name of the extended location."
            },
            "type": {
              "description": "Type of ExtendedLocation.",
              "type": "string",
              "enum": [
                "CustomLocation"
              ],
              "x-ms-enum": {
                "name": "ExtendedLocationType",
                "modelAsString": true,
                "values": [
                  {
                    "name": "CustomLocation",
                    "value": "CustomLocation",
                    "description": "CustomLocation type"
                  }
                ]
              }
            }
          },
          "required": [
            "name",
            "type"
          ]
        }
      },
      "required": [
        "extendedLocation"
      ]
    },
    "BrokerAuthorizationResourceListResult": {
      "type": "object",
      "description": "The response of a BrokerAuthorizationResource list operation.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The BrokerAuthorizationResource items on this page",
          "items": {
            "type": "object",
            "description": "MQ broker/authorization resource",
            "properties": {
              "id": {
                "type": "string",
                "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                "readOnly": true
              },
              "name": {
                "type": "string",
                "description": "The name of the resource",
                "readOnly": true
              },
              "type": {
                "type": "string",
                "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                "readOnly": true
              },
              "systemData": {
                "type": "object",
                "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                "readOnly": true,
                "properties": {
                  "createdBy": {
                    "type": "string",
                    "description": "The identity that created the resource."
                  },
                  "createdByType": {
                    "type": "string",
                    "description": "The type of identity that created the resource.",
                    "enum": [
                      "User",
                      "Application",
                      "ManagedIdentity",
                      "Key"
                    ],
                    "x-ms-enum": {
                      "name": "createdByType",
                      "modelAsString": true
                    }
                  },
                  "createdAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp of resource creation (UTC)."
                  },
                  "lastModifiedBy": {
                    "type": "string",
                    "description": "The identity that last modified the resource."
                  },
                  "lastModifiedByType": {
                    "type": "string",
                    "description": "The type of identity that last modified the resource.",
                    "enum": [
                      "User",
                      "Application",
                      "ManagedIdentity",
                      "Key"
                    ],
                    "x-ms-enum": {
                      "name": "createdByType",
                      "modelAsString": true
                    }
                  },
                  "lastModifiedAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp of resource last modification (UTC)"
                  }
                }
              },
              "tags": {
                "type": "object",
                "description": "Resource tags.",
                "additionalProperties": {
                  "type": "string"
                },
                "x-ms-mutability": [
                  "read",
                  "create",
                  "update"
                ]
              },
              "location": {
                "type": "string",
                "description": "The geo-location where the resource lives",
                "x-ms-mutability": [
                  "read",
                  "create"
                ]
              },
              "properties": {
                "description": "The resource-specific properties for this resource.",
                "x-ms-client-flatten": true,
                "type": "object",
                "properties": {
                  "authorizationPolicies": {
                    "description": "The list of authorization policies supported by the Authorization Resource.",
                    "type": "object",
                    "properties": {
                      "enableCache": {
                        "type": "boolean",
                        "description": "Enable caching of the authorization rules.",
                        "default": true
                      },
                      "rules": {
                        "type": "array",
                        "description": "Authorization Rules to be used. If no rule is set, but Authorization Resource is used that would mean DenyAll.",
                        "items": {
                          "type": "object",
                          "description": "BasicRules of AuthorizationConfig Polar rules are not supported",
                          "properties": {
                            "brokerResources": {
                              "type": "array",
                              "description": "This subfield defines the broker resources that the Basic Rule is applied on.",
                              "items": {
                                "type": "object",
                                "description": "ResourceInfoDefinition properties of Basic Rule. This defines the objects that represent the actions or topics, such as - method.Connect, method.Publish, etc.",
                                "properties": {
                                  "method": {
                                    "description": "The type of action that the clients can perform on the broker: Connect, Publish or Subscribe.",
                                    "type": "string",
                                    "enum": [
                                      "Connect",
                                      "Publish",
                                      "Subscribe"
                                    ],
                                    "x-ms-enum": {
                                      "name": "ResourceInfoDefinitionMethods",
                                      "modelAsString": true,
                                      "values": [
                                        {
                                          "name": "Connect",
                                          "value": "Connect",
                                          "description": "Allowed Connecting to Broker"
                                        },
                                        {
                                          "name": "Publish",
                                          "value": "Publish",
                                          "description": "Allowed Publishing to Broker"
                                        },
                                        {
                                          "name": "Subscribe",
                                          "value": "Subscribe",
                                          "description": "Allowed Subscribing to Broker"
                                        }
                                      ]
                                    }
                                  },
                                  "topics": {
                                    "type": "array",
                                    "description": "A list of topics or topic patterns that match the topics that the clients can publish or subscribe to. This subfield is required if the method is Publish or Subscribe.",
                                    "items": {
                                      "type": "string"
                                    }
                                  }
                                },
                                "required": [
                                  "method"
                                ]
                              },
                              "x-ms-identifiers": []
                            },
                            "principals": {
                              "description": "This subfield defines the identities that represent the clients.",
                              "type": "object",
                              "properties": {
                                "attributes": {
                                  "type": "array",
                                  "description": "A list of key-value pairs that match the attributes of the clients. The attributes are case-sensitive and must match the attributes provided by the clients during authentication.",
                                  "default": [],
                                  "items": {
                                    "type": "object",
                                    "additionalProperties": {
                                      "type": "string"
                                    }
                                  },
                                  "x-ms-identifiers": []
                                },
                                "clientids": {
                                  "type": "array",
                                  "description": "A list of client IDs that match the clients. The client IDs are case-sensitive and must match the client IDs provided by the clients during connection.",
                                  "items": {
                                    "type": "string"
                                  }
                                },
                                "usernames": {
                                  "type": "array",
                                  "description": "A list of usernames that match the clients. The usernames are case-sensitive and must match the usernames provided by the clients during authentication.",
                                  "items": {
                                    "type": "string"
                                  }
                                }
                              }
                            }
                          },
                          "required": [
                            "brokerResources",
                            "principals"
                          ]
                        },
                        "x-ms-identifiers": []
                      }
                    }
                  },
                  "listenerRef": {
                    "type": "array",
                    "description": "The array of listener Resources it supports.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "provisioningState": {
                    "description": "The status of the last operation.",
                    "readOnly": true,
                    "type": "string",
                    "enum": [
                      "Succeeded",
                      "Failed",
                      "Canceled",
                      "Provisioning",
                      "Updating",
                      "Deleting",
                      "Accepted"
                    ],
                    "x-ms-enum": {
                      "name": "ProvisioningState",
                      "modelAsString": true,
                      "values": [
                        {
                          "name": "Succeeded",
                          "value": "Succeeded",
                          "description": "Resource has been created."
                        },
                        {
                          "name": "Failed",
                          "value": "Failed",
                          "description": "Resource creation failed."
                        },
                        {
                          "name": "Canceled",
                          "value": "Canceled",
                          "description": "Resource creation was canceled."
                        },
                        {
                          "name": "Provisioning",
                          "value": "Provisioning",
                          "description": "Resource is getting provisioned."
                        },
                        {
                          "name": "Updating",
                          "value": "Updating",
                          "description": "Resource is Updating."
                        },
                        {
                          "name": "Deleting",
                          "value": "Deleting",
                          "description": "Resource is Deleting."
                        },
                        {
                          "name": "Accepted",
                          "value": "Accepted",
                          "description": "Resource has been Accepted."
                        }
                      ]
                    }
                  }
                },
                "required": [
                  "authorizationPolicies",
                  "listenerRef"
                ]
              },
              "extendedLocation": {
                "description": "Extended Location",
                "x-ms-mutability": [
                  "read",
                  "create"
                ],
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the extended location."
                  },
                  "type": {
                    "description": "Type of ExtendedLocation.",
                    "type": "string",
                    "enum": [
                      "CustomLocation"
                    ],
                    "x-ms-enum": {
                      "name": "ExtendedLocationType",
                      "modelAsString": true,
                      "values": [
                        {
                          "name": "CustomLocation",
                          "value": "CustomLocation",
                          "description": "CustomLocation type"
                        }
                      ]
                    }
                  }
                },
                "required": [
                  "name",
                  "type"
                ]
              }
            },
            "required": [
              "extendedLocation"
            ]
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "BrokerAuthorizationResourceUpdate": {
      "type": "object",
      "description": "The type used for update operations of the BrokerAuthorizationResource.",
      "properties": {
        "tags": {
          "type": "object",
          "description": "Resource tags.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "properties": {
          "description": "The resource-specific properties for this resource.",
          "x-ms-client-flatten": true,
          "type": "object",
          "properties": {
            "authorizationPolicies": {
              "description": "The list of authorization policies supported by the Authorization Resource.",
              "type": "object",
              "properties": {
                "enableCache": {
                  "type": "boolean",
                  "description": "Enable caching of the authorization rules.",
                  "default": true
                },
                "rules": {
                  "type": "array",
                  "description": "Authorization Rules to be used. If no rule is set, but Authorization Resource is used that would mean DenyAll.",
                  "items": {
                    "type": "object",
                    "description": "BasicRules of AuthorizationConfig Polar rules are not supported",
                    "properties": {
                      "brokerResources": {
                        "type": "array",
                        "description": "This subfield defines the broker resources that the Basic Rule is applied on.",
                        "items": {
                          "type": "object",
                          "description": "ResourceInfoDefinition properties of Basic Rule. This defines the objects that represent the actions or topics, such as - method.Connect, method.Publish, etc.",
                          "properties": {
                            "method": {
                              "description": "The type of action that the clients can perform on the broker: Connect, Publish or Subscribe.",
                              "type": "string",
                              "enum": [
                                "Connect",
                                "Publish",
                                "Subscribe"
                              ],
                              "x-ms-enum": {
                                "name": "ResourceInfoDefinitionMethods",
                                "modelAsString": true,
                                "values": [
                                  {
                                    "name": "Connect",
                                    "value": "Connect",
                                    "description": "Allowed Connecting to Broker"
                                  },
                                  {
                                    "name": "Publish",
                                    "value": "Publish",
                                    "description": "Allowed Publishing to Broker"
                                  },
                                  {
                                    "name": "Subscribe",
                                    "value": "Subscribe",
                                    "description": "Allowed Subscribing to Broker"
                                  }
                                ]
                              }
                            },
                            "topics": {
                              "type": "array",
                              "description": "A list of topics or topic patterns that match the topics that the clients can publish or subscribe to. This subfield is required if the method is Publish or Subscribe.",
                              "items": {
                                "type": "string"
                              }
                            }
                          },
                          "required": [
                            "method"
                          ]
                        },
                        "x-ms-identifiers": []
                      },
                      "principals": {
                        "description": "This subfield defines the identities that represent the clients.",
                        "type": "object",
                        "properties": {
                          "attributes": {
                            "type": "array",
                            "description": "A list of key-value pairs that match the attributes of the clients. The attributes are case-sensitive and must match the attributes provided by the clients during authentication.",
                            "default": [],
                            "items": {
                              "type": "object",
                              "additionalProperties": {
                                "type": "string"
                              }
                            },
                            "x-ms-identifiers": []
                          },
                          "clientids": {
                            "type": "array",
                            "description": "A list of client IDs that match the clients. The client IDs are case-sensitive and must match the client IDs provided by the clients during connection.",
                            "items": {
                              "type": "string"
                            }
                          },
                          "usernames": {
                            "type": "array",
                            "description": "A list of usernames that match the clients. The usernames are case-sensitive and must match the usernames provided by the clients during authentication.",
                            "items": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    },
                    "required": [
                      "brokerResources",
                      "principals"
                    ]
                  },
                  "x-ms-identifiers": []
                }
              }
            },
            "listenerRef": {
              "type": "array",
              "description": "The array of listener Resources it supports.",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "BrokerAuthorizationResourceUpdateProperties": {
      "type": "object",
      "description": "The updatable properties of the BrokerAuthorizationResource.",
      "properties": {
        "authorizationPolicies": {
          "description": "The list of authorization policies supported by the Authorization Resource.",
          "type": "object",
          "properties": {
            "enableCache": {
              "type": "boolean",
              "description": "Enable caching of the authorization rules.",
              "default": true
            },
            "rules": {
              "type": "array",
              "description": "Authorization Rules to be used. If no rule is set, but Authorization Resource is used that would mean DenyAll.",
              "items": {
                "type": "object",
                "description": "BasicRules of AuthorizationConfig Polar rules are not supported",
                "properties": {
                  "brokerResources": {
                    "type": "array",
                    "description": "This subfield defines the broker resources that the Basic Rule is applied on.",
                    "items": {
                      "type": "object",
                      "description": "ResourceInfoDefinition properties of Basic Rule. This defines the objects that represent the actions or topics, such as - method.Connect, method.Publish, etc.",
                      "properties": {
                        "method": {
                          "description": "The type of action that the clients can perform on the broker: Connect, Publish or Subscribe.",
                          "type": "string",
                          "enum": [
                            "Connect",
                            "Publish",
                            "Subscribe"
                          ],
                          "x-ms-enum": {
                            "name": "ResourceInfoDefinitionMethods",
                            "modelAsString": true,
                            "values": [
                              {
                                "name": "Connect",
                                "value": "Connect",
                                "description": "Allowed Connecting to Broker"
                              },
                              {
                                "name": "Publish",
                                "value": "Publish",
                                "description": "Allowed Publishing to Broker"
                              },
                              {
                                "name": "Subscribe",
                                "value": "Subscribe",
                                "description": "Allowed Subscribing to Broker"
                              }
                            ]
                          }
                        },
                        "topics": {
                          "type": "array",
                          "description": "A list of topics or topic patterns that match the topics that the clients can publish or subscribe to. This subfield is required if the method is Publish or Subscribe.",
                          "items": {
                            "type": "string"
                          }
                        }
                      },
                      "required": [
                        "method"
                      ]
                    },
                    "x-ms-identifiers": []
                  },
                  "principals": {
                    "description": "This subfield defines the identities that represent the clients.",
                    "type": "object",
                    "properties": {
                      "attributes": {
                        "type": "array",
                        "description": "A list of key-value pairs that match the attributes of the clients. The attributes are case-sensitive and must match the attributes provided by the clients during authentication.",
                        "default": [],
                        "items": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "x-ms-identifiers": []
                      },
                      "clientids": {
                        "type": "array",
                        "description": "A list of client IDs that match the clients. The client IDs are case-sensitive and must match the client IDs provided by the clients during connection.",
                        "items": {
                          "type": "string"
                        }
                      },
                      "usernames": {
                        "type": "array",
                        "description": "A list of usernames that match the clients. The usernames are case-sensitive and must match the usernames provided by the clients during authentication.",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "required": [
                  "brokerResources",
                  "principals"
                ]
              },
              "x-ms-identifiers": []
            }
          }
        },
        "listenerRef": {
          "type": "array",
          "description": "The array of listener Resources it supports.",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "BrokerDiagnostics": {
      "type": "object",
      "description": "Diagnostics setting specific to Broker",
      "properties": {
        "diagnosticServiceEndpoint": {
          "type": "string",
          "description": "Diagnostic Service endpoint"
        },
        "enableMetrics": {
          "type": "boolean",
          "description": "Knob to enable/disable metrics. Default = true",
          "default": true
        },
        "enableSelfCheck": {
          "type": "boolean",
          "description": "Enable self check on Broker via Probe.",
          "default": true
        },
        "enableSelfTracing": {
          "type": "boolean",
          "description": "Enable self tracing on the Broker so that every selfCheckFrequencySeconds a random message is traced even if it didn't have trace context.",
          "default": true
        },
        "enableTracing": {
          "type": "boolean",
          "description": "Knob to enable/disable entire tracing infrastructure.",
          "default": true
        },
        "logFormat": {
          "type": "string",
          "description": "Format for the logs generated.",
          "default": "text"
        },
        "logLevel": {
          "type": "string",
          "description": "Log level for the Broker.",
          "default": "info,hyper=off,kube_client=off,tower=off,conhash=off,h2=off"
        },
        "maxCellMapLifetime": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum time for the CellMap to live.",
          "default": 60,
          "minimum": 0,
          "maximum": 9223372036854000000
        },
        "metricUpdateFrequencySeconds": {
          "type": "integer",
          "format": "int64",
          "description": "Metric update frequency in seconds.",
          "default": 30,
          "minimum": 0,
          "maximum": 9223372036854000000
        },
        "probeImage": {
          "type": "string",
          "description": "Probe Image to run.",
          "default": "sample.azurecr.io/diagnostics-probe:0.5.0"
        },
        "selfCheckFrequencySeconds": {
          "type": "integer",
          "format": "int64",
          "description": "Frequency for the self check to run.",
          "default": 30,
          "minimum": 0,
          "maximum": 9223372036854000000
        },
        "selfCheckTimeoutSeconds": {
          "type": "integer",
          "format": "int64",
          "description": "Time out period of the self check.",
          "default": 15,
          "minimum": 0,
          "maximum": 9223372036854000000
        },
        "selfTraceFrequencySeconds": {
          "type": "integer",
          "format": "int64",
          "description": "The frequency at which selfTrace should run.",
          "default": 30,
          "minimum": 0,
          "maximum": 9223372036854000000
        },
        "spanChannelCapacity": {
          "type": "integer",
          "format": "int64",
          "description": "The number of the spans generated by the Tracing.",
          "default": 1000,
          "minimum": 0,
          "maximum": 9223372036854000000
        }
      }
    },
    "BrokerListenerProperties": {
      "type": "object",
      "description": "Broker Listener Resource properties",
      "properties": {
        "authenticationEnabled": {
          "type": "boolean",
          "description": "The flag for enabling Authentication rules on Listener Port.",
          "default": false
        },
        "authorizationEnabled": {
          "type": "boolean",
          "description": "The flag for enabling Authorization policies on Listener Port. false - AllowAll, true - Use Authorization resource rules if present.",
          "default": false
        },
        "brokerRef": {
          "type": "string",
          "description": "The k8s cr/resource reference of mq/broker."
        },
        "nodePort": {
          "type": "integer",
          "format": "int32",
          "description": "The node port to use on the Host node.",
          "minimum": 0,
          "maximum": 65535
        },
        "port": {
          "type": "integer",
          "format": "int32",
          "description": "The port to start Listening for connections on.",
          "minimum": 0,
          "maximum": 65535
        },
        "serviceName": {
          "type": "string",
          "description": "The service name to expose Listener port on.",
          "default": "aio-mq-dmqtt-frontend"
        },
        "serviceType": {
          "type": "string",
          "description": "The Kubernetes Service type to deploy for Listener.",
          "default": "clusterIp",
          "enum": [
            "clusterIp",
            "loadBalancer",
            "nodePort"
          ],
          "x-ms-enum": {
            "name": "ServiceType",
            "modelAsString": true,
            "values": [
              {
                "name": "clusterIp",
                "value": "clusterIp",
                "description": "Cluster IP Service."
              },
              {
                "name": "loadBalancer",
                "value": "loadBalancer",
                "description": "Load Balancer Service."
              },
              {
                "name": "nodePort",
                "value": "nodePort",
                "description": "Node Port Service."
              }
            ]
          }
        },
        "tls": {
          "description": "Defines configuration of a TLS server certificate. NOTE Enum - Only one TLS Cert method is supported",
          "type": "object",
          "properties": {
            "automatic": {
              "description": "Option 1 - Automatic TLS server certificate management with cert-manager.",
              "type": "object",
              "properties": {
                "duration": {
                  "type": "string",
                  "description": "Lifetime of automatically-managed certificate.",
                  "default": "720h"
                },
                "issuerRef": {
                  "description": "cert-manager issuerRef.",
                  "type": "object",
                  "properties": {
                    "group": {
                      "type": "string",
                      "description": "group of issuer.",
                      "default": "cert-manager.io"
                    },
                    "kind": {
                      "type": "string",
                      "description": "kind of issuer (Issuer or ClusterIssuer)."
                    },
                    "name": {
                      "type": "string",
                      "description": "name of issuer."
                    }
                  },
                  "required": [
                    "group",
                    "kind",
                    "name"
                  ]
                },
                "privateKey": {
                  "description": "Cert Manager private key.",
                  "type": "object",
                  "properties": {
                    "algorithm": {
                      "type": "string",
                      "description": "algorithm for private key.",
                      "default": "ECDSA"
                    },
                    "rotationPolicy": {
                      "type": "string",
                      "description": "cert-manager rotationPolicy.",
                      "default": "Always"
                    },
                    "size": {
                      "type": "integer",
                      "format": "int32",
                      "description": "size of private key.",
                      "default": 256,
                      "minimum": 0,
                      "maximum": 65535
                    }
                  },
                  "required": [
                    "algorithm",
                    "rotationPolicy",
                    "size"
                  ]
                },
                "renewBefore": {
                  "type": "string",
                  "description": "When to begin renewing automatically-managed certificate.",
                  "default": "240h"
                },
                "san": {
                  "description": "Additional SANs to include in the certificate.",
                  "type": "object",
                  "properties": {
                    "dns": {
                      "type": "array",
                      "description": "DNS SANs.",
                      "default": [],
                      "items": {
                        "type": "string"
                      }
                    },
                    "ip": {
                      "type": "array",
                      "description": "IP address SANs.",
                      "default": [],
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "dns",
                    "ip"
                  ]
                },
                "secretName": {
                  "type": "string",
                  "description": "Secret for storing server certificate. Any existing data will be overwritten."
                },
                "secretNamespace": {
                  "type": "string",
                  "description": "Certificate K8S namespace. Omit to use default namespace."
                }
              },
              "required": [
                "issuerRef"
              ]
            },
            "manual": {
              "description": "Option 2 - Manual TLS server certificate management through a defined secret.",
              "type": "object",
              "properties": {
                "secretName": {
                  "type": "string",
                  "description": "secret containing TLS cert."
                },
                "secretNamespace": {
                  "type": "string",
                  "description": "namespace of secret; omit to use default namespace."
                }
              },
              "required": [
                "secretName"
              ]
            },
            "keyVault": {
              "description": "Option 3 - TLS server certificate retrieved from Key Vault..",
              "type": "object",
              "properties": {
                "vault": {
                  "description": "KeyVault properties.",
                  "type": "object",
                  "properties": {
                    "credentials": {
                      "description": "KeyVault credentials.",
                      "type": "object",
                      "properties": {
                        "servicePrincipalLocalSecretName": {
                          "type": "string",
                          "description": "KeyVault service principal local secret name."
                        }
                      },
                      "required": [
                        "servicePrincipalLocalSecretName"
                      ]
                    },
                    "directoryId": {
                      "type": "string",
                      "description": "KeyVault directoryId."
                    },
                    "name": {
                      "type": "string",
                      "description": "KeyVault name."
                    }
                  },
                  "required": [
                    "credentials",
                    "directoryId",
                    "name"
                  ]
                },
                "vaultCaChainSecret": {
                  "description": "KeyVault CA chain secret details.",
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "KeyVault secret name."
                    },
                    "version": {
                      "type": "string",
                      "description": "KeyVault secret version."
                    }
                  },
                  "required": [
                    "name"
                  ]
                },
                "vaultCert": {
                  "description": "KeyVault Cert secret details.",
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "KeyVault secret name."
                    },
                    "version": {
                      "type": "string",
                      "description": "KeyVault secret version."
                    }
                  },
                  "required": [
                    "name"
                  ]
                }
              },
              "required": [
                "vault",
                "vaultCert"
              ]
            }
          }
        },
        "provisioningState": {
          "description": "The status of the last operation.",
          "readOnly": true,
          "type": "string",
          "enum": [
            "Succeeded",
            "Failed",
            "Canceled",
            "Provisioning",
            "Updating",
            "Deleting",
            "Accepted"
          ],
          "x-ms-enum": {
            "name": "ProvisioningState",
            "modelAsString": true,
            "values": [
              {
                "name": "Succeeded",
                "value": "Succeeded",
                "description": "Resource has been created."
              },
              {
                "name": "Failed",
                "value": "Failed",
                "description": "Resource creation failed."
              },
              {
                "name": "Canceled",
                "value": "Canceled",
                "description": "Resource creation was canceled."
              },
              {
                "name": "Provisioning",
                "value": "Provisioning",
                "description": "Resource is getting provisioned."
              },
              {
                "name": "Updating",
                "value": "Updating",
                "description": "Resource is Updating."
              },
              {
                "name": "Deleting",
                "value": "Deleting",
                "description": "Resource is Deleting."
              },
              {
                "name": "Accepted",
                "value": "Accepted",
                "description": "Resource has been Accepted."
              }
            ]
          }
        }
      },
      "required": [
        "brokerRef",
        "port"
      ]
    },
    "BrokerListenerResource": {
      "type": "object",
      "description": "MQ broker/listener resource",
      "properties": {
        "id": {
          "type": "string",
          "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "The name of the resource",
          "readOnly": true
        },
        "type": {
          "type": "string",
          "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
          "readOnly": true
        },
        "systemData": {
          "type": "object",
          "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
          "readOnly": true,
          "properties": {
            "createdBy": {
              "type": "string",
              "description": "The identity that created the resource."
            },
            "createdByType": {
              "type": "string",
              "description": "The type of identity that created the resource.",
              "enum": [
                "User",
                "Application",
                "ManagedIdentity",
                "Key"
              ],
              "x-ms-enum": {
                "name": "createdByType",
                "modelAsString": true
              }
            },
            "createdAt": {
              "type": "string",
              "format": "date-time",
              "description": "The timestamp of resource creation (UTC)."
            },
            "lastModifiedBy": {
              "type": "string",
              "description": "The identity that last modified the resource."
            },
            "lastModifiedByType": {
              "type": "string",
              "description": "The type of identity that last modified the resource.",
              "enum": [
                "User",
                "Application",
                "ManagedIdentity",
                "Key"
              ],
              "x-ms-enum": {
                "name": "createdByType",
                "modelAsString": true
              }
            },
            "lastModifiedAt": {
              "type": "string",
              "format": "date-time",
              "description": "The timestamp of resource last modification (UTC)"
            }
          }
        },
        "tags": {
          "type": "object",
          "description": "Resource tags.",
          "additionalProperties": {
            "type": "string"
          },
          "x-ms-mutability": [
            "read",
            "create",
            "update"
          ]
        },
        "location": {
          "type": "string",
          "description": "The geo-location where the resource lives",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "properties": {
          "description": "The resource-specific properties for this resource.",
          "x-ms-client-flatten": true,
          "type": "object",
          "properties": {
            "authenticationEnabled": {
              "type": "boolean",
              "description": "The flag for enabling Authentication rules on Listener Port.",
              "default": false
            },
            "authorizationEnabled": {
              "type": "boolean",
              "description": "The flag for enabling Authorization policies on Listener Port. false - AllowAll, true - Use Authorization resource rules if present.",
              "default": false
            },
            "brokerRef": {
              "type": "string",
              "description": "The k8s cr/resource reference of mq/broker."
            },
            "nodePort": {
              "type": "integer",
              "format": "int32",
              "description": "The node port to use on the Host node.",
              "minimum": 0,
              "maximum": 65535
            },
            "port": {
              "type": "integer",
              "format": "int32",
              "description": "The port to start Listening for connections on.",
              "minimum": 0,
              "maximum": 65535
            },
            "serviceName": {
              "type": "string",
              "description": "The service name to expose Listener port on.",
              "default": "aio-mq-dmqtt-frontend"
            },
            "serviceType": {
              "type": "string",
              "description": "The Kubernetes Service type to deploy for Listener.",
              "default": "clusterIp",
              "enum": [
                "clusterIp",
                "loadBalancer",
                "nodePort"
              ],
              "x-ms-enum": {
                "name": "ServiceType",
                "modelAsString": true,
                "values": [
                  {
                    "name": "clusterIp",
                    "value": "clusterIp",
                    "description": "Cluster IP Service."
                  },
                  {
                    "name": "loadBalancer",
                    "value": "loadBalancer",
                    "description": "Load Balancer Service."
                  },
                  {
                    "name": "nodePort",
                    "value": "nodePort",
                    "description": "Node Port Service."
                  }
                ]
              }
            },
            "tls": {
              "description": "Defines configuration of a TLS server certificate. NOTE Enum - Only one TLS Cert method is supported",
              "type": "object",
              "properties": {
                "automatic": {
                  "description": "Option 1 - Automatic TLS server certificate management with cert-manager.",
                  "type": "object",
                  "properties": {
                    "duration": {
                      "type": "string",
                      "description": "Lifetime of automatically-managed certificate.",
                      "default": "720h"
                    },
                    "issuerRef": {
                      "description": "cert-manager issuerRef.",
                      "type": "object",
                      "properties": {
                        "group": {
                          "type": "string",
                          "description": "group of issuer.",
                          "default": "cert-manager.io"
                        },
                        "kind": {
                          "type": "string",
                          "description": "kind of issuer (Issuer or ClusterIssuer)."
                        },
                        "name": {
                          "type": "string",
                          "description": "name of issuer."
                        }
                      },
                      "required": [
                        "group",
                        "kind",
                        "name"
                      ]
                    },
                    "privateKey": {
                      "description": "Cert Manager private key.",
                      "type": "object",
                      "properties": {
                        "algorithm": {
                          "type": "string",
                          "description": "algorithm for private key.",
                          "default": "ECDSA"
                        },
                        "rotationPolicy": {
                          "type": "string",
                          "description": "cert-manager rotationPolicy.",
                          "default": "Always"
                        },
                        "size": {
                          "type": "integer",
                          "format": "int32",
                          "description": "size of private key.",
                          "default": 256,
                          "minimum": 0,
                          "maximum": 65535
                        }
                      },
                      "required": [
                        "algorithm",
                        "rotationPolicy",
                        "size"
                      ]
                    },
                    "renewBefore": {
                      "type": "string",
                      "description": "When to begin renewing automatically-managed certificate.",
                      "default": "240h"
                    },
                    "san": {
                      "description": "Additional SANs to include in the certificate.",
                      "type": "object",
                      "properties": {
                        "dns": {
                          "type": "array",
                          "description": "DNS SANs.",
                          "default": [],
                          "items": {
                            "type": "string"
                          }
                        },
                        "ip": {
                          "type": "array",
                          "description": "IP address SANs.",
                          "default": [],
                          "items": {
                            "type": "string"
                          }
                        }
                      },
                      "required": [
                        "dns",
                        "ip"
                      ]
                    },
                    "secretName": {
                      "type": "string",
                      "description": "Secret for storing server certificate. Any existing data will be overwritten."
                    },
                    "secretNamespace": {
                      "type": "string",
                      "description": "Certificate K8S namespace. Omit to use default namespace."
                    }
                  },
                  "required": [
                    "issuerRef"
                  ]
                },
                "manual": {
                  "description": "Option 2 - Manual TLS server certificate management through a defined secret.",
                  "type": "object",
                  "properties": {
                    "secretName": {
                      "type": "string",
                      "description": "secret containing TLS cert."
                    },
                    "secretNamespace": {
                      "type": "string",
                      "description": "namespace of secret; omit to use default namespace."
                    }
                  },
                  "required": [
                    "secretName"
                  ]
                },
                "keyVault": {
                  "description": "Option 3 - TLS server certificate retrieved from Key Vault..",
                  "type": "object",
                  "properties": {
                    "vault": {
                      "description": "KeyVault properties.",
                      "type": "object",
                      "properties": {
                        "credentials": {
                          "description": "KeyVault credentials.",
                          "type": "object",
                          "properties": {
                            "servicePrincipalLocalSecretName": {
                              "type": "string",
                              "description": "KeyVault service principal local secret name."
                            }
                          },
                          "required": [
                            "servicePrincipalLocalSecretName"
                          ]
                        },
                        "directoryId": {
                          "type": "string",
                          "description": "KeyVault directoryId."
                        },
                        "name": {
                          "type": "string",
                          "description": "KeyVault name."
                        }
                      },
                      "required": [
                        "credentials",
                        "directoryId",
                        "name"
                      ]
                    },
                    "vaultCaChainSecret": {
                      "description": "KeyVault CA chain secret details.",
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "KeyVault secret name."
                        },
                        "version": {
                          "type": "string",
                          "description": "KeyVault secret version."
                        }
                      },
                      "required": [
                        "name"
                      ]
                    },
                    "vaultCert": {
                      "description": "KeyVault Cert secret details.",
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "KeyVault secret name."
                        },
                        "version": {
                          "type": "string",
                          "description": "KeyVault secret version."
                        }
                      },
                      "required": [
                        "name"
                      ]
                    }
                  },
                  "required": [
                    "vault",
                    "vaultCert"
                  ]
                }
              }
            },
            "provisioningState": {
              "description": "The status of the last operation.",
              "readOnly": true,
              "type": "string",
              "enum": [
                "Succeeded",
                "Failed",
                "Canceled",
                "Provisioning",
                "Updating",
                "Deleting",
                "Accepted"
              ],
              "x-ms-enum": {
                "name": "ProvisioningState",
                "modelAsString": true,
                "values": [
                  {
                    "name": "Succeeded",
                    "value": "Succeeded",
                    "description": "Resource has been created."
                  },
                  {
                    "name": "Failed",
                    "value": "Failed",
                    "description": "Resource creation failed."
                  },
                  {
                    "name": "Canceled",
                    "value": "Canceled",
                    "description": "Resource creation was canceled."
                  },
                  {
                    "name": "Provisioning",
                    "value": "Provisioning",
                    "description": "Resource is getting provisioned."
                  },
                  {
                    "name": "Updating",
                    "value": "Updating",
                    "description": "Resource is Updating."
                  },
                  {
                    "name": "Deleting",
                    "value": "Deleting",
                    "description": "Resource is Deleting."
                  },
                  {
                    "name": "Accepted",
                    "value": "Accepted",
                    "description": "Resource has been Accepted."
                  }
                ]
              }
            }
          },
          "required": [
            "brokerRef",
            "port"
          ]
        },
        "extendedLocation": {
          "description": "Extended Location",
          "x-ms-mutability": [
            "read",
            "create"
          ],
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name of the extended location."
            },
            "type": {
              "description": "Type of ExtendedLocation.",
              "type": "string",
              "enum": [
                "CustomLocation"
              ],
              "x-ms-enum": {
                "name": "ExtendedLocationType",
                "modelAsString": true,
                "values": [
                  {
                    "name": "CustomLocation",
                    "value": "CustomLocation",
                    "description": "CustomLocation type"
                  }
                ]
              }
            }
          },
          "required": [
            "name",
            "type"
          ]
        }
      },
      "required": [
        "extendedLocation"
      ]
    },
    "BrokerListenerResourceListResult": {
      "type": "object",
      "description": "The response of a BrokerListenerResource list operation.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The BrokerListenerResource items on this page",
          "items": {
            "type": "object",
            "description": "MQ broker/listener resource",
            "properties": {
              "id": {
                "type": "string",
                "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                "readOnly": true
              },
              "name": {
                "type": "string",
                "description": "The name of the resource",
                "readOnly": true
              },
              "type": {
                "type": "string",
                "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                "readOnly": true
              },
              "systemData": {
                "type": "object",
                "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                "readOnly": true,
                "properties": {
                  "createdBy": {
                    "type": "string",
                    "description": "The identity that created the resource."
                  },
                  "createdByType": {
                    "type": "string",
                    "description": "The type of identity that created the resource.",
                    "enum": [
                      "User",
                      "Application",
                      "ManagedIdentity",
                      "Key"
                    ],
                    "x-ms-enum": {
                      "name": "createdByType",
                      "modelAsString": true
                    }
                  },
                  "createdAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp of resource creation (UTC)."
                  },
                  "lastModifiedBy": {
                    "type": "string",
                    "description": "The identity that last modified the resource."
                  },
                  "lastModifiedByType": {
                    "type": "string",
                    "description": "The type of identity that last modified the resource.",
                    "enum": [
                      "User",
                      "Application",
                      "ManagedIdentity",
                      "Key"
                    ],
                    "x-ms-enum": {
                      "name": "createdByType",
                      "modelAsString": true
                    }
                  },
                  "lastModifiedAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp of resource last modification (UTC)"
                  }
                }
              },
              "tags": {
                "type": "object",
                "description": "Resource tags.",
                "additionalProperties": {
                  "type": "string"
                },
                "x-ms-mutability": [
                  "read",
                  "create",
                  "update"
                ]
              },
              "location": {
                "type": "string",
                "description": "The geo-location where the resource lives",
                "x-ms-mutability": [
                  "read",
                  "create"
                ]
              },
              "properties": {
                "description": "The resource-specific properties for this resource.",
                "x-ms-client-flatten": true,
                "type": "object",
                "properties": {
                  "authenticationEnabled": {
                    "type": "boolean",
                    "description": "The flag for enabling Authentication rules on Listener Port.",
                    "default": false
                  },
                  "authorizationEnabled": {
                    "type": "boolean",
                    "description": "The flag for enabling Authorization policies on Listener Port. false - AllowAll, true - Use Authorization resource rules if present.",
                    "default": false
                  },
                  "brokerRef": {
                    "type": "string",
                    "description": "The k8s cr/resource reference of mq/broker."
                  },
                  "nodePort": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The node port to use on the Host node.",
                    "minimum": 0,
                    "maximum": 65535
                  },
                  "port": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The port to start Listening for connections on.",
                    "minimum": 0,
                    "maximum": 65535
                  },
                  "serviceName": {
                    "type": "string",
                    "description": "The service name to expose Listener port on.",
                    "default": "aio-mq-dmqtt-frontend"
                  },
                  "serviceType": {
                    "type": "string",
                    "description": "The Kubernetes Service type to deploy for Listener.",
                    "default": "clusterIp",
                    "enum": [
                      "clusterIp",
                      "loadBalancer",
                      "nodePort"
                    ],
                    "x-ms-enum": {
                      "name": "ServiceType",
                      "modelAsString": true,
                      "values": [
                        {
                          "name": "clusterIp",
                          "value": "clusterIp",
                          "description": "Cluster IP Service."
                        },
                        {
                          "name": "loadBalancer",
                          "value": "loadBalancer",
                          "description": "Load Balancer Service."
                        },
                        {
                          "name": "nodePort",
                          "value": "nodePort",
                          "description": "Node Port Service."
                        }
                      ]
                    }
                  },
                  "tls": {
                    "description": "Defines configuration of a TLS server certificate. NOTE Enum - Only one TLS Cert method is supported",
                    "type": "object",
                    "properties": {
                      "automatic": {
                        "description": "Option 1 - Automatic TLS server certificate management with cert-manager.",
                        "type": "object",
                        "properties": {
                          "duration": {
                            "type": "string",
                            "description": "Lifetime of automatically-managed certificate.",
                            "default": "720h"
                          },
                          "issuerRef": {
                            "description": "cert-manager issuerRef.",
                            "type": "object",
                            "properties": {
                              "group": {
                                "type": "string",
                                "description": "group of issuer.",
                                "default": "cert-manager.io"
                              },
                              "kind": {
                                "type": "string",
                                "description": "kind of issuer (Issuer or ClusterIssuer)."
                              },
                              "name": {
                                "type": "string",
                                "description": "name of issuer."
                              }
                            },
                            "required": [
                              "group",
                              "kind",
                              "name"
                            ]
                          },
                          "privateKey": {
                            "description": "Cert Manager private key.",
                            "type": "object",
                            "properties": {
                              "algorithm": {
                                "type": "string",
                                "description": "algorithm for private key.",
                                "default": "ECDSA"
                              },
                              "rotationPolicy": {
                                "type": "string",
                                "description": "cert-manager rotationPolicy.",
                                "default": "Always"
                              },
                              "size": {
                                "type": "integer",
                                "format": "int32",
                                "description": "size of private key.",
                                "default": 256,
                                "minimum": 0,
                                "maximum": 65535
                              }
                            },
                            "required": [
                              "algorithm",
                              "rotationPolicy",
                              "size"
                            ]
                          },
                          "renewBefore": {
                            "type": "string",
                            "description": "When to begin renewing automatically-managed certificate.",
                            "default": "240h"
                          },
                          "san": {
                            "description": "Additional SANs to include in the certificate.",
                            "type": "object",
                            "properties": {
                              "dns": {
                                "type": "array",
                                "description": "DNS SANs.",
                                "default": [],
                                "items": {
                                  "type": "string"
                                }
                              },
                              "ip": {
                                "type": "array",
                                "description": "IP address SANs.",
                                "default": [],
                                "items": {
                                  "type": "string"
                                }
                              }
                            },
                            "required": [
                              "dns",
                              "ip"
                            ]
                          },
                          "secretName": {
                            "type": "string",
                            "description": "Secret for storing server certificate. Any existing data will be overwritten."
                          },
                          "secretNamespace": {
                            "type": "string",
                            "description": "Certificate K8S namespace. Omit to use default namespace."
                          }
                        },
                        "required": [
                          "issuerRef"
                        ]
                      },
                      "manual": {
                        "description": "Option 2 - Manual TLS server certificate management through a defined secret.",
                        "type": "object",
                        "properties": {
                          "secretName": {
                            "type": "string",
                            "description": "secret containing TLS cert."
                          },
                          "secretNamespace": {
                            "type": "string",
                            "description": "namespace of secret; omit to use default namespace."
                          }
                        },
                        "required": [
                          "secretName"
                        ]
                      },
                      "keyVault": {
                        "description": "Option 3 - TLS server certificate retrieved from Key Vault..",
                        "type": "object",
                        "properties": {
                          "vault": {
                            "description": "KeyVault properties.",
                            "type": "object",
                            "properties": {
                              "credentials": {
                                "description": "KeyVault credentials.",
                                "type": "object",
                                "properties": {
                                  "servicePrincipalLocalSecretName": {
                                    "type": "string",
                                    "description": "KeyVault service principal local secret name."
                                  }
                                },
                                "required": [
                                  "servicePrincipalLocalSecretName"
                                ]
                              },
                              "directoryId": {
                                "type": "string",
                                "description": "KeyVault directoryId."
                              },
                              "name": {
                                "type": "string",
                                "description": "KeyVault name."
                              }
                            },
                            "required": [
                              "credentials",
                              "directoryId",
                              "name"
                            ]
                          },
                          "vaultCaChainSecret": {
                            "description": "KeyVault CA chain secret details.",
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string",
                                "description": "KeyVault secret name."
                              },
                              "version": {
                                "type": "string",
                                "description": "KeyVault secret version."
                              }
                            },
                            "required": [
                              "name"
                            ]
                          },
                          "vaultCert": {
                            "description": "KeyVault Cert secret details.",
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string",
                                "description": "KeyVault secret name."
                              },
                              "version": {
                                "type": "string",
                                "description": "KeyVault secret version."
                              }
                            },
                            "required": [
                              "name"
                            ]
                          }
                        },
                        "required": [
                          "vault",
                          "vaultCert"
                        ]
                      }
                    }
                  },
                  "provisioningState": {
                    "description": "The status of the last operation.",
                    "readOnly": true,
                    "type": "string",
                    "enum": [
                      "Succeeded",
                      "Failed",
                      "Canceled",
                      "Provisioning",
                      "Updating",
                      "Deleting",
                      "Accepted"
                    ],
                    "x-ms-enum": {
                      "name": "ProvisioningState",
                      "modelAsString": true,
                      "values": [
                        {
                          "name": "Succeeded",
                          "value": "Succeeded",
                          "description": "Resource has been created."
                        },
                        {
                          "name": "Failed",
                          "value": "Failed",
                          "description": "Resource creation failed."
                        },
                        {
                          "name": "Canceled",
                          "value": "Canceled",
                          "description": "Resource creation was canceled."
                        },
                        {
                          "name": "Provisioning",
                          "value": "Provisioning",
                          "description": "Resource is getting provisioned."
                        },
                        {
                          "name": "Updating",
                          "value": "Updating",
                          "description": "Resource is Updating."
                        },
                        {
                          "name": "Deleting",
                          "value": "Deleting",
                          "description": "Resource is Deleting."
                        },
                        {
                          "name": "Accepted",
                          "value": "Accepted",
                          "description": "Resource has been Accepted."
                        }
                      ]
                    }
                  }
                },
                "required": [
                  "brokerRef",
                  "port"
                ]
              },
              "extendedLocation": {
                "description": "Extended Location",
                "x-ms-mutability": [
                  "read",
                  "create"
                ],
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the extended location."
                  },
                  "type": {
                    "description": "Type of ExtendedLocation.",
                    "type": "string",
                    "enum": [
                      "CustomLocation"
                    ],
                    "x-ms-enum": {
                      "name": "ExtendedLocationType",
                      "modelAsString": true,
                      "values": [
                        {
                          "name": "CustomLocation",
                          "value": "CustomLocation",
                          "description": "CustomLocation type"
                        }
                      ]
                    }
                  }
                },
                "required": [
                  "name",
                  "type"
                ]
              }
            },
            "required": [
              "extendedLocation"
            ]
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "BrokerListenerResourceUpdate": {
      "type": "object",
      "description": "The type used for update operations of the BrokerListenerResource.",
      "properties": {
        "tags": {
          "type": "object",
          "description": "Resource tags.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "properties": {
          "description": "The resource-specific properties for this resource.",
          "x-ms-client-flatten": true,
          "type": "object",
          "properties": {
            "authenticationEnabled": {
              "type": "boolean",
              "description": "The flag for enabling Authentication rules on Listener Port.",
              "default": false
            },
            "authorizationEnabled": {
              "type": "boolean",
              "description": "The flag for enabling Authorization policies on Listener Port. false - AllowAll, true - Use Authorization resource rules if present.",
              "default": false
            },
            "brokerRef": {
              "type": "string",
              "description": "The k8s cr/resource reference of mq/broker."
            },
            "nodePort": {
              "type": "integer",
              "format": "int32",
              "description": "The node port to use on the Host node.",
              "minimum": 0,
              "maximum": 65535
            },
            "port": {
              "type": "integer",
              "format": "int32",
              "description": "The port to start Listening for connections on.",
              "minimum": 0,
              "maximum": 65535
            },
            "serviceName": {
              "type": "string",
              "description": "The service name to expose Listener port on.",
              "default": "aio-mq-dmqtt-frontend"
            },
            "serviceType": {
              "type": "string",
              "description": "The Kubernetes Service type to deploy for Listener.",
              "default": "clusterIp",
              "enum": [
                "clusterIp",
                "loadBalancer",
                "nodePort"
              ],
              "x-ms-enum": {
                "name": "ServiceType",
                "modelAsString": true,
                "values": [
                  {
                    "name": "clusterIp",
                    "value": "clusterIp",
                    "description": "Cluster IP Service."
                  },
                  {
                    "name": "loadBalancer",
                    "value": "loadBalancer",
                    "description": "Load Balancer Service."
                  },
                  {
                    "name": "nodePort",
                    "value": "nodePort",
                    "description": "Node Port Service."
                  }
                ]
              }
            },
            "tls": {
              "description": "Defines configuration of a TLS server certificate. NOTE Enum - Only one TLS Cert method is supported",
              "type": "object",
              "properties": {
                "automatic": {
                  "description": "Option 1 - Automatic TLS server certificate management with cert-manager.",
                  "type": "object",
                  "properties": {
                    "duration": {
                      "type": "string",
                      "description": "Lifetime of automatically-managed certificate.",
                      "default": "720h"
                    },
                    "issuerRef": {
                      "description": "cert-manager issuerRef.",
                      "type": "object",
                      "properties": {
                        "group": {
                          "type": "string",
                          "description": "group of issuer.",
                          "default": "cert-manager.io"
                        },
                        "kind": {
                          "type": "string",
                          "description": "kind of issuer (Issuer or ClusterIssuer)."
                        },
                        "name": {
                          "type": "string",
                          "description": "name of issuer."
                        }
                      }
                    },
                    "privateKey": {
                      "description": "Cert Manager private key.",
                      "type": "object",
                      "properties": {
                        "algorithm": {
                          "type": "string",
                          "description": "algorithm for private key.",
                          "default": "ECDSA"
                        },
                        "rotationPolicy": {
                          "type": "string",
                          "description": "cert-manager rotationPolicy.",
                          "default": "Always"
                        },
                        "size": {
                          "type": "integer",
                          "format": "int32",
                          "description": "size of private key.",
                          "default": 256,
                          "minimum": 0,
                          "maximum": 65535
                        }
                      }
                    },
                    "renewBefore": {
                      "type": "string",
                      "description": "When to begin renewing automatically-managed certificate.",
                      "default": "240h"
                    },
                    "san": {
                      "description": "Additional SANs to include in the certificate.",
                      "type": "object",
                      "properties": {
                        "dns": {
                          "type": "array",
                          "description": "DNS SANs.",
                          "default": [],
                          "items": {
                            "type": "string"
                          }
                        },
                        "ip": {
                          "type": "array",
                          "description": "IP address SANs.",
                          "default": [],
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "secretName": {
                      "type": "string",
                      "description": "Secret for storing server certificate. Any existing data will be overwritten."
                    },
                    "secretNamespace": {
                      "type": "string",
                      "description": "Certificate K8S namespace. Omit to use default namespace."
                    }
                  }
                },
                "manual": {
                  "description": "Option 2 - Manual TLS server certificate management through a defined secret.",
                  "type": "object",
                  "properties": {
                    "secretName": {
                      "type": "string",
                      "description": "secret containing TLS cert."
                    },
                    "secretNamespace": {
                      "type": "string",
                      "description": "namespace of secret; omit to use default namespace."
                    }
                  }
                },
                "keyVault": {
                  "description": "Option 3 - TLS server certificate retrieved from Key Vault..",
                  "type": "object",
                  "properties": {
                    "vault": {
                      "description": "KeyVault properties.",
                      "type": "object",
                      "properties": {
                        "credentials": {
                          "description": "KeyVault credentials.",
                          "type": "object",
                          "properties": {
                            "servicePrincipalLocalSecretName": {
                              "type": "string",
                              "description": "KeyVault service principal local secret name."
                            }
                          }
                        },
                        "directoryId": {
                          "type": "string",
                          "description": "KeyVault directoryId."
                        },
                        "name": {
                          "type": "string",
                          "description": "KeyVault name."
                        }
                      }
                    },
                    "vaultCaChainSecret": {
                      "description": "KeyVault CA chain secret details.",
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "KeyVault secret name."
                        },
                        "version": {
                          "type": "string",
                          "description": "KeyVault secret version."
                        }
                      }
                    },
                    "vaultCert": {
                      "description": "KeyVault Cert secret details.",
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "KeyVault secret name."
                        },
                        "version": {
                          "type": "string",
                          "description": "KeyVault secret version."
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "BrokerListenerResourceUpdateProperties": {
      "type": "object",
      "description": "The updatable properties of the BrokerListenerResource.",
      "properties": {
        "authenticationEnabled": {
          "type": "boolean",
          "description": "The flag for enabling Authentication rules on Listener Port.",
          "default": false
        },
        "authorizationEnabled": {
          "type": "boolean",
          "description": "The flag for enabling Authorization policies on Listener Port. false - AllowAll, true - Use Authorization resource rules if present.",
          "default": false
        },
        "brokerRef": {
          "type": "string",
          "description": "The k8s cr/resource reference of mq/broker."
        },
        "nodePort": {
          "type": "integer",
          "format": "int32",
          "description": "The node port to use on the Host node.",
          "minimum": 0,
          "maximum": 65535
        },
        "port": {
          "type": "integer",
          "format": "int32",
          "description": "The port to start Listening for connections on.",
          "minimum": 0,
          "maximum": 65535
        },
        "serviceName": {
          "type": "string",
          "description": "The service name to expose Listener port on.",
          "default": "aio-mq-dmqtt-frontend"
        },
        "serviceType": {
          "type": "string",
          "description": "The Kubernetes Service type to deploy for Listener.",
          "default": "clusterIp",
          "enum": [
            "clusterIp",
            "loadBalancer",
            "nodePort"
          ],
          "x-ms-enum": {
            "name": "ServiceType",
            "modelAsString": true,
            "values": [
              {
                "name": "clusterIp",
                "value": "clusterIp",
                "description": "Cluster IP Service."
              },
              {
                "name": "loadBalancer",
                "value": "loadBalancer",
                "description": "Load Balancer Service."
              },
              {
                "name": "nodePort",
                "value": "nodePort",
                "description": "Node Port Service."
              }
            ]
          }
        },
        "tls": {
          "description": "Defines configuration of a TLS server certificate. NOTE Enum - Only one TLS Cert method is supported",
          "type": "object",
          "properties": {
            "automatic": {
              "description": "Option 1 - Automatic TLS server certificate management with cert-manager.",
              "type": "object",
              "properties": {
                "duration": {
                  "type": "string",
                  "description": "Lifetime of automatically-managed certificate.",
                  "default": "720h"
                },
                "issuerRef": {
                  "description": "cert-manager issuerRef.",
                  "type": "object",
                  "properties": {
                    "group": {
                      "type": "string",
                      "description": "group of issuer.",
                      "default": "cert-manager.io"
                    },
                    "kind": {
                      "type": "string",
                      "description": "kind of issuer (Issuer or ClusterIssuer)."
                    },
                    "name": {
                      "type": "string",
                      "description": "name of issuer."
                    }
                  }
                },
                "privateKey": {
                  "description": "Cert Manager private key.",
                  "type": "object",
                  "properties": {
                    "algorithm": {
                      "type": "string",
                      "description": "algorithm for private key.",
                      "default": "ECDSA"
                    },
                    "rotationPolicy": {
                      "type": "string",
                      "description": "cert-manager rotationPolicy.",
                      "default": "Always"
                    },
                    "size": {
                      "type": "integer",
                      "format": "int32",
                      "description": "size of private key.",
                      "default": 256,
                      "minimum": 0,
                      "maximum": 65535
                    }
                  }
                },
                "renewBefore": {
                  "type": "string",
                  "description": "When to begin renewing automatically-managed certificate.",
                  "default": "240h"
                },
                "san": {
                  "description": "Additional SANs to include in the certificate.",
                  "type": "object",
                  "properties": {
                    "dns": {
                      "type": "array",
                      "description": "DNS SANs.",
                      "default": [],
                      "items": {
                        "type": "string"
                      }
                    },
                    "ip": {
                      "type": "array",
                      "description": "IP address SANs.",
                      "default": [],
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                },
                "secretName": {
                  "type": "string",
                  "description": "Secret for storing server certificate. Any existing data will be overwritten."
                },
                "secretNamespace": {
                  "type": "string",
                  "description": "Certificate K8S namespace. Omit to use default namespace."
                }
              }
            },
            "manual": {
              "description": "Option 2 - Manual TLS server certificate management through a defined secret.",
              "type": "object",
              "properties": {
                "secretName": {
                  "type": "string",
                  "description": "secret containing TLS cert."
                },
                "secretNamespace": {
                  "type": "string",
                  "description": "namespace of secret; omit to use default namespace."
                }
              }
            },
            "keyVault": {
              "description": "Option 3 - TLS server certificate retrieved from Key Vault..",
              "type": "object",
              "properties": {
                "vault": {
                  "description": "KeyVault properties.",
                  "type": "object",
                  "properties": {
                    "credentials": {
                      "description": "KeyVault credentials.",
                      "type": "object",
                      "properties": {
                        "servicePrincipalLocalSecretName": {
                          "type": "string",
                          "description": "KeyVault service principal local secret name."
                        }
                      }
                    },
                    "directoryId": {
                      "type": "string",
                      "description": "KeyVault directoryId."
                    },
                    "name": {
                      "type": "string",
                      "description": "KeyVault name."
                    }
                  }
                },
                "vaultCaChainSecret": {
                  "description": "KeyVault CA chain secret details.",
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "KeyVault secret name."
                    },
                    "version": {
                      "type": "string",
                      "description": "KeyVault secret version."
                    }
                  }
                },
                "vaultCert": {
                  "description": "KeyVault Cert secret details.",
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "KeyVault secret name."
                    },
                    "version": {
                      "type": "string",
                      "description": "KeyVault secret version."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "BrokerMemoryProfile": {
      "type": "string",
      "description": "The memory profile settings of the Broker",
      "enum": [
        "tiny",
        "low",
        "medium",
        "high"
      ],
      "x-ms-enum": {
        "name": "BrokerMemoryProfile",
        "modelAsString": true,
        "values": [
          {
            "name": "tiny",
            "value": "tiny",
            "description": "Tiny memory profile."
          },
          {
            "name": "low",
            "value": "low",
            "description": "Low memory profile."
          },
          {
            "name": "medium",
            "value": "medium",
            "description": "Medium memory profile."
          },
          {
            "name": "high",
            "value": "high",
            "description": "High memory profile."
          }
        ]
      }
    },
    "BrokerProperties": {
      "type": "object",
      "description": "Broker Resource properties",
      "properties": {
        "authImage": {
          "description": "The details of Authentication Docker Image.",
          "type": "object",
          "properties": {
            "pullPolicy": {
              "type": "string",
              "description": "Image pull policy."
            },
            "pullSecrets": {
              "type": "string",
              "description": "Image pull secrets."
            },
            "repository": {
              "type": "string",
              "description": "The Docker image name."
            },
            "tag": {
              "type": "string",
              "description": "The Docker  image tag."
            }
          },
          "required": [
            "repository",
            "tag"
          ]
        },
        "brokerImage": {
          "description": "The details of Broker Docker Image.",
          "type": "object",
          "properties": {
            "pullPolicy": {
              "type": "string",
              "description": "Image pull policy."
            },
            "pullSecrets": {
              "type": "string",
              "description": "Image pull secrets."
            },
            "repository": {
              "type": "string",
              "description": "The Docker image name."
            },
            "tag": {
              "type": "string",
              "description": "The Docker  image tag."
            }
          },
          "required": [
            "repository",
            "tag"
          ]
        },
        "brokerNodeTolerations": {
          "description": "The details of Node Tolerations for Broker Pods.",
          "type": "object",
          "properties": {
            "effect": {
              "type": "string",
              "description": "Toleration effect."
            },
            "key": {
              "type": "string",
              "description": "Toleration key."
            },
            "operator": {
              "type": "string",
              "description": "Toleration operator like 'Exists', 'Equal' etc."
            },
            "value": {
              "type": "string",
              "description": "Toleration Value."
            }
          },
          "required": [
            "effect",
            "key",
            "operator",
            "value"
          ]
        },
        "cardinality": {
          "description": "The cardinality details of the broker.",
          "type": "object",
          "properties": {
            "backendChain": {
              "description": "The backend broker desired properties",
              "type": "object",
              "properties": {
                "partitions": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Partitions is desired number of physical backend chains of the given distributed MQTT broker.",
                  "minimum": 0,
                  "maximum": 65535
                },
                "redundancyFactor": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Redundancy Factor is desired numbers of broker instances in one chain.",
                  "minimum": 0,
                  "maximum": 65535
                },
                "temporaryDiskTransferEnabled": {
                  "type": "boolean",
                  "description": "Defines whether disk transfer is enabled or not."
                },
                "temporaryDiskTransferHighWatermarkPercent": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Defines the percentage usage of buffer pool above which disk transfer will start.",
                  "minimum": 0,
                  "maximum": 100
                },
                "temporaryDiskTransferLowWatermarkPercent": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Defines the percentage usage of buffer pool below which disk transfer will stop.",
                  "minimum": 0,
                  "maximum": 100
                },
                "temporaryMaxBackendMemUsagePercent": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Defines the limits for memory usage percent of the backend instances of the MQTT broker.",
                  "minimum": 0,
                  "maximum": 100
                },
                "temporaryResourceLimits": {
                  "description": "Defines the limits for resources of the backend instances of the MQTT broker.",
                  "type": "object",
                  "properties": {
                    "maxInflightMessages": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Maximum number of messages a client can have inflight.",
                      "minimum": 0,
                      "maximum": 65535
                    },
                    "maxInflightPatches": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Maximum number of patch inflight per node.",
                      "minimum": 0,
                      "maximum": 65535
                    },
                    "maxInflightPatchesPerClient": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Maximum number of patch a client can have in flight.",
                      "minimum": 0,
                      "maximum": 65535
                    },
                    "maxMessageExpirySecs": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Maximum message expiry interval, in seconds.",
                      "minimum": 0,
                      "maximum": 4294967295
                    },
                    "maxQueuedMessages": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Maximum receive for external clients.",
                      "minimum": 0,
                      "maximum": 9223372036854000000
                    },
                    "maxQueuedQos0Messages": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Maximum receive QoS0 for external clients.",
                      "minimum": 0,
                      "maximum": 9223372036854000000
                    },
                    "maxSessionExpirySecs": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Maximum session expiry interval, in seconds.",
                      "minimum": 0,
                      "maximum": 4294967295
                    }
                  },
                  "required": [
                    "maxInflightMessages",
                    "maxInflightPatches",
                    "maxInflightPatchesPerClient",
                    "maxQueuedMessages",
                    "maxQueuedQos0Messages",
                    "maxSessionExpirySecs"
                  ]
                },
                "workers": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Number of logical backend workers per pod.",
                  "default": 1,
                  "minimum": 0,
                  "maximum": 65535
                }
              },
              "required": [
                "partitions",
                "redundancyFactor"
              ]
            },
            "frontend": {
              "description": "The frontend broker desired properties",
              "type": "object",
              "properties": {
                "replicas": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Replicas is desired number of frontend replicas of the given distributed MQTT broker.",
                  "minimum": 0,
                  "maximum": 65535
                },
                "temporaryResourceLimits": {
                  "description": "Defines the limits for resources of the frontend instances of the MQTT broker.",
                  "type": "object",
                  "properties": {
                    "maxInflightMessages": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Maximum number of messages a client can have inflight.",
                      "minimum": 0,
                      "maximum": 65535
                    },
                    "maxInflightPatches": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Maximum number of patch inflight per node.",
                      "minimum": 0,
                      "maximum": 65535
                    },
                    "maxInflightPatchesPerClient": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Maximum number of patch a client can have in flight.",
                      "minimum": 0,
                      "maximum": 65535
                    },
                    "maxMessageExpirySecs": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Maximum message expiry interval, in seconds.",
                      "minimum": 0,
                      "maximum": 4294967295
                    },
                    "maxQueuedMessages": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Maximum receive for external clients.",
                      "minimum": 0,
                      "maximum": 9223372036854000000
                    },
                    "maxQueuedQos0Messages": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Maximum receive QoS0 for external clients.",
                      "minimum": 0,
                      "maximum": 9223372036854000000
                    },
                    "maxSessionExpirySecs": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Maximum session expiry interval, in seconds.",
                      "minimum": 0,
                      "maximum": 4294967295
                    }
                  },
                  "required": [
                    "maxInflightMessages",
                    "maxInflightPatches",
                    "maxInflightPatchesPerClient",
                    "maxQueuedMessages",
                    "maxQueuedQos0Messages",
                    "maxSessionExpirySecs"
                  ]
                },
                "workers": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Number of logical frontend workers per pod.",
                  "default": 2,
                  "minimum": 0,
                  "maximum": 65535
                }
              },
              "required": [
                "replicas"
              ]
            }
          },
          "required": [
            "backendChain",
            "frontend"
          ]
        },
        "diagnostics": {
          "description": "The diagnostic details of the broker deployment.",
          "type": "object",
          "properties": {
            "diagnosticServiceEndpoint": {
              "type": "string",
              "description": "Diagnostic Service endpoint"
            },
            "enableMetrics": {
              "type": "boolean",
              "description": "Knob to enable/disable metrics. Default = true",
              "default": true
            },
            "enableSelfCheck": {
              "type": "boolean",
              "description": "Enable self check on Broker via Probe.",
              "default": true
            },
            "enableSelfTracing": {
              "type": "boolean",
              "description": "Enable self tracing on the Broker so that every selfCheckFrequencySeconds a random message is traced even if it didn't have trace context.",
              "default": true
            },
            "enableTracing": {
              "type": "boolean",
              "description": "Knob to enable/disable entire tracing infrastructure.",
              "default": true
            },
            "logFormat": {
              "type": "string",
              "description": "Format for the logs generated.",
              "default": "text"
            },
            "logLevel": {
              "type": "string",
              "description": "Log level for the Broker.",
              "default": "info,hyper=off,kube_client=off,tower=off,conhash=off,h2=off"
            },
            "maxCellMapLifetime": {
              "type": "integer",
              "format": "int64",
              "description": "Maximum time for the CellMap to live.",
              "default": 60,
              "minimum": 0,
              "maximum": 9223372036854000000
            },
            "metricUpdateFrequencySeconds": {
              "type": "integer",
              "format": "int64",
              "description": "Metric update frequency in seconds.",
              "default": 30,
              "minimum": 0,
              "maximum": 9223372036854000000
            },
            "probeImage": {
              "type": "string",
              "description": "Probe Image to run.",
              "default": "sample.azurecr.io/diagnostics-probe:0.5.0"
            },
            "selfCheckFrequencySeconds": {
              "type": "integer",
              "format": "int64",
              "description": "Frequency for the self check to run.",
              "default": 30,
              "minimum": 0,
              "maximum": 9223372036854000000
            },
            "selfCheckTimeoutSeconds": {
              "type": "integer",
              "format": "int64",
              "description": "Time out period of the self check.",
              "default": 15,
              "minimum": 0,
              "maximum": 9223372036854000000
            },
            "selfTraceFrequencySeconds": {
              "type": "integer",
              "format": "int64",
              "description": "The frequency at which selfTrace should run.",
              "default": 30,
              "minimum": 0,
              "maximum": 9223372036854000000
            },
            "spanChannelCapacity": {
              "type": "integer",
              "format": "int64",
              "description": "The number of the spans generated by the Tracing.",
              "default": 1000,
              "minimum": 0,
              "maximum": 9223372036854000000
            }
          }
        },
        "diskBackedMessageBufferSettings": {
          "description": "The settings of the disk-backed message buffer.",
          "type": "object",
          "properties": {
            "ephemeralVolumeClaimSpec": {
              "description": "Use the specified persistent volume claim template to mount a \"generic ephemeral volume\" for the message buffer. See <https://kubernetes.io/docs/concepts/storage/ephemeral-volumes/#generic-ephemeral-volumes> for details.",
              "type": "object",
              "properties": {
                "accessModes": {
                  "type": "array",
                  "description": "AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
                  "items": {
                    "type": "string"
                  }
                },
                "dataSource": {
                  "description": "This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.",
                  "type": "object",
                  "properties": {
                    "apiGroup": {
                      "type": "string",
                      "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required."
                    },
                    "kind": {
                      "type": "string",
                      "description": "Kind is the type of resource being referenced"
                    },
                    "name": {
                      "type": "string",
                      "description": "Name is the name of resource being referenced"
                    }
                  },
                  "required": [
                    "kind",
                    "name"
                  ]
                },
                "dataSourceRef": {
                  "description": "Specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef: * While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified. (Alpha) Using this field requires the AnyVolumeDataSource feature gate to be enabled.",
                  "type": "object",
                  "properties": {
                    "apiGroup": {
                      "type": "string",
                      "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required."
                    },
                    "kind": {
                      "type": "string",
                      "description": "Kind is the type of resource being referenced"
                    },
                    "name": {
                      "type": "string",
                      "description": "Name is the name of resource being referenced"
                    }
                  },
                  "required": [
                    "kind",
                    "name"
                  ]
                },
                "resources": {
                  "description": "Resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources",
                  "type": "object",
                  "properties": {
                    "limits": {
                      "type": "object",
                      "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "requests": {
                      "type": "object",
                      "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                      "additionalProperties": {
                        "type": "string"
                      }
                    }
                  }
                },
                "selector": {
                  "description": "A label query over volumes to consider for binding.",
                  "type": "object",
                  "properties": {
                    "matchExpressions": {
                      "type": "array",
                      "description": "MatchExpressions is a list of label selector requirements. The requirements are ANDed.",
                      "items": {
                        "type": "object",
                        "description": "VolumeClaimSpecSelectorMatchExpressions properties",
                        "properties": {
                          "key": {
                            "type": "string",
                            "description": "key is the label key that the selector applies to."
                          },
                          "operator": {
                            "type": "string",
                            "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist."
                          },
                          "values": {
                            "type": "array",
                            "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                            "items": {
                              "type": "string"
                            }
                          }
                        },
                        "required": [
                          "key",
                          "operator"
                        ]
                      },
                      "x-ms-identifiers": []
                    },
                    "matchLabels": {
                      "type": "object",
                      "description": "MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                      "additionalProperties": {
                        "type": "string"
                      }
                    }
                  }
                },
                "storageClassName": {
                  "type": "string",
                  "description": "Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1"
                },
                "volumeMode": {
                  "type": "string",
                  "description": "volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec. This is a beta feature."
                },
                "volumeName": {
                  "type": "string",
                  "description": "VolumeName is the binding reference to the PersistentVolume backing this claim."
                }
              }
            },
            "maxSize": {
              "type": "string",
              "description": "The max size of the message buffer on disk. If a PVC template is specified using one of ephemeralVolumeClaimSpec or persistentVolumeClaimSpec, then this size is used as the request and limit sizes of that template. If neither ephemeralVolumeClaimSpec nor persistentVolumeClaimSpec are specified, then an emptyDir volume is mounted with this size as its limit. See <https://kubernetes.io/docs/concepts/storage/volumes/#emptydir> for details."
            },
            "persistentVolumeClaimSpec": {
              "description": "Use the specified persistent volume claim template to mount a persistent volume for the message buffer.",
              "type": "object",
              "properties": {
                "accessModes": {
                  "type": "array",
                  "description": "AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
                  "items": {
                    "type": "string"
                  }
                },
                "dataSource": {
                  "description": "This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.",
                  "type": "object",
                  "properties": {
                    "apiGroup": {
                      "type": "string",
                      "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required."
                    },
                    "kind": {
                      "type": "string",
                      "description": "Kind is the type of resource being referenced"
                    },
                    "name": {
                      "type": "string",
                      "description": "Name is the name of resource being referenced"
                    }
                  },
                  "required": [
                    "kind",
                    "name"
                  ]
                },
                "dataSourceRef": {
                  "description": "Specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef: * While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified. (Alpha) Using this field requires the AnyVolumeDataSource feature gate to be enabled.",
                  "type": "object",
                  "properties": {
                    "apiGroup": {
                      "type": "string",
                      "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required."
                    },
                    "kind": {
                      "type": "string",
                      "description": "Kind is the type of resource being referenced"
                    },
                    "name": {
                      "type": "string",
                      "description": "Name is the name of resource being referenced"
                    }
                  },
                  "required": [
                    "kind",
                    "name"
                  ]
                },
                "resources": {
                  "description": "Resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources",
                  "type": "object",
                  "properties": {
                    "limits": {
                      "type": "object",
                      "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "requests": {
                      "type": "object",
                      "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                      "additionalProperties": {
                        "type": "string"
                      }
                    }
                  }
                },
                "selector": {
                  "description": "A label query over volumes to consider for binding.",
                  "type": "object",
                  "properties": {
                    "matchExpressions": {
                      "type": "array",
                      "description": "MatchExpressions is a list of label selector requirements. The requirements are ANDed.",
                      "items": {
                        "type": "object",
                        "description": "VolumeClaimSpecSelectorMatchExpressions properties",
                        "properties": {
                          "key": {
                            "type": "string",
                            "description": "key is the label key that the selector applies to."
                          },
                          "operator": {
                            "type": "string",
                            "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist."
                          },
                          "values": {
                            "type": "array",
                            "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                            "items": {
                              "type": "string"
                            }
                          }
                        },
                        "required": [
                          "key",
                          "operator"
                        ]
                      },
                      "x-ms-identifiers": []
                    },
                    "matchLabels": {
                      "type": "object",
                      "description": "MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                      "additionalProperties": {
                        "type": "string"
                      }
                    }
                  }
                },
                "storageClassName": {
                  "type": "string",
                  "description": "Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1"
                },
                "volumeMode": {
                  "type": "string",
                  "description": "volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec. This is a beta feature."
                },
                "volumeName": {
                  "type": "string",
                  "description": "VolumeName is the binding reference to the PersistentVolume backing this claim."
                }
              }
            }
          },
          "required": [
            "maxSize"
          ]
        },
        "encryptInternalTraffic": {
          "type": "boolean",
          "description": "The setting to enable or disable encryption of internal Traffic.",
          "default": true
        },
        "healthManagerImage": {
          "description": "The details of Health Manager Docker Image.",
          "type": "object",
          "properties": {
            "pullPolicy": {
              "type": "string",
              "description": "Image pull policy."
            },
            "pullSecrets": {
              "type": "string",
              "description": "Image pull secrets."
            },
            "repository": {
              "type": "string",
              "description": "The Docker image name."
            },
            "tag": {
              "type": "string",
              "description": "The Docker  image tag."
            }
          },
          "required": [
            "repository",
            "tag"
          ]
        },
        "healthManagerNodeTolerations": {
          "description": "The details of Node Tolerations for Health Manager Pods.",
          "type": "object",
          "properties": {
            "effect": {
              "type": "string",
              "description": "Toleration effect."
            },
            "key": {
              "type": "string",
              "description": "Toleration key."
            },
            "operator": {
              "type": "string",
              "description": "Toleration operator like 'Exists', 'Equal' etc."
            },
            "value": {
              "type": "string",
              "description": "Toleration Value."
            }
          },
          "required": [
            "effect",
            "key",
            "operator",
            "value"
          ]
        },
        "internalCerts": {
          "description": "Details of the internal CA cert that will be used to secure communication between pods.",
          "type": "object",
          "properties": {
            "duration": {
              "type": "string",
              "description": "Duration of CA cert.",
              "default": "720h"
            },
            "privateKey": {
              "description": "Cert Manager private key.",
              "type": "object",
              "properties": {
                "algorithm": {
                  "type": "string",
                  "description": "algorithm for private key.",
                  "default": "ECDSA"
                },
                "rotationPolicy": {
                  "type": "string",
                  "description": "cert-manager rotationPolicy.",
                  "default": "Always"
                },
                "size": {
                  "type": "integer",
                  "format": "int32",
                  "description": "size of private key.",
                  "default": 256,
                  "minimum": 0,
                  "maximum": 65535
                }
              },
              "required": [
                "algorithm",
                "rotationPolicy",
                "size"
              ]
            },
            "renewBefore": {
              "type": "string",
              "description": "Renew before time of CA cert.",
              "default": "240h"
            }
          },
          "required": [
            "duration",
            "privateKey",
            "renewBefore"
          ]
        },
        "memoryProfile": {
          "type": "string",
          "description": "Memory profile of broker.",
          "default": "medium",
          "enum": [
            "tiny",
            "low",
            "medium",
            "high"
          ],
          "x-ms-enum": {
            "name": "BrokerMemoryProfile",
            "modelAsString": true,
            "values": [
              {
                "name": "tiny",
                "value": "tiny",
                "description": "Tiny memory profile."
              },
              {
                "name": "low",
                "value": "low",
                "description": "Low memory profile."
              },
              {
                "name": "medium",
                "value": "medium",
                "description": "Medium memory profile."
              },
              {
                "name": "high",
                "value": "high",
                "description": "High memory profile."
              }
            ]
          }
        },
        "mode": {
          "description": "The Running Mode of the Broker Deployment.",
          "type": "string",
          "enum": [
            "auto",
            "distributed"
          ],
          "x-ms-enum": {
            "name": "RunMode",
            "modelAsString": true,
            "values": [
              {
                "name": "auto",
                "value": "auto",
                "description": "Automatically provision Frontend and Backend pods."
              },
              {
                "name": "distributed",
                "value": "distributed",
                "description": "Use Cardinality to set Frontend and Backend pods."
              }
            ]
          }
        },
        "provisioningState": {
          "description": "The status of the last operation.",
          "readOnly": true,
          "type": "string",
          "enum": [
            "Succeeded",
            "Failed",
            "Canceled",
            "Provisioning",
            "Updating",
            "Deleting",
            "Accepted"
          ],
          "x-ms-enum": {
            "name": "ProvisioningState",
            "modelAsString": true,
            "values": [
              {
                "name": "Succeeded",
                "value": "Succeeded",
                "description": "Resource has been created."
              },
              {
                "name": "Failed",
                "value": "Failed",
                "description": "Resource creation failed."
              },
              {
                "name": "Canceled",
                "value": "Canceled",
                "description": "Resource creation was canceled."
              },
              {
                "name": "Provisioning",
                "value": "Provisioning",
                "description": "Resource is getting provisioned."
              },
              {
                "name": "Updating",
                "value": "Updating",
                "description": "Resource is Updating."
              },
              {
                "name": "Deleting",
                "value": "Deleting",
                "description": "Resource is Deleting."
              },
              {
                "name": "Accepted",
                "value": "Accepted",
                "description": "Resource has been Accepted."
              }
            ]
          }
        }
      },
      "required": [
        "authImage",
        "brokerImage",
        "healthManagerImage",
        "mode"
      ]
    },
    "BrokerResource": {
      "type": "object",
      "description": "MQ broker resource",
      "properties": {
        "id": {
          "type": "string",
          "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "The name of the resource",
          "readOnly": true
        },
        "type": {
          "type": "string",
          "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
          "readOnly": true
        },
        "systemData": {
          "type": "object",
          "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
          "readOnly": true,
          "properties": {
            "createdBy": {
              "type": "string",
              "description": "The identity that created the resource."
            },
            "createdByType": {
              "type": "string",
              "description": "The type of identity that created the resource.",
              "enum": [
                "User",
                "Application",
                "ManagedIdentity",
                "Key"
              ],
              "x-ms-enum": {
                "name": "createdByType",
                "modelAsString": true
              }
            },
            "createdAt": {
              "type": "string",
              "format": "date-time",
              "description": "The timestamp of resource creation (UTC)."
            },
            "lastModifiedBy": {
              "type": "string",
              "description": "The identity that last modified the resource."
            },
            "lastModifiedByType": {
              "type": "string",
              "description": "The type of identity that last modified the resource.",
              "enum": [
                "User",
                "Application",
                "ManagedIdentity",
                "Key"
              ],
              "x-ms-enum": {
                "name": "createdByType",
                "modelAsString": true
              }
            },
            "lastModifiedAt": {
              "type": "string",
              "format": "date-time",
              "description": "The timestamp of resource last modification (UTC)"
            }
          }
        },
        "tags": {
          "type": "object",
          "description": "Resource tags.",
          "additionalProperties": {
            "type": "string"
          },
          "x-ms-mutability": [
            "read",
            "create",
            "update"
          ]
        },
        "location": {
          "type": "string",
          "description": "The geo-location where the resource lives",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "properties": {
          "description": "The resource-specific properties for this resource.",
          "x-ms-client-flatten": true,
          "type": "object",
          "properties": {
            "authImage": {
              "description": "The details of Authentication Docker Image.",
              "type": "object",
              "properties": {
                "pullPolicy": {
                  "type": "string",
                  "description": "Image pull policy."
                },
                "pullSecrets": {
                  "type": "string",
                  "description": "Image pull secrets."
                },
                "repository": {
                  "type": "string",
                  "description": "The Docker image name."
                },
                "tag": {
                  "type": "string",
                  "description": "The Docker  image tag."
                }
              },
              "required": [
                "repository",
                "tag"
              ]
            },
            "brokerImage": {
              "description": "The details of Broker Docker Image.",
              "type": "object",
              "properties": {
                "pullPolicy": {
                  "type": "string",
                  "description": "Image pull policy."
                },
                "pullSecrets": {
                  "type": "string",
                  "description": "Image pull secrets."
                },
                "repository": {
                  "type": "string",
                  "description": "The Docker image name."
                },
                "tag": {
                  "type": "string",
                  "description": "The Docker  image tag."
                }
              },
              "required": [
                "repository",
                "tag"
              ]
            },
            "brokerNodeTolerations": {
              "description": "The details of Node Tolerations for Broker Pods.",
              "type": "object",
              "properties": {
                "effect": {
                  "type": "string",
                  "description": "Toleration effect."
                },
                "key": {
                  "type": "string",
                  "description": "Toleration key."
                },
                "operator": {
                  "type": "string",
                  "description": "Toleration operator like 'Exists', 'Equal' etc."
                },
                "value": {
                  "type": "string",
                  "description": "Toleration Value."
                }
              },
              "required": [
                "effect",
                "key",
                "operator",
                "value"
              ]
            },
            "cardinality": {
              "description": "The cardinality details of the broker.",
              "type": "object",
              "properties": {
                "backendChain": {
                  "description": "The backend broker desired properties",
                  "type": "object",
                  "properties": {
                    "partitions": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Partitions is desired number of physical backend chains of the given distributed MQTT broker.",
                      "minimum": 0,
                      "maximum": 65535
                    },
                    "redundancyFactor": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Redundancy Factor is desired numbers of broker instances in one chain.",
                      "minimum": 0,
                      "maximum": 65535
                    },
                    "temporaryDiskTransferEnabled": {
                      "type": "boolean",
                      "description": "Defines whether disk transfer is enabled or not."
                    },
                    "temporaryDiskTransferHighWatermarkPercent": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Defines the percentage usage of buffer pool above which disk transfer will start.",
                      "minimum": 0,
                      "maximum": 100
                    },
                    "temporaryDiskTransferLowWatermarkPercent": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Defines the percentage usage of buffer pool below which disk transfer will stop.",
                      "minimum": 0,
                      "maximum": 100
                    },
                    "temporaryMaxBackendMemUsagePercent": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Defines the limits for memory usage percent of the backend instances of the MQTT broker.",
                      "minimum": 0,
                      "maximum": 100
                    },
                    "temporaryResourceLimits": {
                      "description": "Defines the limits for resources of the backend instances of the MQTT broker.",
                      "type": "object",
                      "properties": {
                        "maxInflightMessages": {
                          "type": "integer",
                          "format": "int32",
                          "description": "Maximum number of messages a client can have inflight.",
                          "minimum": 0,
                          "maximum": 65535
                        },
                        "maxInflightPatches": {
                          "type": "integer",
                          "format": "int32",
                          "description": "Maximum number of patch inflight per node.",
                          "minimum": 0,
                          "maximum": 65535
                        },
                        "maxInflightPatchesPerClient": {
                          "type": "integer",
                          "format": "int32",
                          "description": "Maximum number of patch a client can have in flight.",
                          "minimum": 0,
                          "maximum": 65535
                        },
                        "maxMessageExpirySecs": {
                          "type": "integer",
                          "format": "int64",
                          "description": "Maximum message expiry interval, in seconds.",
                          "minimum": 0,
                          "maximum": 4294967295
                        },
                        "maxQueuedMessages": {
                          "type": "integer",
                          "format": "int64",
                          "description": "Maximum receive for external clients.",
                          "minimum": 0,
                          "maximum": 9223372036854000000
                        },
                        "maxQueuedQos0Messages": {
                          "type": "integer",
                          "format": "int64",
                          "description": "Maximum receive QoS0 for external clients.",
                          "minimum": 0,
                          "maximum": 9223372036854000000
                        },
                        "maxSessionExpirySecs": {
                          "type": "integer",
                          "format": "int64",
                          "description": "Maximum session expiry interval, in seconds.",
                          "minimum": 0,
                          "maximum": 4294967295
                        }
                      },
                      "required": [
                        "maxInflightMessages",
                        "maxInflightPatches",
                        "maxInflightPatchesPerClient",
                        "maxQueuedMessages",
                        "maxQueuedQos0Messages",
                        "maxSessionExpirySecs"
                      ]
                    },
                    "workers": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Number of logical backend workers per pod.",
                      "default": 1,
                      "minimum": 0,
                      "maximum": 65535
                    }
                  },
                  "required": [
                    "partitions",
                    "redundancyFactor"
                  ]
                },
                "frontend": {
                  "description": "The frontend broker desired properties",
                  "type": "object",
                  "properties": {
                    "replicas": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Replicas is desired number of frontend replicas of the given distributed MQTT broker.",
                      "minimum": 0,
                      "maximum": 65535
                    },
                    "temporaryResourceLimits": {
                      "description": "Defines the limits for resources of the frontend instances of the MQTT broker.",
                      "type": "object",
                      "properties": {
                        "maxInflightMessages": {
                          "type": "integer",
                          "format": "int32",
                          "description": "Maximum number of messages a client can have inflight.",
                          "minimum": 0,
                          "maximum": 65535
                        },
                        "maxInflightPatches": {
                          "type": "integer",
                          "format": "int32",
                          "description": "Maximum number of patch inflight per node.",
                          "minimum": 0,
                          "maximum": 65535
                        },
                        "maxInflightPatchesPerClient": {
                          "type": "integer",
                          "format": "int32",
                          "description": "Maximum number of patch a client can have in flight.",
                          "minimum": 0,
                          "maximum": 65535
                        },
                        "maxMessageExpirySecs": {
                          "type": "integer",
                          "format": "int64",
                          "description": "Maximum message expiry interval, in seconds.",
                          "minimum": 0,
                          "maximum": 4294967295
                        },
                        "maxQueuedMessages": {
                          "type": "integer",
                          "format": "int64",
                          "description": "Maximum receive for external clients.",
                          "minimum": 0,
                          "maximum": 9223372036854000000
                        },
                        "maxQueuedQos0Messages": {
                          "type": "integer",
                          "format": "int64",
                          "description": "Maximum receive QoS0 for external clients.",
                          "minimum": 0,
                          "maximum": 9223372036854000000
                        },
                        "maxSessionExpirySecs": {
                          "type": "integer",
                          "format": "int64",
                          "description": "Maximum session expiry interval, in seconds.",
                          "minimum": 0,
                          "maximum": 4294967295
                        }
                      },
                      "required": [
                        "maxInflightMessages",
                        "maxInflightPatches",
                        "maxInflightPatchesPerClient",
                        "maxQueuedMessages",
                        "maxQueuedQos0Messages",
                        "maxSessionExpirySecs"
                      ]
                    },
                    "workers": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Number of logical frontend workers per pod.",
                      "default": 2,
                      "minimum": 0,
                      "maximum": 65535
                    }
                  },
                  "required": [
                    "replicas"
                  ]
                }
              },
              "required": [
                "backendChain",
                "frontend"
              ]
            },
            "diagnostics": {
              "description": "The diagnostic details of the broker deployment.",
              "type": "object",
              "properties": {
                "diagnosticServiceEndpoint": {
                  "type": "string",
                  "description": "Diagnostic Service endpoint"
                },
                "enableMetrics": {
                  "type": "boolean",
                  "description": "Knob to enable/disable metrics. Default = true",
                  "default": true
                },
                "enableSelfCheck": {
                  "type": "boolean",
                  "description": "Enable self check on Broker via Probe.",
                  "default": true
                },
                "enableSelfTracing": {
                  "type": "boolean",
                  "description": "Enable self tracing on the Broker so that every selfCheckFrequencySeconds a random message is traced even if it didn't have trace context.",
                  "default": true
                },
                "enableTracing": {
                  "type": "boolean",
                  "description": "Knob to enable/disable entire tracing infrastructure.",
                  "default": true
                },
                "logFormat": {
                  "type": "string",
                  "description": "Format for the logs generated.",
                  "default": "text"
                },
                "logLevel": {
                  "type": "string",
                  "description": "Log level for the Broker.",
                  "default": "info,hyper=off,kube_client=off,tower=off,conhash=off,h2=off"
                },
                "maxCellMapLifetime": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Maximum time for the CellMap to live.",
                  "default": 60,
                  "minimum": 0,
                  "maximum": 9223372036854000000
                },
                "metricUpdateFrequencySeconds": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Metric update frequency in seconds.",
                  "default": 30,
                  "minimum": 0,
                  "maximum": 9223372036854000000
                },
                "probeImage": {
                  "type": "string",
                  "description": "Probe Image to run.",
                  "default": "sample.azurecr.io/diagnostics-probe:0.5.0"
                },
                "selfCheckFrequencySeconds": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Frequency for the self check to run.",
                  "default": 30,
                  "minimum": 0,
                  "maximum": 9223372036854000000
                },
                "selfCheckTimeoutSeconds": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Time out period of the self check.",
                  "default": 15,
                  "minimum": 0,
                  "maximum": 9223372036854000000
                },
                "selfTraceFrequencySeconds": {
                  "type": "integer",
                  "format": "int64",
                  "description": "The frequency at which selfTrace should run.",
                  "default": 30,
                  "minimum": 0,
                  "maximum": 9223372036854000000
                },
                "spanChannelCapacity": {
                  "type": "integer",
                  "format": "int64",
                  "description": "The number of the spans generated by the Tracing.",
                  "default": 1000,
                  "minimum": 0,
                  "maximum": 9223372036854000000
                }
              }
            },
            "diskBackedMessageBufferSettings": {
              "description": "The settings of the disk-backed message buffer.",
              "type": "object",
              "properties": {
                "ephemeralVolumeClaimSpec": {
                  "description": "Use the specified persistent volume claim template to mount a \"generic ephemeral volume\" for the message buffer. See <https://kubernetes.io/docs/concepts/storage/ephemeral-volumes/#generic-ephemeral-volumes> for details.",
                  "type": "object",
                  "properties": {
                    "accessModes": {
                      "type": "array",
                      "description": "AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
                      "items": {
                        "type": "string"
                      }
                    },
                    "dataSource": {
                      "description": "This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.",
                      "type": "object",
                      "properties": {
                        "apiGroup": {
                          "type": "string",
                          "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required."
                        },
                        "kind": {
                          "type": "string",
                          "description": "Kind is the type of resource being referenced"
                        },
                        "name": {
                          "type": "string",
                          "description": "Name is the name of resource being referenced"
                        }
                      },
                      "required": [
                        "kind",
                        "name"
                      ]
                    },
                    "dataSourceRef": {
                      "description": "Specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef: * While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified. (Alpha) Using this field requires the AnyVolumeDataSource feature gate to be enabled.",
                      "type": "object",
                      "properties": {
                        "apiGroup": {
                          "type": "string",
                          "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required."
                        },
                        "kind": {
                          "type": "string",
                          "description": "Kind is the type of resource being referenced"
                        },
                        "name": {
                          "type": "string",
                          "description": "Name is the name of resource being referenced"
                        }
                      },
                      "required": [
                        "kind",
                        "name"
                      ]
                    },
                    "resources": {
                      "description": "Resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources",
                      "type": "object",
                      "properties": {
                        "limits": {
                          "type": "object",
                          "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "requests": {
                          "type": "object",
                          "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                          "additionalProperties": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "selector": {
                      "description": "A label query over volumes to consider for binding.",
                      "type": "object",
                      "properties": {
                        "matchExpressions": {
                          "type": "array",
                          "description": "MatchExpressions is a list of label selector requirements. The requirements are ANDed.",
                          "items": {
                            "type": "object",
                            "description": "VolumeClaimSpecSelectorMatchExpressions properties",
                            "properties": {
                              "key": {
                                "type": "string",
                                "description": "key is the label key that the selector applies to."
                              },
                              "operator": {
                                "type": "string",
                                "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist."
                              },
                              "values": {
                                "type": "array",
                                "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                "items": {
                                  "type": "string"
                                }
                              }
                            },
                            "required": [
                              "key",
                              "operator"
                            ]
                          },
                          "x-ms-identifiers": []
                        },
                        "matchLabels": {
                          "type": "object",
                          "description": "MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                          "additionalProperties": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "storageClassName": {
                      "type": "string",
                      "description": "Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1"
                    },
                    "volumeMode": {
                      "type": "string",
                      "description": "volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec. This is a beta feature."
                    },
                    "volumeName": {
                      "type": "string",
                      "description": "VolumeName is the binding reference to the PersistentVolume backing this claim."
                    }
                  }
                },
                "maxSize": {
                  "type": "string",
                  "description": "The max size of the message buffer on disk. If a PVC template is specified using one of ephemeralVolumeClaimSpec or persistentVolumeClaimSpec, then this size is used as the request and limit sizes of that template. If neither ephemeralVolumeClaimSpec nor persistentVolumeClaimSpec are specified, then an emptyDir volume is mounted with this size as its limit. See <https://kubernetes.io/docs/concepts/storage/volumes/#emptydir> for details."
                },
                "persistentVolumeClaimSpec": {
                  "description": "Use the specified persistent volume claim template to mount a persistent volume for the message buffer.",
                  "type": "object",
                  "properties": {
                    "accessModes": {
                      "type": "array",
                      "description": "AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
                      "items": {
                        "type": "string"
                      }
                    },
                    "dataSource": {
                      "description": "This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.",
                      "type": "object",
                      "properties": {
                        "apiGroup": {
                          "type": "string",
                          "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required."
                        },
                        "kind": {
                          "type": "string",
                          "description": "Kind is the type of resource being referenced"
                        },
                        "name": {
                          "type": "string",
                          "description": "Name is the name of resource being referenced"
                        }
                      },
                      "required": [
                        "kind",
                        "name"
                      ]
                    },
                    "dataSourceRef": {
                      "description": "Specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef: * While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified. (Alpha) Using this field requires the AnyVolumeDataSource feature gate to be enabled.",
                      "type": "object",
                      "properties": {
                        "apiGroup": {
                          "type": "string",
                          "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required."
                        },
                        "kind": {
                          "type": "string",
                          "description": "Kind is the type of resource being referenced"
                        },
                        "name": {
                          "type": "string",
                          "description": "Name is the name of resource being referenced"
                        }
                      },
                      "required": [
                        "kind",
                        "name"
                      ]
                    },
                    "resources": {
                      "description": "Resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources",
                      "type": "object",
                      "properties": {
                        "limits": {
                          "type": "object",
                          "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "requests": {
                          "type": "object",
                          "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                          "additionalProperties": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "selector": {
                      "description": "A label query over volumes to consider for binding.",
                      "type": "object",
                      "properties": {
                        "matchExpressions": {
                          "type": "array",
                          "description": "MatchExpressions is a list of label selector requirements. The requirements are ANDed.",
                          "items": {
                            "type": "object",
                            "description": "VolumeClaimSpecSelectorMatchExpressions properties",
                            "properties": {
                              "key": {
                                "type": "string",
                                "description": "key is the label key that the selector applies to."
                              },
                              "operator": {
                                "type": "string",
                                "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist."
                              },
                              "values": {
                                "type": "array",
                                "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                "items": {
                                  "type": "string"
                                }
                              }
                            },
                            "required": [
                              "key",
                              "operator"
                            ]
                          },
                          "x-ms-identifiers": []
                        },
                        "matchLabels": {
                          "type": "object",
                          "description": "MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                          "additionalProperties": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "storageClassName": {
                      "type": "string",
                      "description": "Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1"
                    },
                    "volumeMode": {
                      "type": "string",
                      "description": "volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec. This is a beta feature."
                    },
                    "volumeName": {
                      "type": "string",
                      "description": "VolumeName is the binding reference to the PersistentVolume backing this claim."
                    }
                  }
                }
              },
              "required": [
                "maxSize"
              ]
            },
            "encryptInternalTraffic": {
              "type": "boolean",
              "description": "The setting to enable or disable encryption of internal Traffic.",
              "default": true
            },
            "healthManagerImage": {
              "description": "The details of Health Manager Docker Image.",
              "type": "object",
              "properties": {
                "pullPolicy": {
                  "type": "string",
                  "description": "Image pull policy."
                },
                "pullSecrets": {
                  "type": "string",
                  "description": "Image pull secrets."
                },
                "repository": {
                  "type": "string",
                  "description": "The Docker image name."
                },
                "tag": {
                  "type": "string",
                  "description": "The Docker  image tag."
                }
              },
              "required": [
                "repository",
                "tag"
              ]
            },
            "healthManagerNodeTolerations": {
              "description": "The details of Node Tolerations for Health Manager Pods.",
              "type": "object",
              "properties": {
                "effect": {
                  "type": "string",
                  "description": "Toleration effect."
                },
                "key": {
                  "type": "string",
                  "description": "Toleration key."
                },
                "operator": {
                  "type": "string",
                  "description": "Toleration operator like 'Exists', 'Equal' etc."
                },
                "value": {
                  "type": "string",
                  "description": "Toleration Value."
                }
              },
              "required": [
                "effect",
                "key",
                "operator",
                "value"
              ]
            },
            "internalCerts": {
              "description": "Details of the internal CA cert that will be used to secure communication between pods.",
              "type": "object",
              "properties": {
                "duration": {
                  "type": "string",
                  "description": "Duration of CA cert.",
                  "default": "720h"
                },
                "privateKey": {
                  "description": "Cert Manager private key.",
                  "type": "object",
                  "properties": {
                    "algorithm": {
                      "type": "string",
                      "description": "algorithm for private key.",
                      "default": "ECDSA"
                    },
                    "rotationPolicy": {
                      "type": "string",
                      "description": "cert-manager rotationPolicy.",
                      "default": "Always"
                    },
                    "size": {
                      "type": "integer",
                      "format": "int32",
                      "description": "size of private key.",
                      "default": 256,
                      "minimum": 0,
                      "maximum": 65535
                    }
                  },
                  "required": [
                    "algorithm",
                    "rotationPolicy",
                    "size"
                  ]
                },
                "renewBefore": {
                  "type": "string",
                  "description": "Renew before time of CA cert.",
                  "default": "240h"
                }
              },
              "required": [
                "duration",
                "privateKey",
                "renewBefore"
              ]
            },
            "memoryProfile": {
              "type": "string",
              "description": "Memory profile of broker.",
              "default": "medium",
              "enum": [
                "tiny",
                "low",
                "medium",
                "high"
              ],
              "x-ms-enum": {
                "name": "BrokerMemoryProfile",
                "modelAsString": true,
                "values": [
                  {
                    "name": "tiny",
                    "value": "tiny",
                    "description": "Tiny memory profile."
                  },
                  {
                    "name": "low",
                    "value": "low",
                    "description": "Low memory profile."
                  },
                  {
                    "name": "medium",
                    "value": "medium",
                    "description": "Medium memory profile."
                  },
                  {
                    "name": "high",
                    "value": "high",
                    "description": "High memory profile."
                  }
                ]
              }
            },
            "mode": {
              "description": "The Running Mode of the Broker Deployment.",
              "type": "string",
              "enum": [
                "auto",
                "distributed"
              ],
              "x-ms-enum": {
                "name": "RunMode",
                "modelAsString": true,
                "values": [
                  {
                    "name": "auto",
                    "value": "auto",
                    "description": "Automatically provision Frontend and Backend pods."
                  },
                  {
                    "name": "distributed",
                    "value": "distributed",
                    "description": "Use Cardinality to set Frontend and Backend pods."
                  }
                ]
              }
            },
            "provisioningState": {
              "description": "The status of the last operation.",
              "readOnly": true,
              "type": "string",
              "enum": [
                "Succeeded",
                "Failed",
                "Canceled",
                "Provisioning",
                "Updating",
                "Deleting",
                "Accepted"
              ],
              "x-ms-enum": {
                "name": "ProvisioningState",
                "modelAsString": true,
                "values": [
                  {
                    "name": "Succeeded",
                    "value": "Succeeded",
                    "description": "Resource has been created."
                  },
                  {
                    "name": "Failed",
                    "value": "Failed",
                    "description": "Resource creation failed."
                  },
                  {
                    "name": "Canceled",
                    "value": "Canceled",
                    "description": "Resource creation was canceled."
                  },
                  {
                    "name": "Provisioning",
                    "value": "Provisioning",
                    "description": "Resource is getting provisioned."
                  },
                  {
                    "name": "Updating",
                    "value": "Updating",
                    "description": "Resource is Updating."
                  },
                  {
                    "name": "Deleting",
                    "value": "Deleting",
                    "description": "Resource is Deleting."
                  },
                  {
                    "name": "Accepted",
                    "value": "Accepted",
                    "description": "Resource has been Accepted."
                  }
                ]
              }
            }
          },
          "required": [
            "authImage",
            "brokerImage",
            "healthManagerImage",
            "mode"
          ]
        },
        "extendedLocation": {
          "description": "Extended Location",
          "x-ms-mutability": [
            "read",
            "create"
          ],
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name of the extended location."
            },
            "type": {
              "description": "Type of ExtendedLocation.",
              "type": "string",
              "enum": [
                "CustomLocation"
              ],
              "x-ms-enum": {
                "name": "ExtendedLocationType",
                "modelAsString": true,
                "values": [
                  {
                    "name": "CustomLocation",
                    "value": "CustomLocation",
                    "description": "CustomLocation type"
                  }
                ]
              }
            }
          },
          "required": [
            "name",
            "type"
          ]
        }
      },
      "required": [
        "extendedLocation"
      ]
    },
    "BrokerResourceListResult": {
      "type": "object",
      "description": "The response of a BrokerResource list operation.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The BrokerResource items on this page",
          "items": {
            "type": "object",
            "description": "MQ broker resource",
            "properties": {
              "id": {
                "type": "string",
                "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                "readOnly": true
              },
              "name": {
                "type": "string",
                "description": "The name of the resource",
                "readOnly": true
              },
              "type": {
                "type": "string",
                "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                "readOnly": true
              },
              "systemData": {
                "type": "object",
                "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                "readOnly": true,
                "properties": {
                  "createdBy": {
                    "type": "string",
                    "description": "The identity that created the resource."
                  },
                  "createdByType": {
                    "type": "string",
                    "description": "The type of identity that created the resource.",
                    "enum": [
                      "User",
                      "Application",
                      "ManagedIdentity",
                      "Key"
                    ],
                    "x-ms-enum": {
                      "name": "createdByType",
                      "modelAsString": true
                    }
                  },
                  "createdAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp of resource creation (UTC)."
                  },
                  "lastModifiedBy": {
                    "type": "string",
                    "description": "The identity that last modified the resource."
                  },
                  "lastModifiedByType": {
                    "type": "string",
                    "description": "The type of identity that last modified the resource.",
                    "enum": [
                      "User",
                      "Application",
                      "ManagedIdentity",
                      "Key"
                    ],
                    "x-ms-enum": {
                      "name": "createdByType",
                      "modelAsString": true
                    }
                  },
                  "lastModifiedAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp of resource last modification (UTC)"
                  }
                }
              },
              "tags": {
                "type": "object",
                "description": "Resource tags.",
                "additionalProperties": {
                  "type": "string"
                },
                "x-ms-mutability": [
                  "read",
                  "create",
                  "update"
                ]
              },
              "location": {
                "type": "string",
                "description": "The geo-location where the resource lives",
                "x-ms-mutability": [
                  "read",
                  "create"
                ]
              },
              "properties": {
                "description": "The resource-specific properties for this resource.",
                "x-ms-client-flatten": true,
                "type": "object",
                "properties": {
                  "authImage": {
                    "description": "The details of Authentication Docker Image.",
                    "type": "object",
                    "properties": {
                      "pullPolicy": {
                        "type": "string",
                        "description": "Image pull policy."
                      },
                      "pullSecrets": {
                        "type": "string",
                        "description": "Image pull secrets."
                      },
                      "repository": {
                        "type": "string",
                        "description": "The Docker image name."
                      },
                      "tag": {
                        "type": "string",
                        "description": "The Docker  image tag."
                      }
                    },
                    "required": [
                      "repository",
                      "tag"
                    ]
                  },
                  "brokerImage": {
                    "description": "The details of Broker Docker Image.",
                    "type": "object",
                    "properties": {
                      "pullPolicy": {
                        "type": "string",
                        "description": "Image pull policy."
                      },
                      "pullSecrets": {
                        "type": "string",
                        "description": "Image pull secrets."
                      },
                      "repository": {
                        "type": "string",
                        "description": "The Docker image name."
                      },
                      "tag": {
                        "type": "string",
                        "description": "The Docker  image tag."
                      }
                    },
                    "required": [
                      "repository",
                      "tag"
                    ]
                  },
                  "brokerNodeTolerations": {
                    "description": "The details of Node Tolerations for Broker Pods.",
                    "type": "object",
                    "properties": {
                      "effect": {
                        "type": "string",
                        "description": "Toleration effect."
                      },
                      "key": {
                        "type": "string",
                        "description": "Toleration key."
                      },
                      "operator": {
                        "type": "string",
                        "description": "Toleration operator like 'Exists', 'Equal' etc."
                      },
                      "value": {
                        "type": "string",
                        "description": "Toleration Value."
                      }
                    },
                    "required": [
                      "effect",
                      "key",
                      "operator",
                      "value"
                    ]
                  },
                  "cardinality": {
                    "description": "The cardinality details of the broker.",
                    "type": "object",
                    "properties": {
                      "backendChain": {
                        "description": "The backend broker desired properties",
                        "type": "object",
                        "properties": {
                          "partitions": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Partitions is desired number of physical backend chains of the given distributed MQTT broker.",
                            "minimum": 0,
                            "maximum": 65535
                          },
                          "redundancyFactor": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Redundancy Factor is desired numbers of broker instances in one chain.",
                            "minimum": 0,
                            "maximum": 65535
                          },
                          "temporaryDiskTransferEnabled": {
                            "type": "boolean",
                            "description": "Defines whether disk transfer is enabled or not."
                          },
                          "temporaryDiskTransferHighWatermarkPercent": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Defines the percentage usage of buffer pool above which disk transfer will start.",
                            "minimum": 0,
                            "maximum": 100
                          },
                          "temporaryDiskTransferLowWatermarkPercent": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Defines the percentage usage of buffer pool below which disk transfer will stop.",
                            "minimum": 0,
                            "maximum": 100
                          },
                          "temporaryMaxBackendMemUsagePercent": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Defines the limits for memory usage percent of the backend instances of the MQTT broker.",
                            "minimum": 0,
                            "maximum": 100
                          },
                          "temporaryResourceLimits": {
                            "description": "Defines the limits for resources of the backend instances of the MQTT broker.",
                            "type": "object",
                            "properties": {
                              "maxInflightMessages": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Maximum number of messages a client can have inflight.",
                                "minimum": 0,
                                "maximum": 65535
                              },
                              "maxInflightPatches": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Maximum number of patch inflight per node.",
                                "minimum": 0,
                                "maximum": 65535
                              },
                              "maxInflightPatchesPerClient": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Maximum number of patch a client can have in flight.",
                                "minimum": 0,
                                "maximum": 65535
                              },
                              "maxMessageExpirySecs": {
                                "type": "integer",
                                "format": "int64",
                                "description": "Maximum message expiry interval, in seconds.",
                                "minimum": 0,
                                "maximum": 4294967295
                              },
                              "maxQueuedMessages": {
                                "type": "integer",
                                "format": "int64",
                                "description": "Maximum receive for external clients.",
                                "minimum": 0,
                                "maximum": 9223372036854000000
                              },
                              "maxQueuedQos0Messages": {
                                "type": "integer",
                                "format": "int64",
                                "description": "Maximum receive QoS0 for external clients.",
                                "minimum": 0,
                                "maximum": 9223372036854000000
                              },
                              "maxSessionExpirySecs": {
                                "type": "integer",
                                "format": "int64",
                                "description": "Maximum session expiry interval, in seconds.",
                                "minimum": 0,
                                "maximum": 4294967295
                              }
                            },
                            "required": [
                              "maxInflightMessages",
                              "maxInflightPatches",
                              "maxInflightPatchesPerClient",
                              "maxQueuedMessages",
                              "maxQueuedQos0Messages",
                              "maxSessionExpirySecs"
                            ]
                          },
                          "workers": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Number of logical backend workers per pod.",
                            "default": 1,
                            "minimum": 0,
                            "maximum": 65535
                          }
                        },
                        "required": [
                          "partitions",
                          "redundancyFactor"
                        ]
                      },
                      "frontend": {
                        "description": "The frontend broker desired properties",
                        "type": "object",
                        "properties": {
                          "replicas": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Replicas is desired number of frontend replicas of the given distributed MQTT broker.",
                            "minimum": 0,
                            "maximum": 65535
                          },
                          "temporaryResourceLimits": {
                            "description": "Defines the limits for resources of the frontend instances of the MQTT broker.",
                            "type": "object",
                            "properties": {
                              "maxInflightMessages": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Maximum number of messages a client can have inflight.",
                                "minimum": 0,
                                "maximum": 65535
                              },
                              "maxInflightPatches": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Maximum number of patch inflight per node.",
                                "minimum": 0,
                                "maximum": 65535
                              },
                              "maxInflightPatchesPerClient": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Maximum number of patch a client can have in flight.",
                                "minimum": 0,
                                "maximum": 65535
                              },
                              "maxMessageExpirySecs": {
                                "type": "integer",
                                "format": "int64",
                                "description": "Maximum message expiry interval, in seconds.",
                                "minimum": 0,
                                "maximum": 4294967295
                              },
                              "maxQueuedMessages": {
                                "type": "integer",
                                "format": "int64",
                                "description": "Maximum receive for external clients.",
                                "minimum": 0,
                                "maximum": 9223372036854000000
                              },
                              "maxQueuedQos0Messages": {
                                "type": "integer",
                                "format": "int64",
                                "description": "Maximum receive QoS0 for external clients.",
                                "minimum": 0,
                                "maximum": 9223372036854000000
                              },
                              "maxSessionExpirySecs": {
                                "type": "integer",
                                "format": "int64",
                                "description": "Maximum session expiry interval, in seconds.",
                                "minimum": 0,
                                "maximum": 4294967295
                              }
                            },
                            "required": [
                              "maxInflightMessages",
                              "maxInflightPatches",
                              "maxInflightPatchesPerClient",
                              "maxQueuedMessages",
                              "maxQueuedQos0Messages",
                              "maxSessionExpirySecs"
                            ]
                          },
                          "workers": {
                            "type": "integer",
                            "format": "int32",
                            "description": "Number of logical frontend workers per pod.",
                            "default": 2,
                            "minimum": 0,
                            "maximum": 65535
                          }
                        },
                        "required": [
                          "replicas"
                        ]
                      }
                    },
                    "required": [
                      "backendChain",
                      "frontend"
                    ]
                  },
                  "diagnostics": {
                    "description": "The diagnostic details of the broker deployment.",
                    "type": "object",
                    "properties": {
                      "diagnosticServiceEndpoint": {
                        "type": "string",
                        "description": "Diagnostic Service endpoint"
                      },
                      "enableMetrics": {
                        "type": "boolean",
                        "description": "Knob to enable/disable metrics. Default = true",
                        "default": true
                      },
                      "enableSelfCheck": {
                        "type": "boolean",
                        "description": "Enable self check on Broker via Probe.",
                        "default": true
                      },
                      "enableSelfTracing": {
                        "type": "boolean",
                        "description": "Enable self tracing on the Broker so that every selfCheckFrequencySeconds a random message is traced even if it didn't have trace context.",
                        "default": true
                      },
                      "enableTracing": {
                        "type": "boolean",
                        "description": "Knob to enable/disable entire tracing infrastructure.",
                        "default": true
                      },
                      "logFormat": {
                        "type": "string",
                        "description": "Format for the logs generated.",
                        "default": "text"
                      },
                      "logLevel": {
                        "type": "string",
                        "description": "Log level for the Broker.",
                        "default": "info,hyper=off,kube_client=off,tower=off,conhash=off,h2=off"
                      },
                      "maxCellMapLifetime": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Maximum time for the CellMap to live.",
                        "default": 60,
                        "minimum": 0,
                        "maximum": 9223372036854000000
                      },
                      "metricUpdateFrequencySeconds": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Metric update frequency in seconds.",
                        "default": 30,
                        "minimum": 0,
                        "maximum": 9223372036854000000
                      },
                      "probeImage": {
                        "type": "string",
                        "description": "Probe Image to run.",
                        "default": "sample.azurecr.io/diagnostics-probe:0.5.0"
                      },
                      "selfCheckFrequencySeconds": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Frequency for the self check to run.",
                        "default": 30,
                        "minimum": 0,
                        "maximum": 9223372036854000000
                      },
                      "selfCheckTimeoutSeconds": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Time out period of the self check.",
                        "default": 15,
                        "minimum": 0,
                        "maximum": 9223372036854000000
                      },
                      "selfTraceFrequencySeconds": {
                        "type": "integer",
                        "format": "int64",
                        "description": "The frequency at which selfTrace should run.",
                        "default": 30,
                        "minimum": 0,
                        "maximum": 9223372036854000000
                      },
                      "spanChannelCapacity": {
                        "type": "integer",
                        "format": "int64",
                        "description": "The number of the spans generated by the Tracing.",
                        "default": 1000,
                        "minimum": 0,
                        "maximum": 9223372036854000000
                      }
                    }
                  },
                  "diskBackedMessageBufferSettings": {
                    "description": "The settings of the disk-backed message buffer.",
                    "type": "object",
                    "properties": {
                      "ephemeralVolumeClaimSpec": {
                        "description": "Use the specified persistent volume claim template to mount a \"generic ephemeral volume\" for the message buffer. See <https://kubernetes.io/docs/concepts/storage/ephemeral-volumes/#generic-ephemeral-volumes> for details.",
                        "type": "object",
                        "properties": {
                          "accessModes": {
                            "type": "array",
                            "description": "AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
                            "items": {
                              "type": "string"
                            }
                          },
                          "dataSource": {
                            "description": "This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.",
                            "type": "object",
                            "properties": {
                              "apiGroup": {
                                "type": "string",
                                "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required."
                              },
                              "kind": {
                                "type": "string",
                                "description": "Kind is the type of resource being referenced"
                              },
                              "name": {
                                "type": "string",
                                "description": "Name is the name of resource being referenced"
                              }
                            },
                            "required": [
                              "kind",
                              "name"
                            ]
                          },
                          "dataSourceRef": {
                            "description": "Specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef: * While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified. (Alpha) Using this field requires the AnyVolumeDataSource feature gate to be enabled.",
                            "type": "object",
                            "properties": {
                              "apiGroup": {
                                "type": "string",
                                "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required."
                              },
                              "kind": {
                                "type": "string",
                                "description": "Kind is the type of resource being referenced"
                              },
                              "name": {
                                "type": "string",
                                "description": "Name is the name of resource being referenced"
                              }
                            },
                            "required": [
                              "kind",
                              "name"
                            ]
                          },
                          "resources": {
                            "description": "Resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources",
                            "type": "object",
                            "properties": {
                              "limits": {
                                "type": "object",
                                "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                                "additionalProperties": {
                                  "type": "string"
                                }
                              },
                              "requests": {
                                "type": "object",
                                "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                                "additionalProperties": {
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "selector": {
                            "description": "A label query over volumes to consider for binding.",
                            "type": "object",
                            "properties": {
                              "matchExpressions": {
                                "type": "array",
                                "description": "MatchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                "items": {
                                  "type": "object",
                                  "description": "VolumeClaimSpecSelectorMatchExpressions properties",
                                  "properties": {
                                    "key": {
                                      "type": "string",
                                      "description": "key is the label key that the selector applies to."
                                    },
                                    "operator": {
                                      "type": "string",
                                      "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist."
                                    },
                                    "values": {
                                      "type": "array",
                                      "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                      "items": {
                                        "type": "string"
                                      }
                                    }
                                  },
                                  "required": [
                                    "key",
                                    "operator"
                                  ]
                                },
                                "x-ms-identifiers": []
                              },
                              "matchLabels": {
                                "type": "object",
                                "description": "MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                "additionalProperties": {
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "storageClassName": {
                            "type": "string",
                            "description": "Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1"
                          },
                          "volumeMode": {
                            "type": "string",
                            "description": "volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec. This is a beta feature."
                          },
                          "volumeName": {
                            "type": "string",
                            "description": "VolumeName is the binding reference to the PersistentVolume backing this claim."
                          }
                        }
                      },
                      "maxSize": {
                        "type": "string",
                        "description": "The max size of the message buffer on disk. If a PVC template is specified using one of ephemeralVolumeClaimSpec or persistentVolumeClaimSpec, then this size is used as the request and limit sizes of that template. If neither ephemeralVolumeClaimSpec nor persistentVolumeClaimSpec are specified, then an emptyDir volume is mounted with this size as its limit. See <https://kubernetes.io/docs/concepts/storage/volumes/#emptydir> for details."
                      },
                      "persistentVolumeClaimSpec": {
                        "description": "Use the specified persistent volume claim template to mount a persistent volume for the message buffer.",
                        "type": "object",
                        "properties": {
                          "accessModes": {
                            "type": "array",
                            "description": "AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
                            "items": {
                              "type": "string"
                            }
                          },
                          "dataSource": {
                            "description": "This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.",
                            "type": "object",
                            "properties": {
                              "apiGroup": {
                                "type": "string",
                                "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required."
                              },
                              "kind": {
                                "type": "string",
                                "description": "Kind is the type of resource being referenced"
                              },
                              "name": {
                                "type": "string",
                                "description": "Name is the name of resource being referenced"
                              }
                            },
                            "required": [
                              "kind",
                              "name"
                            ]
                          },
                          "dataSourceRef": {
                            "description": "Specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef: * While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified. (Alpha) Using this field requires the AnyVolumeDataSource feature gate to be enabled.",
                            "type": "object",
                            "properties": {
                              "apiGroup": {
                                "type": "string",
                                "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required."
                              },
                              "kind": {
                                "type": "string",
                                "description": "Kind is the type of resource being referenced"
                              },
                              "name": {
                                "type": "string",
                                "description": "Name is the name of resource being referenced"
                              }
                            },
                            "required": [
                              "kind",
                              "name"
                            ]
                          },
                          "resources": {
                            "description": "Resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources",
                            "type": "object",
                            "properties": {
                              "limits": {
                                "type": "object",
                                "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                                "additionalProperties": {
                                  "type": "string"
                                }
                              },
                              "requests": {
                                "type": "object",
                                "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                                "additionalProperties": {
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "selector": {
                            "description": "A label query over volumes to consider for binding.",
                            "type": "object",
                            "properties": {
                              "matchExpressions": {
                                "type": "array",
                                "description": "MatchExpressions is a list of label selector requirements. The requirements are ANDed.",
                                "items": {
                                  "type": "object",
                                  "description": "VolumeClaimSpecSelectorMatchExpressions properties",
                                  "properties": {
                                    "key": {
                                      "type": "string",
                                      "description": "key is the label key that the selector applies to."
                                    },
                                    "operator": {
                                      "type": "string",
                                      "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist."
                                    },
                                    "values": {
                                      "type": "array",
                                      "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                      "items": {
                                        "type": "string"
                                      }
                                    }
                                  },
                                  "required": [
                                    "key",
                                    "operator"
                                  ]
                                },
                                "x-ms-identifiers": []
                              },
                              "matchLabels": {
                                "type": "object",
                                "description": "MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                                "additionalProperties": {
                                  "type": "string"
                                }
                              }
                            }
                          },
                          "storageClassName": {
                            "type": "string",
                            "description": "Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1"
                          },
                          "volumeMode": {
                            "type": "string",
                            "description": "volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec. This is a beta feature."
                          },
                          "volumeName": {
                            "type": "string",
                            "description": "VolumeName is the binding reference to the PersistentVolume backing this claim."
                          }
                        }
                      }
                    },
                    "required": [
                      "maxSize"
                    ]
                  },
                  "encryptInternalTraffic": {
                    "type": "boolean",
                    "description": "The setting to enable or disable encryption of internal Traffic.",
                    "default": true
                  },
                  "healthManagerImage": {
                    "description": "The details of Health Manager Docker Image.",
                    "type": "object",
                    "properties": {
                      "pullPolicy": {
                        "type": "string",
                        "description": "Image pull policy."
                      },
                      "pullSecrets": {
                        "type": "string",
                        "description": "Image pull secrets."
                      },
                      "repository": {
                        "type": "string",
                        "description": "The Docker image name."
                      },
                      "tag": {
                        "type": "string",
                        "description": "The Docker  image tag."
                      }
                    },
                    "required": [
                      "repository",
                      "tag"
                    ]
                  },
                  "healthManagerNodeTolerations": {
                    "description": "The details of Node Tolerations for Health Manager Pods.",
                    "type": "object",
                    "properties": {
                      "effect": {
                        "type": "string",
                        "description": "Toleration effect."
                      },
                      "key": {
                        "type": "string",
                        "description": "Toleration key."
                      },
                      "operator": {
                        "type": "string",
                        "description": "Toleration operator like 'Exists', 'Equal' etc."
                      },
                      "value": {
                        "type": "string",
                        "description": "Toleration Value."
                      }
                    },
                    "required": [
                      "effect",
                      "key",
                      "operator",
                      "value"
                    ]
                  },
                  "internalCerts": {
                    "description": "Details of the internal CA cert that will be used to secure communication between pods.",
                    "type": "object",
                    "properties": {
                      "duration": {
                        "type": "string",
                        "description": "Duration of CA cert.",
                        "default": "720h"
                      },
                      "privateKey": {
                        "description": "Cert Manager private key.",
                        "type": "object",
                        "properties": {
                          "algorithm": {
                            "type": "string",
                            "description": "algorithm for private key.",
                            "default": "ECDSA"
                          },
                          "rotationPolicy": {
                            "type": "string",
                            "description": "cert-manager rotationPolicy.",
                            "default": "Always"
                          },
                          "size": {
                            "type": "integer",
                            "format": "int32",
                            "description": "size of private key.",
                            "default": 256,
                            "minimum": 0,
                            "maximum": 65535
                          }
                        },
                        "required": [
                          "algorithm",
                          "rotationPolicy",
                          "size"
                        ]
                      },
                      "renewBefore": {
                        "type": "string",
                        "description": "Renew before time of CA cert.",
                        "default": "240h"
                      }
                    },
                    "required": [
                      "duration",
                      "privateKey",
                      "renewBefore"
                    ]
                  },
                  "memoryProfile": {
                    "type": "string",
                    "description": "Memory profile of broker.",
                    "default": "medium",
                    "enum": [
                      "tiny",
                      "low",
                      "medium",
                      "high"
                    ],
                    "x-ms-enum": {
                      "name": "BrokerMemoryProfile",
                      "modelAsString": true,
                      "values": [
                        {
                          "name": "tiny",
                          "value": "tiny",
                          "description": "Tiny memory profile."
                        },
                        {
                          "name": "low",
                          "value": "low",
                          "description": "Low memory profile."
                        },
                        {
                          "name": "medium",
                          "value": "medium",
                          "description": "Medium memory profile."
                        },
                        {
                          "name": "high",
                          "value": "high",
                          "description": "High memory profile."
                        }
                      ]
                    }
                  },
                  "mode": {
                    "description": "The Running Mode of the Broker Deployment.",
                    "type": "string",
                    "enum": [
                      "auto",
                      "distributed"
                    ],
                    "x-ms-enum": {
                      "name": "RunMode",
                      "modelAsString": true,
                      "values": [
                        {
                          "name": "auto",
                          "value": "auto",
                          "description": "Automatically provision Frontend and Backend pods."
                        },
                        {
                          "name": "distributed",
                          "value": "distributed",
                          "description": "Use Cardinality to set Frontend and Backend pods."
                        }
                      ]
                    }
                  },
                  "provisioningState": {
                    "description": "The status of the last operation.",
                    "readOnly": true,
                    "type": "string",
                    "enum": [
                      "Succeeded",
                      "Failed",
                      "Canceled",
                      "Provisioning",
                      "Updating",
                      "Deleting",
                      "Accepted"
                    ],
                    "x-ms-enum": {
                      "name": "ProvisioningState",
                      "modelAsString": true,
                      "values": [
                        {
                          "name": "Succeeded",
                          "value": "Succeeded",
                          "description": "Resource has been created."
                        },
                        {
                          "name": "Failed",
                          "value": "Failed",
                          "description": "Resource creation failed."
                        },
                        {
                          "name": "Canceled",
                          "value": "Canceled",
                          "description": "Resource creation was canceled."
                        },
                        {
                          "name": "Provisioning",
                          "value": "Provisioning",
                          "description": "Resource is getting provisioned."
                        },
                        {
                          "name": "Updating",
                          "value": "Updating",
                          "description": "Resource is Updating."
                        },
                        {
                          "name": "Deleting",
                          "value": "Deleting",
                          "description": "Resource is Deleting."
                        },
                        {
                          "name": "Accepted",
                          "value": "Accepted",
                          "description": "Resource has been Accepted."
                        }
                      ]
                    }
                  }
                },
                "required": [
                  "authImage",
                  "brokerImage",
                  "healthManagerImage",
                  "mode"
                ]
              },
              "extendedLocation": {
                "description": "Extended Location",
                "x-ms-mutability": [
                  "read",
                  "create"
                ],
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the extended location."
                  },
                  "type": {
                    "description": "Type of ExtendedLocation.",
                    "type": "string",
                    "enum": [
                      "CustomLocation"
                    ],
                    "x-ms-enum": {
                      "name": "ExtendedLocationType",
                      "modelAsString": true,
                      "values": [
                        {
                          "name": "CustomLocation",
                          "value": "CustomLocation",
                          "description": "CustomLocation type"
                        }
                      ]
                    }
                  }
                },
                "required": [
                  "name",
                  "type"
                ]
              }
            },
            "required": [
              "extendedLocation"
            ]
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "BrokerResourceUpdate": {
      "type": "object",
      "description": "The type used for update operations of the BrokerResource.",
      "properties": {
        "tags": {
          "type": "object",
          "description": "Resource tags.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "properties": {
          "description": "The resource-specific properties for this resource.",
          "x-ms-client-flatten": true,
          "type": "object",
          "properties": {
            "authImage": {
              "description": "The details of Authentication Docker Image.",
              "type": "object",
              "properties": {
                "pullPolicy": {
                  "type": "string",
                  "description": "Image pull policy."
                },
                "pullSecrets": {
                  "type": "string",
                  "description": "Image pull secrets."
                },
                "repository": {
                  "type": "string",
                  "description": "The Docker image name."
                },
                "tag": {
                  "type": "string",
                  "description": "The Docker  image tag."
                }
              }
            },
            "brokerImage": {
              "description": "The details of Broker Docker Image.",
              "type": "object",
              "properties": {
                "pullPolicy": {
                  "type": "string",
                  "description": "Image pull policy."
                },
                "pullSecrets": {
                  "type": "string",
                  "description": "Image pull secrets."
                },
                "repository": {
                  "type": "string",
                  "description": "The Docker image name."
                },
                "tag": {
                  "type": "string",
                  "description": "The Docker  image tag."
                }
              }
            },
            "brokerNodeTolerations": {
              "description": "The details of Node Tolerations for Broker Pods.",
              "type": "object",
              "properties": {
                "effect": {
                  "type": "string",
                  "description": "Toleration effect."
                },
                "key": {
                  "type": "string",
                  "description": "Toleration key."
                },
                "operator": {
                  "type": "string",
                  "description": "Toleration operator like 'Exists', 'Equal' etc."
                },
                "value": {
                  "type": "string",
                  "description": "Toleration Value."
                }
              }
            },
            "cardinality": {
              "description": "The cardinality details of the broker.",
              "type": "object",
              "properties": {
                "backendChain": {
                  "description": "The backend broker desired properties",
                  "type": "object",
                  "properties": {
                    "partitions": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Partitions is desired number of physical backend chains of the given distributed MQTT broker.",
                      "minimum": 0,
                      "maximum": 65535
                    },
                    "redundancyFactor": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Redundancy Factor is desired numbers of broker instances in one chain.",
                      "minimum": 0,
                      "maximum": 65535
                    },
                    "temporaryDiskTransferEnabled": {
                      "type": "boolean",
                      "description": "Defines whether disk transfer is enabled or not."
                    },
                    "temporaryDiskTransferHighWatermarkPercent": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Defines the percentage usage of buffer pool above which disk transfer will start.",
                      "minimum": 0,
                      "maximum": 100
                    },
                    "temporaryDiskTransferLowWatermarkPercent": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Defines the percentage usage of buffer pool below which disk transfer will stop.",
                      "minimum": 0,
                      "maximum": 100
                    },
                    "temporaryMaxBackendMemUsagePercent": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Defines the limits for memory usage percent of the backend instances of the MQTT broker.",
                      "minimum": 0,
                      "maximum": 100
                    },
                    "temporaryResourceLimits": {
                      "description": "Defines the limits for resources of the backend instances of the MQTT broker.",
                      "type": "object",
                      "properties": {
                        "maxInflightMessages": {
                          "type": "integer",
                          "format": "int32",
                          "description": "Maximum number of messages a client can have inflight.",
                          "minimum": 0,
                          "maximum": 65535
                        },
                        "maxInflightPatches": {
                          "type": "integer",
                          "format": "int32",
                          "description": "Maximum number of patch inflight per node.",
                          "minimum": 0,
                          "maximum": 65535
                        },
                        "maxInflightPatchesPerClient": {
                          "type": "integer",
                          "format": "int32",
                          "description": "Maximum number of patch a client can have in flight.",
                          "minimum": 0,
                          "maximum": 65535
                        },
                        "maxMessageExpirySecs": {
                          "type": "integer",
                          "format": "int64",
                          "description": "Maximum message expiry interval, in seconds.",
                          "minimum": 0,
                          "maximum": 4294967295
                        },
                        "maxQueuedMessages": {
                          "type": "integer",
                          "format": "int64",
                          "description": "Maximum receive for external clients.",
                          "minimum": 0,
                          "maximum": 9223372036854000000
                        },
                        "maxQueuedQos0Messages": {
                          "type": "integer",
                          "format": "int64",
                          "description": "Maximum receive QoS0 for external clients.",
                          "minimum": 0,
                          "maximum": 9223372036854000000
                        },
                        "maxSessionExpirySecs": {
                          "type": "integer",
                          "format": "int64",
                          "description": "Maximum session expiry interval, in seconds.",
                          "minimum": 0,
                          "maximum": 4294967295
                        }
                      }
                    },
                    "workers": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Number of logical backend workers per pod.",
                      "default": 1,
                      "minimum": 0,
                      "maximum": 65535
                    }
                  }
                },
                "frontend": {
                  "description": "The frontend broker desired properties",
                  "type": "object",
                  "properties": {
                    "replicas": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Replicas is desired number of frontend replicas of the given distributed MQTT broker.",
                      "minimum": 0,
                      "maximum": 65535
                    },
                    "temporaryResourceLimits": {
                      "description": "Defines the limits for resources of the frontend instances of the MQTT broker.",
                      "type": "object",
                      "properties": {
                        "maxInflightMessages": {
                          "type": "integer",
                          "format": "int32",
                          "description": "Maximum number of messages a client can have inflight.",
                          "minimum": 0,
                          "maximum": 65535
                        },
                        "maxInflightPatches": {
                          "type": "integer",
                          "format": "int32",
                          "description": "Maximum number of patch inflight per node.",
                          "minimum": 0,
                          "maximum": 65535
                        },
                        "maxInflightPatchesPerClient": {
                          "type": "integer",
                          "format": "int32",
                          "description": "Maximum number of patch a client can have in flight.",
                          "minimum": 0,
                          "maximum": 65535
                        },
                        "maxMessageExpirySecs": {
                          "type": "integer",
                          "format": "int64",
                          "description": "Maximum message expiry interval, in seconds.",
                          "minimum": 0,
                          "maximum": 4294967295
                        },
                        "maxQueuedMessages": {
                          "type": "integer",
                          "format": "int64",
                          "description": "Maximum receive for external clients.",
                          "minimum": 0,
                          "maximum": 9223372036854000000
                        },
                        "maxQueuedQos0Messages": {
                          "type": "integer",
                          "format": "int64",
                          "description": "Maximum receive QoS0 for external clients.",
                          "minimum": 0,
                          "maximum": 9223372036854000000
                        },
                        "maxSessionExpirySecs": {
                          "type": "integer",
                          "format": "int64",
                          "description": "Maximum session expiry interval, in seconds.",
                          "minimum": 0,
                          "maximum": 4294967295
                        }
                      }
                    },
                    "workers": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Number of logical frontend workers per pod.",
                      "default": 2,
                      "minimum": 0,
                      "maximum": 65535
                    }
                  }
                }
              }
            },
            "diagnostics": {
              "description": "The diagnostic details of the broker deployment.",
              "type": "object",
              "properties": {
                "diagnosticServiceEndpoint": {
                  "type": "string",
                  "description": "Diagnostic Service endpoint"
                },
                "enableMetrics": {
                  "type": "boolean",
                  "description": "Knob to enable/disable metrics. Default = true",
                  "default": true
                },
                "enableSelfCheck": {
                  "type": "boolean",
                  "description": "Enable self check on Broker via Probe.",
                  "default": true
                },
                "enableSelfTracing": {
                  "type": "boolean",
                  "description": "Enable self tracing on the Broker so that every selfCheckFrequencySeconds a random message is traced even if it didn't have trace context.",
                  "default": true
                },
                "enableTracing": {
                  "type": "boolean",
                  "description": "Knob to enable/disable entire tracing infrastructure.",
                  "default": true
                },
                "logFormat": {
                  "type": "string",
                  "description": "Format for the logs generated.",
                  "default": "text"
                },
                "logLevel": {
                  "type": "string",
                  "description": "Log level for the Broker.",
                  "default": "info,hyper=off,kube_client=off,tower=off,conhash=off,h2=off"
                },
                "maxCellMapLifetime": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Maximum time for the CellMap to live.",
                  "default": 60,
                  "minimum": 0,
                  "maximum": 9223372036854000000
                },
                "metricUpdateFrequencySeconds": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Metric update frequency in seconds.",
                  "default": 30,
                  "minimum": 0,
                  "maximum": 9223372036854000000
                },
                "probeImage": {
                  "type": "string",
                  "description": "Probe Image to run.",
                  "default": "sample.azurecr.io/diagnostics-probe:0.5.0"
                },
                "selfCheckFrequencySeconds": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Frequency for the self check to run.",
                  "default": 30,
                  "minimum": 0,
                  "maximum": 9223372036854000000
                },
                "selfCheckTimeoutSeconds": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Time out period of the self check.",
                  "default": 15,
                  "minimum": 0,
                  "maximum": 9223372036854000000
                },
                "selfTraceFrequencySeconds": {
                  "type": "integer",
                  "format": "int64",
                  "description": "The frequency at which selfTrace should run.",
                  "default": 30,
                  "minimum": 0,
                  "maximum": 9223372036854000000
                },
                "spanChannelCapacity": {
                  "type": "integer",
                  "format": "int64",
                  "description": "The number of the spans generated by the Tracing.",
                  "default": 1000,
                  "minimum": 0,
                  "maximum": 9223372036854000000
                }
              }
            },
            "diskBackedMessageBufferSettings": {
              "description": "The settings of the disk-backed message buffer.",
              "type": "object",
              "properties": {
                "ephemeralVolumeClaimSpec": {
                  "description": "Use the specified persistent volume claim template to mount a \"generic ephemeral volume\" for the message buffer. See <https://kubernetes.io/docs/concepts/storage/ephemeral-volumes/#generic-ephemeral-volumes> for details.",
                  "type": "object",
                  "properties": {
                    "accessModes": {
                      "type": "array",
                      "description": "AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
                      "items": {
                        "type": "string"
                      }
                    },
                    "dataSource": {
                      "description": "This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.",
                      "type": "object",
                      "properties": {
                        "apiGroup": {
                          "type": "string",
                          "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required."
                        },
                        "kind": {
                          "type": "string",
                          "description": "Kind is the type of resource being referenced"
                        },
                        "name": {
                          "type": "string",
                          "description": "Name is the name of resource being referenced"
                        }
                      }
                    },
                    "dataSourceRef": {
                      "description": "Specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef: * While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified. (Alpha) Using this field requires the AnyVolumeDataSource feature gate to be enabled.",
                      "type": "object",
                      "properties": {
                        "apiGroup": {
                          "type": "string",
                          "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required."
                        },
                        "kind": {
                          "type": "string",
                          "description": "Kind is the type of resource being referenced"
                        },
                        "name": {
                          "type": "string",
                          "description": "Name is the name of resource being referenced"
                        }
                      }
                    },
                    "resources": {
                      "description": "Resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources",
                      "type": "object",
                      "properties": {
                        "limits": {
                          "type": "object",
                          "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "requests": {
                          "type": "object",
                          "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                          "additionalProperties": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "selector": {
                      "description": "A label query over volumes to consider for binding.",
                      "type": "object",
                      "properties": {
                        "matchExpressions": {
                          "type": "array",
                          "description": "MatchExpressions is a list of label selector requirements. The requirements are ANDed.",
                          "items": {
                            "type": "object",
                            "description": "VolumeClaimSpecSelectorMatchExpressions properties",
                            "properties": {
                              "key": {
                                "type": "string",
                                "description": "key is the label key that the selector applies to."
                              },
                              "operator": {
                                "type": "string",
                                "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist."
                              },
                              "values": {
                                "type": "array",
                                "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                "items": {
                                  "type": "string"
                                }
                              }
                            },
                            "required": [
                              "key",
                              "operator"
                            ]
                          },
                          "x-ms-identifiers": []
                        },
                        "matchLabels": {
                          "type": "object",
                          "description": "MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                          "additionalProperties": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "storageClassName": {
                      "type": "string",
                      "description": "Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1"
                    },
                    "volumeMode": {
                      "type": "string",
                      "description": "volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec. This is a beta feature."
                    },
                    "volumeName": {
                      "type": "string",
                      "description": "VolumeName is the binding reference to the PersistentVolume backing this claim."
                    }
                  }
                },
                "maxSize": {
                  "type": "string",
                  "description": "The max size of the message buffer on disk. If a PVC template is specified using one of ephemeralVolumeClaimSpec or persistentVolumeClaimSpec, then this size is used as the request and limit sizes of that template. If neither ephemeralVolumeClaimSpec nor persistentVolumeClaimSpec are specified, then an emptyDir volume is mounted with this size as its limit. See <https://kubernetes.io/docs/concepts/storage/volumes/#emptydir> for details."
                },
                "persistentVolumeClaimSpec": {
                  "description": "Use the specified persistent volume claim template to mount a persistent volume for the message buffer.",
                  "type": "object",
                  "properties": {
                    "accessModes": {
                      "type": "array",
                      "description": "AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
                      "items": {
                        "type": "string"
                      }
                    },
                    "dataSource": {
                      "description": "This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.",
                      "type": "object",
                      "properties": {
                        "apiGroup": {
                          "type": "string",
                          "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required."
                        },
                        "kind": {
                          "type": "string",
                          "description": "Kind is the type of resource being referenced"
                        },
                        "name": {
                          "type": "string",
                          "description": "Name is the name of resource being referenced"
                        }
                      }
                    },
                    "dataSourceRef": {
                      "description": "Specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef: * While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified. (Alpha) Using this field requires the AnyVolumeDataSource feature gate to be enabled.",
                      "type": "object",
                      "properties": {
                        "apiGroup": {
                          "type": "string",
                          "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required."
                        },
                        "kind": {
                          "type": "string",
                          "description": "Kind is the type of resource being referenced"
                        },
                        "name": {
                          "type": "string",
                          "description": "Name is the name of resource being referenced"
                        }
                      }
                    },
                    "resources": {
                      "description": "Resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources",
                      "type": "object",
                      "properties": {
                        "limits": {
                          "type": "object",
                          "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "requests": {
                          "type": "object",
                          "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                          "additionalProperties": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "selector": {
                      "description": "A label query over volumes to consider for binding.",
                      "type": "object",
                      "properties": {
                        "matchExpressions": {
                          "type": "array",
                          "description": "MatchExpressions is a list of label selector requirements. The requirements are ANDed.",
                          "items": {
                            "type": "object",
                            "description": "VolumeClaimSpecSelectorMatchExpressions properties",
                            "properties": {
                              "key": {
                                "type": "string",
                                "description": "key is the label key that the selector applies to."
                              },
                              "operator": {
                                "type": "string",
                                "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist."
                              },
                              "values": {
                                "type": "array",
                                "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                                "items": {
                                  "type": "string"
                                }
                              }
                            },
                            "required": [
                              "key",
                              "operator"
                            ]
                          },
                          "x-ms-identifiers": []
                        },
                        "matchLabels": {
                          "type": "object",
                          "description": "MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                          "additionalProperties": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "storageClassName": {
                      "type": "string",
                      "description": "Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1"
                    },
                    "volumeMode": {
                      "type": "string",
                      "description": "volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec. This is a beta feature."
                    },
                    "volumeName": {
                      "type": "string",
                      "description": "VolumeName is the binding reference to the PersistentVolume backing this claim."
                    }
                  }
                }
              }
            },
            "encryptInternalTraffic": {
              "type": "boolean",
              "description": "The setting to enable or disable encryption of internal Traffic.",
              "default": true
            },
            "healthManagerImage": {
              "description": "The details of Health Manager Docker Image.",
              "type": "object",
              "properties": {
                "pullPolicy": {
                  "type": "string",
                  "description": "Image pull policy."
                },
                "pullSecrets": {
                  "type": "string",
                  "description": "Image pull secrets."
                },
                "repository": {
                  "type": "string",
                  "description": "The Docker image name."
                },
                "tag": {
                  "type": "string",
                  "description": "The Docker  image tag."
                }
              }
            },
            "healthManagerNodeTolerations": {
              "description": "The details of Node Tolerations for Health Manager Pods.",
              "type": "object",
              "properties": {
                "effect": {
                  "type": "string",
                  "description": "Toleration effect."
                },
                "key": {
                  "type": "string",
                  "description": "Toleration key."
                },
                "operator": {
                  "type": "string",
                  "description": "Toleration operator like 'Exists', 'Equal' etc."
                },
                "value": {
                  "type": "string",
                  "description": "Toleration Value."
                }
              }
            },
            "internalCerts": {
              "description": "Details of the internal CA cert that will be used to secure communication between pods.",
              "type": "object",
              "properties": {
                "duration": {
                  "type": "string",
                  "description": "Duration of CA cert.",
                  "default": "720h"
                },
                "privateKey": {
                  "description": "Cert Manager private key.",
                  "type": "object",
                  "properties": {
                    "algorithm": {
                      "type": "string",
                      "description": "algorithm for private key.",
                      "default": "ECDSA"
                    },
                    "rotationPolicy": {
                      "type": "string",
                      "description": "cert-manager rotationPolicy.",
                      "default": "Always"
                    },
                    "size": {
                      "type": "integer",
                      "format": "int32",
                      "description": "size of private key.",
                      "default": 256,
                      "minimum": 0,
                      "maximum": 65535
                    }
                  }
                },
                "renewBefore": {
                  "type": "string",
                  "description": "Renew before time of CA cert.",
                  "default": "240h"
                }
              }
            },
            "memoryProfile": {
              "type": "string",
              "description": "Memory profile of broker.",
              "default": "medium",
              "enum": [
                "tiny",
                "low",
                "medium",
                "high"
              ],
              "x-ms-enum": {
                "name": "BrokerMemoryProfile",
                "modelAsString": true,
                "values": [
                  {
                    "name": "tiny",
                    "value": "tiny",
                    "description": "Tiny memory profile."
                  },
                  {
                    "name": "low",
                    "value": "low",
                    "description": "Low memory profile."
                  },
                  {
                    "name": "medium",
                    "value": "medium",
                    "description": "Medium memory profile."
                  },
                  {
                    "name": "high",
                    "value": "high",
                    "description": "High memory profile."
                  }
                ]
              }
            },
            "mode": {
              "description": "The Running Mode of the Broker Deployment.",
              "type": "string",
              "enum": [
                "auto",
                "distributed"
              ],
              "x-ms-enum": {
                "name": "RunMode",
                "modelAsString": true,
                "values": [
                  {
                    "name": "auto",
                    "value": "auto",
                    "description": "Automatically provision Frontend and Backend pods."
                  },
                  {
                    "name": "distributed",
                    "value": "distributed",
                    "description": "Use Cardinality to set Frontend and Backend pods."
                  }
                ]
              }
            }
          }
        }
      }
    },
    "BrokerResourceUpdateProperties": {
      "type": "object",
      "description": "The updatable properties of the BrokerResource.",
      "properties": {
        "authImage": {
          "description": "The details of Authentication Docker Image.",
          "type": "object",
          "properties": {
            "pullPolicy": {
              "type": "string",
              "description": "Image pull policy."
            },
            "pullSecrets": {
              "type": "string",
              "description": "Image pull secrets."
            },
            "repository": {
              "type": "string",
              "description": "The Docker image name."
            },
            "tag": {
              "type": "string",
              "description": "The Docker  image tag."
            }
          }
        },
        "brokerImage": {
          "description": "The details of Broker Docker Image.",
          "type": "object",
          "properties": {
            "pullPolicy": {
              "type": "string",
              "description": "Image pull policy."
            },
            "pullSecrets": {
              "type": "string",
              "description": "Image pull secrets."
            },
            "repository": {
              "type": "string",
              "description": "The Docker image name."
            },
            "tag": {
              "type": "string",
              "description": "The Docker  image tag."
            }
          }
        },
        "brokerNodeTolerations": {
          "description": "The details of Node Tolerations for Broker Pods.",
          "type": "object",
          "properties": {
            "effect": {
              "type": "string",
              "description": "Toleration effect."
            },
            "key": {
              "type": "string",
              "description": "Toleration key."
            },
            "operator": {
              "type": "string",
              "description": "Toleration operator like 'Exists', 'Equal' etc."
            },
            "value": {
              "type": "string",
              "description": "Toleration Value."
            }
          }
        },
        "cardinality": {
          "description": "The cardinality details of the broker.",
          "type": "object",
          "properties": {
            "backendChain": {
              "description": "The backend broker desired properties",
              "type": "object",
              "properties": {
                "partitions": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Partitions is desired number of physical backend chains of the given distributed MQTT broker.",
                  "minimum": 0,
                  "maximum": 65535
                },
                "redundancyFactor": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Redundancy Factor is desired numbers of broker instances in one chain.",
                  "minimum": 0,
                  "maximum": 65535
                },
                "temporaryDiskTransferEnabled": {
                  "type": "boolean",
                  "description": "Defines whether disk transfer is enabled or not."
                },
                "temporaryDiskTransferHighWatermarkPercent": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Defines the percentage usage of buffer pool above which disk transfer will start.",
                  "minimum": 0,
                  "maximum": 100
                },
                "temporaryDiskTransferLowWatermarkPercent": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Defines the percentage usage of buffer pool below which disk transfer will stop.",
                  "minimum": 0,
                  "maximum": 100
                },
                "temporaryMaxBackendMemUsagePercent": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Defines the limits for memory usage percent of the backend instances of the MQTT broker.",
                  "minimum": 0,
                  "maximum": 100
                },
                "temporaryResourceLimits": {
                  "description": "Defines the limits for resources of the backend instances of the MQTT broker.",
                  "type": "object",
                  "properties": {
                    "maxInflightMessages": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Maximum number of messages a client can have inflight.",
                      "minimum": 0,
                      "maximum": 65535
                    },
                    "maxInflightPatches": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Maximum number of patch inflight per node.",
                      "minimum": 0,
                      "maximum": 65535
                    },
                    "maxInflightPatchesPerClient": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Maximum number of patch a client can have in flight.",
                      "minimum": 0,
                      "maximum": 65535
                    },
                    "maxMessageExpirySecs": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Maximum message expiry interval, in seconds.",
                      "minimum": 0,
                      "maximum": 4294967295
                    },
                    "maxQueuedMessages": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Maximum receive for external clients.",
                      "minimum": 0,
                      "maximum": 9223372036854000000
                    },
                    "maxQueuedQos0Messages": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Maximum receive QoS0 for external clients.",
                      "minimum": 0,
                      "maximum": 9223372036854000000
                    },
                    "maxSessionExpirySecs": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Maximum session expiry interval, in seconds.",
                      "minimum": 0,
                      "maximum": 4294967295
                    }
                  }
                },
                "workers": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Number of logical backend workers per pod.",
                  "default": 1,
                  "minimum": 0,
                  "maximum": 65535
                }
              }
            },
            "frontend": {
              "description": "The frontend broker desired properties",
              "type": "object",
              "properties": {
                "replicas": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Replicas is desired number of frontend replicas of the given distributed MQTT broker.",
                  "minimum": 0,
                  "maximum": 65535
                },
                "temporaryResourceLimits": {
                  "description": "Defines the limits for resources of the frontend instances of the MQTT broker.",
                  "type": "object",
                  "properties": {
                    "maxInflightMessages": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Maximum number of messages a client can have inflight.",
                      "minimum": 0,
                      "maximum": 65535
                    },
                    "maxInflightPatches": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Maximum number of patch inflight per node.",
                      "minimum": 0,
                      "maximum": 65535
                    },
                    "maxInflightPatchesPerClient": {
                      "type": "integer",
                      "format": "int32",
                      "description": "Maximum number of patch a client can have in flight.",
                      "minimum": 0,
                      "maximum": 65535
                    },
                    "maxMessageExpirySecs": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Maximum message expiry interval, in seconds.",
                      "minimum": 0,
                      "maximum": 4294967295
                    },
                    "maxQueuedMessages": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Maximum receive for external clients.",
                      "minimum": 0,
                      "maximum": 9223372036854000000
                    },
                    "maxQueuedQos0Messages": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Maximum receive QoS0 for external clients.",
                      "minimum": 0,
                      "maximum": 9223372036854000000
                    },
                    "maxSessionExpirySecs": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Maximum session expiry interval, in seconds.",
                      "minimum": 0,
                      "maximum": 4294967295
                    }
                  }
                },
                "workers": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Number of logical frontend workers per pod.",
                  "default": 2,
                  "minimum": 0,
                  "maximum": 65535
                }
              }
            }
          }
        },
        "diagnostics": {
          "description": "The diagnostic details of the broker deployment.",
          "type": "object",
          "properties": {
            "diagnosticServiceEndpoint": {
              "type": "string",
              "description": "Diagnostic Service endpoint"
            },
            "enableMetrics": {
              "type": "boolean",
              "description": "Knob to enable/disable metrics. Default = true",
              "default": true
            },
            "enableSelfCheck": {
              "type": "boolean",
              "description": "Enable self check on Broker via Probe.",
              "default": true
            },
            "enableSelfTracing": {
              "type": "boolean",
              "description": "Enable self tracing on the Broker so that every selfCheckFrequencySeconds a random message is traced even if it didn't have trace context.",
              "default": true
            },
            "enableTracing": {
              "type": "boolean",
              "description": "Knob to enable/disable entire tracing infrastructure.",
              "default": true
            },
            "logFormat": {
              "type": "string",
              "description": "Format for the logs generated.",
              "default": "text"
            },
            "logLevel": {
              "type": "string",
              "description": "Log level for the Broker.",
              "default": "info,hyper=off,kube_client=off,tower=off,conhash=off,h2=off"
            },
            "maxCellMapLifetime": {
              "type": "integer",
              "format": "int64",
              "description": "Maximum time for the CellMap to live.",
              "default": 60,
              "minimum": 0,
              "maximum": 9223372036854000000
            },
            "metricUpdateFrequencySeconds": {
              "type": "integer",
              "format": "int64",
              "description": "Metric update frequency in seconds.",
              "default": 30,
              "minimum": 0,
              "maximum": 9223372036854000000
            },
            "probeImage": {
              "type": "string",
              "description": "Probe Image to run.",
              "default": "sample.azurecr.io/diagnostics-probe:0.5.0"
            },
            "selfCheckFrequencySeconds": {
              "type": "integer",
              "format": "int64",
              "description": "Frequency for the self check to run.",
              "default": 30,
              "minimum": 0,
              "maximum": 9223372036854000000
            },
            "selfCheckTimeoutSeconds": {
              "type": "integer",
              "format": "int64",
              "description": "Time out period of the self check.",
              "default": 15,
              "minimum": 0,
              "maximum": 9223372036854000000
            },
            "selfTraceFrequencySeconds": {
              "type": "integer",
              "format": "int64",
              "description": "The frequency at which selfTrace should run.",
              "default": 30,
              "minimum": 0,
              "maximum": 9223372036854000000
            },
            "spanChannelCapacity": {
              "type": "integer",
              "format": "int64",
              "description": "The number of the spans generated by the Tracing.",
              "default": 1000,
              "minimum": 0,
              "maximum": 9223372036854000000
            }
          }
        },
        "diskBackedMessageBufferSettings": {
          "description": "The settings of the disk-backed message buffer.",
          "type": "object",
          "properties": {
            "ephemeralVolumeClaimSpec": {
              "description": "Use the specified persistent volume claim template to mount a \"generic ephemeral volume\" for the message buffer. See <https://kubernetes.io/docs/concepts/storage/ephemeral-volumes/#generic-ephemeral-volumes> for details.",
              "type": "object",
              "properties": {
                "accessModes": {
                  "type": "array",
                  "description": "AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
                  "items": {
                    "type": "string"
                  }
                },
                "dataSource": {
                  "description": "This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.",
                  "type": "object",
                  "properties": {
                    "apiGroup": {
                      "type": "string",
                      "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required."
                    },
                    "kind": {
                      "type": "string",
                      "description": "Kind is the type of resource being referenced"
                    },
                    "name": {
                      "type": "string",
                      "description": "Name is the name of resource being referenced"
                    }
                  }
                },
                "dataSourceRef": {
                  "description": "Specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef: * While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified. (Alpha) Using this field requires the AnyVolumeDataSource feature gate to be enabled.",
                  "type": "object",
                  "properties": {
                    "apiGroup": {
                      "type": "string",
                      "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required."
                    },
                    "kind": {
                      "type": "string",
                      "description": "Kind is the type of resource being referenced"
                    },
                    "name": {
                      "type": "string",
                      "description": "Name is the name of resource being referenced"
                    }
                  }
                },
                "resources": {
                  "description": "Resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources",
                  "type": "object",
                  "properties": {
                    "limits": {
                      "type": "object",
                      "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "requests": {
                      "type": "object",
                      "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                      "additionalProperties": {
                        "type": "string"
                      }
                    }
                  }
                },
                "selector": {
                  "description": "A label query over volumes to consider for binding.",
                  "type": "object",
                  "properties": {
                    "matchExpressions": {
                      "type": "array",
                      "description": "MatchExpressions is a list of label selector requirements. The requirements are ANDed.",
                      "items": {
                        "type": "object",
                        "description": "VolumeClaimSpecSelectorMatchExpressions properties",
                        "properties": {
                          "key": {
                            "type": "string",
                            "description": "key is the label key that the selector applies to."
                          },
                          "operator": {
                            "type": "string",
                            "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist."
                          },
                          "values": {
                            "type": "array",
                            "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                            "items": {
                              "type": "string"
                            }
                          }
                        },
                        "required": [
                          "key",
                          "operator"
                        ]
                      },
                      "x-ms-identifiers": []
                    },
                    "matchLabels": {
                      "type": "object",
                      "description": "MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                      "additionalProperties": {
                        "type": "string"
                      }
                    }
                  }
                },
                "storageClassName": {
                  "type": "string",
                  "description": "Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1"
                },
                "volumeMode": {
                  "type": "string",
                  "description": "volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec. This is a beta feature."
                },
                "volumeName": {
                  "type": "string",
                  "description": "VolumeName is the binding reference to the PersistentVolume backing this claim."
                }
              }
            },
            "maxSize": {
              "type": "string",
              "description": "The max size of the message buffer on disk. If a PVC template is specified using one of ephemeralVolumeClaimSpec or persistentVolumeClaimSpec, then this size is used as the request and limit sizes of that template. If neither ephemeralVolumeClaimSpec nor persistentVolumeClaimSpec are specified, then an emptyDir volume is mounted with this size as its limit. See <https://kubernetes.io/docs/concepts/storage/volumes/#emptydir> for details."
            },
            "persistentVolumeClaimSpec": {
              "description": "Use the specified persistent volume claim template to mount a persistent volume for the message buffer.",
              "type": "object",
              "properties": {
                "accessModes": {
                  "type": "array",
                  "description": "AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
                  "items": {
                    "type": "string"
                  }
                },
                "dataSource": {
                  "description": "This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.",
                  "type": "object",
                  "properties": {
                    "apiGroup": {
                      "type": "string",
                      "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required."
                    },
                    "kind": {
                      "type": "string",
                      "description": "Kind is the type of resource being referenced"
                    },
                    "name": {
                      "type": "string",
                      "description": "Name is the name of resource being referenced"
                    }
                  }
                },
                "dataSourceRef": {
                  "description": "Specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef: * While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified. (Alpha) Using this field requires the AnyVolumeDataSource feature gate to be enabled.",
                  "type": "object",
                  "properties": {
                    "apiGroup": {
                      "type": "string",
                      "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required."
                    },
                    "kind": {
                      "type": "string",
                      "description": "Kind is the type of resource being referenced"
                    },
                    "name": {
                      "type": "string",
                      "description": "Name is the name of resource being referenced"
                    }
                  }
                },
                "resources": {
                  "description": "Resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources",
                  "type": "object",
                  "properties": {
                    "limits": {
                      "type": "object",
                      "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "requests": {
                      "type": "object",
                      "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                      "additionalProperties": {
                        "type": "string"
                      }
                    }
                  }
                },
                "selector": {
                  "description": "A label query over volumes to consider for binding.",
                  "type": "object",
                  "properties": {
                    "matchExpressions": {
                      "type": "array",
                      "description": "MatchExpressions is a list of label selector requirements. The requirements are ANDed.",
                      "items": {
                        "type": "object",
                        "description": "VolumeClaimSpecSelectorMatchExpressions properties",
                        "properties": {
                          "key": {
                            "type": "string",
                            "description": "key is the label key that the selector applies to."
                          },
                          "operator": {
                            "type": "string",
                            "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist."
                          },
                          "values": {
                            "type": "array",
                            "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                            "items": {
                              "type": "string"
                            }
                          }
                        },
                        "required": [
                          "key",
                          "operator"
                        ]
                      },
                      "x-ms-identifiers": []
                    },
                    "matchLabels": {
                      "type": "object",
                      "description": "MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                      "additionalProperties": {
                        "type": "string"
                      }
                    }
                  }
                },
                "storageClassName": {
                  "type": "string",
                  "description": "Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1"
                },
                "volumeMode": {
                  "type": "string",
                  "description": "volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec. This is a beta feature."
                },
                "volumeName": {
                  "type": "string",
                  "description": "VolumeName is the binding reference to the PersistentVolume backing this claim."
                }
              }
            }
          }
        },
        "encryptInternalTraffic": {
          "type": "boolean",
          "description": "The setting to enable or disable encryption of internal Traffic.",
          "default": true
        },
        "healthManagerImage": {
          "description": "The details of Health Manager Docker Image.",
          "type": "object",
          "properties": {
            "pullPolicy": {
              "type": "string",
              "description": "Image pull policy."
            },
            "pullSecrets": {
              "type": "string",
              "description": "Image pull secrets."
            },
            "repository": {
              "type": "string",
              "description": "The Docker image name."
            },
            "tag": {
              "type": "string",
              "description": "The Docker  image tag."
            }
          }
        },
        "healthManagerNodeTolerations": {
          "description": "The details of Node Tolerations for Health Manager Pods.",
          "type": "object",
          "properties": {
            "effect": {
              "type": "string",
              "description": "Toleration effect."
            },
            "key": {
              "type": "string",
              "description": "Toleration key."
            },
            "operator": {
              "type": "string",
              "description": "Toleration operator like 'Exists', 'Equal' etc."
            },
            "value": {
              "type": "string",
              "description": "Toleration Value."
            }
          }
        },
        "internalCerts": {
          "description": "Details of the internal CA cert that will be used to secure communication between pods.",
          "type": "object",
          "properties": {
            "duration": {
              "type": "string",
              "description": "Duration of CA cert.",
              "default": "720h"
            },
            "privateKey": {
              "description": "Cert Manager private key.",
              "type": "object",
              "properties": {
                "algorithm": {
                  "type": "string",
                  "description": "algorithm for private key.",
                  "default": "ECDSA"
                },
                "rotationPolicy": {
                  "type": "string",
                  "description": "cert-manager rotationPolicy.",
                  "default": "Always"
                },
                "size": {
                  "type": "integer",
                  "format": "int32",
                  "description": "size of private key.",
                  "default": 256,
                  "minimum": 0,
                  "maximum": 65535
                }
              }
            },
            "renewBefore": {
              "type": "string",
              "description": "Renew before time of CA cert.",
              "default": "240h"
            }
          }
        },
        "memoryProfile": {
          "type": "string",
          "description": "Memory profile of broker.",
          "default": "medium",
          "enum": [
            "tiny",
            "low",
            "medium",
            "high"
          ],
          "x-ms-enum": {
            "name": "BrokerMemoryProfile",
            "modelAsString": true,
            "values": [
              {
                "name": "tiny",
                "value": "tiny",
                "description": "Tiny memory profile."
              },
              {
                "name": "low",
                "value": "low",
                "description": "Low memory profile."
              },
              {
                "name": "medium",
                "value": "medium",
                "description": "Medium memory profile."
              },
              {
                "name": "high",
                "value": "high",
                "description": "High memory profile."
              }
            ]
          }
        },
        "mode": {
          "description": "The Running Mode of the Broker Deployment.",
          "type": "string",
          "enum": [
            "auto",
            "distributed"
          ],
          "x-ms-enum": {
            "name": "RunMode",
            "modelAsString": true,
            "values": [
              {
                "name": "auto",
                "value": "auto",
                "description": "Automatically provision Frontend and Backend pods."
              },
              {
                "name": "distributed",
                "value": "distributed",
                "description": "Use Cardinality to set Frontend and Backend pods."
              }
            ]
          }
        }
      }
    },
    "Cardinality": {
      "type": "object",
      "description": "Cardinality properties",
      "properties": {
        "backendChain": {
          "description": "The backend broker desired properties",
          "type": "object",
          "properties": {
            "partitions": {
              "type": "integer",
              "format": "int32",
              "description": "Partitions is desired number of physical backend chains of the given distributed MQTT broker.",
              "minimum": 0,
              "maximum": 65535
            },
            "redundancyFactor": {
              "type": "integer",
              "format": "int32",
              "description": "Redundancy Factor is desired numbers of broker instances in one chain.",
              "minimum": 0,
              "maximum": 65535
            },
            "temporaryDiskTransferEnabled": {
              "type": "boolean",
              "description": "Defines whether disk transfer is enabled or not."
            },
            "temporaryDiskTransferHighWatermarkPercent": {
              "type": "integer",
              "format": "int32",
              "description": "Defines the percentage usage of buffer pool above which disk transfer will start.",
              "minimum": 0,
              "maximum": 100
            },
            "temporaryDiskTransferLowWatermarkPercent": {
              "type": "integer",
              "format": "int32",
              "description": "Defines the percentage usage of buffer pool below which disk transfer will stop.",
              "minimum": 0,
              "maximum": 100
            },
            "temporaryMaxBackendMemUsagePercent": {
              "type": "integer",
              "format": "int32",
              "description": "Defines the limits for memory usage percent of the backend instances of the MQTT broker.",
              "minimum": 0,
              "maximum": 100
            },
            "temporaryResourceLimits": {
              "description": "Defines the limits for resources of the backend instances of the MQTT broker.",
              "type": "object",
              "properties": {
                "maxInflightMessages": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Maximum number of messages a client can have inflight.",
                  "minimum": 0,
                  "maximum": 65535
                },
                "maxInflightPatches": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Maximum number of patch inflight per node.",
                  "minimum": 0,
                  "maximum": 65535
                },
                "maxInflightPatchesPerClient": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Maximum number of patch a client can have in flight.",
                  "minimum": 0,
                  "maximum": 65535
                },
                "maxMessageExpirySecs": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Maximum message expiry interval, in seconds.",
                  "minimum": 0,
                  "maximum": 4294967295
                },
                "maxQueuedMessages": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Maximum receive for external clients.",
                  "minimum": 0,
                  "maximum": 9223372036854000000
                },
                "maxQueuedQos0Messages": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Maximum receive QoS0 for external clients.",
                  "minimum": 0,
                  "maximum": 9223372036854000000
                },
                "maxSessionExpirySecs": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Maximum session expiry interval, in seconds.",
                  "minimum": 0,
                  "maximum": 4294967295
                }
              },
              "required": [
                "maxInflightMessages",
                "maxInflightPatches",
                "maxInflightPatchesPerClient",
                "maxQueuedMessages",
                "maxQueuedQos0Messages",
                "maxSessionExpirySecs"
              ]
            },
            "workers": {
              "type": "integer",
              "format": "int32",
              "description": "Number of logical backend workers per pod.",
              "default": 1,
              "minimum": 0,
              "maximum": 65535
            }
          },
          "required": [
            "partitions",
            "redundancyFactor"
          ]
        },
        "frontend": {
          "description": "The frontend broker desired properties",
          "type": "object",
          "properties": {
            "replicas": {
              "type": "integer",
              "format": "int32",
              "description": "Replicas is desired number of frontend replicas of the given distributed MQTT broker.",
              "minimum": 0,
              "maximum": 65535
            },
            "temporaryResourceLimits": {
              "description": "Defines the limits for resources of the frontend instances of the MQTT broker.",
              "type": "object",
              "properties": {
                "maxInflightMessages": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Maximum number of messages a client can have inflight.",
                  "minimum": 0,
                  "maximum": 65535
                },
                "maxInflightPatches": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Maximum number of patch inflight per node.",
                  "minimum": 0,
                  "maximum": 65535
                },
                "maxInflightPatchesPerClient": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Maximum number of patch a client can have in flight.",
                  "minimum": 0,
                  "maximum": 65535
                },
                "maxMessageExpirySecs": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Maximum message expiry interval, in seconds.",
                  "minimum": 0,
                  "maximum": 4294967295
                },
                "maxQueuedMessages": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Maximum receive for external clients.",
                  "minimum": 0,
                  "maximum": 9223372036854000000
                },
                "maxQueuedQos0Messages": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Maximum receive QoS0 for external clients.",
                  "minimum": 0,
                  "maximum": 9223372036854000000
                },
                "maxSessionExpirySecs": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Maximum session expiry interval, in seconds.",
                  "minimum": 0,
                  "maximum": 4294967295
                }
              },
              "required": [
                "maxInflightMessages",
                "maxInflightPatches",
                "maxInflightPatchesPerClient",
                "maxQueuedMessages",
                "maxQueuedQos0Messages",
                "maxSessionExpirySecs"
              ]
            },
            "workers": {
              "type": "integer",
              "format": "int32",
              "description": "Number of logical frontend workers per pod.",
              "default": 2,
              "minimum": 0,
              "maximum": 65535
            }
          },
          "required": [
            "replicas"
          ]
        }
      },
      "required": [
        "backendChain",
        "frontend"
      ]
    },
    "CardinalityUpdate": {
      "type": "object",
      "description": "Cardinality properties",
      "properties": {
        "backendChain": {
          "description": "The backend broker desired properties",
          "type": "object",
          "properties": {
            "partitions": {
              "type": "integer",
              "format": "int32",
              "description": "Partitions is desired number of physical backend chains of the given distributed MQTT broker.",
              "minimum": 0,
              "maximum": 65535
            },
            "redundancyFactor": {
              "type": "integer",
              "format": "int32",
              "description": "Redundancy Factor is desired numbers of broker instances in one chain.",
              "minimum": 0,
              "maximum": 65535
            },
            "temporaryDiskTransferEnabled": {
              "type": "boolean",
              "description": "Defines whether disk transfer is enabled or not."
            },
            "temporaryDiskTransferHighWatermarkPercent": {
              "type": "integer",
              "format": "int32",
              "description": "Defines the percentage usage of buffer pool above which disk transfer will start.",
              "minimum": 0,
              "maximum": 100
            },
            "temporaryDiskTransferLowWatermarkPercent": {
              "type": "integer",
              "format": "int32",
              "description": "Defines the percentage usage of buffer pool below which disk transfer will stop.",
              "minimum": 0,
              "maximum": 100
            },
            "temporaryMaxBackendMemUsagePercent": {
              "type": "integer",
              "format": "int32",
              "description": "Defines the limits for memory usage percent of the backend instances of the MQTT broker.",
              "minimum": 0,
              "maximum": 100
            },
            "temporaryResourceLimits": {
              "description": "Defines the limits for resources of the backend instances of the MQTT broker.",
              "type": "object",
              "properties": {
                "maxInflightMessages": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Maximum number of messages a client can have inflight.",
                  "minimum": 0,
                  "maximum": 65535
                },
                "maxInflightPatches": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Maximum number of patch inflight per node.",
                  "minimum": 0,
                  "maximum": 65535
                },
                "maxInflightPatchesPerClient": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Maximum number of patch a client can have in flight.",
                  "minimum": 0,
                  "maximum": 65535
                },
                "maxMessageExpirySecs": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Maximum message expiry interval, in seconds.",
                  "minimum": 0,
                  "maximum": 4294967295
                },
                "maxQueuedMessages": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Maximum receive for external clients.",
                  "minimum": 0,
                  "maximum": 9223372036854000000
                },
                "maxQueuedQos0Messages": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Maximum receive QoS0 for external clients.",
                  "minimum": 0,
                  "maximum": 9223372036854000000
                },
                "maxSessionExpirySecs": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Maximum session expiry interval, in seconds.",
                  "minimum": 0,
                  "maximum": 4294967295
                }
              }
            },
            "workers": {
              "type": "integer",
              "format": "int32",
              "description": "Number of logical backend workers per pod.",
              "default": 1,
              "minimum": 0,
              "maximum": 65535
            }
          }
        },
        "frontend": {
          "description": "The frontend broker desired properties",
          "type": "object",
          "properties": {
            "replicas": {
              "type": "integer",
              "format": "int32",
              "description": "Replicas is desired number of frontend replicas of the given distributed MQTT broker.",
              "minimum": 0,
              "maximum": 65535
            },
            "temporaryResourceLimits": {
              "description": "Defines the limits for resources of the frontend instances of the MQTT broker.",
              "type": "object",
              "properties": {
                "maxInflightMessages": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Maximum number of messages a client can have inflight.",
                  "minimum": 0,
                  "maximum": 65535
                },
                "maxInflightPatches": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Maximum number of patch inflight per node.",
                  "minimum": 0,
                  "maximum": 65535
                },
                "maxInflightPatchesPerClient": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Maximum number of patch a client can have in flight.",
                  "minimum": 0,
                  "maximum": 65535
                },
                "maxMessageExpirySecs": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Maximum message expiry interval, in seconds.",
                  "minimum": 0,
                  "maximum": 4294967295
                },
                "maxQueuedMessages": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Maximum receive for external clients.",
                  "minimum": 0,
                  "maximum": 9223372036854000000
                },
                "maxQueuedQos0Messages": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Maximum receive QoS0 for external clients.",
                  "minimum": 0,
                  "maximum": 9223372036854000000
                },
                "maxSessionExpirySecs": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Maximum session expiry interval, in seconds.",
                  "minimum": 0,
                  "maximum": 4294967295
                }
              }
            },
            "workers": {
              "type": "integer",
              "format": "int32",
              "description": "Number of logical frontend workers per pod.",
              "default": 2,
              "minimum": 0,
              "maximum": 65535
            }
          }
        }
      }
    },
    "CertManagerCertOptions": {
      "type": "object",
      "description": "Cert Manager CA Cert properties",
      "properties": {
        "duration": {
          "type": "string",
          "description": "Duration of CA cert.",
          "default": "720h"
        },
        "privateKey": {
          "description": "Cert Manager private key.",
          "type": "object",
          "properties": {
            "algorithm": {
              "type": "string",
              "description": "algorithm for private key.",
              "default": "ECDSA"
            },
            "rotationPolicy": {
              "type": "string",
              "description": "cert-manager rotationPolicy.",
              "default": "Always"
            },
            "size": {
              "type": "integer",
              "format": "int32",
              "description": "size of private key.",
              "default": 256,
              "minimum": 0,
              "maximum": 65535
            }
          },
          "required": [
            "algorithm",
            "rotationPolicy",
            "size"
          ]
        },
        "renewBefore": {
          "type": "string",
          "description": "Renew before time of CA cert.",
          "default": "240h"
        }
      },
      "required": [
        "duration",
        "privateKey",
        "renewBefore"
      ]
    },
    "CertManagerCertOptionsUpdate": {
      "type": "object",
      "description": "Cert Manager CA Cert properties",
      "properties": {
        "duration": {
          "type": "string",
          "description": "Duration of CA cert.",
          "default": "720h"
        },
        "privateKey": {
          "description": "Cert Manager private key.",
          "type": "object",
          "properties": {
            "algorithm": {
              "type": "string",
              "description": "algorithm for private key.",
              "default": "ECDSA"
            },
            "rotationPolicy": {
              "type": "string",
              "description": "cert-manager rotationPolicy.",
              "default": "Always"
            },
            "size": {
              "type": "integer",
              "format": "int32",
              "description": "size of private key.",
              "default": 256,
              "minimum": 0,
              "maximum": 65535
            }
          }
        },
        "renewBefore": {
          "type": "string",
          "description": "Renew before time of CA cert.",
          "default": "240h"
        }
      }
    },
    "CertManagerIssuerRef": {
      "type": "object",
      "description": "Cert-Manager issuerRef properties",
      "properties": {
        "group": {
          "type": "string",
          "description": "group of issuer.",
          "default": "cert-manager.io"
        },
        "kind": {
          "type": "string",
          "description": "kind of issuer (Issuer or ClusterIssuer)."
        },
        "name": {
          "type": "string",
          "description": "name of issuer."
        }
      },
      "required": [
        "group",
        "kind",
        "name"
      ]
    },
    "CertManagerIssuerRefUpdate": {
      "type": "object",
      "description": "Cert-Manager issuerRef properties",
      "properties": {
        "group": {
          "type": "string",
          "description": "group of issuer.",
          "default": "cert-manager.io"
        },
        "kind": {
          "type": "string",
          "description": "kind of issuer (Issuer or ClusterIssuer)."
        },
        "name": {
          "type": "string",
          "description": "name of issuer."
        }
      }
    },
    "CertManagerPrivateKey": {
      "type": "object",
      "description": "Cert Manager private key properties",
      "properties": {
        "algorithm": {
          "type": "string",
          "description": "algorithm for private key.",
          "default": "ECDSA"
        },
        "rotationPolicy": {
          "type": "string",
          "description": "cert-manager rotationPolicy.",
          "default": "Always"
        },
        "size": {
          "type": "integer",
          "format": "int32",
          "description": "size of private key.",
          "default": 256,
          "minimum": 0,
          "maximum": 65535
        }
      },
      "required": [
        "algorithm",
        "rotationPolicy",
        "size"
      ]
    },
    "CertManagerPrivateKeyUpdate": {
      "type": "object",
      "description": "Cert Manager private key properties",
      "properties": {
        "algorithm": {
          "type": "string",
          "description": "algorithm for private key.",
          "default": "ECDSA"
        },
        "rotationPolicy": {
          "type": "string",
          "description": "cert-manager rotationPolicy.",
          "default": "Always"
        },
        "size": {
          "type": "integer",
          "format": "int32",
          "description": "size of private key.",
          "default": 256,
          "minimum": 0,
          "maximum": 65535
        }
      }
    },
    "ContainerImage": {
      "type": "object",
      "description": "Defines the Docker image details",
      "properties": {
        "pullPolicy": {
          "type": "string",
          "description": "Image pull policy."
        },
        "pullSecrets": {
          "type": "string",
          "description": "Image pull secrets."
        },
        "repository": {
          "type": "string",
          "description": "The Docker image name."
        },
        "tag": {
          "type": "string",
          "description": "The Docker  image tag."
        }
      },
      "required": [
        "repository",
        "tag"
      ]
    },
    "ContainerImageUpdate": {
      "type": "object",
      "description": "Defines the Docker image details",
      "properties": {
        "pullPolicy": {
          "type": "string",
          "description": "Image pull policy."
        },
        "pullSecrets": {
          "type": "string",
          "description": "Image pull secrets."
        },
        "repository": {
          "type": "string",
          "description": "The Docker image name."
        },
        "tag": {
          "type": "string",
          "description": "The Docker  image tag."
        }
      }
    },
    "DataLakeConnectorMap": {
      "type": "object",
      "description": "DataLake connector map route properties",
      "properties": {
        "allowedLatencySecs": {
          "type": "integer",
          "format": "int32",
          "description": "Allowed latency for transferring data.",
          "minimum": 0,
          "maximum": 65535
        },
        "clientId": {
          "type": "string",
          "description": "Client Id to use."
        },
        "maxMessagesPerBatch": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum messages to send per Batch.",
          "minimum": 0,
          "maximum": 4294967295
        },
        "messagePayloadType": {
          "type": "string",
          "description": "Message payload type."
        },
        "mqttSourceTopic": {
          "type": "string",
          "description": "Mqtt source topic."
        },
        "qos": {
          "type": "integer",
          "format": "int32",
          "description": "Quality of Service.",
          "default": 1,
          "minimum": 0,
          "maximum": 2
        },
        "table": {
          "description": "Delta table properties to use.",
          "type": "object",
          "properties": {
            "schema": {
              "type": "array",
              "description": "Schema list supported.",
              "items": {
                "type": "object",
                "description": "Delta table schema properties",
                "properties": {
                  "format": {
                    "description": "Delta table format supported.",
                    "type": "string",
                    "enum": [
                      "boolean",
                      "int8",
                      "int16",
                      "int32",
                      "uInt8",
                      "uInt16",
                      "uInt32",
                      "uInt64",
                      "float16",
                      "float32",
                      "float64",
                      "date32",
                      "date64",
                      "binary",
                      "utf8"
                    ],
                    "x-ms-enum": {
                      "name": "DeltaTableFormatEnum",
                      "modelAsString": true,
                      "values": [
                        {
                          "name": "boolean",
                          "value": "boolean",
                          "description": "Bool format"
                        },
                        {
                          "name": "int8",
                          "value": "int8",
                          "description": "Signed integer 8"
                        },
                        {
                          "name": "int16",
                          "value": "int16",
                          "description": "Signed integer 16"
                        },
                        {
                          "name": "int32",
                          "value": "int32",
                          "description": "Signed integer 32"
                        },
                        {
                          "name": "uInt8",
                          "value": "uInt8",
                          "description": "Unsigned integer 8"
                        },
                        {
                          "name": "uInt16",
                          "value": "uInt16",
                          "description": "Unsigned integer 16"
                        },
                        {
                          "name": "uInt32",
                          "value": "uInt32",
                          "description": "Unsigned integer 32"
                        },
                        {
                          "name": "uInt64",
                          "value": "uInt64",
                          "description": "Unsigned integer 64"
                        },
                        {
                          "name": "float16",
                          "value": "float16",
                          "description": "Float 16"
                        },
                        {
                          "name": "float32",
                          "value": "float32",
                          "description": "Float 32"
                        },
                        {
                          "name": "float64",
                          "value": "float64",
                          "description": "Float 64"
                        },
                        {
                          "name": "date32",
                          "value": "date32",
                          "description": "Date 32"
                        },
                        {
                          "name": "date64",
                          "value": "date64",
                          "description": "Date 64"
                        },
                        {
                          "name": "binary",
                          "value": "binary",
                          "description": "Binary data"
                        },
                        {
                          "name": "utf8",
                          "value": "utf8",
                          "description": "UTF8 format"
                        }
                      ]
                    }
                  },
                  "mapping": {
                    "type": "string",
                    "description": "Delta table schema mapping."
                  },
                  "name": {
                    "type": "string",
                    "description": "Delta table schema name."
                  },
                  "optional": {
                    "type": "boolean",
                    "description": "Delta table schema optional."
                  }
                },
                "required": [
                  "format",
                  "mapping",
                  "name",
                  "optional"
                ]
              },
              "x-ms-identifiers": []
            },
            "tableName": {
              "type": "string",
              "description": "Delta table name."
            },
            "tablePath": {
              "type": "string",
              "description": "Delta table path."
            }
          },
          "required": [
            "schema",
            "tableName"
          ]
        }
      },
      "required": [
        "allowedLatencySecs",
        "clientId",
        "maxMessagesPerBatch",
        "messagePayloadType",
        "mqttSourceTopic",
        "table"
      ]
    },
    "DataLakeConnectorMapUpdate": {
      "type": "object",
      "description": "DataLake connector map route properties",
      "properties": {
        "allowedLatencySecs": {
          "type": "integer",
          "format": "int32",
          "description": "Allowed latency for transferring data.",
          "minimum": 0,
          "maximum": 65535
        },
        "clientId": {
          "type": "string",
          "description": "Client Id to use."
        },
        "maxMessagesPerBatch": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum messages to send per Batch.",
          "minimum": 0,
          "maximum": 4294967295
        },
        "messagePayloadType": {
          "type": "string",
          "description": "Message payload type."
        },
        "mqttSourceTopic": {
          "type": "string",
          "description": "Mqtt source topic."
        },
        "qos": {
          "type": "integer",
          "format": "int32",
          "description": "Quality of Service.",
          "default": 1,
          "minimum": 0,
          "maximum": 2
        },
        "table": {
          "description": "Delta table properties to use.",
          "type": "object",
          "properties": {
            "schema": {
              "type": "array",
              "description": "Schema list supported.",
              "items": {
                "type": "object",
                "description": "Delta table schema properties",
                "properties": {
                  "format": {
                    "description": "Delta table format supported.",
                    "type": "string",
                    "enum": [
                      "boolean",
                      "int8",
                      "int16",
                      "int32",
                      "uInt8",
                      "uInt16",
                      "uInt32",
                      "uInt64",
                      "float16",
                      "float32",
                      "float64",
                      "date32",
                      "date64",
                      "binary",
                      "utf8"
                    ],
                    "x-ms-enum": {
                      "name": "DeltaTableFormatEnum",
                      "modelAsString": true,
                      "values": [
                        {
                          "name": "boolean",
                          "value": "boolean",
                          "description": "Bool format"
                        },
                        {
                          "name": "int8",
                          "value": "int8",
                          "description": "Signed integer 8"
                        },
                        {
                          "name": "int16",
                          "value": "int16",
                          "description": "Signed integer 16"
                        },
                        {
                          "name": "int32",
                          "value": "int32",
                          "description": "Signed integer 32"
                        },
                        {
                          "name": "uInt8",
                          "value": "uInt8",
                          "description": "Unsigned integer 8"
                        },
                        {
                          "name": "uInt16",
                          "value": "uInt16",
                          "description": "Unsigned integer 16"
                        },
                        {
                          "name": "uInt32",
                          "value": "uInt32",
                          "description": "Unsigned integer 32"
                        },
                        {
                          "name": "uInt64",
                          "value": "uInt64",
                          "description": "Unsigned integer 64"
                        },
                        {
                          "name": "float16",
                          "value": "float16",
                          "description": "Float 16"
                        },
                        {
                          "name": "float32",
                          "value": "float32",
                          "description": "Float 32"
                        },
                        {
                          "name": "float64",
                          "value": "float64",
                          "description": "Float 64"
                        },
                        {
                          "name": "date32",
                          "value": "date32",
                          "description": "Date 32"
                        },
                        {
                          "name": "date64",
                          "value": "date64",
                          "description": "Date 64"
                        },
                        {
                          "name": "binary",
                          "value": "binary",
                          "description": "Binary data"
                        },
                        {
                          "name": "utf8",
                          "value": "utf8",
                          "description": "UTF8 format"
                        }
                      ]
                    }
                  },
                  "mapping": {
                    "type": "string",
                    "description": "Delta table schema mapping."
                  },
                  "name": {
                    "type": "string",
                    "description": "Delta table schema name."
                  },
                  "optional": {
                    "type": "boolean",
                    "description": "Delta table schema optional."
                  }
                },
                "required": [
                  "format",
                  "mapping",
                  "name",
                  "optional"
                ]
              },
              "x-ms-identifiers": []
            },
            "tableName": {
              "type": "string",
              "description": "Delta table name."
            },
            "tablePath": {
              "type": "string",
              "description": "Delta table path."
            }
          }
        }
      }
    },
    "DataLakeConnectorProperties": {
      "type": "object",
      "description": "MQ DataLakeConnector  Resource properties",
      "properties": {
        "databaseFormat": {
          "description": "DataLake database format to use.",
          "type": "string",
          "enum": [
            "delta",
            "parquet"
          ],
          "x-ms-enum": {
            "name": "DataLakeDatabaseFormat",
            "modelAsString": true,
            "values": [
              {
                "name": "delta",
                "value": "delta",
                "description": "Delta format."
              },
              {
                "name": "parquet",
                "value": "parquet",
                "description": "Parquet format."
              }
            ]
          }
        },
        "image": {
          "description": "The details of DataLakeConnector Docker Image.",
          "type": "object",
          "properties": {
            "pullPolicy": {
              "type": "string",
              "description": "Image pull policy."
            },
            "pullSecrets": {
              "type": "string",
              "description": "Image pull secrets."
            },
            "repository": {
              "type": "string",
              "description": "The Docker image name."
            },
            "tag": {
              "type": "string",
              "description": "The Docker  image tag."
            }
          },
          "required": [
            "repository",
            "tag"
          ]
        },
        "instances": {
          "type": "integer",
          "format": "int32",
          "description": "The number of DataLakeConnector pods to spin up.",
          "minimum": 0,
          "maximum": 65535
        },
        "localBrokerConnection": {
          "description": "The details for connecting with Local Broker.",
          "type": "object",
          "properties": {
            "authentication": {
              "description": "The authentication methods for LocalBroker connection. NOTE - Enum only one method at a time is supported.",
              "type": "object",
              "properties": {
                "kubernetes": {
                  "description": "Kubernetes local broker authentication method.",
                  "type": "object",
                  "properties": {
                    "secretPath": {
                      "type": "string",
                      "description": "Secret Path where SAT is mounted.",
                      "default": "/var/run/serviceaccount/localbroker"
                    },
                    "serviceAccountTokenName": {
                      "type": "string",
                      "description": "Token name where SAT is mounted on secret path.",
                      "default": "sat"
                    }
                  }
                }
              },
              "required": [
                "kubernetes"
              ]
            },
            "endpoint": {
              "type": "string",
              "description": "The endpoint of local broker to connect to.",
              "default": "aio-mq-dmqtt-frontend:1883"
            },
            "tls": {
              "description": "TLS details for Local broker Connection.",
              "type": "object",
              "properties": {
                "tlsEnabled": {
                  "type": "boolean",
                  "description": "Tls Enabled on Local Broker Connection.",
                  "default": false
                },
                "trustedCaCertificateConfigMap": {
                  "type": "string",
                  "description": "Trusted CA certificate config map name for Local Broker."
                }
              }
            }
          }
        },
        "logLevel": {
          "type": "string",
          "description": "The log level of the DataLake Connector instances."
        },
        "nodeTolerations": {
          "description": "The Node Tolerations for the DataLake Connector pods.",
          "type": "object",
          "properties": {
            "effect": {
              "type": "string",
              "description": "Toleration effect."
            },
            "key": {
              "type": "string",
              "description": "Toleration key."
            },
            "operator": {
              "type": "string",
              "description": "Toleration operator like 'Exists', 'Equal' etc."
            },
            "value": {
              "type": "string",
              "description": "Toleration Value."
            }
          },
          "required": [
            "effect",
            "key",
            "operator",
            "value"
          ]
        },
        "protocol": {
          "description": "The protocol to use for connecting with Brokers.",
          "type": "string",
          "enum": [
            "v3",
            "v5"
          ],
          "x-ms-enum": {
            "name": "MqttProtocol",
            "modelAsString": true,
            "values": [
              {
                "name": "v3",
                "value": "v3",
                "description": "Mqttv3"
              },
              {
                "name": "v5",
                "value": "v5",
                "description": "Mqttv5"
              }
            ]
          }
        },
        "target": {
          "description": "The protocol to use for connecting with Brokers. NOTE - Enum only storage is supported at at time.",
          "type": "object",
          "properties": {
            "datalakeStorage": {
              "description": "DataLake service storage details.",
              "type": "object",
              "properties": {
                "endpoint": {
                  "type": "string",
                  "description": "DataLake service storage endpoint to use."
                },
                "authentication": {
                  "description": "DataLake service storage authentication details. NOTE - Enum only one method is supported.",
                  "type": "object",
                  "properties": {
                    "accessTokenSecretName": {
                      "type": "string",
                      "description": "Access token secret name."
                    },
                    "systemAssignedManagedIdentity": {
                      "description": "Configuration for managed identity authentication.",
                      "type": "object",
                      "properties": {
                        "audience": {
                          "type": "string",
                          "description": "Token audience."
                        },
                        "extensionName": {
                          "type": "string",
                          "description": "Arc Extension name."
                        }
                      },
                      "required": [
                        "audience"
                      ]
                    }
                  }
                }
              },
              "required": [
                "endpoint",
                "authentication"
              ]
            },
            "localStorage": {
              "description": "Local storage details.",
              "type": "object",
              "properties": {
                "volumeName": {
                  "type": "string",
                  "description": "Volume name to write to."
                }
              },
              "required": [
                "volumeName"
              ]
            },
            "fabricOneLake": {
              "description": "Fabric one lake storage details.",
              "type": "object",
              "properties": {
                "authentication": {
                  "description": "DataLake fabric storage authentication details.",
                  "type": "object",
                  "properties": {
                    "systemAssignedManagedIdentity": {
                      "description": "Configuration for managed identity authentication.",
                      "type": "object",
                      "properties": {
                        "audience": {
                          "type": "string",
                          "description": "Token audience."
                        },
                        "extensionName": {
                          "type": "string",
                          "description": "Arc Extension name."
                        }
                      },
                      "required": [
                        "audience"
                      ]
                    }
                  },
                  "required": [
                    "systemAssignedManagedIdentity"
                  ]
                },
                "endpoint": {
                  "type": "string",
                  "description": "DataLake fabric storage endpoint to use."
                },
                "fabricPath": {
                  "description": "Fabric path type to use.",
                  "type": "string",
                  "enum": [
                    "files",
                    "tables"
                  ],
                  "x-ms-enum": {
                    "name": "FabricPathType",
                    "modelAsString": true,
                    "values": [
                      {
                        "name": "files",
                        "value": "files",
                        "description": "Fabric path type is Files."
                      },
                      {
                        "name": "tables",
                        "value": "tables",
                        "description": "Fabric path type is Tables."
                      }
                    ]
                  }
                },
                "guids": {
                  "description": "Fabric one lake Guids.",
                  "type": "object",
                  "properties": {
                    "lakehouseGuid": {
                      "type": "string",
                      "description": "Fabric one lake house guid."
                    },
                    "workspaceGuid": {
                      "type": "string",
                      "description": "Fabric one lake workspace guid."
                    }
                  },
                  "required": [
                    "lakehouseGuid",
                    "workspaceGuid"
                  ]
                },
                "names": {
                  "description": "Fabric one lake Names.",
                  "type": "object",
                  "properties": {
                    "lakehouseName": {
                      "type": "string",
                      "description": "Fabric one lake house name."
                    },
                    "workspaceName": {
                      "type": "string",
                      "description": "Fabric one lake workspace name."
                    }
                  },
                  "required": [
                    "lakehouseName",
                    "workspaceName"
                  ]
                }
              },
              "required": [
                "authentication",
                "endpoint",
                "fabricPath"
              ]
            }
          }
        },
        "provisioningState": {
          "description": "The status of the last operation.",
          "readOnly": true,
          "type": "string",
          "enum": [
            "Succeeded",
            "Failed",
            "Canceled",
            "Provisioning",
            "Updating",
            "Deleting",
            "Accepted"
          ],
          "x-ms-enum": {
            "name": "ProvisioningState",
            "modelAsString": true,
            "values": [
              {
                "name": "Succeeded",
                "value": "Succeeded",
                "description": "Resource has been created."
              },
              {
                "name": "Failed",
                "value": "Failed",
                "description": "Resource creation failed."
              },
              {
                "name": "Canceled",
                "value": "Canceled",
                "description": "Resource creation was canceled."
              },
              {
                "name": "Provisioning",
                "value": "Provisioning",
                "description": "Resource is getting provisioned."
              },
              {
                "name": "Updating",
                "value": "Updating",
                "description": "Resource is Updating."
              },
              {
                "name": "Deleting",
                "value": "Deleting",
                "description": "Resource is Deleting."
              },
              {
                "name": "Accepted",
                "value": "Accepted",
                "description": "Resource has been Accepted."
              }
            ]
          }
        }
      },
      "required": [
        "databaseFormat",
        "image",
        "protocol",
        "target"
      ]
    },
    "DataLakeConnectorResource": {
      "type": "object",
      "description": "MQ dataLakeConnector resource",
      "properties": {
        "id": {
          "type": "string",
          "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "The name of the resource",
          "readOnly": true
        },
        "type": {
          "type": "string",
          "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
          "readOnly": true
        },
        "systemData": {
          "type": "object",
          "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
          "readOnly": true,
          "properties": {
            "createdBy": {
              "type": "string",
              "description": "The identity that created the resource."
            },
            "createdByType": {
              "type": "string",
              "description": "The type of identity that created the resource.",
              "enum": [
                "User",
                "Application",
                "ManagedIdentity",
                "Key"
              ],
              "x-ms-enum": {
                "name": "createdByType",
                "modelAsString": true
              }
            },
            "createdAt": {
              "type": "string",
              "format": "date-time",
              "description": "The timestamp of resource creation (UTC)."
            },
            "lastModifiedBy": {
              "type": "string",
              "description": "The identity that last modified the resource."
            },
            "lastModifiedByType": {
              "type": "string",
              "description": "The type of identity that last modified the resource.",
              "enum": [
                "User",
                "Application",
                "ManagedIdentity",
                "Key"
              ],
              "x-ms-enum": {
                "name": "createdByType",
                "modelAsString": true
              }
            },
            "lastModifiedAt": {
              "type": "string",
              "format": "date-time",
              "description": "The timestamp of resource last modification (UTC)"
            }
          }
        },
        "tags": {
          "type": "object",
          "description": "Resource tags.",
          "additionalProperties": {
            "type": "string"
          },
          "x-ms-mutability": [
            "read",
            "create",
            "update"
          ]
        },
        "location": {
          "type": "string",
          "description": "The geo-location where the resource lives",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "properties": {
          "description": "The resource-specific properties for this resource.",
          "x-ms-client-flatten": true,
          "type": "object",
          "properties": {
            "databaseFormat": {
              "description": "DataLake database format to use.",
              "type": "string",
              "enum": [
                "delta",
                "parquet"
              ],
              "x-ms-enum": {
                "name": "DataLakeDatabaseFormat",
                "modelAsString": true,
                "values": [
                  {
                    "name": "delta",
                    "value": "delta",
                    "description": "Delta format."
                  },
                  {
                    "name": "parquet",
                    "value": "parquet",
                    "description": "Parquet format."
                  }
                ]
              }
            },
            "image": {
              "description": "The details of DataLakeConnector Docker Image.",
              "type": "object",
              "properties": {
                "pullPolicy": {
                  "type": "string",
                  "description": "Image pull policy."
                },
                "pullSecrets": {
                  "type": "string",
                  "description": "Image pull secrets."
                },
                "repository": {
                  "type": "string",
                  "description": "The Docker image name."
                },
                "tag": {
                  "type": "string",
                  "description": "The Docker  image tag."
                }
              },
              "required": [
                "repository",
                "tag"
              ]
            },
            "instances": {
              "type": "integer",
              "format": "int32",
              "description": "The number of DataLakeConnector pods to spin up.",
              "minimum": 0,
              "maximum": 65535
            },
            "localBrokerConnection": {
              "description": "The details for connecting with Local Broker.",
              "type": "object",
              "properties": {
                "authentication": {
                  "description": "The authentication methods for LocalBroker connection. NOTE - Enum only one method at a time is supported.",
                  "type": "object",
                  "properties": {
                    "kubernetes": {
                      "description": "Kubernetes local broker authentication method.",
                      "type": "object",
                      "properties": {
                        "secretPath": {
                          "type": "string",
                          "description": "Secret Path where SAT is mounted.",
                          "default": "/var/run/serviceaccount/localbroker"
                        },
                        "serviceAccountTokenName": {
                          "type": "string",
                          "description": "Token name where SAT is mounted on secret path.",
                          "default": "sat"
                        }
                      }
                    }
                  },
                  "required": [
                    "kubernetes"
                  ]
                },
                "endpoint": {
                  "type": "string",
                  "description": "The endpoint of local broker to connect to.",
                  "default": "aio-mq-dmqtt-frontend:1883"
                },
                "tls": {
                  "description": "TLS details for Local broker Connection.",
                  "type": "object",
                  "properties": {
                    "tlsEnabled": {
                      "type": "boolean",
                      "description": "Tls Enabled on Local Broker Connection.",
                      "default": false
                    },
                    "trustedCaCertificateConfigMap": {
                      "type": "string",
                      "description": "Trusted CA certificate config map name for Local Broker."
                    }
                  }
                }
              }
            },
            "logLevel": {
              "type": "string",
              "description": "The log level of the DataLake Connector instances."
            },
            "nodeTolerations": {
              "description": "The Node Tolerations for the DataLake Connector pods.",
              "type": "object",
              "properties": {
                "effect": {
                  "type": "string",
                  "description": "Toleration effect."
                },
                "key": {
                  "type": "string",
                  "description": "Toleration key."
                },
                "operator": {
                  "type": "string",
                  "description": "Toleration operator like 'Exists', 'Equal' etc."
                },
                "value": {
                  "type": "string",
                  "description": "Toleration Value."
                }
              },
              "required": [
                "effect",
                "key",
                "operator",
                "value"
              ]
            },
            "protocol": {
              "description": "The protocol to use for connecting with Brokers.",
              "type": "string",
              "enum": [
                "v3",
                "v5"
              ],
              "x-ms-enum": {
                "name": "MqttProtocol",
                "modelAsString": true,
                "values": [
                  {
                    "name": "v3",
                    "value": "v3",
                    "description": "Mqttv3"
                  },
                  {
                    "name": "v5",
                    "value": "v5",
                    "description": "Mqttv5"
                  }
                ]
              }
            },
            "target": {
              "description": "The protocol to use for connecting with Brokers. NOTE - Enum only storage is supported at at time.",
              "type": "object",
              "properties": {
                "datalakeStorage": {
                  "description": "DataLake service storage details.",
                  "type": "object",
                  "properties": {
                    "endpoint": {
                      "type": "string",
                      "description": "DataLake service storage endpoint to use."
                    },
                    "authentication": {
                      "description": "DataLake service storage authentication details. NOTE - Enum only one method is supported.",
                      "type": "object",
                      "properties": {
                        "accessTokenSecretName": {
                          "type": "string",
                          "description": "Access token secret name."
                        },
                        "systemAssignedManagedIdentity": {
                          "description": "Configuration for managed identity authentication.",
                          "type": "object",
                          "properties": {
                            "audience": {
                              "type": "string",
                              "description": "Token audience."
                            },
                            "extensionName": {
                              "type": "string",
                              "description": "Arc Extension name."
                            }
                          },
                          "required": [
                            "audience"
                          ]
                        }
                      }
                    }
                  },
                  "required": [
                    "endpoint",
                    "authentication"
                  ]
                },
                "localStorage": {
                  "description": "Local storage details.",
                  "type": "object",
                  "properties": {
                    "volumeName": {
                      "type": "string",
                      "description": "Volume name to write to."
                    }
                  },
                  "required": [
                    "volumeName"
                  ]
                },
                "fabricOneLake": {
                  "description": "Fabric one lake storage details.",
                  "type": "object",
                  "properties": {
                    "authentication": {
                      "description": "DataLake fabric storage authentication details.",
                      "type": "object",
                      "properties": {
                        "systemAssignedManagedIdentity": {
                          "description": "Configuration for managed identity authentication.",
                          "type": "object",
                          "properties": {
                            "audience": {
                              "type": "string",
                              "description": "Token audience."
                            },
                            "extensionName": {
                              "type": "string",
                              "description": "Arc Extension name."
                            }
                          },
                          "required": [
                            "audience"
                          ]
                        }
                      },
                      "required": [
                        "systemAssignedManagedIdentity"
                      ]
                    },
                    "endpoint": {
                      "type": "string",
                      "description": "DataLake fabric storage endpoint to use."
                    },
                    "fabricPath": {
                      "description": "Fabric path type to use.",
                      "type": "string",
                      "enum": [
                        "files",
                        "tables"
                      ],
                      "x-ms-enum": {
                        "name": "FabricPathType",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "files",
                            "value": "files",
                            "description": "Fabric path type is Files."
                          },
                          {
                            "name": "tables",
                            "value": "tables",
                            "description": "Fabric path type is Tables."
                          }
                        ]
                      }
                    },
                    "guids": {
                      "description": "Fabric one lake Guids.",
                      "type": "object",
                      "properties": {
                        "lakehouseGuid": {
                          "type": "string",
                          "description": "Fabric one lake house guid."
                        },
                        "workspaceGuid": {
                          "type": "string",
                          "description": "Fabric one lake workspace guid."
                        }
                      },
                      "required": [
                        "lakehouseGuid",
                        "workspaceGuid"
                      ]
                    },
                    "names": {
                      "description": "Fabric one lake Names.",
                      "type": "object",
                      "properties": {
                        "lakehouseName": {
                          "type": "string",
                          "description": "Fabric one lake house name."
                        },
                        "workspaceName": {
                          "type": "string",
                          "description": "Fabric one lake workspace name."
                        }
                      },
                      "required": [
                        "lakehouseName",
                        "workspaceName"
                      ]
                    }
                  },
                  "required": [
                    "authentication",
                    "endpoint",
                    "fabricPath"
                  ]
                }
              }
            },
            "provisioningState": {
              "description": "The status of the last operation.",
              "readOnly": true,
              "type": "string",
              "enum": [
                "Succeeded",
                "Failed",
                "Canceled",
                "Provisioning",
                "Updating",
                "Deleting",
                "Accepted"
              ],
              "x-ms-enum": {
                "name": "ProvisioningState",
                "modelAsString": true,
                "values": [
                  {
                    "name": "Succeeded",
                    "value": "Succeeded",
                    "description": "Resource has been created."
                  },
                  {
                    "name": "Failed",
                    "value": "Failed",
                    "description": "Resource creation failed."
                  },
                  {
                    "name": "Canceled",
                    "value": "Canceled",
                    "description": "Resource creation was canceled."
                  },
                  {
                    "name": "Provisioning",
                    "value": "Provisioning",
                    "description": "Resource is getting provisioned."
                  },
                  {
                    "name": "Updating",
                    "value": "Updating",
                    "description": "Resource is Updating."
                  },
                  {
                    "name": "Deleting",
                    "value": "Deleting",
                    "description": "Resource is Deleting."
                  },
                  {
                    "name": "Accepted",
                    "value": "Accepted",
                    "description": "Resource has been Accepted."
                  }
                ]
              }
            }
          },
          "required": [
            "databaseFormat",
            "image",
            "protocol",
            "target"
          ]
        },
        "extendedLocation": {
          "description": "Extended Location",
          "x-ms-mutability": [
            "read",
            "create"
          ],
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name of the extended location."
            },
            "type": {
              "description": "Type of ExtendedLocation.",
              "type": "string",
              "enum": [
                "CustomLocation"
              ],
              "x-ms-enum": {
                "name": "ExtendedLocationType",
                "modelAsString": true,
                "values": [
                  {
                    "name": "CustomLocation",
                    "value": "CustomLocation",
                    "description": "CustomLocation type"
                  }
                ]
              }
            }
          },
          "required": [
            "name",
            "type"
          ]
        }
      },
      "required": [
        "extendedLocation"
      ]
    },
    "DataLakeConnectorResourceListResult": {
      "type": "object",
      "description": "The response of a DataLakeConnectorResource list operation.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The DataLakeConnectorResource items on this page",
          "items": {
            "type": "object",
            "description": "MQ dataLakeConnector resource",
            "properties": {
              "id": {
                "type": "string",
                "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                "readOnly": true
              },
              "name": {
                "type": "string",
                "description": "The name of the resource",
                "readOnly": true
              },
              "type": {
                "type": "string",
                "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                "readOnly": true
              },
              "systemData": {
                "type": "object",
                "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                "readOnly": true,
                "properties": {
                  "createdBy": {
                    "type": "string",
                    "description": "The identity that created the resource."
                  },
                  "createdByType": {
                    "type": "string",
                    "description": "The type of identity that created the resource.",
                    "enum": [
                      "User",
                      "Application",
                      "ManagedIdentity",
                      "Key"
                    ],
                    "x-ms-enum": {
                      "name": "createdByType",
                      "modelAsString": true
                    }
                  },
                  "createdAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp of resource creation (UTC)."
                  },
                  "lastModifiedBy": {
                    "type": "string",
                    "description": "The identity that last modified the resource."
                  },
                  "lastModifiedByType": {
                    "type": "string",
                    "description": "The type of identity that last modified the resource.",
                    "enum": [
                      "User",
                      "Application",
                      "ManagedIdentity",
                      "Key"
                    ],
                    "x-ms-enum": {
                      "name": "createdByType",
                      "modelAsString": true
                    }
                  },
                  "lastModifiedAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp of resource last modification (UTC)"
                  }
                }
              },
              "tags": {
                "type": "object",
                "description": "Resource tags.",
                "additionalProperties": {
                  "type": "string"
                },
                "x-ms-mutability": [
                  "read",
                  "create",
                  "update"
                ]
              },
              "location": {
                "type": "string",
                "description": "The geo-location where the resource lives",
                "x-ms-mutability": [
                  "read",
                  "create"
                ]
              },
              "properties": {
                "description": "The resource-specific properties for this resource.",
                "x-ms-client-flatten": true,
                "type": "object",
                "properties": {
                  "databaseFormat": {
                    "description": "DataLake database format to use.",
                    "type": "string",
                    "enum": [
                      "delta",
                      "parquet"
                    ],
                    "x-ms-enum": {
                      "name": "DataLakeDatabaseFormat",
                      "modelAsString": true,
                      "values": [
                        {
                          "name": "delta",
                          "value": "delta",
                          "description": "Delta format."
                        },
                        {
                          "name": "parquet",
                          "value": "parquet",
                          "description": "Parquet format."
                        }
                      ]
                    }
                  },
                  "image": {
                    "description": "The details of DataLakeConnector Docker Image.",
                    "type": "object",
                    "properties": {
                      "pullPolicy": {
                        "type": "string",
                        "description": "Image pull policy."
                      },
                      "pullSecrets": {
                        "type": "string",
                        "description": "Image pull secrets."
                      },
                      "repository": {
                        "type": "string",
                        "description": "The Docker image name."
                      },
                      "tag": {
                        "type": "string",
                        "description": "The Docker  image tag."
                      }
                    },
                    "required": [
                      "repository",
                      "tag"
                    ]
                  },
                  "instances": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The number of DataLakeConnector pods to spin up.",
                    "minimum": 0,
                    "maximum": 65535
                  },
                  "localBrokerConnection": {
                    "description": "The details for connecting with Local Broker.",
                    "type": "object",
                    "properties": {
                      "authentication": {
                        "description": "The authentication methods for LocalBroker connection. NOTE - Enum only one method at a time is supported.",
                        "type": "object",
                        "properties": {
                          "kubernetes": {
                            "description": "Kubernetes local broker authentication method.",
                            "type": "object",
                            "properties": {
                              "secretPath": {
                                "type": "string",
                                "description": "Secret Path where SAT is mounted.",
                                "default": "/var/run/serviceaccount/localbroker"
                              },
                              "serviceAccountTokenName": {
                                "type": "string",
                                "description": "Token name where SAT is mounted on secret path.",
                                "default": "sat"
                              }
                            }
                          }
                        },
                        "required": [
                          "kubernetes"
                        ]
                      },
                      "endpoint": {
                        "type": "string",
                        "description": "The endpoint of local broker to connect to.",
                        "default": "aio-mq-dmqtt-frontend:1883"
                      },
                      "tls": {
                        "description": "TLS details for Local broker Connection.",
                        "type": "object",
                        "properties": {
                          "tlsEnabled": {
                            "type": "boolean",
                            "description": "Tls Enabled on Local Broker Connection.",
                            "default": false
                          },
                          "trustedCaCertificateConfigMap": {
                            "type": "string",
                            "description": "Trusted CA certificate config map name for Local Broker."
                          }
                        }
                      }
                    }
                  },
                  "logLevel": {
                    "type": "string",
                    "description": "The log level of the DataLake Connector instances."
                  },
                  "nodeTolerations": {
                    "description": "The Node Tolerations for the DataLake Connector pods.",
                    "type": "object",
                    "properties": {
                      "effect": {
                        "type": "string",
                        "description": "Toleration effect."
                      },
                      "key": {
                        "type": "string",
                        "description": "Toleration key."
                      },
                      "operator": {
                        "type": "string",
                        "description": "Toleration operator like 'Exists', 'Equal' etc."
                      },
                      "value": {
                        "type": "string",
                        "description": "Toleration Value."
                      }
                    },
                    "required": [
                      "effect",
                      "key",
                      "operator",
                      "value"
                    ]
                  },
                  "protocol": {
                    "description": "The protocol to use for connecting with Brokers.",
                    "type": "string",
                    "enum": [
                      "v3",
                      "v5"
                    ],
                    "x-ms-enum": {
                      "name": "MqttProtocol",
                      "modelAsString": true,
                      "values": [
                        {
                          "name": "v3",
                          "value": "v3",
                          "description": "Mqttv3"
                        },
                        {
                          "name": "v5",
                          "value": "v5",
                          "description": "Mqttv5"
                        }
                      ]
                    }
                  },
                  "target": {
                    "description": "The protocol to use for connecting with Brokers. NOTE - Enum only storage is supported at at time.",
                    "type": "object",
                    "properties": {
                      "datalakeStorage": {
                        "description": "DataLake service storage details.",
                        "type": "object",
                        "properties": {
                          "endpoint": {
                            "type": "string",
                            "description": "DataLake service storage endpoint to use."
                          },
                          "authentication": {
                            "description": "DataLake service storage authentication details. NOTE - Enum only one method is supported.",
                            "type": "object",
                            "properties": {
                              "accessTokenSecretName": {
                                "type": "string",
                                "description": "Access token secret name."
                              },
                              "systemAssignedManagedIdentity": {
                                "description": "Configuration for managed identity authentication.",
                                "type": "object",
                                "properties": {
                                  "audience": {
                                    "type": "string",
                                    "description": "Token audience."
                                  },
                                  "extensionName": {
                                    "type": "string",
                                    "description": "Arc Extension name."
                                  }
                                },
                                "required": [
                                  "audience"
                                ]
                              }
                            }
                          }
                        },
                        "required": [
                          "endpoint",
                          "authentication"
                        ]
                      },
                      "localStorage": {
                        "description": "Local storage details.",
                        "type": "object",
                        "properties": {
                          "volumeName": {
                            "type": "string",
                            "description": "Volume name to write to."
                          }
                        },
                        "required": [
                          "volumeName"
                        ]
                      },
                      "fabricOneLake": {
                        "description": "Fabric one lake storage details.",
                        "type": "object",
                        "properties": {
                          "authentication": {
                            "description": "DataLake fabric storage authentication details.",
                            "type": "object",
                            "properties": {
                              "systemAssignedManagedIdentity": {
                                "description": "Configuration for managed identity authentication.",
                                "type": "object",
                                "properties": {
                                  "audience": {
                                    "type": "string",
                                    "description": "Token audience."
                                  },
                                  "extensionName": {
                                    "type": "string",
                                    "description": "Arc Extension name."
                                  }
                                },
                                "required": [
                                  "audience"
                                ]
                              }
                            },
                            "required": [
                              "systemAssignedManagedIdentity"
                            ]
                          },
                          "endpoint": {
                            "type": "string",
                            "description": "DataLake fabric storage endpoint to use."
                          },
                          "fabricPath": {
                            "description": "Fabric path type to use.",
                            "type": "string",
                            "enum": [
                              "files",
                              "tables"
                            ],
                            "x-ms-enum": {
                              "name": "FabricPathType",
                              "modelAsString": true,
                              "values": [
                                {
                                  "name": "files",
                                  "value": "files",
                                  "description": "Fabric path type is Files."
                                },
                                {
                                  "name": "tables",
                                  "value": "tables",
                                  "description": "Fabric path type is Tables."
                                }
                              ]
                            }
                          },
                          "guids": {
                            "description": "Fabric one lake Guids.",
                            "type": "object",
                            "properties": {
                              "lakehouseGuid": {
                                "type": "string",
                                "description": "Fabric one lake house guid."
                              },
                              "workspaceGuid": {
                                "type": "string",
                                "description": "Fabric one lake workspace guid."
                              }
                            },
                            "required": [
                              "lakehouseGuid",
                              "workspaceGuid"
                            ]
                          },
                          "names": {
                            "description": "Fabric one lake Names.",
                            "type": "object",
                            "properties": {
                              "lakehouseName": {
                                "type": "string",
                                "description": "Fabric one lake house name."
                              },
                              "workspaceName": {
                                "type": "string",
                                "description": "Fabric one lake workspace name."
                              }
                            },
                            "required": [
                              "lakehouseName",
                              "workspaceName"
                            ]
                          }
                        },
                        "required": [
                          "authentication",
                          "endpoint",
                          "fabricPath"
                        ]
                      }
                    }
                  },
                  "provisioningState": {
                    "description": "The status of the last operation.",
                    "readOnly": true,
                    "type": "string",
                    "enum": [
                      "Succeeded",
                      "Failed",
                      "Canceled",
                      "Provisioning",
                      "Updating",
                      "Deleting",
                      "Accepted"
                    ],
                    "x-ms-enum": {
                      "name": "ProvisioningState",
                      "modelAsString": true,
                      "values": [
                        {
                          "name": "Succeeded",
                          "value": "Succeeded",
                          "description": "Resource has been created."
                        },
                        {
                          "name": "Failed",
                          "value": "Failed",
                          "description": "Resource creation failed."
                        },
                        {
                          "name": "Canceled",
                          "value": "Canceled",
                          "description": "Resource creation was canceled."
                        },
                        {
                          "name": "Provisioning",
                          "value": "Provisioning",
                          "description": "Resource is getting provisioned."
                        },
                        {
                          "name": "Updating",
                          "value": "Updating",
                          "description": "Resource is Updating."
                        },
                        {
                          "name": "Deleting",
                          "value": "Deleting",
                          "description": "Resource is Deleting."
                        },
                        {
                          "name": "Accepted",
                          "value": "Accepted",
                          "description": "Resource has been Accepted."
                        }
                      ]
                    }
                  }
                },
                "required": [
                  "databaseFormat",
                  "image",
                  "protocol",
                  "target"
                ]
              },
              "extendedLocation": {
                "description": "Extended Location",
                "x-ms-mutability": [
                  "read",
                  "create"
                ],
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the extended location."
                  },
                  "type": {
                    "description": "Type of ExtendedLocation.",
                    "type": "string",
                    "enum": [
                      "CustomLocation"
                    ],
                    "x-ms-enum": {
                      "name": "ExtendedLocationType",
                      "modelAsString": true,
                      "values": [
                        {
                          "name": "CustomLocation",
                          "value": "CustomLocation",
                          "description": "CustomLocation type"
                        }
                      ]
                    }
                  }
                },
                "required": [
                  "name",
                  "type"
                ]
              }
            },
            "required": [
              "extendedLocation"
            ]
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "DataLakeConnectorResourceUpdate": {
      "type": "object",
      "description": "The type used for update operations of the DataLakeConnectorResource.",
      "properties": {
        "tags": {
          "type": "object",
          "description": "Resource tags.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "properties": {
          "description": "The resource-specific properties for this resource.",
          "x-ms-client-flatten": true,
          "type": "object",
          "properties": {
            "databaseFormat": {
              "description": "DataLake database format to use.",
              "type": "string",
              "enum": [
                "delta",
                "parquet"
              ],
              "x-ms-enum": {
                "name": "DataLakeDatabaseFormat",
                "modelAsString": true,
                "values": [
                  {
                    "name": "delta",
                    "value": "delta",
                    "description": "Delta format."
                  },
                  {
                    "name": "parquet",
                    "value": "parquet",
                    "description": "Parquet format."
                  }
                ]
              }
            },
            "image": {
              "description": "The details of DataLakeConnector Docker Image.",
              "type": "object",
              "properties": {
                "pullPolicy": {
                  "type": "string",
                  "description": "Image pull policy."
                },
                "pullSecrets": {
                  "type": "string",
                  "description": "Image pull secrets."
                },
                "repository": {
                  "type": "string",
                  "description": "The Docker image name."
                },
                "tag": {
                  "type": "string",
                  "description": "The Docker  image tag."
                }
              }
            },
            "instances": {
              "type": "integer",
              "format": "int32",
              "description": "The number of DataLakeConnector pods to spin up.",
              "minimum": 0,
              "maximum": 65535
            },
            "localBrokerConnection": {
              "description": "The details for connecting with Local Broker.",
              "type": "object",
              "properties": {
                "authentication": {
                  "description": "The authentication methods for LocalBroker connection. NOTE - Enum only one method at a time is supported.",
                  "type": "object",
                  "properties": {
                    "kubernetes": {
                      "description": "Kubernetes local broker authentication method.",
                      "type": "object",
                      "properties": {
                        "secretPath": {
                          "type": "string",
                          "description": "Secret Path where SAT is mounted.",
                          "default": "/var/run/serviceaccount/localbroker"
                        },
                        "serviceAccountTokenName": {
                          "type": "string",
                          "description": "Token name where SAT is mounted on secret path.",
                          "default": "sat"
                        }
                      }
                    }
                  }
                },
                "endpoint": {
                  "type": "string",
                  "description": "The endpoint of local broker to connect to.",
                  "default": "aio-mq-dmqtt-frontend:1883"
                },
                "tls": {
                  "description": "TLS details for Local broker Connection.",
                  "type": "object",
                  "properties": {
                    "tlsEnabled": {
                      "type": "boolean",
                      "description": "Tls Enabled on Local Broker Connection.",
                      "default": false
                    },
                    "trustedCaCertificateConfigMap": {
                      "type": "string",
                      "description": "Trusted CA certificate config map name for Local Broker."
                    }
                  }
                }
              }
            },
            "logLevel": {
              "type": "string",
              "description": "The log level of the DataLake Connector instances."
            },
            "nodeTolerations": {
              "description": "The Node Tolerations for the DataLake Connector pods.",
              "type": "object",
              "properties": {
                "effect": {
                  "type": "string",
                  "description": "Toleration effect."
                },
                "key": {
                  "type": "string",
                  "description": "Toleration key."
                },
                "operator": {
                  "type": "string",
                  "description": "Toleration operator like 'Exists', 'Equal' etc."
                },
                "value": {
                  "type": "string",
                  "description": "Toleration Value."
                }
              }
            },
            "protocol": {
              "description": "The protocol to use for connecting with Brokers.",
              "type": "string",
              "enum": [
                "v3",
                "v5"
              ],
              "x-ms-enum": {
                "name": "MqttProtocol",
                "modelAsString": true,
                "values": [
                  {
                    "name": "v3",
                    "value": "v3",
                    "description": "Mqttv3"
                  },
                  {
                    "name": "v5",
                    "value": "v5",
                    "description": "Mqttv5"
                  }
                ]
              }
            },
            "target": {
              "description": "The protocol to use for connecting with Brokers. NOTE - Enum only storage is supported at at time.",
              "type": "object",
              "properties": {
                "datalakeStorage": {
                  "description": "DataLake service storage details.",
                  "type": "object",
                  "properties": {
                    "endpoint": {
                      "type": "string",
                      "description": "DataLake service storage endpoint to use."
                    },
                    "authentication": {
                      "description": "DataLake service storage authentication details. NOTE - Enum only one method is supported.",
                      "type": "object",
                      "properties": {
                        "accessTokenSecretName": {
                          "type": "string",
                          "description": "Access token secret name."
                        },
                        "systemAssignedManagedIdentity": {
                          "description": "Configuration for managed identity authentication.",
                          "type": "object",
                          "properties": {
                            "audience": {
                              "type": "string",
                              "description": "Token audience."
                            },
                            "extensionName": {
                              "type": "string",
                              "description": "Arc Extension name."
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "localStorage": {
                  "description": "Local storage details.",
                  "type": "object",
                  "properties": {
                    "volumeName": {
                      "type": "string",
                      "description": "Volume name to write to."
                    }
                  }
                },
                "fabricOneLake": {
                  "description": "Fabric one lake storage details.",
                  "type": "object",
                  "properties": {
                    "authentication": {
                      "description": "DataLake fabric storage authentication details.",
                      "type": "object",
                      "properties": {
                        "systemAssignedManagedIdentity": {
                          "description": "Configuration for managed identity authentication.",
                          "type": "object",
                          "properties": {
                            "audience": {
                              "type": "string",
                              "description": "Token audience."
                            },
                            "extensionName": {
                              "type": "string",
                              "description": "Arc Extension name."
                            }
                          }
                        }
                      }
                    },
                    "endpoint": {
                      "type": "string",
                      "description": "DataLake fabric storage endpoint to use."
                    },
                    "fabricPath": {
                      "description": "Fabric path type to use.",
                      "type": "string",
                      "enum": [
                        "files",
                        "tables"
                      ],
                      "x-ms-enum": {
                        "name": "FabricPathType",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "files",
                            "value": "files",
                            "description": "Fabric path type is Files."
                          },
                          {
                            "name": "tables",
                            "value": "tables",
                            "description": "Fabric path type is Tables."
                          }
                        ]
                      }
                    },
                    "guids": {
                      "description": "Fabric one lake Guids.",
                      "type": "object",
                      "properties": {
                        "lakehouseGuid": {
                          "type": "string",
                          "description": "Fabric one lake house guid."
                        },
                        "workspaceGuid": {
                          "type": "string",
                          "description": "Fabric one lake workspace guid."
                        }
                      }
                    },
                    "names": {
                      "description": "Fabric one lake Names.",
                      "type": "object",
                      "properties": {
                        "lakehouseName": {
                          "type": "string",
                          "description": "Fabric one lake house name."
                        },
                        "workspaceName": {
                          "type": "string",
                          "description": "Fabric one lake workspace name."
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "DataLakeConnectorResourceUpdateProperties": {
      "type": "object",
      "description": "The updatable properties of the DataLakeConnectorResource.",
      "properties": {
        "databaseFormat": {
          "description": "DataLake database format to use.",
          "type": "string",
          "enum": [
            "delta",
            "parquet"
          ],
          "x-ms-enum": {
            "name": "DataLakeDatabaseFormat",
            "modelAsString": true,
            "values": [
              {
                "name": "delta",
                "value": "delta",
                "description": "Delta format."
              },
              {
                "name": "parquet",
                "value": "parquet",
                "description": "Parquet format."
              }
            ]
          }
        },
        "image": {
          "description": "The details of DataLakeConnector Docker Image.",
          "type": "object",
          "properties": {
            "pullPolicy": {
              "type": "string",
              "description": "Image pull policy."
            },
            "pullSecrets": {
              "type": "string",
              "description": "Image pull secrets."
            },
            "repository": {
              "type": "string",
              "description": "The Docker image name."
            },
            "tag": {
              "type": "string",
              "description": "The Docker  image tag."
            }
          }
        },
        "instances": {
          "type": "integer",
          "format": "int32",
          "description": "The number of DataLakeConnector pods to spin up.",
          "minimum": 0,
          "maximum": 65535
        },
        "localBrokerConnection": {
          "description": "The details for connecting with Local Broker.",
          "type": "object",
          "properties": {
            "authentication": {
              "description": "The authentication methods for LocalBroker connection. NOTE - Enum only one method at a time is supported.",
              "type": "object",
              "properties": {
                "kubernetes": {
                  "description": "Kubernetes local broker authentication method.",
                  "type": "object",
                  "properties": {
                    "secretPath": {
                      "type": "string",
                      "description": "Secret Path where SAT is mounted.",
                      "default": "/var/run/serviceaccount/localbroker"
                    },
                    "serviceAccountTokenName": {
                      "type": "string",
                      "description": "Token name where SAT is mounted on secret path.",
                      "default": "sat"
                    }
                  }
                }
              }
            },
            "endpoint": {
              "type": "string",
              "description": "The endpoint of local broker to connect to.",
              "default": "aio-mq-dmqtt-frontend:1883"
            },
            "tls": {
              "description": "TLS details for Local broker Connection.",
              "type": "object",
              "properties": {
                "tlsEnabled": {
                  "type": "boolean",
                  "description": "Tls Enabled on Local Broker Connection.",
                  "default": false
                },
                "trustedCaCertificateConfigMap": {
                  "type": "string",
                  "description": "Trusted CA certificate config map name for Local Broker."
                }
              }
            }
          }
        },
        "logLevel": {
          "type": "string",
          "description": "The log level of the DataLake Connector instances."
        },
        "nodeTolerations": {
          "description": "The Node Tolerations for the DataLake Connector pods.",
          "type": "object",
          "properties": {
            "effect": {
              "type": "string",
              "description": "Toleration effect."
            },
            "key": {
              "type": "string",
              "description": "Toleration key."
            },
            "operator": {
              "type": "string",
              "description": "Toleration operator like 'Exists', 'Equal' etc."
            },
            "value": {
              "type": "string",
              "description": "Toleration Value."
            }
          }
        },
        "protocol": {
          "description": "The protocol to use for connecting with Brokers.",
          "type": "string",
          "enum": [
            "v3",
            "v5"
          ],
          "x-ms-enum": {
            "name": "MqttProtocol",
            "modelAsString": true,
            "values": [
              {
                "name": "v3",
                "value": "v3",
                "description": "Mqttv3"
              },
              {
                "name": "v5",
                "value": "v5",
                "description": "Mqttv5"
              }
            ]
          }
        },
        "target": {
          "description": "The protocol to use for connecting with Brokers. NOTE - Enum only storage is supported at at time.",
          "type": "object",
          "properties": {
            "datalakeStorage": {
              "description": "DataLake service storage details.",
              "type": "object",
              "properties": {
                "endpoint": {
                  "type": "string",
                  "description": "DataLake service storage endpoint to use."
                },
                "authentication": {
                  "description": "DataLake service storage authentication details. NOTE - Enum only one method is supported.",
                  "type": "object",
                  "properties": {
                    "accessTokenSecretName": {
                      "type": "string",
                      "description": "Access token secret name."
                    },
                    "systemAssignedManagedIdentity": {
                      "description": "Configuration for managed identity authentication.",
                      "type": "object",
                      "properties": {
                        "audience": {
                          "type": "string",
                          "description": "Token audience."
                        },
                        "extensionName": {
                          "type": "string",
                          "description": "Arc Extension name."
                        }
                      }
                    }
                  }
                }
              }
            },
            "localStorage": {
              "description": "Local storage details.",
              "type": "object",
              "properties": {
                "volumeName": {
                  "type": "string",
                  "description": "Volume name to write to."
                }
              }
            },
            "fabricOneLake": {
              "description": "Fabric one lake storage details.",
              "type": "object",
              "properties": {
                "authentication": {
                  "description": "DataLake fabric storage authentication details.",
                  "type": "object",
                  "properties": {
                    "systemAssignedManagedIdentity": {
                      "description": "Configuration for managed identity authentication.",
                      "type": "object",
                      "properties": {
                        "audience": {
                          "type": "string",
                          "description": "Token audience."
                        },
                        "extensionName": {
                          "type": "string",
                          "description": "Arc Extension name."
                        }
                      }
                    }
                  }
                },
                "endpoint": {
                  "type": "string",
                  "description": "DataLake fabric storage endpoint to use."
                },
                "fabricPath": {
                  "description": "Fabric path type to use.",
                  "type": "string",
                  "enum": [
                    "files",
                    "tables"
                  ],
                  "x-ms-enum": {
                    "name": "FabricPathType",
                    "modelAsString": true,
                    "values": [
                      {
                        "name": "files",
                        "value": "files",
                        "description": "Fabric path type is Files."
                      },
                      {
                        "name": "tables",
                        "value": "tables",
                        "description": "Fabric path type is Tables."
                      }
                    ]
                  }
                },
                "guids": {
                  "description": "Fabric one lake Guids.",
                  "type": "object",
                  "properties": {
                    "lakehouseGuid": {
                      "type": "string",
                      "description": "Fabric one lake house guid."
                    },
                    "workspaceGuid": {
                      "type": "string",
                      "description": "Fabric one lake workspace guid."
                    }
                  }
                },
                "names": {
                  "description": "Fabric one lake Names.",
                  "type": "object",
                  "properties": {
                    "lakehouseName": {
                      "type": "string",
                      "description": "Fabric one lake house name."
                    },
                    "workspaceName": {
                      "type": "string",
                      "description": "Fabric one lake workspace name."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "DataLakeConnectorTopicMapProperties": {
      "type": "object",
      "description": "MQ DataLakeConnector TopicMap Resource properties",
      "properties": {
        "dataLakeConnectorRef": {
          "type": "string",
          "description": "DataLake Connector CRD to use."
        },
        "mapping": {
          "description": "TopicMap for DataLake connector.",
          "type": "object",
          "properties": {
            "allowedLatencySecs": {
              "type": "integer",
              "format": "int32",
              "description": "Allowed latency for transferring data.",
              "minimum": 0,
              "maximum": 65535
            },
            "clientId": {
              "type": "string",
              "description": "Client Id to use."
            },
            "maxMessagesPerBatch": {
              "type": "integer",
              "format": "int64",
              "description": "Maximum messages to send per Batch.",
              "minimum": 0,
              "maximum": 4294967295
            },
            "messagePayloadType": {
              "type": "string",
              "description": "Message payload type."
            },
            "mqttSourceTopic": {
              "type": "string",
              "description": "Mqtt source topic."
            },
            "qos": {
              "type": "integer",
              "format": "int32",
              "description": "Quality of Service.",
              "default": 1,
              "minimum": 0,
              "maximum": 2
            },
            "table": {
              "description": "Delta table properties to use.",
              "type": "object",
              "properties": {
                "schema": {
                  "type": "array",
                  "description": "Schema list supported.",
                  "items": {
                    "type": "object",
                    "description": "Delta table schema properties",
                    "properties": {
                      "format": {
                        "description": "Delta table format supported.",
                        "type": "string",
                        "enum": [
                          "boolean",
                          "int8",
                          "int16",
                          "int32",
                          "uInt8",
                          "uInt16",
                          "uInt32",
                          "uInt64",
                          "float16",
                          "float32",
                          "float64",
                          "date32",
                          "date64",
                          "binary",
                          "utf8"
                        ],
                        "x-ms-enum": {
                          "name": "DeltaTableFormatEnum",
                          "modelAsString": true,
                          "values": [
                            {
                              "name": "boolean",
                              "value": "boolean",
                              "description": "Bool format"
                            },
                            {
                              "name": "int8",
                              "value": "int8",
                              "description": "Signed integer 8"
                            },
                            {
                              "name": "int16",
                              "value": "int16",
                              "description": "Signed integer 16"
                            },
                            {
                              "name": "int32",
                              "value": "int32",
                              "description": "Signed integer 32"
                            },
                            {
                              "name": "uInt8",
                              "value": "uInt8",
                              "description": "Unsigned integer 8"
                            },
                            {
                              "name": "uInt16",
                              "value": "uInt16",
                              "description": "Unsigned integer 16"
                            },
                            {
                              "name": "uInt32",
                              "value": "uInt32",
                              "description": "Unsigned integer 32"
                            },
                            {
                              "name": "uInt64",
                              "value": "uInt64",
                              "description": "Unsigned integer 64"
                            },
                            {
                              "name": "float16",
                              "value": "float16",
                              "description": "Float 16"
                            },
                            {
                              "name": "float32",
                              "value": "float32",
                              "description": "Float 32"
                            },
                            {
                              "name": "float64",
                              "value": "float64",
                              "description": "Float 64"
                            },
                            {
                              "name": "date32",
                              "value": "date32",
                              "description": "Date 32"
                            },
                            {
                              "name": "date64",
                              "value": "date64",
                              "description": "Date 64"
                            },
                            {
                              "name": "binary",
                              "value": "binary",
                              "description": "Binary data"
                            },
                            {
                              "name": "utf8",
                              "value": "utf8",
                              "description": "UTF8 format"
                            }
                          ]
                        }
                      },
                      "mapping": {
                        "type": "string",
                        "description": "Delta table schema mapping."
                      },
                      "name": {
                        "type": "string",
                        "description": "Delta table schema name."
                      },
                      "optional": {
                        "type": "boolean",
                        "description": "Delta table schema optional."
                      }
                    },
                    "required": [
                      "format",
                      "mapping",
                      "name",
                      "optional"
                    ]
                  },
                  "x-ms-identifiers": []
                },
                "tableName": {
                  "type": "string",
                  "description": "Delta table name."
                },
                "tablePath": {
                  "type": "string",
                  "description": "Delta table path."
                }
              },
              "required": [
                "schema",
                "tableName"
              ]
            }
          },
          "required": [
            "allowedLatencySecs",
            "clientId",
            "maxMessagesPerBatch",
            "messagePayloadType",
            "mqttSourceTopic",
            "table"
          ]
        },
        "provisioningState": {
          "description": "The status of the last operation.",
          "readOnly": true,
          "type": "string",
          "enum": [
            "Succeeded",
            "Failed",
            "Canceled",
            "Provisioning",
            "Updating",
            "Deleting",
            "Accepted"
          ],
          "x-ms-enum": {
            "name": "ProvisioningState",
            "modelAsString": true,
            "values": [
              {
                "name": "Succeeded",
                "value": "Succeeded",
                "description": "Resource has been created."
              },
              {
                "name": "Failed",
                "value": "Failed",
                "description": "Resource creation failed."
              },
              {
                "name": "Canceled",
                "value": "Canceled",
                "description": "Resource creation was canceled."
              },
              {
                "name": "Provisioning",
                "value": "Provisioning",
                "description": "Resource is getting provisioned."
              },
              {
                "name": "Updating",
                "value": "Updating",
                "description": "Resource is Updating."
              },
              {
                "name": "Deleting",
                "value": "Deleting",
                "description": "Resource is Deleting."
              },
              {
                "name": "Accepted",
                "value": "Accepted",
                "description": "Resource has been Accepted."
              }
            ]
          }
        }
      },
      "required": [
        "dataLakeConnectorRef",
        "mapping"
      ]
    },
    "DataLakeDatabaseFormat": {
      "type": "string",
      "description": "DataLake possible database formats",
      "enum": [
        "delta",
        "parquet"
      ],
      "x-ms-enum": {
        "name": "DataLakeDatabaseFormat",
        "modelAsString": true,
        "values": [
          {
            "name": "delta",
            "value": "delta",
            "description": "Delta format."
          },
          {
            "name": "parquet",
            "value": "parquet",
            "description": "Parquet format."
          }
        ]
      }
    },
    "DataLakeFabricStorage": {
      "type": "object",
      "description": "DataLake Fabric Storage details.",
      "properties": {
        "authentication": {
          "description": "DataLake fabric storage authentication details.",
          "type": "object",
          "properties": {
            "systemAssignedManagedIdentity": {
              "description": "Configuration for managed identity authentication.",
              "type": "object",
              "properties": {
                "audience": {
                  "type": "string",
                  "description": "Token audience."
                },
                "extensionName": {
                  "type": "string",
                  "description": "Arc Extension name."
                }
              },
              "required": [
                "audience"
              ]
            }
          },
          "required": [
            "systemAssignedManagedIdentity"
          ]
        },
        "endpoint": {
          "type": "string",
          "description": "DataLake fabric storage endpoint to use."
        },
        "fabricPath": {
          "description": "Fabric path type to use.",
          "type": "string",
          "enum": [
            "files",
            "tables"
          ],
          "x-ms-enum": {
            "name": "FabricPathType",
            "modelAsString": true,
            "values": [
              {
                "name": "files",
                "value": "files",
                "description": "Fabric path type is Files."
              },
              {
                "name": "tables",
                "value": "tables",
                "description": "Fabric path type is Tables."
              }
            ]
          }
        },
        "guids": {
          "description": "Fabric one lake Guids.",
          "type": "object",
          "properties": {
            "lakehouseGuid": {
              "type": "string",
              "description": "Fabric one lake house guid."
            },
            "workspaceGuid": {
              "type": "string",
              "description": "Fabric one lake workspace guid."
            }
          },
          "required": [
            "lakehouseGuid",
            "workspaceGuid"
          ]
        },
        "names": {
          "description": "Fabric one lake Names.",
          "type": "object",
          "properties": {
            "lakehouseName": {
              "type": "string",
              "description": "Fabric one lake house name."
            },
            "workspaceName": {
              "type": "string",
              "description": "Fabric one lake workspace name."
            }
          },
          "required": [
            "lakehouseName",
            "workspaceName"
          ]
        }
      },
      "required": [
        "authentication",
        "endpoint",
        "fabricPath"
      ]
    },
    "DataLakeFabricStorageAuthentication": {
      "type": "object",
      "description": "DataLake Fabric Storage authentication details.",
      "properties": {
        "systemAssignedManagedIdentity": {
          "description": "Configuration for managed identity authentication.",
          "type": "object",
          "properties": {
            "audience": {
              "type": "string",
              "description": "Token audience."
            },
            "extensionName": {
              "type": "string",
              "description": "Arc Extension name."
            }
          },
          "required": [
            "audience"
          ]
        }
      },
      "required": [
        "systemAssignedManagedIdentity"
      ]
    },
    "DataLakeFabricStorageAuthenticationUpdate": {
      "type": "object",
      "description": "DataLake Fabric Storage authentication details.",
      "properties": {
        "systemAssignedManagedIdentity": {
          "description": "Configuration for managed identity authentication.",
          "type": "object",
          "properties": {
            "audience": {
              "type": "string",
              "description": "Token audience."
            },
            "extensionName": {
              "type": "string",
              "description": "Arc Extension name."
            }
          }
        }
      }
    },
    "DataLakeFabricStorageUpdate": {
      "type": "object",
      "description": "DataLake Fabric Storage details.",
      "properties": {
        "authentication": {
          "description": "DataLake fabric storage authentication details.",
          "type": "object",
          "properties": {
            "systemAssignedManagedIdentity": {
              "description": "Configuration for managed identity authentication.",
              "type": "object",
              "properties": {
                "audience": {
                  "type": "string",
                  "description": "Token audience."
                },
                "extensionName": {
                  "type": "string",
                  "description": "Arc Extension name."
                }
              }
            }
          }
        },
        "endpoint": {
          "type": "string",
          "description": "DataLake fabric storage endpoint to use."
        },
        "fabricPath": {
          "description": "Fabric path type to use.",
          "type": "string",
          "enum": [
            "files",
            "tables"
          ],
          "x-ms-enum": {
            "name": "FabricPathType",
            "modelAsString": true,
            "values": [
              {
                "name": "files",
                "value": "files",
                "description": "Fabric path type is Files."
              },
              {
                "name": "tables",
                "value": "tables",
                "description": "Fabric path type is Tables."
              }
            ]
          }
        },
        "guids": {
          "description": "Fabric one lake Guids.",
          "type": "object",
          "properties": {
            "lakehouseGuid": {
              "type": "string",
              "description": "Fabric one lake house guid."
            },
            "workspaceGuid": {
              "type": "string",
              "description": "Fabric one lake workspace guid."
            }
          }
        },
        "names": {
          "description": "Fabric one lake Names.",
          "type": "object",
          "properties": {
            "lakehouseName": {
              "type": "string",
              "description": "Fabric one lake house name."
            },
            "workspaceName": {
              "type": "string",
              "description": "Fabric one lake workspace name."
            }
          }
        }
      }
    },
    "DataLakeLocalStorage": {
      "type": "object",
      "description": "DataLake Local Storage details.",
      "properties": {
        "volumeName": {
          "type": "string",
          "description": "Volume name to write to."
        }
      },
      "required": [
        "volumeName"
      ]
    },
    "DataLakeLocalStorageUpdate": {
      "type": "object",
      "description": "DataLake Local Storage details.",
      "properties": {
        "volumeName": {
          "type": "string",
          "description": "Volume name to write to."
        }
      }
    },
    "DataLakeServiceStorage": {
      "type": "object",
      "description": "DataLake Service Storage details.",
      "properties": {
        "endpoint": {
          "type": "string",
          "description": "DataLake service storage endpoint to use."
        },
        "authentication": {
          "description": "DataLake service storage authentication details. NOTE - Enum only one method is supported.",
          "type": "object",
          "properties": {
            "accessTokenSecretName": {
              "type": "string",
              "description": "Access token secret name."
            },
            "systemAssignedManagedIdentity": {
              "description": "Configuration for managed identity authentication.",
              "type": "object",
              "properties": {
                "audience": {
                  "type": "string",
                  "description": "Token audience."
                },
                "extensionName": {
                  "type": "string",
                  "description": "Arc Extension name."
                }
              },
              "required": [
                "audience"
              ]
            }
          }
        }
      },
      "required": [
        "endpoint",
        "authentication"
      ]
    },
    "DataLakeServiceStorageAuthentication": {
      "type": "object",
      "description": "DataLake Service Storage authentication details. NOTE - Enum only one method is supported.",
      "properties": {
        "accessTokenSecretName": {
          "type": "string",
          "description": "Access token secret name."
        },
        "systemAssignedManagedIdentity": {
          "description": "Configuration for managed identity authentication.",
          "type": "object",
          "properties": {
            "audience": {
              "type": "string",
              "description": "Token audience."
            },
            "extensionName": {
              "type": "string",
              "description": "Arc Extension name."
            }
          },
          "required": [
            "audience"
          ]
        }
      }
    },
    "DataLakeServiceStorageAuthenticationUpdate": {
      "type": "object",
      "description": "DataLake Service Storage authentication details. NOTE - Enum only one method is supported.",
      "properties": {
        "accessTokenSecretName": {
          "type": "string",
          "description": "Access token secret name."
        },
        "systemAssignedManagedIdentity": {
          "description": "Configuration for managed identity authentication.",
          "type": "object",
          "properties": {
            "audience": {
              "type": "string",
              "description": "Token audience."
            },
            "extensionName": {
              "type": "string",
              "description": "Arc Extension name."
            }
          }
        }
      }
    },
    "DataLakeServiceStorageUpdate": {
      "type": "object",
      "description": "DataLake Service Storage details.",
      "properties": {
        "endpoint": {
          "type": "string",
          "description": "DataLake service storage endpoint to use."
        },
        "authentication": {
          "description": "DataLake service storage authentication details. NOTE - Enum only one method is supported.",
          "type": "object",
          "properties": {
            "accessTokenSecretName": {
              "type": "string",
              "description": "Access token secret name."
            },
            "systemAssignedManagedIdentity": {
              "description": "Configuration for managed identity authentication.",
              "type": "object",
              "properties": {
                "audience": {
                  "type": "string",
                  "description": "Token audience."
                },
                "extensionName": {
                  "type": "string",
                  "description": "Arc Extension name."
                }
              }
            }
          }
        }
      }
    },
    "DataLakeTargetStorage": {
      "type": "object",
      "description": "Target storage for the DataLake. NOTE - Enum only storage is supported at a time.",
      "properties": {
        "datalakeStorage": {
          "description": "DataLake service storage details.",
          "type": "object",
          "properties": {
            "endpoint": {
              "type": "string",
              "description": "DataLake service storage endpoint to use."
            },
            "authentication": {
              "description": "DataLake service storage authentication details. NOTE - Enum only one method is supported.",
              "type": "object",
              "properties": {
                "accessTokenSecretName": {
                  "type": "string",
                  "description": "Access token secret name."
                },
                "systemAssignedManagedIdentity": {
                  "description": "Configuration for managed identity authentication.",
                  "type": "object",
                  "properties": {
                    "audience": {
                      "type": "string",
                      "description": "Token audience."
                    },
                    "extensionName": {
                      "type": "string",
                      "description": "Arc Extension name."
                    }
                  },
                  "required": [
                    "audience"
                  ]
                }
              }
            }
          },
          "required": [
            "endpoint",
            "authentication"
          ]
        },
        "localStorage": {
          "description": "Local storage details.",
          "type": "object",
          "properties": {
            "volumeName": {
              "type": "string",
              "description": "Volume name to write to."
            }
          },
          "required": [
            "volumeName"
          ]
        },
        "fabricOneLake": {
          "description": "Fabric one lake storage details.",
          "type": "object",
          "properties": {
            "authentication": {
              "description": "DataLake fabric storage authentication details.",
              "type": "object",
              "properties": {
                "systemAssignedManagedIdentity": {
                  "description": "Configuration for managed identity authentication.",
                  "type": "object",
                  "properties": {
                    "audience": {
                      "type": "string",
                      "description": "Token audience."
                    },
                    "extensionName": {
                      "type": "string",
                      "description": "Arc Extension name."
                    }
                  },
                  "required": [
                    "audience"
                  ]
                }
              },
              "required": [
                "systemAssignedManagedIdentity"
              ]
            },
            "endpoint": {
              "type": "string",
              "description": "DataLake fabric storage endpoint to use."
            },
            "fabricPath": {
              "description": "Fabric path type to use.",
              "type": "string",
              "enum": [
                "files",
                "tables"
              ],
              "x-ms-enum": {
                "name": "FabricPathType",
                "modelAsString": true,
                "values": [
                  {
                    "name": "files",
                    "value": "files",
                    "description": "Fabric path type is Files."
                  },
                  {
                    "name": "tables",
                    "value": "tables",
                    "description": "Fabric path type is Tables."
                  }
                ]
              }
            },
            "guids": {
              "description": "Fabric one lake Guids.",
              "type": "object",
              "properties": {
                "lakehouseGuid": {
                  "type": "string",
                  "description": "Fabric one lake house guid."
                },
                "workspaceGuid": {
                  "type": "string",
                  "description": "Fabric one lake workspace guid."
                }
              },
              "required": [
                "lakehouseGuid",
                "workspaceGuid"
              ]
            },
            "names": {
              "description": "Fabric one lake Names.",
              "type": "object",
              "properties": {
                "lakehouseName": {
                  "type": "string",
                  "description": "Fabric one lake house name."
                },
                "workspaceName": {
                  "type": "string",
                  "description": "Fabric one lake workspace name."
                }
              },
              "required": [
                "lakehouseName",
                "workspaceName"
              ]
            }
          },
          "required": [
            "authentication",
            "endpoint",
            "fabricPath"
          ]
        }
      }
    },
    "DataLakeTargetStorageUpdate": {
      "type": "object",
      "description": "Target storage for the DataLake. NOTE - Enum only storage is supported at a time.",
      "properties": {
        "datalakeStorage": {
          "description": "DataLake service storage details.",
          "type": "object",
          "properties": {
            "endpoint": {
              "type": "string",
              "description": "DataLake service storage endpoint to use."
            },
            "authentication": {
              "description": "DataLake service storage authentication details. NOTE - Enum only one method is supported.",
              "type": "object",
              "properties": {
                "accessTokenSecretName": {
                  "type": "string",
                  "description": "Access token secret name."
                },
                "systemAssignedManagedIdentity": {
                  "description": "Configuration for managed identity authentication.",
                  "type": "object",
                  "properties": {
                    "audience": {
                      "type": "string",
                      "description": "Token audience."
                    },
                    "extensionName": {
                      "type": "string",
                      "description": "Arc Extension name."
                    }
                  }
                }
              }
            }
          }
        },
        "localStorage": {
          "description": "Local storage details.",
          "type": "object",
          "properties": {
            "volumeName": {
              "type": "string",
              "description": "Volume name to write to."
            }
          }
        },
        "fabricOneLake": {
          "description": "Fabric one lake storage details.",
          "type": "object",
          "properties": {
            "authentication": {
              "description": "DataLake fabric storage authentication details.",
              "type": "object",
              "properties": {
                "systemAssignedManagedIdentity": {
                  "description": "Configuration for managed identity authentication.",
                  "type": "object",
                  "properties": {
                    "audience": {
                      "type": "string",
                      "description": "Token audience."
                    },
                    "extensionName": {
                      "type": "string",
                      "description": "Arc Extension name."
                    }
                  }
                }
              }
            },
            "endpoint": {
              "type": "string",
              "description": "DataLake fabric storage endpoint to use."
            },
            "fabricPath": {
              "description": "Fabric path type to use.",
              "type": "string",
              "enum": [
                "files",
                "tables"
              ],
              "x-ms-enum": {
                "name": "FabricPathType",
                "modelAsString": true,
                "values": [
                  {
                    "name": "files",
                    "value": "files",
                    "description": "Fabric path type is Files."
                  },
                  {
                    "name": "tables",
                    "value": "tables",
                    "description": "Fabric path type is Tables."
                  }
                ]
              }
            },
            "guids": {
              "description": "Fabric one lake Guids.",
              "type": "object",
              "properties": {
                "lakehouseGuid": {
                  "type": "string",
                  "description": "Fabric one lake house guid."
                },
                "workspaceGuid": {
                  "type": "string",
                  "description": "Fabric one lake workspace guid."
                }
              }
            },
            "names": {
              "description": "Fabric one lake Names.",
              "type": "object",
              "properties": {
                "lakehouseName": {
                  "type": "string",
                  "description": "Fabric one lake house name."
                },
                "workspaceName": {
                  "type": "string",
                  "description": "Fabric one lake workspace name."
                }
              }
            }
          }
        }
      }
    },
    "DataLakeTopicMapResource": {
      "type": "object",
      "description": "MQ dataLakeConnector/topicMap resource",
      "properties": {
        "id": {
          "type": "string",
          "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "The name of the resource",
          "readOnly": true
        },
        "type": {
          "type": "string",
          "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
          "readOnly": true
        },
        "systemData": {
          "type": "object",
          "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
          "readOnly": true,
          "properties": {
            "createdBy": {
              "type": "string",
              "description": "The identity that created the resource."
            },
            "createdByType": {
              "type": "string",
              "description": "The type of identity that created the resource.",
              "enum": [
                "User",
                "Application",
                "ManagedIdentity",
                "Key"
              ],
              "x-ms-enum": {
                "name": "createdByType",
                "modelAsString": true
              }
            },
            "createdAt": {
              "type": "string",
              "format": "date-time",
              "description": "The timestamp of resource creation (UTC)."
            },
            "lastModifiedBy": {
              "type": "string",
              "description": "The identity that last modified the resource."
            },
            "lastModifiedByType": {
              "type": "string",
              "description": "The type of identity that last modified the resource.",
              "enum": [
                "User",
                "Application",
                "ManagedIdentity",
                "Key"
              ],
              "x-ms-enum": {
                "name": "createdByType",
                "modelAsString": true
              }
            },
            "lastModifiedAt": {
              "type": "string",
              "format": "date-time",
              "description": "The timestamp of resource last modification (UTC)"
            }
          }
        },
        "tags": {
          "type": "object",
          "description": "Resource tags.",
          "additionalProperties": {
            "type": "string"
          },
          "x-ms-mutability": [
            "read",
            "create",
            "update"
          ]
        },
        "location": {
          "type": "string",
          "description": "The geo-location where the resource lives",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "properties": {
          "description": "The resource-specific properties for this resource.",
          "x-ms-client-flatten": true,
          "type": "object",
          "properties": {
            "dataLakeConnectorRef": {
              "type": "string",
              "description": "DataLake Connector CRD to use."
            },
            "mapping": {
              "description": "TopicMap for DataLake connector.",
              "type": "object",
              "properties": {
                "allowedLatencySecs": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Allowed latency for transferring data.",
                  "minimum": 0,
                  "maximum": 65535
                },
                "clientId": {
                  "type": "string",
                  "description": "Client Id to use."
                },
                "maxMessagesPerBatch": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Maximum messages to send per Batch.",
                  "minimum": 0,
                  "maximum": 4294967295
                },
                "messagePayloadType": {
                  "type": "string",
                  "description": "Message payload type."
                },
                "mqttSourceTopic": {
                  "type": "string",
                  "description": "Mqtt source topic."
                },
                "qos": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Quality of Service.",
                  "default": 1,
                  "minimum": 0,
                  "maximum": 2
                },
                "table": {
                  "description": "Delta table properties to use.",
                  "type": "object",
                  "properties": {
                    "schema": {
                      "type": "array",
                      "description": "Schema list supported.",
                      "items": {
                        "type": "object",
                        "description": "Delta table schema properties",
                        "properties": {
                          "format": {
                            "description": "Delta table format supported.",
                            "type": "string",
                            "enum": [
                              "boolean",
                              "int8",
                              "int16",
                              "int32",
                              "uInt8",
                              "uInt16",
                              "uInt32",
                              "uInt64",
                              "float16",
                              "float32",
                              "float64",
                              "date32",
                              "date64",
                              "binary",
                              "utf8"
                            ],
                            "x-ms-enum": {
                              "name": "DeltaTableFormatEnum",
                              "modelAsString": true,
                              "values": [
                                {
                                  "name": "boolean",
                                  "value": "boolean",
                                  "description": "Bool format"
                                },
                                {
                                  "name": "int8",
                                  "value": "int8",
                                  "description": "Signed integer 8"
                                },
                                {
                                  "name": "int16",
                                  "value": "int16",
                                  "description": "Signed integer 16"
                                },
                                {
                                  "name": "int32",
                                  "value": "int32",
                                  "description": "Signed integer 32"
                                },
                                {
                                  "name": "uInt8",
                                  "value": "uInt8",
                                  "description": "Unsigned integer 8"
                                },
                                {
                                  "name": "uInt16",
                                  "value": "uInt16",
                                  "description": "Unsigned integer 16"
                                },
                                {
                                  "name": "uInt32",
                                  "value": "uInt32",
                                  "description": "Unsigned integer 32"
                                },
                                {
                                  "name": "uInt64",
                                  "value": "uInt64",
                                  "description": "Unsigned integer 64"
                                },
                                {
                                  "name": "float16",
                                  "value": "float16",
                                  "description": "Float 16"
                                },
                                {
                                  "name": "float32",
                                  "value": "float32",
                                  "description": "Float 32"
                                },
                                {
                                  "name": "float64",
                                  "value": "float64",
                                  "description": "Float 64"
                                },
                                {
                                  "name": "date32",
                                  "value": "date32",
                                  "description": "Date 32"
                                },
                                {
                                  "name": "date64",
                                  "value": "date64",
                                  "description": "Date 64"
                                },
                                {
                                  "name": "binary",
                                  "value": "binary",
                                  "description": "Binary data"
                                },
                                {
                                  "name": "utf8",
                                  "value": "utf8",
                                  "description": "UTF8 format"
                                }
                              ]
                            }
                          },
                          "mapping": {
                            "type": "string",
                            "description": "Delta table schema mapping."
                          },
                          "name": {
                            "type": "string",
                            "description": "Delta table schema name."
                          },
                          "optional": {
                            "type": "boolean",
                            "description": "Delta table schema optional."
                          }
                        },
                        "required": [
                          "format",
                          "mapping",
                          "name",
                          "optional"
                        ]
                      },
                      "x-ms-identifiers": []
                    },
                    "tableName": {
                      "type": "string",
                      "description": "Delta table name."
                    },
                    "tablePath": {
                      "type": "string",
                      "description": "Delta table path."
                    }
                  },
                  "required": [
                    "schema",
                    "tableName"
                  ]
                }
              },
              "required": [
                "allowedLatencySecs",
                "clientId",
                "maxMessagesPerBatch",
                "messagePayloadType",
                "mqttSourceTopic",
                "table"
              ]
            },
            "provisioningState": {
              "description": "The status of the last operation.",
              "readOnly": true,
              "type": "string",
              "enum": [
                "Succeeded",
                "Failed",
                "Canceled",
                "Provisioning",
                "Updating",
                "Deleting",
                "Accepted"
              ],
              "x-ms-enum": {
                "name": "ProvisioningState",
                "modelAsString": true,
                "values": [
                  {
                    "name": "Succeeded",
                    "value": "Succeeded",
                    "description": "Resource has been created."
                  },
                  {
                    "name": "Failed",
                    "value": "Failed",
                    "description": "Resource creation failed."
                  },
                  {
                    "name": "Canceled",
                    "value": "Canceled",
                    "description": "Resource creation was canceled."
                  },
                  {
                    "name": "Provisioning",
                    "value": "Provisioning",
                    "description": "Resource is getting provisioned."
                  },
                  {
                    "name": "Updating",
                    "value": "Updating",
                    "description": "Resource is Updating."
                  },
                  {
                    "name": "Deleting",
                    "value": "Deleting",
                    "description": "Resource is Deleting."
                  },
                  {
                    "name": "Accepted",
                    "value": "Accepted",
                    "description": "Resource has been Accepted."
                  }
                ]
              }
            }
          },
          "required": [
            "dataLakeConnectorRef",
            "mapping"
          ]
        },
        "extendedLocation": {
          "description": "Extended Location",
          "x-ms-mutability": [
            "read",
            "create"
          ],
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name of the extended location."
            },
            "type": {
              "description": "Type of ExtendedLocation.",
              "type": "string",
              "enum": [
                "CustomLocation"
              ],
              "x-ms-enum": {
                "name": "ExtendedLocationType",
                "modelAsString": true,
                "values": [
                  {
                    "name": "CustomLocation",
                    "value": "CustomLocation",
                    "description": "CustomLocation type"
                  }
                ]
              }
            }
          },
          "required": [
            "name",
            "type"
          ]
        }
      },
      "required": [
        "extendedLocation"
      ]
    },
    "DataLakeTopicMapResourceListResult": {
      "type": "object",
      "description": "The response of a DataLakeTopicMapResource list operation.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The DataLakeTopicMapResource items on this page",
          "items": {
            "type": "object",
            "description": "MQ dataLakeConnector/topicMap resource",
            "properties": {
              "id": {
                "type": "string",
                "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                "readOnly": true
              },
              "name": {
                "type": "string",
                "description": "The name of the resource",
                "readOnly": true
              },
              "type": {
                "type": "string",
                "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                "readOnly": true
              },
              "systemData": {
                "type": "object",
                "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                "readOnly": true,
                "properties": {
                  "createdBy": {
                    "type": "string",
                    "description": "The identity that created the resource."
                  },
                  "createdByType": {
                    "type": "string",
                    "description": "The type of identity that created the resource.",
                    "enum": [
                      "User",
                      "Application",
                      "ManagedIdentity",
                      "Key"
                    ],
                    "x-ms-enum": {
                      "name": "createdByType",
                      "modelAsString": true
                    }
                  },
                  "createdAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp of resource creation (UTC)."
                  },
                  "lastModifiedBy": {
                    "type": "string",
                    "description": "The identity that last modified the resource."
                  },
                  "lastModifiedByType": {
                    "type": "string",
                    "description": "The type of identity that last modified the resource.",
                    "enum": [
                      "User",
                      "Application",
                      "ManagedIdentity",
                      "Key"
                    ],
                    "x-ms-enum": {
                      "name": "createdByType",
                      "modelAsString": true
                    }
                  },
                  "lastModifiedAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp of resource last modification (UTC)"
                  }
                }
              },
              "tags": {
                "type": "object",
                "description": "Resource tags.",
                "additionalProperties": {
                  "type": "string"
                },
                "x-ms-mutability": [
                  "read",
                  "create",
                  "update"
                ]
              },
              "location": {
                "type": "string",
                "description": "The geo-location where the resource lives",
                "x-ms-mutability": [
                  "read",
                  "create"
                ]
              },
              "properties": {
                "description": "The resource-specific properties for this resource.",
                "x-ms-client-flatten": true,
                "type": "object",
                "properties": {
                  "dataLakeConnectorRef": {
                    "type": "string",
                    "description": "DataLake Connector CRD to use."
                  },
                  "mapping": {
                    "description": "TopicMap for DataLake connector.",
                    "type": "object",
                    "properties": {
                      "allowedLatencySecs": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Allowed latency for transferring data.",
                        "minimum": 0,
                        "maximum": 65535
                      },
                      "clientId": {
                        "type": "string",
                        "description": "Client Id to use."
                      },
                      "maxMessagesPerBatch": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Maximum messages to send per Batch.",
                        "minimum": 0,
                        "maximum": 4294967295
                      },
                      "messagePayloadType": {
                        "type": "string",
                        "description": "Message payload type."
                      },
                      "mqttSourceTopic": {
                        "type": "string",
                        "description": "Mqtt source topic."
                      },
                      "qos": {
                        "type": "integer",
                        "format": "int32",
                        "description": "Quality of Service.",
                        "default": 1,
                        "minimum": 0,
                        "maximum": 2
                      },
                      "table": {
                        "description": "Delta table properties to use.",
                        "type": "object",
                        "properties": {
                          "schema": {
                            "type": "array",
                            "description": "Schema list supported.",
                            "items": {
                              "type": "object",
                              "description": "Delta table schema properties",
                              "properties": {
                                "format": {
                                  "description": "Delta table format supported.",
                                  "type": "string",
                                  "enum": [
                                    "boolean",
                                    "int8",
                                    "int16",
                                    "int32",
                                    "uInt8",
                                    "uInt16",
                                    "uInt32",
                                    "uInt64",
                                    "float16",
                                    "float32",
                                    "float64",
                                    "date32",
                                    "date64",
                                    "binary",
                                    "utf8"
                                  ],
                                  "x-ms-enum": {
                                    "name": "DeltaTableFormatEnum",
                                    "modelAsString": true,
                                    "values": [
                                      {
                                        "name": "boolean",
                                        "value": "boolean",
                                        "description": "Bool format"
                                      },
                                      {
                                        "name": "int8",
                                        "value": "int8",
                                        "description": "Signed integer 8"
                                      },
                                      {
                                        "name": "int16",
                                        "value": "int16",
                                        "description": "Signed integer 16"
                                      },
                                      {
                                        "name": "int32",
                                        "value": "int32",
                                        "description": "Signed integer 32"
                                      },
                                      {
                                        "name": "uInt8",
                                        "value": "uInt8",
                                        "description": "Unsigned integer 8"
                                      },
                                      {
                                        "name": "uInt16",
                                        "value": "uInt16",
                                        "description": "Unsigned integer 16"
                                      },
                                      {
                                        "name": "uInt32",
                                        "value": "uInt32",
                                        "description": "Unsigned integer 32"
                                      },
                                      {
                                        "name": "uInt64",
                                        "value": "uInt64",
                                        "description": "Unsigned integer 64"
                                      },
                                      {
                                        "name": "float16",
                                        "value": "float16",
                                        "description": "Float 16"
                                      },
                                      {
                                        "name": "float32",
                                        "value": "float32",
                                        "description": "Float 32"
                                      },
                                      {
                                        "name": "float64",
                                        "value": "float64",
                                        "description": "Float 64"
                                      },
                                      {
                                        "name": "date32",
                                        "value": "date32",
                                        "description": "Date 32"
                                      },
                                      {
                                        "name": "date64",
                                        "value": "date64",
                                        "description": "Date 64"
                                      },
                                      {
                                        "name": "binary",
                                        "value": "binary",
                                        "description": "Binary data"
                                      },
                                      {
                                        "name": "utf8",
                                        "value": "utf8",
                                        "description": "UTF8 format"
                                      }
                                    ]
                                  }
                                },
                                "mapping": {
                                  "type": "string",
                                  "description": "Delta table schema mapping."
                                },
                                "name": {
                                  "type": "string",
                                  "description": "Delta table schema name."
                                },
                                "optional": {
                                  "type": "boolean",
                                  "description": "Delta table schema optional."
                                }
                              },
                              "required": [
                                "format",
                                "mapping",
                                "name",
                                "optional"
                              ]
                            },
                            "x-ms-identifiers": []
                          },
                          "tableName": {
                            "type": "string",
                            "description": "Delta table name."
                          },
                          "tablePath": {
                            "type": "string",
                            "description": "Delta table path."
                          }
                        },
                        "required": [
                          "schema",
                          "tableName"
                        ]
                      }
                    },
                    "required": [
                      "allowedLatencySecs",
                      "clientId",
                      "maxMessagesPerBatch",
                      "messagePayloadType",
                      "mqttSourceTopic",
                      "table"
                    ]
                  },
                  "provisioningState": {
                    "description": "The status of the last operation.",
                    "readOnly": true,
                    "type": "string",
                    "enum": [
                      "Succeeded",
                      "Failed",
                      "Canceled",
                      "Provisioning",
                      "Updating",
                      "Deleting",
                      "Accepted"
                    ],
                    "x-ms-enum": {
                      "name": "ProvisioningState",
                      "modelAsString": true,
                      "values": [
                        {
                          "name": "Succeeded",
                          "value": "Succeeded",
                          "description": "Resource has been created."
                        },
                        {
                          "name": "Failed",
                          "value": "Failed",
                          "description": "Resource creation failed."
                        },
                        {
                          "name": "Canceled",
                          "value": "Canceled",
                          "description": "Resource creation was canceled."
                        },
                        {
                          "name": "Provisioning",
                          "value": "Provisioning",
                          "description": "Resource is getting provisioned."
                        },
                        {
                          "name": "Updating",
                          "value": "Updating",
                          "description": "Resource is Updating."
                        },
                        {
                          "name": "Deleting",
                          "value": "Deleting",
                          "description": "Resource is Deleting."
                        },
                        {
                          "name": "Accepted",
                          "value": "Accepted",
                          "description": "Resource has been Accepted."
                        }
                      ]
                    }
                  }
                },
                "required": [
                  "dataLakeConnectorRef",
                  "mapping"
                ]
              },
              "extendedLocation": {
                "description": "Extended Location",
                "x-ms-mutability": [
                  "read",
                  "create"
                ],
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the extended location."
                  },
                  "type": {
                    "description": "Type of ExtendedLocation.",
                    "type": "string",
                    "enum": [
                      "CustomLocation"
                    ],
                    "x-ms-enum": {
                      "name": "ExtendedLocationType",
                      "modelAsString": true,
                      "values": [
                        {
                          "name": "CustomLocation",
                          "value": "CustomLocation",
                          "description": "CustomLocation type"
                        }
                      ]
                    }
                  }
                },
                "required": [
                  "name",
                  "type"
                ]
              }
            },
            "required": [
              "extendedLocation"
            ]
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "DataLakeTopicMapResourceUpdate": {
      "type": "object",
      "description": "The type used for update operations of the DataLakeTopicMapResource.",
      "properties": {
        "tags": {
          "type": "object",
          "description": "Resource tags.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "properties": {
          "description": "The resource-specific properties for this resource.",
          "x-ms-client-flatten": true,
          "type": "object",
          "properties": {
            "dataLakeConnectorRef": {
              "type": "string",
              "description": "DataLake Connector CRD to use."
            },
            "mapping": {
              "description": "TopicMap for DataLake connector.",
              "type": "object",
              "properties": {
                "allowedLatencySecs": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Allowed latency for transferring data.",
                  "minimum": 0,
                  "maximum": 65535
                },
                "clientId": {
                  "type": "string",
                  "description": "Client Id to use."
                },
                "maxMessagesPerBatch": {
                  "type": "integer",
                  "format": "int64",
                  "description": "Maximum messages to send per Batch.",
                  "minimum": 0,
                  "maximum": 4294967295
                },
                "messagePayloadType": {
                  "type": "string",
                  "description": "Message payload type."
                },
                "mqttSourceTopic": {
                  "type": "string",
                  "description": "Mqtt source topic."
                },
                "qos": {
                  "type": "integer",
                  "format": "int32",
                  "description": "Quality of Service.",
                  "default": 1,
                  "minimum": 0,
                  "maximum": 2
                },
                "table": {
                  "description": "Delta table properties to use.",
                  "type": "object",
                  "properties": {
                    "schema": {
                      "type": "array",
                      "description": "Schema list supported.",
                      "items": {
                        "type": "object",
                        "description": "Delta table schema properties",
                        "properties": {
                          "format": {
                            "description": "Delta table format supported.",
                            "type": "string",
                            "enum": [
                              "boolean",
                              "int8",
                              "int16",
                              "int32",
                              "uInt8",
                              "uInt16",
                              "uInt32",
                              "uInt64",
                              "float16",
                              "float32",
                              "float64",
                              "date32",
                              "date64",
                              "binary",
                              "utf8"
                            ],
                            "x-ms-enum": {
                              "name": "DeltaTableFormatEnum",
                              "modelAsString": true,
                              "values": [
                                {
                                  "name": "boolean",
                                  "value": "boolean",
                                  "description": "Bool format"
                                },
                                {
                                  "name": "int8",
                                  "value": "int8",
                                  "description": "Signed integer 8"
                                },
                                {
                                  "name": "int16",
                                  "value": "int16",
                                  "description": "Signed integer 16"
                                },
                                {
                                  "name": "int32",
                                  "value": "int32",
                                  "description": "Signed integer 32"
                                },
                                {
                                  "name": "uInt8",
                                  "value": "uInt8",
                                  "description": "Unsigned integer 8"
                                },
                                {
                                  "name": "uInt16",
                                  "value": "uInt16",
                                  "description": "Unsigned integer 16"
                                },
                                {
                                  "name": "uInt32",
                                  "value": "uInt32",
                                  "description": "Unsigned integer 32"
                                },
                                {
                                  "name": "uInt64",
                                  "value": "uInt64",
                                  "description": "Unsigned integer 64"
                                },
                                {
                                  "name": "float16",
                                  "value": "float16",
                                  "description": "Float 16"
                                },
                                {
                                  "name": "float32",
                                  "value": "float32",
                                  "description": "Float 32"
                                },
                                {
                                  "name": "float64",
                                  "value": "float64",
                                  "description": "Float 64"
                                },
                                {
                                  "name": "date32",
                                  "value": "date32",
                                  "description": "Date 32"
                                },
                                {
                                  "name": "date64",
                                  "value": "date64",
                                  "description": "Date 64"
                                },
                                {
                                  "name": "binary",
                                  "value": "binary",
                                  "description": "Binary data"
                                },
                                {
                                  "name": "utf8",
                                  "value": "utf8",
                                  "description": "UTF8 format"
                                }
                              ]
                            }
                          },
                          "mapping": {
                            "type": "string",
                            "description": "Delta table schema mapping."
                          },
                          "name": {
                            "type": "string",
                            "description": "Delta table schema name."
                          },
                          "optional": {
                            "type": "boolean",
                            "description": "Delta table schema optional."
                          }
                        },
                        "required": [
                          "format",
                          "mapping",
                          "name",
                          "optional"
                        ]
                      },
                      "x-ms-identifiers": []
                    },
                    "tableName": {
                      "type": "string",
                      "description": "Delta table name."
                    },
                    "tablePath": {
                      "type": "string",
                      "description": "Delta table path."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "DataLakeTopicMapResourceUpdateProperties": {
      "type": "object",
      "description": "The updatable properties of the DataLakeTopicMapResource.",
      "properties": {
        "dataLakeConnectorRef": {
          "type": "string",
          "description": "DataLake Connector CRD to use."
        },
        "mapping": {
          "description": "TopicMap for DataLake connector.",
          "type": "object",
          "properties": {
            "allowedLatencySecs": {
              "type": "integer",
              "format": "int32",
              "description": "Allowed latency for transferring data.",
              "minimum": 0,
              "maximum": 65535
            },
            "clientId": {
              "type": "string",
              "description": "Client Id to use."
            },
            "maxMessagesPerBatch": {
              "type": "integer",
              "format": "int64",
              "description": "Maximum messages to send per Batch.",
              "minimum": 0,
              "maximum": 4294967295
            },
            "messagePayloadType": {
              "type": "string",
              "description": "Message payload type."
            },
            "mqttSourceTopic": {
              "type": "string",
              "description": "Mqtt source topic."
            },
            "qos": {
              "type": "integer",
              "format": "int32",
              "description": "Quality of Service.",
              "default": 1,
              "minimum": 0,
              "maximum": 2
            },
            "table": {
              "description": "Delta table properties to use.",
              "type": "object",
              "properties": {
                "schema": {
                  "type": "array",
                  "description": "Schema list supported.",
                  "items": {
                    "type": "object",
                    "description": "Delta table schema properties",
                    "properties": {
                      "format": {
                        "description": "Delta table format supported.",
                        "type": "string",
                        "enum": [
                          "boolean",
                          "int8",
                          "int16",
                          "int32",
                          "uInt8",
                          "uInt16",
                          "uInt32",
                          "uInt64",
                          "float16",
                          "float32",
                          "float64",
                          "date32",
                          "date64",
                          "binary",
                          "utf8"
                        ],
                        "x-ms-enum": {
                          "name": "DeltaTableFormatEnum",
                          "modelAsString": true,
                          "values": [
                            {
                              "name": "boolean",
                              "value": "boolean",
                              "description": "Bool format"
                            },
                            {
                              "name": "int8",
                              "value": "int8",
                              "description": "Signed integer 8"
                            },
                            {
                              "name": "int16",
                              "value": "int16",
                              "description": "Signed integer 16"
                            },
                            {
                              "name": "int32",
                              "value": "int32",
                              "description": "Signed integer 32"
                            },
                            {
                              "name": "uInt8",
                              "value": "uInt8",
                              "description": "Unsigned integer 8"
                            },
                            {
                              "name": "uInt16",
                              "value": "uInt16",
                              "description": "Unsigned integer 16"
                            },
                            {
                              "name": "uInt32",
                              "value": "uInt32",
                              "description": "Unsigned integer 32"
                            },
                            {
                              "name": "uInt64",
                              "value": "uInt64",
                              "description": "Unsigned integer 64"
                            },
                            {
                              "name": "float16",
                              "value": "float16",
                              "description": "Float 16"
                            },
                            {
                              "name": "float32",
                              "value": "float32",
                              "description": "Float 32"
                            },
                            {
                              "name": "float64",
                              "value": "float64",
                              "description": "Float 64"
                            },
                            {
                              "name": "date32",
                              "value": "date32",
                              "description": "Date 32"
                            },
                            {
                              "name": "date64",
                              "value": "date64",
                              "description": "Date 64"
                            },
                            {
                              "name": "binary",
                              "value": "binary",
                              "description": "Binary data"
                            },
                            {
                              "name": "utf8",
                              "value": "utf8",
                              "description": "UTF8 format"
                            }
                          ]
                        }
                      },
                      "mapping": {
                        "type": "string",
                        "description": "Delta table schema mapping."
                      },
                      "name": {
                        "type": "string",
                        "description": "Delta table schema name."
                      },
                      "optional": {
                        "type": "boolean",
                        "description": "Delta table schema optional."
                      }
                    },
                    "required": [
                      "format",
                      "mapping",
                      "name",
                      "optional"
                    ]
                  },
                  "x-ms-identifiers": []
                },
                "tableName": {
                  "type": "string",
                  "description": "Delta table name."
                },
                "tablePath": {
                  "type": "string",
                  "description": "Delta table path."
                }
              }
            }
          }
        }
      }
    },
    "DeltaTable": {
      "type": "object",
      "description": "Delta table properties",
      "properties": {
        "schema": {
          "type": "array",
          "description": "Schema list supported.",
          "items": {
            "type": "object",
            "description": "Delta table schema properties",
            "properties": {
              "format": {
                "description": "Delta table format supported.",
                "type": "string",
                "enum": [
                  "boolean",
                  "int8",
                  "int16",
                  "int32",
                  "uInt8",
                  "uInt16",
                  "uInt32",
                  "uInt64",
                  "float16",
                  "float32",
                  "float64",
                  "date32",
                  "date64",
                  "binary",
                  "utf8"
                ],
                "x-ms-enum": {
                  "name": "DeltaTableFormatEnum",
                  "modelAsString": true,
                  "values": [
                    {
                      "name": "boolean",
                      "value": "boolean",
                      "description": "Bool format"
                    },
                    {
                      "name": "int8",
                      "value": "int8",
                      "description": "Signed integer 8"
                    },
                    {
                      "name": "int16",
                      "value": "int16",
                      "description": "Signed integer 16"
                    },
                    {
                      "name": "int32",
                      "value": "int32",
                      "description": "Signed integer 32"
                    },
                    {
                      "name": "uInt8",
                      "value": "uInt8",
                      "description": "Unsigned integer 8"
                    },
                    {
                      "name": "uInt16",
                      "value": "uInt16",
                      "description": "Unsigned integer 16"
                    },
                    {
                      "name": "uInt32",
                      "value": "uInt32",
                      "description": "Unsigned integer 32"
                    },
                    {
                      "name": "uInt64",
                      "value": "uInt64",
                      "description": "Unsigned integer 64"
                    },
                    {
                      "name": "float16",
                      "value": "float16",
                      "description": "Float 16"
                    },
                    {
                      "name": "float32",
                      "value": "float32",
                      "description": "Float 32"
                    },
                    {
                      "name": "float64",
                      "value": "float64",
                      "description": "Float 64"
                    },
                    {
                      "name": "date32",
                      "value": "date32",
                      "description": "Date 32"
                    },
                    {
                      "name": "date64",
                      "value": "date64",
                      "description": "Date 64"
                    },
                    {
                      "name": "binary",
                      "value": "binary",
                      "description": "Binary data"
                    },
                    {
                      "name": "utf8",
                      "value": "utf8",
                      "description": "UTF8 format"
                    }
                  ]
                }
              },
              "mapping": {
                "type": "string",
                "description": "Delta table schema mapping."
              },
              "name": {
                "type": "string",
                "description": "Delta table schema name."
              },
              "optional": {
                "type": "boolean",
                "description": "Delta table schema optional."
              }
            },
            "required": [
              "format",
              "mapping",
              "name",
              "optional"
            ]
          },
          "x-ms-identifiers": []
        },
        "tableName": {
          "type": "string",
          "description": "Delta table name."
        },
        "tablePath": {
          "type": "string",
          "description": "Delta table path."
        }
      },
      "required": [
        "schema",
        "tableName"
      ]
    },
    "DeltaTableFormatEnum": {
      "type": "string",
      "description": "Delta table format properties",
      "enum": [
        "boolean",
        "int8",
        "int16",
        "int32",
        "uInt8",
        "uInt16",
        "uInt32",
        "uInt64",
        "float16",
        "float32",
        "float64",
        "date32",
        "date64",
        "binary",
        "utf8"
      ],
      "x-ms-enum": {
        "name": "DeltaTableFormatEnum",
        "modelAsString": true,
        "values": [
          {
            "name": "boolean",
            "value": "boolean",
            "description": "Bool format"
          },
          {
            "name": "int8",
            "value": "int8",
            "description": "Signed integer 8"
          },
          {
            "name": "int16",
            "value": "int16",
            "description": "Signed integer 16"
          },
          {
            "name": "int32",
            "value": "int32",
            "description": "Signed integer 32"
          },
          {
            "name": "uInt8",
            "value": "uInt8",
            "description": "Unsigned integer 8"
          },
          {
            "name": "uInt16",
            "value": "uInt16",
            "description": "Unsigned integer 16"
          },
          {
            "name": "uInt32",
            "value": "uInt32",
            "description": "Unsigned integer 32"
          },
          {
            "name": "uInt64",
            "value": "uInt64",
            "description": "Unsigned integer 64"
          },
          {
            "name": "float16",
            "value": "float16",
            "description": "Float 16"
          },
          {
            "name": "float32",
            "value": "float32",
            "description": "Float 32"
          },
          {
            "name": "float64",
            "value": "float64",
            "description": "Float 64"
          },
          {
            "name": "date32",
            "value": "date32",
            "description": "Date 32"
          },
          {
            "name": "date64",
            "value": "date64",
            "description": "Date 64"
          },
          {
            "name": "binary",
            "value": "binary",
            "description": "Binary data"
          },
          {
            "name": "utf8",
            "value": "utf8",
            "description": "UTF8 format"
          }
        ]
      }
    },
    "DeltaTableSchema": {
      "type": "object",
      "description": "Delta table schema properties",
      "properties": {
        "format": {
          "description": "Delta table format supported.",
          "type": "string",
          "enum": [
            "boolean",
            "int8",
            "int16",
            "int32",
            "uInt8",
            "uInt16",
            "uInt32",
            "uInt64",
            "float16",
            "float32",
            "float64",
            "date32",
            "date64",
            "binary",
            "utf8"
          ],
          "x-ms-enum": {
            "name": "DeltaTableFormatEnum",
            "modelAsString": true,
            "values": [
              {
                "name": "boolean",
                "value": "boolean",
                "description": "Bool format"
              },
              {
                "name": "int8",
                "value": "int8",
                "description": "Signed integer 8"
              },
              {
                "name": "int16",
                "value": "int16",
                "description": "Signed integer 16"
              },
              {
                "name": "int32",
                "value": "int32",
                "description": "Signed integer 32"
              },
              {
                "name": "uInt8",
                "value": "uInt8",
                "description": "Unsigned integer 8"
              },
              {
                "name": "uInt16",
                "value": "uInt16",
                "description": "Unsigned integer 16"
              },
              {
                "name": "uInt32",
                "value": "uInt32",
                "description": "Unsigned integer 32"
              },
              {
                "name": "uInt64",
                "value": "uInt64",
                "description": "Unsigned integer 64"
              },
              {
                "name": "float16",
                "value": "float16",
                "description": "Float 16"
              },
              {
                "name": "float32",
                "value": "float32",
                "description": "Float 32"
              },
              {
                "name": "float64",
                "value": "float64",
                "description": "Float 64"
              },
              {
                "name": "date32",
                "value": "date32",
                "description": "Date 32"
              },
              {
                "name": "date64",
                "value": "date64",
                "description": "Date 64"
              },
              {
                "name": "binary",
                "value": "binary",
                "description": "Binary data"
              },
              {
                "name": "utf8",
                "value": "utf8",
                "description": "UTF8 format"
              }
            ]
          }
        },
        "mapping": {
          "type": "string",
          "description": "Delta table schema mapping."
        },
        "name": {
          "type": "string",
          "description": "Delta table schema name."
        },
        "optional": {
          "type": "boolean",
          "description": "Delta table schema optional."
        }
      },
      "required": [
        "format",
        "mapping",
        "name",
        "optional"
      ]
    },
    "DeltaTableUpdate": {
      "type": "object",
      "description": "Delta table properties",
      "properties": {
        "schema": {
          "type": "array",
          "description": "Schema list supported.",
          "items": {
            "type": "object",
            "description": "Delta table schema properties",
            "properties": {
              "format": {
                "description": "Delta table format supported.",
                "type": "string",
                "enum": [
                  "boolean",
                  "int8",
                  "int16",
                  "int32",
                  "uInt8",
                  "uInt16",
                  "uInt32",
                  "uInt64",
                  "float16",
                  "float32",
                  "float64",
                  "date32",
                  "date64",
                  "binary",
                  "utf8"
                ],
                "x-ms-enum": {
                  "name": "DeltaTableFormatEnum",
                  "modelAsString": true,
                  "values": [
                    {
                      "name": "boolean",
                      "value": "boolean",
                      "description": "Bool format"
                    },
                    {
                      "name": "int8",
                      "value": "int8",
                      "description": "Signed integer 8"
                    },
                    {
                      "name": "int16",
                      "value": "int16",
                      "description": "Signed integer 16"
                    },
                    {
                      "name": "int32",
                      "value": "int32",
                      "description": "Signed integer 32"
                    },
                    {
                      "name": "uInt8",
                      "value": "uInt8",
                      "description": "Unsigned integer 8"
                    },
                    {
                      "name": "uInt16",
                      "value": "uInt16",
                      "description": "Unsigned integer 16"
                    },
                    {
                      "name": "uInt32",
                      "value": "uInt32",
                      "description": "Unsigned integer 32"
                    },
                    {
                      "name": "uInt64",
                      "value": "uInt64",
                      "description": "Unsigned integer 64"
                    },
                    {
                      "name": "float16",
                      "value": "float16",
                      "description": "Float 16"
                    },
                    {
                      "name": "float32",
                      "value": "float32",
                      "description": "Float 32"
                    },
                    {
                      "name": "float64",
                      "value": "float64",
                      "description": "Float 64"
                    },
                    {
                      "name": "date32",
                      "value": "date32",
                      "description": "Date 32"
                    },
                    {
                      "name": "date64",
                      "value": "date64",
                      "description": "Date 64"
                    },
                    {
                      "name": "binary",
                      "value": "binary",
                      "description": "Binary data"
                    },
                    {
                      "name": "utf8",
                      "value": "utf8",
                      "description": "UTF8 format"
                    }
                  ]
                }
              },
              "mapping": {
                "type": "string",
                "description": "Delta table schema mapping."
              },
              "name": {
                "type": "string",
                "description": "Delta table schema name."
              },
              "optional": {
                "type": "boolean",
                "description": "Delta table schema optional."
              }
            },
            "required": [
              "format",
              "mapping",
              "name",
              "optional"
            ]
          },
          "x-ms-identifiers": []
        },
        "tableName": {
          "type": "string",
          "description": "Delta table name."
        },
        "tablePath": {
          "type": "string",
          "description": "Delta table path."
        }
      }
    },
    "DiagnosticServiceProperties": {
      "type": "object",
      "description": "MQ Diagnostic Services Resource properties",
      "properties": {
        "dataExportFrequencySeconds": {
          "type": "integer",
          "format": "int32",
          "description": "The frequency at which the data will be exported.",
          "default": 10,
          "minimum": 0,
          "maximum": 65535
        },
        "image": {
          "description": "The details of Diagnostic Service Docker Image.",
          "type": "object",
          "properties": {
            "pullPolicy": {
              "type": "string",
              "description": "Image pull policy."
            },
            "pullSecrets": {
              "type": "string",
              "description": "Image pull secrets."
            },
            "repository": {
              "type": "string",
              "description": "The Docker image name."
            },
            "tag": {
              "type": "string",
              "description": "The Docker  image tag."
            }
          },
          "required": [
            "repository",
            "tag"
          ]
        },
        "logFormat": {
          "type": "string",
          "description": "The format for the logs generated.",
          "default": "json"
        },
        "logLevel": {
          "type": "string",
          "description": "The format for the logs generated.",
          "default": "info"
        },
        "maxDataStorageSize": {
          "type": "integer",
          "format": "int64",
          "description": "The maximum data stored in MiB.",
          "default": 16,
          "minimum": 0,
          "maximum": 4294967295
        },
        "metricsPort": {
          "type": "integer",
          "format": "int32",
          "description": "The port at which metrics is exposed.",
          "default": 9600,
          "minimum": 0,
          "maximum": 65535
        },
        "openTelemetryTracesCollectorAddr": {
          "type": "string",
          "description": "The destination to collect traces. Diagnostic service will push traces to this endpoint"
        },
        "provisioningState": {
          "description": "The status of the last operation.",
          "readOnly": true,
          "type": "string",
          "enum": [
            "Succeeded",
            "Failed",
            "Canceled",
            "Provisioning",
            "Updating",
            "Deleting",
            "Accepted"
          ],
          "x-ms-enum": {
            "name": "ProvisioningState",
            "modelAsString": true,
            "values": [
              {
                "name": "Succeeded",
                "value": "Succeeded",
                "description": "Resource has been created."
              },
              {
                "name": "Failed",
                "value": "Failed",
                "description": "Resource creation failed."
              },
              {
                "name": "Canceled",
                "value": "Canceled",
                "description": "Resource creation was canceled."
              },
              {
                "name": "Provisioning",
                "value": "Provisioning",
                "description": "Resource is getting provisioned."
              },
              {
                "name": "Updating",
                "value": "Updating",
                "description": "Resource is Updating."
              },
              {
                "name": "Deleting",
                "value": "Deleting",
                "description": "Resource is Deleting."
              },
              {
                "name": "Accepted",
                "value": "Accepted",
                "description": "Resource has been Accepted."
              }
            ]
          }
        },
        "staleDataTimeoutSeconds": {
          "type": "integer",
          "format": "int32",
          "description": "Metric inactivity timeout.",
          "default": 600,
          "minimum": 0,
          "maximum": 65535
        }
      },
      "required": [
        "image"
      ]
    },
    "DiagnosticServiceResource": {
      "type": "object",
      "description": "MQ diagnostic services resource",
      "properties": {
        "id": {
          "type": "string",
          "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "The name of the resource",
          "readOnly": true
        },
        "type": {
          "type": "string",
          "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
          "readOnly": true
        },
        "systemData": {
          "type": "object",
          "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
          "readOnly": true,
          "properties": {
            "createdBy": {
              "type": "string",
              "description": "The identity that created the resource."
            },
            "createdByType": {
              "type": "string",
              "description": "The type of identity that created the resource.",
              "enum": [
                "User",
                "Application",
                "ManagedIdentity",
                "Key"
              ],
              "x-ms-enum": {
                "name": "createdByType",
                "modelAsString": true
              }
            },
            "createdAt": {
              "type": "string",
              "format": "date-time",
              "description": "The timestamp of resource creation (UTC)."
            },
            "lastModifiedBy": {
              "type": "string",
              "description": "The identity that last modified the resource."
            },
            "lastModifiedByType": {
              "type": "string",
              "description": "The type of identity that last modified the resource.",
              "enum": [
                "User",
                "Application",
                "ManagedIdentity",
                "Key"
              ],
              "x-ms-enum": {
                "name": "createdByType",
                "modelAsString": true
              }
            },
            "lastModifiedAt": {
              "type": "string",
              "format": "date-time",
              "description": "The timestamp of resource last modification (UTC)"
            }
          }
        },
        "tags": {
          "type": "object",
          "description": "Resource tags.",
          "additionalProperties": {
            "type": "string"
          },
          "x-ms-mutability": [
            "read",
            "create",
            "update"
          ]
        },
        "location": {
          "type": "string",
          "description": "The geo-location where the resource lives",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "properties": {
          "description": "The resource-specific properties for this resource.",
          "x-ms-client-flatten": true,
          "type": "object",
          "properties": {
            "dataExportFrequencySeconds": {
              "type": "integer",
              "format": "int32",
              "description": "The frequency at which the data will be exported.",
              "default": 10,
              "minimum": 0,
              "maximum": 65535
            },
            "image": {
              "description": "The details of Diagnostic Service Docker Image.",
              "type": "object",
              "properties": {
                "pullPolicy": {
                  "type": "string",
                  "description": "Image pull policy."
                },
                "pullSecrets": {
                  "type": "string",
                  "description": "Image pull secrets."
                },
                "repository": {
                  "type": "string",
                  "description": "The Docker image name."
                },
                "tag": {
                  "type": "string",
                  "description": "The Docker  image tag."
                }
              },
              "required": [
                "repository",
                "tag"
              ]
            },
            "logFormat": {
              "type": "string",
              "description": "The format for the logs generated.",
              "default": "json"
            },
            "logLevel": {
              "type": "string",
              "description": "The format for the logs generated.",
              "default": "info"
            },
            "maxDataStorageSize": {
              "type": "integer",
              "format": "int64",
              "description": "The maximum data stored in MiB.",
              "default": 16,
              "minimum": 0,
              "maximum": 4294967295
            },
            "metricsPort": {
              "type": "integer",
              "format": "int32",
              "description": "The port at which metrics is exposed.",
              "default": 9600,
              "minimum": 0,
              "maximum": 65535
            },
            "openTelemetryTracesCollectorAddr": {
              "type": "string",
              "description": "The destination to collect traces. Diagnostic service will push traces to this endpoint"
            },
            "provisioningState": {
              "description": "The status of the last operation.",
              "readOnly": true,
              "type": "string",
              "enum": [
                "Succeeded",
                "Failed",
                "Canceled",
                "Provisioning",
                "Updating",
                "Deleting",
                "Accepted"
              ],
              "x-ms-enum": {
                "name": "ProvisioningState",
                "modelAsString": true,
                "values": [
                  {
                    "name": "Succeeded",
                    "value": "Succeeded",
                    "description": "Resource has been created."
                  },
                  {
                    "name": "Failed",
                    "value": "Failed",
                    "description": "Resource creation failed."
                  },
                  {
                    "name": "Canceled",
                    "value": "Canceled",
                    "description": "Resource creation was canceled."
                  },
                  {
                    "name": "Provisioning",
                    "value": "Provisioning",
                    "description": "Resource is getting provisioned."
                  },
                  {
                    "name": "Updating",
                    "value": "Updating",
                    "description": "Resource is Updating."
                  },
                  {
                    "name": "Deleting",
                    "value": "Deleting",
                    "description": "Resource is Deleting."
                  },
                  {
                    "name": "Accepted",
                    "value": "Accepted",
                    "description": "Resource has been Accepted."
                  }
                ]
              }
            },
            "staleDataTimeoutSeconds": {
              "type": "integer",
              "format": "int32",
              "description": "Metric inactivity timeout.",
              "default": 600,
              "minimum": 0,
              "maximum": 65535
            }
          },
          "required": [
            "image"
          ]
        },
        "extendedLocation": {
          "description": "Extended Location",
          "x-ms-mutability": [
            "read",
            "create"
          ],
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name of the extended location."
            },
            "type": {
              "description": "Type of ExtendedLocation.",
              "type": "string",
              "enum": [
                "CustomLocation"
              ],
              "x-ms-enum": {
                "name": "ExtendedLocationType",
                "modelAsString": true,
                "values": [
                  {
                    "name": "CustomLocation",
                    "value": "CustomLocation",
                    "description": "CustomLocation type"
                  }
                ]
              }
            }
          },
          "required": [
            "name",
            "type"
          ]
        }
      },
      "required": [
        "extendedLocation"
      ]
    },
    "DiagnosticServiceResourceListResult": {
      "type": "object",
      "description": "The response of a DiagnosticServiceResource list operation.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The DiagnosticServiceResource items on this page",
          "items": {
            "type": "object",
            "description": "MQ diagnostic services resource",
            "properties": {
              "id": {
                "type": "string",
                "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                "readOnly": true
              },
              "name": {
                "type": "string",
                "description": "The name of the resource",
                "readOnly": true
              },
              "type": {
                "type": "string",
                "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                "readOnly": true
              },
              "systemData": {
                "type": "object",
                "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                "readOnly": true,
                "properties": {
                  "createdBy": {
                    "type": "string",
                    "description": "The identity that created the resource."
                  },
                  "createdByType": {
                    "type": "string",
                    "description": "The type of identity that created the resource.",
                    "enum": [
                      "User",
                      "Application",
                      "ManagedIdentity",
                      "Key"
                    ],
                    "x-ms-enum": {
                      "name": "createdByType",
                      "modelAsString": true
                    }
                  },
                  "createdAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp of resource creation (UTC)."
                  },
                  "lastModifiedBy": {
                    "type": "string",
                    "description": "The identity that last modified the resource."
                  },
                  "lastModifiedByType": {
                    "type": "string",
                    "description": "The type of identity that last modified the resource.",
                    "enum": [
                      "User",
                      "Application",
                      "ManagedIdentity",
                      "Key"
                    ],
                    "x-ms-enum": {
                      "name": "createdByType",
                      "modelAsString": true
                    }
                  },
                  "lastModifiedAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp of resource last modification (UTC)"
                  }
                }
              },
              "tags": {
                "type": "object",
                "description": "Resource tags.",
                "additionalProperties": {
                  "type": "string"
                },
                "x-ms-mutability": [
                  "read",
                  "create",
                  "update"
                ]
              },
              "location": {
                "type": "string",
                "description": "The geo-location where the resource lives",
                "x-ms-mutability": [
                  "read",
                  "create"
                ]
              },
              "properties": {
                "description": "The resource-specific properties for this resource.",
                "x-ms-client-flatten": true,
                "type": "object",
                "properties": {
                  "dataExportFrequencySeconds": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The frequency at which the data will be exported.",
                    "default": 10,
                    "minimum": 0,
                    "maximum": 65535
                  },
                  "image": {
                    "description": "The details of Diagnostic Service Docker Image.",
                    "type": "object",
                    "properties": {
                      "pullPolicy": {
                        "type": "string",
                        "description": "Image pull policy."
                      },
                      "pullSecrets": {
                        "type": "string",
                        "description": "Image pull secrets."
                      },
                      "repository": {
                        "type": "string",
                        "description": "The Docker image name."
                      },
                      "tag": {
                        "type": "string",
                        "description": "The Docker  image tag."
                      }
                    },
                    "required": [
                      "repository",
                      "tag"
                    ]
                  },
                  "logFormat": {
                    "type": "string",
                    "description": "The format for the logs generated.",
                    "default": "json"
                  },
                  "logLevel": {
                    "type": "string",
                    "description": "The format for the logs generated.",
                    "default": "info"
                  },
                  "maxDataStorageSize": {
                    "type": "integer",
                    "format": "int64",
                    "description": "The maximum data stored in MiB.",
                    "default": 16,
                    "minimum": 0,
                    "maximum": 4294967295
                  },
                  "metricsPort": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The port at which metrics is exposed.",
                    "default": 9600,
                    "minimum": 0,
                    "maximum": 65535
                  },
                  "openTelemetryTracesCollectorAddr": {
                    "type": "string",
                    "description": "The destination to collect traces. Diagnostic service will push traces to this endpoint"
                  },
                  "provisioningState": {
                    "description": "The status of the last operation.",
                    "readOnly": true,
                    "type": "string",
                    "enum": [
                      "Succeeded",
                      "Failed",
                      "Canceled",
                      "Provisioning",
                      "Updating",
                      "Deleting",
                      "Accepted"
                    ],
                    "x-ms-enum": {
                      "name": "ProvisioningState",
                      "modelAsString": true,
                      "values": [
                        {
                          "name": "Succeeded",
                          "value": "Succeeded",
                          "description": "Resource has been created."
                        },
                        {
                          "name": "Failed",
                          "value": "Failed",
                          "description": "Resource creation failed."
                        },
                        {
                          "name": "Canceled",
                          "value": "Canceled",
                          "description": "Resource creation was canceled."
                        },
                        {
                          "name": "Provisioning",
                          "value": "Provisioning",
                          "description": "Resource is getting provisioned."
                        },
                        {
                          "name": "Updating",
                          "value": "Updating",
                          "description": "Resource is Updating."
                        },
                        {
                          "name": "Deleting",
                          "value": "Deleting",
                          "description": "Resource is Deleting."
                        },
                        {
                          "name": "Accepted",
                          "value": "Accepted",
                          "description": "Resource has been Accepted."
                        }
                      ]
                    }
                  },
                  "staleDataTimeoutSeconds": {
                    "type": "integer",
                    "format": "int32",
                    "description": "Metric inactivity timeout.",
                    "default": 600,
                    "minimum": 0,
                    "maximum": 65535
                  }
                },
                "required": [
                  "image"
                ]
              },
              "extendedLocation": {
                "description": "Extended Location",
                "x-ms-mutability": [
                  "read",
                  "create"
                ],
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the extended location."
                  },
                  "type": {
                    "description": "Type of ExtendedLocation.",
                    "type": "string",
                    "enum": [
                      "CustomLocation"
                    ],
                    "x-ms-enum": {
                      "name": "ExtendedLocationType",
                      "modelAsString": true,
                      "values": [
                        {
                          "name": "CustomLocation",
                          "value": "CustomLocation",
                          "description": "CustomLocation type"
                        }
                      ]
                    }
                  }
                },
                "required": [
                  "name",
                  "type"
                ]
              }
            },
            "required": [
              "extendedLocation"
            ]
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "DiagnosticServiceResourceUpdate": {
      "type": "object",
      "description": "The type used for update operations of the DiagnosticServiceResource.",
      "properties": {
        "tags": {
          "type": "object",
          "description": "Resource tags.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "properties": {
          "description": "The resource-specific properties for this resource.",
          "x-ms-client-flatten": true,
          "type": "object",
          "properties": {
            "dataExportFrequencySeconds": {
              "type": "integer",
              "format": "int32",
              "description": "The frequency at which the data will be exported.",
              "default": 10,
              "minimum": 0,
              "maximum": 65535
            },
            "image": {
              "description": "The details of Diagnostic Service Docker Image.",
              "type": "object",
              "properties": {
                "pullPolicy": {
                  "type": "string",
                  "description": "Image pull policy."
                },
                "pullSecrets": {
                  "type": "string",
                  "description": "Image pull secrets."
                },
                "repository": {
                  "type": "string",
                  "description": "The Docker image name."
                },
                "tag": {
                  "type": "string",
                  "description": "The Docker  image tag."
                }
              }
            },
            "logFormat": {
              "type": "string",
              "description": "The format for the logs generated.",
              "default": "json"
            },
            "logLevel": {
              "type": "string",
              "description": "The format for the logs generated.",
              "default": "info"
            },
            "maxDataStorageSize": {
              "type": "integer",
              "format": "int64",
              "description": "The maximum data stored in MiB.",
              "default": 16,
              "minimum": 0,
              "maximum": 4294967295
            },
            "metricsPort": {
              "type": "integer",
              "format": "int32",
              "description": "The port at which metrics is exposed.",
              "default": 9600,
              "minimum": 0,
              "maximum": 65535
            },
            "openTelemetryTracesCollectorAddr": {
              "type": "string",
              "description": "The destination to collect traces. Diagnostic service will push traces to this endpoint"
            },
            "staleDataTimeoutSeconds": {
              "type": "integer",
              "format": "int32",
              "description": "Metric inactivity timeout.",
              "default": 600,
              "minimum": 0,
              "maximum": 65535
            }
          }
        }
      }
    },
    "DiagnosticServiceResourceUpdateProperties": {
      "type": "object",
      "description": "The updatable properties of the DiagnosticServiceResource.",
      "properties": {
        "dataExportFrequencySeconds": {
          "type": "integer",
          "format": "int32",
          "description": "The frequency at which the data will be exported.",
          "default": 10,
          "minimum": 0,
          "maximum": 65535
        },
        "image": {
          "description": "The details of Diagnostic Service Docker Image.",
          "type": "object",
          "properties": {
            "pullPolicy": {
              "type": "string",
              "description": "Image pull policy."
            },
            "pullSecrets": {
              "type": "string",
              "description": "Image pull secrets."
            },
            "repository": {
              "type": "string",
              "description": "The Docker image name."
            },
            "tag": {
              "type": "string",
              "description": "The Docker  image tag."
            }
          }
        },
        "logFormat": {
          "type": "string",
          "description": "The format for the logs generated.",
          "default": "json"
        },
        "logLevel": {
          "type": "string",
          "description": "The format for the logs generated.",
          "default": "info"
        },
        "maxDataStorageSize": {
          "type": "integer",
          "format": "int64",
          "description": "The maximum data stored in MiB.",
          "default": 16,
          "minimum": 0,
          "maximum": 4294967295
        },
        "metricsPort": {
          "type": "integer",
          "format": "int32",
          "description": "The port at which metrics is exposed.",
          "default": 9600,
          "minimum": 0,
          "maximum": 65535
        },
        "openTelemetryTracesCollectorAddr": {
          "type": "string",
          "description": "The destination to collect traces. Diagnostic service will push traces to this endpoint"
        },
        "staleDataTimeoutSeconds": {
          "type": "integer",
          "format": "int32",
          "description": "Metric inactivity timeout.",
          "default": 600,
          "minimum": 0,
          "maximum": 65535
        }
      }
    },
    "DiskBackedMessageBufferSettings": {
      "type": "object",
      "description": "DiskBackedMessageBufferSettings properties",
      "properties": {
        "ephemeralVolumeClaimSpec": {
          "description": "Use the specified persistent volume claim template to mount a \"generic ephemeral volume\" for the message buffer. See <https://kubernetes.io/docs/concepts/storage/ephemeral-volumes/#generic-ephemeral-volumes> for details.",
          "type": "object",
          "properties": {
            "accessModes": {
              "type": "array",
              "description": "AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
              "items": {
                "type": "string"
              }
            },
            "dataSource": {
              "description": "This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.",
              "type": "object",
              "properties": {
                "apiGroup": {
                  "type": "string",
                  "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required."
                },
                "kind": {
                  "type": "string",
                  "description": "Kind is the type of resource being referenced"
                },
                "name": {
                  "type": "string",
                  "description": "Name is the name of resource being referenced"
                }
              },
              "required": [
                "kind",
                "name"
              ]
            },
            "dataSourceRef": {
              "description": "Specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef: * While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified. (Alpha) Using this field requires the AnyVolumeDataSource feature gate to be enabled.",
              "type": "object",
              "properties": {
                "apiGroup": {
                  "type": "string",
                  "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required."
                },
                "kind": {
                  "type": "string",
                  "description": "Kind is the type of resource being referenced"
                },
                "name": {
                  "type": "string",
                  "description": "Name is the name of resource being referenced"
                }
              },
              "required": [
                "kind",
                "name"
              ]
            },
            "resources": {
              "description": "Resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources",
              "type": "object",
              "properties": {
                "limits": {
                  "type": "object",
                  "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "requests": {
                  "type": "object",
                  "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            },
            "selector": {
              "description": "A label query over volumes to consider for binding.",
              "type": "object",
              "properties": {
                "matchExpressions": {
                  "type": "array",
                  "description": "MatchExpressions is a list of label selector requirements. The requirements are ANDed.",
                  "items": {
                    "type": "object",
                    "description": "VolumeClaimSpecSelectorMatchExpressions properties",
                    "properties": {
                      "key": {
                        "type": "string",
                        "description": "key is the label key that the selector applies to."
                      },
                      "operator": {
                        "type": "string",
                        "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist."
                      },
                      "values": {
                        "type": "array",
                        "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                        "items": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "key",
                      "operator"
                    ]
                  },
                  "x-ms-identifiers": []
                },
                "matchLabels": {
                  "type": "object",
                  "description": "MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            },
            "storageClassName": {
              "type": "string",
              "description": "Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1"
            },
            "volumeMode": {
              "type": "string",
              "description": "volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec. This is a beta feature."
            },
            "volumeName": {
              "type": "string",
              "description": "VolumeName is the binding reference to the PersistentVolume backing this claim."
            }
          }
        },
        "maxSize": {
          "type": "string",
          "description": "The max size of the message buffer on disk. If a PVC template is specified using one of ephemeralVolumeClaimSpec or persistentVolumeClaimSpec, then this size is used as the request and limit sizes of that template. If neither ephemeralVolumeClaimSpec nor persistentVolumeClaimSpec are specified, then an emptyDir volume is mounted with this size as its limit. See <https://kubernetes.io/docs/concepts/storage/volumes/#emptydir> for details."
        },
        "persistentVolumeClaimSpec": {
          "description": "Use the specified persistent volume claim template to mount a persistent volume for the message buffer.",
          "type": "object",
          "properties": {
            "accessModes": {
              "type": "array",
              "description": "AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
              "items": {
                "type": "string"
              }
            },
            "dataSource": {
              "description": "This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.",
              "type": "object",
              "properties": {
                "apiGroup": {
                  "type": "string",
                  "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required."
                },
                "kind": {
                  "type": "string",
                  "description": "Kind is the type of resource being referenced"
                },
                "name": {
                  "type": "string",
                  "description": "Name is the name of resource being referenced"
                }
              },
              "required": [
                "kind",
                "name"
              ]
            },
            "dataSourceRef": {
              "description": "Specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef: * While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified. (Alpha) Using this field requires the AnyVolumeDataSource feature gate to be enabled.",
              "type": "object",
              "properties": {
                "apiGroup": {
                  "type": "string",
                  "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required."
                },
                "kind": {
                  "type": "string",
                  "description": "Kind is the type of resource being referenced"
                },
                "name": {
                  "type": "string",
                  "description": "Name is the name of resource being referenced"
                }
              },
              "required": [
                "kind",
                "name"
              ]
            },
            "resources": {
              "description": "Resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources",
              "type": "object",
              "properties": {
                "limits": {
                  "type": "object",
                  "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "requests": {
                  "type": "object",
                  "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            },
            "selector": {
              "description": "A label query over volumes to consider for binding.",
              "type": "object",
              "properties": {
                "matchExpressions": {
                  "type": "array",
                  "description": "MatchExpressions is a list of label selector requirements. The requirements are ANDed.",
                  "items": {
                    "type": "object",
                    "description": "VolumeClaimSpecSelectorMatchExpressions properties",
                    "properties": {
                      "key": {
                        "type": "string",
                        "description": "key is the label key that the selector applies to."
                      },
                      "operator": {
                        "type": "string",
                        "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist."
                      },
                      "values": {
                        "type": "array",
                        "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                        "items": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "key",
                      "operator"
                    ]
                  },
                  "x-ms-identifiers": []
                },
                "matchLabels": {
                  "type": "object",
                  "description": "MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            },
            "storageClassName": {
              "type": "string",
              "description": "Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1"
            },
            "volumeMode": {
              "type": "string",
              "description": "volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec. This is a beta feature."
            },
            "volumeName": {
              "type": "string",
              "description": "VolumeName is the binding reference to the PersistentVolume backing this claim."
            }
          }
        }
      },
      "required": [
        "maxSize"
      ]
    },
    "DiskBackedMessageBufferSettingsUpdate": {
      "type": "object",
      "description": "DiskBackedMessageBufferSettings properties",
      "properties": {
        "ephemeralVolumeClaimSpec": {
          "description": "Use the specified persistent volume claim template to mount a \"generic ephemeral volume\" for the message buffer. See <https://kubernetes.io/docs/concepts/storage/ephemeral-volumes/#generic-ephemeral-volumes> for details.",
          "type": "object",
          "properties": {
            "accessModes": {
              "type": "array",
              "description": "AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
              "items": {
                "type": "string"
              }
            },
            "dataSource": {
              "description": "This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.",
              "type": "object",
              "properties": {
                "apiGroup": {
                  "type": "string",
                  "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required."
                },
                "kind": {
                  "type": "string",
                  "description": "Kind is the type of resource being referenced"
                },
                "name": {
                  "type": "string",
                  "description": "Name is the name of resource being referenced"
                }
              }
            },
            "dataSourceRef": {
              "description": "Specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef: * While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified. (Alpha) Using this field requires the AnyVolumeDataSource feature gate to be enabled.",
              "type": "object",
              "properties": {
                "apiGroup": {
                  "type": "string",
                  "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required."
                },
                "kind": {
                  "type": "string",
                  "description": "Kind is the type of resource being referenced"
                },
                "name": {
                  "type": "string",
                  "description": "Name is the name of resource being referenced"
                }
              }
            },
            "resources": {
              "description": "Resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources",
              "type": "object",
              "properties": {
                "limits": {
                  "type": "object",
                  "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "requests": {
                  "type": "object",
                  "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            },
            "selector": {
              "description": "A label query over volumes to consider for binding.",
              "type": "object",
              "properties": {
                "matchExpressions": {
                  "type": "array",
                  "description": "MatchExpressions is a list of label selector requirements. The requirements are ANDed.",
                  "items": {
                    "type": "object",
                    "description": "VolumeClaimSpecSelectorMatchExpressions properties",
                    "properties": {
                      "key": {
                        "type": "string",
                        "description": "key is the label key that the selector applies to."
                      },
                      "operator": {
                        "type": "string",
                        "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist."
                      },
                      "values": {
                        "type": "array",
                        "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                        "items": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "key",
                      "operator"
                    ]
                  },
                  "x-ms-identifiers": []
                },
                "matchLabels": {
                  "type": "object",
                  "description": "MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            },
            "storageClassName": {
              "type": "string",
              "description": "Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1"
            },
            "volumeMode": {
              "type": "string",
              "description": "volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec. This is a beta feature."
            },
            "volumeName": {
              "type": "string",
              "description": "VolumeName is the binding reference to the PersistentVolume backing this claim."
            }
          }
        },
        "maxSize": {
          "type": "string",
          "description": "The max size of the message buffer on disk. If a PVC template is specified using one of ephemeralVolumeClaimSpec or persistentVolumeClaimSpec, then this size is used as the request and limit sizes of that template. If neither ephemeralVolumeClaimSpec nor persistentVolumeClaimSpec are specified, then an emptyDir volume is mounted with this size as its limit. See <https://kubernetes.io/docs/concepts/storage/volumes/#emptydir> for details."
        },
        "persistentVolumeClaimSpec": {
          "description": "Use the specified persistent volume claim template to mount a persistent volume for the message buffer.",
          "type": "object",
          "properties": {
            "accessModes": {
              "type": "array",
              "description": "AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
              "items": {
                "type": "string"
              }
            },
            "dataSource": {
              "description": "This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.",
              "type": "object",
              "properties": {
                "apiGroup": {
                  "type": "string",
                  "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required."
                },
                "kind": {
                  "type": "string",
                  "description": "Kind is the type of resource being referenced"
                },
                "name": {
                  "type": "string",
                  "description": "Name is the name of resource being referenced"
                }
              }
            },
            "dataSourceRef": {
              "description": "Specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef: * While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified. (Alpha) Using this field requires the AnyVolumeDataSource feature gate to be enabled.",
              "type": "object",
              "properties": {
                "apiGroup": {
                  "type": "string",
                  "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required."
                },
                "kind": {
                  "type": "string",
                  "description": "Kind is the type of resource being referenced"
                },
                "name": {
                  "type": "string",
                  "description": "Name is the name of resource being referenced"
                }
              }
            },
            "resources": {
              "description": "Resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources",
              "type": "object",
              "properties": {
                "limits": {
                  "type": "object",
                  "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "requests": {
                  "type": "object",
                  "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            },
            "selector": {
              "description": "A label query over volumes to consider for binding.",
              "type": "object",
              "properties": {
                "matchExpressions": {
                  "type": "array",
                  "description": "MatchExpressions is a list of label selector requirements. The requirements are ANDed.",
                  "items": {
                    "type": "object",
                    "description": "VolumeClaimSpecSelectorMatchExpressions properties",
                    "properties": {
                      "key": {
                        "type": "string",
                        "description": "key is the label key that the selector applies to."
                      },
                      "operator": {
                        "type": "string",
                        "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist."
                      },
                      "values": {
                        "type": "array",
                        "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                        "items": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "key",
                      "operator"
                    ]
                  },
                  "x-ms-identifiers": []
                },
                "matchLabels": {
                  "type": "object",
                  "description": "MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            },
            "storageClassName": {
              "type": "string",
              "description": "Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1"
            },
            "volumeMode": {
              "type": "string",
              "description": "volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec. This is a beta feature."
            },
            "volumeName": {
              "type": "string",
              "description": "VolumeName is the binding reference to the PersistentVolume backing this claim."
            }
          }
        }
      }
    },
    "ExtendedLocationProperty": {
      "type": "object",
      "description": "ExtendedLocation properties",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the extended location."
        },
        "type": {
          "description": "Type of ExtendedLocation.",
          "type": "string",
          "enum": [
            "CustomLocation"
          ],
          "x-ms-enum": {
            "name": "ExtendedLocationType",
            "modelAsString": true,
            "values": [
              {
                "name": "CustomLocation",
                "value": "CustomLocation",
                "description": "CustomLocation type"
              }
            ]
          }
        }
      },
      "required": [
        "name",
        "type"
      ]
    },
    "ExtendedLocationType": {
      "type": "string",
      "description": "The enum defining type of ExtendedLocation accepted.",
      "enum": [
        "CustomLocation"
      ],
      "x-ms-enum": {
        "name": "ExtendedLocationType",
        "modelAsString": true,
        "values": [
          {
            "name": "CustomLocation",
            "value": "CustomLocation",
            "description": "CustomLocation type"
          }
        ]
      }
    },
    "FabricGuids": {
      "type": "object",
      "description": "Fabric one lake guids.",
      "properties": {
        "lakehouseGuid": {
          "type": "string",
          "description": "Fabric one lake house guid."
        },
        "workspaceGuid": {
          "type": "string",
          "description": "Fabric one lake workspace guid."
        }
      },
      "required": [
        "lakehouseGuid",
        "workspaceGuid"
      ]
    },
    "FabricGuidsUpdate": {
      "type": "object",
      "description": "Fabric one lake guids.",
      "properties": {
        "lakehouseGuid": {
          "type": "string",
          "description": "Fabric one lake house guid."
        },
        "workspaceGuid": {
          "type": "string",
          "description": "Fabric one lake workspace guid."
        }
      }
    },
    "FabricNames": {
      "type": "object",
      "description": "Fabric one lake names.",
      "properties": {
        "lakehouseName": {
          "type": "string",
          "description": "Fabric one lake house name."
        },
        "workspaceName": {
          "type": "string",
          "description": "Fabric one lake workspace name."
        }
      },
      "required": [
        "lakehouseName",
        "workspaceName"
      ]
    },
    "FabricNamesUpdate": {
      "type": "object",
      "description": "Fabric one lake names.",
      "properties": {
        "lakehouseName": {
          "type": "string",
          "description": "Fabric one lake house name."
        },
        "workspaceName": {
          "type": "string",
          "description": "Fabric one lake workspace name."
        }
      }
    },
    "FabricPathType": {
      "type": "string",
      "description": "Fabric path type to use.",
      "enum": [
        "files",
        "tables"
      ],
      "x-ms-enum": {
        "name": "FabricPathType",
        "modelAsString": true,
        "values": [
          {
            "name": "files",
            "value": "files",
            "description": "Fabric path type is Files."
          },
          {
            "name": "tables",
            "value": "tables",
            "description": "Fabric path type is Tables."
          }
        ]
      }
    },
    "Frontend": {
      "type": "object",
      "description": "Desired properties of the Frontend Instances of the DMQTT Broker",
      "properties": {
        "replicas": {
          "type": "integer",
          "format": "int32",
          "description": "Replicas is desired number of frontend replicas of the given distributed MQTT broker.",
          "minimum": 0,
          "maximum": 65535
        },
        "temporaryResourceLimits": {
          "description": "Defines the limits for resources of the frontend instances of the MQTT broker.",
          "type": "object",
          "properties": {
            "maxInflightMessages": {
              "type": "integer",
              "format": "int32",
              "description": "Maximum number of messages a client can have inflight.",
              "minimum": 0,
              "maximum": 65535
            },
            "maxInflightPatches": {
              "type": "integer",
              "format": "int32",
              "description": "Maximum number of patch inflight per node.",
              "minimum": 0,
              "maximum": 65535
            },
            "maxInflightPatchesPerClient": {
              "type": "integer",
              "format": "int32",
              "description": "Maximum number of patch a client can have in flight.",
              "minimum": 0,
              "maximum": 65535
            },
            "maxMessageExpirySecs": {
              "type": "integer",
              "format": "int64",
              "description": "Maximum message expiry interval, in seconds.",
              "minimum": 0,
              "maximum": 4294967295
            },
            "maxQueuedMessages": {
              "type": "integer",
              "format": "int64",
              "description": "Maximum receive for external clients.",
              "minimum": 0,
              "maximum": 9223372036854000000
            },
            "maxQueuedQos0Messages": {
              "type": "integer",
              "format": "int64",
              "description": "Maximum receive QoS0 for external clients.",
              "minimum": 0,
              "maximum": 9223372036854000000
            },
            "maxSessionExpirySecs": {
              "type": "integer",
              "format": "int64",
              "description": "Maximum session expiry interval, in seconds.",
              "minimum": 0,
              "maximum": 4294967295
            }
          },
          "required": [
            "maxInflightMessages",
            "maxInflightPatches",
            "maxInflightPatchesPerClient",
            "maxQueuedMessages",
            "maxQueuedQos0Messages",
            "maxSessionExpirySecs"
          ]
        },
        "workers": {
          "type": "integer",
          "format": "int32",
          "description": "Number of logical frontend workers per pod.",
          "default": 2,
          "minimum": 0,
          "maximum": 65535
        }
      },
      "required": [
        "replicas"
      ]
    },
    "FrontendUpdate": {
      "type": "object",
      "description": "Desired properties of the Frontend Instances of the DMQTT Broker",
      "properties": {
        "replicas": {
          "type": "integer",
          "format": "int32",
          "description": "Replicas is desired number of frontend replicas of the given distributed MQTT broker.",
          "minimum": 0,
          "maximum": 65535
        },
        "temporaryResourceLimits": {
          "description": "Defines the limits for resources of the frontend instances of the MQTT broker.",
          "type": "object",
          "properties": {
            "maxInflightMessages": {
              "type": "integer",
              "format": "int32",
              "description": "Maximum number of messages a client can have inflight.",
              "minimum": 0,
              "maximum": 65535
            },
            "maxInflightPatches": {
              "type": "integer",
              "format": "int32",
              "description": "Maximum number of patch inflight per node.",
              "minimum": 0,
              "maximum": 65535
            },
            "maxInflightPatchesPerClient": {
              "type": "integer",
              "format": "int32",
              "description": "Maximum number of patch a client can have in flight.",
              "minimum": 0,
              "maximum": 65535
            },
            "maxMessageExpirySecs": {
              "type": "integer",
              "format": "int64",
              "description": "Maximum message expiry interval, in seconds.",
              "minimum": 0,
              "maximum": 4294967295
            },
            "maxQueuedMessages": {
              "type": "integer",
              "format": "int64",
              "description": "Maximum receive for external clients.",
              "minimum": 0,
              "maximum": 9223372036854000000
            },
            "maxQueuedQos0Messages": {
              "type": "integer",
              "format": "int64",
              "description": "Maximum receive QoS0 for external clients.",
              "minimum": 0,
              "maximum": 9223372036854000000
            },
            "maxSessionExpirySecs": {
              "type": "integer",
              "format": "int64",
              "description": "Maximum session expiry interval, in seconds.",
              "minimum": 0,
              "maximum": 4294967295
            }
          }
        },
        "workers": {
          "type": "integer",
          "format": "int32",
          "description": "Number of logical frontend workers per pod.",
          "default": 2,
          "minimum": 0,
          "maximum": 65535
        }
      }
    },
    "KafkaAcks": {
      "type": "string",
      "description": "Kafka Acks enum properties",
      "enum": [
        "zero",
        "one",
        "all"
      ],
      "x-ms-enum": {
        "name": "KafkaAcks",
        "modelAsString": true,
        "values": [
          {
            "name": "zero",
            "value": "zero",
            "description": "Kafka acks zero."
          },
          {
            "name": "one",
            "value": "one",
            "description": "Kafka acks one."
          },
          {
            "name": "all",
            "value": "all",
            "description": "Kafka acks all."
          }
        ]
      }
    },
    "KafkaConnectorProperties": {
      "type": "object",
      "description": "KafkaConnector Properties",
      "properties": {
        "clientIdPrefix": {
          "type": "string",
          "description": "The client id prefix of the dynamically generated client ids."
        },
        "image": {
          "description": "The details of KafkaConnector Docker Image.",
          "type": "object",
          "properties": {
            "pullPolicy": {
              "type": "string",
              "description": "Image pull policy."
            },
            "pullSecrets": {
              "type": "string",
              "description": "Image pull secrets."
            },
            "repository": {
              "type": "string",
              "description": "The Docker image name."
            },
            "tag": {
              "type": "string",
              "description": "The Docker  image tag."
            }
          },
          "required": [
            "repository",
            "tag"
          ]
        },
        "instances": {
          "type": "integer",
          "format": "int32",
          "description": "The number of KafkaConnector pods to spin up.",
          "minimum": 0,
          "maximum": 65535
        },
        "kafkaConnection": {
          "description": "The details for connecting with Remote Kafka Broker.",
          "type": "object",
          "properties": {
            "authentication": {
              "description": "The remote broker authentication methods.",
              "type": "object",
              "properties": {
                "authType": {
                  "description": "The type of authentication to use for Kafka remote broker.",
                  "type": "object",
                  "properties": {
                    "sasl": {
                      "description": "Sasl remote broker authentication method.",
                      "type": "object",
                      "properties": {
                        "saslType": {
                          "description": "Sasl Mechanism for remote broker authentication.",
                          "type": "string",
                          "enum": [
                            "plain",
                            "scramSha256",
                            "scramSha512"
                          ],
                          "x-ms-enum": {
                            "name": "KafkaSaslType",
                            "modelAsString": true,
                            "values": [
                              {
                                "name": "plain",
                                "value": "plain",
                                "description": "Sasl Plain authentication."
                              },
                              {
                                "name": "scramSha256",
                                "value": "scramSha256",
                                "description": "Sasl ScramSha256 authentication."
                              },
                              {
                                "name": "scramSha512",
                                "value": "scramSha512",
                                "description": "Sasl ScramSha512 authentication."
                              }
                            ]
                          }
                        },
                        "token": {
                          "description": "Sasl token for remote broker authentication.",
                          "type": "object",
                          "properties": {
                            "keyVault": {
                              "description": "Keyvault token keyvault secret properties.",
                              "type": "object",
                              "properties": {
                                "username": {
                                  "type": "string",
                                  "description": "Username to connect with."
                                },
                                "vault": {
                                  "description": "KeyVault properties.",
                                  "type": "object",
                                  "properties": {
                                    "credentials": {
                                      "description": "KeyVault credentials.",
                                      "type": "object",
                                      "properties": {
                                        "servicePrincipalLocalSecretName": {
                                          "type": "string",
                                          "description": "KeyVault service principal local secret name."
                                        }
                                      },
                                      "required": [
                                        "servicePrincipalLocalSecretName"
                                      ]
                                    },
                                    "directoryId": {
                                      "type": "string",
                                      "description": "KeyVault directoryId."
                                    },
                                    "name": {
                                      "type": "string",
                                      "description": "KeyVault name."
                                    }
                                  },
                                  "required": [
                                    "credentials",
                                    "directoryId",
                                    "name"
                                  ]
                                },
                                "vaultSecret": {
                                  "description": "KeyVault secret details.",
                                  "type": "object",
                                  "properties": {
                                    "name": {
                                      "type": "string",
                                      "description": "KeyVault secret name."
                                    },
                                    "version": {
                                      "type": "string",
                                      "description": "KeyVault secret version."
                                    }
                                  },
                                  "required": [
                                    "name"
                                  ]
                                }
                              },
                              "required": [
                                "vault",
                                "vaultSecret"
                              ]
                            },
                            "secretName": {
                              "type": "string",
                              "description": "Secret where cert details are stored."
                            }
                          }
                        }
                      },
                      "required": [
                        "saslType",
                        "token"
                      ]
                    },
                    "systemAssignedManagedIdentity": {
                      "description": "Managed identity remote broker authentication method.",
                      "type": "object",
                      "properties": {
                        "audience": {
                          "type": "string",
                          "description": "Token audience."
                        },
                        "extensionName": {
                          "type": "string",
                          "description": "Arc Extension name."
                        }
                      },
                      "required": [
                        "audience"
                      ]
                    },
                    "x509": {
                      "description": "X509 remote broker authentication method.",
                      "type": "object",
                      "properties": {
                        "keyVault": {
                          "description": "Keyvault X509 secret properties.",
                          "type": "object",
                          "properties": {
                            "vault": {
                              "description": "KeyVault properties.",
                              "type": "object",
                              "properties": {
                                "credentials": {
                                  "description": "KeyVault credentials.",
                                  "type": "object",
                                  "properties": {
                                    "servicePrincipalLocalSecretName": {
                                      "type": "string",
                                      "description": "KeyVault service principal local secret name."
                                    }
                                  },
                                  "required": [
                                    "servicePrincipalLocalSecretName"
                                  ]
                                },
                                "directoryId": {
                                  "type": "string",
                                  "description": "KeyVault directoryId."
                                },
                                "name": {
                                  "type": "string",
                                  "description": "KeyVault name."
                                }
                              },
                              "required": [
                                "credentials",
                                "directoryId",
                                "name"
                              ]
                            },
                            "vaultCaChainSecret": {
                              "description": "KeyVault CA chain secret details.",
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "KeyVault secret name."
                                },
                                "version": {
                                  "type": "string",
                                  "description": "KeyVault secret version."
                                }
                              },
                              "required": [
                                "name"
                              ]
                            },
                            "vaultCert": {
                              "description": "KeyVault Cert secret details.",
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "KeyVault secret name."
                                },
                                "version": {
                                  "type": "string",
                                  "description": "KeyVault secret version."
                                }
                              },
                              "required": [
                                "name"
                              ]
                            }
                          },
                          "required": [
                            "vault",
                            "vaultCert"
                          ]
                        },
                        "secretName": {
                          "type": "string",
                          "description": "Secret where cert details are stored."
                        }
                      }
                    }
                  }
                },
                "enabled": {
                  "type": "boolean",
                  "description": "If authentication is enabled for Kafka remote broker."
                }
              },
              "required": [
                "enabled"
              ]
            },
            "endpoint": {
              "type": "string",
              "description": "The endpoint of remote broker to connect to."
            },
            "tls": {
              "description": "TLS details for Remote broker Connection.",
              "type": "object",
              "properties": {
                "tlsEnabled": {
                  "type": "boolean",
                  "description": "Tls Enabled on Remote Broker Connection."
                },
                "trustedCaCertificateConfigMap": {
                  "type": "string",
                  "description": "Trusted CA certificate name for Remote Broker."
                }
              },
              "required": [
                "tlsEnabled"
              ]
            }
          },
          "required": [
            "authentication",
            "endpoint",
            "tls"
          ]
        },
        "localBrokerConnection": {
          "description": "The details for connecting with Local Broker.",
          "type": "object",
          "properties": {
            "authentication": {
              "description": "The authentication methods for LocalBroker connection. NOTE - Enum only one method at a time is supported.",
              "type": "object",
              "properties": {
                "kubernetes": {
                  "description": "Kubernetes local broker authentication method.",
                  "type": "object",
                  "properties": {
                    "secretPath": {
                      "type": "string",
                      "description": "Secret Path where SAT is mounted.",
                      "default": "/var/run/serviceaccount/localbroker"
                    },
                    "serviceAccountTokenName": {
                      "type": "string",
                      "description": "Token name where SAT is mounted on secret path.",
                      "default": "sat"
                    }
                  }
                }
              },
              "required": [
                "kubernetes"
              ]
            },
            "endpoint": {
              "type": "string",
              "description": "The endpoint of local broker to connect to.",
              "default": "aio-mq-dmqtt-frontend:1883"
            },
            "tls": {
              "description": "TLS details for Local broker Connection.",
              "type": "object",
              "properties": {
                "tlsEnabled": {
                  "type": "boolean",
                  "description": "Tls Enabled on Local Broker Connection.",
                  "default": false
                },
                "trustedCaCertificateConfigMap": {
                  "type": "string",
                  "description": "Trusted CA certificate config map name for Local Broker."
                }
              }
            }
          }
        },
        "logLevel": {
          "type": "string",
          "description": "The log level of the Bridge Connector instances.",
          "default": "info"
        },
        "nodeTolerations": {
          "description": "The Node Tolerations for the Bridge Connector pods.",
          "type": "object",
          "properties": {
            "effect": {
              "type": "string",
              "description": "Toleration effect."
            },
            "key": {
              "type": "string",
              "description": "Toleration key."
            },
            "operator": {
              "type": "string",
              "description": "Toleration operator like 'Exists', 'Equal' etc."
            },
            "value": {
              "type": "string",
              "description": "Toleration Value."
            }
          },
          "required": [
            "effect",
            "key",
            "operator",
            "value"
          ]
        },
        "provisioningState": {
          "description": "The status of the last operation.",
          "readOnly": true,
          "type": "string",
          "enum": [
            "Succeeded",
            "Failed",
            "Canceled",
            "Provisioning",
            "Updating",
            "Deleting",
            "Accepted"
          ],
          "x-ms-enum": {
            "name": "ProvisioningState",
            "modelAsString": true,
            "values": [
              {
                "name": "Succeeded",
                "value": "Succeeded",
                "description": "Resource has been created."
              },
              {
                "name": "Failed",
                "value": "Failed",
                "description": "Resource creation failed."
              },
              {
                "name": "Canceled",
                "value": "Canceled",
                "description": "Resource creation was canceled."
              },
              {
                "name": "Provisioning",
                "value": "Provisioning",
                "description": "Resource is getting provisioned."
              },
              {
                "name": "Updating",
                "value": "Updating",
                "description": "Resource is Updating."
              },
              {
                "name": "Deleting",
                "value": "Deleting",
                "description": "Resource is Deleting."
              },
              {
                "name": "Accepted",
                "value": "Accepted",
                "description": "Resource has been Accepted."
              }
            ]
          }
        }
      },
      "required": [
        "kafkaConnection"
      ]
    },
    "KafkaConnectorResource": {
      "type": "object",
      "description": "MQ kafkaConnector resource",
      "properties": {
        "id": {
          "type": "string",
          "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "The name of the resource",
          "readOnly": true
        },
        "type": {
          "type": "string",
          "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
          "readOnly": true
        },
        "systemData": {
          "type": "object",
          "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
          "readOnly": true,
          "properties": {
            "createdBy": {
              "type": "string",
              "description": "The identity that created the resource."
            },
            "createdByType": {
              "type": "string",
              "description": "The type of identity that created the resource.",
              "enum": [
                "User",
                "Application",
                "ManagedIdentity",
                "Key"
              ],
              "x-ms-enum": {
                "name": "createdByType",
                "modelAsString": true
              }
            },
            "createdAt": {
              "type": "string",
              "format": "date-time",
              "description": "The timestamp of resource creation (UTC)."
            },
            "lastModifiedBy": {
              "type": "string",
              "description": "The identity that last modified the resource."
            },
            "lastModifiedByType": {
              "type": "string",
              "description": "The type of identity that last modified the resource.",
              "enum": [
                "User",
                "Application",
                "ManagedIdentity",
                "Key"
              ],
              "x-ms-enum": {
                "name": "createdByType",
                "modelAsString": true
              }
            },
            "lastModifiedAt": {
              "type": "string",
              "format": "date-time",
              "description": "The timestamp of resource last modification (UTC)"
            }
          }
        },
        "tags": {
          "type": "object",
          "description": "Resource tags.",
          "additionalProperties": {
            "type": "string"
          },
          "x-ms-mutability": [
            "read",
            "create",
            "update"
          ]
        },
        "location": {
          "type": "string",
          "description": "The geo-location where the resource lives",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "properties": {
          "description": "The resource-specific properties for this resource.",
          "x-ms-client-flatten": true,
          "type": "object",
          "properties": {
            "clientIdPrefix": {
              "type": "string",
              "description": "The client id prefix of the dynamically generated client ids."
            },
            "image": {
              "description": "The details of KafkaConnector Docker Image.",
              "type": "object",
              "properties": {
                "pullPolicy": {
                  "type": "string",
                  "description": "Image pull policy."
                },
                "pullSecrets": {
                  "type": "string",
                  "description": "Image pull secrets."
                },
                "repository": {
                  "type": "string",
                  "description": "The Docker image name."
                },
                "tag": {
                  "type": "string",
                  "description": "The Docker  image tag."
                }
              },
              "required": [
                "repository",
                "tag"
              ]
            },
            "instances": {
              "type": "integer",
              "format": "int32",
              "description": "The number of KafkaConnector pods to spin up.",
              "minimum": 0,
              "maximum": 65535
            },
            "kafkaConnection": {
              "description": "The details for connecting with Remote Kafka Broker.",
              "type": "object",
              "properties": {
                "authentication": {
                  "description": "The remote broker authentication methods.",
                  "type": "object",
                  "properties": {
                    "authType": {
                      "description": "The type of authentication to use for Kafka remote broker.",
                      "type": "object",
                      "properties": {
                        "sasl": {
                          "description": "Sasl remote broker authentication method.",
                          "type": "object",
                          "properties": {
                            "saslType": {
                              "description": "Sasl Mechanism for remote broker authentication.",
                              "type": "string",
                              "enum": [
                                "plain",
                                "scramSha256",
                                "scramSha512"
                              ],
                              "x-ms-enum": {
                                "name": "KafkaSaslType",
                                "modelAsString": true,
                                "values": [
                                  {
                                    "name": "plain",
                                    "value": "plain",
                                    "description": "Sasl Plain authentication."
                                  },
                                  {
                                    "name": "scramSha256",
                                    "value": "scramSha256",
                                    "description": "Sasl ScramSha256 authentication."
                                  },
                                  {
                                    "name": "scramSha512",
                                    "value": "scramSha512",
                                    "description": "Sasl ScramSha512 authentication."
                                  }
                                ]
                              }
                            },
                            "token": {
                              "description": "Sasl token for remote broker authentication.",
                              "type": "object",
                              "properties": {
                                "keyVault": {
                                  "description": "Keyvault token keyvault secret properties.",
                                  "type": "object",
                                  "properties": {
                                    "username": {
                                      "type": "string",
                                      "description": "Username to connect with."
                                    },
                                    "vault": {
                                      "description": "KeyVault properties.",
                                      "type": "object",
                                      "properties": {
                                        "credentials": {
                                          "description": "KeyVault credentials.",
                                          "type": "object",
                                          "properties": {
                                            "servicePrincipalLocalSecretName": {
                                              "type": "string",
                                              "description": "KeyVault service principal local secret name."
                                            }
                                          },
                                          "required": [
                                            "servicePrincipalLocalSecretName"
                                          ]
                                        },
                                        "directoryId": {
                                          "type": "string",
                                          "description": "KeyVault directoryId."
                                        },
                                        "name": {
                                          "type": "string",
                                          "description": "KeyVault name."
                                        }
                                      },
                                      "required": [
                                        "credentials",
                                        "directoryId",
                                        "name"
                                      ]
                                    },
                                    "vaultSecret": {
                                      "description": "KeyVault secret details.",
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "description": "KeyVault secret name."
                                        },
                                        "version": {
                                          "type": "string",
                                          "description": "KeyVault secret version."
                                        }
                                      },
                                      "required": [
                                        "name"
                                      ]
                                    }
                                  },
                                  "required": [
                                    "vault",
                                    "vaultSecret"
                                  ]
                                },
                                "secretName": {
                                  "type": "string",
                                  "description": "Secret where cert details are stored."
                                }
                              }
                            }
                          },
                          "required": [
                            "saslType",
                            "token"
                          ]
                        },
                        "systemAssignedManagedIdentity": {
                          "description": "Managed identity remote broker authentication method.",
                          "type": "object",
                          "properties": {
                            "audience": {
                              "type": "string",
                              "description": "Token audience."
                            },
                            "extensionName": {
                              "type": "string",
                              "description": "Arc Extension name."
                            }
                          },
                          "required": [
                            "audience"
                          ]
                        },
                        "x509": {
                          "description": "X509 remote broker authentication method.",
                          "type": "object",
                          "properties": {
                            "keyVault": {
                              "description": "Keyvault X509 secret properties.",
                              "type": "object",
                              "properties": {
                                "vault": {
                                  "description": "KeyVault properties.",
                                  "type": "object",
                                  "properties": {
                                    "credentials": {
                                      "description": "KeyVault credentials.",
                                      "type": "object",
                                      "properties": {
                                        "servicePrincipalLocalSecretName": {
                                          "type": "string",
                                          "description": "KeyVault service principal local secret name."
                                        }
                                      },
                                      "required": [
                                        "servicePrincipalLocalSecretName"
                                      ]
                                    },
                                    "directoryId": {
                                      "type": "string",
                                      "description": "KeyVault directoryId."
                                    },
                                    "name": {
                                      "type": "string",
                                      "description": "KeyVault name."
                                    }
                                  },
                                  "required": [
                                    "credentials",
                                    "directoryId",
                                    "name"
                                  ]
                                },
                                "vaultCaChainSecret": {
                                  "description": "KeyVault CA chain secret details.",
                                  "type": "object",
                                  "properties": {
                                    "name": {
                                      "type": "string",
                                      "description": "KeyVault secret name."
                                    },
                                    "version": {
                                      "type": "string",
                                      "description": "KeyVault secret version."
                                    }
                                  },
                                  "required": [
                                    "name"
                                  ]
                                },
                                "vaultCert": {
                                  "description": "KeyVault Cert secret details.",
                                  "type": "object",
                                  "properties": {
                                    "name": {
                                      "type": "string",
                                      "description": "KeyVault secret name."
                                    },
                                    "version": {
                                      "type": "string",
                                      "description": "KeyVault secret version."
                                    }
                                  },
                                  "required": [
                                    "name"
                                  ]
                                }
                              },
                              "required": [
                                "vault",
                                "vaultCert"
                              ]
                            },
                            "secretName": {
                              "type": "string",
                              "description": "Secret where cert details are stored."
                            }
                          }
                        }
                      }
                    },
                    "enabled": {
                      "type": "boolean",
                      "description": "If authentication is enabled for Kafka remote broker."
                    }
                  },
                  "required": [
                    "enabled"
                  ]
                },
                "endpoint": {
                  "type": "string",
                  "description": "The endpoint of remote broker to connect to."
                },
                "tls": {
                  "description": "TLS details for Remote broker Connection.",
                  "type": "object",
                  "properties": {
                    "tlsEnabled": {
                      "type": "boolean",
                      "description": "Tls Enabled on Remote Broker Connection."
                    },
                    "trustedCaCertificateConfigMap": {
                      "type": "string",
                      "description": "Trusted CA certificate name for Remote Broker."
                    }
                  },
                  "required": [
                    "tlsEnabled"
                  ]
                }
              },
              "required": [
                "authentication",
                "endpoint",
                "tls"
              ]
            },
            "localBrokerConnection": {
              "description": "The details for connecting with Local Broker.",
              "type": "object",
              "properties": {
                "authentication": {
                  "description": "The authentication methods for LocalBroker connection. NOTE - Enum only one method at a time is supported.",
                  "type": "object",
                  "properties": {
                    "kubernetes": {
                      "description": "Kubernetes local broker authentication method.",
                      "type": "object",
                      "properties": {
                        "secretPath": {
                          "type": "string",
                          "description": "Secret Path where SAT is mounted.",
                          "default": "/var/run/serviceaccount/localbroker"
                        },
                        "serviceAccountTokenName": {
                          "type": "string",
                          "description": "Token name where SAT is mounted on secret path.",
                          "default": "sat"
                        }
                      }
                    }
                  },
                  "required": [
                    "kubernetes"
                  ]
                },
                "endpoint": {
                  "type": "string",
                  "description": "The endpoint of local broker to connect to.",
                  "default": "aio-mq-dmqtt-frontend:1883"
                },
                "tls": {
                  "description": "TLS details for Local broker Connection.",
                  "type": "object",
                  "properties": {
                    "tlsEnabled": {
                      "type": "boolean",
                      "description": "Tls Enabled on Local Broker Connection.",
                      "default": false
                    },
                    "trustedCaCertificateConfigMap": {
                      "type": "string",
                      "description": "Trusted CA certificate config map name for Local Broker."
                    }
                  }
                }
              }
            },
            "logLevel": {
              "type": "string",
              "description": "The log level of the Bridge Connector instances.",
              "default": "info"
            },
            "nodeTolerations": {
              "description": "The Node Tolerations for the Bridge Connector pods.",
              "type": "object",
              "properties": {
                "effect": {
                  "type": "string",
                  "description": "Toleration effect."
                },
                "key": {
                  "type": "string",
                  "description": "Toleration key."
                },
                "operator": {
                  "type": "string",
                  "description": "Toleration operator like 'Exists', 'Equal' etc."
                },
                "value": {
                  "type": "string",
                  "description": "Toleration Value."
                }
              },
              "required": [
                "effect",
                "key",
                "operator",
                "value"
              ]
            },
            "provisioningState": {
              "description": "The status of the last operation.",
              "readOnly": true,
              "type": "string",
              "enum": [
                "Succeeded",
                "Failed",
                "Canceled",
                "Provisioning",
                "Updating",
                "Deleting",
                "Accepted"
              ],
              "x-ms-enum": {
                "name": "ProvisioningState",
                "modelAsString": true,
                "values": [
                  {
                    "name": "Succeeded",
                    "value": "Succeeded",
                    "description": "Resource has been created."
                  },
                  {
                    "name": "Failed",
                    "value": "Failed",
                    "description": "Resource creation failed."
                  },
                  {
                    "name": "Canceled",
                    "value": "Canceled",
                    "description": "Resource creation was canceled."
                  },
                  {
                    "name": "Provisioning",
                    "value": "Provisioning",
                    "description": "Resource is getting provisioned."
                  },
                  {
                    "name": "Updating",
                    "value": "Updating",
                    "description": "Resource is Updating."
                  },
                  {
                    "name": "Deleting",
                    "value": "Deleting",
                    "description": "Resource is Deleting."
                  },
                  {
                    "name": "Accepted",
                    "value": "Accepted",
                    "description": "Resource has been Accepted."
                  }
                ]
              }
            }
          },
          "required": [
            "kafkaConnection"
          ]
        },
        "extendedLocation": {
          "description": "Extended Location",
          "x-ms-mutability": [
            "read",
            "create"
          ],
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name of the extended location."
            },
            "type": {
              "description": "Type of ExtendedLocation.",
              "type": "string",
              "enum": [
                "CustomLocation"
              ],
              "x-ms-enum": {
                "name": "ExtendedLocationType",
                "modelAsString": true,
                "values": [
                  {
                    "name": "CustomLocation",
                    "value": "CustomLocation",
                    "description": "CustomLocation type"
                  }
                ]
              }
            }
          },
          "required": [
            "name",
            "type"
          ]
        }
      },
      "required": [
        "extendedLocation"
      ]
    },
    "KafkaConnectorResourceListResult": {
      "type": "object",
      "description": "The response of a KafkaConnectorResource list operation.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The KafkaConnectorResource items on this page",
          "items": {
            "type": "object",
            "description": "MQ kafkaConnector resource",
            "properties": {
              "id": {
                "type": "string",
                "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                "readOnly": true
              },
              "name": {
                "type": "string",
                "description": "The name of the resource",
                "readOnly": true
              },
              "type": {
                "type": "string",
                "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                "readOnly": true
              },
              "systemData": {
                "type": "object",
                "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                "readOnly": true,
                "properties": {
                  "createdBy": {
                    "type": "string",
                    "description": "The identity that created the resource."
                  },
                  "createdByType": {
                    "type": "string",
                    "description": "The type of identity that created the resource.",
                    "enum": [
                      "User",
                      "Application",
                      "ManagedIdentity",
                      "Key"
                    ],
                    "x-ms-enum": {
                      "name": "createdByType",
                      "modelAsString": true
                    }
                  },
                  "createdAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp of resource creation (UTC)."
                  },
                  "lastModifiedBy": {
                    "type": "string",
                    "description": "The identity that last modified the resource."
                  },
                  "lastModifiedByType": {
                    "type": "string",
                    "description": "The type of identity that last modified the resource.",
                    "enum": [
                      "User",
                      "Application",
                      "ManagedIdentity",
                      "Key"
                    ],
                    "x-ms-enum": {
                      "name": "createdByType",
                      "modelAsString": true
                    }
                  },
                  "lastModifiedAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp of resource last modification (UTC)"
                  }
                }
              },
              "tags": {
                "type": "object",
                "description": "Resource tags.",
                "additionalProperties": {
                  "type": "string"
                },
                "x-ms-mutability": [
                  "read",
                  "create",
                  "update"
                ]
              },
              "location": {
                "type": "string",
                "description": "The geo-location where the resource lives",
                "x-ms-mutability": [
                  "read",
                  "create"
                ]
              },
              "properties": {
                "description": "The resource-specific properties for this resource.",
                "x-ms-client-flatten": true,
                "type": "object",
                "properties": {
                  "clientIdPrefix": {
                    "type": "string",
                    "description": "The client id prefix of the dynamically generated client ids."
                  },
                  "image": {
                    "description": "The details of KafkaConnector Docker Image.",
                    "type": "object",
                    "properties": {
                      "pullPolicy": {
                        "type": "string",
                        "description": "Image pull policy."
                      },
                      "pullSecrets": {
                        "type": "string",
                        "description": "Image pull secrets."
                      },
                      "repository": {
                        "type": "string",
                        "description": "The Docker image name."
                      },
                      "tag": {
                        "type": "string",
                        "description": "The Docker  image tag."
                      }
                    },
                    "required": [
                      "repository",
                      "tag"
                    ]
                  },
                  "instances": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The number of KafkaConnector pods to spin up.",
                    "minimum": 0,
                    "maximum": 65535
                  },
                  "kafkaConnection": {
                    "description": "The details for connecting with Remote Kafka Broker.",
                    "type": "object",
                    "properties": {
                      "authentication": {
                        "description": "The remote broker authentication methods.",
                        "type": "object",
                        "properties": {
                          "authType": {
                            "description": "The type of authentication to use for Kafka remote broker.",
                            "type": "object",
                            "properties": {
                              "sasl": {
                                "description": "Sasl remote broker authentication method.",
                                "type": "object",
                                "properties": {
                                  "saslType": {
                                    "description": "Sasl Mechanism for remote broker authentication.",
                                    "type": "string",
                                    "enum": [
                                      "plain",
                                      "scramSha256",
                                      "scramSha512"
                                    ],
                                    "x-ms-enum": {
                                      "name": "KafkaSaslType",
                                      "modelAsString": true,
                                      "values": [
                                        {
                                          "name": "plain",
                                          "value": "plain",
                                          "description": "Sasl Plain authentication."
                                        },
                                        {
                                          "name": "scramSha256",
                                          "value": "scramSha256",
                                          "description": "Sasl ScramSha256 authentication."
                                        },
                                        {
                                          "name": "scramSha512",
                                          "value": "scramSha512",
                                          "description": "Sasl ScramSha512 authentication."
                                        }
                                      ]
                                    }
                                  },
                                  "token": {
                                    "description": "Sasl token for remote broker authentication.",
                                    "type": "object",
                                    "properties": {
                                      "keyVault": {
                                        "description": "Keyvault token keyvault secret properties.",
                                        "type": "object",
                                        "properties": {
                                          "username": {
                                            "type": "string",
                                            "description": "Username to connect with."
                                          },
                                          "vault": {
                                            "description": "KeyVault properties.",
                                            "type": "object",
                                            "properties": {
                                              "credentials": {
                                                "description": "KeyVault credentials.",
                                                "type": "object",
                                                "properties": {
                                                  "servicePrincipalLocalSecretName": {
                                                    "type": "string",
                                                    "description": "KeyVault service principal local secret name."
                                                  }
                                                },
                                                "required": [
                                                  "servicePrincipalLocalSecretName"
                                                ]
                                              },
                                              "directoryId": {
                                                "type": "string",
                                                "description": "KeyVault directoryId."
                                              },
                                              "name": {
                                                "type": "string",
                                                "description": "KeyVault name."
                                              }
                                            },
                                            "required": [
                                              "credentials",
                                              "directoryId",
                                              "name"
                                            ]
                                          },
                                          "vaultSecret": {
                                            "description": "KeyVault secret details.",
                                            "type": "object",
                                            "properties": {
                                              "name": {
                                                "type": "string",
                                                "description": "KeyVault secret name."
                                              },
                                              "version": {
                                                "type": "string",
                                                "description": "KeyVault secret version."
                                              }
                                            },
                                            "required": [
                                              "name"
                                            ]
                                          }
                                        },
                                        "required": [
                                          "vault",
                                          "vaultSecret"
                                        ]
                                      },
                                      "secretName": {
                                        "type": "string",
                                        "description": "Secret where cert details are stored."
                                      }
                                    }
                                  }
                                },
                                "required": [
                                  "saslType",
                                  "token"
                                ]
                              },
                              "systemAssignedManagedIdentity": {
                                "description": "Managed identity remote broker authentication method.",
                                "type": "object",
                                "properties": {
                                  "audience": {
                                    "type": "string",
                                    "description": "Token audience."
                                  },
                                  "extensionName": {
                                    "type": "string",
                                    "description": "Arc Extension name."
                                  }
                                },
                                "required": [
                                  "audience"
                                ]
                              },
                              "x509": {
                                "description": "X509 remote broker authentication method.",
                                "type": "object",
                                "properties": {
                                  "keyVault": {
                                    "description": "Keyvault X509 secret properties.",
                                    "type": "object",
                                    "properties": {
                                      "vault": {
                                        "description": "KeyVault properties.",
                                        "type": "object",
                                        "properties": {
                                          "credentials": {
                                            "description": "KeyVault credentials.",
                                            "type": "object",
                                            "properties": {
                                              "servicePrincipalLocalSecretName": {
                                                "type": "string",
                                                "description": "KeyVault service principal local secret name."
                                              }
                                            },
                                            "required": [
                                              "servicePrincipalLocalSecretName"
                                            ]
                                          },
                                          "directoryId": {
                                            "type": "string",
                                            "description": "KeyVault directoryId."
                                          },
                                          "name": {
                                            "type": "string",
                                            "description": "KeyVault name."
                                          }
                                        },
                                        "required": [
                                          "credentials",
                                          "directoryId",
                                          "name"
                                        ]
                                      },
                                      "vaultCaChainSecret": {
                                        "description": "KeyVault CA chain secret details.",
                                        "type": "object",
                                        "properties": {
                                          "name": {
                                            "type": "string",
                                            "description": "KeyVault secret name."
                                          },
                                          "version": {
                                            "type": "string",
                                            "description": "KeyVault secret version."
                                          }
                                        },
                                        "required": [
                                          "name"
                                        ]
                                      },
                                      "vaultCert": {
                                        "description": "KeyVault Cert secret details.",
                                        "type": "object",
                                        "properties": {
                                          "name": {
                                            "type": "string",
                                            "description": "KeyVault secret name."
                                          },
                                          "version": {
                                            "type": "string",
                                            "description": "KeyVault secret version."
                                          }
                                        },
                                        "required": [
                                          "name"
                                        ]
                                      }
                                    },
                                    "required": [
                                      "vault",
                                      "vaultCert"
                                    ]
                                  },
                                  "secretName": {
                                    "type": "string",
                                    "description": "Secret where cert details are stored."
                                  }
                                }
                              }
                            }
                          },
                          "enabled": {
                            "type": "boolean",
                            "description": "If authentication is enabled for Kafka remote broker."
                          }
                        },
                        "required": [
                          "enabled"
                        ]
                      },
                      "endpoint": {
                        "type": "string",
                        "description": "The endpoint of remote broker to connect to."
                      },
                      "tls": {
                        "description": "TLS details for Remote broker Connection.",
                        "type": "object",
                        "properties": {
                          "tlsEnabled": {
                            "type": "boolean",
                            "description": "Tls Enabled on Remote Broker Connection."
                          },
                          "trustedCaCertificateConfigMap": {
                            "type": "string",
                            "description": "Trusted CA certificate name for Remote Broker."
                          }
                        },
                        "required": [
                          "tlsEnabled"
                        ]
                      }
                    },
                    "required": [
                      "authentication",
                      "endpoint",
                      "tls"
                    ]
                  },
                  "localBrokerConnection": {
                    "description": "The details for connecting with Local Broker.",
                    "type": "object",
                    "properties": {
                      "authentication": {
                        "description": "The authentication methods for LocalBroker connection. NOTE - Enum only one method at a time is supported.",
                        "type": "object",
                        "properties": {
                          "kubernetes": {
                            "description": "Kubernetes local broker authentication method.",
                            "type": "object",
                            "properties": {
                              "secretPath": {
                                "type": "string",
                                "description": "Secret Path where SAT is mounted.",
                                "default": "/var/run/serviceaccount/localbroker"
                              },
                              "serviceAccountTokenName": {
                                "type": "string",
                                "description": "Token name where SAT is mounted on secret path.",
                                "default": "sat"
                              }
                            }
                          }
                        },
                        "required": [
                          "kubernetes"
                        ]
                      },
                      "endpoint": {
                        "type": "string",
                        "description": "The endpoint of local broker to connect to.",
                        "default": "aio-mq-dmqtt-frontend:1883"
                      },
                      "tls": {
                        "description": "TLS details for Local broker Connection.",
                        "type": "object",
                        "properties": {
                          "tlsEnabled": {
                            "type": "boolean",
                            "description": "Tls Enabled on Local Broker Connection.",
                            "default": false
                          },
                          "trustedCaCertificateConfigMap": {
                            "type": "string",
                            "description": "Trusted CA certificate config map name for Local Broker."
                          }
                        }
                      }
                    }
                  },
                  "logLevel": {
                    "type": "string",
                    "description": "The log level of the Bridge Connector instances.",
                    "default": "info"
                  },
                  "nodeTolerations": {
                    "description": "The Node Tolerations for the Bridge Connector pods.",
                    "type": "object",
                    "properties": {
                      "effect": {
                        "type": "string",
                        "description": "Toleration effect."
                      },
                      "key": {
                        "type": "string",
                        "description": "Toleration key."
                      },
                      "operator": {
                        "type": "string",
                        "description": "Toleration operator like 'Exists', 'Equal' etc."
                      },
                      "value": {
                        "type": "string",
                        "description": "Toleration Value."
                      }
                    },
                    "required": [
                      "effect",
                      "key",
                      "operator",
                      "value"
                    ]
                  },
                  "provisioningState": {
                    "description": "The status of the last operation.",
                    "readOnly": true,
                    "type": "string",
                    "enum": [
                      "Succeeded",
                      "Failed",
                      "Canceled",
                      "Provisioning",
                      "Updating",
                      "Deleting",
                      "Accepted"
                    ],
                    "x-ms-enum": {
                      "name": "ProvisioningState",
                      "modelAsString": true,
                      "values": [
                        {
                          "name": "Succeeded",
                          "value": "Succeeded",
                          "description": "Resource has been created."
                        },
                        {
                          "name": "Failed",
                          "value": "Failed",
                          "description": "Resource creation failed."
                        },
                        {
                          "name": "Canceled",
                          "value": "Canceled",
                          "description": "Resource creation was canceled."
                        },
                        {
                          "name": "Provisioning",
                          "value": "Provisioning",
                          "description": "Resource is getting provisioned."
                        },
                        {
                          "name": "Updating",
                          "value": "Updating",
                          "description": "Resource is Updating."
                        },
                        {
                          "name": "Deleting",
                          "value": "Deleting",
                          "description": "Resource is Deleting."
                        },
                        {
                          "name": "Accepted",
                          "value": "Accepted",
                          "description": "Resource has been Accepted."
                        }
                      ]
                    }
                  }
                },
                "required": [
                  "kafkaConnection"
                ]
              },
              "extendedLocation": {
                "description": "Extended Location",
                "x-ms-mutability": [
                  "read",
                  "create"
                ],
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the extended location."
                  },
                  "type": {
                    "description": "Type of ExtendedLocation.",
                    "type": "string",
                    "enum": [
                      "CustomLocation"
                    ],
                    "x-ms-enum": {
                      "name": "ExtendedLocationType",
                      "modelAsString": true,
                      "values": [
                        {
                          "name": "CustomLocation",
                          "value": "CustomLocation",
                          "description": "CustomLocation type"
                        }
                      ]
                    }
                  }
                },
                "required": [
                  "name",
                  "type"
                ]
              }
            },
            "required": [
              "extendedLocation"
            ]
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "KafkaConnectorResourceUpdate": {
      "type": "object",
      "description": "The type used for update operations of the KafkaConnectorResource.",
      "properties": {
        "tags": {
          "type": "object",
          "description": "Resource tags.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "properties": {
          "description": "The resource-specific properties for this resource.",
          "x-ms-client-flatten": true,
          "type": "object",
          "properties": {
            "clientIdPrefix": {
              "type": "string",
              "description": "The client id prefix of the dynamically generated client ids."
            },
            "image": {
              "description": "The details of KafkaConnector Docker Image.",
              "type": "object",
              "properties": {
                "pullPolicy": {
                  "type": "string",
                  "description": "Image pull policy."
                },
                "pullSecrets": {
                  "type": "string",
                  "description": "Image pull secrets."
                },
                "repository": {
                  "type": "string",
                  "description": "The Docker image name."
                },
                "tag": {
                  "type": "string",
                  "description": "The Docker  image tag."
                }
              }
            },
            "instances": {
              "type": "integer",
              "format": "int32",
              "description": "The number of KafkaConnector pods to spin up.",
              "minimum": 0,
              "maximum": 65535
            },
            "kafkaConnection": {
              "description": "The details for connecting with Remote Kafka Broker.",
              "type": "object",
              "properties": {
                "authentication": {
                  "description": "The remote broker authentication methods.",
                  "type": "object",
                  "properties": {
                    "authType": {
                      "description": "The type of authentication to use for Kafka remote broker.",
                      "type": "object",
                      "properties": {
                        "sasl": {
                          "description": "Sasl remote broker authentication method.",
                          "type": "object",
                          "properties": {
                            "saslType": {
                              "description": "Sasl Mechanism for remote broker authentication.",
                              "type": "string",
                              "enum": [
                                "plain",
                                "scramSha256",
                                "scramSha512"
                              ],
                              "x-ms-enum": {
                                "name": "KafkaSaslType",
                                "modelAsString": true,
                                "values": [
                                  {
                                    "name": "plain",
                                    "value": "plain",
                                    "description": "Sasl Plain authentication."
                                  },
                                  {
                                    "name": "scramSha256",
                                    "value": "scramSha256",
                                    "description": "Sasl ScramSha256 authentication."
                                  },
                                  {
                                    "name": "scramSha512",
                                    "value": "scramSha512",
                                    "description": "Sasl ScramSha512 authentication."
                                  }
                                ]
                              }
                            },
                            "token": {
                              "description": "Sasl token for remote broker authentication.",
                              "type": "object",
                              "properties": {
                                "keyVault": {
                                  "description": "Keyvault token keyvault secret properties.",
                                  "type": "object",
                                  "properties": {
                                    "username": {
                                      "type": "string",
                                      "description": "Username to connect with."
                                    },
                                    "vault": {
                                      "description": "KeyVault properties.",
                                      "type": "object",
                                      "properties": {
                                        "credentials": {
                                          "description": "KeyVault credentials.",
                                          "type": "object",
                                          "properties": {
                                            "servicePrincipalLocalSecretName": {
                                              "type": "string",
                                              "description": "KeyVault service principal local secret name."
                                            }
                                          }
                                        },
                                        "directoryId": {
                                          "type": "string",
                                          "description": "KeyVault directoryId."
                                        },
                                        "name": {
                                          "type": "string",
                                          "description": "KeyVault name."
                                        }
                                      }
                                    },
                                    "vaultSecret": {
                                      "description": "KeyVault secret details.",
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "description": "KeyVault secret name."
                                        },
                                        "version": {
                                          "type": "string",
                                          "description": "KeyVault secret version."
                                        }
                                      }
                                    }
                                  }
                                },
                                "secretName": {
                                  "type": "string",
                                  "description": "Secret where cert details are stored."
                                }
                              }
                            }
                          }
                        },
                        "systemAssignedManagedIdentity": {
                          "description": "Managed identity remote broker authentication method.",
                          "type": "object",
                          "properties": {
                            "audience": {
                              "type": "string",
                              "description": "Token audience."
                            },
                            "extensionName": {
                              "type": "string",
                              "description": "Arc Extension name."
                            }
                          }
                        },
                        "x509": {
                          "description": "X509 remote broker authentication method.",
                          "type": "object",
                          "properties": {
                            "keyVault": {
                              "description": "Keyvault X509 secret properties.",
                              "type": "object",
                              "properties": {
                                "vault": {
                                  "description": "KeyVault properties.",
                                  "type": "object",
                                  "properties": {
                                    "credentials": {
                                      "description": "KeyVault credentials.",
                                      "type": "object",
                                      "properties": {
                                        "servicePrincipalLocalSecretName": {
                                          "type": "string",
                                          "description": "KeyVault service principal local secret name."
                                        }
                                      }
                                    },
                                    "directoryId": {
                                      "type": "string",
                                      "description": "KeyVault directoryId."
                                    },
                                    "name": {
                                      "type": "string",
                                      "description": "KeyVault name."
                                    }
                                  }
                                },
                                "vaultCaChainSecret": {
                                  "description": "KeyVault CA chain secret details.",
                                  "type": "object",
                                  "properties": {
                                    "name": {
                                      "type": "string",
                                      "description": "KeyVault secret name."
                                    },
                                    "version": {
                                      "type": "string",
                                      "description": "KeyVault secret version."
                                    }
                                  }
                                },
                                "vaultCert": {
                                  "description": "KeyVault Cert secret details.",
                                  "type": "object",
                                  "properties": {
                                    "name": {
                                      "type": "string",
                                      "description": "KeyVault secret name."
                                    },
                                    "version": {
                                      "type": "string",
                                      "description": "KeyVault secret version."
                                    }
                                  }
                                }
                              }
                            },
                            "secretName": {
                              "type": "string",
                              "description": "Secret where cert details are stored."
                            }
                          }
                        }
                      }
                    },
                    "enabled": {
                      "type": "boolean",
                      "description": "If authentication is enabled for Kafka remote broker."
                    }
                  }
                },
                "endpoint": {
                  "type": "string",
                  "description": "The endpoint of remote broker to connect to."
                },
                "tls": {
                  "description": "TLS details for Remote broker Connection.",
                  "type": "object",
                  "properties": {
                    "tlsEnabled": {
                      "type": "boolean",
                      "description": "Tls Enabled on Remote Broker Connection."
                    },
                    "trustedCaCertificateConfigMap": {
                      "type": "string",
                      "description": "Trusted CA certificate name for Remote Broker."
                    }
                  }
                }
              }
            },
            "localBrokerConnection": {
              "description": "The details for connecting with Local Broker.",
              "type": "object",
              "properties": {
                "authentication": {
                  "description": "The authentication methods for LocalBroker connection. NOTE - Enum only one method at a time is supported.",
                  "type": "object",
                  "properties": {
                    "kubernetes": {
                      "description": "Kubernetes local broker authentication method.",
                      "type": "object",
                      "properties": {
                        "secretPath": {
                          "type": "string",
                          "description": "Secret Path where SAT is mounted.",
                          "default": "/var/run/serviceaccount/localbroker"
                        },
                        "serviceAccountTokenName": {
                          "type": "string",
                          "description": "Token name where SAT is mounted on secret path.",
                          "default": "sat"
                        }
                      }
                    }
                  }
                },
                "endpoint": {
                  "type": "string",
                  "description": "The endpoint of local broker to connect to.",
                  "default": "aio-mq-dmqtt-frontend:1883"
                },
                "tls": {
                  "description": "TLS details for Local broker Connection.",
                  "type": "object",
                  "properties": {
                    "tlsEnabled": {
                      "type": "boolean",
                      "description": "Tls Enabled on Local Broker Connection.",
                      "default": false
                    },
                    "trustedCaCertificateConfigMap": {
                      "type": "string",
                      "description": "Trusted CA certificate config map name for Local Broker."
                    }
                  }
                }
              }
            },
            "logLevel": {
              "type": "string",
              "description": "The log level of the Bridge Connector instances.",
              "default": "info"
            },
            "nodeTolerations": {
              "description": "The Node Tolerations for the Bridge Connector pods.",
              "type": "object",
              "properties": {
                "effect": {
                  "type": "string",
                  "description": "Toleration effect."
                },
                "key": {
                  "type": "string",
                  "description": "Toleration key."
                },
                "operator": {
                  "type": "string",
                  "description": "Toleration operator like 'Exists', 'Equal' etc."
                },
                "value": {
                  "type": "string",
                  "description": "Toleration Value."
                }
              }
            }
          }
        }
      }
    },
    "KafkaConnectorResourceUpdateProperties": {
      "type": "object",
      "description": "The updatable properties of the KafkaConnectorResource.",
      "properties": {
        "clientIdPrefix": {
          "type": "string",
          "description": "The client id prefix of the dynamically generated client ids."
        },
        "image": {
          "description": "The details of KafkaConnector Docker Image.",
          "type": "object",
          "properties": {
            "pullPolicy": {
              "type": "string",
              "description": "Image pull policy."
            },
            "pullSecrets": {
              "type": "string",
              "description": "Image pull secrets."
            },
            "repository": {
              "type": "string",
              "description": "The Docker image name."
            },
            "tag": {
              "type": "string",
              "description": "The Docker  image tag."
            }
          }
        },
        "instances": {
          "type": "integer",
          "format": "int32",
          "description": "The number of KafkaConnector pods to spin up.",
          "minimum": 0,
          "maximum": 65535
        },
        "kafkaConnection": {
          "description": "The details for connecting with Remote Kafka Broker.",
          "type": "object",
          "properties": {
            "authentication": {
              "description": "The remote broker authentication methods.",
              "type": "object",
              "properties": {
                "authType": {
                  "description": "The type of authentication to use for Kafka remote broker.",
                  "type": "object",
                  "properties": {
                    "sasl": {
                      "description": "Sasl remote broker authentication method.",
                      "type": "object",
                      "properties": {
                        "saslType": {
                          "description": "Sasl Mechanism for remote broker authentication.",
                          "type": "string",
                          "enum": [
                            "plain",
                            "scramSha256",
                            "scramSha512"
                          ],
                          "x-ms-enum": {
                            "name": "KafkaSaslType",
                            "modelAsString": true,
                            "values": [
                              {
                                "name": "plain",
                                "value": "plain",
                                "description": "Sasl Plain authentication."
                              },
                              {
                                "name": "scramSha256",
                                "value": "scramSha256",
                                "description": "Sasl ScramSha256 authentication."
                              },
                              {
                                "name": "scramSha512",
                                "value": "scramSha512",
                                "description": "Sasl ScramSha512 authentication."
                              }
                            ]
                          }
                        },
                        "token": {
                          "description": "Sasl token for remote broker authentication.",
                          "type": "object",
                          "properties": {
                            "keyVault": {
                              "description": "Keyvault token keyvault secret properties.",
                              "type": "object",
                              "properties": {
                                "username": {
                                  "type": "string",
                                  "description": "Username to connect with."
                                },
                                "vault": {
                                  "description": "KeyVault properties.",
                                  "type": "object",
                                  "properties": {
                                    "credentials": {
                                      "description": "KeyVault credentials.",
                                      "type": "object",
                                      "properties": {
                                        "servicePrincipalLocalSecretName": {
                                          "type": "string",
                                          "description": "KeyVault service principal local secret name."
                                        }
                                      }
                                    },
                                    "directoryId": {
                                      "type": "string",
                                      "description": "KeyVault directoryId."
                                    },
                                    "name": {
                                      "type": "string",
                                      "description": "KeyVault name."
                                    }
                                  }
                                },
                                "vaultSecret": {
                                  "description": "KeyVault secret details.",
                                  "type": "object",
                                  "properties": {
                                    "name": {
                                      "type": "string",
                                      "description": "KeyVault secret name."
                                    },
                                    "version": {
                                      "type": "string",
                                      "description": "KeyVault secret version."
                                    }
                                  }
                                }
                              }
                            },
                            "secretName": {
                              "type": "string",
                              "description": "Secret where cert details are stored."
                            }
                          }
                        }
                      }
                    },
                    "systemAssignedManagedIdentity": {
                      "description": "Managed identity remote broker authentication method.",
                      "type": "object",
                      "properties": {
                        "audience": {
                          "type": "string",
                          "description": "Token audience."
                        },
                        "extensionName": {
                          "type": "string",
                          "description": "Arc Extension name."
                        }
                      }
                    },
                    "x509": {
                      "description": "X509 remote broker authentication method.",
                      "type": "object",
                      "properties": {
                        "keyVault": {
                          "description": "Keyvault X509 secret properties.",
                          "type": "object",
                          "properties": {
                            "vault": {
                              "description": "KeyVault properties.",
                              "type": "object",
                              "properties": {
                                "credentials": {
                                  "description": "KeyVault credentials.",
                                  "type": "object",
                                  "properties": {
                                    "servicePrincipalLocalSecretName": {
                                      "type": "string",
                                      "description": "KeyVault service principal local secret name."
                                    }
                                  }
                                },
                                "directoryId": {
                                  "type": "string",
                                  "description": "KeyVault directoryId."
                                },
                                "name": {
                                  "type": "string",
                                  "description": "KeyVault name."
                                }
                              }
                            },
                            "vaultCaChainSecret": {
                              "description": "KeyVault CA chain secret details.",
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "KeyVault secret name."
                                },
                                "version": {
                                  "type": "string",
                                  "description": "KeyVault secret version."
                                }
                              }
                            },
                            "vaultCert": {
                              "description": "KeyVault Cert secret details.",
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "KeyVault secret name."
                                },
                                "version": {
                                  "type": "string",
                                  "description": "KeyVault secret version."
                                }
                              }
                            }
                          }
                        },
                        "secretName": {
                          "type": "string",
                          "description": "Secret where cert details are stored."
                        }
                      }
                    }
                  }
                },
                "enabled": {
                  "type": "boolean",
                  "description": "If authentication is enabled for Kafka remote broker."
                }
              }
            },
            "endpoint": {
              "type": "string",
              "description": "The endpoint of remote broker to connect to."
            },
            "tls": {
              "description": "TLS details for Remote broker Connection.",
              "type": "object",
              "properties": {
                "tlsEnabled": {
                  "type": "boolean",
                  "description": "Tls Enabled on Remote Broker Connection."
                },
                "trustedCaCertificateConfigMap": {
                  "type": "string",
                  "description": "Trusted CA certificate name for Remote Broker."
                }
              }
            }
          }
        },
        "localBrokerConnection": {
          "description": "The details for connecting with Local Broker.",
          "type": "object",
          "properties": {
            "authentication": {
              "description": "The authentication methods for LocalBroker connection. NOTE - Enum only one method at a time is supported.",
              "type": "object",
              "properties": {
                "kubernetes": {
                  "description": "Kubernetes local broker authentication method.",
                  "type": "object",
                  "properties": {
                    "secretPath": {
                      "type": "string",
                      "description": "Secret Path where SAT is mounted.",
                      "default": "/var/run/serviceaccount/localbroker"
                    },
                    "serviceAccountTokenName": {
                      "type": "string",
                      "description": "Token name where SAT is mounted on secret path.",
                      "default": "sat"
                    }
                  }
                }
              }
            },
            "endpoint": {
              "type": "string",
              "description": "The endpoint of local broker to connect to.",
              "default": "aio-mq-dmqtt-frontend:1883"
            },
            "tls": {
              "description": "TLS details for Local broker Connection.",
              "type": "object",
              "properties": {
                "tlsEnabled": {
                  "type": "boolean",
                  "description": "Tls Enabled on Local Broker Connection.",
                  "default": false
                },
                "trustedCaCertificateConfigMap": {
                  "type": "string",
                  "description": "Trusted CA certificate config map name for Local Broker."
                }
              }
            }
          }
        },
        "logLevel": {
          "type": "string",
          "description": "The log level of the Bridge Connector instances.",
          "default": "info"
        },
        "nodeTolerations": {
          "description": "The Node Tolerations for the Bridge Connector pods.",
          "type": "object",
          "properties": {
            "effect": {
              "type": "string",
              "description": "Toleration effect."
            },
            "key": {
              "type": "string",
              "description": "Toleration key."
            },
            "operator": {
              "type": "string",
              "description": "Toleration operator like 'Exists', 'Equal' etc."
            },
            "value": {
              "type": "string",
              "description": "Toleration Value."
            }
          }
        }
      }
    },
    "KafkaMessageCompressionType": {
      "type": "string",
      "description": "Kafka Message compression enum properties",
      "enum": [
        "none",
        "gzip",
        "snappy",
        "lz4"
      ],
      "x-ms-enum": {
        "name": "KafkaMessageCompressionType",
        "modelAsString": true,
        "values": [
          {
            "name": "none",
            "value": "none",
            "description": "No Kafka message compression."
          },
          {
            "name": "gzip",
            "value": "gzip",
            "description": "Gzip Kafka message compression."
          },
          {
            "name": "snappy",
            "value": "snappy",
            "description": "Snappy Kafka message compression."
          },
          {
            "name": "lz4",
            "value": "lz4",
            "description": "Lz4 Kafka message compression."
          }
        ]
      }
    },
    "KafkaPartitionStrategy": {
      "type": "string",
      "description": "Kafka Partition Strategy enum properties",
      "enum": [
        "default",
        "static",
        "topic",
        "property"
      ],
      "x-ms-enum": {
        "name": "KafkaPartitionStrategy",
        "modelAsString": true,
        "values": [
          {
            "name": "default",
            "value": "default",
            "description": "Default partition strategy."
          },
          {
            "name": "static",
            "value": "static",
            "description": "Static partition strategy."
          },
          {
            "name": "topic",
            "value": "topic",
            "description": "Topic partition strategy."
          },
          {
            "name": "property",
            "value": "property",
            "description": "Property partition strategy."
          }
        ]
      }
    },
    "KafkaRemoteBrokerAuthenticationProperties": {
      "type": "object",
      "description": "Kafka RemoteBrokerConnection Authentication methods",
      "properties": {
        "authType": {
          "description": "The type of authentication to use for Kafka remote broker.",
          "type": "object",
          "properties": {
            "sasl": {
              "description": "Sasl remote broker authentication method.",
              "type": "object",
              "properties": {
                "saslType": {
                  "description": "Sasl Mechanism for remote broker authentication.",
                  "type": "string",
                  "enum": [
                    "plain",
                    "scramSha256",
                    "scramSha512"
                  ],
                  "x-ms-enum": {
                    "name": "KafkaSaslType",
                    "modelAsString": true,
                    "values": [
                      {
                        "name": "plain",
                        "value": "plain",
                        "description": "Sasl Plain authentication."
                      },
                      {
                        "name": "scramSha256",
                        "value": "scramSha256",
                        "description": "Sasl ScramSha256 authentication."
                      },
                      {
                        "name": "scramSha512",
                        "value": "scramSha512",
                        "description": "Sasl ScramSha512 authentication."
                      }
                    ]
                  }
                },
                "token": {
                  "description": "Sasl token for remote broker authentication.",
                  "type": "object",
                  "properties": {
                    "keyVault": {
                      "description": "Keyvault token keyvault secret properties.",
                      "type": "object",
                      "properties": {
                        "username": {
                          "type": "string",
                          "description": "Username to connect with."
                        },
                        "vault": {
                          "description": "KeyVault properties.",
                          "type": "object",
                          "properties": {
                            "credentials": {
                              "description": "KeyVault credentials.",
                              "type": "object",
                              "properties": {
                                "servicePrincipalLocalSecretName": {
                                  "type": "string",
                                  "description": "KeyVault service principal local secret name."
                                }
                              },
                              "required": [
                                "servicePrincipalLocalSecretName"
                              ]
                            },
                            "directoryId": {
                              "type": "string",
                              "description": "KeyVault directoryId."
                            },
                            "name": {
                              "type": "string",
                              "description": "KeyVault name."
                            }
                          },
                          "required": [
                            "credentials",
                            "directoryId",
                            "name"
                          ]
                        },
                        "vaultSecret": {
                          "description": "KeyVault secret details.",
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "KeyVault secret name."
                            },
                            "version": {
                              "type": "string",
                              "description": "KeyVault secret version."
                            }
                          },
                          "required": [
                            "name"
                          ]
                        }
                      },
                      "required": [
                        "vault",
                        "vaultSecret"
                      ]
                    },
                    "secretName": {
                      "type": "string",
                      "description": "Secret where cert details are stored."
                    }
                  }
                }
              },
              "required": [
                "saslType",
                "token"
              ]
            },
            "systemAssignedManagedIdentity": {
              "description": "Managed identity remote broker authentication method.",
              "type": "object",
              "properties": {
                "audience": {
                  "type": "string",
                  "description": "Token audience."
                },
                "extensionName": {
                  "type": "string",
                  "description": "Arc Extension name."
                }
              },
              "required": [
                "audience"
              ]
            },
            "x509": {
              "description": "X509 remote broker authentication method.",
              "type": "object",
              "properties": {
                "keyVault": {
                  "description": "Keyvault X509 secret properties.",
                  "type": "object",
                  "properties": {
                    "vault": {
                      "description": "KeyVault properties.",
                      "type": "object",
                      "properties": {
                        "credentials": {
                          "description": "KeyVault credentials.",
                          "type": "object",
                          "properties": {
                            "servicePrincipalLocalSecretName": {
                              "type": "string",
                              "description": "KeyVault service principal local secret name."
                            }
                          },
                          "required": [
                            "servicePrincipalLocalSecretName"
                          ]
                        },
                        "directoryId": {
                          "type": "string",
                          "description": "KeyVault directoryId."
                        },
                        "name": {
                          "type": "string",
                          "description": "KeyVault name."
                        }
                      },
                      "required": [
                        "credentials",
                        "directoryId",
                        "name"
                      ]
                    },
                    "vaultCaChainSecret": {
                      "description": "KeyVault CA chain secret details.",
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "KeyVault secret name."
                        },
                        "version": {
                          "type": "string",
                          "description": "KeyVault secret version."
                        }
                      },
                      "required": [
                        "name"
                      ]
                    },
                    "vaultCert": {
                      "description": "KeyVault Cert secret details.",
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "KeyVault secret name."
                        },
                        "version": {
                          "type": "string",
                          "description": "KeyVault secret version."
                        }
                      },
                      "required": [
                        "name"
                      ]
                    }
                  },
                  "required": [
                    "vault",
                    "vaultCert"
                  ]
                },
                "secretName": {
                  "type": "string",
                  "description": "Secret where cert details are stored."
                }
              }
            }
          }
        },
        "enabled": {
          "type": "boolean",
          "description": "If authentication is enabled for Kafka remote broker."
        }
      },
      "required": [
        "enabled"
      ]
    },
    "KafkaRemoteBrokerAuthenticationPropertiesUpdate": {
      "type": "object",
      "description": "Kafka RemoteBrokerConnection Authentication methods",
      "properties": {
        "authType": {
          "description": "The type of authentication to use for Kafka remote broker.",
          "type": "object",
          "properties": {
            "sasl": {
              "description": "Sasl remote broker authentication method.",
              "type": "object",
              "properties": {
                "saslType": {
                  "description": "Sasl Mechanism for remote broker authentication.",
                  "type": "string",
                  "enum": [
                    "plain",
                    "scramSha256",
                    "scramSha512"
                  ],
                  "x-ms-enum": {
                    "name": "KafkaSaslType",
                    "modelAsString": true,
                    "values": [
                      {
                        "name": "plain",
                        "value": "plain",
                        "description": "Sasl Plain authentication."
                      },
                      {
                        "name": "scramSha256",
                        "value": "scramSha256",
                        "description": "Sasl ScramSha256 authentication."
                      },
                      {
                        "name": "scramSha512",
                        "value": "scramSha512",
                        "description": "Sasl ScramSha512 authentication."
                      }
                    ]
                  }
                },
                "token": {
                  "description": "Sasl token for remote broker authentication.",
                  "type": "object",
                  "properties": {
                    "keyVault": {
                      "description": "Keyvault token keyvault secret properties.",
                      "type": "object",
                      "properties": {
                        "username": {
                          "type": "string",
                          "description": "Username to connect with."
                        },
                        "vault": {
                          "description": "KeyVault properties.",
                          "type": "object",
                          "properties": {
                            "credentials": {
                              "description": "KeyVault credentials.",
                              "type": "object",
                              "properties": {
                                "servicePrincipalLocalSecretName": {
                                  "type": "string",
                                  "description": "KeyVault service principal local secret name."
                                }
                              }
                            },
                            "directoryId": {
                              "type": "string",
                              "description": "KeyVault directoryId."
                            },
                            "name": {
                              "type": "string",
                              "description": "KeyVault name."
                            }
                          }
                        },
                        "vaultSecret": {
                          "description": "KeyVault secret details.",
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "KeyVault secret name."
                            },
                            "version": {
                              "type": "string",
                              "description": "KeyVault secret version."
                            }
                          }
                        }
                      }
                    },
                    "secretName": {
                      "type": "string",
                      "description": "Secret where cert details are stored."
                    }
                  }
                }
              }
            },
            "systemAssignedManagedIdentity": {
              "description": "Managed identity remote broker authentication method.",
              "type": "object",
              "properties": {
                "audience": {
                  "type": "string",
                  "description": "Token audience."
                },
                "extensionName": {
                  "type": "string",
                  "description": "Arc Extension name."
                }
              }
            },
            "x509": {
              "description": "X509 remote broker authentication method.",
              "type": "object",
              "properties": {
                "keyVault": {
                  "description": "Keyvault X509 secret properties.",
                  "type": "object",
                  "properties": {
                    "vault": {
                      "description": "KeyVault properties.",
                      "type": "object",
                      "properties": {
                        "credentials": {
                          "description": "KeyVault credentials.",
                          "type": "object",
                          "properties": {
                            "servicePrincipalLocalSecretName": {
                              "type": "string",
                              "description": "KeyVault service principal local secret name."
                            }
                          }
                        },
                        "directoryId": {
                          "type": "string",
                          "description": "KeyVault directoryId."
                        },
                        "name": {
                          "type": "string",
                          "description": "KeyVault name."
                        }
                      }
                    },
                    "vaultCaChainSecret": {
                      "description": "KeyVault CA chain secret details.",
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "KeyVault secret name."
                        },
                        "version": {
                          "type": "string",
                          "description": "KeyVault secret version."
                        }
                      }
                    },
                    "vaultCert": {
                      "description": "KeyVault Cert secret details.",
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "KeyVault secret name."
                        },
                        "version": {
                          "type": "string",
                          "description": "KeyVault secret version."
                        }
                      }
                    }
                  }
                },
                "secretName": {
                  "type": "string",
                  "description": "Secret where cert details are stored."
                }
              }
            }
          }
        },
        "enabled": {
          "type": "boolean",
          "description": "If authentication is enabled for Kafka remote broker."
        }
      }
    },
    "KafkaRemoteBrokerAuthenticationTypes": {
      "type": "object",
      "description": "Kafka RemoteBrokerConnection Authentication types. NOTE - Enum only one method is allowed to be passed.",
      "properties": {
        "sasl": {
          "description": "Sasl remote broker authentication method.",
          "type": "object",
          "properties": {
            "saslType": {
              "description": "Sasl Mechanism for remote broker authentication.",
              "type": "string",
              "enum": [
                "plain",
                "scramSha256",
                "scramSha512"
              ],
              "x-ms-enum": {
                "name": "KafkaSaslType",
                "modelAsString": true,
                "values": [
                  {
                    "name": "plain",
                    "value": "plain",
                    "description": "Sasl Plain authentication."
                  },
                  {
                    "name": "scramSha256",
                    "value": "scramSha256",
                    "description": "Sasl ScramSha256 authentication."
                  },
                  {
                    "name": "scramSha512",
                    "value": "scramSha512",
                    "description": "Sasl ScramSha512 authentication."
                  }
                ]
              }
            },
            "token": {
              "description": "Sasl token for remote broker authentication.",
              "type": "object",
              "properties": {
                "keyVault": {
                  "description": "Keyvault token keyvault secret properties.",
                  "type": "object",
                  "properties": {
                    "username": {
                      "type": "string",
                      "description": "Username to connect with."
                    },
                    "vault": {
                      "description": "KeyVault properties.",
                      "type": "object",
                      "properties": {
                        "credentials": {
                          "description": "KeyVault credentials.",
                          "type": "object",
                          "properties": {
                            "servicePrincipalLocalSecretName": {
                              "type": "string",
                              "description": "KeyVault service principal local secret name."
                            }
                          },
                          "required": [
                            "servicePrincipalLocalSecretName"
                          ]
                        },
                        "directoryId": {
                          "type": "string",
                          "description": "KeyVault directoryId."
                        },
                        "name": {
                          "type": "string",
                          "description": "KeyVault name."
                        }
                      },
                      "required": [
                        "credentials",
                        "directoryId",
                        "name"
                      ]
                    },
                    "vaultSecret": {
                      "description": "KeyVault secret details.",
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "KeyVault secret name."
                        },
                        "version": {
                          "type": "string",
                          "description": "KeyVault secret version."
                        }
                      },
                      "required": [
                        "name"
                      ]
                    }
                  },
                  "required": [
                    "vault",
                    "vaultSecret"
                  ]
                },
                "secretName": {
                  "type": "string",
                  "description": "Secret where cert details are stored."
                }
              }
            }
          },
          "required": [
            "saslType",
            "token"
          ]
        },
        "systemAssignedManagedIdentity": {
          "description": "Managed identity remote broker authentication method.",
          "type": "object",
          "properties": {
            "audience": {
              "type": "string",
              "description": "Token audience."
            },
            "extensionName": {
              "type": "string",
              "description": "Arc Extension name."
            }
          },
          "required": [
            "audience"
          ]
        },
        "x509": {
          "description": "X509 remote broker authentication method.",
          "type": "object",
          "properties": {
            "keyVault": {
              "description": "Keyvault X509 secret properties.",
              "type": "object",
              "properties": {
                "vault": {
                  "description": "KeyVault properties.",
                  "type": "object",
                  "properties": {
                    "credentials": {
                      "description": "KeyVault credentials.",
                      "type": "object",
                      "properties": {
                        "servicePrincipalLocalSecretName": {
                          "type": "string",
                          "description": "KeyVault service principal local secret name."
                        }
                      },
                      "required": [
                        "servicePrincipalLocalSecretName"
                      ]
                    },
                    "directoryId": {
                      "type": "string",
                      "description": "KeyVault directoryId."
                    },
                    "name": {
                      "type": "string",
                      "description": "KeyVault name."
                    }
                  },
                  "required": [
                    "credentials",
                    "directoryId",
                    "name"
                  ]
                },
                "vaultCaChainSecret": {
                  "description": "KeyVault CA chain secret details.",
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "KeyVault secret name."
                    },
                    "version": {
                      "type": "string",
                      "description": "KeyVault secret version."
                    }
                  },
                  "required": [
                    "name"
                  ]
                },
                "vaultCert": {
                  "description": "KeyVault Cert secret details.",
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "KeyVault secret name."
                    },
                    "version": {
                      "type": "string",
                      "description": "KeyVault secret version."
                    }
                  },
                  "required": [
                    "name"
                  ]
                }
              },
              "required": [
                "vault",
                "vaultCert"
              ]
            },
            "secretName": {
              "type": "string",
              "description": "Secret where cert details are stored."
            }
          }
        }
      }
    },
    "KafkaRemoteBrokerAuthenticationTypesUpdate": {
      "type": "object",
      "description": "Kafka RemoteBrokerConnection Authentication types. NOTE - Enum only one method is allowed to be passed.",
      "properties": {
        "sasl": {
          "description": "Sasl remote broker authentication method.",
          "type": "object",
          "properties": {
            "saslType": {
              "description": "Sasl Mechanism for remote broker authentication.",
              "type": "string",
              "enum": [
                "plain",
                "scramSha256",
                "scramSha512"
              ],
              "x-ms-enum": {
                "name": "KafkaSaslType",
                "modelAsString": true,
                "values": [
                  {
                    "name": "plain",
                    "value": "plain",
                    "description": "Sasl Plain authentication."
                  },
                  {
                    "name": "scramSha256",
                    "value": "scramSha256",
                    "description": "Sasl ScramSha256 authentication."
                  },
                  {
                    "name": "scramSha512",
                    "value": "scramSha512",
                    "description": "Sasl ScramSha512 authentication."
                  }
                ]
              }
            },
            "token": {
              "description": "Sasl token for remote broker authentication.",
              "type": "object",
              "properties": {
                "keyVault": {
                  "description": "Keyvault token keyvault secret properties.",
                  "type": "object",
                  "properties": {
                    "username": {
                      "type": "string",
                      "description": "Username to connect with."
                    },
                    "vault": {
                      "description": "KeyVault properties.",
                      "type": "object",
                      "properties": {
                        "credentials": {
                          "description": "KeyVault credentials.",
                          "type": "object",
                          "properties": {
                            "servicePrincipalLocalSecretName": {
                              "type": "string",
                              "description": "KeyVault service principal local secret name."
                            }
                          }
                        },
                        "directoryId": {
                          "type": "string",
                          "description": "KeyVault directoryId."
                        },
                        "name": {
                          "type": "string",
                          "description": "KeyVault name."
                        }
                      }
                    },
                    "vaultSecret": {
                      "description": "KeyVault secret details.",
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "KeyVault secret name."
                        },
                        "version": {
                          "type": "string",
                          "description": "KeyVault secret version."
                        }
                      }
                    }
                  }
                },
                "secretName": {
                  "type": "string",
                  "description": "Secret where cert details are stored."
                }
              }
            }
          }
        },
        "systemAssignedManagedIdentity": {
          "description": "Managed identity remote broker authentication method.",
          "type": "object",
          "properties": {
            "audience": {
              "type": "string",
              "description": "Token audience."
            },
            "extensionName": {
              "type": "string",
              "description": "Arc Extension name."
            }
          }
        },
        "x509": {
          "description": "X509 remote broker authentication method.",
          "type": "object",
          "properties": {
            "keyVault": {
              "description": "Keyvault X509 secret properties.",
              "type": "object",
              "properties": {
                "vault": {
                  "description": "KeyVault properties.",
                  "type": "object",
                  "properties": {
                    "credentials": {
                      "description": "KeyVault credentials.",
                      "type": "object",
                      "properties": {
                        "servicePrincipalLocalSecretName": {
                          "type": "string",
                          "description": "KeyVault service principal local secret name."
                        }
                      }
                    },
                    "directoryId": {
                      "type": "string",
                      "description": "KeyVault directoryId."
                    },
                    "name": {
                      "type": "string",
                      "description": "KeyVault name."
                    }
                  }
                },
                "vaultCaChainSecret": {
                  "description": "KeyVault CA chain secret details.",
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "KeyVault secret name."
                    },
                    "version": {
                      "type": "string",
                      "description": "KeyVault secret version."
                    }
                  }
                },
                "vaultCert": {
                  "description": "KeyVault Cert secret details.",
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "KeyVault secret name."
                    },
                    "version": {
                      "type": "string",
                      "description": "KeyVault secret version."
                    }
                  }
                }
              }
            },
            "secretName": {
              "type": "string",
              "description": "Secret where cert details are stored."
            }
          }
        }
      }
    },
    "KafkaRemoteBrokerConnectionSpec": {
      "type": "object",
      "description": "Kafka RemoteBrokerConnectionSpec details",
      "properties": {
        "authentication": {
          "description": "The remote broker authentication methods.",
          "type": "object",
          "properties": {
            "authType": {
              "description": "The type of authentication to use for Kafka remote broker.",
              "type": "object",
              "properties": {
                "sasl": {
                  "description": "Sasl remote broker authentication method.",
                  "type": "object",
                  "properties": {
                    "saslType": {
                      "description": "Sasl Mechanism for remote broker authentication.",
                      "type": "string",
                      "enum": [
                        "plain",
                        "scramSha256",
                        "scramSha512"
                      ],
                      "x-ms-enum": {
                        "name": "KafkaSaslType",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "plain",
                            "value": "plain",
                            "description": "Sasl Plain authentication."
                          },
                          {
                            "name": "scramSha256",
                            "value": "scramSha256",
                            "description": "Sasl ScramSha256 authentication."
                          },
                          {
                            "name": "scramSha512",
                            "value": "scramSha512",
                            "description": "Sasl ScramSha512 authentication."
                          }
                        ]
                      }
                    },
                    "token": {
                      "description": "Sasl token for remote broker authentication.",
                      "type": "object",
                      "properties": {
                        "keyVault": {
                          "description": "Keyvault token keyvault secret properties.",
                          "type": "object",
                          "properties": {
                            "username": {
                              "type": "string",
                              "description": "Username to connect with."
                            },
                            "vault": {
                              "description": "KeyVault properties.",
                              "type": "object",
                              "properties": {
                                "credentials": {
                                  "description": "KeyVault credentials.",
                                  "type": "object",
                                  "properties": {
                                    "servicePrincipalLocalSecretName": {
                                      "type": "string",
                                      "description": "KeyVault service principal local secret name."
                                    }
                                  },
                                  "required": [
                                    "servicePrincipalLocalSecretName"
                                  ]
                                },
                                "directoryId": {
                                  "type": "string",
                                  "description": "KeyVault directoryId."
                                },
                                "name": {
                                  "type": "string",
                                  "description": "KeyVault name."
                                }
                              },
                              "required": [
                                "credentials",
                                "directoryId",
                                "name"
                              ]
                            },
                            "vaultSecret": {
                              "description": "KeyVault secret details.",
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "KeyVault secret name."
                                },
                                "version": {
                                  "type": "string",
                                  "description": "KeyVault secret version."
                                }
                              },
                              "required": [
                                "name"
                              ]
                            }
                          },
                          "required": [
                            "vault",
                            "vaultSecret"
                          ]
                        },
                        "secretName": {
                          "type": "string",
                          "description": "Secret where cert details are stored."
                        }
                      }
                    }
                  },
                  "required": [
                    "saslType",
                    "token"
                  ]
                },
                "systemAssignedManagedIdentity": {
                  "description": "Managed identity remote broker authentication method.",
                  "type": "object",
                  "properties": {
                    "audience": {
                      "type": "string",
                      "description": "Token audience."
                    },
                    "extensionName": {
                      "type": "string",
                      "description": "Arc Extension name."
                    }
                  },
                  "required": [
                    "audience"
                  ]
                },
                "x509": {
                  "description": "X509 remote broker authentication method.",
                  "type": "object",
                  "properties": {
                    "keyVault": {
                      "description": "Keyvault X509 secret properties.",
                      "type": "object",
                      "properties": {
                        "vault": {
                          "description": "KeyVault properties.",
                          "type": "object",
                          "properties": {
                            "credentials": {
                              "description": "KeyVault credentials.",
                              "type": "object",
                              "properties": {
                                "servicePrincipalLocalSecretName": {
                                  "type": "string",
                                  "description": "KeyVault service principal local secret name."
                                }
                              },
                              "required": [
                                "servicePrincipalLocalSecretName"
                              ]
                            },
                            "directoryId": {
                              "type": "string",
                              "description": "KeyVault directoryId."
                            },
                            "name": {
                              "type": "string",
                              "description": "KeyVault name."
                            }
                          },
                          "required": [
                            "credentials",
                            "directoryId",
                            "name"
                          ]
                        },
                        "vaultCaChainSecret": {
                          "description": "KeyVault CA chain secret details.",
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "KeyVault secret name."
                            },
                            "version": {
                              "type": "string",
                              "description": "KeyVault secret version."
                            }
                          },
                          "required": [
                            "name"
                          ]
                        },
                        "vaultCert": {
                          "description": "KeyVault Cert secret details.",
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "KeyVault secret name."
                            },
                            "version": {
                              "type": "string",
                              "description": "KeyVault secret version."
                            }
                          },
                          "required": [
                            "name"
                          ]
                        }
                      },
                      "required": [
                        "vault",
                        "vaultCert"
                      ]
                    },
                    "secretName": {
                      "type": "string",
                      "description": "Secret where cert details are stored."
                    }
                  }
                }
              }
            },
            "enabled": {
              "type": "boolean",
              "description": "If authentication is enabled for Kafka remote broker."
            }
          },
          "required": [
            "enabled"
          ]
        },
        "endpoint": {
          "type": "string",
          "description": "The endpoint of remote broker to connect to."
        },
        "tls": {
          "description": "TLS details for Remote broker Connection.",
          "type": "object",
          "properties": {
            "tlsEnabled": {
              "type": "boolean",
              "description": "Tls Enabled on Remote Broker Connection."
            },
            "trustedCaCertificateConfigMap": {
              "type": "string",
              "description": "Trusted CA certificate name for Remote Broker."
            }
          },
          "required": [
            "tlsEnabled"
          ]
        }
      },
      "required": [
        "authentication",
        "endpoint",
        "tls"
      ]
    },
    "KafkaRemoteBrokerConnectionSpecUpdate": {
      "type": "object",
      "description": "Kafka RemoteBrokerConnectionSpec details",
      "properties": {
        "authentication": {
          "description": "The remote broker authentication methods.",
          "type": "object",
          "properties": {
            "authType": {
              "description": "The type of authentication to use for Kafka remote broker.",
              "type": "object",
              "properties": {
                "sasl": {
                  "description": "Sasl remote broker authentication method.",
                  "type": "object",
                  "properties": {
                    "saslType": {
                      "description": "Sasl Mechanism for remote broker authentication.",
                      "type": "string",
                      "enum": [
                        "plain",
                        "scramSha256",
                        "scramSha512"
                      ],
                      "x-ms-enum": {
                        "name": "KafkaSaslType",
                        "modelAsString": true,
                        "values": [
                          {
                            "name": "plain",
                            "value": "plain",
                            "description": "Sasl Plain authentication."
                          },
                          {
                            "name": "scramSha256",
                            "value": "scramSha256",
                            "description": "Sasl ScramSha256 authentication."
                          },
                          {
                            "name": "scramSha512",
                            "value": "scramSha512",
                            "description": "Sasl ScramSha512 authentication."
                          }
                        ]
                      }
                    },
                    "token": {
                      "description": "Sasl token for remote broker authentication.",
                      "type": "object",
                      "properties": {
                        "keyVault": {
                          "description": "Keyvault token keyvault secret properties.",
                          "type": "object",
                          "properties": {
                            "username": {
                              "type": "string",
                              "description": "Username to connect with."
                            },
                            "vault": {
                              "description": "KeyVault properties.",
                              "type": "object",
                              "properties": {
                                "credentials": {
                                  "description": "KeyVault credentials.",
                                  "type": "object",
                                  "properties": {
                                    "servicePrincipalLocalSecretName": {
                                      "type": "string",
                                      "description": "KeyVault service principal local secret name."
                                    }
                                  }
                                },
                                "directoryId": {
                                  "type": "string",
                                  "description": "KeyVault directoryId."
                                },
                                "name": {
                                  "type": "string",
                                  "description": "KeyVault name."
                                }
                              }
                            },
                            "vaultSecret": {
                              "description": "KeyVault secret details.",
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "KeyVault secret name."
                                },
                                "version": {
                                  "type": "string",
                                  "description": "KeyVault secret version."
                                }
                              }
                            }
                          }
                        },
                        "secretName": {
                          "type": "string",
                          "description": "Secret where cert details are stored."
                        }
                      }
                    }
                  }
                },
                "systemAssignedManagedIdentity": {
                  "description": "Managed identity remote broker authentication method.",
                  "type": "object",
                  "properties": {
                    "audience": {
                      "type": "string",
                      "description": "Token audience."
                    },
                    "extensionName": {
                      "type": "string",
                      "description": "Arc Extension name."
                    }
                  }
                },
                "x509": {
                  "description": "X509 remote broker authentication method.",
                  "type": "object",
                  "properties": {
                    "keyVault": {
                      "description": "Keyvault X509 secret properties.",
                      "type": "object",
                      "properties": {
                        "vault": {
                          "description": "KeyVault properties.",
                          "type": "object",
                          "properties": {
                            "credentials": {
                              "description": "KeyVault credentials.",
                              "type": "object",
                              "properties": {
                                "servicePrincipalLocalSecretName": {
                                  "type": "string",
                                  "description": "KeyVault service principal local secret name."
                                }
                              }
                            },
                            "directoryId": {
                              "type": "string",
                              "description": "KeyVault directoryId."
                            },
                            "name": {
                              "type": "string",
                              "description": "KeyVault name."
                            }
                          }
                        },
                        "vaultCaChainSecret": {
                          "description": "KeyVault CA chain secret details.",
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "KeyVault secret name."
                            },
                            "version": {
                              "type": "string",
                              "description": "KeyVault secret version."
                            }
                          }
                        },
                        "vaultCert": {
                          "description": "KeyVault Cert secret details.",
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "KeyVault secret name."
                            },
                            "version": {
                              "type": "string",
                              "description": "KeyVault secret version."
                            }
                          }
                        }
                      }
                    },
                    "secretName": {
                      "type": "string",
                      "description": "Secret where cert details are stored."
                    }
                  }
                }
              }
            },
            "enabled": {
              "type": "boolean",
              "description": "If authentication is enabled for Kafka remote broker."
            }
          }
        },
        "endpoint": {
          "type": "string",
          "description": "The endpoint of remote broker to connect to."
        },
        "tls": {
          "description": "TLS details for Remote broker Connection.",
          "type": "object",
          "properties": {
            "tlsEnabled": {
              "type": "boolean",
              "description": "Tls Enabled on Remote Broker Connection."
            },
            "trustedCaCertificateConfigMap": {
              "type": "string",
              "description": "Trusted CA certificate name for Remote Broker."
            }
          }
        }
      }
    },
    "KafkaRemoteBrokerConnectionTls": {
      "type": "object",
      "description": "Kafka RemoteBrokerConnection TLS details",
      "properties": {
        "tlsEnabled": {
          "type": "boolean",
          "description": "Tls Enabled on Remote Broker Connection."
        },
        "trustedCaCertificateConfigMap": {
          "type": "string",
          "description": "Trusted CA certificate name for Remote Broker."
        }
      },
      "required": [
        "tlsEnabled"
      ]
    },
    "KafkaRemoteBrokerConnectionTlsUpdate": {
      "type": "object",
      "description": "Kafka RemoteBrokerConnection TLS details",
      "properties": {
        "tlsEnabled": {
          "type": "boolean",
          "description": "Tls Enabled on Remote Broker Connection."
        },
        "trustedCaCertificateConfigMap": {
          "type": "string",
          "description": "Trusted CA certificate name for Remote Broker."
        }
      }
    },
    "KafkaRoutes": {
      "type": "object",
      "description": "Kafka Routes properties. NOTE - Enum only one method is allowed to be passed.",
      "properties": {
        "kafkaToMqtt": {
          "description": "Kafka to Mqtt route.",
          "type": "object",
          "properties": {
            "consumerGroupId": {
              "type": "string",
              "description": "The consumer group id to use."
            },
            "kafkaTopic": {
              "type": "string",
              "description": "The kafka topic to pull from."
            },
            "mqttTopic": {
              "type": "string",
              "description": "The mqtt topic to publish to."
            },
            "name": {
              "type": "string",
              "description": "The name of the route."
            },
            "qos": {
              "type": "integer",
              "format": "int32",
              "description": "The qos to use for mqtt.",
              "default": 1,
              "minimum": 0,
              "maximum": 1
            }
          },
          "required": [
            "kafkaTopic",
            "mqttTopic",
            "name"
          ]
        },
        "mqttToKafka": {
          "description": "Mqtt to Kafka route.",
          "type": "object",
          "properties": {
            "kafkaAcks": {
              "description": "The kafka acks to use.",
              "type": "string",
              "enum": [
                "zero",
                "one",
                "all"
              ],
              "x-ms-enum": {
                "name": "KafkaAcks",
                "modelAsString": true,
                "values": [
                  {
                    "name": "zero",
                    "value": "zero",
                    "description": "Kafka acks zero."
                  },
                  {
                    "name": "one",
                    "value": "one",
                    "description": "Kafka acks one."
                  },
                  {
                    "name": "all",
                    "value": "all",
                    "description": "Kafka acks all."
                  }
                ]
              }
            },
            "kafkaTopic": {
              "type": "string",
              "description": "The kafka topic to publish to."
            },
            "mqttTopic": {
              "type": "string",
              "description": "The mqtt topic to pull from."
            },
            "name": {
              "type": "string",
              "description": "The name of the route."
            },
            "qos": {
              "type": "integer",
              "format": "int32",
              "description": "The qos to use for mqtt.",
              "default": 1,
              "minimum": 0,
              "maximum": 1
            },
            "sharedSubscription": {
              "description": "The properties for shared subscription.",
              "type": "object",
              "properties": {
                "groupMinimumShareNumber": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The minimum number to use in a group for subscription.",
                  "minimum": 0,
                  "maximum": 255
                },
                "groupName": {
                  "type": "string",
                  "description": "The name of the shared subscription."
                }
              },
              "required": [
                "groupMinimumShareNumber",
                "groupName"
              ]
            }
          },
          "required": [
            "kafkaAcks",
            "kafkaTopic",
            "mqttTopic",
            "name"
          ]
        }
      }
    },
    "KafkaSaslType": {
      "type": "string",
      "description": "Kafka Sasl Authentication types",
      "enum": [
        "plain",
        "scramSha256",
        "scramSha512"
      ],
      "x-ms-enum": {
        "name": "KafkaSaslType",
        "modelAsString": true,
        "values": [
          {
            "name": "plain",
            "value": "plain",
            "description": "Sasl Plain authentication."
          },
          {
            "name": "scramSha256",
            "value": "scramSha256",
            "description": "Sasl ScramSha256 authentication."
          },
          {
            "name": "scramSha512",
            "value": "scramSha512",
            "description": "Sasl ScramSha512 authentication."
          }
        ]
      }
    },
    "KafkaSharedSubscriptionProperties": {
      "type": "object",
      "description": "Kafka Shared Subscription properties",
      "properties": {
        "groupMinimumShareNumber": {
          "type": "integer",
          "format": "int32",
          "description": "The minimum number to use in a group for subscription.",
          "minimum": 0,
          "maximum": 255
        },
        "groupName": {
          "type": "string",
          "description": "The name of the shared subscription."
        }
      },
      "required": [
        "groupMinimumShareNumber",
        "groupName"
      ]
    },
    "KafkaToMqttRoutes": {
      "type": "object",
      "description": "Kafka to Mqtt route properties",
      "properties": {
        "consumerGroupId": {
          "type": "string",
          "description": "The consumer group id to use."
        },
        "kafkaTopic": {
          "type": "string",
          "description": "The kafka topic to pull from."
        },
        "mqttTopic": {
          "type": "string",
          "description": "The mqtt topic to publish to."
        },
        "name": {
          "type": "string",
          "description": "The name of the route."
        },
        "qos": {
          "type": "integer",
          "format": "int32",
          "description": "The qos to use for mqtt.",
          "default": 1,
          "minimum": 0,
          "maximum": 1
        }
      },
      "required": [
        "kafkaTopic",
        "mqttTopic",
        "name"
      ]
    },
    "KafkaTokenKeyVaultProperties": {
      "type": "object",
      "description": "Kafka Token KeyVault properties.",
      "properties": {
        "username": {
          "type": "string",
          "description": "Username to connect with."
        },
        "vault": {
          "description": "KeyVault properties.",
          "type": "object",
          "properties": {
            "credentials": {
              "description": "KeyVault credentials.",
              "type": "object",
              "properties": {
                "servicePrincipalLocalSecretName": {
                  "type": "string",
                  "description": "KeyVault service principal local secret name."
                }
              },
              "required": [
                "servicePrincipalLocalSecretName"
              ]
            },
            "directoryId": {
              "type": "string",
              "description": "KeyVault directoryId."
            },
            "name": {
              "type": "string",
              "description": "KeyVault name."
            }
          },
          "required": [
            "credentials",
            "directoryId",
            "name"
          ]
        },
        "vaultSecret": {
          "description": "KeyVault secret details.",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "KeyVault secret name."
            },
            "version": {
              "type": "string",
              "description": "KeyVault secret version."
            }
          },
          "required": [
            "name"
          ]
        }
      },
      "required": [
        "vault",
        "vaultSecret"
      ]
    },
    "KafkaTokenKeyVaultPropertiesUpdate": {
      "type": "object",
      "description": "Kafka Token KeyVault properties.",
      "properties": {
        "username": {
          "type": "string",
          "description": "Username to connect with."
        },
        "vault": {
          "description": "KeyVault properties.",
          "type": "object",
          "properties": {
            "credentials": {
              "description": "KeyVault credentials.",
              "type": "object",
              "properties": {
                "servicePrincipalLocalSecretName": {
                  "type": "string",
                  "description": "KeyVault service principal local secret name."
                }
              }
            },
            "directoryId": {
              "type": "string",
              "description": "KeyVault directoryId."
            },
            "name": {
              "type": "string",
              "description": "KeyVault name."
            }
          }
        },
        "vaultSecret": {
          "description": "KeyVault secret details.",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "KeyVault secret name."
            },
            "version": {
              "type": "string",
              "description": "KeyVault secret version."
            }
          }
        }
      }
    },
    "KafkaTopicMapBatching": {
      "type": "object",
      "description": "Kafka TopicMap Batching properties",
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "The setting to enable or disable batching.",
          "default": false
        },
        "latencyMs": {
          "type": "integer",
          "format": "int32",
          "description": "The latency of message batching.",
          "default": 5,
          "minimum": 0,
          "maximum": 65535
        },
        "maxBytes": {
          "type": "integer",
          "format": "int64",
          "description": "The maximum bytes to send in a batch.",
          "default": 1000000,
          "minimum": 0,
          "maximum": 4294967295
        },
        "maxMessages": {
          "type": "integer",
          "format": "int64",
          "description": "The maximum messages to send in a batch.",
          "default": 100000,
          "minimum": 0,
          "maximum": 4294967295
        }
      }
    },
    "KafkaTopicMapProperties": {
      "type": "object",
      "description": "KafkaTopicMap Properties",
      "properties": {
        "batching": {
          "description": "The batching settings for kafka messages.",
          "type": "object",
          "properties": {
            "enabled": {
              "type": "boolean",
              "description": "The setting to enable or disable batching.",
              "default": false
            },
            "latencyMs": {
              "type": "integer",
              "format": "int32",
              "description": "The latency of message batching.",
              "default": 5,
              "minimum": 0,
              "maximum": 65535
            },
            "maxBytes": {
              "type": "integer",
              "format": "int64",
              "description": "The maximum bytes to send in a batch.",
              "default": 1000000,
              "minimum": 0,
              "maximum": 4294967295
            },
            "maxMessages": {
              "type": "integer",
              "format": "int64",
              "description": "The maximum messages to send in a batch.",
              "default": 100000,
              "minimum": 0,
              "maximum": 4294967295
            }
          }
        },
        "compression": {
          "type": "string",
          "description": "The compression to use for kafka messages.",
          "default": "none",
          "enum": [
            "none",
            "gzip",
            "snappy",
            "lz4"
          ],
          "x-ms-enum": {
            "name": "KafkaMessageCompressionType",
            "modelAsString": true,
            "values": [
              {
                "name": "none",
                "value": "none",
                "description": "No Kafka message compression."
              },
              {
                "name": "gzip",
                "value": "gzip",
                "description": "Gzip Kafka message compression."
              },
              {
                "name": "snappy",
                "value": "snappy",
                "description": "Snappy Kafka message compression."
              },
              {
                "name": "lz4",
                "value": "lz4",
                "description": "Lz4 Kafka message compression."
              }
            ]
          }
        },
        "copyMqttProperties": {
          "type": "string",
          "description": "The flag to copy Mqtt properties."
        },
        "kafkaConnectorRef": {
          "type": "string",
          "description": "The kafkaConnector CRD it refers to."
        },
        "partitionKeyProperty": {
          "type": "string",
          "description": "The partition to use for Kafka."
        },
        "partitionStrategy": {
          "type": "string",
          "description": "The partition strategy to use for Kafka.",
          "default": "default",
          "enum": [
            "default",
            "static",
            "topic",
            "property"
          ],
          "x-ms-enum": {
            "name": "KafkaPartitionStrategy",
            "modelAsString": true,
            "values": [
              {
                "name": "default",
                "value": "default",
                "description": "Default partition strategy."
              },
              {
                "name": "static",
                "value": "static",
                "description": "Static partition strategy."
              },
              {
                "name": "topic",
                "value": "topic",
                "description": "Topic partition strategy."
              },
              {
                "name": "property",
                "value": "property",
                "description": "Property partition strategy."
              }
            ]
          }
        },
        "routes": {
          "type": "array",
          "description": "The route details for Kafka connector.",
          "items": {
            "type": "object",
            "description": "Kafka Routes properties. NOTE - Enum only one method is allowed to be passed.",
            "properties": {
              "kafkaToMqtt": {
                "description": "Kafka to Mqtt route.",
                "type": "object",
                "properties": {
                  "consumerGroupId": {
                    "type": "string",
                    "description": "The consumer group id to use."
                  },
                  "kafkaTopic": {
                    "type": "string",
                    "description": "The kafka topic to pull from."
                  },
                  "mqttTopic": {
                    "type": "string",
                    "description": "The mqtt topic to publish to."
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of the route."
                  },
                  "qos": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The qos to use for mqtt.",
                    "default": 1,
                    "minimum": 0,
                    "maximum": 1
                  }
                },
                "required": [
                  "kafkaTopic",
                  "mqttTopic",
                  "name"
                ]
              },
              "mqttToKafka": {
                "description": "Mqtt to Kafka route.",
                "type": "object",
                "properties": {
                  "kafkaAcks": {
                    "description": "The kafka acks to use.",
                    "type": "string",
                    "enum": [
                      "zero",
                      "one",
                      "all"
                    ],
                    "x-ms-enum": {
                      "name": "KafkaAcks",
                      "modelAsString": true,
                      "values": [
                        {
                          "name": "zero",
                          "value": "zero",
                          "description": "Kafka acks zero."
                        },
                        {
                          "name": "one",
                          "value": "one",
                          "description": "Kafka acks one."
                        },
                        {
                          "name": "all",
                          "value": "all",
                          "description": "Kafka acks all."
                        }
                      ]
                    }
                  },
                  "kafkaTopic": {
                    "type": "string",
                    "description": "The kafka topic to publish to."
                  },
                  "mqttTopic": {
                    "type": "string",
                    "description": "The mqtt topic to pull from."
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of the route."
                  },
                  "qos": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The qos to use for mqtt.",
                    "default": 1,
                    "minimum": 0,
                    "maximum": 1
                  },
                  "sharedSubscription": {
                    "description": "The properties for shared subscription.",
                    "type": "object",
                    "properties": {
                      "groupMinimumShareNumber": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The minimum number to use in a group for subscription.",
                        "minimum": 0,
                        "maximum": 255
                      },
                      "groupName": {
                        "type": "string",
                        "description": "The name of the shared subscription."
                      }
                    },
                    "required": [
                      "groupMinimumShareNumber",
                      "groupName"
                    ]
                  }
                },
                "required": [
                  "kafkaAcks",
                  "kafkaTopic",
                  "mqttTopic",
                  "name"
                ]
              }
            }
          },
          "x-ms-identifiers": []
        },
        "provisioningState": {
          "description": "The status of the last operation.",
          "readOnly": true,
          "type": "string",
          "enum": [
            "Succeeded",
            "Failed",
            "Canceled",
            "Provisioning",
            "Updating",
            "Deleting",
            "Accepted"
          ],
          "x-ms-enum": {
            "name": "ProvisioningState",
            "modelAsString": true,
            "values": [
              {
                "name": "Succeeded",
                "value": "Succeeded",
                "description": "Resource has been created."
              },
              {
                "name": "Failed",
                "value": "Failed",
                "description": "Resource creation failed."
              },
              {
                "name": "Canceled",
                "value": "Canceled",
                "description": "Resource creation was canceled."
              },
              {
                "name": "Provisioning",
                "value": "Provisioning",
                "description": "Resource is getting provisioned."
              },
              {
                "name": "Updating",
                "value": "Updating",
                "description": "Resource is Updating."
              },
              {
                "name": "Deleting",
                "value": "Deleting",
                "description": "Resource is Deleting."
              },
              {
                "name": "Accepted",
                "value": "Accepted",
                "description": "Resource has been Accepted."
              }
            ]
          }
        }
      },
      "required": [
        "kafkaConnectorRef",
        "routes"
      ]
    },
    "KafkaTopicMapResource": {
      "type": "object",
      "description": "MQ kafkaConnector/topicMap resource",
      "properties": {
        "id": {
          "type": "string",
          "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "The name of the resource",
          "readOnly": true
        },
        "type": {
          "type": "string",
          "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
          "readOnly": true
        },
        "systemData": {
          "type": "object",
          "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
          "readOnly": true,
          "properties": {
            "createdBy": {
              "type": "string",
              "description": "The identity that created the resource."
            },
            "createdByType": {
              "type": "string",
              "description": "The type of identity that created the resource.",
              "enum": [
                "User",
                "Application",
                "ManagedIdentity",
                "Key"
              ],
              "x-ms-enum": {
                "name": "createdByType",
                "modelAsString": true
              }
            },
            "createdAt": {
              "type": "string",
              "format": "date-time",
              "description": "The timestamp of resource creation (UTC)."
            },
            "lastModifiedBy": {
              "type": "string",
              "description": "The identity that last modified the resource."
            },
            "lastModifiedByType": {
              "type": "string",
              "description": "The type of identity that last modified the resource.",
              "enum": [
                "User",
                "Application",
                "ManagedIdentity",
                "Key"
              ],
              "x-ms-enum": {
                "name": "createdByType",
                "modelAsString": true
              }
            },
            "lastModifiedAt": {
              "type": "string",
              "format": "date-time",
              "description": "The timestamp of resource last modification (UTC)"
            }
          }
        },
        "tags": {
          "type": "object",
          "description": "Resource tags.",
          "additionalProperties": {
            "type": "string"
          },
          "x-ms-mutability": [
            "read",
            "create",
            "update"
          ]
        },
        "location": {
          "type": "string",
          "description": "The geo-location where the resource lives",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "properties": {
          "description": "The resource-specific properties for this resource.",
          "x-ms-client-flatten": true,
          "type": "object",
          "properties": {
            "batching": {
              "description": "The batching settings for kafka messages.",
              "type": "object",
              "properties": {
                "enabled": {
                  "type": "boolean",
                  "description": "The setting to enable or disable batching.",
                  "default": false
                },
                "latencyMs": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The latency of message batching.",
                  "default": 5,
                  "minimum": 0,
                  "maximum": 65535
                },
                "maxBytes": {
                  "type": "integer",
                  "format": "int64",
                  "description": "The maximum bytes to send in a batch.",
                  "default": 1000000,
                  "minimum": 0,
                  "maximum": 4294967295
                },
                "maxMessages": {
                  "type": "integer",
                  "format": "int64",
                  "description": "The maximum messages to send in a batch.",
                  "default": 100000,
                  "minimum": 0,
                  "maximum": 4294967295
                }
              }
            },
            "compression": {
              "type": "string",
              "description": "The compression to use for kafka messages.",
              "default": "none",
              "enum": [
                "none",
                "gzip",
                "snappy",
                "lz4"
              ],
              "x-ms-enum": {
                "name": "KafkaMessageCompressionType",
                "modelAsString": true,
                "values": [
                  {
                    "name": "none",
                    "value": "none",
                    "description": "No Kafka message compression."
                  },
                  {
                    "name": "gzip",
                    "value": "gzip",
                    "description": "Gzip Kafka message compression."
                  },
                  {
                    "name": "snappy",
                    "value": "snappy",
                    "description": "Snappy Kafka message compression."
                  },
                  {
                    "name": "lz4",
                    "value": "lz4",
                    "description": "Lz4 Kafka message compression."
                  }
                ]
              }
            },
            "copyMqttProperties": {
              "type": "string",
              "description": "The flag to copy Mqtt properties."
            },
            "kafkaConnectorRef": {
              "type": "string",
              "description": "The kafkaConnector CRD it refers to."
            },
            "partitionKeyProperty": {
              "type": "string",
              "description": "The partition to use for Kafka."
            },
            "partitionStrategy": {
              "type": "string",
              "description": "The partition strategy to use for Kafka.",
              "default": "default",
              "enum": [
                "default",
                "static",
                "topic",
                "property"
              ],
              "x-ms-enum": {
                "name": "KafkaPartitionStrategy",
                "modelAsString": true,
                "values": [
                  {
                    "name": "default",
                    "value": "default",
                    "description": "Default partition strategy."
                  },
                  {
                    "name": "static",
                    "value": "static",
                    "description": "Static partition strategy."
                  },
                  {
                    "name": "topic",
                    "value": "topic",
                    "description": "Topic partition strategy."
                  },
                  {
                    "name": "property",
                    "value": "property",
                    "description": "Property partition strategy."
                  }
                ]
              }
            },
            "routes": {
              "type": "array",
              "description": "The route details for Kafka connector.",
              "items": {
                "type": "object",
                "description": "Kafka Routes properties. NOTE - Enum only one method is allowed to be passed.",
                "properties": {
                  "kafkaToMqtt": {
                    "description": "Kafka to Mqtt route.",
                    "type": "object",
                    "properties": {
                      "consumerGroupId": {
                        "type": "string",
                        "description": "The consumer group id to use."
                      },
                      "kafkaTopic": {
                        "type": "string",
                        "description": "The kafka topic to pull from."
                      },
                      "mqttTopic": {
                        "type": "string",
                        "description": "The mqtt topic to publish to."
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the route."
                      },
                      "qos": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The qos to use for mqtt.",
                        "default": 1,
                        "minimum": 0,
                        "maximum": 1
                      }
                    },
                    "required": [
                      "kafkaTopic",
                      "mqttTopic",
                      "name"
                    ]
                  },
                  "mqttToKafka": {
                    "description": "Mqtt to Kafka route.",
                    "type": "object",
                    "properties": {
                      "kafkaAcks": {
                        "description": "The kafka acks to use.",
                        "type": "string",
                        "enum": [
                          "zero",
                          "one",
                          "all"
                        ],
                        "x-ms-enum": {
                          "name": "KafkaAcks",
                          "modelAsString": true,
                          "values": [
                            {
                              "name": "zero",
                              "value": "zero",
                              "description": "Kafka acks zero."
                            },
                            {
                              "name": "one",
                              "value": "one",
                              "description": "Kafka acks one."
                            },
                            {
                              "name": "all",
                              "value": "all",
                              "description": "Kafka acks all."
                            }
                          ]
                        }
                      },
                      "kafkaTopic": {
                        "type": "string",
                        "description": "The kafka topic to publish to."
                      },
                      "mqttTopic": {
                        "type": "string",
                        "description": "The mqtt topic to pull from."
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the route."
                      },
                      "qos": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The qos to use for mqtt.",
                        "default": 1,
                        "minimum": 0,
                        "maximum": 1
                      },
                      "sharedSubscription": {
                        "description": "The properties for shared subscription.",
                        "type": "object",
                        "properties": {
                          "groupMinimumShareNumber": {
                            "type": "integer",
                            "format": "int32",
                            "description": "The minimum number to use in a group for subscription.",
                            "minimum": 0,
                            "maximum": 255
                          },
                          "groupName": {
                            "type": "string",
                            "description": "The name of the shared subscription."
                          }
                        },
                        "required": [
                          "groupMinimumShareNumber",
                          "groupName"
                        ]
                      }
                    },
                    "required": [
                      "kafkaAcks",
                      "kafkaTopic",
                      "mqttTopic",
                      "name"
                    ]
                  }
                }
              },
              "x-ms-identifiers": []
            },
            "provisioningState": {
              "description": "The status of the last operation.",
              "readOnly": true,
              "type": "string",
              "enum": [
                "Succeeded",
                "Failed",
                "Canceled",
                "Provisioning",
                "Updating",
                "Deleting",
                "Accepted"
              ],
              "x-ms-enum": {
                "name": "ProvisioningState",
                "modelAsString": true,
                "values": [
                  {
                    "name": "Succeeded",
                    "value": "Succeeded",
                    "description": "Resource has been created."
                  },
                  {
                    "name": "Failed",
                    "value": "Failed",
                    "description": "Resource creation failed."
                  },
                  {
                    "name": "Canceled",
                    "value": "Canceled",
                    "description": "Resource creation was canceled."
                  },
                  {
                    "name": "Provisioning",
                    "value": "Provisioning",
                    "description": "Resource is getting provisioned."
                  },
                  {
                    "name": "Updating",
                    "value": "Updating",
                    "description": "Resource is Updating."
                  },
                  {
                    "name": "Deleting",
                    "value": "Deleting",
                    "description": "Resource is Deleting."
                  },
                  {
                    "name": "Accepted",
                    "value": "Accepted",
                    "description": "Resource has been Accepted."
                  }
                ]
              }
            }
          },
          "required": [
            "kafkaConnectorRef",
            "routes"
          ]
        },
        "extendedLocation": {
          "description": "Extended Location",
          "x-ms-mutability": [
            "read",
            "create"
          ],
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name of the extended location."
            },
            "type": {
              "description": "Type of ExtendedLocation.",
              "type": "string",
              "enum": [
                "CustomLocation"
              ],
              "x-ms-enum": {
                "name": "ExtendedLocationType",
                "modelAsString": true,
                "values": [
                  {
                    "name": "CustomLocation",
                    "value": "CustomLocation",
                    "description": "CustomLocation type"
                  }
                ]
              }
            }
          },
          "required": [
            "name",
            "type"
          ]
        }
      },
      "required": [
        "extendedLocation"
      ]
    },
    "KafkaTopicMapResourceListResult": {
      "type": "object",
      "description": "The response of a KafkaTopicMapResource list operation.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The KafkaTopicMapResource items on this page",
          "items": {
            "type": "object",
            "description": "MQ kafkaConnector/topicMap resource",
            "properties": {
              "id": {
                "type": "string",
                "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                "readOnly": true
              },
              "name": {
                "type": "string",
                "description": "The name of the resource",
                "readOnly": true
              },
              "type": {
                "type": "string",
                "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                "readOnly": true
              },
              "systemData": {
                "type": "object",
                "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                "readOnly": true,
                "properties": {
                  "createdBy": {
                    "type": "string",
                    "description": "The identity that created the resource."
                  },
                  "createdByType": {
                    "type": "string",
                    "description": "The type of identity that created the resource.",
                    "enum": [
                      "User",
                      "Application",
                      "ManagedIdentity",
                      "Key"
                    ],
                    "x-ms-enum": {
                      "name": "createdByType",
                      "modelAsString": true
                    }
                  },
                  "createdAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp of resource creation (UTC)."
                  },
                  "lastModifiedBy": {
                    "type": "string",
                    "description": "The identity that last modified the resource."
                  },
                  "lastModifiedByType": {
                    "type": "string",
                    "description": "The type of identity that last modified the resource.",
                    "enum": [
                      "User",
                      "Application",
                      "ManagedIdentity",
                      "Key"
                    ],
                    "x-ms-enum": {
                      "name": "createdByType",
                      "modelAsString": true
                    }
                  },
                  "lastModifiedAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp of resource last modification (UTC)"
                  }
                }
              },
              "tags": {
                "type": "object",
                "description": "Resource tags.",
                "additionalProperties": {
                  "type": "string"
                },
                "x-ms-mutability": [
                  "read",
                  "create",
                  "update"
                ]
              },
              "location": {
                "type": "string",
                "description": "The geo-location where the resource lives",
                "x-ms-mutability": [
                  "read",
                  "create"
                ]
              },
              "properties": {
                "description": "The resource-specific properties for this resource.",
                "x-ms-client-flatten": true,
                "type": "object",
                "properties": {
                  "batching": {
                    "description": "The batching settings for kafka messages.",
                    "type": "object",
                    "properties": {
                      "enabled": {
                        "type": "boolean",
                        "description": "The setting to enable or disable batching.",
                        "default": false
                      },
                      "latencyMs": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The latency of message batching.",
                        "default": 5,
                        "minimum": 0,
                        "maximum": 65535
                      },
                      "maxBytes": {
                        "type": "integer",
                        "format": "int64",
                        "description": "The maximum bytes to send in a batch.",
                        "default": 1000000,
                        "minimum": 0,
                        "maximum": 4294967295
                      },
                      "maxMessages": {
                        "type": "integer",
                        "format": "int64",
                        "description": "The maximum messages to send in a batch.",
                        "default": 100000,
                        "minimum": 0,
                        "maximum": 4294967295
                      }
                    }
                  },
                  "compression": {
                    "type": "string",
                    "description": "The compression to use for kafka messages.",
                    "default": "none",
                    "enum": [
                      "none",
                      "gzip",
                      "snappy",
                      "lz4"
                    ],
                    "x-ms-enum": {
                      "name": "KafkaMessageCompressionType",
                      "modelAsString": true,
                      "values": [
                        {
                          "name": "none",
                          "value": "none",
                          "description": "No Kafka message compression."
                        },
                        {
                          "name": "gzip",
                          "value": "gzip",
                          "description": "Gzip Kafka message compression."
                        },
                        {
                          "name": "snappy",
                          "value": "snappy",
                          "description": "Snappy Kafka message compression."
                        },
                        {
                          "name": "lz4",
                          "value": "lz4",
                          "description": "Lz4 Kafka message compression."
                        }
                      ]
                    }
                  },
                  "copyMqttProperties": {
                    "type": "string",
                    "description": "The flag to copy Mqtt properties."
                  },
                  "kafkaConnectorRef": {
                    "type": "string",
                    "description": "The kafkaConnector CRD it refers to."
                  },
                  "partitionKeyProperty": {
                    "type": "string",
                    "description": "The partition to use for Kafka."
                  },
                  "partitionStrategy": {
                    "type": "string",
                    "description": "The partition strategy to use for Kafka.",
                    "default": "default",
                    "enum": [
                      "default",
                      "static",
                      "topic",
                      "property"
                    ],
                    "x-ms-enum": {
                      "name": "KafkaPartitionStrategy",
                      "modelAsString": true,
                      "values": [
                        {
                          "name": "default",
                          "value": "default",
                          "description": "Default partition strategy."
                        },
                        {
                          "name": "static",
                          "value": "static",
                          "description": "Static partition strategy."
                        },
                        {
                          "name": "topic",
                          "value": "topic",
                          "description": "Topic partition strategy."
                        },
                        {
                          "name": "property",
                          "value": "property",
                          "description": "Property partition strategy."
                        }
                      ]
                    }
                  },
                  "routes": {
                    "type": "array",
                    "description": "The route details for Kafka connector.",
                    "items": {
                      "type": "object",
                      "description": "Kafka Routes properties. NOTE - Enum only one method is allowed to be passed.",
                      "properties": {
                        "kafkaToMqtt": {
                          "description": "Kafka to Mqtt route.",
                          "type": "object",
                          "properties": {
                            "consumerGroupId": {
                              "type": "string",
                              "description": "The consumer group id to use."
                            },
                            "kafkaTopic": {
                              "type": "string",
                              "description": "The kafka topic to pull from."
                            },
                            "mqttTopic": {
                              "type": "string",
                              "description": "The mqtt topic to publish to."
                            },
                            "name": {
                              "type": "string",
                              "description": "The name of the route."
                            },
                            "qos": {
                              "type": "integer",
                              "format": "int32",
                              "description": "The qos to use for mqtt.",
                              "default": 1,
                              "minimum": 0,
                              "maximum": 1
                            }
                          },
                          "required": [
                            "kafkaTopic",
                            "mqttTopic",
                            "name"
                          ]
                        },
                        "mqttToKafka": {
                          "description": "Mqtt to Kafka route.",
                          "type": "object",
                          "properties": {
                            "kafkaAcks": {
                              "description": "The kafka acks to use.",
                              "type": "string",
                              "enum": [
                                "zero",
                                "one",
                                "all"
                              ],
                              "x-ms-enum": {
                                "name": "KafkaAcks",
                                "modelAsString": true,
                                "values": [
                                  {
                                    "name": "zero",
                                    "value": "zero",
                                    "description": "Kafka acks zero."
                                  },
                                  {
                                    "name": "one",
                                    "value": "one",
                                    "description": "Kafka acks one."
                                  },
                                  {
                                    "name": "all",
                                    "value": "all",
                                    "description": "Kafka acks all."
                                  }
                                ]
                              }
                            },
                            "kafkaTopic": {
                              "type": "string",
                              "description": "The kafka topic to publish to."
                            },
                            "mqttTopic": {
                              "type": "string",
                              "description": "The mqtt topic to pull from."
                            },
                            "name": {
                              "type": "string",
                              "description": "The name of the route."
                            },
                            "qos": {
                              "type": "integer",
                              "format": "int32",
                              "description": "The qos to use for mqtt.",
                              "default": 1,
                              "minimum": 0,
                              "maximum": 1
                            },
                            "sharedSubscription": {
                              "description": "The properties for shared subscription.",
                              "type": "object",
                              "properties": {
                                "groupMinimumShareNumber": {
                                  "type": "integer",
                                  "format": "int32",
                                  "description": "The minimum number to use in a group for subscription.",
                                  "minimum": 0,
                                  "maximum": 255
                                },
                                "groupName": {
                                  "type": "string",
                                  "description": "The name of the shared subscription."
                                }
                              },
                              "required": [
                                "groupMinimumShareNumber",
                                "groupName"
                              ]
                            }
                          },
                          "required": [
                            "kafkaAcks",
                            "kafkaTopic",
                            "mqttTopic",
                            "name"
                          ]
                        }
                      }
                    },
                    "x-ms-identifiers": []
                  },
                  "provisioningState": {
                    "description": "The status of the last operation.",
                    "readOnly": true,
                    "type": "string",
                    "enum": [
                      "Succeeded",
                      "Failed",
                      "Canceled",
                      "Provisioning",
                      "Updating",
                      "Deleting",
                      "Accepted"
                    ],
                    "x-ms-enum": {
                      "name": "ProvisioningState",
                      "modelAsString": true,
                      "values": [
                        {
                          "name": "Succeeded",
                          "value": "Succeeded",
                          "description": "Resource has been created."
                        },
                        {
                          "name": "Failed",
                          "value": "Failed",
                          "description": "Resource creation failed."
                        },
                        {
                          "name": "Canceled",
                          "value": "Canceled",
                          "description": "Resource creation was canceled."
                        },
                        {
                          "name": "Provisioning",
                          "value": "Provisioning",
                          "description": "Resource is getting provisioned."
                        },
                        {
                          "name": "Updating",
                          "value": "Updating",
                          "description": "Resource is Updating."
                        },
                        {
                          "name": "Deleting",
                          "value": "Deleting",
                          "description": "Resource is Deleting."
                        },
                        {
                          "name": "Accepted",
                          "value": "Accepted",
                          "description": "Resource has been Accepted."
                        }
                      ]
                    }
                  }
                },
                "required": [
                  "kafkaConnectorRef",
                  "routes"
                ]
              },
              "extendedLocation": {
                "description": "Extended Location",
                "x-ms-mutability": [
                  "read",
                  "create"
                ],
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the extended location."
                  },
                  "type": {
                    "description": "Type of ExtendedLocation.",
                    "type": "string",
                    "enum": [
                      "CustomLocation"
                    ],
                    "x-ms-enum": {
                      "name": "ExtendedLocationType",
                      "modelAsString": true,
                      "values": [
                        {
                          "name": "CustomLocation",
                          "value": "CustomLocation",
                          "description": "CustomLocation type"
                        }
                      ]
                    }
                  }
                },
                "required": [
                  "name",
                  "type"
                ]
              }
            },
            "required": [
              "extendedLocation"
            ]
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "KafkaTopicMapResourceUpdate": {
      "type": "object",
      "description": "The type used for update operations of the KafkaTopicMapResource.",
      "properties": {
        "tags": {
          "type": "object",
          "description": "Resource tags.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "properties": {
          "description": "The resource-specific properties for this resource.",
          "x-ms-client-flatten": true,
          "type": "object",
          "properties": {
            "batching": {
              "description": "The batching settings for kafka messages.",
              "type": "object",
              "properties": {
                "enabled": {
                  "type": "boolean",
                  "description": "The setting to enable or disable batching.",
                  "default": false
                },
                "latencyMs": {
                  "type": "integer",
                  "format": "int32",
                  "description": "The latency of message batching.",
                  "default": 5,
                  "minimum": 0,
                  "maximum": 65535
                },
                "maxBytes": {
                  "type": "integer",
                  "format": "int64",
                  "description": "The maximum bytes to send in a batch.",
                  "default": 1000000,
                  "minimum": 0,
                  "maximum": 4294967295
                },
                "maxMessages": {
                  "type": "integer",
                  "format": "int64",
                  "description": "The maximum messages to send in a batch.",
                  "default": 100000,
                  "minimum": 0,
                  "maximum": 4294967295
                }
              }
            },
            "compression": {
              "type": "string",
              "description": "The compression to use for kafka messages.",
              "default": "none",
              "enum": [
                "none",
                "gzip",
                "snappy",
                "lz4"
              ],
              "x-ms-enum": {
                "name": "KafkaMessageCompressionType",
                "modelAsString": true,
                "values": [
                  {
                    "name": "none",
                    "value": "none",
                    "description": "No Kafka message compression."
                  },
                  {
                    "name": "gzip",
                    "value": "gzip",
                    "description": "Gzip Kafka message compression."
                  },
                  {
                    "name": "snappy",
                    "value": "snappy",
                    "description": "Snappy Kafka message compression."
                  },
                  {
                    "name": "lz4",
                    "value": "lz4",
                    "description": "Lz4 Kafka message compression."
                  }
                ]
              }
            },
            "copyMqttProperties": {
              "type": "string",
              "description": "The flag to copy Mqtt properties."
            },
            "kafkaConnectorRef": {
              "type": "string",
              "description": "The kafkaConnector CRD it refers to."
            },
            "partitionKeyProperty": {
              "type": "string",
              "description": "The partition to use for Kafka."
            },
            "partitionStrategy": {
              "type": "string",
              "description": "The partition strategy to use for Kafka.",
              "default": "default",
              "enum": [
                "default",
                "static",
                "topic",
                "property"
              ],
              "x-ms-enum": {
                "name": "KafkaPartitionStrategy",
                "modelAsString": true,
                "values": [
                  {
                    "name": "default",
                    "value": "default",
                    "description": "Default partition strategy."
                  },
                  {
                    "name": "static",
                    "value": "static",
                    "description": "Static partition strategy."
                  },
                  {
                    "name": "topic",
                    "value": "topic",
                    "description": "Topic partition strategy."
                  },
                  {
                    "name": "property",
                    "value": "property",
                    "description": "Property partition strategy."
                  }
                ]
              }
            },
            "routes": {
              "type": "array",
              "description": "The route details for Kafka connector.",
              "items": {
                "type": "object",
                "description": "Kafka Routes properties. NOTE - Enum only one method is allowed to be passed.",
                "properties": {
                  "kafkaToMqtt": {
                    "description": "Kafka to Mqtt route.",
                    "type": "object",
                    "properties": {
                      "consumerGroupId": {
                        "type": "string",
                        "description": "The consumer group id to use."
                      },
                      "kafkaTopic": {
                        "type": "string",
                        "description": "The kafka topic to pull from."
                      },
                      "mqttTopic": {
                        "type": "string",
                        "description": "The mqtt topic to publish to."
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the route."
                      },
                      "qos": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The qos to use for mqtt.",
                        "default": 1,
                        "minimum": 0,
                        "maximum": 1
                      }
                    },
                    "required": [
                      "kafkaTopic",
                      "mqttTopic",
                      "name"
                    ]
                  },
                  "mqttToKafka": {
                    "description": "Mqtt to Kafka route.",
                    "type": "object",
                    "properties": {
                      "kafkaAcks": {
                        "description": "The kafka acks to use.",
                        "type": "string",
                        "enum": [
                          "zero",
                          "one",
                          "all"
                        ],
                        "x-ms-enum": {
                          "name": "KafkaAcks",
                          "modelAsString": true,
                          "values": [
                            {
                              "name": "zero",
                              "value": "zero",
                              "description": "Kafka acks zero."
                            },
                            {
                              "name": "one",
                              "value": "one",
                              "description": "Kafka acks one."
                            },
                            {
                              "name": "all",
                              "value": "all",
                              "description": "Kafka acks all."
                            }
                          ]
                        }
                      },
                      "kafkaTopic": {
                        "type": "string",
                        "description": "The kafka topic to publish to."
                      },
                      "mqttTopic": {
                        "type": "string",
                        "description": "The mqtt topic to pull from."
                      },
                      "name": {
                        "type": "string",
                        "description": "The name of the route."
                      },
                      "qos": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The qos to use for mqtt.",
                        "default": 1,
                        "minimum": 0,
                        "maximum": 1
                      },
                      "sharedSubscription": {
                        "description": "The properties for shared subscription.",
                        "type": "object",
                        "properties": {
                          "groupMinimumShareNumber": {
                            "type": "integer",
                            "format": "int32",
                            "description": "The minimum number to use in a group for subscription.",
                            "minimum": 0,
                            "maximum": 255
                          },
                          "groupName": {
                            "type": "string",
                            "description": "The name of the shared subscription."
                          }
                        },
                        "required": [
                          "groupMinimumShareNumber",
                          "groupName"
                        ]
                      }
                    },
                    "required": [
                      "kafkaAcks",
                      "kafkaTopic",
                      "mqttTopic",
                      "name"
                    ]
                  }
                }
              },
              "x-ms-identifiers": []
            }
          }
        }
      }
    },
    "KafkaTopicMapResourceUpdateProperties": {
      "type": "object",
      "description": "The updatable properties of the KafkaTopicMapResource.",
      "properties": {
        "batching": {
          "description": "The batching settings for kafka messages.",
          "type": "object",
          "properties": {
            "enabled": {
              "type": "boolean",
              "description": "The setting to enable or disable batching.",
              "default": false
            },
            "latencyMs": {
              "type": "integer",
              "format": "int32",
              "description": "The latency of message batching.",
              "default": 5,
              "minimum": 0,
              "maximum": 65535
            },
            "maxBytes": {
              "type": "integer",
              "format": "int64",
              "description": "The maximum bytes to send in a batch.",
              "default": 1000000,
              "minimum": 0,
              "maximum": 4294967295
            },
            "maxMessages": {
              "type": "integer",
              "format": "int64",
              "description": "The maximum messages to send in a batch.",
              "default": 100000,
              "minimum": 0,
              "maximum": 4294967295
            }
          }
        },
        "compression": {
          "type": "string",
          "description": "The compression to use for kafka messages.",
          "default": "none",
          "enum": [
            "none",
            "gzip",
            "snappy",
            "lz4"
          ],
          "x-ms-enum": {
            "name": "KafkaMessageCompressionType",
            "modelAsString": true,
            "values": [
              {
                "name": "none",
                "value": "none",
                "description": "No Kafka message compression."
              },
              {
                "name": "gzip",
                "value": "gzip",
                "description": "Gzip Kafka message compression."
              },
              {
                "name": "snappy",
                "value": "snappy",
                "description": "Snappy Kafka message compression."
              },
              {
                "name": "lz4",
                "value": "lz4",
                "description": "Lz4 Kafka message compression."
              }
            ]
          }
        },
        "copyMqttProperties": {
          "type": "string",
          "description": "The flag to copy Mqtt properties."
        },
        "kafkaConnectorRef": {
          "type": "string",
          "description": "The kafkaConnector CRD it refers to."
        },
        "partitionKeyProperty": {
          "type": "string",
          "description": "The partition to use for Kafka."
        },
        "partitionStrategy": {
          "type": "string",
          "description": "The partition strategy to use for Kafka.",
          "default": "default",
          "enum": [
            "default",
            "static",
            "topic",
            "property"
          ],
          "x-ms-enum": {
            "name": "KafkaPartitionStrategy",
            "modelAsString": true,
            "values": [
              {
                "name": "default",
                "value": "default",
                "description": "Default partition strategy."
              },
              {
                "name": "static",
                "value": "static",
                "description": "Static partition strategy."
              },
              {
                "name": "topic",
                "value": "topic",
                "description": "Topic partition strategy."
              },
              {
                "name": "property",
                "value": "property",
                "description": "Property partition strategy."
              }
            ]
          }
        },
        "routes": {
          "type": "array",
          "description": "The route details for Kafka connector.",
          "items": {
            "type": "object",
            "description": "Kafka Routes properties. NOTE - Enum only one method is allowed to be passed.",
            "properties": {
              "kafkaToMqtt": {
                "description": "Kafka to Mqtt route.",
                "type": "object",
                "properties": {
                  "consumerGroupId": {
                    "type": "string",
                    "description": "The consumer group id to use."
                  },
                  "kafkaTopic": {
                    "type": "string",
                    "description": "The kafka topic to pull from."
                  },
                  "mqttTopic": {
                    "type": "string",
                    "description": "The mqtt topic to publish to."
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of the route."
                  },
                  "qos": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The qos to use for mqtt.",
                    "default": 1,
                    "minimum": 0,
                    "maximum": 1
                  }
                },
                "required": [
                  "kafkaTopic",
                  "mqttTopic",
                  "name"
                ]
              },
              "mqttToKafka": {
                "description": "Mqtt to Kafka route.",
                "type": "object",
                "properties": {
                  "kafkaAcks": {
                    "description": "The kafka acks to use.",
                    "type": "string",
                    "enum": [
                      "zero",
                      "one",
                      "all"
                    ],
                    "x-ms-enum": {
                      "name": "KafkaAcks",
                      "modelAsString": true,
                      "values": [
                        {
                          "name": "zero",
                          "value": "zero",
                          "description": "Kafka acks zero."
                        },
                        {
                          "name": "one",
                          "value": "one",
                          "description": "Kafka acks one."
                        },
                        {
                          "name": "all",
                          "value": "all",
                          "description": "Kafka acks all."
                        }
                      ]
                    }
                  },
                  "kafkaTopic": {
                    "type": "string",
                    "description": "The kafka topic to publish to."
                  },
                  "mqttTopic": {
                    "type": "string",
                    "description": "The mqtt topic to pull from."
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of the route."
                  },
                  "qos": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The qos to use for mqtt.",
                    "default": 1,
                    "minimum": 0,
                    "maximum": 1
                  },
                  "sharedSubscription": {
                    "description": "The properties for shared subscription.",
                    "type": "object",
                    "properties": {
                      "groupMinimumShareNumber": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The minimum number to use in a group for subscription.",
                        "minimum": 0,
                        "maximum": 255
                      },
                      "groupName": {
                        "type": "string",
                        "description": "The name of the shared subscription."
                      }
                    },
                    "required": [
                      "groupMinimumShareNumber",
                      "groupName"
                    ]
                  }
                },
                "required": [
                  "kafkaAcks",
                  "kafkaTopic",
                  "mqttTopic",
                  "name"
                ]
              }
            }
          },
          "x-ms-identifiers": []
        }
      }
    },
    "KafkaX509Authentication": {
      "type": "object",
      "description": "Kafka RemoteBrokerConnection X509 Authentication properties.",
      "properties": {
        "keyVault": {
          "description": "Keyvault X509 secret properties.",
          "type": "object",
          "properties": {
            "vault": {
              "description": "KeyVault properties.",
              "type": "object",
              "properties": {
                "credentials": {
                  "description": "KeyVault credentials.",
                  "type": "object",
                  "properties": {
                    "servicePrincipalLocalSecretName": {
                      "type": "string",
                      "description": "KeyVault service principal local secret name."
                    }
                  },
                  "required": [
                    "servicePrincipalLocalSecretName"
                  ]
                },
                "directoryId": {
                  "type": "string",
                  "description": "KeyVault directoryId."
                },
                "name": {
                  "type": "string",
                  "description": "KeyVault name."
                }
              },
              "required": [
                "credentials",
                "directoryId",
                "name"
              ]
            },
            "vaultCaChainSecret": {
              "description": "KeyVault CA chain secret details.",
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "KeyVault secret name."
                },
                "version": {
                  "type": "string",
                  "description": "KeyVault secret version."
                }
              },
              "required": [
                "name"
              ]
            },
            "vaultCert": {
              "description": "KeyVault Cert secret details.",
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "KeyVault secret name."
                },
                "version": {
                  "type": "string",
                  "description": "KeyVault secret version."
                }
              },
              "required": [
                "name"
              ]
            }
          },
          "required": [
            "vault",
            "vaultCert"
          ]
        },
        "secretName": {
          "type": "string",
          "description": "Secret where cert details are stored."
        }
      }
    },
    "KafkaX509AuthenticationUpdate": {
      "type": "object",
      "description": "Kafka RemoteBrokerConnection X509 Authentication properties.",
      "properties": {
        "keyVault": {
          "description": "Keyvault X509 secret properties.",
          "type": "object",
          "properties": {
            "vault": {
              "description": "KeyVault properties.",
              "type": "object",
              "properties": {
                "credentials": {
                  "description": "KeyVault credentials.",
                  "type": "object",
                  "properties": {
                    "servicePrincipalLocalSecretName": {
                      "type": "string",
                      "description": "KeyVault service principal local secret name."
                    }
                  }
                },
                "directoryId": {
                  "type": "string",
                  "description": "KeyVault directoryId."
                },
                "name": {
                  "type": "string",
                  "description": "KeyVault name."
                }
              }
            },
            "vaultCaChainSecret": {
              "description": "KeyVault CA chain secret details.",
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "KeyVault secret name."
                },
                "version": {
                  "type": "string",
                  "description": "KeyVault secret version."
                }
              }
            },
            "vaultCert": {
              "description": "KeyVault Cert secret details.",
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "KeyVault secret name."
                },
                "version": {
                  "type": "string",
                  "description": "KeyVault secret version."
                }
              }
            }
          }
        },
        "secretName": {
          "type": "string",
          "description": "Secret where cert details are stored."
        }
      }
    },
    "KeyVaultCertificateProperties": {
      "type": "object",
      "description": "KeyVault certificate properties",
      "properties": {
        "vault": {
          "description": "KeyVault properties.",
          "type": "object",
          "properties": {
            "credentials": {
              "description": "KeyVault credentials.",
              "type": "object",
              "properties": {
                "servicePrincipalLocalSecretName": {
                  "type": "string",
                  "description": "KeyVault service principal local secret name."
                }
              },
              "required": [
                "servicePrincipalLocalSecretName"
              ]
            },
            "directoryId": {
              "type": "string",
              "description": "KeyVault directoryId."
            },
            "name": {
              "type": "string",
              "description": "KeyVault name."
            }
          },
          "required": [
            "credentials",
            "directoryId",
            "name"
          ]
        },
        "vaultCaChainSecret": {
          "description": "KeyVault CA chain secret details.",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "KeyVault secret name."
            },
            "version": {
              "type": "string",
              "description": "KeyVault secret version."
            }
          },
          "required": [
            "name"
          ]
        },
        "vaultCert": {
          "description": "KeyVault Cert secret details.",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "KeyVault secret name."
            },
            "version": {
              "type": "string",
              "description": "KeyVault secret version."
            }
          },
          "required": [
            "name"
          ]
        }
      },
      "required": [
        "vault",
        "vaultCert"
      ]
    },
    "KeyVaultCertificatePropertiesUpdate": {
      "type": "object",
      "description": "KeyVault certificate properties",
      "properties": {
        "vault": {
          "description": "KeyVault properties.",
          "type": "object",
          "properties": {
            "credentials": {
              "description": "KeyVault credentials.",
              "type": "object",
              "properties": {
                "servicePrincipalLocalSecretName": {
                  "type": "string",
                  "description": "KeyVault service principal local secret name."
                }
              }
            },
            "directoryId": {
              "type": "string",
              "description": "KeyVault directoryId."
            },
            "name": {
              "type": "string",
              "description": "KeyVault name."
            }
          }
        },
        "vaultCaChainSecret": {
          "description": "KeyVault CA chain secret details.",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "KeyVault secret name."
            },
            "version": {
              "type": "string",
              "description": "KeyVault secret version."
            }
          }
        },
        "vaultCert": {
          "description": "KeyVault Cert secret details.",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "KeyVault secret name."
            },
            "version": {
              "type": "string",
              "description": "KeyVault secret version."
            }
          }
        }
      }
    },
    "KeyVaultConnectionProperties": {
      "type": "object",
      "description": "KeyVault properties",
      "properties": {
        "credentials": {
          "description": "KeyVault credentials.",
          "type": "object",
          "properties": {
            "servicePrincipalLocalSecretName": {
              "type": "string",
              "description": "KeyVault service principal local secret name."
            }
          },
          "required": [
            "servicePrincipalLocalSecretName"
          ]
        },
        "directoryId": {
          "type": "string",
          "description": "KeyVault directoryId."
        },
        "name": {
          "type": "string",
          "description": "KeyVault name."
        }
      },
      "required": [
        "credentials",
        "directoryId",
        "name"
      ]
    },
    "KeyVaultConnectionPropertiesUpdate": {
      "type": "object",
      "description": "KeyVault properties",
      "properties": {
        "credentials": {
          "description": "KeyVault credentials.",
          "type": "object",
          "properties": {
            "servicePrincipalLocalSecretName": {
              "type": "string",
              "description": "KeyVault service principal local secret name."
            }
          }
        },
        "directoryId": {
          "type": "string",
          "description": "KeyVault directoryId."
        },
        "name": {
          "type": "string",
          "description": "KeyVault name."
        }
      }
    },
    "KeyVaultCredentialsProperties": {
      "type": "object",
      "description": "KeyVault credentials properties. NOTE - Future this will be ENUM.",
      "properties": {
        "servicePrincipalLocalSecretName": {
          "type": "string",
          "description": "KeyVault service principal local secret name."
        }
      },
      "required": [
        "servicePrincipalLocalSecretName"
      ]
    },
    "KeyVaultCredentialsPropertiesUpdate": {
      "type": "object",
      "description": "KeyVault credentials properties. NOTE - Future this will be ENUM.",
      "properties": {
        "servicePrincipalLocalSecretName": {
          "type": "string",
          "description": "KeyVault service principal local secret name."
        }
      }
    },
    "KeyVaultSecretObject": {
      "type": "object",
      "description": "KeyVault secret object properties",
      "properties": {
        "name": {
          "type": "string",
          "description": "KeyVault secret name."
        },
        "version": {
          "type": "string",
          "description": "KeyVault secret version."
        }
      },
      "required": [
        "name"
      ]
    },
    "KeyVaultSecretObjectUpdate": {
      "type": "object",
      "description": "KeyVault secret object properties",
      "properties": {
        "name": {
          "type": "string",
          "description": "KeyVault secret name."
        },
        "version": {
          "type": "string",
          "description": "KeyVault secret version."
        }
      }
    },
    "KeyVaultSecretProperties": {
      "type": "object",
      "description": "KeyVault secret properties",
      "properties": {
        "vault": {
          "description": "KeyVault properties.",
          "type": "object",
          "properties": {
            "credentials": {
              "description": "KeyVault credentials.",
              "type": "object",
              "properties": {
                "servicePrincipalLocalSecretName": {
                  "type": "string",
                  "description": "KeyVault service principal local secret name."
                }
              },
              "required": [
                "servicePrincipalLocalSecretName"
              ]
            },
            "directoryId": {
              "type": "string",
              "description": "KeyVault directoryId."
            },
            "name": {
              "type": "string",
              "description": "KeyVault name."
            }
          },
          "required": [
            "credentials",
            "directoryId",
            "name"
          ]
        },
        "vaultSecret": {
          "description": "KeyVault secret details.",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "KeyVault secret name."
            },
            "version": {
              "type": "string",
              "description": "KeyVault secret version."
            }
          },
          "required": [
            "name"
          ]
        }
      },
      "required": [
        "vault",
        "vaultSecret"
      ]
    },
    "LocalBrokerAuthenticationMethods": {
      "type": "object",
      "description": "Mqtt Local Broker Authentication details. Only one method at a time is supported. Default - kubernetes authentication",
      "properties": {
        "kubernetes": {
          "description": "Kubernetes local broker authentication method.",
          "type": "object",
          "properties": {
            "secretPath": {
              "type": "string",
              "description": "Secret Path where SAT is mounted.",
              "default": "/var/run/serviceaccount/localbroker"
            },
            "serviceAccountTokenName": {
              "type": "string",
              "description": "Token name where SAT is mounted on secret path.",
              "default": "sat"
            }
          }
        }
      },
      "required": [
        "kubernetes"
      ]
    },
    "LocalBrokerAuthenticationMethodsUpdate": {
      "type": "object",
      "description": "Mqtt Local Broker Authentication details. Only one method at a time is supported. Default - kubernetes authentication",
      "properties": {
        "kubernetes": {
          "description": "Kubernetes local broker authentication method.",
          "type": "object",
          "properties": {
            "secretPath": {
              "type": "string",
              "description": "Secret Path where SAT is mounted.",
              "default": "/var/run/serviceaccount/localbroker"
            },
            "serviceAccountTokenName": {
              "type": "string",
              "description": "Token name where SAT is mounted on secret path.",
              "default": "sat"
            }
          }
        }
      }
    },
    "LocalBrokerConnectionSpec": {
      "type": "object",
      "description": "Mqtt Local Broker ConnectionSpec details",
      "properties": {
        "authentication": {
          "description": "The authentication methods for LocalBroker connection. NOTE - Enum only one method at a time is supported.",
          "type": "object",
          "properties": {
            "kubernetes": {
              "description": "Kubernetes local broker authentication method.",
              "type": "object",
              "properties": {
                "secretPath": {
                  "type": "string",
                  "description": "Secret Path where SAT is mounted.",
                  "default": "/var/run/serviceaccount/localbroker"
                },
                "serviceAccountTokenName": {
                  "type": "string",
                  "description": "Token name where SAT is mounted on secret path.",
                  "default": "sat"
                }
              }
            }
          },
          "required": [
            "kubernetes"
          ]
        },
        "endpoint": {
          "type": "string",
          "description": "The endpoint of local broker to connect to.",
          "default": "aio-mq-dmqtt-frontend:1883"
        },
        "tls": {
          "description": "TLS details for Local broker Connection.",
          "type": "object",
          "properties": {
            "tlsEnabled": {
              "type": "boolean",
              "description": "Tls Enabled on Local Broker Connection.",
              "default": false
            },
            "trustedCaCertificateConfigMap": {
              "type": "string",
              "description": "Trusted CA certificate config map name for Local Broker."
            }
          }
        }
      }
    },
    "LocalBrokerConnectionSpecUpdate": {
      "type": "object",
      "description": "Mqtt Local Broker ConnectionSpec details",
      "properties": {
        "authentication": {
          "description": "The authentication methods for LocalBroker connection. NOTE - Enum only one method at a time is supported.",
          "type": "object",
          "properties": {
            "kubernetes": {
              "description": "Kubernetes local broker authentication method.",
              "type": "object",
              "properties": {
                "secretPath": {
                  "type": "string",
                  "description": "Secret Path where SAT is mounted.",
                  "default": "/var/run/serviceaccount/localbroker"
                },
                "serviceAccountTokenName": {
                  "type": "string",
                  "description": "Token name where SAT is mounted on secret path.",
                  "default": "sat"
                }
              }
            }
          }
        },
        "endpoint": {
          "type": "string",
          "description": "The endpoint of local broker to connect to.",
          "default": "aio-mq-dmqtt-frontend:1883"
        },
        "tls": {
          "description": "TLS details for Local broker Connection.",
          "type": "object",
          "properties": {
            "tlsEnabled": {
              "type": "boolean",
              "description": "Tls Enabled on Local Broker Connection.",
              "default": false
            },
            "trustedCaCertificateConfigMap": {
              "type": "string",
              "description": "Trusted CA certificate config map name for Local Broker."
            }
          }
        }
      }
    },
    "LocalBrokerConnectionTls": {
      "type": "object",
      "description": "Mqtt Local Broker Connection TLS details",
      "properties": {
        "tlsEnabled": {
          "type": "boolean",
          "description": "Tls Enabled on Local Broker Connection.",
          "default": false
        },
        "trustedCaCertificateConfigMap": {
          "type": "string",
          "description": "Trusted CA certificate config map name for Local Broker."
        }
      }
    },
    "LocalBrokerKubernetesAuthentication": {
      "type": "object",
      "description": "Local Broker Kubernetes Authentication",
      "properties": {
        "secretPath": {
          "type": "string",
          "description": "Secret Path where SAT is mounted.",
          "default": "/var/run/serviceaccount/localbroker"
        },
        "serviceAccountTokenName": {
          "type": "string",
          "description": "Token name where SAT is mounted on secret path.",
          "default": "sat"
        }
      }
    },
    "ManagedIdentityAuthentication": {
      "type": "object",
      "description": "Managed identity authentication details.",
      "properties": {
        "audience": {
          "type": "string",
          "description": "Token audience."
        },
        "extensionName": {
          "type": "string",
          "description": "Arc Extension name."
        }
      },
      "required": [
        "audience"
      ]
    },
    "ManagedIdentityAuthenticationUpdate": {
      "type": "object",
      "description": "Managed identity authentication details.",
      "properties": {
        "audience": {
          "type": "string",
          "description": "Token audience."
        },
        "extensionName": {
          "type": "string",
          "description": "Arc Extension name."
        }
      }
    },
    "ManualCertMethod": {
      "type": "object",
      "description": "Manual TLS server certificate management through a defined secret",
      "properties": {
        "secretName": {
          "type": "string",
          "description": "secret containing TLS cert."
        },
        "secretNamespace": {
          "type": "string",
          "description": "namespace of secret; omit to use default namespace."
        }
      },
      "required": [
        "secretName"
      ]
    },
    "ManualCertMethodUpdate": {
      "type": "object",
      "description": "Manual TLS server certificate management through a defined secret",
      "properties": {
        "secretName": {
          "type": "string",
          "description": "secret containing TLS cert."
        },
        "secretNamespace": {
          "type": "string",
          "description": "namespace of secret; omit to use default namespace."
        }
      }
    },
    "MqProperties": {
      "type": "object",
      "description": "MQ Resource properties",
      "properties": {
        "provisioningState": {
          "description": "The status of the last operation.",
          "readOnly": true,
          "type": "string",
          "enum": [
            "Succeeded",
            "Failed",
            "Canceled",
            "Provisioning",
            "Updating",
            "Deleting",
            "Accepted"
          ],
          "x-ms-enum": {
            "name": "ProvisioningState",
            "modelAsString": true,
            "values": [
              {
                "name": "Succeeded",
                "value": "Succeeded",
                "description": "Resource has been created."
              },
              {
                "name": "Failed",
                "value": "Failed",
                "description": "Resource creation failed."
              },
              {
                "name": "Canceled",
                "value": "Canceled",
                "description": "Resource creation was canceled."
              },
              {
                "name": "Provisioning",
                "value": "Provisioning",
                "description": "Resource is getting provisioned."
              },
              {
                "name": "Updating",
                "value": "Updating",
                "description": "Resource is Updating."
              },
              {
                "name": "Deleting",
                "value": "Deleting",
                "description": "Resource is Deleting."
              },
              {
                "name": "Accepted",
                "value": "Accepted",
                "description": "Resource has been Accepted."
              }
            ]
          }
        }
      }
    },
    "MqResource": {
      "type": "object",
      "description": "MQ resource",
      "properties": {
        "id": {
          "type": "string",
          "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "The name of the resource",
          "readOnly": true
        },
        "type": {
          "type": "string",
          "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
          "readOnly": true
        },
        "systemData": {
          "type": "object",
          "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
          "readOnly": true,
          "properties": {
            "createdBy": {
              "type": "string",
              "description": "The identity that created the resource."
            },
            "createdByType": {
              "type": "string",
              "description": "The type of identity that created the resource.",
              "enum": [
                "User",
                "Application",
                "ManagedIdentity",
                "Key"
              ],
              "x-ms-enum": {
                "name": "createdByType",
                "modelAsString": true
              }
            },
            "createdAt": {
              "type": "string",
              "format": "date-time",
              "description": "The timestamp of resource creation (UTC)."
            },
            "lastModifiedBy": {
              "type": "string",
              "description": "The identity that last modified the resource."
            },
            "lastModifiedByType": {
              "type": "string",
              "description": "The type of identity that last modified the resource.",
              "enum": [
                "User",
                "Application",
                "ManagedIdentity",
                "Key"
              ],
              "x-ms-enum": {
                "name": "createdByType",
                "modelAsString": true
              }
            },
            "lastModifiedAt": {
              "type": "string",
              "format": "date-time",
              "description": "The timestamp of resource last modification (UTC)"
            }
          }
        },
        "tags": {
          "type": "object",
          "description": "Resource tags.",
          "additionalProperties": {
            "type": "string"
          },
          "x-ms-mutability": [
            "read",
            "create",
            "update"
          ]
        },
        "location": {
          "type": "string",
          "description": "The geo-location where the resource lives",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "properties": {
          "description": "The resource-specific properties for this resource.",
          "x-ms-client-flatten": true,
          "type": "object",
          "properties": {
            "provisioningState": {
              "description": "The status of the last operation.",
              "readOnly": true,
              "type": "string",
              "enum": [
                "Succeeded",
                "Failed",
                "Canceled",
                "Provisioning",
                "Updating",
                "Deleting",
                "Accepted"
              ],
              "x-ms-enum": {
                "name": "ProvisioningState",
                "modelAsString": true,
                "values": [
                  {
                    "name": "Succeeded",
                    "value": "Succeeded",
                    "description": "Resource has been created."
                  },
                  {
                    "name": "Failed",
                    "value": "Failed",
                    "description": "Resource creation failed."
                  },
                  {
                    "name": "Canceled",
                    "value": "Canceled",
                    "description": "Resource creation was canceled."
                  },
                  {
                    "name": "Provisioning",
                    "value": "Provisioning",
                    "description": "Resource is getting provisioned."
                  },
                  {
                    "name": "Updating",
                    "value": "Updating",
                    "description": "Resource is Updating."
                  },
                  {
                    "name": "Deleting",
                    "value": "Deleting",
                    "description": "Resource is Deleting."
                  },
                  {
                    "name": "Accepted",
                    "value": "Accepted",
                    "description": "Resource has been Accepted."
                  }
                ]
              }
            }
          }
        },
        "extendedLocation": {
          "description": "Extended Location",
          "x-ms-mutability": [
            "read",
            "create"
          ],
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name of the extended location."
            },
            "type": {
              "description": "Type of ExtendedLocation.",
              "type": "string",
              "enum": [
                "CustomLocation"
              ],
              "x-ms-enum": {
                "name": "ExtendedLocationType",
                "modelAsString": true,
                "values": [
                  {
                    "name": "CustomLocation",
                    "value": "CustomLocation",
                    "description": "CustomLocation type"
                  }
                ]
              }
            }
          },
          "required": [
            "name",
            "type"
          ]
        }
      },
      "required": [
        "extendedLocation"
      ]
    },
    "MqResourceListResult": {
      "type": "object",
      "description": "The response of a MqResource list operation.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The MqResource items on this page",
          "items": {
            "type": "object",
            "description": "MQ resource",
            "properties": {
              "id": {
                "type": "string",
                "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                "readOnly": true
              },
              "name": {
                "type": "string",
                "description": "The name of the resource",
                "readOnly": true
              },
              "type": {
                "type": "string",
                "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                "readOnly": true
              },
              "systemData": {
                "type": "object",
                "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                "readOnly": true,
                "properties": {
                  "createdBy": {
                    "type": "string",
                    "description": "The identity that created the resource."
                  },
                  "createdByType": {
                    "type": "string",
                    "description": "The type of identity that created the resource.",
                    "enum": [
                      "User",
                      "Application",
                      "ManagedIdentity",
                      "Key"
                    ],
                    "x-ms-enum": {
                      "name": "createdByType",
                      "modelAsString": true
                    }
                  },
                  "createdAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp of resource creation (UTC)."
                  },
                  "lastModifiedBy": {
                    "type": "string",
                    "description": "The identity that last modified the resource."
                  },
                  "lastModifiedByType": {
                    "type": "string",
                    "description": "The type of identity that last modified the resource.",
                    "enum": [
                      "User",
                      "Application",
                      "ManagedIdentity",
                      "Key"
                    ],
                    "x-ms-enum": {
                      "name": "createdByType",
                      "modelAsString": true
                    }
                  },
                  "lastModifiedAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp of resource last modification (UTC)"
                  }
                }
              },
              "tags": {
                "type": "object",
                "description": "Resource tags.",
                "additionalProperties": {
                  "type": "string"
                },
                "x-ms-mutability": [
                  "read",
                  "create",
                  "update"
                ]
              },
              "location": {
                "type": "string",
                "description": "The geo-location where the resource lives",
                "x-ms-mutability": [
                  "read",
                  "create"
                ]
              },
              "properties": {
                "description": "The resource-specific properties for this resource.",
                "x-ms-client-flatten": true,
                "type": "object",
                "properties": {
                  "provisioningState": {
                    "description": "The status of the last operation.",
                    "readOnly": true,
                    "type": "string",
                    "enum": [
                      "Succeeded",
                      "Failed",
                      "Canceled",
                      "Provisioning",
                      "Updating",
                      "Deleting",
                      "Accepted"
                    ],
                    "x-ms-enum": {
                      "name": "ProvisioningState",
                      "modelAsString": true,
                      "values": [
                        {
                          "name": "Succeeded",
                          "value": "Succeeded",
                          "description": "Resource has been created."
                        },
                        {
                          "name": "Failed",
                          "value": "Failed",
                          "description": "Resource creation failed."
                        },
                        {
                          "name": "Canceled",
                          "value": "Canceled",
                          "description": "Resource creation was canceled."
                        },
                        {
                          "name": "Provisioning",
                          "value": "Provisioning",
                          "description": "Resource is getting provisioned."
                        },
                        {
                          "name": "Updating",
                          "value": "Updating",
                          "description": "Resource is Updating."
                        },
                        {
                          "name": "Deleting",
                          "value": "Deleting",
                          "description": "Resource is Deleting."
                        },
                        {
                          "name": "Accepted",
                          "value": "Accepted",
                          "description": "Resource has been Accepted."
                        }
                      ]
                    }
                  }
                }
              },
              "extendedLocation": {
                "description": "Extended Location",
                "x-ms-mutability": [
                  "read",
                  "create"
                ],
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the extended location."
                  },
                  "type": {
                    "description": "Type of ExtendedLocation.",
                    "type": "string",
                    "enum": [
                      "CustomLocation"
                    ],
                    "x-ms-enum": {
                      "name": "ExtendedLocationType",
                      "modelAsString": true,
                      "values": [
                        {
                          "name": "CustomLocation",
                          "value": "CustomLocation",
                          "description": "CustomLocation type"
                        }
                      ]
                    }
                  }
                },
                "required": [
                  "name",
                  "type"
                ]
              }
            },
            "required": [
              "extendedLocation"
            ]
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "MqResourceUpdate": {
      "type": "object",
      "description": "The type used for update operations of the MqResource.",
      "properties": {
        "tags": {
          "type": "object",
          "description": "Resource tags.",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "MqttBridgeConnectorProperties": {
      "type": "object",
      "description": "MqttBridgeConnector Properties",
      "properties": {
        "bridgeInstances": {
          "type": "integer",
          "format": "int32",
          "description": "The number of instances to deploy for a bridge rollout.",
          "minimum": 0,
          "maximum": 65535
        },
        "clientIdPrefix": {
          "type": "string",
          "description": "The client id prefix of the dynamically generated client ids."
        },
        "image": {
          "description": "The details of MqttBridge Docker Image.",
          "type": "object",
          "properties": {
            "pullPolicy": {
              "type": "string",
              "description": "Image pull policy."
            },
            "pullSecrets": {
              "type": "string",
              "description": "Image pull secrets."
            },
            "repository": {
              "type": "string",
              "description": "The Docker image name."
            },
            "tag": {
              "type": "string",
              "description": "The Docker  image tag."
            }
          },
          "required": [
            "repository",
            "tag"
          ]
        },
        "localBrokerConnection": {
          "description": "The details for connecting with Local Broker.",
          "type": "object",
          "properties": {
            "authentication": {
              "description": "The authentication methods for LocalBroker connection. NOTE - Enum only one method at a time is supported.",
              "type": "object",
              "properties": {
                "kubernetes": {
                  "description": "Kubernetes local broker authentication method.",
                  "type": "object",
                  "properties": {
                    "secretPath": {
                      "type": "string",
                      "description": "Secret Path where SAT is mounted.",
                      "default": "/var/run/serviceaccount/localbroker"
                    },
                    "serviceAccountTokenName": {
                      "type": "string",
                      "description": "Token name where SAT is mounted on secret path.",
                      "default": "sat"
                    }
                  }
                }
              },
              "required": [
                "kubernetes"
              ]
            },
            "endpoint": {
              "type": "string",
              "description": "The endpoint of local broker to connect to.",
              "default": "aio-mq-dmqtt-frontend:1883"
            },
            "tls": {
              "description": "TLS details for Local broker Connection.",
              "type": "object",
              "properties": {
                "tlsEnabled": {
                  "type": "boolean",
                  "description": "Tls Enabled on Local Broker Connection.",
                  "default": false
                },
                "trustedCaCertificateConfigMap": {
                  "type": "string",
                  "description": "Trusted CA certificate config map name for Local Broker."
                }
              }
            }
          }
        },
        "logLevel": {
          "type": "string",
          "description": "The log level of the Bridge Connector instances."
        },
        "nodeTolerations": {
          "description": "The Node Tolerations for the Bridge Connector pods.",
          "type": "object",
          "properties": {
            "effect": {
              "type": "string",
              "description": "Toleration effect."
            },
            "key": {
              "type": "string",
              "description": "Toleration key."
            },
            "operator": {
              "type": "string",
              "description": "Toleration operator like 'Exists', 'Equal' etc."
            },
            "value": {
              "type": "string",
              "description": "Toleration Value."
            }
          },
          "required": [
            "effect",
            "key",
            "operator",
            "value"
          ]
        },
        "protocol": {
          "description": "The protocol to use for connecting with Brokers.",
          "type": "string",
          "enum": [
            "v3",
            "v5"
          ],
          "x-ms-enum": {
            "name": "MqttProtocol",
            "modelAsString": true,
            "values": [
              {
                "name": "v3",
                "value": "v3",
                "description": "Mqttv3"
              },
              {
                "name": "v5",
                "value": "v5",
                "description": "Mqttv5"
              }
            ]
          }
        },
        "provisioningState": {
          "description": "The status of the last operation.",
          "readOnly": true,
          "type": "string",
          "enum": [
            "Succeeded",
            "Failed",
            "Canceled",
            "Provisioning",
            "Updating",
            "Deleting",
            "Accepted"
          ],
          "x-ms-enum": {
            "name": "ProvisioningState",
            "modelAsString": true,
            "values": [
              {
                "name": "Succeeded",
                "value": "Succeeded",
                "description": "Resource has been created."
              },
              {
                "name": "Failed",
                "value": "Failed",
                "description": "Resource creation failed."
              },
              {
                "name": "Canceled",
                "value": "Canceled",
                "description": "Resource creation was canceled."
              },
              {
                "name": "Provisioning",
                "value": "Provisioning",
                "description": "Resource is getting provisioned."
              },
              {
                "name": "Updating",
                "value": "Updating",
                "description": "Resource is Updating."
              },
              {
                "name": "Deleting",
                "value": "Deleting",
                "description": "Resource is Deleting."
              },
              {
                "name": "Accepted",
                "value": "Accepted",
                "description": "Resource has been Accepted."
              }
            ]
          }
        },
        "remoteBrokerConnection": {
          "description": "The details for connecting with Remote Broker.",
          "type": "object",
          "properties": {
            "authentication": {
              "description": "The remote broker authentication methods. NOTE - Enum only one method is allowed to be passed.",
              "type": "object",
              "properties": {
                "x509": {
                  "description": "X509 remote broker authentication method.",
                  "type": "object",
                  "properties": {
                    "keyVault": {
                      "description": "Keyvault X509 secret properties.",
                      "type": "object",
                      "properties": {
                        "vault": {
                          "description": "KeyVault properties.",
                          "type": "object",
                          "properties": {
                            "credentials": {
                              "description": "KeyVault credentials.",
                              "type": "object",
                              "properties": {
                                "servicePrincipalLocalSecretName": {
                                  "type": "string",
                                  "description": "KeyVault service principal local secret name."
                                }
                              },
                              "required": [
                                "servicePrincipalLocalSecretName"
                              ]
                            },
                            "directoryId": {
                              "type": "string",
                              "description": "KeyVault directoryId."
                            },
                            "name": {
                              "type": "string",
                              "description": "KeyVault name."
                            }
                          },
                          "required": [
                            "credentials",
                            "directoryId",
                            "name"
                          ]
                        },
                        "vaultCaChainSecret": {
                          "description": "KeyVault CA chain secret details.",
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "KeyVault secret name."
                            },
                            "version": {
                              "type": "string",
                              "description": "KeyVault secret version."
                            }
                          },
                          "required": [
                            "name"
                          ]
                        },
                        "vaultCert": {
                          "description": "KeyVault Cert secret details.",
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "KeyVault secret name."
                            },
                            "version": {
                              "type": "string",
                              "description": "KeyVault secret version."
                            }
                          },
                          "required": [
                            "name"
                          ]
                        }
                      },
                      "required": [
                        "vault",
                        "vaultCert"
                      ]
                    },
                    "secretName": {
                      "type": "string",
                      "description": "Secret where cert details are stored."
                    }
                  }
                },
                "systemAssignedManagedIdentity": {
                  "description": "Managed identity remote broker authentication method.",
                  "type": "object",
                  "properties": {
                    "audience": {
                      "type": "string",
                      "description": "Token audience."
                    },
                    "extensionName": {
                      "type": "string",
                      "description": "Arc Extension name."
                    }
                  },
                  "required": [
                    "audience"
                  ]
                }
              }
            },
            "endpoint": {
              "type": "string",
              "description": "The endpoint of remote broker to connect to."
            },
            "protocol": {
              "type": "string",
              "description": "Protocol for remote connection.",
              "default": "mqtt",
              "enum": [
                "mqtt",
                "webSocket"
              ],
              "x-ms-enum": {
                "name": "MqttBridgeRemoteBrokerProtocol",
                "modelAsString": true,
                "values": [
                  {
                    "name": "mqtt",
                    "value": "mqtt",
                    "description": "MQTT protocol."
                  },
                  {
                    "name": "webSocket",
                    "value": "webSocket",
                    "description": "MQTT over WebSocket protocol."
                  }
                ]
              }
            },
            "tls": {
              "description": "TLS details for Remote broker Connection.",
              "type": "object",
              "properties": {
                "tlsEnabled": {
                  "type": "boolean",
                  "description": "Tls Enabled on Remote Broker Connection."
                },
                "trustedCaCertificateConfigMap": {
                  "type": "string",
                  "description": "Trusted CA certificate name for Remote Broker."
                }
              },
              "required": [
                "tlsEnabled"
              ]
            }
          },
          "required": [
            "authentication",
            "endpoint",
            "tls"
          ]
        }
      },
      "required": [
        "image",
        "protocol",
        "remoteBrokerConnection"
      ]
    },
    "MqttBridgeConnectorResource": {
      "type": "object",
      "description": "MQ mqttBridgeConnector resource",
      "properties": {
        "id": {
          "type": "string",
          "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "The name of the resource",
          "readOnly": true
        },
        "type": {
          "type": "string",
          "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
          "readOnly": true
        },
        "systemData": {
          "type": "object",
          "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
          "readOnly": true,
          "properties": {
            "createdBy": {
              "type": "string",
              "description": "The identity that created the resource."
            },
            "createdByType": {
              "type": "string",
              "description": "The type of identity that created the resource.",
              "enum": [
                "User",
                "Application",
                "ManagedIdentity",
                "Key"
              ],
              "x-ms-enum": {
                "name": "createdByType",
                "modelAsString": true
              }
            },
            "createdAt": {
              "type": "string",
              "format": "date-time",
              "description": "The timestamp of resource creation (UTC)."
            },
            "lastModifiedBy": {
              "type": "string",
              "description": "The identity that last modified the resource."
            },
            "lastModifiedByType": {
              "type": "string",
              "description": "The type of identity that last modified the resource.",
              "enum": [
                "User",
                "Application",
                "ManagedIdentity",
                "Key"
              ],
              "x-ms-enum": {
                "name": "createdByType",
                "modelAsString": true
              }
            },
            "lastModifiedAt": {
              "type": "string",
              "format": "date-time",
              "description": "The timestamp of resource last modification (UTC)"
            }
          }
        },
        "tags": {
          "type": "object",
          "description": "Resource tags.",
          "additionalProperties": {
            "type": "string"
          },
          "x-ms-mutability": [
            "read",
            "create",
            "update"
          ]
        },
        "location": {
          "type": "string",
          "description": "The geo-location where the resource lives",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "properties": {
          "description": "The resource-specific properties for this resource.",
          "x-ms-client-flatten": true,
          "type": "object",
          "properties": {
            "bridgeInstances": {
              "type": "integer",
              "format": "int32",
              "description": "The number of instances to deploy for a bridge rollout.",
              "minimum": 0,
              "maximum": 65535
            },
            "clientIdPrefix": {
              "type": "string",
              "description": "The client id prefix of the dynamically generated client ids."
            },
            "image": {
              "description": "The details of MqttBridge Docker Image.",
              "type": "object",
              "properties": {
                "pullPolicy": {
                  "type": "string",
                  "description": "Image pull policy."
                },
                "pullSecrets": {
                  "type": "string",
                  "description": "Image pull secrets."
                },
                "repository": {
                  "type": "string",
                  "description": "The Docker image name."
                },
                "tag": {
                  "type": "string",
                  "description": "The Docker  image tag."
                }
              },
              "required": [
                "repository",
                "tag"
              ]
            },
            "localBrokerConnection": {
              "description": "The details for connecting with Local Broker.",
              "type": "object",
              "properties": {
                "authentication": {
                  "description": "The authentication methods for LocalBroker connection. NOTE - Enum only one method at a time is supported.",
                  "type": "object",
                  "properties": {
                    "kubernetes": {
                      "description": "Kubernetes local broker authentication method.",
                      "type": "object",
                      "properties": {
                        "secretPath": {
                          "type": "string",
                          "description": "Secret Path where SAT is mounted.",
                          "default": "/var/run/serviceaccount/localbroker"
                        },
                        "serviceAccountTokenName": {
                          "type": "string",
                          "description": "Token name where SAT is mounted on secret path.",
                          "default": "sat"
                        }
                      }
                    }
                  },
                  "required": [
                    "kubernetes"
                  ]
                },
                "endpoint": {
                  "type": "string",
                  "description": "The endpoint of local broker to connect to.",
                  "default": "aio-mq-dmqtt-frontend:1883"
                },
                "tls": {
                  "description": "TLS details for Local broker Connection.",
                  "type": "object",
                  "properties": {
                    "tlsEnabled": {
                      "type": "boolean",
                      "description": "Tls Enabled on Local Broker Connection.",
                      "default": false
                    },
                    "trustedCaCertificateConfigMap": {
                      "type": "string",
                      "description": "Trusted CA certificate config map name for Local Broker."
                    }
                  }
                }
              }
            },
            "logLevel": {
              "type": "string",
              "description": "The log level of the Bridge Connector instances."
            },
            "nodeTolerations": {
              "description": "The Node Tolerations for the Bridge Connector pods.",
              "type": "object",
              "properties": {
                "effect": {
                  "type": "string",
                  "description": "Toleration effect."
                },
                "key": {
                  "type": "string",
                  "description": "Toleration key."
                },
                "operator": {
                  "type": "string",
                  "description": "Toleration operator like 'Exists', 'Equal' etc."
                },
                "value": {
                  "type": "string",
                  "description": "Toleration Value."
                }
              },
              "required": [
                "effect",
                "key",
                "operator",
                "value"
              ]
            },
            "protocol": {
              "description": "The protocol to use for connecting with Brokers.",
              "type": "string",
              "enum": [
                "v3",
                "v5"
              ],
              "x-ms-enum": {
                "name": "MqttProtocol",
                "modelAsString": true,
                "values": [
                  {
                    "name": "v3",
                    "value": "v3",
                    "description": "Mqttv3"
                  },
                  {
                    "name": "v5",
                    "value": "v5",
                    "description": "Mqttv5"
                  }
                ]
              }
            },
            "provisioningState": {
              "description": "The status of the last operation.",
              "readOnly": true,
              "type": "string",
              "enum": [
                "Succeeded",
                "Failed",
                "Canceled",
                "Provisioning",
                "Updating",
                "Deleting",
                "Accepted"
              ],
              "x-ms-enum": {
                "name": "ProvisioningState",
                "modelAsString": true,
                "values": [
                  {
                    "name": "Succeeded",
                    "value": "Succeeded",
                    "description": "Resource has been created."
                  },
                  {
                    "name": "Failed",
                    "value": "Failed",
                    "description": "Resource creation failed."
                  },
                  {
                    "name": "Canceled",
                    "value": "Canceled",
                    "description": "Resource creation was canceled."
                  },
                  {
                    "name": "Provisioning",
                    "value": "Provisioning",
                    "description": "Resource is getting provisioned."
                  },
                  {
                    "name": "Updating",
                    "value": "Updating",
                    "description": "Resource is Updating."
                  },
                  {
                    "name": "Deleting",
                    "value": "Deleting",
                    "description": "Resource is Deleting."
                  },
                  {
                    "name": "Accepted",
                    "value": "Accepted",
                    "description": "Resource has been Accepted."
                  }
                ]
              }
            },
            "remoteBrokerConnection": {
              "description": "The details for connecting with Remote Broker.",
              "type": "object",
              "properties": {
                "authentication": {
                  "description": "The remote broker authentication methods. NOTE - Enum only one method is allowed to be passed.",
                  "type": "object",
                  "properties": {
                    "x509": {
                      "description": "X509 remote broker authentication method.",
                      "type": "object",
                      "properties": {
                        "keyVault": {
                          "description": "Keyvault X509 secret properties.",
                          "type": "object",
                          "properties": {
                            "vault": {
                              "description": "KeyVault properties.",
                              "type": "object",
                              "properties": {
                                "credentials": {
                                  "description": "KeyVault credentials.",
                                  "type": "object",
                                  "properties": {
                                    "servicePrincipalLocalSecretName": {
                                      "type": "string",
                                      "description": "KeyVault service principal local secret name."
                                    }
                                  },
                                  "required": [
                                    "servicePrincipalLocalSecretName"
                                  ]
                                },
                                "directoryId": {
                                  "type": "string",
                                  "description": "KeyVault directoryId."
                                },
                                "name": {
                                  "type": "string",
                                  "description": "KeyVault name."
                                }
                              },
                              "required": [
                                "credentials",
                                "directoryId",
                                "name"
                              ]
                            },
                            "vaultCaChainSecret": {
                              "description": "KeyVault CA chain secret details.",
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "KeyVault secret name."
                                },
                                "version": {
                                  "type": "string",
                                  "description": "KeyVault secret version."
                                }
                              },
                              "required": [
                                "name"
                              ]
                            },
                            "vaultCert": {
                              "description": "KeyVault Cert secret details.",
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "KeyVault secret name."
                                },
                                "version": {
                                  "type": "string",
                                  "description": "KeyVault secret version."
                                }
                              },
                              "required": [
                                "name"
                              ]
                            }
                          },
                          "required": [
                            "vault",
                            "vaultCert"
                          ]
                        },
                        "secretName": {
                          "type": "string",
                          "description": "Secret where cert details are stored."
                        }
                      }
                    },
                    "systemAssignedManagedIdentity": {
                      "description": "Managed identity remote broker authentication method.",
                      "type": "object",
                      "properties": {
                        "audience": {
                          "type": "string",
                          "description": "Token audience."
                        },
                        "extensionName": {
                          "type": "string",
                          "description": "Arc Extension name."
                        }
                      },
                      "required": [
                        "audience"
                      ]
                    }
                  }
                },
                "endpoint": {
                  "type": "string",
                  "description": "The endpoint of remote broker to connect to."
                },
                "protocol": {
                  "type": "string",
                  "description": "Protocol for remote connection.",
                  "default": "mqtt",
                  "enum": [
                    "mqtt",
                    "webSocket"
                  ],
                  "x-ms-enum": {
                    "name": "MqttBridgeRemoteBrokerProtocol",
                    "modelAsString": true,
                    "values": [
                      {
                        "name": "mqtt",
                        "value": "mqtt",
                        "description": "MQTT protocol."
                      },
                      {
                        "name": "webSocket",
                        "value": "webSocket",
                        "description": "MQTT over WebSocket protocol."
                      }
                    ]
                  }
                },
                "tls": {
                  "description": "TLS details for Remote broker Connection.",
                  "type": "object",
                  "properties": {
                    "tlsEnabled": {
                      "type": "boolean",
                      "description": "Tls Enabled on Remote Broker Connection."
                    },
                    "trustedCaCertificateConfigMap": {
                      "type": "string",
                      "description": "Trusted CA certificate name for Remote Broker."
                    }
                  },
                  "required": [
                    "tlsEnabled"
                  ]
                }
              },
              "required": [
                "authentication",
                "endpoint",
                "tls"
              ]
            }
          },
          "required": [
            "image",
            "protocol",
            "remoteBrokerConnection"
          ]
        },
        "extendedLocation": {
          "description": "Extended Location",
          "x-ms-mutability": [
            "read",
            "create"
          ],
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name of the extended location."
            },
            "type": {
              "description": "Type of ExtendedLocation.",
              "type": "string",
              "enum": [
                "CustomLocation"
              ],
              "x-ms-enum": {
                "name": "ExtendedLocationType",
                "modelAsString": true,
                "values": [
                  {
                    "name": "CustomLocation",
                    "value": "CustomLocation",
                    "description": "CustomLocation type"
                  }
                ]
              }
            }
          },
          "required": [
            "name",
            "type"
          ]
        }
      },
      "required": [
        "extendedLocation"
      ]
    },
    "MqttBridgeConnectorResourceListResult": {
      "type": "object",
      "description": "The response of a MqttBridgeConnectorResource list operation.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The MqttBridgeConnectorResource items on this page",
          "items": {
            "type": "object",
            "description": "MQ mqttBridgeConnector resource",
            "properties": {
              "id": {
                "type": "string",
                "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                "readOnly": true
              },
              "name": {
                "type": "string",
                "description": "The name of the resource",
                "readOnly": true
              },
              "type": {
                "type": "string",
                "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                "readOnly": true
              },
              "systemData": {
                "type": "object",
                "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                "readOnly": true,
                "properties": {
                  "createdBy": {
                    "type": "string",
                    "description": "The identity that created the resource."
                  },
                  "createdByType": {
                    "type": "string",
                    "description": "The type of identity that created the resource.",
                    "enum": [
                      "User",
                      "Application",
                      "ManagedIdentity",
                      "Key"
                    ],
                    "x-ms-enum": {
                      "name": "createdByType",
                      "modelAsString": true
                    }
                  },
                  "createdAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp of resource creation (UTC)."
                  },
                  "lastModifiedBy": {
                    "type": "string",
                    "description": "The identity that last modified the resource."
                  },
                  "lastModifiedByType": {
                    "type": "string",
                    "description": "The type of identity that last modified the resource.",
                    "enum": [
                      "User",
                      "Application",
                      "ManagedIdentity",
                      "Key"
                    ],
                    "x-ms-enum": {
                      "name": "createdByType",
                      "modelAsString": true
                    }
                  },
                  "lastModifiedAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp of resource last modification (UTC)"
                  }
                }
              },
              "tags": {
                "type": "object",
                "description": "Resource tags.",
                "additionalProperties": {
                  "type": "string"
                },
                "x-ms-mutability": [
                  "read",
                  "create",
                  "update"
                ]
              },
              "location": {
                "type": "string",
                "description": "The geo-location where the resource lives",
                "x-ms-mutability": [
                  "read",
                  "create"
                ]
              },
              "properties": {
                "description": "The resource-specific properties for this resource.",
                "x-ms-client-flatten": true,
                "type": "object",
                "properties": {
                  "bridgeInstances": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The number of instances to deploy for a bridge rollout.",
                    "minimum": 0,
                    "maximum": 65535
                  },
                  "clientIdPrefix": {
                    "type": "string",
                    "description": "The client id prefix of the dynamically generated client ids."
                  },
                  "image": {
                    "description": "The details of MqttBridge Docker Image.",
                    "type": "object",
                    "properties": {
                      "pullPolicy": {
                        "type": "string",
                        "description": "Image pull policy."
                      },
                      "pullSecrets": {
                        "type": "string",
                        "description": "Image pull secrets."
                      },
                      "repository": {
                        "type": "string",
                        "description": "The Docker image name."
                      },
                      "tag": {
                        "type": "string",
                        "description": "The Docker  image tag."
                      }
                    },
                    "required": [
                      "repository",
                      "tag"
                    ]
                  },
                  "localBrokerConnection": {
                    "description": "The details for connecting with Local Broker.",
                    "type": "object",
                    "properties": {
                      "authentication": {
                        "description": "The authentication methods for LocalBroker connection. NOTE - Enum only one method at a time is supported.",
                        "type": "object",
                        "properties": {
                          "kubernetes": {
                            "description": "Kubernetes local broker authentication method.",
                            "type": "object",
                            "properties": {
                              "secretPath": {
                                "type": "string",
                                "description": "Secret Path where SAT is mounted.",
                                "default": "/var/run/serviceaccount/localbroker"
                              },
                              "serviceAccountTokenName": {
                                "type": "string",
                                "description": "Token name where SAT is mounted on secret path.",
                                "default": "sat"
                              }
                            }
                          }
                        },
                        "required": [
                          "kubernetes"
                        ]
                      },
                      "endpoint": {
                        "type": "string",
                        "description": "The endpoint of local broker to connect to.",
                        "default": "aio-mq-dmqtt-frontend:1883"
                      },
                      "tls": {
                        "description": "TLS details for Local broker Connection.",
                        "type": "object",
                        "properties": {
                          "tlsEnabled": {
                            "type": "boolean",
                            "description": "Tls Enabled on Local Broker Connection.",
                            "default": false
                          },
                          "trustedCaCertificateConfigMap": {
                            "type": "string",
                            "description": "Trusted CA certificate config map name for Local Broker."
                          }
                        }
                      }
                    }
                  },
                  "logLevel": {
                    "type": "string",
                    "description": "The log level of the Bridge Connector instances."
                  },
                  "nodeTolerations": {
                    "description": "The Node Tolerations for the Bridge Connector pods.",
                    "type": "object",
                    "properties": {
                      "effect": {
                        "type": "string",
                        "description": "Toleration effect."
                      },
                      "key": {
                        "type": "string",
                        "description": "Toleration key."
                      },
                      "operator": {
                        "type": "string",
                        "description": "Toleration operator like 'Exists', 'Equal' etc."
                      },
                      "value": {
                        "type": "string",
                        "description": "Toleration Value."
                      }
                    },
                    "required": [
                      "effect",
                      "key",
                      "operator",
                      "value"
                    ]
                  },
                  "protocol": {
                    "description": "The protocol to use for connecting with Brokers.",
                    "type": "string",
                    "enum": [
                      "v3",
                      "v5"
                    ],
                    "x-ms-enum": {
                      "name": "MqttProtocol",
                      "modelAsString": true,
                      "values": [
                        {
                          "name": "v3",
                          "value": "v3",
                          "description": "Mqttv3"
                        },
                        {
                          "name": "v5",
                          "value": "v5",
                          "description": "Mqttv5"
                        }
                      ]
                    }
                  },
                  "provisioningState": {
                    "description": "The status of the last operation.",
                    "readOnly": true,
                    "type": "string",
                    "enum": [
                      "Succeeded",
                      "Failed",
                      "Canceled",
                      "Provisioning",
                      "Updating",
                      "Deleting",
                      "Accepted"
                    ],
                    "x-ms-enum": {
                      "name": "ProvisioningState",
                      "modelAsString": true,
                      "values": [
                        {
                          "name": "Succeeded",
                          "value": "Succeeded",
                          "description": "Resource has been created."
                        },
                        {
                          "name": "Failed",
                          "value": "Failed",
                          "description": "Resource creation failed."
                        },
                        {
                          "name": "Canceled",
                          "value": "Canceled",
                          "description": "Resource creation was canceled."
                        },
                        {
                          "name": "Provisioning",
                          "value": "Provisioning",
                          "description": "Resource is getting provisioned."
                        },
                        {
                          "name": "Updating",
                          "value": "Updating",
                          "description": "Resource is Updating."
                        },
                        {
                          "name": "Deleting",
                          "value": "Deleting",
                          "description": "Resource is Deleting."
                        },
                        {
                          "name": "Accepted",
                          "value": "Accepted",
                          "description": "Resource has been Accepted."
                        }
                      ]
                    }
                  },
                  "remoteBrokerConnection": {
                    "description": "The details for connecting with Remote Broker.",
                    "type": "object",
                    "properties": {
                      "authentication": {
                        "description": "The remote broker authentication methods. NOTE - Enum only one method is allowed to be passed.",
                        "type": "object",
                        "properties": {
                          "x509": {
                            "description": "X509 remote broker authentication method.",
                            "type": "object",
                            "properties": {
                              "keyVault": {
                                "description": "Keyvault X509 secret properties.",
                                "type": "object",
                                "properties": {
                                  "vault": {
                                    "description": "KeyVault properties.",
                                    "type": "object",
                                    "properties": {
                                      "credentials": {
                                        "description": "KeyVault credentials.",
                                        "type": "object",
                                        "properties": {
                                          "servicePrincipalLocalSecretName": {
                                            "type": "string",
                                            "description": "KeyVault service principal local secret name."
                                          }
                                        },
                                        "required": [
                                          "servicePrincipalLocalSecretName"
                                        ]
                                      },
                                      "directoryId": {
                                        "type": "string",
                                        "description": "KeyVault directoryId."
                                      },
                                      "name": {
                                        "type": "string",
                                        "description": "KeyVault name."
                                      }
                                    },
                                    "required": [
                                      "credentials",
                                      "directoryId",
                                      "name"
                                    ]
                                  },
                                  "vaultCaChainSecret": {
                                    "description": "KeyVault CA chain secret details.",
                                    "type": "object",
                                    "properties": {
                                      "name": {
                                        "type": "string",
                                        "description": "KeyVault secret name."
                                      },
                                      "version": {
                                        "type": "string",
                                        "description": "KeyVault secret version."
                                      }
                                    },
                                    "required": [
                                      "name"
                                    ]
                                  },
                                  "vaultCert": {
                                    "description": "KeyVault Cert secret details.",
                                    "type": "object",
                                    "properties": {
                                      "name": {
                                        "type": "string",
                                        "description": "KeyVault secret name."
                                      },
                                      "version": {
                                        "type": "string",
                                        "description": "KeyVault secret version."
                                      }
                                    },
                                    "required": [
                                      "name"
                                    ]
                                  }
                                },
                                "required": [
                                  "vault",
                                  "vaultCert"
                                ]
                              },
                              "secretName": {
                                "type": "string",
                                "description": "Secret where cert details are stored."
                              }
                            }
                          },
                          "systemAssignedManagedIdentity": {
                            "description": "Managed identity remote broker authentication method.",
                            "type": "object",
                            "properties": {
                              "audience": {
                                "type": "string",
                                "description": "Token audience."
                              },
                              "extensionName": {
                                "type": "string",
                                "description": "Arc Extension name."
                              }
                            },
                            "required": [
                              "audience"
                            ]
                          }
                        }
                      },
                      "endpoint": {
                        "type": "string",
                        "description": "The endpoint of remote broker to connect to."
                      },
                      "protocol": {
                        "type": "string",
                        "description": "Protocol for remote connection.",
                        "default": "mqtt",
                        "enum": [
                          "mqtt",
                          "webSocket"
                        ],
                        "x-ms-enum": {
                          "name": "MqttBridgeRemoteBrokerProtocol",
                          "modelAsString": true,
                          "values": [
                            {
                              "name": "mqtt",
                              "value": "mqtt",
                              "description": "MQTT protocol."
                            },
                            {
                              "name": "webSocket",
                              "value": "webSocket",
                              "description": "MQTT over WebSocket protocol."
                            }
                          ]
                        }
                      },
                      "tls": {
                        "description": "TLS details for Remote broker Connection.",
                        "type": "object",
                        "properties": {
                          "tlsEnabled": {
                            "type": "boolean",
                            "description": "Tls Enabled on Remote Broker Connection."
                          },
                          "trustedCaCertificateConfigMap": {
                            "type": "string",
                            "description": "Trusted CA certificate name for Remote Broker."
                          }
                        },
                        "required": [
                          "tlsEnabled"
                        ]
                      }
                    },
                    "required": [
                      "authentication",
                      "endpoint",
                      "tls"
                    ]
                  }
                },
                "required": [
                  "image",
                  "protocol",
                  "remoteBrokerConnection"
                ]
              },
              "extendedLocation": {
                "description": "Extended Location",
                "x-ms-mutability": [
                  "read",
                  "create"
                ],
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the extended location."
                  },
                  "type": {
                    "description": "Type of ExtendedLocation.",
                    "type": "string",
                    "enum": [
                      "CustomLocation"
                    ],
                    "x-ms-enum": {
                      "name": "ExtendedLocationType",
                      "modelAsString": true,
                      "values": [
                        {
                          "name": "CustomLocation",
                          "value": "CustomLocation",
                          "description": "CustomLocation type"
                        }
                      ]
                    }
                  }
                },
                "required": [
                  "name",
                  "type"
                ]
              }
            },
            "required": [
              "extendedLocation"
            ]
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "MqttBridgeConnectorResourceUpdate": {
      "type": "object",
      "description": "The type used for update operations of the MqttBridgeConnectorResource.",
      "properties": {
        "tags": {
          "type": "object",
          "description": "Resource tags.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "properties": {
          "description": "The resource-specific properties for this resource.",
          "x-ms-client-flatten": true,
          "type": "object",
          "properties": {
            "bridgeInstances": {
              "type": "integer",
              "format": "int32",
              "description": "The number of instances to deploy for a bridge rollout.",
              "minimum": 0,
              "maximum": 65535
            },
            "clientIdPrefix": {
              "type": "string",
              "description": "The client id prefix of the dynamically generated client ids."
            },
            "image": {
              "description": "The details of MqttBridge Docker Image.",
              "type": "object",
              "properties": {
                "pullPolicy": {
                  "type": "string",
                  "description": "Image pull policy."
                },
                "pullSecrets": {
                  "type": "string",
                  "description": "Image pull secrets."
                },
                "repository": {
                  "type": "string",
                  "description": "The Docker image name."
                },
                "tag": {
                  "type": "string",
                  "description": "The Docker  image tag."
                }
              }
            },
            "localBrokerConnection": {
              "description": "The details for connecting with Local Broker.",
              "type": "object",
              "properties": {
                "authentication": {
                  "description": "The authentication methods for LocalBroker connection. NOTE - Enum only one method at a time is supported.",
                  "type": "object",
                  "properties": {
                    "kubernetes": {
                      "description": "Kubernetes local broker authentication method.",
                      "type": "object",
                      "properties": {
                        "secretPath": {
                          "type": "string",
                          "description": "Secret Path where SAT is mounted.",
                          "default": "/var/run/serviceaccount/localbroker"
                        },
                        "serviceAccountTokenName": {
                          "type": "string",
                          "description": "Token name where SAT is mounted on secret path.",
                          "default": "sat"
                        }
                      }
                    }
                  }
                },
                "endpoint": {
                  "type": "string",
                  "description": "The endpoint of local broker to connect to.",
                  "default": "aio-mq-dmqtt-frontend:1883"
                },
                "tls": {
                  "description": "TLS details for Local broker Connection.",
                  "type": "object",
                  "properties": {
                    "tlsEnabled": {
                      "type": "boolean",
                      "description": "Tls Enabled on Local Broker Connection.",
                      "default": false
                    },
                    "trustedCaCertificateConfigMap": {
                      "type": "string",
                      "description": "Trusted CA certificate config map name for Local Broker."
                    }
                  }
                }
              }
            },
            "logLevel": {
              "type": "string",
              "description": "The log level of the Bridge Connector instances."
            },
            "nodeTolerations": {
              "description": "The Node Tolerations for the Bridge Connector pods.",
              "type": "object",
              "properties": {
                "effect": {
                  "type": "string",
                  "description": "Toleration effect."
                },
                "key": {
                  "type": "string",
                  "description": "Toleration key."
                },
                "operator": {
                  "type": "string",
                  "description": "Toleration operator like 'Exists', 'Equal' etc."
                },
                "value": {
                  "type": "string",
                  "description": "Toleration Value."
                }
              }
            },
            "protocol": {
              "description": "The protocol to use for connecting with Brokers.",
              "type": "string",
              "enum": [
                "v3",
                "v5"
              ],
              "x-ms-enum": {
                "name": "MqttProtocol",
                "modelAsString": true,
                "values": [
                  {
                    "name": "v3",
                    "value": "v3",
                    "description": "Mqttv3"
                  },
                  {
                    "name": "v5",
                    "value": "v5",
                    "description": "Mqttv5"
                  }
                ]
              }
            },
            "remoteBrokerConnection": {
              "description": "The details for connecting with Remote Broker.",
              "type": "object",
              "properties": {
                "authentication": {
                  "description": "The remote broker authentication methods. NOTE - Enum only one method is allowed to be passed.",
                  "type": "object",
                  "properties": {
                    "x509": {
                      "description": "X509 remote broker authentication method.",
                      "type": "object",
                      "properties": {
                        "keyVault": {
                          "description": "Keyvault X509 secret properties.",
                          "type": "object",
                          "properties": {
                            "vault": {
                              "description": "KeyVault properties.",
                              "type": "object",
                              "properties": {
                                "credentials": {
                                  "description": "KeyVault credentials.",
                                  "type": "object",
                                  "properties": {
                                    "servicePrincipalLocalSecretName": {
                                      "type": "string",
                                      "description": "KeyVault service principal local secret name."
                                    }
                                  }
                                },
                                "directoryId": {
                                  "type": "string",
                                  "description": "KeyVault directoryId."
                                },
                                "name": {
                                  "type": "string",
                                  "description": "KeyVault name."
                                }
                              }
                            },
                            "vaultCaChainSecret": {
                              "description": "KeyVault CA chain secret details.",
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "KeyVault secret name."
                                },
                                "version": {
                                  "type": "string",
                                  "description": "KeyVault secret version."
                                }
                              }
                            },
                            "vaultCert": {
                              "description": "KeyVault Cert secret details.",
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "KeyVault secret name."
                                },
                                "version": {
                                  "type": "string",
                                  "description": "KeyVault secret version."
                                }
                              }
                            }
                          }
                        },
                        "secretName": {
                          "type": "string",
                          "description": "Secret where cert details are stored."
                        }
                      }
                    },
                    "systemAssignedManagedIdentity": {
                      "description": "Managed identity remote broker authentication method.",
                      "type": "object",
                      "properties": {
                        "audience": {
                          "type": "string",
                          "description": "Token audience."
                        },
                        "extensionName": {
                          "type": "string",
                          "description": "Arc Extension name."
                        }
                      }
                    }
                  }
                },
                "endpoint": {
                  "type": "string",
                  "description": "The endpoint of remote broker to connect to."
                },
                "protocol": {
                  "type": "string",
                  "description": "Protocol for remote connection.",
                  "default": "mqtt",
                  "enum": [
                    "mqtt",
                    "webSocket"
                  ],
                  "x-ms-enum": {
                    "name": "MqttBridgeRemoteBrokerProtocol",
                    "modelAsString": true,
                    "values": [
                      {
                        "name": "mqtt",
                        "value": "mqtt",
                        "description": "MQTT protocol."
                      },
                      {
                        "name": "webSocket",
                        "value": "webSocket",
                        "description": "MQTT over WebSocket protocol."
                      }
                    ]
                  }
                },
                "tls": {
                  "description": "TLS details for Remote broker Connection.",
                  "type": "object",
                  "properties": {
                    "tlsEnabled": {
                      "type": "boolean",
                      "description": "Tls Enabled on Remote Broker Connection."
                    },
                    "trustedCaCertificateConfigMap": {
                      "type": "string",
                      "description": "Trusted CA certificate name for Remote Broker."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "MqttBridgeConnectorResourceUpdateProperties": {
      "type": "object",
      "description": "The updatable properties of the MqttBridgeConnectorResource.",
      "properties": {
        "bridgeInstances": {
          "type": "integer",
          "format": "int32",
          "description": "The number of instances to deploy for a bridge rollout.",
          "minimum": 0,
          "maximum": 65535
        },
        "clientIdPrefix": {
          "type": "string",
          "description": "The client id prefix of the dynamically generated client ids."
        },
        "image": {
          "description": "The details of MqttBridge Docker Image.",
          "type": "object",
          "properties": {
            "pullPolicy": {
              "type": "string",
              "description": "Image pull policy."
            },
            "pullSecrets": {
              "type": "string",
              "description": "Image pull secrets."
            },
            "repository": {
              "type": "string",
              "description": "The Docker image name."
            },
            "tag": {
              "type": "string",
              "description": "The Docker  image tag."
            }
          }
        },
        "localBrokerConnection": {
          "description": "The details for connecting with Local Broker.",
          "type": "object",
          "properties": {
            "authentication": {
              "description": "The authentication methods for LocalBroker connection. NOTE - Enum only one method at a time is supported.",
              "type": "object",
              "properties": {
                "kubernetes": {
                  "description": "Kubernetes local broker authentication method.",
                  "type": "object",
                  "properties": {
                    "secretPath": {
                      "type": "string",
                      "description": "Secret Path where SAT is mounted.",
                      "default": "/var/run/serviceaccount/localbroker"
                    },
                    "serviceAccountTokenName": {
                      "type": "string",
                      "description": "Token name where SAT is mounted on secret path.",
                      "default": "sat"
                    }
                  }
                }
              }
            },
            "endpoint": {
              "type": "string",
              "description": "The endpoint of local broker to connect to.",
              "default": "aio-mq-dmqtt-frontend:1883"
            },
            "tls": {
              "description": "TLS details for Local broker Connection.",
              "type": "object",
              "properties": {
                "tlsEnabled": {
                  "type": "boolean",
                  "description": "Tls Enabled on Local Broker Connection.",
                  "default": false
                },
                "trustedCaCertificateConfigMap": {
                  "type": "string",
                  "description": "Trusted CA certificate config map name for Local Broker."
                }
              }
            }
          }
        },
        "logLevel": {
          "type": "string",
          "description": "The log level of the Bridge Connector instances."
        },
        "nodeTolerations": {
          "description": "The Node Tolerations for the Bridge Connector pods.",
          "type": "object",
          "properties": {
            "effect": {
              "type": "string",
              "description": "Toleration effect."
            },
            "key": {
              "type": "string",
              "description": "Toleration key."
            },
            "operator": {
              "type": "string",
              "description": "Toleration operator like 'Exists', 'Equal' etc."
            },
            "value": {
              "type": "string",
              "description": "Toleration Value."
            }
          }
        },
        "protocol": {
          "description": "The protocol to use for connecting with Brokers.",
          "type": "string",
          "enum": [
            "v3",
            "v5"
          ],
          "x-ms-enum": {
            "name": "MqttProtocol",
            "modelAsString": true,
            "values": [
              {
                "name": "v3",
                "value": "v3",
                "description": "Mqttv3"
              },
              {
                "name": "v5",
                "value": "v5",
                "description": "Mqttv5"
              }
            ]
          }
        },
        "remoteBrokerConnection": {
          "description": "The details for connecting with Remote Broker.",
          "type": "object",
          "properties": {
            "authentication": {
              "description": "The remote broker authentication methods. NOTE - Enum only one method is allowed to be passed.",
              "type": "object",
              "properties": {
                "x509": {
                  "description": "X509 remote broker authentication method.",
                  "type": "object",
                  "properties": {
                    "keyVault": {
                      "description": "Keyvault X509 secret properties.",
                      "type": "object",
                      "properties": {
                        "vault": {
                          "description": "KeyVault properties.",
                          "type": "object",
                          "properties": {
                            "credentials": {
                              "description": "KeyVault credentials.",
                              "type": "object",
                              "properties": {
                                "servicePrincipalLocalSecretName": {
                                  "type": "string",
                                  "description": "KeyVault service principal local secret name."
                                }
                              }
                            },
                            "directoryId": {
                              "type": "string",
                              "description": "KeyVault directoryId."
                            },
                            "name": {
                              "type": "string",
                              "description": "KeyVault name."
                            }
                          }
                        },
                        "vaultCaChainSecret": {
                          "description": "KeyVault CA chain secret details.",
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "KeyVault secret name."
                            },
                            "version": {
                              "type": "string",
                              "description": "KeyVault secret version."
                            }
                          }
                        },
                        "vaultCert": {
                          "description": "KeyVault Cert secret details.",
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "KeyVault secret name."
                            },
                            "version": {
                              "type": "string",
                              "description": "KeyVault secret version."
                            }
                          }
                        }
                      }
                    },
                    "secretName": {
                      "type": "string",
                      "description": "Secret where cert details are stored."
                    }
                  }
                },
                "systemAssignedManagedIdentity": {
                  "description": "Managed identity remote broker authentication method.",
                  "type": "object",
                  "properties": {
                    "audience": {
                      "type": "string",
                      "description": "Token audience."
                    },
                    "extensionName": {
                      "type": "string",
                      "description": "Arc Extension name."
                    }
                  }
                }
              }
            },
            "endpoint": {
              "type": "string",
              "description": "The endpoint of remote broker to connect to."
            },
            "protocol": {
              "type": "string",
              "description": "Protocol for remote connection.",
              "default": "mqtt",
              "enum": [
                "mqtt",
                "webSocket"
              ],
              "x-ms-enum": {
                "name": "MqttBridgeRemoteBrokerProtocol",
                "modelAsString": true,
                "values": [
                  {
                    "name": "mqtt",
                    "value": "mqtt",
                    "description": "MQTT protocol."
                  },
                  {
                    "name": "webSocket",
                    "value": "webSocket",
                    "description": "MQTT over WebSocket protocol."
                  }
                ]
              }
            },
            "tls": {
              "description": "TLS details for Remote broker Connection.",
              "type": "object",
              "properties": {
                "tlsEnabled": {
                  "type": "boolean",
                  "description": "Tls Enabled on Remote Broker Connection."
                },
                "trustedCaCertificateConfigMap": {
                  "type": "string",
                  "description": "Trusted CA certificate name for Remote Broker."
                }
              }
            }
          }
        }
      }
    },
    "MqttBridgeRemoteBrokerAuthenticationMethods": {
      "type": "object",
      "description": "MqttBridge RemoteBrokerConnection Authentication methods. NOTE - Enum only one is allowed to be passed.",
      "properties": {
        "x509": {
          "description": "X509 remote broker authentication method.",
          "type": "object",
          "properties": {
            "keyVault": {
              "description": "Keyvault X509 secret properties.",
              "type": "object",
              "properties": {
                "vault": {
                  "description": "KeyVault properties.",
                  "type": "object",
                  "properties": {
                    "credentials": {
                      "description": "KeyVault credentials.",
                      "type": "object",
                      "properties": {
                        "servicePrincipalLocalSecretName": {
                          "type": "string",
                          "description": "KeyVault service principal local secret name."
                        }
                      },
                      "required": [
                        "servicePrincipalLocalSecretName"
                      ]
                    },
                    "directoryId": {
                      "type": "string",
                      "description": "KeyVault directoryId."
                    },
                    "name": {
                      "type": "string",
                      "description": "KeyVault name."
                    }
                  },
                  "required": [
                    "credentials",
                    "directoryId",
                    "name"
                  ]
                },
                "vaultCaChainSecret": {
                  "description": "KeyVault CA chain secret details.",
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "KeyVault secret name."
                    },
                    "version": {
                      "type": "string",
                      "description": "KeyVault secret version."
                    }
                  },
                  "required": [
                    "name"
                  ]
                },
                "vaultCert": {
                  "description": "KeyVault Cert secret details.",
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "KeyVault secret name."
                    },
                    "version": {
                      "type": "string",
                      "description": "KeyVault secret version."
                    }
                  },
                  "required": [
                    "name"
                  ]
                }
              },
              "required": [
                "vault",
                "vaultCert"
              ]
            },
            "secretName": {
              "type": "string",
              "description": "Secret where cert details are stored."
            }
          }
        },
        "systemAssignedManagedIdentity": {
          "description": "Managed identity remote broker authentication method.",
          "type": "object",
          "properties": {
            "audience": {
              "type": "string",
              "description": "Token audience."
            },
            "extensionName": {
              "type": "string",
              "description": "Arc Extension name."
            }
          },
          "required": [
            "audience"
          ]
        }
      }
    },
    "MqttBridgeRemoteBrokerAuthenticationMethodsUpdate": {
      "type": "object",
      "description": "MqttBridge RemoteBrokerConnection Authentication methods. NOTE - Enum only one is allowed to be passed.",
      "properties": {
        "x509": {
          "description": "X509 remote broker authentication method.",
          "type": "object",
          "properties": {
            "keyVault": {
              "description": "Keyvault X509 secret properties.",
              "type": "object",
              "properties": {
                "vault": {
                  "description": "KeyVault properties.",
                  "type": "object",
                  "properties": {
                    "credentials": {
                      "description": "KeyVault credentials.",
                      "type": "object",
                      "properties": {
                        "servicePrincipalLocalSecretName": {
                          "type": "string",
                          "description": "KeyVault service principal local secret name."
                        }
                      }
                    },
                    "directoryId": {
                      "type": "string",
                      "description": "KeyVault directoryId."
                    },
                    "name": {
                      "type": "string",
                      "description": "KeyVault name."
                    }
                  }
                },
                "vaultCaChainSecret": {
                  "description": "KeyVault CA chain secret details.",
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "KeyVault secret name."
                    },
                    "version": {
                      "type": "string",
                      "description": "KeyVault secret version."
                    }
                  }
                },
                "vaultCert": {
                  "description": "KeyVault Cert secret details.",
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "KeyVault secret name."
                    },
                    "version": {
                      "type": "string",
                      "description": "KeyVault secret version."
                    }
                  }
                }
              }
            },
            "secretName": {
              "type": "string",
              "description": "Secret where cert details are stored."
            }
          }
        },
        "systemAssignedManagedIdentity": {
          "description": "Managed identity remote broker authentication method.",
          "type": "object",
          "properties": {
            "audience": {
              "type": "string",
              "description": "Token audience."
            },
            "extensionName": {
              "type": "string",
              "description": "Arc Extension name."
            }
          }
        }
      }
    },
    "MqttBridgeRemoteBrokerConnectionSpec": {
      "type": "object",
      "description": "MqttBridge RemoteBrokerConnectionSpec details",
      "properties": {
        "authentication": {
          "description": "The remote broker authentication methods. NOTE - Enum only one method is allowed to be passed.",
          "type": "object",
          "properties": {
            "x509": {
              "description": "X509 remote broker authentication method.",
              "type": "object",
              "properties": {
                "keyVault": {
                  "description": "Keyvault X509 secret properties.",
                  "type": "object",
                  "properties": {
                    "vault": {
                      "description": "KeyVault properties.",
                      "type": "object",
                      "properties": {
                        "credentials": {
                          "description": "KeyVault credentials.",
                          "type": "object",
                          "properties": {
                            "servicePrincipalLocalSecretName": {
                              "type": "string",
                              "description": "KeyVault service principal local secret name."
                            }
                          },
                          "required": [
                            "servicePrincipalLocalSecretName"
                          ]
                        },
                        "directoryId": {
                          "type": "string",
                          "description": "KeyVault directoryId."
                        },
                        "name": {
                          "type": "string",
                          "description": "KeyVault name."
                        }
                      },
                      "required": [
                        "credentials",
                        "directoryId",
                        "name"
                      ]
                    },
                    "vaultCaChainSecret": {
                      "description": "KeyVault CA chain secret details.",
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "KeyVault secret name."
                        },
                        "version": {
                          "type": "string",
                          "description": "KeyVault secret version."
                        }
                      },
                      "required": [
                        "name"
                      ]
                    },
                    "vaultCert": {
                      "description": "KeyVault Cert secret details.",
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "KeyVault secret name."
                        },
                        "version": {
                          "type": "string",
                          "description": "KeyVault secret version."
                        }
                      },
                      "required": [
                        "name"
                      ]
                    }
                  },
                  "required": [
                    "vault",
                    "vaultCert"
                  ]
                },
                "secretName": {
                  "type": "string",
                  "description": "Secret where cert details are stored."
                }
              }
            },
            "systemAssignedManagedIdentity": {
              "description": "Managed identity remote broker authentication method.",
              "type": "object",
              "properties": {
                "audience": {
                  "type": "string",
                  "description": "Token audience."
                },
                "extensionName": {
                  "type": "string",
                  "description": "Arc Extension name."
                }
              },
              "required": [
                "audience"
              ]
            }
          }
        },
        "endpoint": {
          "type": "string",
          "description": "The endpoint of remote broker to connect to."
        },
        "protocol": {
          "type": "string",
          "description": "Protocol for remote connection.",
          "default": "mqtt",
          "enum": [
            "mqtt",
            "webSocket"
          ],
          "x-ms-enum": {
            "name": "MqttBridgeRemoteBrokerProtocol",
            "modelAsString": true,
            "values": [
              {
                "name": "mqtt",
                "value": "mqtt",
                "description": "MQTT protocol."
              },
              {
                "name": "webSocket",
                "value": "webSocket",
                "description": "MQTT over WebSocket protocol."
              }
            ]
          }
        },
        "tls": {
          "description": "TLS details for Remote broker Connection.",
          "type": "object",
          "properties": {
            "tlsEnabled": {
              "type": "boolean",
              "description": "Tls Enabled on Remote Broker Connection."
            },
            "trustedCaCertificateConfigMap": {
              "type": "string",
              "description": "Trusted CA certificate name for Remote Broker."
            }
          },
          "required": [
            "tlsEnabled"
          ]
        }
      },
      "required": [
        "authentication",
        "endpoint",
        "tls"
      ]
    },
    "MqttBridgeRemoteBrokerConnectionSpecUpdate": {
      "type": "object",
      "description": "MqttBridge RemoteBrokerConnectionSpec details",
      "properties": {
        "authentication": {
          "description": "The remote broker authentication methods. NOTE - Enum only one method is allowed to be passed.",
          "type": "object",
          "properties": {
            "x509": {
              "description": "X509 remote broker authentication method.",
              "type": "object",
              "properties": {
                "keyVault": {
                  "description": "Keyvault X509 secret properties.",
                  "type": "object",
                  "properties": {
                    "vault": {
                      "description": "KeyVault properties.",
                      "type": "object",
                      "properties": {
                        "credentials": {
                          "description": "KeyVault credentials.",
                          "type": "object",
                          "properties": {
                            "servicePrincipalLocalSecretName": {
                              "type": "string",
                              "description": "KeyVault service principal local secret name."
                            }
                          }
                        },
                        "directoryId": {
                          "type": "string",
                          "description": "KeyVault directoryId."
                        },
                        "name": {
                          "type": "string",
                          "description": "KeyVault name."
                        }
                      }
                    },
                    "vaultCaChainSecret": {
                      "description": "KeyVault CA chain secret details.",
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "KeyVault secret name."
                        },
                        "version": {
                          "type": "string",
                          "description": "KeyVault secret version."
                        }
                      }
                    },
                    "vaultCert": {
                      "description": "KeyVault Cert secret details.",
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "KeyVault secret name."
                        },
                        "version": {
                          "type": "string",
                          "description": "KeyVault secret version."
                        }
                      }
                    }
                  }
                },
                "secretName": {
                  "type": "string",
                  "description": "Secret where cert details are stored."
                }
              }
            },
            "systemAssignedManagedIdentity": {
              "description": "Managed identity remote broker authentication method.",
              "type": "object",
              "properties": {
                "audience": {
                  "type": "string",
                  "description": "Token audience."
                },
                "extensionName": {
                  "type": "string",
                  "description": "Arc Extension name."
                }
              }
            }
          }
        },
        "endpoint": {
          "type": "string",
          "description": "The endpoint of remote broker to connect to."
        },
        "protocol": {
          "type": "string",
          "description": "Protocol for remote connection.",
          "default": "mqtt",
          "enum": [
            "mqtt",
            "webSocket"
          ],
          "x-ms-enum": {
            "name": "MqttBridgeRemoteBrokerProtocol",
            "modelAsString": true,
            "values": [
              {
                "name": "mqtt",
                "value": "mqtt",
                "description": "MQTT protocol."
              },
              {
                "name": "webSocket",
                "value": "webSocket",
                "description": "MQTT over WebSocket protocol."
              }
            ]
          }
        },
        "tls": {
          "description": "TLS details for Remote broker Connection.",
          "type": "object",
          "properties": {
            "tlsEnabled": {
              "type": "boolean",
              "description": "Tls Enabled on Remote Broker Connection."
            },
            "trustedCaCertificateConfigMap": {
              "type": "string",
              "description": "Trusted CA certificate name for Remote Broker."
            }
          }
        }
      }
    },
    "MqttBridgeRemoteBrokerConnectionTls": {
      "type": "object",
      "description": "MqttBridge RemoteBrokerConnection TLS details",
      "properties": {
        "tlsEnabled": {
          "type": "boolean",
          "description": "Tls Enabled on Remote Broker Connection."
        },
        "trustedCaCertificateConfigMap": {
          "type": "string",
          "description": "Trusted CA certificate name for Remote Broker."
        }
      },
      "required": [
        "tlsEnabled"
      ]
    },
    "MqttBridgeRemoteBrokerConnectionTlsUpdate": {
      "type": "object",
      "description": "MqttBridge RemoteBrokerConnection TLS details",
      "properties": {
        "tlsEnabled": {
          "type": "boolean",
          "description": "Tls Enabled on Remote Broker Connection."
        },
        "trustedCaCertificateConfigMap": {
          "type": "string",
          "description": "Trusted CA certificate name for Remote Broker."
        }
      }
    },
    "MqttBridgeRemoteBrokerProtocol": {
      "type": "string",
      "description": "Protocol for remote connection.",
      "enum": [
        "mqtt",
        "webSocket"
      ],
      "x-ms-enum": {
        "name": "MqttBridgeRemoteBrokerProtocol",
        "modelAsString": true,
        "values": [
          {
            "name": "mqtt",
            "value": "mqtt",
            "description": "MQTT protocol."
          },
          {
            "name": "webSocket",
            "value": "webSocket",
            "description": "MQTT over WebSocket protocol."
          }
        ]
      }
    },
    "MqttBridgeRemoteBrokerX509Authentication": {
      "type": "object",
      "description": "MqttBridge RemoteBroker X509 Authentication properties.",
      "properties": {
        "keyVault": {
          "description": "Keyvault X509 secret properties.",
          "type": "object",
          "properties": {
            "vault": {
              "description": "KeyVault properties.",
              "type": "object",
              "properties": {
                "credentials": {
                  "description": "KeyVault credentials.",
                  "type": "object",
                  "properties": {
                    "servicePrincipalLocalSecretName": {
                      "type": "string",
                      "description": "KeyVault service principal local secret name."
                    }
                  },
                  "required": [
                    "servicePrincipalLocalSecretName"
                  ]
                },
                "directoryId": {
                  "type": "string",
                  "description": "KeyVault directoryId."
                },
                "name": {
                  "type": "string",
                  "description": "KeyVault name."
                }
              },
              "required": [
                "credentials",
                "directoryId",
                "name"
              ]
            },
            "vaultCaChainSecret": {
              "description": "KeyVault CA chain secret details.",
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "KeyVault secret name."
                },
                "version": {
                  "type": "string",
                  "description": "KeyVault secret version."
                }
              },
              "required": [
                "name"
              ]
            },
            "vaultCert": {
              "description": "KeyVault Cert secret details.",
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "KeyVault secret name."
                },
                "version": {
                  "type": "string",
                  "description": "KeyVault secret version."
                }
              },
              "required": [
                "name"
              ]
            }
          },
          "required": [
            "vault",
            "vaultCert"
          ]
        },
        "secretName": {
          "type": "string",
          "description": "Secret where cert details are stored."
        }
      }
    },
    "MqttBridgeRemoteBrokerX509AuthenticationUpdate": {
      "type": "object",
      "description": "MqttBridge RemoteBroker X509 Authentication properties.",
      "properties": {
        "keyVault": {
          "description": "Keyvault X509 secret properties.",
          "type": "object",
          "properties": {
            "vault": {
              "description": "KeyVault properties.",
              "type": "object",
              "properties": {
                "credentials": {
                  "description": "KeyVault credentials.",
                  "type": "object",
                  "properties": {
                    "servicePrincipalLocalSecretName": {
                      "type": "string",
                      "description": "KeyVault service principal local secret name."
                    }
                  }
                },
                "directoryId": {
                  "type": "string",
                  "description": "KeyVault directoryId."
                },
                "name": {
                  "type": "string",
                  "description": "KeyVault name."
                }
              }
            },
            "vaultCaChainSecret": {
              "description": "KeyVault CA chain secret details.",
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "KeyVault secret name."
                },
                "version": {
                  "type": "string",
                  "description": "KeyVault secret version."
                }
              }
            },
            "vaultCert": {
              "description": "KeyVault Cert secret details.",
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "KeyVault secret name."
                },
                "version": {
                  "type": "string",
                  "description": "KeyVault secret version."
                }
              }
            }
          }
        },
        "secretName": {
          "type": "string",
          "description": "Secret where cert details are stored."
        }
      }
    },
    "MqttBridgeRouteDirection": {
      "type": "string",
      "description": "MqttBridgeRoute direction properties",
      "enum": [
        "remote-to-local",
        "local-to-remote"
      ],
      "x-ms-enum": {
        "name": "MqttBridgeRouteDirection",
        "modelAsString": true,
        "values": [
          {
            "name": "RemoteToLocal",
            "value": "remote-to-local",
            "description": "Remote to Local Broker."
          },
          {
            "name": "LocalToRemote",
            "value": "local-to-remote",
            "description": "Local to Remote Broker."
          }
        ]
      }
    },
    "MqttBridgeRouteSharedSubscription": {
      "type": "object",
      "description": "MqttBridgeRoute Shared subscription properties",
      "properties": {
        "groupMinimumShareNumber": {
          "type": "integer",
          "format": "int32",
          "description": "The group shared subscription minimum share number.",
          "minimum": 0,
          "maximum": 255
        },
        "groupName": {
          "type": "string",
          "description": "The group name for Shared subscription."
        }
      },
      "required": [
        "groupMinimumShareNumber",
        "groupName"
      ]
    },
    "MqttBridgeRoutes": {
      "type": "object",
      "description": "MqttBridgeTopicMap route properties",
      "properties": {
        "direction": {
          "description": "Direction of the route.",
          "type": "string",
          "enum": [
            "remote-to-local",
            "local-to-remote"
          ],
          "x-ms-enum": {
            "name": "MqttBridgeRouteDirection",
            "modelAsString": true,
            "values": [
              {
                "name": "RemoteToLocal",
                "value": "remote-to-local",
                "description": "Remote to Local Broker."
              },
              {
                "name": "LocalToRemote",
                "value": "local-to-remote",
                "description": "Local to Remote Broker."
              }
            ]
          }
        },
        "name": {
          "type": "string",
          "description": "Name of the route."
        },
        "qos": {
          "type": "integer",
          "format": "int32",
          "description": "Qos for MQTT connection.",
          "default": 1,
          "minimum": 0,
          "maximum": 2
        },
        "sharedSubscription": {
          "description": "Shared subscription topic details.",
          "type": "object",
          "properties": {
            "groupMinimumShareNumber": {
              "type": "integer",
              "format": "int32",
              "description": "The group shared subscription minimum share number.",
              "minimum": 0,
              "maximum": 255
            },
            "groupName": {
              "type": "string",
              "description": "The group name for Shared subscription."
            }
          },
          "required": [
            "groupMinimumShareNumber",
            "groupName"
          ]
        },
        "source": {
          "type": "string",
          "description": "Source topic of the route."
        },
        "target": {
          "type": "string",
          "description": "Target topic of the route. Ignore if same as source"
        }
      },
      "required": [
        "direction",
        "name",
        "source"
      ]
    },
    "MqttBridgeTopicMapProperties": {
      "type": "object",
      "description": "MqttBridgeTopicMap Properties",
      "properties": {
        "mqttBridgeConnectorRef": {
          "type": "string",
          "description": "The MqttBridgeConnector CRD it refers to."
        },
        "routes": {
          "type": "array",
          "description": "The route details for MqttBridge connector.",
          "items": {
            "type": "object",
            "description": "MqttBridgeTopicMap route properties",
            "properties": {
              "direction": {
                "description": "Direction of the route.",
                "type": "string",
                "enum": [
                  "remote-to-local",
                  "local-to-remote"
                ],
                "x-ms-enum": {
                  "name": "MqttBridgeRouteDirection",
                  "modelAsString": true,
                  "values": [
                    {
                      "name": "RemoteToLocal",
                      "value": "remote-to-local",
                      "description": "Remote to Local Broker."
                    },
                    {
                      "name": "LocalToRemote",
                      "value": "local-to-remote",
                      "description": "Local to Remote Broker."
                    }
                  ]
                }
              },
              "name": {
                "type": "string",
                "description": "Name of the route."
              },
              "qos": {
                "type": "integer",
                "format": "int32",
                "description": "Qos for MQTT connection.",
                "default": 1,
                "minimum": 0,
                "maximum": 2
              },
              "sharedSubscription": {
                "description": "Shared subscription topic details.",
                "type": "object",
                "properties": {
                  "groupMinimumShareNumber": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The group shared subscription minimum share number.",
                    "minimum": 0,
                    "maximum": 255
                  },
                  "groupName": {
                    "type": "string",
                    "description": "The group name for Shared subscription."
                  }
                },
                "required": [
                  "groupMinimumShareNumber",
                  "groupName"
                ]
              },
              "source": {
                "type": "string",
                "description": "Source topic of the route."
              },
              "target": {
                "type": "string",
                "description": "Target topic of the route. Ignore if same as source"
              }
            },
            "required": [
              "direction",
              "name",
              "source"
            ]
          },
          "x-ms-identifiers": []
        },
        "provisioningState": {
          "description": "The status of the last operation.",
          "readOnly": true,
          "type": "string",
          "enum": [
            "Succeeded",
            "Failed",
            "Canceled",
            "Provisioning",
            "Updating",
            "Deleting",
            "Accepted"
          ],
          "x-ms-enum": {
            "name": "ProvisioningState",
            "modelAsString": true,
            "values": [
              {
                "name": "Succeeded",
                "value": "Succeeded",
                "description": "Resource has been created."
              },
              {
                "name": "Failed",
                "value": "Failed",
                "description": "Resource creation failed."
              },
              {
                "name": "Canceled",
                "value": "Canceled",
                "description": "Resource creation was canceled."
              },
              {
                "name": "Provisioning",
                "value": "Provisioning",
                "description": "Resource is getting provisioned."
              },
              {
                "name": "Updating",
                "value": "Updating",
                "description": "Resource is Updating."
              },
              {
                "name": "Deleting",
                "value": "Deleting",
                "description": "Resource is Deleting."
              },
              {
                "name": "Accepted",
                "value": "Accepted",
                "description": "Resource has been Accepted."
              }
            ]
          }
        }
      },
      "required": [
        "mqttBridgeConnectorRef"
      ]
    },
    "MqttBridgeTopicMapResource": {
      "type": "object",
      "description": "MQ mqttBridgeTopicMap resource",
      "properties": {
        "id": {
          "type": "string",
          "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "The name of the resource",
          "readOnly": true
        },
        "type": {
          "type": "string",
          "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
          "readOnly": true
        },
        "systemData": {
          "type": "object",
          "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
          "readOnly": true,
          "properties": {
            "createdBy": {
              "type": "string",
              "description": "The identity that created the resource."
            },
            "createdByType": {
              "type": "string",
              "description": "The type of identity that created the resource.",
              "enum": [
                "User",
                "Application",
                "ManagedIdentity",
                "Key"
              ],
              "x-ms-enum": {
                "name": "createdByType",
                "modelAsString": true
              }
            },
            "createdAt": {
              "type": "string",
              "format": "date-time",
              "description": "The timestamp of resource creation (UTC)."
            },
            "lastModifiedBy": {
              "type": "string",
              "description": "The identity that last modified the resource."
            },
            "lastModifiedByType": {
              "type": "string",
              "description": "The type of identity that last modified the resource.",
              "enum": [
                "User",
                "Application",
                "ManagedIdentity",
                "Key"
              ],
              "x-ms-enum": {
                "name": "createdByType",
                "modelAsString": true
              }
            },
            "lastModifiedAt": {
              "type": "string",
              "format": "date-time",
              "description": "The timestamp of resource last modification (UTC)"
            }
          }
        },
        "tags": {
          "type": "object",
          "description": "Resource tags.",
          "additionalProperties": {
            "type": "string"
          },
          "x-ms-mutability": [
            "read",
            "create",
            "update"
          ]
        },
        "location": {
          "type": "string",
          "description": "The geo-location where the resource lives",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "properties": {
          "description": "The resource-specific properties for this resource.",
          "x-ms-client-flatten": true,
          "type": "object",
          "properties": {
            "mqttBridgeConnectorRef": {
              "type": "string",
              "description": "The MqttBridgeConnector CRD it refers to."
            },
            "routes": {
              "type": "array",
              "description": "The route details for MqttBridge connector.",
              "items": {
                "type": "object",
                "description": "MqttBridgeTopicMap route properties",
                "properties": {
                  "direction": {
                    "description": "Direction of the route.",
                    "type": "string",
                    "enum": [
                      "remote-to-local",
                      "local-to-remote"
                    ],
                    "x-ms-enum": {
                      "name": "MqttBridgeRouteDirection",
                      "modelAsString": true,
                      "values": [
                        {
                          "name": "RemoteToLocal",
                          "value": "remote-to-local",
                          "description": "Remote to Local Broker."
                        },
                        {
                          "name": "LocalToRemote",
                          "value": "local-to-remote",
                          "description": "Local to Remote Broker."
                        }
                      ]
                    }
                  },
                  "name": {
                    "type": "string",
                    "description": "Name of the route."
                  },
                  "qos": {
                    "type": "integer",
                    "format": "int32",
                    "description": "Qos for MQTT connection.",
                    "default": 1,
                    "minimum": 0,
                    "maximum": 2
                  },
                  "sharedSubscription": {
                    "description": "Shared subscription topic details.",
                    "type": "object",
                    "properties": {
                      "groupMinimumShareNumber": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The group shared subscription minimum share number.",
                        "minimum": 0,
                        "maximum": 255
                      },
                      "groupName": {
                        "type": "string",
                        "description": "The group name for Shared subscription."
                      }
                    },
                    "required": [
                      "groupMinimumShareNumber",
                      "groupName"
                    ]
                  },
                  "source": {
                    "type": "string",
                    "description": "Source topic of the route."
                  },
                  "target": {
                    "type": "string",
                    "description": "Target topic of the route. Ignore if same as source"
                  }
                },
                "required": [
                  "direction",
                  "name",
                  "source"
                ]
              },
              "x-ms-identifiers": []
            },
            "provisioningState": {
              "description": "The status of the last operation.",
              "readOnly": true,
              "type": "string",
              "enum": [
                "Succeeded",
                "Failed",
                "Canceled",
                "Provisioning",
                "Updating",
                "Deleting",
                "Accepted"
              ],
              "x-ms-enum": {
                "name": "ProvisioningState",
                "modelAsString": true,
                "values": [
                  {
                    "name": "Succeeded",
                    "value": "Succeeded",
                    "description": "Resource has been created."
                  },
                  {
                    "name": "Failed",
                    "value": "Failed",
                    "description": "Resource creation failed."
                  },
                  {
                    "name": "Canceled",
                    "value": "Canceled",
                    "description": "Resource creation was canceled."
                  },
                  {
                    "name": "Provisioning",
                    "value": "Provisioning",
                    "description": "Resource is getting provisioned."
                  },
                  {
                    "name": "Updating",
                    "value": "Updating",
                    "description": "Resource is Updating."
                  },
                  {
                    "name": "Deleting",
                    "value": "Deleting",
                    "description": "Resource is Deleting."
                  },
                  {
                    "name": "Accepted",
                    "value": "Accepted",
                    "description": "Resource has been Accepted."
                  }
                ]
              }
            }
          },
          "required": [
            "mqttBridgeConnectorRef"
          ]
        },
        "extendedLocation": {
          "description": "Extended Location",
          "x-ms-mutability": [
            "read",
            "create"
          ],
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "The name of the extended location."
            },
            "type": {
              "description": "Type of ExtendedLocation.",
              "type": "string",
              "enum": [
                "CustomLocation"
              ],
              "x-ms-enum": {
                "name": "ExtendedLocationType",
                "modelAsString": true,
                "values": [
                  {
                    "name": "CustomLocation",
                    "value": "CustomLocation",
                    "description": "CustomLocation type"
                  }
                ]
              }
            }
          },
          "required": [
            "name",
            "type"
          ]
        }
      },
      "required": [
        "extendedLocation"
      ]
    },
    "MqttBridgeTopicMapResourceListResult": {
      "type": "object",
      "description": "The response of a MqttBridgeTopicMapResource list operation.",
      "properties": {
        "value": {
          "type": "array",
          "description": "The MqttBridgeTopicMapResource items on this page",
          "items": {
            "type": "object",
            "description": "MQ mqttBridgeTopicMap resource",
            "properties": {
              "id": {
                "type": "string",
                "description": "Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
                "readOnly": true
              },
              "name": {
                "type": "string",
                "description": "The name of the resource",
                "readOnly": true
              },
              "type": {
                "type": "string",
                "description": "The type of the resource. E.g. \"Microsoft.Compute/virtualMachines\" or \"Microsoft.Storage/storageAccounts\"",
                "readOnly": true
              },
              "systemData": {
                "type": "object",
                "description": "Azure Resource Manager metadata containing createdBy and modifiedBy information.",
                "readOnly": true,
                "properties": {
                  "createdBy": {
                    "type": "string",
                    "description": "The identity that created the resource."
                  },
                  "createdByType": {
                    "type": "string",
                    "description": "The type of identity that created the resource.",
                    "enum": [
                      "User",
                      "Application",
                      "ManagedIdentity",
                      "Key"
                    ],
                    "x-ms-enum": {
                      "name": "createdByType",
                      "modelAsString": true
                    }
                  },
                  "createdAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp of resource creation (UTC)."
                  },
                  "lastModifiedBy": {
                    "type": "string",
                    "description": "The identity that last modified the resource."
                  },
                  "lastModifiedByType": {
                    "type": "string",
                    "description": "The type of identity that last modified the resource.",
                    "enum": [
                      "User",
                      "Application",
                      "ManagedIdentity",
                      "Key"
                    ],
                    "x-ms-enum": {
                      "name": "createdByType",
                      "modelAsString": true
                    }
                  },
                  "lastModifiedAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The timestamp of resource last modification (UTC)"
                  }
                }
              },
              "tags": {
                "type": "object",
                "description": "Resource tags.",
                "additionalProperties": {
                  "type": "string"
                },
                "x-ms-mutability": [
                  "read",
                  "create",
                  "update"
                ]
              },
              "location": {
                "type": "string",
                "description": "The geo-location where the resource lives",
                "x-ms-mutability": [
                  "read",
                  "create"
                ]
              },
              "properties": {
                "description": "The resource-specific properties for this resource.",
                "x-ms-client-flatten": true,
                "type": "object",
                "properties": {
                  "mqttBridgeConnectorRef": {
                    "type": "string",
                    "description": "The MqttBridgeConnector CRD it refers to."
                  },
                  "routes": {
                    "type": "array",
                    "description": "The route details for MqttBridge connector.",
                    "items": {
                      "type": "object",
                      "description": "MqttBridgeTopicMap route properties",
                      "properties": {
                        "direction": {
                          "description": "Direction of the route.",
                          "type": "string",
                          "enum": [
                            "remote-to-local",
                            "local-to-remote"
                          ],
                          "x-ms-enum": {
                            "name": "MqttBridgeRouteDirection",
                            "modelAsString": true,
                            "values": [
                              {
                                "name": "RemoteToLocal",
                                "value": "remote-to-local",
                                "description": "Remote to Local Broker."
                              },
                              {
                                "name": "LocalToRemote",
                                "value": "local-to-remote",
                                "description": "Local to Remote Broker."
                              }
                            ]
                          }
                        },
                        "name": {
                          "type": "string",
                          "description": "Name of the route."
                        },
                        "qos": {
                          "type": "integer",
                          "format": "int32",
                          "description": "Qos for MQTT connection.",
                          "default": 1,
                          "minimum": 0,
                          "maximum": 2
                        },
                        "sharedSubscription": {
                          "description": "Shared subscription topic details.",
                          "type": "object",
                          "properties": {
                            "groupMinimumShareNumber": {
                              "type": "integer",
                              "format": "int32",
                              "description": "The group shared subscription minimum share number.",
                              "minimum": 0,
                              "maximum": 255
                            },
                            "groupName": {
                              "type": "string",
                              "description": "The group name for Shared subscription."
                            }
                          },
                          "required": [
                            "groupMinimumShareNumber",
                            "groupName"
                          ]
                        },
                        "source": {
                          "type": "string",
                          "description": "Source topic of the route."
                        },
                        "target": {
                          "type": "string",
                          "description": "Target topic of the route. Ignore if same as source"
                        }
                      },
                      "required": [
                        "direction",
                        "name",
                        "source"
                      ]
                    },
                    "x-ms-identifiers": []
                  },
                  "provisioningState": {
                    "description": "The status of the last operation.",
                    "readOnly": true,
                    "type": "string",
                    "enum": [
                      "Succeeded",
                      "Failed",
                      "Canceled",
                      "Provisioning",
                      "Updating",
                      "Deleting",
                      "Accepted"
                    ],
                    "x-ms-enum": {
                      "name": "ProvisioningState",
                      "modelAsString": true,
                      "values": [
                        {
                          "name": "Succeeded",
                          "value": "Succeeded",
                          "description": "Resource has been created."
                        },
                        {
                          "name": "Failed",
                          "value": "Failed",
                          "description": "Resource creation failed."
                        },
                        {
                          "name": "Canceled",
                          "value": "Canceled",
                          "description": "Resource creation was canceled."
                        },
                        {
                          "name": "Provisioning",
                          "value": "Provisioning",
                          "description": "Resource is getting provisioned."
                        },
                        {
                          "name": "Updating",
                          "value": "Updating",
                          "description": "Resource is Updating."
                        },
                        {
                          "name": "Deleting",
                          "value": "Deleting",
                          "description": "Resource is Deleting."
                        },
                        {
                          "name": "Accepted",
                          "value": "Accepted",
                          "description": "Resource has been Accepted."
                        }
                      ]
                    }
                  }
                },
                "required": [
                  "mqttBridgeConnectorRef"
                ]
              },
              "extendedLocation": {
                "description": "Extended Location",
                "x-ms-mutability": [
                  "read",
                  "create"
                ],
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the extended location."
                  },
                  "type": {
                    "description": "Type of ExtendedLocation.",
                    "type": "string",
                    "enum": [
                      "CustomLocation"
                    ],
                    "x-ms-enum": {
                      "name": "ExtendedLocationType",
                      "modelAsString": true,
                      "values": [
                        {
                          "name": "CustomLocation",
                          "value": "CustomLocation",
                          "description": "CustomLocation type"
                        }
                      ]
                    }
                  }
                },
                "required": [
                  "name",
                  "type"
                ]
              }
            },
            "required": [
              "extendedLocation"
            ]
          }
        },
        "nextLink": {
          "type": "string",
          "format": "uri",
          "description": "The link to the next page of items"
        }
      },
      "required": [
        "value"
      ]
    },
    "MqttBridgeTopicMapResourceUpdate": {
      "type": "object",
      "description": "The type used for update operations of the MqttBridgeTopicMapResource.",
      "properties": {
        "tags": {
          "type": "object",
          "description": "Resource tags.",
          "additionalProperties": {
            "type": "string"
          }
        },
        "properties": {
          "description": "The resource-specific properties for this resource.",
          "x-ms-client-flatten": true,
          "type": "object",
          "properties": {
            "mqttBridgeConnectorRef": {
              "type": "string",
              "description": "The MqttBridgeConnector CRD it refers to."
            },
            "routes": {
              "type": "array",
              "description": "The route details for MqttBridge connector.",
              "items": {
                "type": "object",
                "description": "MqttBridgeTopicMap route properties",
                "properties": {
                  "direction": {
                    "description": "Direction of the route.",
                    "type": "string",
                    "enum": [
                      "remote-to-local",
                      "local-to-remote"
                    ],
                    "x-ms-enum": {
                      "name": "MqttBridgeRouteDirection",
                      "modelAsString": true,
                      "values": [
                        {
                          "name": "RemoteToLocal",
                          "value": "remote-to-local",
                          "description": "Remote to Local Broker."
                        },
                        {
                          "name": "LocalToRemote",
                          "value": "local-to-remote",
                          "description": "Local to Remote Broker."
                        }
                      ]
                    }
                  },
                  "name": {
                    "type": "string",
                    "description": "Name of the route."
                  },
                  "qos": {
                    "type": "integer",
                    "format": "int32",
                    "description": "Qos for MQTT connection.",
                    "default": 1,
                    "minimum": 0,
                    "maximum": 2
                  },
                  "sharedSubscription": {
                    "description": "Shared subscription topic details.",
                    "type": "object",
                    "properties": {
                      "groupMinimumShareNumber": {
                        "type": "integer",
                        "format": "int32",
                        "description": "The group shared subscription minimum share number.",
                        "minimum": 0,
                        "maximum": 255
                      },
                      "groupName": {
                        "type": "string",
                        "description": "The group name for Shared subscription."
                      }
                    },
                    "required": [
                      "groupMinimumShareNumber",
                      "groupName"
                    ]
                  },
                  "source": {
                    "type": "string",
                    "description": "Source topic of the route."
                  },
                  "target": {
                    "type": "string",
                    "description": "Target topic of the route. Ignore if same as source"
                  }
                },
                "required": [
                  "direction",
                  "name",
                  "source"
                ]
              },
              "x-ms-identifiers": []
            }
          }
        }
      }
    },
    "MqttBridgeTopicMapResourceUpdateProperties": {
      "type": "object",
      "description": "The updatable properties of the MqttBridgeTopicMapResource.",
      "properties": {
        "mqttBridgeConnectorRef": {
          "type": "string",
          "description": "The MqttBridgeConnector CRD it refers to."
        },
        "routes": {
          "type": "array",
          "description": "The route details for MqttBridge connector.",
          "items": {
            "type": "object",
            "description": "MqttBridgeTopicMap route properties",
            "properties": {
              "direction": {
                "description": "Direction of the route.",
                "type": "string",
                "enum": [
                  "remote-to-local",
                  "local-to-remote"
                ],
                "x-ms-enum": {
                  "name": "MqttBridgeRouteDirection",
                  "modelAsString": true,
                  "values": [
                    {
                      "name": "RemoteToLocal",
                      "value": "remote-to-local",
                      "description": "Remote to Local Broker."
                    },
                    {
                      "name": "LocalToRemote",
                      "value": "local-to-remote",
                      "description": "Local to Remote Broker."
                    }
                  ]
                }
              },
              "name": {
                "type": "string",
                "description": "Name of the route."
              },
              "qos": {
                "type": "integer",
                "format": "int32",
                "description": "Qos for MQTT connection.",
                "default": 1,
                "minimum": 0,
                "maximum": 2
              },
              "sharedSubscription": {
                "description": "Shared subscription topic details.",
                "type": "object",
                "properties": {
                  "groupMinimumShareNumber": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The group shared subscription minimum share number.",
                    "minimum": 0,
                    "maximum": 255
                  },
                  "groupName": {
                    "type": "string",
                    "description": "The group name for Shared subscription."
                  }
                },
                "required": [
                  "groupMinimumShareNumber",
                  "groupName"
                ]
              },
              "source": {
                "type": "string",
                "description": "Source topic of the route."
              },
              "target": {
                "type": "string",
                "description": "Target topic of the route. Ignore if same as source"
              }
            },
            "required": [
              "direction",
              "name",
              "source"
            ]
          },
          "x-ms-identifiers": []
        }
      }
    },
    "MqttProtocol": {
      "type": "string",
      "description": "Mqtt Protocol types",
      "enum": [
        "v3",
        "v5"
      ],
      "x-ms-enum": {
        "name": "MqttProtocol",
        "modelAsString": true,
        "values": [
          {
            "name": "v3",
            "value": "v3",
            "description": "Mqttv3"
          },
          {
            "name": "v5",
            "value": "v5",
            "description": "Mqttv5"
          }
        ]
      }
    },
    "MqttToKafkaRoutes": {
      "type": "object",
      "description": "Mqtt to Kafka route properties",
      "properties": {
        "kafkaAcks": {
          "description": "The kafka acks to use.",
          "type": "string",
          "enum": [
            "zero",
            "one",
            "all"
          ],
          "x-ms-enum": {
            "name": "KafkaAcks",
            "modelAsString": true,
            "values": [
              {
                "name": "zero",
                "value": "zero",
                "description": "Kafka acks zero."
              },
              {
                "name": "one",
                "value": "one",
                "description": "Kafka acks one."
              },
              {
                "name": "all",
                "value": "all",
                "description": "Kafka acks all."
              }
            ]
          }
        },
        "kafkaTopic": {
          "type": "string",
          "description": "The kafka topic to publish to."
        },
        "mqttTopic": {
          "type": "string",
          "description": "The mqtt topic to pull from."
        },
        "name": {
          "type": "string",
          "description": "The name of the route."
        },
        "qos": {
          "type": "integer",
          "format": "int32",
          "description": "The qos to use for mqtt.",
          "default": 1,
          "minimum": 0,
          "maximum": 1
        },
        "sharedSubscription": {
          "description": "The properties for shared subscription.",
          "type": "object",
          "properties": {
            "groupMinimumShareNumber": {
              "type": "integer",
              "format": "int32",
              "description": "The minimum number to use in a group for subscription.",
              "minimum": 0,
              "maximum": 255
            },
            "groupName": {
              "type": "string",
              "description": "The name of the shared subscription."
            }
          },
          "required": [
            "groupMinimumShareNumber",
            "groupName"
          ]
        }
      },
      "required": [
        "kafkaAcks",
        "kafkaTopic",
        "mqttTopic",
        "name"
      ]
    },
    "NodeTolerations": {
      "type": "object",
      "description": "Defines the Node Tolerations details",
      "properties": {
        "effect": {
          "type": "string",
          "description": "Toleration effect."
        },
        "key": {
          "type": "string",
          "description": "Toleration key."
        },
        "operator": {
          "type": "string",
          "description": "Toleration operator like 'Exists', 'Equal' etc."
        },
        "value": {
          "type": "string",
          "description": "Toleration Value."
        }
      },
      "required": [
        "effect",
        "key",
        "operator",
        "value"
      ]
    },
    "NodeTolerationsUpdate": {
      "type": "object",
      "description": "Defines the Node Tolerations details",
      "properties": {
        "effect": {
          "type": "string",
          "description": "Toleration effect."
        },
        "key": {
          "type": "string",
          "description": "Toleration key."
        },
        "operator": {
          "type": "string",
          "description": "Toleration operator like 'Exists', 'Equal' etc."
        },
        "value": {
          "type": "string",
          "description": "Toleration Value."
        }
      }
    },
    "PrincipalDefinition": {
      "type": "object",
      "description": "PrincipalDefinition properties of Basic Rule",
      "properties": {
        "attributes": {
          "type": "array",
          "description": "A list of key-value pairs that match the attributes of the clients. The attributes are case-sensitive and must match the attributes provided by the clients during authentication.",
          "default": [],
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "x-ms-identifiers": []
        },
        "clientids": {
          "type": "array",
          "description": "A list of client IDs that match the clients. The client IDs are case-sensitive and must match the client IDs provided by the clients during connection.",
          "items": {
            "type": "string"
          }
        },
        "usernames": {
          "type": "array",
          "description": "A list of usernames that match the clients. The usernames are case-sensitive and must match the usernames provided by the clients during authentication.",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ProvisioningState": {
      "type": "string",
      "description": "The enum defining status of resource.",
      "enum": [
        "Succeeded",
        "Failed",
        "Canceled",
        "Provisioning",
        "Updating",
        "Deleting",
        "Accepted"
      ],
      "x-ms-enum": {
        "name": "ProvisioningState",
        "modelAsString": true,
        "values": [
          {
            "name": "Succeeded",
            "value": "Succeeded",
            "description": "Resource has been created."
          },
          {
            "name": "Failed",
            "value": "Failed",
            "description": "Resource creation failed."
          },
          {
            "name": "Canceled",
            "value": "Canceled",
            "description": "Resource creation was canceled."
          },
          {
            "name": "Provisioning",
            "value": "Provisioning",
            "description": "Resource is getting provisioned."
          },
          {
            "name": "Updating",
            "value": "Updating",
            "description": "Resource is Updating."
          },
          {
            "name": "Deleting",
            "value": "Deleting",
            "description": "Resource is Deleting."
          },
          {
            "name": "Accepted",
            "value": "Accepted",
            "description": "Resource has been Accepted."
          }
        ]
      }
    },
    "ResourceInfoDefinition": {
      "type": "object",
      "description": "ResourceInfoDefinition properties of Basic Rule. This defines the objects that represent the actions or topics, such as - method.Connect, method.Publish, etc.",
      "properties": {
        "method": {
          "description": "The type of action that the clients can perform on the broker: Connect, Publish or Subscribe.",
          "type": "string",
          "enum": [
            "Connect",
            "Publish",
            "Subscribe"
          ],
          "x-ms-enum": {
            "name": "ResourceInfoDefinitionMethods",
            "modelAsString": true,
            "values": [
              {
                "name": "Connect",
                "value": "Connect",
                "description": "Allowed Connecting to Broker"
              },
              {
                "name": "Publish",
                "value": "Publish",
                "description": "Allowed Publishing to Broker"
              },
              {
                "name": "Subscribe",
                "value": "Subscribe",
                "description": "Allowed Subscribing to Broker"
              }
            ]
          }
        },
        "topics": {
          "type": "array",
          "description": "A list of topics or topic patterns that match the topics that the clients can publish or subscribe to. This subfield is required if the method is Publish or Subscribe.",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "method"
      ]
    },
    "ResourceInfoDefinitionMethods": {
      "type": "string",
      "description": "ResourceInfoDefinition methods allowed",
      "enum": [
        "Connect",
        "Publish",
        "Subscribe"
      ],
      "x-ms-enum": {
        "name": "ResourceInfoDefinitionMethods",
        "modelAsString": true,
        "values": [
          {
            "name": "Connect",
            "value": "Connect",
            "description": "Allowed Connecting to Broker"
          },
          {
            "name": "Publish",
            "value": "Publish",
            "description": "Allowed Publishing to Broker"
          },
          {
            "name": "Subscribe",
            "value": "Subscribe",
            "description": "Allowed Subscribing to Broker"
          }
        ]
      }
    },
    "RunMode": {
      "type": "string",
      "description": "The enum defining run mode of the broker deployment",
      "enum": [
        "auto",
        "distributed"
      ],
      "x-ms-enum": {
        "name": "RunMode",
        "modelAsString": true,
        "values": [
          {
            "name": "auto",
            "value": "auto",
            "description": "Automatically provision Frontend and Backend pods."
          },
          {
            "name": "distributed",
            "value": "distributed",
            "description": "Use Cardinality to set Frontend and Backend pods."
          }
        ]
      }
    },
    "SanForCert": {
      "type": "object",
      "description": "SANs for certificate.",
      "properties": {
        "dns": {
          "type": "array",
          "description": "DNS SANs.",
          "default": [],
          "items": {
            "type": "string"
          }
        },
        "ip": {
          "type": "array",
          "description": "IP address SANs.",
          "default": [],
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "dns",
        "ip"
      ]
    },
    "SanForCertUpdate": {
      "type": "object",
      "description": "SANs for certificate.",
      "properties": {
        "dns": {
          "type": "array",
          "description": "DNS SANs.",
          "default": [],
          "items": {
            "type": "string"
          }
        },
        "ip": {
          "type": "array",
          "description": "IP address SANs.",
          "default": [],
          "items": {
            "type": "string"
          }
        }
      }
    },
    "SaslRemoteBrokerBasicAuthentication": {
      "type": "object",
      "description": "Kafka RemoteBrokerConnection Sasl Authentication properties.",
      "properties": {
        "saslType": {
          "description": "Sasl Mechanism for remote broker authentication.",
          "type": "string",
          "enum": [
            "plain",
            "scramSha256",
            "scramSha512"
          ],
          "x-ms-enum": {
            "name": "KafkaSaslType",
            "modelAsString": true,
            "values": [
              {
                "name": "plain",
                "value": "plain",
                "description": "Sasl Plain authentication."
              },
              {
                "name": "scramSha256",
                "value": "scramSha256",
                "description": "Sasl ScramSha256 authentication."
              },
              {
                "name": "scramSha512",
                "value": "scramSha512",
                "description": "Sasl ScramSha512 authentication."
              }
            ]
          }
        },
        "token": {
          "description": "Sasl token for remote broker authentication.",
          "type": "object",
          "properties": {
            "keyVault": {
              "description": "Keyvault token keyvault secret properties.",
              "type": "object",
              "properties": {
                "username": {
                  "type": "string",
                  "description": "Username to connect with."
                },
                "vault": {
                  "description": "KeyVault properties.",
                  "type": "object",
                  "properties": {
                    "credentials": {
                      "description": "KeyVault credentials.",
                      "type": "object",
                      "properties": {
                        "servicePrincipalLocalSecretName": {
                          "type": "string",
                          "description": "KeyVault service principal local secret name."
                        }
                      },
                      "required": [
                        "servicePrincipalLocalSecretName"
                      ]
                    },
                    "directoryId": {
                      "type": "string",
                      "description": "KeyVault directoryId."
                    },
                    "name": {
                      "type": "string",
                      "description": "KeyVault name."
                    }
                  },
                  "required": [
                    "credentials",
                    "directoryId",
                    "name"
                  ]
                },
                "vaultSecret": {
                  "description": "KeyVault secret details.",
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "KeyVault secret name."
                    },
                    "version": {
                      "type": "string",
                      "description": "KeyVault secret version."
                    }
                  },
                  "required": [
                    "name"
                  ]
                }
              },
              "required": [
                "vault",
                "vaultSecret"
              ]
            },
            "secretName": {
              "type": "string",
              "description": "Secret where cert details are stored."
            }
          }
        }
      },
      "required": [
        "saslType",
        "token"
      ]
    },
    "SaslRemoteBrokerBasicAuthenticationToken": {
      "type": "object",
      "description": "Kafka RemoteBrokerConnection Sasl Authentication token properties. NOTE - Enum only one method is allowed to be passed.",
      "properties": {
        "keyVault": {
          "description": "Keyvault token keyvault secret properties.",
          "type": "object",
          "properties": {
            "username": {
              "type": "string",
              "description": "Username to connect with."
            },
            "vault": {
              "description": "KeyVault properties.",
              "type": "object",
              "properties": {
                "credentials": {
                  "description": "KeyVault credentials.",
                  "type": "object",
                  "properties": {
                    "servicePrincipalLocalSecretName": {
                      "type": "string",
                      "description": "KeyVault service principal local secret name."
                    }
                  },
                  "required": [
                    "servicePrincipalLocalSecretName"
                  ]
                },
                "directoryId": {
                  "type": "string",
                  "description": "KeyVault directoryId."
                },
                "name": {
                  "type": "string",
                  "description": "KeyVault name."
                }
              },
              "required": [
                "credentials",
                "directoryId",
                "name"
              ]
            },
            "vaultSecret": {
              "description": "KeyVault secret details.",
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "KeyVault secret name."
                },
                "version": {
                  "type": "string",
                  "description": "KeyVault secret version."
                }
              },
              "required": [
                "name"
              ]
            }
          },
          "required": [
            "vault",
            "vaultSecret"
          ]
        },
        "secretName": {
          "type": "string",
          "description": "Secret where cert details are stored."
        }
      }
    },
    "SaslRemoteBrokerBasicAuthenticationTokenUpdate": {
      "type": "object",
      "description": "Kafka RemoteBrokerConnection Sasl Authentication token properties. NOTE - Enum only one method is allowed to be passed.",
      "properties": {
        "keyVault": {
          "description": "Keyvault token keyvault secret properties.",
          "type": "object",
          "properties": {
            "username": {
              "type": "string",
              "description": "Username to connect with."
            },
            "vault": {
              "description": "KeyVault properties.",
              "type": "object",
              "properties": {
                "credentials": {
                  "description": "KeyVault credentials.",
                  "type": "object",
                  "properties": {
                    "servicePrincipalLocalSecretName": {
                      "type": "string",
                      "description": "KeyVault service principal local secret name."
                    }
                  }
                },
                "directoryId": {
                  "type": "string",
                  "description": "KeyVault directoryId."
                },
                "name": {
                  "type": "string",
                  "description": "KeyVault name."
                }
              }
            },
            "vaultSecret": {
              "description": "KeyVault secret details.",
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "KeyVault secret name."
                },
                "version": {
                  "type": "string",
                  "description": "KeyVault secret version."
                }
              }
            }
          }
        },
        "secretName": {
          "type": "string",
          "description": "Secret where cert details are stored."
        }
      }
    },
    "SaslRemoteBrokerBasicAuthenticationUpdate": {
      "type": "object",
      "description": "Kafka RemoteBrokerConnection Sasl Authentication properties.",
      "properties": {
        "saslType": {
          "description": "Sasl Mechanism for remote broker authentication.",
          "type": "string",
          "enum": [
            "plain",
            "scramSha256",
            "scramSha512"
          ],
          "x-ms-enum": {
            "name": "KafkaSaslType",
            "modelAsString": true,
            "values": [
              {
                "name": "plain",
                "value": "plain",
                "description": "Sasl Plain authentication."
              },
              {
                "name": "scramSha256",
                "value": "scramSha256",
                "description": "Sasl ScramSha256 authentication."
              },
              {
                "name": "scramSha512",
                "value": "scramSha512",
                "description": "Sasl ScramSha512 authentication."
              }
            ]
          }
        },
        "token": {
          "description": "Sasl token for remote broker authentication.",
          "type": "object",
          "properties": {
            "keyVault": {
              "description": "Keyvault token keyvault secret properties.",
              "type": "object",
              "properties": {
                "username": {
                  "type": "string",
                  "description": "Username to connect with."
                },
                "vault": {
                  "description": "KeyVault properties.",
                  "type": "object",
                  "properties": {
                    "credentials": {
                      "description": "KeyVault credentials.",
                      "type": "object",
                      "properties": {
                        "servicePrincipalLocalSecretName": {
                          "type": "string",
                          "description": "KeyVault service principal local secret name."
                        }
                      }
                    },
                    "directoryId": {
                      "type": "string",
                      "description": "KeyVault directoryId."
                    },
                    "name": {
                      "type": "string",
                      "description": "KeyVault name."
                    }
                  }
                },
                "vaultSecret": {
                  "description": "KeyVault secret details.",
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "KeyVault secret name."
                    },
                    "version": {
                      "type": "string",
                      "description": "KeyVault secret version."
                    }
                  }
                }
              }
            },
            "secretName": {
              "type": "string",
              "description": "Secret where cert details are stored."
            }
          }
        }
      }
    },
    "ServiceType": {
      "type": "string",
      "description": "Kubernetes Service Types supported by Listener",
      "enum": [
        "clusterIp",
        "loadBalancer",
        "nodePort"
      ],
      "x-ms-enum": {
        "name": "ServiceType",
        "modelAsString": true,
        "values": [
          {
            "name": "clusterIp",
            "value": "clusterIp",
            "description": "Cluster IP Service."
          },
          {
            "name": "loadBalancer",
            "value": "loadBalancer",
            "description": "Load Balancer Service."
          },
          {
            "name": "nodePort",
            "value": "nodePort",
            "description": "Node Port Service."
          }
        ]
      }
    },
    "TemporaryResourceLimitsConfig": {
      "type": "object",
      "description": "Internal knobs of Resource Limits for FE and BE",
      "properties": {
        "maxInflightMessages": {
          "type": "integer",
          "format": "int32",
          "description": "Maximum number of messages a client can have inflight.",
          "minimum": 0,
          "maximum": 65535
        },
        "maxInflightPatches": {
          "type": "integer",
          "format": "int32",
          "description": "Maximum number of patch inflight per node.",
          "minimum": 0,
          "maximum": 65535
        },
        "maxInflightPatchesPerClient": {
          "type": "integer",
          "format": "int32",
          "description": "Maximum number of patch a client can have in flight.",
          "minimum": 0,
          "maximum": 65535
        },
        "maxMessageExpirySecs": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum message expiry interval, in seconds.",
          "minimum": 0,
          "maximum": 4294967295
        },
        "maxQueuedMessages": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum receive for external clients.",
          "minimum": 0,
          "maximum": 9223372036854000000
        },
        "maxQueuedQos0Messages": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum receive QoS0 for external clients.",
          "minimum": 0,
          "maximum": 9223372036854000000
        },
        "maxSessionExpirySecs": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum session expiry interval, in seconds.",
          "minimum": 0,
          "maximum": 4294967295
        }
      },
      "required": [
        "maxInflightMessages",
        "maxInflightPatches",
        "maxInflightPatchesPerClient",
        "maxQueuedMessages",
        "maxQueuedQos0Messages",
        "maxSessionExpirySecs"
      ]
    },
    "TemporaryResourceLimitsConfigUpdate": {
      "type": "object",
      "description": "Internal knobs of Resource Limits for FE and BE",
      "properties": {
        "maxInflightMessages": {
          "type": "integer",
          "format": "int32",
          "description": "Maximum number of messages a client can have inflight.",
          "minimum": 0,
          "maximum": 65535
        },
        "maxInflightPatches": {
          "type": "integer",
          "format": "int32",
          "description": "Maximum number of patch inflight per node.",
          "minimum": 0,
          "maximum": 65535
        },
        "maxInflightPatchesPerClient": {
          "type": "integer",
          "format": "int32",
          "description": "Maximum number of patch a client can have in flight.",
          "minimum": 0,
          "maximum": 65535
        },
        "maxMessageExpirySecs": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum message expiry interval, in seconds.",
          "minimum": 0,
          "maximum": 4294967295
        },
        "maxQueuedMessages": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum receive for external clients.",
          "minimum": 0,
          "maximum": 9223372036854000000
        },
        "maxQueuedQos0Messages": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum receive QoS0 for external clients.",
          "minimum": 0,
          "maximum": 9223372036854000000
        },
        "maxSessionExpirySecs": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum session expiry interval, in seconds.",
          "minimum": 0,
          "maximum": 4294967295
        }
      }
    },
    "TlsCertMethod": {
      "type": "object",
      "description": "Collection of different TLS types, NOTE- Enum at a time only one of them needs to be supported",
      "properties": {
        "automatic": {
          "description": "Option 1 - Automatic TLS server certificate management with cert-manager.",
          "type": "object",
          "properties": {
            "duration": {
              "type": "string",
              "description": "Lifetime of automatically-managed certificate.",
              "default": "720h"
            },
            "issuerRef": {
              "description": "cert-manager issuerRef.",
              "type": "object",
              "properties": {
                "group": {
                  "type": "string",
                  "description": "group of issuer.",
                  "default": "cert-manager.io"
                },
                "kind": {
                  "type": "string",
                  "description": "kind of issuer (Issuer or ClusterIssuer)."
                },
                "name": {
                  "type": "string",
                  "description": "name of issuer."
                }
              },
              "required": [
                "group",
                "kind",
                "name"
              ]
            },
            "privateKey": {
              "description": "Cert Manager private key.",
              "type": "object",
              "properties": {
                "algorithm": {
                  "type": "string",
                  "description": "algorithm for private key.",
                  "default": "ECDSA"
                },
                "rotationPolicy": {
                  "type": "string",
                  "description": "cert-manager rotationPolicy.",
                  "default": "Always"
                },
                "size": {
                  "type": "integer",
                  "format": "int32",
                  "description": "size of private key.",
                  "default": 256,
                  "minimum": 0,
                  "maximum": 65535
                }
              },
              "required": [
                "algorithm",
                "rotationPolicy",
                "size"
              ]
            },
            "renewBefore": {
              "type": "string",
              "description": "When to begin renewing automatically-managed certificate.",
              "default": "240h"
            },
            "san": {
              "description": "Additional SANs to include in the certificate.",
              "type": "object",
              "properties": {
                "dns": {
                  "type": "array",
                  "description": "DNS SANs.",
                  "default": [],
                  "items": {
                    "type": "string"
                  }
                },
                "ip": {
                  "type": "array",
                  "description": "IP address SANs.",
                  "default": [],
                  "items": {
                    "type": "string"
                  }
                }
              },
              "required": [
                "dns",
                "ip"
              ]
            },
            "secretName": {
              "type": "string",
              "description": "Secret for storing server certificate. Any existing data will be overwritten."
            },
            "secretNamespace": {
              "type": "string",
              "description": "Certificate K8S namespace. Omit to use default namespace."
            }
          },
          "required": [
            "issuerRef"
          ]
        },
        "manual": {
          "description": "Option 2 - Manual TLS server certificate management through a defined secret.",
          "type": "object",
          "properties": {
            "secretName": {
              "type": "string",
              "description": "secret containing TLS cert."
            },
            "secretNamespace": {
              "type": "string",
              "description": "namespace of secret; omit to use default namespace."
            }
          },
          "required": [
            "secretName"
          ]
        },
        "keyVault": {
          "description": "Option 3 - TLS server certificate retrieved from Key Vault..",
          "type": "object",
          "properties": {
            "vault": {
              "description": "KeyVault properties.",
              "type": "object",
              "properties": {
                "credentials": {
                  "description": "KeyVault credentials.",
                  "type": "object",
                  "properties": {
                    "servicePrincipalLocalSecretName": {
                      "type": "string",
                      "description": "KeyVault service principal local secret name."
                    }
                  },
                  "required": [
                    "servicePrincipalLocalSecretName"
                  ]
                },
                "directoryId": {
                  "type": "string",
                  "description": "KeyVault directoryId."
                },
                "name": {
                  "type": "string",
                  "description": "KeyVault name."
                }
              },
              "required": [
                "credentials",
                "directoryId",
                "name"
              ]
            },
            "vaultCaChainSecret": {
              "description": "KeyVault CA chain secret details.",
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "KeyVault secret name."
                },
                "version": {
                  "type": "string",
                  "description": "KeyVault secret version."
                }
              },
              "required": [
                "name"
              ]
            },
            "vaultCert": {
              "description": "KeyVault Cert secret details.",
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "KeyVault secret name."
                },
                "version": {
                  "type": "string",
                  "description": "KeyVault secret version."
                }
              },
              "required": [
                "name"
              ]
            }
          },
          "required": [
            "vault",
            "vaultCert"
          ]
        }
      }
    },
    "TlsCertMethodUpdate": {
      "type": "object",
      "description": "Collection of different TLS types, NOTE- Enum at a time only one of them needs to be supported",
      "properties": {
        "automatic": {
          "description": "Option 1 - Automatic TLS server certificate management with cert-manager.",
          "type": "object",
          "properties": {
            "duration": {
              "type": "string",
              "description": "Lifetime of automatically-managed certificate.",
              "default": "720h"
            },
            "issuerRef": {
              "description": "cert-manager issuerRef.",
              "type": "object",
              "properties": {
                "group": {
                  "type": "string",
                  "description": "group of issuer.",
                  "default": "cert-manager.io"
                },
                "kind": {
                  "type": "string",
                  "description": "kind of issuer (Issuer or ClusterIssuer)."
                },
                "name": {
                  "type": "string",
                  "description": "name of issuer."
                }
              }
            },
            "privateKey": {
              "description": "Cert Manager private key.",
              "type": "object",
              "properties": {
                "algorithm": {
                  "type": "string",
                  "description": "algorithm for private key.",
                  "default": "ECDSA"
                },
                "rotationPolicy": {
                  "type": "string",
                  "description": "cert-manager rotationPolicy.",
                  "default": "Always"
                },
                "size": {
                  "type": "integer",
                  "format": "int32",
                  "description": "size of private key.",
                  "default": 256,
                  "minimum": 0,
                  "maximum": 65535
                }
              }
            },
            "renewBefore": {
              "type": "string",
              "description": "When to begin renewing automatically-managed certificate.",
              "default": "240h"
            },
            "san": {
              "description": "Additional SANs to include in the certificate.",
              "type": "object",
              "properties": {
                "dns": {
                  "type": "array",
                  "description": "DNS SANs.",
                  "default": [],
                  "items": {
                    "type": "string"
                  }
                },
                "ip": {
                  "type": "array",
                  "description": "IP address SANs.",
                  "default": [],
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "secretName": {
              "type": "string",
              "description": "Secret for storing server certificate. Any existing data will be overwritten."
            },
            "secretNamespace": {
              "type": "string",
              "description": "Certificate K8S namespace. Omit to use default namespace."
            }
          }
        },
        "manual": {
          "description": "Option 2 - Manual TLS server certificate management through a defined secret.",
          "type": "object",
          "properties": {
            "secretName": {
              "type": "string",
              "description": "secret containing TLS cert."
            },
            "secretNamespace": {
              "type": "string",
              "description": "namespace of secret; omit to use default namespace."
            }
          }
        },
        "keyVault": {
          "description": "Option 3 - TLS server certificate retrieved from Key Vault..",
          "type": "object",
          "properties": {
            "vault": {
              "description": "KeyVault properties.",
              "type": "object",
              "properties": {
                "credentials": {
                  "description": "KeyVault credentials.",
                  "type": "object",
                  "properties": {
                    "servicePrincipalLocalSecretName": {
                      "type": "string",
                      "description": "KeyVault service principal local secret name."
                    }
                  }
                },
                "directoryId": {
                  "type": "string",
                  "description": "KeyVault directoryId."
                },
                "name": {
                  "type": "string",
                  "description": "KeyVault name."
                }
              }
            },
            "vaultCaChainSecret": {
              "description": "KeyVault CA chain secret details.",
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "KeyVault secret name."
                },
                "version": {
                  "type": "string",
                  "description": "KeyVault secret version."
                }
              }
            },
            "vaultCert": {
              "description": "KeyVault Cert secret details.",
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "KeyVault secret name."
                },
                "version": {
                  "type": "string",
                  "description": "KeyVault secret version."
                }
              }
            }
          }
        }
      }
    },
    "VolumeClaimDataSource": {
      "type": "object",
      "description": "VolumeClaimDataSource properties",
      "properties": {
        "apiGroup": {
          "type": "string",
          "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required."
        },
        "kind": {
          "type": "string",
          "description": "Kind is the type of resource being referenced"
        },
        "name": {
          "type": "string",
          "description": "Name is the name of resource being referenced"
        }
      },
      "required": [
        "kind",
        "name"
      ]
    },
    "VolumeClaimDataSourceRef": {
      "type": "object",
      "description": "VolumeClaimDataSourceRef properties",
      "properties": {
        "apiGroup": {
          "type": "string",
          "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required."
        },
        "kind": {
          "type": "string",
          "description": "Kind is the type of resource being referenced"
        },
        "name": {
          "type": "string",
          "description": "Name is the name of resource being referenced"
        }
      },
      "required": [
        "kind",
        "name"
      ]
    },
    "VolumeClaimDataSourceRefUpdate": {
      "type": "object",
      "description": "VolumeClaimDataSourceRef properties",
      "properties": {
        "apiGroup": {
          "type": "string",
          "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required."
        },
        "kind": {
          "type": "string",
          "description": "Kind is the type of resource being referenced"
        },
        "name": {
          "type": "string",
          "description": "Name is the name of resource being referenced"
        }
      }
    },
    "VolumeClaimDataSourceUpdate": {
      "type": "object",
      "description": "VolumeClaimDataSource properties",
      "properties": {
        "apiGroup": {
          "type": "string",
          "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required."
        },
        "kind": {
          "type": "string",
          "description": "Kind is the type of resource being referenced"
        },
        "name": {
          "type": "string",
          "description": "Name is the name of resource being referenced"
        }
      }
    },
    "VolumeClaimResourceRequirements": {
      "type": "object",
      "description": "VolumeClaimResourceRequirements properties",
      "properties": {
        "limits": {
          "type": "object",
          "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "additionalProperties": {
            "type": "string"
          }
        },
        "requests": {
          "type": "object",
          "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "VolumeClaimSpec": {
      "type": "object",
      "description": "VolumeClaimSpec properties",
      "properties": {
        "accessModes": {
          "type": "array",
          "description": "AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
          "items": {
            "type": "string"
          }
        },
        "dataSource": {
          "description": "This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.",
          "type": "object",
          "properties": {
            "apiGroup": {
              "type": "string",
              "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required."
            },
            "kind": {
              "type": "string",
              "description": "Kind is the type of resource being referenced"
            },
            "name": {
              "type": "string",
              "description": "Name is the name of resource being referenced"
            }
          },
          "required": [
            "kind",
            "name"
          ]
        },
        "dataSourceRef": {
          "description": "Specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef: * While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified. (Alpha) Using this field requires the AnyVolumeDataSource feature gate to be enabled.",
          "type": "object",
          "properties": {
            "apiGroup": {
              "type": "string",
              "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required."
            },
            "kind": {
              "type": "string",
              "description": "Kind is the type of resource being referenced"
            },
            "name": {
              "type": "string",
              "description": "Name is the name of resource being referenced"
            }
          },
          "required": [
            "kind",
            "name"
          ]
        },
        "resources": {
          "description": "Resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources",
          "type": "object",
          "properties": {
            "limits": {
              "type": "object",
              "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
              "additionalProperties": {
                "type": "string"
              }
            },
            "requests": {
              "type": "object",
              "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        },
        "selector": {
          "description": "A label query over volumes to consider for binding.",
          "type": "object",
          "properties": {
            "matchExpressions": {
              "type": "array",
              "description": "MatchExpressions is a list of label selector requirements. The requirements are ANDed.",
              "items": {
                "type": "object",
                "description": "VolumeClaimSpecSelectorMatchExpressions properties",
                "properties": {
                  "key": {
                    "type": "string",
                    "description": "key is the label key that the selector applies to."
                  },
                  "operator": {
                    "type": "string",
                    "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist."
                  },
                  "values": {
                    "type": "array",
                    "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "key",
                  "operator"
                ]
              },
              "x-ms-identifiers": []
            },
            "matchLabels": {
              "type": "object",
              "description": "MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        },
        "storageClassName": {
          "type": "string",
          "description": "Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1"
        },
        "volumeMode": {
          "type": "string",
          "description": "volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec. This is a beta feature."
        },
        "volumeName": {
          "type": "string",
          "description": "VolumeName is the binding reference to the PersistentVolume backing this claim."
        }
      }
    },
    "VolumeClaimSpecSelector": {
      "type": "object",
      "description": "VolumeClaimSpecSelector properties",
      "properties": {
        "matchExpressions": {
          "type": "array",
          "description": "MatchExpressions is a list of label selector requirements. The requirements are ANDed.",
          "items": {
            "type": "object",
            "description": "VolumeClaimSpecSelectorMatchExpressions properties",
            "properties": {
              "key": {
                "type": "string",
                "description": "key is the label key that the selector applies to."
              },
              "operator": {
                "type": "string",
                "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist."
              },
              "values": {
                "type": "array",
                "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                "items": {
                  "type": "string"
                }
              }
            },
            "required": [
              "key",
              "operator"
            ]
          },
          "x-ms-identifiers": []
        },
        "matchLabels": {
          "type": "object",
          "description": "MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "VolumeClaimSpecSelectorMatchExpressions": {
      "type": "object",
      "description": "VolumeClaimSpecSelectorMatchExpressions properties",
      "properties": {
        "key": {
          "type": "string",
          "description": "key is the label key that the selector applies to."
        },
        "operator": {
          "type": "string",
          "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist."
        },
        "values": {
          "type": "array",
          "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "key",
        "operator"
      ]
    },
    "VolumeClaimSpecUpdate": {
      "type": "object",
      "description": "VolumeClaimSpec properties",
      "properties": {
        "accessModes": {
          "type": "array",
          "description": "AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
          "items": {
            "type": "string"
          }
        },
        "dataSource": {
          "description": "This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.",
          "type": "object",
          "properties": {
            "apiGroup": {
              "type": "string",
              "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required."
            },
            "kind": {
              "type": "string",
              "description": "Kind is the type of resource being referenced"
            },
            "name": {
              "type": "string",
              "description": "Name is the name of resource being referenced"
            }
          }
        },
        "dataSourceRef": {
          "description": "Specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef: * While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified. (Alpha) Using this field requires the AnyVolumeDataSource feature gate to be enabled.",
          "type": "object",
          "properties": {
            "apiGroup": {
              "type": "string",
              "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required."
            },
            "kind": {
              "type": "string",
              "description": "Kind is the type of resource being referenced"
            },
            "name": {
              "type": "string",
              "description": "Name is the name of resource being referenced"
            }
          }
        },
        "resources": {
          "description": "Resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources",
          "type": "object",
          "properties": {
            "limits": {
              "type": "object",
              "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
              "additionalProperties": {
                "type": "string"
              }
            },
            "requests": {
              "type": "object",
              "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        },
        "selector": {
          "description": "A label query over volumes to consider for binding.",
          "type": "object",
          "properties": {
            "matchExpressions": {
              "type": "array",
              "description": "MatchExpressions is a list of label selector requirements. The requirements are ANDed.",
              "items": {
                "type": "object",
                "description": "VolumeClaimSpecSelectorMatchExpressions properties",
                "properties": {
                  "key": {
                    "type": "string",
                    "description": "key is the label key that the selector applies to."
                  },
                  "operator": {
                    "type": "string",
                    "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist."
                  },
                  "values": {
                    "type": "array",
                    "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "key",
                  "operator"
                ]
              },
              "x-ms-identifiers": []
            },
            "matchLabels": {
              "type": "object",
              "description": "MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        },
        "storageClassName": {
          "type": "string",
          "description": "Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1"
        },
        "volumeMode": {
          "type": "string",
          "description": "volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec. This is a beta feature."
        },
        "volumeName": {
          "type": "string",
          "description": "VolumeName is the binding reference to the PersistentVolume backing this claim."
        }
      }
    }
  },
  "parameters": {}
}