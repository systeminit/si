/* automatically generated by rust-bindgen 0.68.1 */

#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
pub const DM_DIR: &[u8; 7] = b"mapper\0";
pub const DM_CONTROL_NODE: &[u8; 8] = b"control\0";
pub const DM_MAX_TYPE_NAME: u32 = 16;
pub const DM_NAME_LEN: u32 = 128;
pub const DM_UUID_LEN: u32 = 129;
pub const DM_NAME_LIST_FLAG_HAS_UUID: u32 = 1;
pub const DM_NAME_LIST_FLAG_DOESNT_HAVE_UUID: u32 = 2;
pub const DM_IOCTL: u32 = 253;
pub const DM_VERSION_MAJOR: u32 = 4;
pub const DM_VERSION_MINOR: u32 = 48;
pub const DM_VERSION_PATCHLEVEL: u32 = 0;
pub const DM_VERSION_EXTRA: &[u8; 20] = b"-ioctl (2023-03-01)\0";
pub const DM_READONLY_FLAG: u32 = 1;
pub const DM_SUSPEND_FLAG: u32 = 2;
pub const DM_PERSISTENT_DEV_FLAG: u32 = 8;
pub const DM_STATUS_TABLE_FLAG: u32 = 16;
pub const DM_ACTIVE_PRESENT_FLAG: u32 = 32;
pub const DM_INACTIVE_PRESENT_FLAG: u32 = 64;
pub const DM_BUFFER_FULL_FLAG: u32 = 256;
pub const DM_SKIP_BDGET_FLAG: u32 = 512;
pub const DM_SKIP_LOCKFS_FLAG: u32 = 1024;
pub const DM_NOFLUSH_FLAG: u32 = 2048;
pub const DM_QUERY_INACTIVE_TABLE_FLAG: u32 = 4096;
pub const DM_UEVENT_GENERATED_FLAG: u32 = 8192;
pub const DM_UUID_FLAG: u32 = 16384;
pub const DM_SECURE_DATA_FLAG: u32 = 32768;
pub const DM_DATA_OUT_FLAG: u32 = 65536;
pub const DM_DEFERRED_REMOVE: u32 = 131072;
pub const DM_INTERNAL_SUSPEND_FLAG: u32 = 262144;
pub const DM_IMA_MEASUREMENT_FLAG: u32 = 524288;
pub const DM_READ_AHEAD_AUTO: u32 = 4294967295;
pub const DM_READ_AHEAD_NONE: u32 = 0;
pub const DM_READ_AHEAD_MINIMUM_FLAG: u32 = 1;
pub const DM_FORMAT_DEV_BUFSIZE: u32 = 13;
pub const DM_STATS_ALL_PROGRAMS: &[u8; 1] = b"\0";
pub const DM_STATS_WALK_AREA: u64 = 281474976710656;
pub const DM_STATS_WALK_REGION: u64 = 562949953421312;
pub const DM_STATS_WALK_GROUP: u64 = 1125899906842624;
pub const DM_STATS_WALK_ALL: u64 = 1970324836974592;
pub const DM_STATS_WALK_DEFAULT: u64 = 844424930131968;
pub const DM_STATS_WALK_SKIP_SINGLE_AREA: u64 = 2251799813685248;
pub const DM_NOSYNC: u32 = 1;
pub const DM_FORCESYNC: u32 = 2;
pub const DM_BLOCK_ON_ERROR: u32 = 4;
pub const DM_CORELOG: u32 = 8;
pub const DM_CACHE_FEATURE_WRITEBACK: u32 = 1;
pub const DM_CACHE_FEATURE_WRITETHROUGH: u32 = 2;
pub const DM_CACHE_FEATURE_PASSTHROUGH: u32 = 4;
pub const DM_CACHE_FEATURE_METADATA2: u32 = 8;
pub const DM_CACHE_FEATURE_NO_DISCARD_PASSDOWN: u32 = 16;
pub const DM_PERCENT_CHAR: u8 = 37u8;
pub const DM_REPORT_FIELD_MASK: u32 = 4095;
pub const DM_REPORT_FIELD_ALIGN_MASK: u32 = 15;
pub const DM_REPORT_FIELD_ALIGN_LEFT: u32 = 1;
pub const DM_REPORT_FIELD_ALIGN_RIGHT: u32 = 2;
pub const DM_REPORT_FIELD_TYPE_MASK: u32 = 4080;
pub const DM_REPORT_FIELD_TYPE_NONE: u32 = 0;
pub const DM_REPORT_FIELD_TYPE_STRING: u32 = 16;
pub const DM_REPORT_FIELD_TYPE_NUMBER: u32 = 32;
pub const DM_REPORT_FIELD_TYPE_SIZE: u32 = 64;
pub const DM_REPORT_FIELD_TYPE_PERCENT: u32 = 128;
pub const DM_REPORT_FIELD_TYPE_STRING_LIST: u32 = 256;
pub const DM_REPORT_FIELD_TYPE_TIME: u32 = 512;
pub const DM_REPORT_FIELD_RESERVED_VALUE_MASK: u32 = 15;
pub const DM_REPORT_FIELD_RESERVED_VALUE_NAMED: u32 = 1;
pub const DM_REPORT_FIELD_RESERVED_VALUE_RANGE: u32 = 2;
pub const DM_REPORT_FIELD_RESERVED_VALUE_DYNAMIC_VALUE: u32 = 4;
pub const DM_REPORT_FIELD_RESERVED_VALUE_FUZZY_NAMES: u32 = 8;
pub const DM_REPORT_FIELD_TYPE_ID_LEN: u32 = 32;
pub const DM_REPORT_FIELD_TYPE_HEADING_LEN: u32 = 32;
pub const DM_REPORT_OUTPUT_MASK: u32 = 255;
pub const DM_REPORT_OUTPUT_ALIGNED: u32 = 1;
pub const DM_REPORT_OUTPUT_BUFFERED: u32 = 2;
pub const DM_REPORT_OUTPUT_HEADINGS: u32 = 4;
pub const DM_REPORT_OUTPUT_FIELD_NAME_PREFIX: u32 = 8;
pub const DM_REPORT_OUTPUT_FIELD_UNQUOTED: u32 = 16;
pub const DM_REPORT_OUTPUT_COLUMNS_AS_ROWS: u32 = 32;
pub const DM_REPORT_OUTPUT_MULTIPLE_TIMES: u32 = 64;
pub const DM_REPORT_OUTPUT_FIELD_IDS_IN_HEADINGS: u32 = 128;
pub const DM_HISTOGRAM_SUFFIX: u32 = 1;
pub const DM_HISTOGRAM_VALUES: u32 = 2;
pub const DM_HISTOGRAM_PERCENT: u32 = 4;
pub const DM_HISTOGRAM_BOUNDS_LOWER: u32 = 16;
pub const DM_HISTOGRAM_BOUNDS_UPPER: u32 = 32;
pub const DM_HISTOGRAM_BOUNDS_RANGE: u32 = 48;
pub const DM_CONFIG_VALUE_FMT_COMMON_ARRAY: u32 = 1;
pub const DM_CONFIG_VALUE_FMT_COMMON_EXTRA_SPACES: u32 = 2;
pub const DM_CONFIG_VALUE_FMT_INT_OCTAL: u32 = 65536;
pub const DM_CONFIG_VALUE_FMT_STRING_NO_QUOTES: u32 = 65536;
pub const DM_UDEV_DEV_DIR: &[u8; 6] = b"/dev/\0";
pub const DM_COOKIE_MAGIC: u32 = 3405;
pub const DM_UDEV_FLAGS_MASK: u32 = 4294901760;
pub const DM_UDEV_FLAGS_SHIFT: u32 = 16;
pub const DM_UDEV_DISABLE_DM_RULES_FLAG: u32 = 1;
pub const DM_UDEV_DISABLE_SUBSYSTEM_RULES_FLAG: u32 = 2;
pub const DM_UDEV_DISABLE_DISK_RULES_FLAG: u32 = 4;
pub const DM_UDEV_DISABLE_OTHER_RULES_FLAG: u32 = 8;
pub const DM_UDEV_LOW_PRIORITY_FLAG: u32 = 16;
pub const DM_UDEV_DISABLE_LIBRARY_FALLBACK: u32 = 32;
pub const DM_UDEV_PRIMARY_SOURCE_FLAG: u32 = 64;
pub const DM_SUBSYSTEM_UDEV_FLAG0: u32 = 256;
pub const DM_SUBSYSTEM_UDEV_FLAG1: u32 = 512;
pub const DM_SUBSYSTEM_UDEV_FLAG2: u32 = 1024;
pub const DM_SUBSYSTEM_UDEV_FLAG3: u32 = 2048;
pub const DM_SUBSYSTEM_UDEV_FLAG4: u32 = 4096;
pub const DM_SUBSYSTEM_UDEV_FLAG5: u32 = 8192;
pub const DM_SUBSYSTEM_UDEV_FLAG6: u32 = 16384;
pub const DM_SUBSYSTEM_UDEV_FLAG7: u32 = 32768;
pub const DM_COOKIE_AUTO_CREATE: u32 = 0;
pub const DM_DEV_DIR_UMASK: u32 = 18;
pub const DM_CONTROL_NODE_UMASK: u32 = 127;
pub type __u16 = ::std::os::raw::c_ushort;
pub type __s32 = ::std::os::raw::c_int;
pub type __u32 = ::std::os::raw::c_uint;
pub type __u64 = ::std::os::raw::c_ulonglong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dm_ioctl {
    pub version: [__u32; 3usize],
    pub data_size: __u32,
    pub data_start: __u32,
    pub target_count: __u32,
    pub open_count: __s32,
    pub flags: __u32,
    pub event_nr: __u32,
    pub padding: __u32,
    pub dev: __u64,
    pub name: [::std::os::raw::c_char; 128usize],
    pub uuid: [::std::os::raw::c_char; 129usize],
    pub data: [::std::os::raw::c_char; 7usize],
}
impl Default for dm_ioctl {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct dm_target_spec {
    pub sector_start: __u64,
    pub length: __u64,
    pub status: __s32,
    pub next: __u32,
    pub target_type: [::std::os::raw::c_char; 16usize],
}
#[repr(C)]
#[derive(Debug, Default)]
pub struct dm_target_deps {
    pub count: __u32,
    pub padding: __u32,
    pub dev: __IncompleteArrayField<__u64>,
}
#[repr(C)]
#[derive(Debug, Default)]
pub struct dm_name_list {
    pub dev: __u64,
    pub next: __u32,
    pub name: __IncompleteArrayField<::std::os::raw::c_char>,
}
#[repr(C)]
#[derive(Debug, Default)]
pub struct dm_target_versions {
    pub next: __u32,
    pub version: [__u32; 3usize],
    pub name: __IncompleteArrayField<::std::os::raw::c_char>,
}
#[repr(C)]
#[derive(Debug, Default)]
pub struct dm_target_msg {
    pub sector: __u64,
    pub message: __IncompleteArrayField<::std::os::raw::c_char>,
}
pub const DM_VERSION_CMD: _bindgen_ty_1 = 0;
pub const DM_REMOVE_ALL_CMD: _bindgen_ty_1 = 1;
pub const DM_LIST_DEVICES_CMD: _bindgen_ty_1 = 2;
pub const DM_DEV_CREATE_CMD: _bindgen_ty_1 = 3;
pub const DM_DEV_REMOVE_CMD: _bindgen_ty_1 = 4;
pub const DM_DEV_RENAME_CMD: _bindgen_ty_1 = 5;
pub const DM_DEV_SUSPEND_CMD: _bindgen_ty_1 = 6;
pub const DM_DEV_STATUS_CMD: _bindgen_ty_1 = 7;
pub const DM_DEV_WAIT_CMD: _bindgen_ty_1 = 8;
pub const DM_TABLE_LOAD_CMD: _bindgen_ty_1 = 9;
pub const DM_TABLE_CLEAR_CMD: _bindgen_ty_1 = 10;
pub const DM_TABLE_DEPS_CMD: _bindgen_ty_1 = 11;
pub const DM_TABLE_STATUS_CMD: _bindgen_ty_1 = 12;
pub const DM_LIST_VERSIONS_CMD: _bindgen_ty_1 = 13;
pub const DM_TARGET_MSG_CMD: _bindgen_ty_1 = 14;
pub const DM_DEV_SET_GEOMETRY_CMD: _bindgen_ty_1 = 15;
pub const DM_DEV_ARM_POLL_CMD: _bindgen_ty_1 = 16;
pub const DM_GET_TARGET_VERSION_CMD: _bindgen_ty_1 = 17;
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
pub const DM_DEVICE_CREATE: _bindgen_ty_2 = 0;
pub const DM_DEVICE_RELOAD: _bindgen_ty_2 = 1;
pub const DM_DEVICE_REMOVE: _bindgen_ty_2 = 2;
pub const DM_DEVICE_REMOVE_ALL: _bindgen_ty_2 = 3;
pub const DM_DEVICE_SUSPEND: _bindgen_ty_2 = 4;
pub const DM_DEVICE_RESUME: _bindgen_ty_2 = 5;
pub const DM_DEVICE_INFO: _bindgen_ty_2 = 6;
pub const DM_DEVICE_DEPS: _bindgen_ty_2 = 7;
pub const DM_DEVICE_RENAME: _bindgen_ty_2 = 8;
pub const DM_DEVICE_VERSION: _bindgen_ty_2 = 9;
pub const DM_DEVICE_STATUS: _bindgen_ty_2 = 10;
pub const DM_DEVICE_TABLE: _bindgen_ty_2 = 11;
pub const DM_DEVICE_WAITEVENT: _bindgen_ty_2 = 12;
pub const DM_DEVICE_LIST: _bindgen_ty_2 = 13;
pub const DM_DEVICE_CLEAR: _bindgen_ty_2 = 14;
pub const DM_DEVICE_MKNODES: _bindgen_ty_2 = 15;
pub const DM_DEVICE_LIST_VERSIONS: _bindgen_ty_2 = 16;
pub const DM_DEVICE_TARGET_MSG: _bindgen_ty_2 = 17;
pub const DM_DEVICE_SET_GEOMETRY: _bindgen_ty_2 = 18;
pub const DM_DEVICE_ARM_POLL: _bindgen_ty_2 = 19;
pub const DM_DEVICE_GET_TARGET_VERSION: _bindgen_ty_2 = 20;
pub type _bindgen_ty_2 = ::std::os::raw::c_uint;
