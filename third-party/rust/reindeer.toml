# vendored-date: 2023-05-03
# project: https://github.com/facebook/buck2
# commit-hash: 270d069eb61c8645c06e30c384dddc2f71908a77
# commit-date: 2023-05-03T12:42:04-0700
# source: https://github.com/facebook/buck2/blob/270d069eb61c8645c06e30c384dddc2f71908a77/shim/third-party/reindeer.toml

# Configuration for Reindeer to generate Buck targets from Cargo.toml
#
# Overview of available options:
# https://github.com/facebookincubator/reindeer/blob/main/example/third-party/reindeer.toml

# Build dependencies through http_archive downloaded from crates.io, rather than
# vendoring sources into this repo.
vendor = false

# Parse Rust code to work out the precise set of source files for each crate.
# This uses `srcfiles` which only works on Rust 2018 and without some macro
# constructions. It works in almost all cases, but you may need to have a
# fixups.toml adding extra srcs if it fails.
precise_srcs = true

# Include an explicit public top-level target which depends on all other library
# targets, so that you can to a test/check build.
include_top_level = true

# Configuration for cargo (used both for vendoring and resolving dependencies)
[cargo]
# Support Cargo's unstable "artifact dependencies" functionality, RFC 3028.
bindeps = true

[buck]
# Name of the generated file
file_name = "BUCK" # default

# Rules used for various kinds of targets.
rust_library = "cargo.rust_library"
rust_binary = "cargo.rust_binary"
prebuilt_cxx_library = "third_party_rust_prebuilt_cxx_library"

generated_file_header = """
##
## \u0040generated by `reindeer buckify`
## Do not edit by hand.
##
"""

buckfile_imports = """
load("@prelude-si//:cargo_buildscript.bzl", "buildscript_run")
load("@prelude//rust:cargo_package.bzl", "cargo")
load(
    "//third-party/macros:rust_third_party.bzl",
    "third_party_rust_prebuilt_cxx_library",
)
"""
