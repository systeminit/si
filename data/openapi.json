{
  "openapi": "3.1.0",
  "info": {
    "title": "System Initiative API",
    "description": "The API Server for interacting with a System Initiative workspace",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "/",
      "description": "This API Server"
    }
  ],
  "paths": {
    "/": {
      "get": {
        "tags": [
          "root"
        ],
        "operationId": "system_status_route",
        "responses": {
          "200": {
            "description": "System status information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemStatusResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token"
          },
          "503": {
            "description": "Service in maintenance mode"
          }
        }
      }
    },
    "/v1/w/{workspace_id}/change-sets": {
      "get": {
        "tags": [
          "change_sets"
        ],
        "operationId": "list_change_sets",
        "parameters": [
          {
            "name": "workspace_id",
            "in": "path",
            "description": "Workspace identifier",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Change sets listed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListChangeSetV1Response"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "change_sets"
        ],
        "operationId": "create_change_set",
        "parameters": [
          {
            "name": "workspace_id",
            "in": "path",
            "description": "Workspace identifier",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateChangeSetV1Request"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Change set created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateChangeSetV1Response"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token"
          },
          "422": {
            "description": "Validation error - Invalid request data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/w/{workspace_id}/change-sets/{change_set_id}": {
      "get": {
        "tags": [
          "change_sets"
        ],
        "operationId": "get_change_set",
        "parameters": [
          {
            "name": "workspace_id",
            "in": "path",
            "description": "Workspace identifier",
            "required": true
          },
          {
            "name": "change_set_id",
            "in": "path",
            "description": "Change set identifier",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Change details retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetChangeSetV1Response"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token"
          },
          "404": {
            "description": "Change set not found"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "change_sets"
        ],
        "operationId": "abandon_change_set",
        "parameters": [
          {
            "name": "workspace_id",
            "in": "path",
            "description": "Workspace identifier",
            "required": true
          },
          {
            "name": "change_set_id",
            "in": "path",
            "description": "Change set identifier",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Change set deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteChangeSetV1Response"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/w/{workspace_id}/change-sets/{change_set_id}/actions/": {
      "get": {
        "tags": [
          "actions"
        ],
        "operationId": "get_actions",
        "parameters": [
          {
            "name": "workspace_id",
            "in": "path",
            "description": "Workspace identifier",
            "required": true
          },
          {
            "name": "change_set_id",
            "in": "path",
            "description": "Change set identifier",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Actions retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetActionsV1Response"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/w/{workspace_id}/change-sets/{change_set_id}/actions/{action_id}/cancel": {
      "post": {
        "tags": [
          "actions"
        ],
        "operationId": "cancel_action",
        "parameters": [
          {
            "name": "workspace_id",
            "in": "path",
            "description": "Workspace identifier",
            "required": true
          },
          {
            "name": "change_set_id",
            "in": "path",
            "description": "Change set identifier",
            "required": true
          },
          {
            "name": "action_id",
            "in": "path",
            "description": "Func identifier",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Action cancelled successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CancelActionV1Response"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token"
          },
          "404": {
            "description": "Action not found"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/w/{workspace_id}/change-sets/{change_set_id}/actions/{action_id}/put_on_hold": {
      "post": {
        "tags": [
          "actions"
        ],
        "operationId": "put_on_hold",
        "parameters": [
          {
            "name": "workspace_id",
            "in": "path",
            "description": "Workspace identifier",
            "required": true
          },
          {
            "name": "change_set_id",
            "in": "path",
            "description": "Change set identifier",
            "required": true
          },
          {
            "name": "action_id",
            "in": "path",
            "description": "Func identifier",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Action successfully put on hold",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PutOnHoldActionV1Response"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token"
          },
          "404": {
            "description": "Action not found"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/w/{workspace_id}/change-sets/{change_set_id}/actions/{action_id}/retry": {
      "post": {
        "tags": [
          "actions"
        ],
        "operationId": "retry_action",
        "parameters": [
          {
            "name": "workspace_id",
            "in": "path",
            "description": "Workspace identifier",
            "required": true
          },
          {
            "name": "change_set_id",
            "in": "path",
            "description": "Change set identifier",
            "required": true
          },
          {
            "name": "action_id",
            "in": "path",
            "description": "Func identifier",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Action successfully requeued",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RetryActionV1Response"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token"
          },
          "404": {
            "description": "Action not found"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/w/{workspace_id}/change-sets/{change_set_id}/components": {
      "get": {
        "tags": [
          "components"
        ],
        "operationId": "list_components",
        "parameters": [
          {
            "name": "workspace_id",
            "in": "path",
            "description": "Workspace identifier",
            "required": true
          },
          {
            "name": "change_set_id",
            "in": "path",
            "description": "Change set identifier",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Components retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListComponentsV1Response"
                },
                "example": [
                  "01H9ZQD35JPMBGHH69BT0Q79AA",
                  "01H9ZQD35JPMBGHH69BT0Q79BB",
                  "01H9ZQD35JPMBGHH69BT0Q79CC"
                ]
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "components"
        ],
        "operationId": "create_component",
        "parameters": [
          {
            "name": "workspace_id",
            "in": "path",
            "description": "Workspace identifier",
            "required": true
          },
          {
            "name": "change_set_id",
            "in": "path",
            "description": "Change set identifier",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateComponentV1Request"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Component created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateComponentV1Response"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token"
          },
          "404": {
            "description": "Component not found"
          },
          "412": {
            "description": "Precondition Failed - View not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "422": {
            "description": "Validation error - Invalid request data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/w/{workspace_id}/change-sets/{change_set_id}/components/find": {
      "get": {
        "tags": [
          "components"
        ],
        "operationId": "find_component",
        "parameters": [
          {
            "name": "workspace_id",
            "in": "path",
            "description": "Workspace identifier",
            "required": true
          },
          {
            "name": "change_set_id",
            "in": "path",
            "description": "Change set identifier",
            "required": true
          },
          {
            "name": "component",
            "in": "query",
            "required": false,
            "schema": {
              "type": [
                "string",
                "null"
              ]
            },
            "style": "form"
          },
          {
            "name": "componentId",
            "in": "query",
            "required": false,
            "schema": {
              "type": [
                "string",
                "null"
              ]
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "description": "Component retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetComponentV1Response"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token"
          },
          "404": {
            "description": "Component not found"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/w/{workspace_id}/change-sets/{change_set_id}/components/{component_id}": {
      "get": {
        "tags": [
          "components"
        ],
        "operationId": "get_component",
        "parameters": [
          {
            "name": "workspace_id",
            "in": "path",
            "description": "Workspace identifier",
            "required": true
          },
          {
            "name": "change_set_id",
            "in": "path",
            "description": "Change set identifier",
            "required": true
          },
          {
            "name": "component_id",
            "in": "path",
            "description": "Component identifier",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Component retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetComponentV1Response"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token"
          },
          "404": {
            "description": "Component not found"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "components"
        ],
        "operationId": "update_component",
        "parameters": [
          {
            "name": "workspace_id",
            "in": "path",
            "description": "Workspace identifier",
            "required": true
          },
          {
            "name": "change_set_id",
            "in": "path",
            "description": "Change set identifier",
            "required": true
          },
          {
            "name": "component_id",
            "in": "path",
            "description": "Component identifier",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateComponentV1Request"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Component updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateComponentV1Response"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token"
          },
          "404": {
            "description": "Component not found"
          },
          "412": {
            "description": "Precondition failed - Duplicate component name"
          },
          "422": {
            "description": "Validation error - Invalid request data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "components"
        ],
        "operationId": "delete_component",
        "parameters": [
          {
            "name": "workspace_id",
            "in": "path",
            "description": "Workspace identifier",
            "required": true
          },
          {
            "name": "change_set_id",
            "in": "path",
            "description": "Change set identifier",
            "required": true
          },
          {
            "name": "component_id",
            "in": "path",
            "description": "Component identifier",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Component deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteComponentV1Response"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token"
          },
          "404": {
            "description": "Component not found"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/w/{workspace_id}/change-sets/{change_set_id}/components/{component_id}/action": {
      "post": {
        "tags": [
          "components"
        ],
        "operationId": "add_action",
        "parameters": [
          {
            "name": "workspace_id",
            "in": "path",
            "description": "Workspace identifier",
            "required": true
          },
          {
            "name": "change_set_id",
            "in": "path",
            "description": "Change set identifier",
            "required": true
          },
          {
            "name": "component_id",
            "in": "path",
            "description": "Component identifier",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddActionV1Request"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Action successfully queued",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddActionV1Response"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token"
          },
          "404": {
            "description": "Component or function not found"
          },
          "409": {
            "description": "action already enqueued",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "412": {
            "description": "Precondition Failed - View not found or duplicate function name",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "422": {
            "description": "Validation error - Invalid request data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/w/{workspace_id}/change-sets/{change_set_id}/components/{component_id}/execute-management-function": {
      "post": {
        "tags": [
          "components"
        ],
        "operationId": "execute_management_function",
        "parameters": [
          {
            "name": "workspace_id",
            "in": "path",
            "description": "Workspace identifier",
            "required": true
          },
          {
            "name": "change_set_id",
            "in": "path",
            "description": "Change set identifier",
            "required": true
          },
          {
            "name": "component_id",
            "in": "path",
            "description": "Component identifier",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExecuteManagementFunctionV1Request"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Function successfully dispatched",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExecuteManagementFunctionV1Response"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token"
          },
          "404": {
            "description": "Component or function not found"
          },
          "412": {
            "description": "Precondition Failed - View not found or duplicate function name",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "422": {
            "description": "Validation error - Invalid request data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/w/{workspace_id}/change-sets/{change_set_id}/force_apply": {
      "post": {
        "tags": [
          "change_sets"
        ],
        "operationId": "force_apply",
        "parameters": [
          {
            "name": "workspace_id",
            "in": "path",
            "description": "Workspace identifier",
            "required": true
          },
          {
            "name": "change_set_id",
            "in": "path",
            "description": "Change set identifier",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Change set force applied successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForceApplyChangeSetV1Response"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/w/{workspace_id}/change-sets/{change_set_id}/funcs/runs/{func_run_id}": {
      "get": {
        "tags": [
          "funcs"
        ],
        "operationId": "get_func_run",
        "parameters": [
          {
            "name": "workspace_id",
            "in": "path",
            "description": "Workspace identifier",
            "required": true
          },
          {
            "name": "change_set_id",
            "in": "path",
            "description": "Change set identifier",
            "required": true
          },
          {
            "name": "func_run_id",
            "in": "path",
            "description": "Func run identifier",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Func Run retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetFuncRunV1Response"
                },
                "example": {
                  "funcRun": {
                    "id": "01JQCJ0AAXGX5M9QY10AVF4GK1",
                    "state": "Success",
                    "actor": "System",
                    "componentId": "01JP8KHZP3DZKGNXRP83Q6WTQ5",
                    "attributeValueId": null,
                    "componentName": "NAT Gateway IP 1",
                    "schemaName": "AWS::EC2::EIP",
                    "actionId": "01JQCHZZY99G3R0C1FA3W4AFR6",
                    "actionPrototypeId": "01JPNHEE9Z3DFW48XVZ1FX04KA",
                    "actionKind": "Destroy",
                    "actionDisplayName": "Destroy",
                    "actionOriginatingChangeSetId": "01JQCHZZVTAHHZ7DG0ZSCB9RXB",
                    "actionOriginatingChangeSetName": "2025-03-27-19:41",
                    "actionResultState": "Success",
                    "backendKind": "JsAction",
                    "backendResponseType": "Action",
                    "functionName": "Delete Asset",
                    "functionDisplayName": null,
                    "functionKind": "Action",
                    "functionDescription": null,
                    "functionLink": null,
                    "functionArgs": {
                      "properties": {
                        "domain": {
                          "Domain": "vpc",
                          "Tags": []
                        },
                        "resource": {
                          "payload": {
                            "AllocationId": "eipalloc-033720f9556a3b0c1",
                            "PublicIp": "3.213.242.163"
                          }
                        },
                        "si": {
                          "name": "NAT Gateway IP 1",
                          "resourceId": "3.213.242.163|eipalloc-033720f9556a3b0c1",
                          "type": "component"
                        }
                      }
                    },
                    "resultValue": {
                      "error": null,
                      "executionId": "01JQCJ0AAXGX5M9QY10AVF4GK1",
                      "message": null,
                      "payload": null,
                      "resourceId": null,
                      "status": "ok"
                    },
                    "logs": {
                      "id": "01JQCJ0ABJSCE01GNQDWVY1ZP5",
                      "createdAt": "2025-03-27T19:41:58.514416748Z",
                      "updatedAt": "2025-03-27T19:41:58.514416748Z",
                      "funcRunId": "01JQCJ0AAXGX5M9QY10AVF4GK1",
                      "logs": [
                        {
                          "stream": "stdout",
                          "executionId": "",
                          "level": "info",
                          "group": "log",
                          "message": "Running CLI command",
                          "timestamp": 1743104518
                        },
                        {
                          "stream": "output",
                          "executionId": "01JQCJ0AAXGX5M9QY10AVF4GK1",
                          "level": "info",
                          "group": "log",
                          "message": "Output: {\"status\":\"success\"}",
                          "timestamp": 1743104521
                        }
                      ],
                      "finalized": true
                    },
                    "createdAt": "2025-03-27T19:41:58.493298051Z",
                    "updatedAt": "2025-03-27T19:42:02.192033089Z"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token"
          },
          "404": {
            "description": "Func run not found"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/w/{workspace_id}/change-sets/{change_set_id}/funcs/{func_id}": {
      "get": {
        "tags": [
          "funcs"
        ],
        "operationId": "get_func",
        "parameters": [
          {
            "name": "workspace_id",
            "in": "path",
            "description": "Workspace identifier",
            "required": true
          },
          {
            "name": "change_set_id",
            "in": "path",
            "description": "Change set identifier",
            "required": true
          },
          {
            "name": "func_id",
            "in": "path",
            "description": "Func identifier",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Func retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetFuncV1Response"
                },
                "example": [
                  {
                    "funcId": "01JP8A3S8VDQ1KRQWQRHB1ZEB2",
                    "code": "async function main(input: Input): Promise < Output > {\n    if (!input.domain?.region) {\n        return {\n            result: \"failure\",\n            message: \"No Region Name to validate\",\n        };\n    }\n\n    const child = await siExec.waitUntilEnd(\"aws\", [\n        \"ec2\",\n        \"describe-regions\",\n        \"--region-names\",\n        input.domain?.region!,\n        \"--region\",\n        \"us-east-1\",\n    ]);\n\n    if (child.exitCode !== 0) {\n        console.error(child.stderr);\n        return {\n            result: \"failure\",\n            message: \"Error from API\"\n        }\n    }\n\n    const regionDetails = JSON.parse(child.stdout).Regions;\n    if (regionDetails.length === 0 || regionDetails.length > 1) {\n        return {\n            result: \"failure\",\n            message: \"Unable to find Region\"\n        }\n    }\n\n    if (regionDetails[0].OptInStatus === \"not-opted-in\") {\n        return {\n            result: \"failure\",\n            message: \"Region not-opted-in for use\"\n        }\n    }\n\n    return {\n        result: \"success\",\n        message: \"Region is available to use\",\n    };\n}",
                    "name": "AWS Region Validator",
                    "description": "Validates if an AWS region exists and is available for use",
                    "displayName": "Validate Region",
                    "kind": "Qualification",
                    "isLocked": false,
                    "link": "https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeRegions.html"
                  }
                ]
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token"
          },
          "404": {
            "description": "Func not found"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/w/{workspace_id}/change-sets/{change_set_id}/merge_status": {
      "get": {
        "tags": [
          "change_sets"
        ],
        "operationId": "merge_status",
        "parameters": [
          {
            "name": "workspace_id",
            "in": "path",
            "description": "Workspace identifier",
            "required": true
          },
          {
            "name": "change_set_id",
            "in": "path",
            "description": "Change set identifier",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Change set merge status retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MergeStatusV1Response"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/w/{workspace_id}/change-sets/{change_set_id}/request_approval": {
      "post": {
        "tags": [
          "change_sets"
        ],
        "operationId": "request_approval",
        "parameters": [
          {
            "name": "workspace_id",
            "in": "path",
            "description": "Workspace identifier",
            "required": true
          },
          {
            "name": "change_set_id",
            "in": "path",
            "description": "Change set identifier",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Change set approval requested successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestApprovalChangeSetV1Response"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/w/{workspace_id}/change-sets/{change_set_id}/schema": {
      "get": {
        "tags": [
          "schemas"
        ],
        "operationId": "list_schemas",
        "parameters": [
          {
            "name": "workspace_id",
            "in": "path",
            "description": "Workspace identifier",
            "required": true
          },
          {
            "name": "change_set_id",
            "in": "path",
            "description": "Change set identifier",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Schemas listed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListSchemaV1Response"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/w/{workspace_id}/change-sets/{change_set_id}/schema/find": {
      "get": {
        "tags": [
          "schemas"
        ],
        "operationId": "find_schema",
        "parameters": [
          {
            "name": "workspace_id",
            "in": "path",
            "description": "Workspace identifier",
            "required": true
          },
          {
            "name": "change_set_id",
            "in": "path",
            "description": "Change set identifier",
            "required": true
          },
          {
            "name": "schema",
            "in": "query",
            "required": false,
            "schema": {
              "type": [
                "string",
                "null"
              ]
            },
            "style": "form"
          },
          {
            "name": "schemaId",
            "in": "query",
            "required": false,
            "schema": {
              "type": [
                "string",
                "null"
              ]
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "description": "Schema retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FindSchemaV1Response"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token"
          },
          "404": {
            "description": "Schema not found"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/w/{workspace_id}/change-sets/{change_set_id}/schema/{schema_id}": {
      "get": {
        "tags": [
          "schemas"
        ],
        "operationId": "get_schema",
        "parameters": [
          {
            "name": "workspace_id",
            "in": "path",
            "description": "Workspace identifier",
            "required": true
          },
          {
            "name": "change_set_id",
            "in": "path",
            "description": "Change set identifier",
            "required": true
          },
          {
            "name": "schema_id",
            "in": "path",
            "description": "Schema identifier",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Schema retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetSchemaV1Response"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token"
          },
          "404": {
            "description": "Schema not found"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/w/{workspace_id}/change-sets/{change_set_id}/schema/{schema_id}/variant/default": {
      "get": {
        "tags": [
          "schemas"
        ],
        "operationId": "get_default_variant",
        "parameters": [
          {
            "name": "workspace_id",
            "in": "path",
            "description": "Workspace identifier",
            "required": true
          },
          {
            "name": "change_set_id",
            "in": "path",
            "description": "Change set identifier",
            "required": true
          },
          {
            "name": "schema_id",
            "in": "path",
            "description": "Schema identifier",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Schema variant retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetSchemaVariantV1Response"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token"
          },
          "404": {
            "description": "Schema variant not found"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/w/{workspace_id}/change-sets/{change_set_id}/schema/{schema_id}/variant/{schema_variant_id}": {
      "get": {
        "tags": [
          "schemas"
        ],
        "operationId": "get_variant",
        "parameters": [
          {
            "name": "workspace_id",
            "in": "path",
            "description": "Workspace identifier",
            "required": true
          },
          {
            "name": "change_set_id",
            "in": "path",
            "description": "Change set identifier",
            "required": true
          },
          {
            "name": "schema_id",
            "in": "path",
            "description": "Schema identifier",
            "required": true
          },
          {
            "name": "schema_variant_id",
            "in": "path",
            "description": "Schema variant identifier",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Schema variant retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetSchemaVariantV1Response"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token"
          },
          "404": {
            "description": "Schema variant not found"
          },
          "412": {
            "description": "Schema variant not found for schema"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/w/{workspace_id}/change-sets/{change_set_id}/secrets": {
      "get": {
        "tags": [
          "secrets"
        ],
        "operationId": "get_secrets",
        "parameters": [
          {
            "name": "workspace_id",
            "in": "path",
            "description": "Workspace identifier",
            "required": true
          },
          {
            "name": "change_set_id",
            "in": "path",
            "description": "Change set identifier",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Secrets retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HashMap"
                },
                "example": {
                  "aws_credentials": {
                    "definition": {
                      "secretDefinition": "aws_credentials",
                      "formData": [
                        {
                          "name": "access_key_id",
                          "kind": "string"
                        },
                        {
                          "name": "secret_access_key",
                          "kind": "password"
                        },
                        {
                          "name": "region",
                          "kind": "string"
                        },
                        {
                          "name": "default_output",
                          "kind": "string"
                        }
                      ]
                    },
                    "secrets": [
                      {
                        "id": "01HAXYZF3GC9CYA6ZVSM3E4YHH",
                        "name": "Production AWS Key",
                        "definition": "aws_credentials",
                        "description": "AWS credentials for production environment"
                      },
                      {
                        "id": "01HAXYZF3GC9CYA6ZVSM3E4YHI",
                        "name": "Development AWS Key",
                        "definition": "aws_credentials",
                        "description": "AWS credentials for development environment"
                      }
                    ]
                  },
                  "docker_registry": {
                    "definition": {
                      "secretDefinition": "docker_registry",
                      "formData": [
                        {
                          "name": "username",
                          "kind": "string"
                        },
                        {
                          "name": "password",
                          "kind": "password"
                        },
                        {
                          "name": "registry_url",
                          "kind": "string"
                        }
                      ]
                    },
                    "secrets": [
                      {
                        "id": "01HAXYZF3GC9CYA6ZVSM3E4YHJ",
                        "name": "DockerHub Access",
                        "definition": "docker_registry",
                        "description": "DockerHub registry credentials"
                      }
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "secrets"
        ],
        "operationId": "create_secret",
        "parameters": [
          {
            "name": "workspace_id",
            "in": "path",
            "description": "Workspace identifier",
            "required": true
          },
          {
            "name": "change_set_id",
            "in": "path",
            "description": "Change set identifier",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSecretV1Request"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Secret created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateSecretV1Response"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token"
          },
          "422": {
            "description": "Validation error - Invalid request data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/w/{workspace_id}/change-sets/{change_set_id}/secrets/{secret_id}": {
      "put": {
        "tags": [
          "secrets"
        ],
        "operationId": "update_secret",
        "parameters": [
          {
            "name": "workspace_id",
            "in": "path",
            "description": "Workspace identifier",
            "required": true
          },
          {
            "name": "change_set_id",
            "in": "path",
            "description": "Change set identifier",
            "required": true
          },
          {
            "name": "secret_id",
            "in": "path",
            "description": "Secret identifier",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSecretV1Request"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Secret updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateSecretV1Response"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token"
          },
          "404": {
            "description": "Secret not found"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "secrets"
        ],
        "operationId": "delete_secret",
        "parameters": [
          {
            "name": "workspace_id",
            "in": "path",
            "description": "Workspace identifier",
            "required": true
          },
          {
            "name": "change_set_id",
            "in": "path",
            "description": "Change set identifier",
            "required": true
          },
          {
            "name": "secret_id",
            "in": "path",
            "description": "Secret identifier",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Secret deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteSecretV1Response"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token"
          },
          "404": {
            "description": "Secret not found"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/whoami": {
      "get": {
        "tags": [
          "whoami"
        ],
        "operationId": "whoami",
        "responses": {
          "200": {
            "description": "Successfully retrieved user information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WhoamiResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or expired token"
          },
          "403": {
            "description": "Forbidden - Insufficient permissions"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ActionReference": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "function"
            ],
            "properties": {
              "function": {
                "type": "string",
                "example": "Create Asset"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "actionPrototypeId"
            ],
            "properties": {
              "actionPrototypeId": {
                "type": "string",
                "example": "01H9ZQD35JPMBGHH69BT0Q79VY"
              }
            }
          }
        ],
        "description": "Reference to a management function by either name or ID.\nThis allows clients to use the more human-friendly name approach\nor the more precise ID approach when working with actions."
      },
      "ActionV1RequestPath": {
        "type": "object",
        "required": [
          "action_id"
        ],
        "properties": {
          "action_id": {
            "type": "string"
          }
        }
      },
      "ActionViewV1": {
        "type": "object",
        "required": [
          "id",
          "prototypeId",
          "componentId",
          "name",
          "description",
          "kind",
          "state",
          "originatingChangeSetId",
          "funcRunId"
        ],
        "properties": {
          "componentId": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "funcRunId": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "originatingChangeSetId": {
            "type": "string"
          },
          "prototypeId": {
            "type": "string"
          },
          "state": {
            "type": "string"
          }
        }
      },
      "AddActionV1Request": {
        "type": "object",
        "required": [
          "action"
        ],
        "properties": {
          "action": {
            "$ref": "#/components/schemas/ActionReference"
          }
        },
        "example": {
          "action": {
            "function": "Create Asset"
          }
        }
      },
      "AddActionV1Response": {
        "type": "object",
        "required": [
          "success"
        ],
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          }
        },
        "example": {
          "success": true
        }
      },
      "ApiError": {
        "type": "object",
        "description": "Standard error response format for v1 API",
        "required": [
          "message",
          "statusCode"
        ],
        "properties": {
          "code": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32",
            "example": 4001
          },
          "message": {
            "type": "string",
            "example": "Invalid request data"
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "example": 422,
            "minimum": 0
          }
        },
        "example": {
          "message": "Invalid request data",
          "statusCode": 422,
          "code": 4001
        }
      },
      "ApiSuccess_String": {
        "type": "object",
        "description": "Standard success response format for v1 API",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "string"
          }
        }
      },
      "CancelActionV1Response": {
        "type": "object",
        "required": [
          "success"
        ],
        "properties": {
          "success": {
            "type": "boolean"
          }
        }
      },
      "ChangeSetViewV1": {
        "type": "object",
        "required": [
          "id",
          "name",
          "status",
          "isHead"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "isHead": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "status": {
            "type": "string"
          }
        }
      },
      "ComponentPropKey": {
        "oneOf": [
          {
            "type": "string"
          },
          {
            "$ref": "#/components/schemas/DomainPropPath"
          }
        ]
      },
      "ComponentPropViewV1": {
        "type": "object",
        "required": [
          "id",
          "propId",
          "value",
          "path"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "path": {
            "type": "string",
            "example": "path/to/prop"
          },
          "propId": {
            "type": "string"
          },
          "value": {
            "type": "object"
          }
        }
      },
      "ComponentReference": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "component"
            ],
            "properties": {
              "component": {
                "type": "string"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "componentId"
            ],
            "properties": {
              "componentId": {
                "type": "string",
                "example": "01H9ZQD35JPMBGHH69BT0Q79VY"
              }
            }
          }
        ],
        "example": {
          "componentId": "01H9ZQD35JPMBGHH69BT0Q79VY"
        }
      },
      "ComponentV1RequestPath": {
        "type": "object",
        "required": [
          "component_id"
        ],
        "properties": {
          "component_id": {
            "type": "string"
          }
        }
      },
      "ComponentViewV1": {
        "type": "object",
        "required": [
          "id",
          "schemaId",
          "schemaVariantId",
          "sockets",
          "domainProps",
          "resourceProps",
          "name",
          "resourceId",
          "toDelete",
          "canBeUpgraded",
          "connections",
          "views"
        ],
        "properties": {
          "canBeUpgraded": {
            "type": "boolean"
          },
          "connections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConnectionViewV1"
            }
          },
          "domainProps": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ComponentPropViewV1"
            }
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "resourceId": {
            "type": "string"
          },
          "resourceProps": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ComponentPropViewV1"
            }
          },
          "schemaId": {
            "type": "string"
          },
          "schemaVariantId": {
            "type": "string"
          },
          "sockets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SocketViewV1"
            }
          },
          "toDelete": {
            "type": "boolean"
          },
          "views": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ViewV1"
            }
          }
        }
      },
      "Connection": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "from",
              "to"
            ],
            "properties": {
              "from": {
                "$ref": "#/components/schemas/ConnectionPoint"
              },
              "to": {
                "type": "string"
              }
            },
            "example": {
              "from": {
                "componentId": "01H9ZQD35JPMBGHH69BT0Q79VY",
                "socketName": "output"
              },
              "to": "ThisComponentInputSocketName"
            }
          },
          {
            "type": "object",
            "required": [
              "from",
              "to"
            ],
            "properties": {
              "from": {
                "type": "string"
              },
              "to": {
                "$ref": "#/components/schemas/ConnectionPoint"
              }
            },
            "example": {
              "from": "ThisComponentOutputSocketName",
              "to": {
                "componentId": "01H9ZQD35JPMBGHH69BT0Q79VY",
                "socketName": "InputSocketName"
              }
            }
          }
        ]
      },
      "ConnectionDetails": {
        "type": "object",
        "properties": {
          "add": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Connection"
            },
            "example": [
              {
                "from": {
                  "component": "OtherComponentName",
                  "socketName": "output"
                },
                "to": "ThisComponentInputSocketName"
              },
              {
                "from": "ThisComponentOutputSocketName",
                "to": {
                  "componentId": "01H9ZQD35JPMBGHH69BT0Q79VY",
                  "socketName": "InputSocketName"
                }
              }
            ]
          },
          "remove": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Connection"
            },
            "example": [
              {
                "from": {
                  "componentId": "01H9ZQD35JPMBGHH69BT0Q79VY",
                  "socketName": "output"
                },
                "to": "ThisComponentInputSocketName"
              },
              {
                "from": "ThisComponentOutputSocketName",
                "to": {
                  "component": "OtherComponentName",
                  "socketName": "InputSocketName"
                }
              }
            ]
          }
        }
      },
      "ConnectionPoint": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ComponentReference"
          },
          {
            "type": "object",
            "required": [
              "socketName"
            ],
            "properties": {
              "socketName": {
                "type": "string"
              }
            }
          }
        ],
        "example": {
          "componentId": "01H9ZQD35JPMBGHH69BT0Q79VY",
          "socketName": "OutputSocketName"
        }
      },
      "ConnectionViewV1": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "incoming"
            ],
            "properties": {
              "incoming": {
                "$ref": "#/components/schemas/IncomingConnectionViewV1"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "outgoing"
            ],
            "properties": {
              "outgoing": {
                "$ref": "#/components/schemas/OutgoingConnectionViewV1"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "managing"
            ],
            "properties": {
              "managing": {
                "$ref": "#/components/schemas/ManagingConnectionViewV1"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "managedBy"
            ],
            "properties": {
              "managedBy": {
                "$ref": "#/components/schemas/ManagedByConnectionViewV1"
              }
            }
          }
        ]
      },
      "CreateChangeSetV1Request": {
        "type": "object",
        "required": [
          "changeSetName"
        ],
        "properties": {
          "changeSetName": {
            "type": "string",
            "example": "My new feature"
          }
        }
      },
      "CreateChangeSetV1Response": {
        "type": "object",
        "required": [
          "changeSet"
        ],
        "properties": {
          "changeSet": {
            "$ref": "#/components/schemas/ChangeSetViewV1"
          }
        }
      },
      "CreateComponentV1Request": {
        "type": "object",
        "required": [
          "name",
          "schemaName"
        ],
        "properties": {
          "connections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Connection"
            },
            "example": [
              {
                "from": {
                  "component": "OtherComponentName",
                  "socketName": "SocketName"
                },
                "to": "ThisComponentInputSocketName"
              },
              {
                "from": {
                  "componentId": "01H9ZQD35JPMBGHH69BT0Q79VY",
                  "socketName": "SocketName"
                },
                "to": "ThisComponentInputSocketName"
              },
              {
                "from": "ThisComponentOutputSocketName",
                "to": {
                  "component": "OtherComponentName",
                  "socketName": "InputSocketName"
                }
              },
              {
                "from": "ThisComponentOutputSocketName",
                "to": {
                  "componentId": "01H9ZQD35JPMBGHH69BT0Q79VY",
                  "socketName": "InputSocketName"
                }
              }
            ]
          },
          "domain": {
            "type": "object",
            "additionalProperties": {},
            "propertyNames": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/components/schemas/DomainPropPath"
                }
              ]
            },
            "example": {
              "propId1": "value1",
              "path/to/prop": "value2"
            }
          },
          "name": {
            "type": "string",
            "example": "MyComponentName"
          },
          "schemaName": {
            "type": "string",
            "example": "AWS::EC2::Instance"
          },
          "secrets": {
            "type": "object",
            "additionalProperties": {},
            "propertyNames": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/components/schemas/SecretPropPath"
                }
              ]
            },
            "example": {
              "secretDefinitionName": "secretName"
            }
          },
          "viewName": {
            "type": [
              "string",
              "null"
            ],
            "example": "MyView"
          }
        }
      },
      "CreateComponentV1Response": {
        "type": "object",
        "required": [
          "component"
        ],
        "properties": {
          "component": {
            "$ref": "#/components/schemas/ComponentViewV1"
          }
        }
      },
      "CreateSecretV1Request": {
        "type": "object",
        "required": [
          "name",
          "definitionName",
          "description"
        ],
        "properties": {
          "definitionName": {
            "type": "string",
            "example": "aws_credentials"
          },
          "description": {
            "type": "string",
            "example": "AWS credentials for production environment"
          },
          "name": {
            "type": "string",
            "example": "AWS Access Key"
          },
          "rawData": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "propertyNames": {
              "type": "string"
            },
            "example": {
              "access_key_id": "AKIAIOSFODNN7EXAMPLE",
              "secret_access_key": "wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY",
              "region": "us-west-2",
              "default_output": "json"
            }
          }
        }
      },
      "CreateSecretV1Response": {
        "type": "object",
        "required": [
          "secret"
        ],
        "properties": {
          "secret": {
            "$ref": "#/components/schemas/SecretV1"
          }
        }
      },
      "DeleteChangeSetV1Response": {
        "type": "object",
        "required": [
          "success"
        ],
        "properties": {
          "success": {
            "type": "boolean",
            "example": "true"
          }
        }
      },
      "DeleteComponentV1Response": {
        "type": "object",
        "required": [
          "status"
        ],
        "properties": {
          "status": {
            "type": "string",
            "example": "MarkedForDeletion"
          }
        }
      },
      "DeleteSecretV1Response": {
        "type": "object",
        "required": [
          "success"
        ],
        "properties": {
          "success": {
            "type": "boolean"
          }
        }
      },
      "DomainPropPath": {
        "type": "string",
        "description": "A prop path, starting from root/domain, with / instead of PROP_PATH_SEPARATOR as its separator"
      },
      "ErrorDetail": {
        "type": "object",
        "required": [
          "message",
          "code",
          "status_code"
        ],
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "status_code": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "required": [
          "error"
        ],
        "properties": {
          "error": {
            "$ref": "#/components/schemas/ErrorDetail"
          }
        }
      },
      "ExecuteManagementFunctionV1Request": {
        "type": "object",
        "required": [
          "managementFunction"
        ],
        "properties": {
          "managementFunction": {
            "$ref": "#/components/schemas/ManagementFunctionReference"
          },
          "viewName": {
            "type": [
              "string",
              "null"
            ],
            "example": "MyViewName"
          }
        },
        "example": {
          "viewName": "MyViewName",
          "managementFunction": {
            "function": "CreateVpc"
          }
        }
      },
      "ExecuteManagementFunctionV1Response": {
        "type": "object",
        "required": [
          "funcRunId"
        ],
        "properties": {
          "funcRunId": {
            "type": "string",
            "example": "01H9ZQD35JPMBGHH69BT0Q79VY"
          }
        }
      },
      "FindComponentV1Params": {
        "type": "object",
        "required": [
          "componentId"
        ],
        "properties": {
          "component": {
            "type": [
              "string",
              "null"
            ]
          },
          "componentId": {
            "type": "string"
          }
        }
      },
      "FindSchemaV1Params": {
        "type": "object",
        "required": [
          "schemaId"
        ],
        "properties": {
          "schema": {
            "type": [
              "string",
              "null"
            ]
          },
          "schemaId": {
            "type": "string"
          }
        }
      },
      "FindSchemaV1Response": {
        "type": "object",
        "required": [
          "schemaName",
          "schemaId",
          "category",
          "installed"
        ],
        "properties": {
          "category": {
            "type": "string"
          },
          "installed": {
            "type": "boolean"
          },
          "schemaId": {
            "type": "string"
          },
          "schemaName": {
            "type": "string"
          }
        }
      },
      "ForceApplyChangeSetV1Response": {
        "type": "object",
        "required": [
          "success"
        ],
        "properties": {
          "success": {
            "type": "boolean",
            "example": "true"
          }
        }
      },
      "FuncRunLogViewV1": {
        "type": "object",
        "required": [
          "id",
          "createdAt",
          "updatedAt",
          "funcRunId",
          "logs",
          "finalized"
        ],
        "properties": {
          "createdAt": {
            "type": "string",
            "example": "2025-03-27T19:41:58.514416748Z"
          },
          "finalized": {
            "type": "boolean",
            "example": true
          },
          "funcRunId": {
            "type": "string",
            "example": "01JQCJ0AAXGX5M9QY10AVF4GK1"
          },
          "id": {
            "type": "string",
            "example": "01JQCJ0ABJSCE01GNQDWVY1ZP5"
          },
          "logs": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "example": [
              {
                "stream": "stdout",
                "executionId": "",
                "level": "info",
                "group": "log",
                "message": "Running CLI command: \"aws 'cloudcontrol' 'delete-resource'\"",
                "timestamp": 1743104518
              },
              {
                "stream": "output",
                "executionId": "01JQCJ0AAXGX5M9QY10AVF4GK1",
                "level": "info",
                "group": "log",
                "message": "Output: {\"protocol\":\"result\",\"status\":\"success\"}",
                "timestamp": 1743104521
              }
            ]
          },
          "updatedAt": {
            "type": "string",
            "example": "2025-03-27T19:41:58.514416748Z"
          }
        }
      },
      "FuncRunV1RequestPath": {
        "type": "object",
        "required": [
          "func_run_id"
        ],
        "properties": {
          "func_run_id": {
            "type": "string"
          }
        }
      },
      "FuncRunViewV1": {
        "type": "object",
        "required": [
          "id",
          "state",
          "attributeValueId",
          "componentId",
          "componentName",
          "schemaName",
          "actionId",
          "actionPrototypeId",
          "actionKind",
          "actionDisplayName",
          "actionOriginatingChangeSetId",
          "actionOriginatingChangeSetName",
          "actionResultState",
          "backendKind",
          "backendResponseType",
          "functionName",
          "functionDisplayName",
          "functionKind",
          "functionDescription",
          "functionLink",
          "functionArgs",
          "functionCodeBase64",
          "createdAt",
          "updatedAt"
        ],
        "properties": {
          "actionDisplayName": {
            "type": "string",
            "example": "Destroy"
          },
          "actionId": {
            "type": "string",
            "example": "01JQCHZZY99G3R0C1FA3W4AFR6"
          },
          "actionKind": {
            "type": "string",
            "example": "Destroy"
          },
          "actionOriginatingChangeSetId": {
            "type": "string",
            "example": "01JQCHZZVTAHHZ7DG0ZSCB9RXB"
          },
          "actionOriginatingChangeSetName": {
            "type": "string",
            "example": "2025-03-27-19:41"
          },
          "actionPrototypeId": {
            "type": "string",
            "example": "01JPNHEE9Z3DFW48XVZ1FX04KA"
          },
          "actionResultState": {
            "type": "string",
            "example": "Success"
          },
          "attributeValueId": {
            "type": "string",
            "example": "null"
          },
          "backendKind": {
            "type": "string",
            "example": "JsAction"
          },
          "backendResponseType": {
            "type": "string",
            "example": "Action"
          },
          "componentId": {
            "type": "string",
            "example": "01JP8KHZP3DZKGNXRP83Q6WTQ5"
          },
          "componentName": {
            "type": "string",
            "example": "NAT Gateway IP 1"
          },
          "createdAt": {
            "type": "string",
            "example": "2025-03-27T19:41:58.493298051Z"
          },
          "functionArgs": {},
          "functionCodeBase64": {
            "type": "string",
            "example": "YXN5bmMgZnVuY3Rpb24gbWFpbihjb21wb2..."
          },
          "functionDescription": {
            "type": "string",
            "example": "null"
          },
          "functionDisplayName": {
            "type": "string",
            "example": "null"
          },
          "functionKind": {
            "type": "string",
            "example": "Action"
          },
          "functionLink": {
            "type": "string",
            "example": "null"
          },
          "functionName": {
            "type": "string",
            "example": "Delete Asset"
          },
          "id": {
            "type": "string",
            "example": "01JQCJ0AAXGX5M9QY10AVF4GK1"
          },
          "logs": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/FuncRunLogViewV1"
              }
            ]
          },
          "resultValue": {},
          "schemaName": {
            "type": "string",
            "example": "AWS::EC2::EIP"
          },
          "state": {
            "type": "string",
            "example": "Success"
          },
          "updatedAt": {
            "type": "string",
            "example": "2025-03-27T19:42:02.192033089Z"
          }
        }
      },
      "GetActionsV1Response": {
        "type": "object",
        "required": [
          "actions"
        ],
        "properties": {
          "actions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActionViewV1"
            }
          }
        },
        "example": {
          "actions": [
            {
              "id": "01H9ZQD35JPMBGHH69BT0Q79VY",
              "prototypeId": "01H9ZQD35JPMBGHH69BT0Q79AB",
              "componentId": "01H9ZQD35JPMBGHH69BT0Q79CD",
              "name": "Create EC2 Instance",
              "description": "Provisions a new EC2 instance in AWS",
              "kind": "Create",
              "state": "Pending",
              "originatingChangeSetId": "01H9ZQD35JPMBGHH69BT0Q79EF",
              "funcRunId": "01H9ZQD35JPMBGHH69BT0Q79GH"
            }
          ]
        }
      },
      "GetChangeSetV1Response": {
        "type": "object",
        "required": [
          "changeSet"
        ],
        "properties": {
          "changeSet": {
            "$ref": "#/components/schemas/ChangeSetViewV1"
          }
        }
      },
      "GetComponentV1Response": {
        "type": "object",
        "required": [
          "component",
          "managementFunctions",
          "actionFunctions"
        ],
        "properties": {
          "actionFunctions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetComponentV1ResponseActionFunction"
            },
            "example": [
              {
                "prototypeId": "01HAXYZF3GC9CYA6ZVSM3E4YGG",
                "funcName": "Terminate Instance"
              }
            ]
          },
          "component": {
            "$ref": "#/components/schemas/ComponentViewV1"
          },
          "managementFunctions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetComponentV1ResponseManagementFunction"
            },
            "example": [
              {
                "managementPrototypeId": "01HAXYZF3GC9CYA6ZVSM3E4YFF",
                "funcName": "Start Instance"
              }
            ]
          }
        }
      },
      "GetComponentV1ResponseActionFunction": {
        "type": "object",
        "required": [
          "prototypeId",
          "funcName"
        ],
        "properties": {
          "funcName": {
            "type": "string",
            "example": "Terminate Instance"
          },
          "prototypeId": {
            "type": "string",
            "example": "01HAXYZF3GC9CYA6ZVSM3E4YGG"
          }
        }
      },
      "GetComponentV1ResponseManagementFunction": {
        "type": "object",
        "required": [
          "managementPrototypeId",
          "funcName"
        ],
        "properties": {
          "funcName": {
            "type": "string",
            "example": "Start Instance"
          },
          "managementPrototypeId": {
            "type": "string",
            "example": "01HAXYZF3GC9CYA6ZVSM3E4YFF"
          }
        }
      },
      "GetFuncRunV1Response": {
        "type": "object",
        "required": [
          "funcRun"
        ],
        "properties": {
          "funcRun": {
            "$ref": "#/components/schemas/FuncRunViewV1"
          }
        }
      },
      "GetFuncV1Response": {
        "type": "object",
        "required": [
          "name",
          "description",
          "displayName",
          "kind",
          "isLocked",
          "code",
          "link"
        ],
        "properties": {
          "code": {
            "type": "string",
            "example": "async function main(input: Input): Promise < Output > {\n    if (!input.domain?.region) {\n        return {\n            result: \"failure\",\n            message: \"No Region Name to validate\",\n        };\n    }\n\n    const child = await siExec.waitUntilEnd(\"aws\", [\n        \"ec2\",\n        \"describe-regions\",\n        \"--region-names\",\n        input.domain?.region!,\n        \"--region\",\n        \"us-east-1\",\n    ]);\n\n    if (child.exitCode !== 0) {\n        console.error(child.stderr);\n        return {\n            result: \"failure\",\n            message: \"Error from API\"\n        }\n    }\n\n    const regionDetails = JSON.parse(child.stdout).Regions;\n    if (regionDetails.length === 0 || regionDetails.length > 1) {\n        return {\n            result: \"failure\",\n            message: \"Unable to find Region\"\n        }\n    }\n\n    if (regionDetails[0].OptInStatus === \"not-opted-in\") {\n        return {\n            result: \"failure\",\n            message: \"Region not-opted-in for use\"\n        }\n    }\n\n    return {\n        result: \"success\",\n        message: \"Region is available to use\",\n    };\n}"
          },
          "description": {
            "type": "string",
            "example": "Validates if an AWS region exists and is available for use"
          },
          "displayName": {
            "type": "string",
            "example": "Validate Region"
          },
          "isLocked": {
            "type": "boolean",
            "example": false
          },
          "kind": {
            "type": "string",
            "example": "Qualification"
          },
          "link": {
            "type": "string",
            "example": "https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeRegions.html"
          },
          "name": {
            "type": "string",
            "example": "AWS Region Validator"
          }
        }
      },
      "GetSchemaV1Response": {
        "type": "object",
        "required": [
          "name",
          "defaultVariantId",
          "variantIds"
        ],
        "properties": {
          "defaultVariantId": {
            "type": "string",
            "example": "01H9ZQD35JPMBGHH69BT0Q79VZ"
          },
          "name": {
            "type": "string",
            "example": "AWS::EC2::Instance"
          },
          "variantIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "01H9ZQD35JPMBGHH69BT0Q79VZ",
              "01H9ZQD35JPMBGHH69BT0Q79VY"
            ]
          }
        }
      },
      "GetSchemaVariantV1Response": {
        "type": "object",
        "required": [
          "variantId",
          "displayName",
          "category",
          "color",
          "isLocked",
          "description",
          "link",
          "assetFuncId",
          "variantFuncIds",
          "isDefaultVariant"
        ],
        "properties": {
          "assetFuncId": {
            "type": "string",
            "example": "01H9ZQD35JPMBGHH69BT0Q75XY"
          },
          "category": {
            "type": "string",
            "example": "AWS::EC2"
          },
          "color": {
            "type": "string",
            "example": "#FF5733"
          },
          "description": {
            "type": "string",
            "example": "Amazon EC2 Instance resource type"
          },
          "displayName": {
            "type": "string",
            "example": "AWS EC2 Instance"
          },
          "isDefaultVariant": {
            "type": "boolean",
            "example": true
          },
          "isLocked": {
            "type": "boolean",
            "example": false
          },
          "link": {
            "type": "string",
            "example": "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-instance.html"
          },
          "variantFuncIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "01H9ZQD35JPMBGHH69BT0Q75AA",
              "01H9ZQD35JPMBGHH69BT0Q75BB"
            ]
          },
          "variantId": {
            "type": "string",
            "example": "01H9ZQD35JPMBGHH69BT0Q79VZ"
          }
        }
      },
      "HashMap": {
        "type": "object",
        "additionalProperties": {
          "type": "object",
          "required": [
            "definition",
            "secrets"
          ],
          "properties": {
            "definition": {
              "$ref": "#/components/schemas/SecretDefinitionV1"
            },
            "secrets": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SecretV1"
              },
              "example": [
                {
                  "id": "01HAXYZF3GC9CYA6ZVSM3E4YHH",
                  "name": "Production AWS Key",
                  "definition": "aws_credentials",
                  "description": "AWS credentials for production environment"
                },
                {
                  "id": "01HAXYZF3GC9CYA6ZVSM3E4YHI",
                  "name": "Development AWS Key",
                  "definition": "aws_credentials",
                  "description": "AWS credentials for development environment"
                }
              ]
            }
          }
        },
        "propertyNames": {
          "type": "string"
        }
      },
      "IncomingConnectionViewV1": {
        "type": "object",
        "required": [
          "fromComponentId",
          "fromComponentName",
          "from",
          "to"
        ],
        "properties": {
          "from": {
            "type": "string"
          },
          "fromComponentId": {
            "type": "string"
          },
          "fromComponentName": {
            "type": "string"
          },
          "to": {
            "type": "string"
          }
        }
      },
      "ListChangeSetV1Response": {
        "type": "object",
        "required": [
          "changeSets"
        ],
        "properties": {
          "changeSets": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "example": "[{\"id\":\"01H9ZQD35JPMBGHH69BT0Q79VY\",\"name\":\"Add new feature\",\"status\":\"Open\",\"isHead\": \"false\"},{\"id\":\"01H9ZQE356JPMBGHH69BT0Q70UO\",\"name\":\"HEAD\",\"status\":\"Open\", \"isHead\": \"true\"}]"
          }
        }
      },
      "ListComponentsV1Response": {
        "type": "object",
        "required": [
          "components"
        ],
        "properties": {
          "components": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "01H9ZQD35JPMBGHH69BT0Q79AA",
              "01H9ZQD35JPMBGHH69BT0Q79BB",
              "01H9ZQD35JPMBGHH69BT0Q79CC"
            ]
          }
        }
      },
      "ListSchemaV1Response": {
        "type": "object",
        "required": [
          "schemas"
        ],
        "properties": {
          "schemas": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "example": "[{\"schemaId\":\"01H9ZQD35JPMBGHH69BT0Q79VY\",\"schemaName\":\"AWS::EC2::Instance\",\"category\":\"AWS::EC2\",\"installed\": \"true\"}]"
          }
        }
      },
      "ManagedByConnectionViewV1": {
        "type": "object",
        "required": [
          "componentId",
          "componentName"
        ],
        "properties": {
          "componentId": {
            "type": "string"
          },
          "componentName": {
            "type": "string"
          }
        }
      },
      "ManagementFunctionReference": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "function"
            ],
            "properties": {
              "function": {
                "type": "string",
                "example": "CreateVpc"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "managementPrototypeId"
            ],
            "properties": {
              "managementPrototypeId": {
                "type": "string",
                "example": "01H9ZQD35JPMBGHH69BT0Q79VY"
              }
            }
          }
        ],
        "description": "Reference to a management function by either name or ID.\nThis allows clients to use the more human-friendly name approach\nor the more precise ID approach when working with management functions."
      },
      "ManagingConnectionViewV1": {
        "type": "object",
        "required": [
          "componentId",
          "componentName"
        ],
        "properties": {
          "componentId": {
            "type": "string"
          },
          "componentName": {
            "type": "string"
          }
        }
      },
      "MergeStatusV1Response": {
        "type": "object",
        "description": "Response for merge status",
        "required": [
          "changeSet",
          "actions"
        ],
        "properties": {
          "actions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MergeStatusV1ResponseAction"
            }
          },
          "changeSet": {
            "type": "object"
          }
        },
        "example": {
          "changeSet": {
            "id": "01FXNV4P306V3KGZ73YSVN8A60",
            "name": "My feature",
            "status": "Ready"
          },
          "actions": [
            {
              "id": "01H9ZQD35JPMBGHH69BT0Q79VY",
              "component": {
                "id": "01H9ZQD35JPMBGHH69BT0Q79AB",
                "name": "my-ec2-instance"
              },
              "state": "Pending",
              "kind": "Create",
              "name": "Create EC2 Instance"
            }
          ]
        }
      },
      "MergeStatusV1ResponseAction": {
        "type": "object",
        "description": "Action item in merge status response",
        "required": [
          "id",
          "state",
          "kind",
          "name"
        ],
        "properties": {
          "component": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/MergeStatusV1ResponseActionComponent"
              }
            ]
          },
          "id": {
            "type": "string",
            "example": "01H9ZQD35JPMBGHH69BT0Q79VY"
          },
          "kind": {
            "type": "string",
            "example": "Create"
          },
          "name": {
            "type": "string",
            "example": "Create EC2 Instance"
          },
          "state": {
            "type": "string",
            "example": "Pending"
          }
        },
        "example": {
          "id": "01H9ZQD35JPMBGHH69BT0Q79VY",
          "component": {
            "id": "01H9ZQD35JPMBGHH69BT0Q79AB",
            "name": "my-ec2-instance"
          },
          "state": "Pending",
          "kind": "Create",
          "name": "Create EC2 Instance"
        }
      },
      "MergeStatusV1ResponseActionComponent": {
        "type": "object",
        "description": "Component details in action response",
        "required": [
          "id",
          "name"
        ],
        "properties": {
          "id": {
            "type": "string",
            "example": "01H9ZQD35JPMBGHH69BT0Q79AB"
          },
          "name": {
            "type": "string",
            "example": "my-ec2-instance"
          }
        },
        "example": {
          "id": "01H9ZQD35JPMBGHH69BT0Q79AB",
          "name": "my-ec2-instance"
        }
      },
      "OutgoingConnectionViewV1": {
        "type": "object",
        "required": [
          "toComponentId",
          "toComponentName",
          "from"
        ],
        "properties": {
          "from": {
            "type": "string"
          },
          "toComponentId": {
            "type": "string"
          },
          "toComponentName": {
            "type": "string"
          }
        }
      },
      "OutputLineViewV1": {
        "type": "object",
        "required": [
          "stream",
          "executionId",
          "level",
          "message",
          "timestamp"
        ],
        "properties": {
          "executionId": {
            "type": "string",
            "example": "01JQCJ0AAXGX5M9QY10AVF4GK1"
          },
          "group": {
            "type": [
              "string",
              "null"
            ],
            "example": "log"
          },
          "level": {
            "type": "string",
            "example": "info"
          },
          "message": {
            "type": "string",
            "example": "Running CLI command: \"aws 'cloudcontrol' 'delete-resource'\""
          },
          "stream": {
            "type": "string",
            "example": "stdout"
          },
          "timestamp": {
            "type": "integer",
            "format": "int64",
            "example": 1743104518,
            "minimum": 0
          }
        }
      },
      "PutOnHoldActionV1Response": {
        "type": "object",
        "required": [
          "success"
        ],
        "properties": {
          "success": {
            "type": "boolean"
          }
        }
      },
      "RequestApprovalChangeSetV1Response": {
        "type": "object",
        "required": [
          "success"
        ],
        "properties": {
          "success": {
            "type": "boolean",
            "example": "true"
          }
        }
      },
      "RetryActionV1Response": {
        "type": "object",
        "required": [
          "success"
        ],
        "properties": {
          "success": {
            "type": "boolean"
          }
        }
      },
      "SchemaV1RequestPath": {
        "type": "object",
        "required": [
          "schema_id"
        ],
        "properties": {
          "schema_id": {
            "type": "string"
          }
        }
      },
      "SchemaVariantV1RequestPath": {
        "type": "object",
        "required": [
          "schema_id",
          "schema_variant_id"
        ],
        "properties": {
          "schema_id": {
            "type": "string"
          },
          "schema_variant_id": {
            "type": "string"
          }
        }
      },
      "SecretDefinitionV1": {
        "type": "object",
        "required": [
          "secretDefinition",
          "formData"
        ],
        "properties": {
          "formData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SecretFormDataV1"
            },
            "example": [
              {
                "name": "access_key_id",
                "kind": "string"
              },
              {
                "name": "secret_access_key",
                "kind": "password"
              }
            ]
          },
          "secretDefinition": {
            "type": "string",
            "example": "aws_credentials"
          }
        }
      },
      "SecretFormDataV1": {
        "type": "object",
        "required": [
          "name",
          "kind"
        ],
        "properties": {
          "kind": {
            "type": "string",
            "example": "string"
          },
          "name": {
            "type": "string",
            "example": "access_key_id"
          }
        }
      },
      "SecretPropKey": {
        "oneOf": [
          {
            "type": "string"
          },
          {
            "$ref": "#/components/schemas/SecretPropPath"
          }
        ]
      },
      "SecretPropPath": {
        "type": "string"
      },
      "SecretV1": {
        "type": "object",
        "required": [
          "id",
          "name",
          "definition",
          "description"
        ],
        "properties": {
          "definition": {
            "type": "string",
            "example": "aws_credentials"
          },
          "description": {
            "type": "string",
            "example": "AWS credentials for production environment"
          },
          "id": {
            "type": "string",
            "example": "01HAXYZF3GC9CYA6ZVSM3E4YHH"
          },
          "name": {
            "type": "string",
            "example": "Production AWS Key"
          }
        }
      },
      "SocketDirection": {
        "type": "string",
        "enum": [
          "input",
          "output"
        ]
      },
      "SocketViewV1": {
        "type": "object",
        "required": [
          "id",
          "name",
          "direction",
          "arity",
          "value"
        ],
        "properties": {
          "arity": {
            "type": "string",
            "example": "one"
          },
          "direction": {
            "$ref": "#/components/schemas/SocketDirection"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "value": {
            "type": "object"
          }
        }
      },
      "SystemStatusResponse": {
        "type": "object",
        "required": [
          "What is this?",
          "API Documentation"
        ],
        "properties": {
          "API Documentation": {
            "type": "string",
            "example": "Available at /swagger-ui"
          },
          "What is this?": {
            "type": "string",
            "example": "I am luminork, the new System Initiative External API application"
          }
        }
      },
      "UpdateComponentV1Request": {
        "type": "object",
        "properties": {
          "connectionChanges": {
            "$ref": "#/components/schemas/ConnectionDetails"
          },
          "domain": {
            "type": "object",
            "additionalProperties": {},
            "propertyNames": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/components/schemas/DomainPropPath"
                }
              ]
            },
            "example": {
              "propId1": "value1",
              "path/to/prop": "value2"
            }
          },
          "name": {
            "type": [
              "string",
              "null"
            ],
            "example": "MyUpdatedComponentName"
          },
          "secrets": {
            "type": "object",
            "additionalProperties": {},
            "propertyNames": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/components/schemas/SecretPropPath"
                }
              ]
            },
            "example": {
              "secretDefinitionName": "secretName"
            }
          },
          "unset": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "propId1",
              "path/to/prop"
            ]
          }
        }
      },
      "UpdateComponentV1Response": {
        "type": "object",
        "required": [
          "component"
        ],
        "properties": {
          "component": {
            "$ref": "#/components/schemas/ComponentViewV1"
          }
        }
      },
      "UpdateSecretV1Request": {
        "type": "object",
        "required": [
          "id",
          "name",
          "description"
        ],
        "properties": {
          "description": {
            "type": "string",
            "example": "Updated AWS Secret Key for EC2 access"
          },
          "id": {
            "type": "string",
            "example": "01HAXYZF3GC9CYA6ZVSM3E4YHH"
          },
          "name": {
            "type": "string",
            "example": "AWS Access Key"
          },
          "rawData": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "propertyNames": {
              "type": "string"
            },
            "example": {
              "access_key_id": "AKIAIOSFODNN7EXAMPLE",
              "secret_access_key": "wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY",
              "region": "us-west-2",
              "default_output": "json"
            }
          }
        }
      },
      "UpdateSecretV1Response": {
        "type": "object",
        "required": [
          "secret"
        ],
        "properties": {
          "secret": {
            "$ref": "#/components/schemas/SecretV1"
          }
        }
      },
      "ViewV1": {
        "type": "object",
        "required": [
          "id",
          "name",
          "isDefault"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "isDefault": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "WhoamiResponse": {
        "type": "object",
        "required": [
          "userId",
          "userEmail",
          "workspaceId",
          "token"
        ],
        "properties": {
          "token": {
            "type": "string",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
          },
          "userEmail": {
            "type": "string",
            "example": "user@example.com"
          },
          "userId": {
            "type": "string",
            "example": "01H9ZQCBJ3E7HBTRN3J58JQX8K"
          },
          "workspaceId": {
            "type": "string",
            "example": "01H9ZQD35JPMBGHH69BT0Q79VY"
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "root",
      "description": "Root API endpoints"
    },
    {
      "name": "whoami",
      "description": "User identity endpoints"
    },
    {
      "name": "change_sets",
      "description": "Change set management endpoints"
    },
    {
      "name": "components",
      "description": "Components management endpoints"
    },
    {
      "name": "schemas",
      "description": "Schemsa management endpoints"
    },
    {
      "name": "actions",
      "description": "Actions management endpoints"
    },
    {
      "name": "secrets",
      "description": "Secrets management endpoints"
    },
    {
      "name": "funcs",
      "description": "Functions management endpoints"
    }
  ]
}