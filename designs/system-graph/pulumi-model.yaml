# Types of Nodes
string: string

number: number

bool: bool

map: 
  - key: value (string | number | boolean )

# const config = new pulumi.Config("si-graphql-infra");
Config:
  input:
    id: string

# const repo = new awsx.ecr.Repository("si");
# export const repoUrl = repo.repository.repositoryUrl;
ContainerRegistry:
  input:
    name: string
  output:
    url: string


# const eip = new aws.ec2.Eip("si-graphql");
Eip:
  input:
    id: string


# const ssh_key = new aws.ec2.KeyPair("si-key", {
#   publicKey: "ssh-rsa ..."
# });
KeyPair:
  input:
    publicKey: string
  output:
    publicKey: string


# const vpc = awsx.ec2.Vpc.getDefault();
Vpc:
  output:
    default: map


# const lbsg = new awsx.ec2.SecurityGroup("si-graphql-lb", {
#   vpc,
#   egress: [
#     { protocol: "-1", fromPort:0, toPort: 0, cidrBlocks: [ "0.0.0.0/0" ] },
#   ],
# });
# let group = new aws.ec2.SecurityGroup("si-graphql", {
#     ingress: [
#         { protocol: "tcp", fromPort: 22, toPort: 22, cidrBlocks: ["0.0.0.0/0"] },
#         { protocol: "tcp", fromPort: 4000, toPort: 4000, cidrBlocks: ["0.0.0.0/0"] },
#     ],
#     egress: [
#       { protocol: "-1", fromPort:0, toPort: 0, cidrBlocks: [ "0.0.0.0/0" ] },
#     ]
# });
SecurityGroup:
  input:
    name: string
    vpc:
    rules:
      - NetworkingRule
  output: map

NetworkingRule:
  input:
    type: string
    protocol: string
    fromPort: number
    toPort: number
    cidrBlocks:
      - string
  output: map


# const alb = new awsx.lb.ApplicationLoadBalancer("si-graphql-lb", {
#   securityGroups: [ lbsg ],
#   external: true
# });
ApplicationLoadBalancer:
  input:
    name: string
    securityGroups:
      - name: string
        vpc:
        rules:
          -
    external: boolean
  output: map


# const tg1 = alb.createTargetGroup("si-graphql-tg", { port: 4000, protocol: "HTTP" });
# const httpsListener = tg1.createListener("https-listener", {
#   port: 443,
#   protocol: "HTTPS",
#   // The ARN here must be manually created by the AWS Certificate Manager
#   certificateArn: "arn:aws:acm:us-west-1:835304779882:certificate/a3a34e4c-57c0-4e5d-8a9e-b2c5ece487a6",
# });
# tg1.attachTarget("si-graphql-backend", server);
TargetGroupp:
  input:
    name: string
    port: number
    protocol: string
    targets:
      - port: number
        protocol: string
  output: map

Listener:
  input:
    name: string
  config:
    port:
    protocol:
    certificate:
    defaultAction

Action:
  type:
  redirect:
    protocol:
    port:
      statusCode:

# let server = new aws.ec2.Instance("si-graphql", {
#     instanceType: size,
#     securityGroups: [ group.name ], // reference the security group resource above
#     ami: ami,
#     keyName: ssh_key.id,
#     userData: userData,
#     tags: {
#       use: "si-graphql",
#     }
# });
server:
  name: si-graphql
  instanceType: size,
  - securityGroups: group.name
  ami: ami,
  keyName: ssh_key.id,
  userData: userData,
  tags:
    use: "si-graphql"

