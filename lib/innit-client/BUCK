load("@prelude-si//:macros.bzl", "rust_library")

rust_library(
    name = "innit-client",
    deps = [
        "//lib/config-file:config-file",
        "//lib/buck2-resources:buck2-resources",
        "//lib/innit-core:innit-core",
        "//lib/si-data-acmpca:si-data-acmpca",
        "//lib/si-settings:si-settings",
        "//lib/si-std:si-std",
        "//lib/si-tls:si-tls",
        "//lib/telemetry-rs:telemetry",

        "//third-party/rust:async-trait",
        "//third-party/rust:base64",
        "//third-party/rust:derive_builder",
        "//third-party/rust:remain",
        "//third-party/rust:reqwest",
        "//third-party/rust:serde",
        "//third-party/rust:serde_json",
        "//third-party/rust:tokio",
        "//third-party/rust:thiserror",
        "//third-party/rust:url",
    ],
    srcs = glob([
        "src/**/*.rs",
    ]),
    resources = {
        "innit-client.dev.crt": "//lib/innit-client:innit-client.dev.crt",
        "innit-client.dev.key": "//lib/innit-client:innit-client.dev.key",
    },
)

rust_test(
    name = "test-integration",
    deps = [
        ":innit-client",

        "//lib/innit-server:innit-server",
        "//lib/si-tls:si-tls",

        "//third-party/rust:base64",
        "//third-party/rust:hyper",
        "//third-party/rust:rcgen",
        "//third-party/rust:rustls",
        "//third-party/rust:time",
        "//third-party/rust:tokio",
        "//third-party/rust:tokio-util",
        "//third-party/rust:url",
    ],
    srcs = glob([
        "tests/**/*.rs",
    ]),
    crate_root = "tests/integration.rs",
    env = {
        "CARGO_PKG_NAME": "integration",
        "RUSTC_BOOTSTRAP": "1",
        "CI": "buildkite",
    },
)

export_file(
    name = "innit-client.dev.crt",
    visibility = ["PUBLIC"],
)

export_file(
    name = "innit-client.dev.key",
    visibility = ["PUBLIC"],
)
