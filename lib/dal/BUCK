load(
    "@prelude-si//:macros.bzl",
    "rust_library",
    "rust_test",
)

rust_library(
    name = "dal",
    deps = [
        "//lib/council-server:council-server",
        "//lib/nats-subscriber:nats-subscriber",
        "//lib/object-tree:object-tree",
        "//lib/si-data-nats:si-data-nats",
        "//lib/si-data-pg:si-data-pg",
        "//lib/si-pkg:si-pkg",
        "//lib/telemetry-rs:telemetry",
        "//lib/veritech-client:veritech-client",
        "//third-party/rust:async-recursion",
        "//third-party/rust:async-trait",
        "//third-party/rust:base64",
        "//third-party/rust:blake3",
        "//third-party/rust:chrono",
        "//third-party/rust:convert_case",
        "//third-party/rust:derive_more",
        "//third-party/rust:diff",
        "//third-party/rust:dyn-clone",
        "//third-party/rust:futures",
        "//third-party/rust:hex",
        "//third-party/rust:iftree",
        "//third-party/rust:itertools",
        "//third-party/rust:jwt-simple",
        "//third-party/rust:lazy_static",
        "//third-party/rust:once_cell",
        "//third-party/rust:paste",
        "//third-party/rust:petgraph",
        "//third-party/rust:postgres-types",
        "//third-party/rust:pretty_assertions_sorted",
        "//third-party/rust:rand",
        "//third-party/rust:refinery",
        "//third-party/rust:regex",
        "//third-party/rust:remain",
        "//third-party/rust:serde",
        "//third-party/rust:serde-aux",
        "//third-party/rust:serde_json",
        "//third-party/rust:serde_with",
        "//third-party/rust:sodiumoxide",
        "//third-party/rust:strum",
        "//third-party/rust:thiserror",
        "//third-party/rust:tokio",
        "//third-party/rust:tokio-stream",
        "//third-party/rust:ulid",
        "//third-party/rust:url",
    ],
    srcs = glob([
        "src/**/*.rs",
        "src/builtins/func/**",
        "src/builtins/schema/data/**/*.json",
        "src/builtins/schema/definitions/**/*.json",
        "src/migrations/**/*.sql",
        "src/queries/**/*.sql",
    ]),
    env = {
        "CARGO_MANIFEST_DIR": ".",
    },
    test_unit_deps = [
        "//third-party/rust:tempfile",
    ],
    extra_test_targets = [":test-integration"],
)

rust_test(
    name = "test-integration",
    deps = [
        "//lib/dal-test:dal-test",
        "//lib/si-pkg:si-pkg",
        "//lib/veritech-client:veritech-client",
        "//third-party/rust:base64",
        "//third-party/rust:itertools",
        "//third-party/rust:pretty_assertions_sorted",
        "//third-party/rust:serde_json",
        "//third-party/rust:sodiumoxide",
        "//third-party/rust:strum",
        "//third-party/rust:tempfile",
        "//third-party/rust:tokio",
        "//third-party/rust:ulid",
        ":dal",
    ],
    crate_root = "tests/integration.rs",
    srcs = glob([
       "tests/**/*.rs",
        "tests/integration_test/external/ignition/*.ign",
    ]),
    env = {
        "CARGO_PKG_NAME": "integration",
    },
    resources = {
        "cyclone": "//bin/cyclone:cyclone",
        "dev.decryption.key": "//lib/cyclone-server:dev.decryption.key",
        "dev.encryption.key": "//lib/cyclone-server:dev.encryption.key",
        "dev.jwt_signing_private_key.pem": "//config/keys:dev.jwt_signing_private_key.pem",
        "dev.jwt_signing_public_key.pem": "//config/keys:dev.jwt_signing_public_key.pem",
        "lang-js": "//bin/lang-js:bin",
        "pkgs_path": "//pkgs:pkgs",
        "prod.jwt_signing_public_key.pem": "//config/keys:prod.jwt_signing_public_key.pem",
    },
)
