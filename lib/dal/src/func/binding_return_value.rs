use serde::{Deserialize, Serialize};
use serde_json::Value as JsonValue;
use si_data::{NatsError, NatsTxn, PgError, PgTxn};
use telemetry::prelude::*;
use thiserror::Error;
use veritech::OutputStream;

use crate::func::execution::FuncExecution;
use crate::func::execution::{FuncExecutionError, FuncExecutionPk};
use crate::{
    impl_standard_model, pk, standard_model, standard_model_accessor, standard_model_belongs_to,
    Func, HistoryActor, HistoryEventError, StandardModel, StandardModelError, Tenancy, Timestamp,
    Visibility,
};

use super::{
    binding::{FuncBinding, FuncBindingId},
    FuncId,
};

#[derive(Error, Debug)]
pub enum FuncBindingReturnValueError {
    #[error("error serializing/deserializing json: {0}")]
    SerdeJson(#[from] serde_json::Error),
    #[error("pg error: {0}")]
    Pg(#[from] PgError),
    #[error("nats txn error: {0}")]
    Nats(#[from] NatsError),
    #[error("history event error: {0}")]
    HistoryEvent(#[from] HistoryEventError),
    #[error("standard model error: {0}")]
    StandardModelError(#[from] StandardModelError),
    #[error("function execution error: {0}")]
    FuncExecutionError(#[from] FuncExecutionError),
}

pub type FuncBindingReturnValueResult<T> = Result<T, FuncBindingReturnValueError>;

pk!(FuncBindingReturnValuePk);
pk!(FuncBindingReturnValueId);

#[derive(Deserialize, Serialize, Debug, Clone, PartialEq, Eq)]
pub struct FuncBindingReturnValue {
    pk: FuncBindingReturnValuePk,
    id: FuncBindingReturnValueId,
    // The unprocessed return value is the "real" result, unprocessed for any other behavior
    // This is useful when a function binding result is used as a generator for other
    // results - it lets us see where things came from.
    unprocessed_value: Option<serde_json::Value>,
    // The processed return value.
    value: Option<serde_json::Value>,
    // Function Execution IDs can be attached later for lookup and are optional.
    func_execution_pk: FuncExecutionPk,
    #[serde(flatten)]
    tenancy: Tenancy,
    #[serde(flatten)]
    timestamp: Timestamp,
    #[serde(flatten)]
    visibility: Visibility,
}

impl_standard_model! {
    model: FuncBindingReturnValue,
    pk: FuncBindingReturnValuePk,
    id: FuncBindingReturnValueId,
    table_name: "func_binding_return_values",
    history_event_label_base: "function_binding_return_value",
    history_event_message_name: "Function Binding Return Value"
}

// If this binding result was generated by another func binding result, track it here.
//  generated_by_func_binding_result_id: Option<FuncBindingResultId>,
//  func_binding_id: FuncBindingId,
//  func_id: FuncId,

impl FuncBindingReturnValue {
    #[allow(clippy::too_many_arguments)]
    #[tracing::instrument(skip(txn, nats))]
    pub async fn new(
        txn: &PgTxn<'_>,
        nats: &NatsTxn,
        tenancy: &Tenancy,
        visibility: &Visibility,
        history_actor: &HistoryActor,
        unprocessed_value: Option<serde_json::Value>,
        value: Option<serde_json::Value>,
        func_id: FuncId,
        func_binding_id: FuncBindingId,
        func_execution_pk: FuncExecutionPk,
    ) -> FuncBindingReturnValueResult<Self> {
        let row = txn
            .query_one(
                "SELECT object FROM func_binding_return_value_create_v1($1, $2, $3, $4, $5)",
                &[
                    &tenancy,
                    &visibility,
                    &unprocessed_value,
                    &value,
                    &func_execution_pk,
                ],
            )
            .await?;
        let object: FuncBindingReturnValue = standard_model::finish_create_from_row(
            txn,
            nats,
            tenancy,
            visibility,
            history_actor,
            row,
        )
        .await?;
        object
            .set_func(txn, nats, visibility, history_actor, &func_id)
            .await?;
        object
            .set_func_binding(txn, nats, visibility, history_actor, &func_binding_id)
            .await?;

        Ok(object)
    }

    pub async fn get_output_stream(
        &self,
        txn: &PgTxn<'_>,
    ) -> FuncBindingReturnValueResult<Option<Vec<OutputStream>>> {
        let func_execution = FuncExecution::get_by_pk(txn, &self.func_execution_pk).await?;
        Ok(func_execution.into_output_stream())
    }

    // NOTE(nick,fletcher): we might not need these. They might be DB-only.
    // pub fn set_func_execution_op(&mut self, func_execution_id: Option<FuncExecutionId) {
    //     self.func_execution_id = Some(func_execution_id);
    // }
    //
    // pub fn unset_func_execution_id(&mut self) {/
    //     self.func_execution_id = None;
    // }
    //
    // pub fn func_execution_id(&self) -> Option<FuncExecutionId> {
    //     self.func_execution_id
    // }

    // FIXME: replace with a formal SQL upsert. Return the object if found.
    // pub fn upsert(
    //     txn: &PgTxn<'_>,
    //     nats: &NatsTxn,
    //     tenancy: &Tenancy,
    //     visibility: &Visibility,
    //     history_actor: &HistoryActor,
    //     unprocessed_value: Option<serde_json::Value>,
    //     value: Option<serde_json::Value>,
    //     func_id: FuncId,
    //     func_binding_id: FuncBindingId,
    // ) -> Self {
    //     Self::find_by_attr(txn, tenancy, visibility, "id", &())
    // }

    standard_model_accessor!(
        unprocessed_value,
        OptionJson<JsonValue>,
        FuncBindingReturnValueResult
    );
    standard_model_accessor!(value, OptionJson<JsonValue>, FuncBindingReturnValueResult);

    standard_model_belongs_to!(
        lookup_fn: func,
        set_fn: set_func,
        unset_fn: unset_func,
        table: "func_binding_return_value_belongs_to_func",
        model_table: "funcs",
        belongs_to_id: FuncId,
        returns: Func,
        result: FuncBindingReturnValueResult,
    );

    standard_model_belongs_to!(
        lookup_fn: func_binding,
        set_fn: set_func_binding,
        unset_fn: unset_func_binding,
        table: "func_binding_return_value_belongs_to_func_binding",
        model_table: "func_bindings",
        belongs_to_id: FuncBindingId,
        returns: FuncBinding,
        result: FuncBindingReturnValueResult,
    );
}
